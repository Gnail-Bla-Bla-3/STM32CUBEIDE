
EdisonsActualRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0800e55c  0800e55c  0000f55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6f8  0800e6f8  000100c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6f8  0800e6f8  0000f6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e700  0800e700  000100c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e700  0800e700  0000f700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e704  0800e704  0000f704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  0800e708  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000100c0  2**0
                  CONTENTS
 10 .bss          0000590c  200000c0  200000c0  000100c0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200059cc  200059cc  000100c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000100c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000262d4  00000000  00000000  000100f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005529  00000000  00000000  000363c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f58  00000000  00000000  0003b8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000186f  00000000  00000000  0003d848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002614e  00000000  00000000  0003f0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025c47  00000000  00000000  00065205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2120  00000000  00000000  0008ae4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  0016cf6c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008858  00000000  00000000  0016cff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  0017584c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e544 	.word	0x0800e544

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	0800e544 	.word	0x0800e544

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <BMI088_delay_ms>:


}

void BMI088_delay_ms(uint16_t ms)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
    while(ms--)
 800057a:	e003      	b.n	8000584 <BMI088_delay_ms+0x14>
    {
        BMI088_delay_us(1000);
 800057c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000580:	f000 f80a 	bl	8000598 <BMI088_delay_us>
    while(ms--)
 8000584:	88fb      	ldrh	r3, [r7, #6]
 8000586:	1e5a      	subs	r2, r3, #1
 8000588:	80fa      	strh	r2, [r7, #6]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1f6      	bne.n	800057c <BMI088_delay_ms+0xc>
    }
}
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <BMI088_delay_us>:

void BMI088_delay_us(uint16_t us)
{
 8000598:	b480      	push	{r7}
 800059a:	b089      	sub	sp, #36	@ 0x24
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	80fb      	strh	r3, [r7, #6]

    uint32_t ticks = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 80005b6:	4b19      	ldr	r3, [pc, #100]	@ (800061c <BMI088_delay_us+0x84>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 80005bc:	88fb      	ldrh	r3, [r7, #6]
 80005be:	22a8      	movs	r2, #168	@ 0xa8
 80005c0:	fb02 f303 	mul.w	r3, r2, r3
 80005c4:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 80005c6:	4b15      	ldr	r3, [pc, #84]	@ (800061c <BMI088_delay_us+0x84>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 80005cc:	4b13      	ldr	r3, [pc, #76]	@ (800061c <BMI088_delay_us+0x84>)
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d0f8      	beq.n	80005cc <BMI088_delay_us+0x34>
        {
            if (tnow < told)
 80005da:	693a      	ldr	r2, [r7, #16]
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d206      	bcs.n	80005f0 <BMI088_delay_us+0x58>
            {
                tcnt += told - tnow;
 80005e2:	69fa      	ldr	r2, [r7, #28]
 80005e4:	693b      	ldr	r3, [r7, #16]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	69ba      	ldr	r2, [r7, #24]
 80005ea:	4413      	add	r3, r2
 80005ec:	61bb      	str	r3, [r7, #24]
 80005ee:	e007      	b.n	8000600 <BMI088_delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	1ad2      	subs	r2, r2, r3
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	4413      	add	r3, r2
 80005fa:	69ba      	ldr	r2, [r7, #24]
 80005fc:	4413      	add	r3, r2
 80005fe:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8000600:	693b      	ldr	r3, [r7, #16]
 8000602:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000604:	69ba      	ldr	r2, [r7, #24]
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	429a      	cmp	r2, r3
 800060a:	d200      	bcs.n	800060e <BMI088_delay_us+0x76>
        tnow = SysTick->VAL;
 800060c:	e7de      	b.n	80005cc <BMI088_delay_us+0x34>
            {
                break;
 800060e:	bf00      	nop
            }
        }
    }


}
 8000610:	bf00      	nop
 8000612:	3724      	adds	r7, #36	@ 0x24
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000e010 	.word	0xe000e010

08000620 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000624:	4b04      	ldr	r3, [pc, #16]	@ (8000638 <BMI088_ACCEL_NS_L+0x18>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a04      	ldr	r2, [pc, #16]	@ (800063c <BMI088_ACCEL_NS_L+0x1c>)
 800062a:	8811      	ldrh	r1, [r2, #0]
 800062c:	2200      	movs	r2, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f006 f928 	bl	8006884 <HAL_GPIO_WritePin>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000000 	.word	0x20000000
 800063c:	20000004 	.word	0x20000004

08000640 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8000644:	4b04      	ldr	r3, [pc, #16]	@ (8000658 <BMI088_ACCEL_NS_H+0x18>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a04      	ldr	r2, [pc, #16]	@ (800065c <BMI088_ACCEL_NS_H+0x1c>)
 800064a:	8811      	ldrh	r1, [r2, #0]
 800064c:	2201      	movs	r2, #1
 800064e:	4618      	mov	r0, r3
 8000650:	f006 f918 	bl	8006884 <HAL_GPIO_WritePin>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000000 	.word	0x20000000
 800065c:	20000004 	.word	0x20000004

08000660 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8000664:	4b04      	ldr	r3, [pc, #16]	@ (8000678 <BMI088_GYRO_NS_L+0x18>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a04      	ldr	r2, [pc, #16]	@ (800067c <BMI088_GYRO_NS_L+0x1c>)
 800066a:	8811      	ldrh	r1, [r2, #0]
 800066c:	2200      	movs	r2, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f006 f908 	bl	8006884 <HAL_GPIO_WritePin>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000008 	.word	0x20000008
 800067c:	2000000c 	.word	0x2000000c

08000680 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8000684:	4b04      	ldr	r3, [pc, #16]	@ (8000698 <BMI088_GYRO_NS_H+0x18>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a04      	ldr	r2, [pc, #16]	@ (800069c <BMI088_GYRO_NS_H+0x1c>)
 800068a:	8811      	ldrh	r1, [r2, #0]
 800068c:	2201      	movs	r2, #1
 800068e:	4618      	mov	r0, r3
 8000690:	f006 f8f8 	bl	8006884 <HAL_GPIO_WritePin>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000008 	.word	0x20000008
 800069c:	2000000c 	.word	0x2000000c

080006a0 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af02      	add	r7, sp, #8
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 80006aa:	f107 020f 	add.w	r2, r7, #15
 80006ae:	1df9      	adds	r1, r7, #7
 80006b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	4803      	ldr	r0, [pc, #12]	@ (80006c8 <BMI088_read_write_byte+0x28>)
 80006ba:	f007 fe41 	bl	8008340 <HAL_SPI_TransmitReceive>
    return rx_data;
 80006be:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000073c 	.word	0x2000073c

080006cc <BMI088_accel_init>:

    return error;
}

uint8_t BMI088_accel_init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	71bb      	strb	r3, [r7, #6]
    uint8_t write_reg_num = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]

    //check communication
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 80006da:	f7ff ffa1 	bl	8000620 <BMI088_ACCEL_NS_L>
 80006de:	2080      	movs	r0, #128	@ 0x80
 80006e0:	f7ff ffde 	bl	80006a0 <BMI088_read_write_byte>
 80006e4:	2055      	movs	r0, #85	@ 0x55
 80006e6:	f7ff ffdb 	bl	80006a0 <BMI088_read_write_byte>
 80006ea:	2055      	movs	r0, #85	@ 0x55
 80006ec:	f7ff ffd8 	bl	80006a0 <BMI088_read_write_byte>
 80006f0:	4603      	mov	r3, r0
 80006f2:	71bb      	strb	r3, [r7, #6]
 80006f4:	f7ff ffa4 	bl	8000640 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80006f8:	2096      	movs	r0, #150	@ 0x96
 80006fa:	f7ff ff4d 	bl	8000598 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 80006fe:	f7ff ff8f 	bl	8000620 <BMI088_ACCEL_NS_L>
 8000702:	2080      	movs	r0, #128	@ 0x80
 8000704:	f7ff ffcc 	bl	80006a0 <BMI088_read_write_byte>
 8000708:	2055      	movs	r0, #85	@ 0x55
 800070a:	f7ff ffc9 	bl	80006a0 <BMI088_read_write_byte>
 800070e:	2055      	movs	r0, #85	@ 0x55
 8000710:	f7ff ffc6 	bl	80006a0 <BMI088_read_write_byte>
 8000714:	4603      	mov	r3, r0
 8000716:	71bb      	strb	r3, [r7, #6]
 8000718:	f7ff ff92 	bl	8000640 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800071c:	2096      	movs	r0, #150	@ 0x96
 800071e:	f7ff ff3b 	bl	8000598 <BMI088_delay_us>

    //accel software reset
    BMI088_accel_write_single_reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 8000722:	f7ff ff7d 	bl	8000620 <BMI088_ACCEL_NS_L>
 8000726:	21b6      	movs	r1, #182	@ 0xb6
 8000728:	207e      	movs	r0, #126	@ 0x7e
 800072a:	f000 fa21 	bl	8000b70 <BMI088_write_single_reg>
 800072e:	f7ff ff87 	bl	8000640 <BMI088_ACCEL_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 8000732:	2050      	movs	r0, #80	@ 0x50
 8000734:	f7ff ff1c 	bl	8000570 <BMI088_delay_ms>

    //check communication is normal after reset
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8000738:	f7ff ff72 	bl	8000620 <BMI088_ACCEL_NS_L>
 800073c:	2080      	movs	r0, #128	@ 0x80
 800073e:	f7ff ffaf 	bl	80006a0 <BMI088_read_write_byte>
 8000742:	2055      	movs	r0, #85	@ 0x55
 8000744:	f7ff ffac 	bl	80006a0 <BMI088_read_write_byte>
 8000748:	2055      	movs	r0, #85	@ 0x55
 800074a:	f7ff ffa9 	bl	80006a0 <BMI088_read_write_byte>
 800074e:	4603      	mov	r3, r0
 8000750:	71bb      	strb	r3, [r7, #6]
 8000752:	f7ff ff75 	bl	8000640 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8000756:	2096      	movs	r0, #150	@ 0x96
 8000758:	f7ff ff1e 	bl	8000598 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 800075c:	f7ff ff60 	bl	8000620 <BMI088_ACCEL_NS_L>
 8000760:	2080      	movs	r0, #128	@ 0x80
 8000762:	f7ff ff9d 	bl	80006a0 <BMI088_read_write_byte>
 8000766:	2055      	movs	r0, #85	@ 0x55
 8000768:	f7ff ff9a 	bl	80006a0 <BMI088_read_write_byte>
 800076c:	2055      	movs	r0, #85	@ 0x55
 800076e:	f7ff ff97 	bl	80006a0 <BMI088_read_write_byte>
 8000772:	4603      	mov	r3, r0
 8000774:	71bb      	strb	r3, [r7, #6]
 8000776:	f7ff ff63 	bl	8000640 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800077a:	2096      	movs	r0, #150	@ 0x96
 800077c:	f7ff ff0c 	bl	8000598 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_ACC_CHIP_ID_VALUE)
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	2b1e      	cmp	r3, #30
 8000784:	d001      	beq.n	800078a <BMI088_accel_init+0xbe>
    {
        return BMI088_NO_SENSOR;
 8000786:	23ff      	movs	r3, #255	@ 0xff
 8000788:	e052      	b.n	8000830 <BMI088_accel_init+0x164>
    }

    //set accel sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 800078a:	2300      	movs	r3, #0
 800078c:	71fb      	strb	r3, [r7, #7]
 800078e:	e04b      	b.n	8000828 <BMI088_accel_init+0x15c>
    {

        BMI088_accel_write_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], write_BMI088_accel_reg_data_error[write_reg_num][1]);
 8000790:	f7ff ff46 	bl	8000620 <BMI088_ACCEL_NS_L>
 8000794:	79fa      	ldrb	r2, [r7, #7]
 8000796:	4928      	ldr	r1, [pc, #160]	@ (8000838 <BMI088_accel_init+0x16c>)
 8000798:	4613      	mov	r3, r2
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	4413      	add	r3, r2
 800079e:	440b      	add	r3, r1
 80007a0:	7818      	ldrb	r0, [r3, #0]
 80007a2:	79fa      	ldrb	r2, [r7, #7]
 80007a4:	4924      	ldr	r1, [pc, #144]	@ (8000838 <BMI088_accel_init+0x16c>)
 80007a6:	4613      	mov	r3, r2
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	4413      	add	r3, r2
 80007ac:	440b      	add	r3, r1
 80007ae:	3301      	adds	r3, #1
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	4619      	mov	r1, r3
 80007b4:	f000 f9dc 	bl	8000b70 <BMI088_write_single_reg>
 80007b8:	f7ff ff42 	bl	8000640 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80007bc:	2096      	movs	r0, #150	@ 0x96
 80007be:	f7ff feeb 	bl	8000598 <BMI088_delay_us>

        BMI088_accel_read_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], res);
 80007c2:	f7ff ff2d 	bl	8000620 <BMI088_ACCEL_NS_L>
 80007c6:	79fa      	ldrb	r2, [r7, #7]
 80007c8:	491b      	ldr	r1, [pc, #108]	@ (8000838 <BMI088_accel_init+0x16c>)
 80007ca:	4613      	mov	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	440b      	add	r3, r1
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff60 	bl	80006a0 <BMI088_read_write_byte>
 80007e0:	2055      	movs	r0, #85	@ 0x55
 80007e2:	f7ff ff5d 	bl	80006a0 <BMI088_read_write_byte>
 80007e6:	2055      	movs	r0, #85	@ 0x55
 80007e8:	f7ff ff5a 	bl	80006a0 <BMI088_read_write_byte>
 80007ec:	4603      	mov	r3, r0
 80007ee:	71bb      	strb	r3, [r7, #6]
 80007f0:	f7ff ff26 	bl	8000640 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80007f4:	2096      	movs	r0, #150	@ 0x96
 80007f6:	f7ff fecf 	bl	8000598 <BMI088_delay_us>

        if (res != write_BMI088_accel_reg_data_error[write_reg_num][1])
 80007fa:	79fa      	ldrb	r2, [r7, #7]
 80007fc:	490e      	ldr	r1, [pc, #56]	@ (8000838 <BMI088_accel_init+0x16c>)
 80007fe:	4613      	mov	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	4413      	add	r3, r2
 8000804:	440b      	add	r3, r1
 8000806:	3301      	adds	r3, #1
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	79ba      	ldrb	r2, [r7, #6]
 800080c:	429a      	cmp	r2, r3
 800080e:	d008      	beq.n	8000822 <BMI088_accel_init+0x156>
        {
            return write_BMI088_accel_reg_data_error[write_reg_num][2];
 8000810:	79fa      	ldrb	r2, [r7, #7]
 8000812:	4909      	ldr	r1, [pc, #36]	@ (8000838 <BMI088_accel_init+0x16c>)
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	440b      	add	r3, r1
 800081c:	3302      	adds	r3, #2
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e006      	b.n	8000830 <BMI088_accel_init+0x164>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	3301      	adds	r3, #1
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2b05      	cmp	r3, #5
 800082c:	d9b0      	bls.n	8000790 <BMI088_accel_init+0xc4>
        }
    }
    return BMI088_NO_ERROR;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000018 	.word	0x20000018

0800083c <BMI088_gyro_init>:

uint8_t BMI088_gyro_init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	71bb      	strb	r3, [r7, #6]

    //check communication
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800084a:	f7ff ff09 	bl	8000660 <BMI088_GYRO_NS_L>
 800084e:	1dbb      	adds	r3, r7, #6
 8000850:	4619      	mov	r1, r3
 8000852:	2000      	movs	r0, #0
 8000854:	f000 f9a0 	bl	8000b98 <BMI088_read_single_reg>
 8000858:	f7ff ff12 	bl	8000680 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800085c:	2096      	movs	r0, #150	@ 0x96
 800085e:	f7ff fe9b 	bl	8000598 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8000862:	f7ff fefd 	bl	8000660 <BMI088_GYRO_NS_L>
 8000866:	1dbb      	adds	r3, r7, #6
 8000868:	4619      	mov	r1, r3
 800086a:	2000      	movs	r0, #0
 800086c:	f000 f994 	bl	8000b98 <BMI088_read_single_reg>
 8000870:	f7ff ff06 	bl	8000680 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8000874:	2096      	movs	r0, #150	@ 0x96
 8000876:	f7ff fe8f 	bl	8000598 <BMI088_delay_us>

    //reset the gyro sensor
    BMI088_gyro_write_single_reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 800087a:	f7ff fef1 	bl	8000660 <BMI088_GYRO_NS_L>
 800087e:	21b6      	movs	r1, #182	@ 0xb6
 8000880:	2014      	movs	r0, #20
 8000882:	f000 f975 	bl	8000b70 <BMI088_write_single_reg>
 8000886:	f7ff fefb 	bl	8000680 <BMI088_GYRO_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 800088a:	2050      	movs	r0, #80	@ 0x50
 800088c:	f7ff fe70 	bl	8000570 <BMI088_delay_ms>
    //check commiunication is normal after reset
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8000890:	f7ff fee6 	bl	8000660 <BMI088_GYRO_NS_L>
 8000894:	1dbb      	adds	r3, r7, #6
 8000896:	4619      	mov	r1, r3
 8000898:	2000      	movs	r0, #0
 800089a:	f000 f97d 	bl	8000b98 <BMI088_read_single_reg>
 800089e:	f7ff feef 	bl	8000680 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80008a2:	2096      	movs	r0, #150	@ 0x96
 80008a4:	f7ff fe78 	bl	8000598 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80008a8:	f7ff feda 	bl	8000660 <BMI088_GYRO_NS_L>
 80008ac:	1dbb      	adds	r3, r7, #6
 80008ae:	4619      	mov	r1, r3
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 f971 	bl	8000b98 <BMI088_read_single_reg>
 80008b6:	f7ff fee3 	bl	8000680 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80008ba:	2096      	movs	r0, #150	@ 0x96
 80008bc:	f7ff fe6c 	bl	8000598 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 80008c0:	79bb      	ldrb	r3, [r7, #6]
 80008c2:	2b0f      	cmp	r3, #15
 80008c4:	d001      	beq.n	80008ca <BMI088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 80008c6:	23ff      	movs	r3, #255	@ 0xff
 80008c8:	e049      	b.n	800095e <BMI088_gyro_init+0x122>
    }

    //set gyro sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	71fb      	strb	r3, [r7, #7]
 80008ce:	e042      	b.n	8000956 <BMI088_gyro_init+0x11a>
    {

        BMI088_gyro_write_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], write_BMI088_gyro_reg_data_error[write_reg_num][1]);
 80008d0:	f7ff fec6 	bl	8000660 <BMI088_GYRO_NS_L>
 80008d4:	79fa      	ldrb	r2, [r7, #7]
 80008d6:	4924      	ldr	r1, [pc, #144]	@ (8000968 <BMI088_gyro_init+0x12c>)
 80008d8:	4613      	mov	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	4413      	add	r3, r2
 80008de:	440b      	add	r3, r1
 80008e0:	7818      	ldrb	r0, [r3, #0]
 80008e2:	79fa      	ldrb	r2, [r7, #7]
 80008e4:	4920      	ldr	r1, [pc, #128]	@ (8000968 <BMI088_gyro_init+0x12c>)
 80008e6:	4613      	mov	r3, r2
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	4413      	add	r3, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	3301      	adds	r3, #1
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4619      	mov	r1, r3
 80008f4:	f000 f93c 	bl	8000b70 <BMI088_write_single_reg>
 80008f8:	f7ff fec2 	bl	8000680 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80008fc:	2096      	movs	r0, #150	@ 0x96
 80008fe:	f7ff fe4b 	bl	8000598 <BMI088_delay_us>

        BMI088_gyro_read_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], res);
 8000902:	f7ff fead 	bl	8000660 <BMI088_GYRO_NS_L>
 8000906:	79fa      	ldrb	r2, [r7, #7]
 8000908:	4917      	ldr	r1, [pc, #92]	@ (8000968 <BMI088_gyro_init+0x12c>)
 800090a:	4613      	mov	r3, r2
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	4413      	add	r3, r2
 8000910:	440b      	add	r3, r1
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	1dba      	adds	r2, r7, #6
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f000 f93d 	bl	8000b98 <BMI088_read_single_reg>
 800091e:	f7ff feaf 	bl	8000680 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8000922:	2096      	movs	r0, #150	@ 0x96
 8000924:	f7ff fe38 	bl	8000598 <BMI088_delay_us>

        if (res != write_BMI088_gyro_reg_data_error[write_reg_num][1])
 8000928:	79fa      	ldrb	r2, [r7, #7]
 800092a:	490f      	ldr	r1, [pc, #60]	@ (8000968 <BMI088_gyro_init+0x12c>)
 800092c:	4613      	mov	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	4413      	add	r3, r2
 8000932:	440b      	add	r3, r1
 8000934:	3301      	adds	r3, #1
 8000936:	781a      	ldrb	r2, [r3, #0]
 8000938:	79bb      	ldrb	r3, [r7, #6]
 800093a:	429a      	cmp	r2, r3
 800093c:	d008      	beq.n	8000950 <BMI088_gyro_init+0x114>
        {
            return write_BMI088_gyro_reg_data_error[write_reg_num][2];
 800093e:	79fa      	ldrb	r2, [r7, #7]
 8000940:	4909      	ldr	r1, [pc, #36]	@ (8000968 <BMI088_gyro_init+0x12c>)
 8000942:	4613      	mov	r3, r2
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	4413      	add	r3, r2
 8000948:	440b      	add	r3, r1
 800094a:	3302      	adds	r3, #2
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	e006      	b.n	800095e <BMI088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	3301      	adds	r3, #1
 8000954:	71fb      	strb	r3, [r7, #7]
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	2b05      	cmp	r3, #5
 800095a:	d9b9      	bls.n	80008d0 <BMI088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000002c 	.word	0x2000002c

0800096c <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 8000970:	4a05      	ldr	r2, [pc, #20]	@ (8000988 <IMU_get_temp+0x1c>)
 8000972:	4906      	ldr	r1, [pc, #24]	@ (800098c <IMU_get_temp+0x20>)
 8000974:	4806      	ldr	r0, [pc, #24]	@ (8000990 <IMU_get_temp+0x24>)
 8000976:	f000 f80d 	bl	8000994 <BMI088_read>
	return temp;
 800097a:	4b03      	ldr	r3, [pc, #12]	@ (8000988 <IMU_get_temp+0x1c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	ee07 3a90 	vmov	s15, r3
}
 8000982:	eeb0 0a67 	vmov.f32	s0, s15
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200000f4 	.word	0x200000f4
 800098c:	200000e8 	.word	0x200000e8
 8000990:	200000dc 	.word	0x200000dc

08000994 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 80009a0:	4a70      	ldr	r2, [pc, #448]	@ (8000b64 <BMI088_read+0x1d0>)
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009aa:	6018      	str	r0, [r3, #0]
 80009ac:	3304      	adds	r3, #4
 80009ae:	8019      	strh	r1, [r3, #0]
 80009b0:	3302      	adds	r3, #2
 80009b2:	0c0a      	lsrs	r2, r1, #16
 80009b4:	701a      	strb	r2, [r3, #0]
 80009b6:	2300      	movs	r3, #0
 80009b8:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 80009ba:	f7ff fe31 	bl	8000620 <BMI088_ACCEL_NS_L>
 80009be:	2092      	movs	r0, #146	@ 0x92
 80009c0:	f7ff fe6e 	bl	80006a0 <BMI088_read_write_byte>
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2206      	movs	r2, #6
 80009ca:	4619      	mov	r1, r3
 80009cc:	2012      	movs	r0, #18
 80009ce:	f000 f8fb 	bl	8000bc8 <BMI088_read_muli_reg>
 80009d2:	f7ff fe35 	bl	8000640 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 80009d6:	7d7b      	ldrb	r3, [r7, #21]
 80009d8:	021b      	lsls	r3, r3, #8
 80009da:	b21a      	sxth	r2, r3
 80009dc:	7d3b      	ldrb	r3, [r7, #20]
 80009de:	b21b      	sxth	r3, r3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80009e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80009e8:	ee07 3a90 	vmov	s15, r3
 80009ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009f0:	4b5d      	ldr	r3, [pc, #372]	@ (8000b68 <BMI088_read+0x1d4>)
 80009f2:	edd3 7a00 	vldr	s15, [r3]
 80009f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000a00:	7dfb      	ldrb	r3, [r7, #23]
 8000a02:	021b      	lsls	r3, r3, #8
 8000a04:	b21a      	sxth	r2, r3
 8000a06:	7dbb      	ldrb	r3, [r7, #22]
 8000a08:	b21b      	sxth	r3, r3
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000a0e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a12:	ee07 3a90 	vmov	s15, r3
 8000a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a1a:	4b53      	ldr	r3, [pc, #332]	@ (8000b68 <BMI088_read+0x1d4>)
 8000a1c:	edd3 7a00 	vldr	s15, [r3]
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	3304      	adds	r3, #4
 8000a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a28:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8000a2c:	7e7b      	ldrb	r3, [r7, #25]
 8000a2e:	021b      	lsls	r3, r3, #8
 8000a30:	b21a      	sxth	r2, r3
 8000a32:	7e3b      	ldrb	r3, [r7, #24]
 8000a34:	b21b      	sxth	r3, r3
 8000a36:	4313      	orrs	r3, r2
 8000a38:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000a3a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a3e:	ee07 3a90 	vmov	s15, r3
 8000a42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a46:	4b48      	ldr	r3, [pc, #288]	@ (8000b68 <BMI088_read+0x1d4>)
 8000a48:	edd3 7a00 	vldr	s15, [r3]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	3308      	adds	r3, #8
 8000a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a54:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 8000a58:	f7ff fe02 	bl	8000660 <BMI088_GYRO_NS_L>
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2208      	movs	r2, #8
 8000a62:	4619      	mov	r1, r3
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 f8af 	bl	8000bc8 <BMI088_read_muli_reg>
 8000a6a:	f7ff fe09 	bl	8000680 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 8000a6e:	7d3b      	ldrb	r3, [r7, #20]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d140      	bne.n	8000af6 <BMI088_read+0x162>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
 8000a76:	021b      	lsls	r3, r3, #8
 8000a78:	b21a      	sxth	r2, r3
 8000a7a:	7dbb      	ldrb	r3, [r7, #22]
 8000a7c:	b21b      	sxth	r3, r3
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000a82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a86:	ee07 3a90 	vmov	s15, r3
 8000a8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a8e:	4b37      	ldr	r3, [pc, #220]	@ (8000b6c <BMI088_read+0x1d8>)
 8000a90:	edd3 7a00 	vldr	s15, [r3]
 8000a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8000a9e:	7e7b      	ldrb	r3, [r7, #25]
 8000aa0:	021b      	lsls	r3, r3, #8
 8000aa2:	b21a      	sxth	r2, r3
 8000aa4:	7e3b      	ldrb	r3, [r7, #24]
 8000aa6:	b21b      	sxth	r3, r3
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000aac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ab0:	ee07 3a90 	vmov	s15, r3
 8000ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <BMI088_read+0x1d8>)
 8000aba:	edd3 7a00 	vldr	s15, [r3]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ac6:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 8000aca:	7efb      	ldrb	r3, [r7, #27]
 8000acc:	021b      	lsls	r3, r3, #8
 8000ace:	b21a      	sxth	r2, r3
 8000ad0:	7ebb      	ldrb	r3, [r7, #26]
 8000ad2:	b21b      	sxth	r3, r3
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000ad8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000adc:	ee07 3a90 	vmov	s15, r3
 8000ae0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <BMI088_read+0x1d8>)
 8000ae6:	edd3 7a00 	vldr	s15, [r3]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	3308      	adds	r3, #8
 8000aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000af2:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 8000af6:	f7ff fd93 	bl	8000620 <BMI088_ACCEL_NS_L>
 8000afa:	20a2      	movs	r0, #162	@ 0xa2
 8000afc:	f7ff fdd0 	bl	80006a0 <BMI088_read_write_byte>
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2202      	movs	r2, #2
 8000b06:	4619      	mov	r1, r3
 8000b08:	2022      	movs	r0, #34	@ 0x22
 8000b0a:	f000 f85d 	bl	8000bc8 <BMI088_read_muli_reg>
 8000b0e:	f7ff fd97 	bl	8000640 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 8000b12:	7d3b      	ldrb	r3, [r7, #20]
 8000b14:	00db      	lsls	r3, r3, #3
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	7d7b      	ldrb	r3, [r7, #21]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 8000b24:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b2c:	db04      	blt.n	8000b38 <BMI088_read+0x1a4>
    {
        bmi088_raw_temp -= 2048;
 8000b2e:	8bfb      	ldrh	r3, [r7, #30]
 8000b30:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8000b38:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b3c:	ee07 3a90 	vmov	s15, r3
 8000b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b44:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8000b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b4c:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8000b50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	edc3 7a00 	vstr	s15, [r3]
}
 8000b5a:	bf00      	nop
 8000b5c:	3720      	adds	r7, #32
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	0800e55c 	.word	0x0800e55c
 8000b68:	20000010 	.word	0x20000010
 8000b6c:	20000014 	.word	0x20000014

08000b70 <BMI088_write_single_reg>:

#if defined(BMI088_USE_SPI)

static void BMI088_write_single_reg(uint8_t reg, uint8_t data)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	460a      	mov	r2, r1
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg);
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fd8c 	bl	80006a0 <BMI088_read_write_byte>
    BMI088_read_write_byte(data);
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fd88 	bl	80006a0 <BMI088_read_write_byte>
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <BMI088_read_single_reg>:

static void BMI088_read_single_reg(uint8_t reg, uint8_t *return_data)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
    BMI088_read_write_byte(reg | 0x80);
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fd77 	bl	80006a0 <BMI088_read_write_byte>
    *return_data = BMI088_read_write_byte(0x55);
 8000bb2:	2055      	movs	r0, #85	@ 0x55
 8000bb4:	f7ff fd74 	bl	80006a0 <BMI088_read_write_byte>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	461a      	mov	r2, r3
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	701a      	strb	r2, [r3, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fd5d 	bl	80006a0 <BMI088_read_write_byte>

    while (len != 0)
 8000be6:	e00c      	b.n	8000c02 <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8000be8:	2055      	movs	r0, #85	@ 0x55
 8000bea:	f7ff fd59 	bl	80006a0 <BMI088_read_write_byte>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	701a      	strb	r2, [r3, #0]
        buf++;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	603b      	str	r3, [r7, #0]
        len--;
 8000bfc:	79bb      	ldrb	r3, [r7, #6]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 8000c02:	79bb      	ldrb	r3, [r7, #6]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1ef      	bne.n	8000be8 <BMI088_read_muli_reg+0x20>
    }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_CAN_RxFifo0MsgPendingCallback>:
/**
  * @brief          reading motor feedback from CAN FIFO
  * @param[in]      pointer to CAN handle
  * @retval         none
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	@ 0x30
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	f107 0214 	add.w	r2, r7, #20
 8000c24:	2100      	movs	r1, #0
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f004 fc04 	bl	8005434 <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 8000c32:	f080 80d9 	bcs.w	8000de8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
 8000c36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c3a:	d807      	bhi.n	8000c4c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 8000c3c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000c40:	d066      	beq.n	8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
 8000c42:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8000c46:	f000 80a4 	beq.w	8000d92 <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
        		get_b2b_gyro_feedback(&b2bGyro, rx_data);                             // add back numbering code for extra CAN input lines
        	    break;
        	}
        }
        default: {
            break;
 8000c4a:	e0cd      	b.n	8000de8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
            i = rx_header.StdId - CAN_G1M1_ID;                             // get motor id by taking the difference between the first motor's ID (0 indexing) and the current motor's ID
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	3b01      	subs	r3, #1
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	4b6a      	ldr	r3, [pc, #424]	@ (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000c56:	701a      	strb	r2, [r3, #0]
            get_motor_feedback(&motor_feedback[i], rx_data);
 8000c58:	4b69      	ldr	r3, [pc, #420]	@ (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4a69      	ldr	r2, [pc, #420]	@ (8000e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000c60:	460b      	mov	r3, r1
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	440b      	add	r3, r1
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	881a      	ldrh	r2, [r3, #0]
 8000c6c:	4b64      	ldr	r3, [pc, #400]	@ (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	b210      	sxth	r0, r2
 8000c74:	4a63      	ldr	r2, [pc, #396]	@ (8000e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000c76:	460b      	mov	r3, r1
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	3308      	adds	r3, #8
 8000c82:	4602      	mov	r2, r0
 8000c84:	801a      	strh	r2, [r3, #0]
 8000c86:	7b3b      	ldrb	r3, [r7, #12]
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	b21a      	sxth	r2, r3
 8000c8c:	7b7b      	ldrb	r3, [r7, #13]
 8000c8e:	b21b      	sxth	r3, r3
 8000c90:	4313      	orrs	r3, r2
 8000c92:	b21a      	sxth	r2, r3
 8000c94:	4b5a      	ldr	r3, [pc, #360]	@ (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	b290      	uxth	r0, r2
 8000c9c:	4a59      	ldr	r2, [pc, #356]	@ (8000e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4602      	mov	r2, r0
 8000caa:	801a      	strh	r2, [r3, #0]
 8000cac:	7bbb      	ldrb	r3, [r7, #14]
 8000cae:	021b      	lsls	r3, r3, #8
 8000cb0:	b21a      	sxth	r2, r3
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	4952      	ldr	r1, [pc, #328]	@ (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000cb8:	7809      	ldrb	r1, [r1, #0]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	b218      	sxth	r0, r3
 8000cbe:	4a51      	ldr	r2, [pc, #324]	@ (8000e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	3302      	adds	r3, #2
 8000ccc:	4602      	mov	r2, r0
 8000cce:	801a      	strh	r2, [r3, #0]
 8000cd0:	7c3b      	ldrb	r3, [r7, #16]
 8000cd2:	021b      	lsls	r3, r3, #8
 8000cd4:	b21a      	sxth	r2, r3
 8000cd6:	7c7b      	ldrb	r3, [r7, #17]
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	4949      	ldr	r1, [pc, #292]	@ (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000cdc:	7809      	ldrb	r1, [r1, #0]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	b218      	sxth	r0, r3
 8000ce2:	4a48      	ldr	r2, [pc, #288]	@ (8000e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	4413      	add	r3, r2
 8000cee:	3304      	adds	r3, #4
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	801a      	strh	r2, [r3, #0]
 8000cf4:	4b42      	ldr	r3, [pc, #264]	@ (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	7cb8      	ldrb	r0, [r7, #18]
 8000cfc:	4a41      	ldr	r2, [pc, #260]	@ (8000e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000cfe:	460b      	mov	r3, r1
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	440b      	add	r3, r1
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4413      	add	r3, r2
 8000d08:	3306      	adds	r3, #6
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	701a      	strb	r2, [r3, #0]
            break;
 8000d0e:	e072      	b.n	8000df6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        	if(CAN_b2b_A_ID == boardID) {
 8000d10:	4b3d      	ldr	r3, [pc, #244]	@ (8000e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	f240 1201 	movw	r2, #257	@ 0x101
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d067      	beq.n	8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>
        		get_b2b_motorCtrl_feedback(&b2bMotorCtrl, rx_data);                             // add back numbering code for extra CAN input lines
 8000d1c:	7b3b      	ldrb	r3, [r7, #12]
 8000d1e:	021b      	lsls	r3, r3, #8
 8000d20:	b21a      	sxth	r2, r3
 8000d22:	7b7b      	ldrb	r3, [r7, #13]
 8000d24:	b21b      	sxth	r3, r3
 8000d26:	4313      	orrs	r3, r2
 8000d28:	b21a      	sxth	r2, r3
 8000d2a:	4b38      	ldr	r3, [pc, #224]	@ (8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000d2c:	801a      	strh	r2, [r3, #0]
 8000d2e:	7bbb      	ldrb	r3, [r7, #14]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	b21a      	sxth	r2, r3
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b21a      	sxth	r2, r3
 8000d3c:	4b33      	ldr	r3, [pc, #204]	@ (8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000d3e:	805a      	strh	r2, [r3, #2]
 8000d40:	7c3b      	ldrb	r3, [r7, #16]
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	b21a      	sxth	r2, r3
 8000d46:	7c7b      	ldrb	r3, [r7, #17]
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000d50:	809a      	strh	r2, [r3, #4]
 8000d52:	7cbb      	ldrb	r3, [r7, #18]
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	b21a      	sxth	r2, r3
 8000d58:	7cfb      	ldrb	r3, [r7, #19]
 8000d5a:	b21b      	sxth	r3, r3
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	4b2a      	ldr	r3, [pc, #168]	@ (8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000d62:	80da      	strh	r2, [r3, #6]
        		if (b2bMotorCtrl.motor1_Ctrl >= 3376) {
 8000d64:	4b29      	ldr	r3, [pc, #164]	@ (8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6a:	f5b3 6f53 	cmp.w	r3, #3376	@ 0xd30
 8000d6e:	db04      	blt.n	8000d7a <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
        			b2bMotorCtrl.motor1_Ctrl = 3376;
 8000d70:	4b26      	ldr	r3, [pc, #152]	@ (8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000d72:	f44f 6253 	mov.w	r2, #3376	@ 0xd30
 8000d76:	801a      	strh	r2, [r3, #0]
        		break;
 8000d78:	e03a      	b.n	8000df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        		} else if (b2bMotorCtrl.motor1_Ctrl <= 2132) {
 8000d7a:	4b24      	ldr	r3, [pc, #144]	@ (8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d80:	f640 0254 	movw	r2, #2132	@ 0x854
 8000d84:	4293      	cmp	r3, r2
 8000d86:	dc33      	bgt.n	8000df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        			b2bMotorCtrl.motor1_Ctrl = 2132;
 8000d88:	4b20      	ldr	r3, [pc, #128]	@ (8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000d8a:	f640 0254 	movw	r2, #2132	@ 0x854
 8000d8e:	801a      	strh	r2, [r3, #0]
        		break;
 8000d90:	e02e      	b.n	8000df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        	if(CAN_b2b_B_ID == boardID) {
 8000d92:	4b1d      	ldr	r3, [pc, #116]	@ (8000e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	f240 1211 	movw	r2, #273	@ 0x111
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d02a      	beq.n	8000df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>
        		get_b2b_gyro_feedback(&b2bGyro, rx_data);                             // add back numbering code for extra CAN input lines
 8000d9e:	7b3b      	ldrb	r3, [r7, #12]
 8000da0:	021b      	lsls	r3, r3, #8
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	7b7b      	ldrb	r3, [r7, #13]
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	4313      	orrs	r3, r2
 8000daa:	b21a      	sxth	r2, r3
 8000dac:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000dae:	801a      	strh	r2, [r3, #0]
 8000db0:	7bbb      	ldrb	r3, [r7, #14]
 8000db2:	021b      	lsls	r3, r3, #8
 8000db4:	b21a      	sxth	r2, r3
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	b21b      	sxth	r3, r3
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	b21a      	sxth	r2, r3
 8000dbe:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000dc0:	805a      	strh	r2, [r3, #2]
 8000dc2:	7c3b      	ldrb	r3, [r7, #16]
 8000dc4:	021b      	lsls	r3, r3, #8
 8000dc6:	b21a      	sxth	r2, r3
 8000dc8:	7c7b      	ldrb	r3, [r7, #17]
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	b21a      	sxth	r2, r3
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000dd2:	809a      	strh	r2, [r3, #4]
 8000dd4:	7cbb      	ldrb	r3, [r7, #18]
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	b21a      	sxth	r2, r3
 8000dda:	7cfb      	ldrb	r3, [r7, #19]
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	4313      	orrs	r3, r2
 8000de0:	b21a      	sxth	r2, r3
 8000de2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000de4:	80da      	strh	r2, [r3, #6]
        	    break;
 8000de6:	e006      	b.n	8000df6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
            break;
 8000de8:	bf00      	nop
 8000dea:	e004      	b.n	8000df6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8000dec:	bf00      	nop
 8000dee:	e002      	b.n	8000df6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8000df0:	bf00      	nop
 8000df2:	e000      	b.n	8000df6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8000df4:	bf00      	nop
        }
    }
}
 8000df6:	bf00      	nop
 8000df8:	3730      	adds	r7, #48	@ 0x30
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000260 	.word	0x20000260
 8000e04:	20000110 	.word	0x20000110
 8000e08:	20000058 	.word	0x20000058
 8000e0c:	20000180 	.word	0x20000180
 8000e10:	20000188 	.word	0x20000188

08000e14 <CAN2_cmd_motors>:
/**
  * @brief          send control information through CAN bus 2
  * @param[in]      canID of the target motor's group and the motor current values for all motors in that group
  * @retval         none
  */
void CAN2_cmd_motors(can_msg_id_e canID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	4611      	mov	r1, r2
 8000e20:	461a      	mov	r2, r3
 8000e22:	4623      	mov	r3, r4
 8000e24:	80fb      	strh	r3, [r7, #6]
 8000e26:	4603      	mov	r3, r0
 8000e28:	80bb      	strh	r3, [r7, #4]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	807b      	strh	r3, [r7, #2]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    motors_tx_message.StdId = canID;
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	4a20      	ldr	r2, [pc, #128]	@ (8000eb8 <CAN2_cmd_motors+0xa4>)
 8000e36:	6013      	str	r3, [r2, #0]
    motors_tx_message.IDE = CAN_ID_STD;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <CAN2_cmd_motors+0xa4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
    motors_tx_message.RTR = CAN_RTR_DATA;
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb8 <CAN2_cmd_motors+0xa4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
    motors_tx_message.DLC = 0x08;
 8000e44:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <CAN2_cmd_motors+0xa4>)
 8000e46:	2208      	movs	r2, #8
 8000e48:	611a      	str	r2, [r3, #16]
    motors_can_send_data[0] = m1 >> 8;
 8000e4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e4e:	121b      	asrs	r3, r3, #8
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <CAN2_cmd_motors+0xa8>)
 8000e56:	701a      	strb	r2, [r3, #0]
    motors_can_send_data[1] = m1;
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <CAN2_cmd_motors+0xa8>)
 8000e5e:	705a      	strb	r2, [r3, #1]
    motors_can_send_data[2] = m2 >> 8;
 8000e60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e64:	121b      	asrs	r3, r3, #8
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <CAN2_cmd_motors+0xa8>)
 8000e6c:	709a      	strb	r2, [r3, #2]
    motors_can_send_data[3] = m2;
 8000e6e:	887b      	ldrh	r3, [r7, #2]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <CAN2_cmd_motors+0xa8>)
 8000e74:	70da      	strb	r2, [r3, #3]
    motors_can_send_data[4] = m3 >> 8;
 8000e76:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000e7a:	121b      	asrs	r3, r3, #8
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <CAN2_cmd_motors+0xa8>)
 8000e82:	711a      	strb	r2, [r3, #4]
    motors_can_send_data[5] = m3;
 8000e84:	883b      	ldrh	r3, [r7, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <CAN2_cmd_motors+0xa8>)
 8000e8a:	715a      	strb	r2, [r3, #5]
    motors_can_send_data[6] = m4 >> 8;
 8000e8c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000e90:	121b      	asrs	r3, r3, #8
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <CAN2_cmd_motors+0xa8>)
 8000e98:	719a      	strb	r2, [r3, #6]
    motors_can_send_data[7] = m4;
 8000e9a:	8c3b      	ldrh	r3, [r7, #32]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <CAN2_cmd_motors+0xa8>)
 8000ea0:	71da      	strb	r2, [r3, #7]
    HAL_CAN_AddTxMessage(&CAN_2, &motors_tx_message, motors_can_send_data, &send_mail_box);
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	4a05      	ldr	r2, [pc, #20]	@ (8000ebc <CAN2_cmd_motors+0xa8>)
 8000ea8:	4903      	ldr	r1, [pc, #12]	@ (8000eb8 <CAN2_cmd_motors+0xa4>)
 8000eaa:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <CAN2_cmd_motors+0xac>)
 8000eac:	f004 f9f2 	bl	8005294 <HAL_CAN_AddTxMessage>
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd90      	pop	{r4, r7, pc}
 8000eb8:	20000240 	.word	0x20000240
 8000ebc:	20000258 	.word	0x20000258
 8000ec0:	200006c0 	.word	0x200006c0

08000ec4 <set_M3508_current>:
/**
  * @brief          simplification function to make communication with the motor not require the current data for all 4 motors
  * @param[in]      motor ID (1~11) and its target current (-16384 ~ 16384)
  * @retval         none
  */
void set_M3508_current(int8_t motorID, int16_t setCurrent) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af02      	add	r7, sp, #8
 8000eca:	4603      	mov	r3, r0
 8000ecc:	460a      	mov	r2, r1
 8000ece:	71fb      	strb	r3, [r7, #7]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	80bb      	strh	r3, [r7, #4]
	motorCtrlVal[motorID-1] = setCurrent;
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	491c      	ldr	r1, [pc, #112]	@ (8000f4c <set_M3508_current+0x88>)
 8000edc:	88ba      	ldrh	r2, [r7, #4]
 8000ede:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	switch(motorID) {
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	dc02      	bgt.n	8000ef0 <set_M3508_current+0x2c>
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	dc04      	bgt.n	8000ef8 <set_M3508_current+0x34>
		case (7):
		case (8): {             // is group 2?
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
		}
		default: {
	        break;
 8000eee:	e027      	b.n	8000f40 <set_M3508_current+0x7c>
 8000ef0:	3b05      	subs	r3, #5
	switch(motorID) {
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d824      	bhi.n	8000f40 <set_M3508_current+0x7c>
 8000ef6:	e011      	b.n	8000f1c <set_M3508_current+0x58>
			CAN2_cmd_motors(CAN_GROUP1_ID, motorCtrlVal[0], motorCtrlVal[1], motorCtrlVal[2], motorCtrlVal[3]);
 8000ef8:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <set_M3508_current+0x88>)
 8000efa:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000efe:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <set_M3508_current+0x88>)
 8000f00:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000f04:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <set_M3508_current+0x88>)
 8000f06:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8000f0a:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <set_M3508_current+0x88>)
 8000f0c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	4603      	mov	r3, r0
 8000f14:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f18:	f7ff ff7c 	bl	8000e14 <CAN2_cmd_motors>
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <set_M3508_current+0x88>)
 8000f1e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8000f22:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <set_M3508_current+0x88>)
 8000f24:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <set_M3508_current+0x88>)
 8000f2a:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8000f2e:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <set_M3508_current+0x88>)
 8000f30:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	4603      	mov	r3, r0
 8000f38:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8000f3c:	f7ff ff6a 	bl	8000e14 <CAN2_cmd_motors>
	        break;
 8000f40:	bf00      	nop
	    }
	}
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200000f8 	.word	0x200000f8

08000f50 <set_GM6020_voltage>:
/**
  * @brief          similar to the above function, but specifically for the GM6020's voltage control mode
  * @param[in]      motor ID (5~11) and its target voltage (-25000 ~ 25000)
  * @retval         none
  */
void set_GM6020_voltage(int8_t motorID, int16_t setVoltage) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	4603      	mov	r3, r0
 8000f58:	460a      	mov	r2, r1
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	80bb      	strh	r3, [r7, #4]
	motorCtrlVal[motorID-1] = setVoltage;      // -1 for 0 indexing and -4 for group 1, which cannot contain GM6020s
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	491a      	ldr	r1, [pc, #104]	@ (8000fd0 <set_GM6020_voltage+0x80>)
 8000f68:	88ba      	ldrh	r2, [r7, #4]
 8000f6a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	switch(motorID) {
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	dc02      	bgt.n	8000f7c <set_GM6020_voltage+0x2c>
 8000f76:	2b05      	cmp	r3, #5
 8000f78:	da04      	bge.n	8000f84 <set_GM6020_voltage+0x34>
		case (10):
		case (11): {          // is group 3?
			CAN2_cmd_motors(CAN_GROUP3_ID, motorCtrlVal[8], motorCtrlVal[9], motorCtrlVal[10], 0);
		}
		default: {
	        break;
 8000f7a:	e024      	b.n	8000fc6 <set_GM6020_voltage+0x76>
 8000f7c:	3b09      	subs	r3, #9
	switch(motorID) {
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d821      	bhi.n	8000fc6 <set_GM6020_voltage+0x76>
 8000f82:	e011      	b.n	8000fa8 <set_GM6020_voltage+0x58>
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
 8000f84:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <set_GM6020_voltage+0x80>)
 8000f86:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8000f8a:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <set_GM6020_voltage+0x80>)
 8000f8c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000f90:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <set_GM6020_voltage+0x80>)
 8000f92:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8000f96:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <set_GM6020_voltage+0x80>)
 8000f98:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8000fa4:	f7ff ff36 	bl	8000e14 <CAN2_cmd_motors>
			CAN2_cmd_motors(CAN_GROUP3_ID, motorCtrlVal[8], motorCtrlVal[9], motorCtrlVal[10], 0);
 8000fa8:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <set_GM6020_voltage+0x80>)
 8000faa:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8000fae:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <set_GM6020_voltage+0x80>)
 8000fb0:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <set_GM6020_voltage+0x80>)
 8000fb6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000fba:	2000      	movs	r0, #0
 8000fbc:	9000      	str	r0, [sp, #0]
 8000fbe:	f240 20ff 	movw	r0, #767	@ 0x2ff
 8000fc2:	f7ff ff27 	bl	8000e14 <CAN2_cmd_motors>
	        break;
 8000fc6:	bf00      	nop
	    }
	}
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200000f8 	.word	0x200000f8

08000fd4 <calc_current2RPM_PID>:
	        break;
	    }
	}
}

int32_t calc_current2RPM_PID(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8000fd4:	b490      	push	{r4, r7}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	eef0 6a40 	vmov.f32	s13, s0
 8000fe2:	eeb0 7a60 	vmov.f32	s14, s1
 8000fe6:	eef0 7a41 	vmov.f32	s15, s2
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	4613      	mov	r3, r2
 8000fee:	81bb      	strh	r3, [r7, #12]
 8000ff0:	edc7 6a00 	vstr	s13, [r7]
 8000ff4:	ed87 7a01 	vstr	s14, [r7, #4]
 8000ff8:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_current_val = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	3b01      	subs	r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	74fb      	strb	r3, [r7, #19]
	iRPM[ID] += RPMtarget - motor_feedback[ID].speed_rpm;      // add to integral term
 8001008:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800100c:	4a4a      	ldr	r2, [pc, #296]	@ (8001138 <calc_current2RPM_PID+0x164>)
 800100e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001012:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8001016:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800101a:	4c48      	ldr	r4, [pc, #288]	@ (800113c <calc_current2RPM_PID+0x168>)
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4423      	add	r3, r4
 8001026:	3302      	adds	r3, #2
 8001028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102c:	1ac2      	subs	r2, r0, r3
 800102e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001032:	440a      	add	r2, r1
 8001034:	4940      	ldr	r1, [pc, #256]	@ (8001138 <calc_current2RPM_PID+0x164>)
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dRPM[ID] = lastRPM[ID] - motor_feedback[ID].speed_rpm;       // update derivative term
 800103a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800103e:	4a40      	ldr	r2, [pc, #256]	@ (8001140 <calc_current2RPM_PID+0x16c>)
 8001040:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001044:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001048:	483c      	ldr	r0, [pc, #240]	@ (800113c <calc_current2RPM_PID+0x168>)
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4403      	add	r3, r0
 8001054:	3302      	adds	r3, #2
 8001056:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105a:	461a      	mov	r2, r3
 800105c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001060:	1a8a      	subs	r2, r1, r2
 8001062:	4938      	ldr	r1, [pc, #224]	@ (8001144 <calc_current2RPM_PID+0x170>)
 8001064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errRPM[ID] = RPMtarget - motor_feedback[ID].speed_rpm;     // update proportional term
 8001068:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800106c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001070:	4832      	ldr	r0, [pc, #200]	@ (800113c <calc_current2RPM_PID+0x168>)
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4403      	add	r3, r0
 800107c:	3302      	adds	r3, #2
 800107e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001082:	461a      	mov	r2, r3
 8001084:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001088:	1a8a      	subs	r2, r1, r2
 800108a:	492f      	ldr	r1, [pc, #188]	@ (8001148 <calc_current2RPM_PID+0x174>)
 800108c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	lastRPM[ID] = motor_feedback[ID].speed_rpm;
 8001090:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001094:	4929      	ldr	r1, [pc, #164]	@ (800113c <calc_current2RPM_PID+0x168>)
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	440b      	add	r3, r1
 80010a0:	3302      	adds	r3, #2
 80010a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4a24      	ldr	r2, [pc, #144]	@ (8001140 <calc_current2RPM_PID+0x16c>)
 80010ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return_current_val = (preset.kP * errRPM[ID]) + (preset.kI * iRPM[ID]) + (preset.kD * dRPM[ID]);
 80010b2:	ed97 7a00 	vldr	s14, [r7]
 80010b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80010ba:	4a23      	ldr	r2, [pc, #140]	@ (8001148 <calc_current2RPM_PID+0x174>)
 80010bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c0:	ee07 3a90 	vmov	s15, r3
 80010c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010cc:	edd7 6a01 	vldr	s13, [r7, #4]
 80010d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80010d4:	4a18      	ldr	r2, [pc, #96]	@ (8001138 <calc_current2RPM_PID+0x164>)
 80010d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010ea:	edd7 6a02 	vldr	s13, [r7, #8]
 80010ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80010f2:	4a14      	ldr	r2, [pc, #80]	@ (8001144 <calc_current2RPM_PID+0x170>)
 80010f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800110c:	ee17 3a90 	vmov	r3, s15
 8001110:	617b      	str	r3, [r7, #20]
	//apply power limit
	//if (ID == 6) {sendB2bData(CAN_b2b_B_gyro_ID, errRPM[5], 0, 0, 0);}
	if (return_current_val > 16384) {return_current_val = 16384;}
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001118:	dd02      	ble.n	8001120 <calc_current2RPM_PID+0x14c>
 800111a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800111e:	617b      	str	r3, [r7, #20]
	if (return_current_val < -16384) {return_current_val = -16384;}
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8001126:	da01      	bge.n	800112c <calc_current2RPM_PID+0x158>
 8001128:	4b08      	ldr	r3, [pc, #32]	@ (800114c <calc_current2RPM_PID+0x178>)
 800112a:	617b      	str	r3, [r7, #20]
	return return_current_val;
 800112c:	697b      	ldr	r3, [r7, #20]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bc90      	pop	{r4, r7}
 8001136:	4770      	bx	lr
 8001138:	200001e8 	.word	0x200001e8
 800113c:	20000110 	.word	0x20000110
 8001140:	20000190 	.word	0x20000190
 8001144:	200001bc 	.word	0x200001bc
 8001148:	20000214 	.word	0x20000214
 800114c:	ffffc000 	.word	0xffffc000

08001150 <calc_voltage2RPM_PID>:
	if (return_current_val > 10000) {return_current_val = 10000;}
	if (return_current_val < -10000) {return_current_val = -10000;}
	return return_current_val;
}

int32_t calc_voltage2RPM_PID(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001150:	b490      	push	{r4, r7}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	460a      	mov	r2, r1
 800115a:	eef0 6a40 	vmov.f32	s13, s0
 800115e:	eeb0 7a60 	vmov.f32	s14, s1
 8001162:	eef0 7a41 	vmov.f32	s15, s2
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	4613      	mov	r3, r2
 800116a:	81bb      	strh	r3, [r7, #12]
 800116c:	edc7 6a00 	vstr	s13, [r7]
 8001170:	ed87 7a01 	vstr	s14, [r7, #4]
 8001174:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_voltage_val = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	3b01      	subs	r3, #1
 8001180:	b2db      	uxtb	r3, r3
 8001182:	74fb      	strb	r3, [r7, #19]
	iRPM[ID] += RPMtarget - motor_feedback[ID].speed_rpm;      // add to integral term
 8001184:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001188:	4a53      	ldr	r2, [pc, #332]	@ (80012d8 <calc_voltage2RPM_PID+0x188>)
 800118a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800118e:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8001192:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001196:	4c51      	ldr	r4, [pc, #324]	@ (80012dc <calc_voltage2RPM_PID+0x18c>)
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4423      	add	r3, r4
 80011a2:	3302      	adds	r3, #2
 80011a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a8:	1ac2      	subs	r2, r0, r3
 80011aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80011ae:	440a      	add	r2, r1
 80011b0:	4949      	ldr	r1, [pc, #292]	@ (80012d8 <calc_voltage2RPM_PID+0x188>)
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dRPM[ID] = lastRPM[ID] - motor_feedback[ID].speed_rpm;       // update derivative term
 80011b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80011ba:	4a49      	ldr	r2, [pc, #292]	@ (80012e0 <calc_voltage2RPM_PID+0x190>)
 80011bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80011c0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80011c4:	4845      	ldr	r0, [pc, #276]	@ (80012dc <calc_voltage2RPM_PID+0x18c>)
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4403      	add	r3, r0
 80011d0:	3302      	adds	r3, #2
 80011d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d6:	461a      	mov	r2, r3
 80011d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80011dc:	1a8a      	subs	r2, r1, r2
 80011de:	4941      	ldr	r1, [pc, #260]	@ (80012e4 <calc_voltage2RPM_PID+0x194>)
 80011e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errRPM[ID] = RPMtarget - motor_feedback[ID].speed_rpm;     // update proportional term
 80011e4:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80011e8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80011ec:	483b      	ldr	r0, [pc, #236]	@ (80012dc <calc_voltage2RPM_PID+0x18c>)
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	4403      	add	r3, r0
 80011f8:	3302      	adds	r3, #2
 80011fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fe:	461a      	mov	r2, r3
 8001200:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001204:	1a8a      	subs	r2, r1, r2
 8001206:	4938      	ldr	r1, [pc, #224]	@ (80012e8 <calc_voltage2RPM_PID+0x198>)
 8001208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// usart_printf("%d %d\r\n", getMotorRPM(5), 0);
	lastRPM[ID] = motor_feedback[ID].speed_rpm;
 800120c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001210:	4932      	ldr	r1, [pc, #200]	@ (80012dc <calc_voltage2RPM_PID+0x18c>)
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	440b      	add	r3, r1
 800121c:	3302      	adds	r3, #2
 800121e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001222:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001226:	4611      	mov	r1, r2
 8001228:	4a2d      	ldr	r2, [pc, #180]	@ (80012e0 <calc_voltage2RPM_PID+0x190>)
 800122a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (iRPM[ID] >= 3400) {iRPM[ID] = 2600;}
 800122e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001232:	4a29      	ldr	r2, [pc, #164]	@ (80012d8 <calc_voltage2RPM_PID+0x188>)
 8001234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001238:	f640 5247 	movw	r2, #3399	@ 0xd47
 800123c:	4293      	cmp	r3, r2
 800123e:	dd06      	ble.n	800124e <calc_voltage2RPM_PID+0xfe>
 8001240:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001244:	4a24      	ldr	r2, [pc, #144]	@ (80012d8 <calc_voltage2RPM_PID+0x188>)
 8001246:	f640 2128 	movw	r1, #2600	@ 0xa28
 800124a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return_voltage_val = (preset.kP * errRPM[ID]) + (preset.kI * iRPM[ID]) + (preset.kD * dRPM[ID]);
 800124e:	ed97 7a00 	vldr	s14, [r7]
 8001252:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001256:	4a24      	ldr	r2, [pc, #144]	@ (80012e8 <calc_voltage2RPM_PID+0x198>)
 8001258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001264:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001268:	edd7 6a01 	vldr	s13, [r7, #4]
 800126c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001270:	4a19      	ldr	r2, [pc, #100]	@ (80012d8 <calc_voltage2RPM_PID+0x188>)
 8001272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001276:	ee07 3a90 	vmov	s15, r3
 800127a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001282:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001286:	edd7 6a02 	vldr	s13, [r7, #8]
 800128a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800128e:	4a15      	ldr	r2, [pc, #84]	@ (80012e4 <calc_voltage2RPM_PID+0x194>)
 8001290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a8:	ee17 3a90 	vmov	r3, s15
 80012ac:	617b      	str	r3, [r7, #20]
	//apply power limit
	if (return_voltage_val > 25000) {return_voltage_val = 25000;}
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80012b4:	4293      	cmp	r3, r2
 80012b6:	dd02      	ble.n	80012be <calc_voltage2RPM_PID+0x16e>
 80012b8:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 80012bc:	617b      	str	r3, [r7, #20]
	if (return_voltage_val < -25000) {return_voltage_val = -25000;}
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <calc_voltage2RPM_PID+0x19c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	da01      	bge.n	80012ca <calc_voltage2RPM_PID+0x17a>
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <calc_voltage2RPM_PID+0x19c>)
 80012c8:	617b      	str	r3, [r7, #20]

	return return_voltage_val;
 80012ca:	697b      	ldr	r3, [r7, #20]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc90      	pop	{r4, r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	200001e8 	.word	0x200001e8
 80012dc:	20000110 	.word	0x20000110
 80012e0:	20000190 	.word	0x20000190
 80012e4:	200001bc 	.word	0x200001bc
 80012e8:	20000214 	.word	0x20000214
 80012ec:	ffff9e58 	.word	0xffff9e58

080012f0 <setM3508RPM>:
	return return_voltage_val;
}

// DO NOT use current ctrl and voltage ctrl concurrently for GM6020

void setM3508RPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	460a      	mov	r2, r1
 80012fa:	eef0 6a40 	vmov.f32	s13, s0
 80012fe:	eeb0 7a60 	vmov.f32	s14, s1
 8001302:	eef0 7a41 	vmov.f32	s15, s2
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	4613      	mov	r3, r2
 800130a:	81bb      	strh	r3, [r7, #12]
 800130c:	edc7 6a00 	vstr	s13, [r7]
 8001310:	ed87 7a01 	vstr	s14, [r7, #4]
 8001314:	edc7 7a02 	vstr	s15, [r7, #8]
	set_M3508_current(motorID, calc_current2RPM_PID(motorID, RPMtarget, preset));
 8001318:	edd7 6a00 	vldr	s13, [r7]
 800131c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001320:	edd7 7a02 	vldr	s15, [r7, #8]
 8001324:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132c:	eeb0 0a66 	vmov.f32	s0, s13
 8001330:	eef0 0a47 	vmov.f32	s1, s14
 8001334:	eeb0 1a67 	vmov.f32	s2, s15
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fe4a 	bl	8000fd4 <calc_current2RPM_PID>
 8001340:	4603      	mov	r3, r0
 8001342:	b21a      	sxth	r2, r3
 8001344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001348:	4611      	mov	r1, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fdba 	bl	8000ec4 <set_M3508_current>
}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <setGM6020voltageRPM>:

void setGM6020currentRPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
	set_GM6020_current(motorID, calc_current2RPM_PID(motorID, RPMtarget, preset));
}

void setGM6020voltageRPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	460a      	mov	r2, r1
 8001362:	eef0 6a40 	vmov.f32	s13, s0
 8001366:	eeb0 7a60 	vmov.f32	s14, s1
 800136a:	eef0 7a41 	vmov.f32	s15, s2
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	4613      	mov	r3, r2
 8001372:	81bb      	strh	r3, [r7, #12]
 8001374:	edc7 6a00 	vstr	s13, [r7]
 8001378:	ed87 7a01 	vstr	s14, [r7, #4]
 800137c:	edc7 7a02 	vstr	s15, [r7, #8]
	set_GM6020_voltage(motorID, calc_voltage2RPM_PID(motorID, RPMtarget, preset));
 8001380:	edd7 6a00 	vldr	s13, [r7]
 8001384:	ed97 7a01 	vldr	s14, [r7, #4]
 8001388:	edd7 7a02 	vldr	s15, [r7, #8]
 800138c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001394:	eeb0 0a66 	vmov.f32	s0, s13
 8001398:	eef0 0a47 	vmov.f32	s1, s14
 800139c:	eeb0 1a67 	vmov.f32	s2, s15
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fed4 	bl	8001150 <calc_voltage2RPM_PID>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fdcc 	bl	8000f50 <set_GM6020_voltage>
}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <getMotorPosition>:

void setM2006RPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
	set_M3508_current(motorID, calc_M2006_current2RPM_PID(motorID, RPMtarget, preset));
}

uint16_t getMotorPosition(int8_t motorID) {
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
	return motor_feedback[motorID-1].motor_position;
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	1e5a      	subs	r2, r3, #1
 80013d0:	4906      	ldr	r1, [pc, #24]	@ (80013ec <getMotorPosition+0x2c>)
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	440b      	add	r3, r1
 80013dc:	881b      	ldrh	r3, [r3, #0]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000110 	.word	0x20000110

080013f0 <getMotorCurrent>:

int16_t getMotorRPM(int8_t motorID) {
	return motor_feedback[motorID-1].speed_rpm;
}

int16_t getMotorCurrent(int8_t motorID) {
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
	return motor_feedback[motorID-1].given_current;
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	1e5a      	subs	r2, r3, #1
 8001400:	4907      	ldr	r1, [pc, #28]	@ (8001420 <getMotorCurrent+0x30>)
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	440b      	add	r3, r1
 800140c:	3304      	adds	r3, #4
 800140e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000110 	.word	0x20000110

08001424 <usart_Init>:
pc_control_t pc_control;
custom_client_data_t custom_client_data;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 8001428:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800142c:	4905      	ldr	r1, [pc, #20]	@ (8001444 <usart_Init+0x20>)
 800142e:	4806      	ldr	r0, [pc, #24]	@ (8001448 <usart_Init+0x24>)
 8001430:	f008 fa86 	bl	8009940 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8001434:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001438:	4904      	ldr	r1, [pc, #16]	@ (800144c <usart_Init+0x28>)
 800143a:	4805      	ldr	r0, [pc, #20]	@ (8001450 <usart_Init+0x2c>)
 800143c:	f008 fa80 	bl	8009940 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000264 	.word	0x20000264
 8001448:	20000adc 	.word	0x20000adc
 800144c:	20000364 	.word	0x20000364
 8001450:	20000b6c 	.word	0x20000b6c

08001454 <usart_printf>:

void usart_printf(const char *fmt,...) {
 8001454:	b40f      	push	{r0, r1, r2, r3}
 8001456:	b580      	push	{r7, lr}
 8001458:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4a0c      	ldr	r2, [pc, #48]	@ (8001490 <usart_printf+0x3c>)
 8001460:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 8001462:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <usart_printf+0x3c>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68b9      	ldr	r1, [r7, #8]
 8001468:	480a      	ldr	r0, [pc, #40]	@ (8001494 <usart_printf+0x40>)
 800146a:	f00c fb8b 	bl	800db84 <vsiprintf>
 800146e:	4603      	mov	r3, r0
 8001470:	b29a      	uxth	r2, r3
 8001472:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <usart_printf+0x44>)
 8001474:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 8001476:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <usart_printf+0x44>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	4905      	ldr	r1, [pc, #20]	@ (8001494 <usart_printf+0x40>)
 800147e:	4807      	ldr	r0, [pc, #28]	@ (800149c <usart_printf+0x48>)
 8001480:	f008 f9ee 	bl	8009860 <HAL_UART_Transmit_DMA>
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800148c:	b004      	add	sp, #16
 800148e:	4770      	bx	lr
 8001490:	20000530 	.word	0x20000530
 8001494:	20000534 	.word	0x20000534
 8001498:	20000634 	.word	0x20000634
 800149c:	20000adc 	.word	0x20000adc

080014a0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]
	if (huart == &huart6) {
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4aab      	ldr	r2, [pc, #684]	@ (800175c <HAL_UARTEx_RxEventCallback+0x2bc>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	f040 8228 	bne.w	8001906 <HAL_UARTEx_RxEventCallback+0x466>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 80014b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014ba:	49a9      	ldr	r1, [pc, #676]	@ (8001760 <HAL_UARTEx_RxEventCallback+0x2c0>)
 80014bc:	48a7      	ldr	r0, [pc, #668]	@ (800175c <HAL_UARTEx_RxEventCallback+0x2bc>)
 80014be:	f008 fa3f 	bl	8009940 <HAL_UARTEx_ReceiveToIdle_DMA>
		uint16_t RxBuff16 = ((uint16_t) RxBuff_2[6] << 8) | RxBuff_2[5];
 80014c2:	4ba7      	ldr	r3, [pc, #668]	@ (8001760 <HAL_UARTEx_RxEventCallback+0x2c0>)
 80014c4:	799b      	ldrb	r3, [r3, #6]
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	4ba5      	ldr	r3, [pc, #660]	@ (8001760 <HAL_UARTEx_RxEventCallback+0x2c0>)
 80014cc:	795b      	ldrb	r3, [r3, #5]
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	81fb      	strh	r3, [r7, #14]
		//usart_printf("callback triggered at %d | %d | %d | %d || %d \r\n", RxBuff_2[0], RxBuff_2[1], RxBuff_2[2], RxBuff_2[3], RxBuff16);
		//usart_printf("test");
		switch (RxBuff16) {
 80014d6:	89fb      	ldrh	r3, [r7, #14]
 80014d8:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 80014dc:	f280 8212 	bge.w	8001904 <HAL_UARTEx_RxEventCallback+0x464>
 80014e0:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 80014e4:	f300 8208 	bgt.w	80018f8 <HAL_UARTEx_RxEventCallback+0x458>
 80014e8:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 80014ec:	f300 820a 	bgt.w	8001904 <HAL_UARTEx_RxEventCallback+0x464>
 80014f0:	f240 3202 	movw	r2, #770	@ 0x302
 80014f4:	4293      	cmp	r3, r2
 80014f6:	f280 80c6 	bge.w	8001686 <HAL_UARTEx_RxEventCallback+0x1e6>
 80014fa:	f240 3201 	movw	r2, #769	@ 0x301
 80014fe:	4293      	cmp	r3, r2
 8001500:	f000 80bb 	beq.w	800167a <HAL_UARTEx_RxEventCallback+0x1da>
 8001504:	f240 3201 	movw	r2, #769	@ 0x301
 8001508:	4293      	cmp	r3, r2
 800150a:	f300 81fb 	bgt.w	8001904 <HAL_UARTEx_RxEventCallback+0x464>
 800150e:	f240 220e 	movw	r2, #526	@ 0x20e
 8001512:	4293      	cmp	r3, r2
 8001514:	f300 81f6 	bgt.w	8001904 <HAL_UARTEx_RxEventCallback+0x464>
 8001518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800151c:	dc1f      	bgt.n	800155e <HAL_UARTEx_RxEventCallback+0xbe>
 800151e:	f240 1205 	movw	r2, #261	@ 0x105
 8001522:	4293      	cmp	r3, r2
 8001524:	d05b      	beq.n	80015de <HAL_UARTEx_RxEventCallback+0x13e>
 8001526:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800152a:	f280 81eb 	bge.w	8001904 <HAL_UARTEx_RxEventCallback+0x464>
 800152e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001532:	d04e      	beq.n	80015d2 <HAL_UARTEx_RxEventCallback+0x132>
 8001534:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001538:	f300 81e4 	bgt.w	8001904 <HAL_UARTEx_RxEventCallback+0x464>
 800153c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001540:	f300 81e0 	bgt.w	8001904 <HAL_UARTEx_RxEventCallback+0x464>
 8001544:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001548:	dc3e      	bgt.n	80015c8 <HAL_UARTEx_RxEventCallback+0x128>
 800154a:	2b03      	cmp	r3, #3
 800154c:	d036      	beq.n	80015bc <HAL_UARTEx_RxEventCallback+0x11c>
 800154e:	2b03      	cmp	r3, #3
 8001550:	f300 81d8 	bgt.w	8001904 <HAL_UARTEx_RxEventCallback+0x464>
 8001554:	2b01      	cmp	r3, #1
 8001556:	d027      	beq.n	80015a8 <HAL_UARTEx_RxEventCallback+0x108>
 8001558:	2b02      	cmp	r3, #2
 800155a:	d02b      	beq.n	80015b4 <HAL_UARTEx_RxEventCallback+0x114>
		    	//memcpy(&robot_position, (RxBuff_2 + frame_header_offset), robot_pos_len);
		    }

		    default: {
		    	//usart_printf("no match \r\n");
		        break;
 800155c:	e1d2      	b.n	8001904 <HAL_UARTEx_RxEventCallback+0x464>
		switch (RxBuff16) {
 800155e:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8001562:	2b0d      	cmp	r3, #13
 8001564:	f200 81ce 	bhi.w	8001904 <HAL_UARTEx_RxEventCallback+0x464>
 8001568:	a201      	add	r2, pc, #4	@ (adr r2, 8001570 <HAL_UARTEx_RxEventCallback+0xd0>)
 800156a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156e:	bf00      	nop
 8001570:	080015eb 	.word	0x080015eb
 8001574:	080015f7 	.word	0x080015f7
 8001578:	08001603 	.word	0x08001603
 800157c:	0800160f 	.word	0x0800160f
 8001580:	0800161b 	.word	0x0800161b
 8001584:	0800161b 	.word	0x0800161b
 8001588:	08001623 	.word	0x08001623
 800158c:	0800162f 	.word	0x0800162f
 8001590:	0800163b 	.word	0x0800163b
 8001594:	08001645 	.word	0x08001645
 8001598:	08001651 	.word	0x08001651
 800159c:	0800165d 	.word	0x0800165d
 80015a0:	08001669 	.word	0x08001669
 80015a4:	08001673 	.word	0x08001673
		    	memcpy(&game_status, (RxBuff_2 + frame_header_offset), game_status_len);
 80015a8:	4b6e      	ldr	r3, [pc, #440]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 80015aa:	220b      	movs	r2, #11
 80015ac:	4619      	mov	r1, r3
 80015ae:	486e      	ldr	r0, [pc, #440]	@ (8001768 <HAL_UARTEx_RxEventCallback+0x2c8>)
 80015b0:	f00c fb7c 	bl	800dcac <memcpy>
		    	memcpy(&game_result, (RxBuff_2 + frame_header_offset), game_result_len);
 80015b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 80015b6:	781a      	ldrb	r2, [r3, #0]
 80015b8:	4b6c      	ldr	r3, [pc, #432]	@ (800176c <HAL_UARTEx_RxEventCallback+0x2cc>)
 80015ba:	701a      	strb	r2, [r3, #0]
		    	memcpy(&robot_status, (RxBuff_2 + frame_header_offset), robot_status_len);
 80015bc:	4b69      	ldr	r3, [pc, #420]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 80015be:	220d      	movs	r2, #13
 80015c0:	4619      	mov	r1, r3
 80015c2:	486b      	ldr	r0, [pc, #428]	@ (8001770 <HAL_UARTEx_RxEventCallback+0x2d0>)
 80015c4:	f00c fb72 	bl	800dcac <memcpy>
		    	memcpy(&ext_supply_projectile_action, (RxBuff_2 + frame_header_offset), ext_supply_projectile_action_len);
 80015c8:	4b66      	ldr	r3, [pc, #408]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b69      	ldr	r3, [pc, #420]	@ (8001774 <HAL_UARTEx_RxEventCallback+0x2d4>)
 80015d0:	601a      	str	r2, [r3, #0]
		    	memcpy(&referee_warning, (RxBuff_2 + frame_header_offset), referee_warning_len);
 80015d2:	4a64      	ldr	r2, [pc, #400]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 80015d4:	4b68      	ldr	r3, [pc, #416]	@ (8001778 <HAL_UARTEx_RxEventCallback+0x2d8>)
 80015d6:	8811      	ldrh	r1, [r2, #0]
 80015d8:	7892      	ldrb	r2, [r2, #2]
 80015da:	8019      	strh	r1, [r3, #0]
 80015dc:	709a      	strb	r2, [r3, #2]
		    	memcpy(&dart_info, (RxBuff_2 + frame_header_offset), dart_info_len);
 80015de:	4b61      	ldr	r3, [pc, #388]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 80015e0:	2203      	movs	r2, #3
 80015e2:	4619      	mov	r1, r3
 80015e4:	4865      	ldr	r0, [pc, #404]	@ (800177c <HAL_UARTEx_RxEventCallback+0x2dc>)
 80015e6:	f00c fb61 	bl	800dcac <memcpy>
		    	memcpy(&robot_status, (RxBuff_2 + frame_header_offset), robot_status_len);
 80015ea:	4b5e      	ldr	r3, [pc, #376]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 80015ec:	220d      	movs	r2, #13
 80015ee:	4619      	mov	r1, r3
 80015f0:	485f      	ldr	r0, [pc, #380]	@ (8001770 <HAL_UARTEx_RxEventCallback+0x2d0>)
 80015f2:	f00c fb5b 	bl	800dcac <memcpy>
		    	memcpy(&power_heat_data, (RxBuff_2 + frame_header_offset), power_heat_data_len);
 80015f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 80015f8:	2210      	movs	r2, #16
 80015fa:	4619      	mov	r1, r3
 80015fc:	4860      	ldr	r0, [pc, #384]	@ (8001780 <HAL_UARTEx_RxEventCallback+0x2e0>)
 80015fe:	f00c fb55 	bl	800dcac <memcpy>
		    	memcpy(&robot_position, (RxBuff_2 + frame_header_offset), robot_pos_len);
 8001602:	4b58      	ldr	r3, [pc, #352]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001604:	2210      	movs	r2, #16
 8001606:	4619      	mov	r1, r3
 8001608:	485e      	ldr	r0, [pc, #376]	@ (8001784 <HAL_UARTEx_RxEventCallback+0x2e4>)
 800160a:	f00c fb4f 	bl	800dcac <memcpy>
		    	memcpy(&buffs, (RxBuff_2 + frame_header_offset), buff_len);
 800160e:	4b55      	ldr	r3, [pc, #340]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001610:	2206      	movs	r2, #6
 8001612:	4619      	mov	r1, r3
 8001614:	485c      	ldr	r0, [pc, #368]	@ (8001788 <HAL_UARTEx_RxEventCallback+0x2e8>)
 8001616:	f00c fb49 	bl	800dcac <memcpy>
		    	memcpy(&damage_data, (RxBuff_2 + frame_header_offset), damage_data_len);
 800161a:	4b52      	ldr	r3, [pc, #328]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 800161c:	781a      	ldrb	r2, [r3, #0]
 800161e:	4b5b      	ldr	r3, [pc, #364]	@ (800178c <HAL_UARTEx_RxEventCallback+0x2ec>)
 8001620:	701a      	strb	r2, [r3, #0]
		    	memcpy(&shoot_data, (RxBuff_2 + frame_header_offset), shoot_data_len);
 8001622:	4b50      	ldr	r3, [pc, #320]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001624:	2207      	movs	r2, #7
 8001626:	4619      	mov	r1, r3
 8001628:	4859      	ldr	r0, [pc, #356]	@ (8001790 <HAL_UARTEx_RxEventCallback+0x2f0>)
 800162a:	f00c fb3f 	bl	800dcac <memcpy>
		    	memcpy(&projectile_allowance, (RxBuff_2 + frame_header_offset), projectile_allowance_len);
 800162e:	4b4d      	ldr	r3, [pc, #308]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001630:	2206      	movs	r2, #6
 8001632:	4619      	mov	r1, r3
 8001634:	4857      	ldr	r0, [pc, #348]	@ (8001794 <HAL_UARTEx_RxEventCallback+0x2f4>)
 8001636:	f00c fb39 	bl	800dcac <memcpy>
		    	memcpy(&rfid_status, (RxBuff_2 + frame_header_offset), rfid_status_len);
 800163a:	4b4a      	ldr	r3, [pc, #296]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	4b55      	ldr	r3, [pc, #340]	@ (8001798 <HAL_UARTEx_RxEventCallback+0x2f8>)
 8001642:	601a      	str	r2, [r3, #0]
		    	memcpy(&dart_client_cmd, (RxBuff_2 + frame_header_offset), dart_client_cmd_len);
 8001644:	4b47      	ldr	r3, [pc, #284]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001646:	2206      	movs	r2, #6
 8001648:	4619      	mov	r1, r3
 800164a:	4854      	ldr	r0, [pc, #336]	@ (800179c <HAL_UARTEx_RxEventCallback+0x2fc>)
 800164c:	f00c fb2e 	bl	800dcac <memcpy>
		    	memcpy(&robot_positions, (RxBuff_2 + frame_header_offset), ground_robot_position_len);
 8001650:	4b44      	ldr	r3, [pc, #272]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001652:	2228      	movs	r2, #40	@ 0x28
 8001654:	4619      	mov	r1, r3
 8001656:	4852      	ldr	r0, [pc, #328]	@ (80017a0 <HAL_UARTEx_RxEventCallback+0x300>)
 8001658:	f00c fb28 	bl	800dcac <memcpy>
		    	memcpy(&radar_mark_data, (RxBuff_2 + frame_header_offset), radar_mark_data_len);
 800165c:	4a41      	ldr	r2, [pc, #260]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 800165e:	4b51      	ldr	r3, [pc, #324]	@ (80017a4 <HAL_UARTEx_RxEventCallback+0x304>)
 8001660:	6810      	ldr	r0, [r2, #0]
 8001662:	6018      	str	r0, [r3, #0]
 8001664:	8892      	ldrh	r2, [r2, #4]
 8001666:	809a      	strh	r2, [r3, #4]
		    	memcpy(&sentry_info, (RxBuff_2 + frame_header_offset), sentry_info_len);
 8001668:	4b3e      	ldr	r3, [pc, #248]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4b4e      	ldr	r3, [pc, #312]	@ (80017a8 <HAL_UARTEx_RxEventCallback+0x308>)
 8001670:	601a      	str	r2, [r3, #0]
		    	memcpy(&radar_info, (RxBuff_2 + frame_header_offset), radar_info_len);
 8001672:	4b3c      	ldr	r3, [pc, #240]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001674:	781a      	ldrb	r2, [r3, #0]
 8001676:	4b4d      	ldr	r3, [pc, #308]	@ (80017ac <HAL_UARTEx_RxEventCallback+0x30c>)
 8001678:	701a      	strb	r2, [r3, #0]
		    	memcpy(&robot_position, (RxBuff_2 + frame_header_offset), robot_interaction_data_len);
 800167a:	4b3a      	ldr	r3, [pc, #232]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 800167c:	2280      	movs	r2, #128	@ 0x80
 800167e:	4619      	mov	r1, r3
 8001680:	4840      	ldr	r0, [pc, #256]	@ (8001784 <HAL_UARTEx_RxEventCallback+0x2e4>)
 8001682:	f00c fb13 	bl	800dcac <memcpy>
		    	memcpy(&pc_control, (RxBuff_2 + frame_header_offset), pc_control_len);
 8001686:	4b37      	ldr	r3, [pc, #220]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001688:	220c      	movs	r2, #12
 800168a:	4619      	mov	r1, r3
 800168c:	4848      	ldr	r0, [pc, #288]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 800168e:	f00c fb0d 	bl	800dcac <memcpy>
		        if(pc_control.keyboard_values_1 > 127){
 8001692:	4b47      	ldr	r3, [pc, #284]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 8001694:	7a1b      	ldrb	r3, [r3, #8]
 8001696:	b25b      	sxtb	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	da09      	bge.n	80016b0 <HAL_UARTEx_RxEventCallback+0x210>
		        	pc_control.e = 1;
 800169c:	4b44      	ldr	r3, [pc, #272]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 800169e:	2201      	movs	r2, #1
 80016a0:	74da      	strb	r2, [r3, #19]
		        	pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 128;
 80016a2:	4b43      	ldr	r3, [pc, #268]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 80016a4:	7a1b      	ldrb	r3, [r3, #8]
 80016a6:	3b80      	subs	r3, #128	@ 0x80
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b41      	ldr	r3, [pc, #260]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 80016ac:	721a      	strb	r2, [r3, #8]
 80016ae:	e002      	b.n	80016b6 <HAL_UARTEx_RxEventCallback+0x216>
		        	pc_control.e = 0;
 80016b0:	4b3f      	ldr	r3, [pc, #252]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	74da      	strb	r2, [r3, #19]
		        if(pc_control.keyboard_values_1>63){
 80016b6:	4b3e      	ldr	r3, [pc, #248]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 80016b8:	7a1b      	ldrb	r3, [r3, #8]
 80016ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80016bc:	d909      	bls.n	80016d2 <HAL_UARTEx_RxEventCallback+0x232>
		        	pc_control.q = 1;
 80016be:	4b3c      	ldr	r3, [pc, #240]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	749a      	strb	r2, [r3, #18]
		            pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 64;
 80016c4:	4b3a      	ldr	r3, [pc, #232]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 80016c6:	7a1b      	ldrb	r3, [r3, #8]
 80016c8:	3b40      	subs	r3, #64	@ 0x40
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b38      	ldr	r3, [pc, #224]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 80016ce:	721a      	strb	r2, [r3, #8]
 80016d0:	e002      	b.n	80016d8 <HAL_UARTEx_RxEventCallback+0x238>
		        	pc_control.q = 0;
 80016d2:	4b37      	ldr	r3, [pc, #220]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	749a      	strb	r2, [r3, #18]
		        if(pc_control.keyboard_values_1>31){
 80016d8:	4b35      	ldr	r3, [pc, #212]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 80016da:	7a1b      	ldrb	r3, [r3, #8]
 80016dc:	2b1f      	cmp	r3, #31
 80016de:	d909      	bls.n	80016f4 <HAL_UARTEx_RxEventCallback+0x254>
		        	pc_control.ctrl = 1;
 80016e0:	4b33      	ldr	r3, [pc, #204]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	745a      	strb	r2, [r3, #17]
		            pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 32;
 80016e6:	4b32      	ldr	r3, [pc, #200]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 80016e8:	7a1b      	ldrb	r3, [r3, #8]
 80016ea:	3b20      	subs	r3, #32
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4b30      	ldr	r3, [pc, #192]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 80016f0:	721a      	strb	r2, [r3, #8]
 80016f2:	e002      	b.n	80016fa <HAL_UARTEx_RxEventCallback+0x25a>
		        	pc_control.ctrl = 0;
 80016f4:	4b2e      	ldr	r3, [pc, #184]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	745a      	strb	r2, [r3, #17]
		        if(pc_control.keyboard_values_1>15){
 80016fa:	4b2d      	ldr	r3, [pc, #180]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 80016fc:	7a1b      	ldrb	r3, [r3, #8]
 80016fe:	2b0f      	cmp	r3, #15
 8001700:	d909      	bls.n	8001716 <HAL_UARTEx_RxEventCallback+0x276>
		        	pc_control.shift = 1;
 8001702:	4b2b      	ldr	r3, [pc, #172]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 8001704:	2201      	movs	r2, #1
 8001706:	741a      	strb	r2, [r3, #16]
		            pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 16;
 8001708:	4b29      	ldr	r3, [pc, #164]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 800170a:	7a1b      	ldrb	r3, [r3, #8]
 800170c:	3b10      	subs	r3, #16
 800170e:	b2da      	uxtb	r2, r3
 8001710:	4b27      	ldr	r3, [pc, #156]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 8001712:	721a      	strb	r2, [r3, #8]
 8001714:	e002      	b.n	800171c <HAL_UARTEx_RxEventCallback+0x27c>
		        	pc_control.shift = 0;
 8001716:	4b26      	ldr	r3, [pc, #152]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 8001718:	2200      	movs	r2, #0
 800171a:	741a      	strb	r2, [r3, #16]
		        if(pc_control.keyboard_values_1>7){
 800171c:	4b24      	ldr	r3, [pc, #144]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 800171e:	7a1b      	ldrb	r3, [r3, #8]
 8001720:	2b07      	cmp	r3, #7
 8001722:	d909      	bls.n	8001738 <HAL_UARTEx_RxEventCallback+0x298>
		        	pc_control.d = 1;
 8001724:	4b22      	ldr	r3, [pc, #136]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 8001726:	2201      	movs	r2, #1
 8001728:	73da      	strb	r2, [r3, #15]
		            pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 8;
 800172a:	4b21      	ldr	r3, [pc, #132]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 800172c:	7a1b      	ldrb	r3, [r3, #8]
 800172e:	3b08      	subs	r3, #8
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4b1f      	ldr	r3, [pc, #124]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 8001734:	721a      	strb	r2, [r3, #8]
 8001736:	e002      	b.n	800173e <HAL_UARTEx_RxEventCallback+0x29e>
		        	pc_control.d = 0;
 8001738:	4b1d      	ldr	r3, [pc, #116]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 800173a:	2200      	movs	r2, #0
 800173c:	73da      	strb	r2, [r3, #15]
		        if(pc_control.keyboard_values_1>3){
 800173e:	4b1c      	ldr	r3, [pc, #112]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 8001740:	7a1b      	ldrb	r3, [r3, #8]
 8001742:	2b03      	cmp	r3, #3
 8001744:	d936      	bls.n	80017b4 <HAL_UARTEx_RxEventCallback+0x314>
		        	pc_control.a = 1;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 8001748:	2201      	movs	r2, #1
 800174a:	739a      	strb	r2, [r3, #14]
		            pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 4;
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 800174e:	7a1b      	ldrb	r3, [r3, #8]
 8001750:	3b04      	subs	r3, #4
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <HAL_UARTEx_RxEventCallback+0x310>)
 8001756:	721a      	strb	r2, [r3, #8]
 8001758:	e02f      	b.n	80017ba <HAL_UARTEx_RxEventCallback+0x31a>
 800175a:	bf00      	nop
 800175c:	20000b6c 	.word	0x20000b6c
 8001760:	20000364 	.word	0x20000364
 8001764:	2000036b 	.word	0x2000036b
 8001768:	20000468 	.word	0x20000468
 800176c:	20000478 	.word	0x20000478
 8001770:	20000488 	.word	0x20000488
 8001774:	2000047c 	.word	0x2000047c
 8001778:	20000480 	.word	0x20000480
 800177c:	20000484 	.word	0x20000484
 8001780:	20000498 	.word	0x20000498
 8001784:	200004a8 	.word	0x200004a8
 8001788:	200004b4 	.word	0x200004b4
 800178c:	200004bc 	.word	0x200004bc
 8001790:	200004c0 	.word	0x200004c0
 8001794:	200004c8 	.word	0x200004c8
 8001798:	200004d0 	.word	0x200004d0
 800179c:	200004d4 	.word	0x200004d4
 80017a0:	200004dc 	.word	0x200004dc
 80017a4:	20000504 	.word	0x20000504
 80017a8:	2000050c 	.word	0x2000050c
 80017ac:	20000510 	.word	0x20000510
 80017b0:	20000514 	.word	0x20000514
		        	pc_control.a = 0;
 80017b4:	4b56      	ldr	r3, [pc, #344]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	739a      	strb	r2, [r3, #14]
		        if(pc_control.keyboard_values_1>1){
 80017ba:	4b55      	ldr	r3, [pc, #340]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80017bc:	7a1b      	ldrb	r3, [r3, #8]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d909      	bls.n	80017d6 <HAL_UARTEx_RxEventCallback+0x336>
		        	pc_control.s = 1;
 80017c2:	4b53      	ldr	r3, [pc, #332]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	735a      	strb	r2, [r3, #13]
		            pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 2;
 80017c8:	4b51      	ldr	r3, [pc, #324]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80017ca:	7a1b      	ldrb	r3, [r3, #8]
 80017cc:	3b02      	subs	r3, #2
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80017d2:	721a      	strb	r2, [r3, #8]
 80017d4:	e002      	b.n	80017dc <HAL_UARTEx_RxEventCallback+0x33c>
		        	pc_control.s = 0;
 80017d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80017d8:	2200      	movs	r2, #0
 80017da:	735a      	strb	r2, [r3, #13]
		        if(pc_control.keyboard_values_1 > 0){
 80017dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80017de:	7a1b      	ldrb	r3, [r3, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_UARTEx_RxEventCallback+0x34c>
		        	pc_control.w = 1;
 80017e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	731a      	strb	r2, [r3, #12]
 80017ea:	e002      	b.n	80017f2 <HAL_UARTEx_RxEventCallback+0x352>
		        	pc_control.w = 0;
 80017ec:	4b48      	ldr	r3, [pc, #288]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	731a      	strb	r2, [r3, #12]
		        if(pc_control.keyboard_values_2 > 127){
 80017f2:	4b47      	ldr	r3, [pc, #284]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80017f4:	7a5b      	ldrb	r3, [r3, #9]
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	da09      	bge.n	8001810 <HAL_UARTEx_RxEventCallback+0x370>
					pc_control.b = 1;
 80017fc:	4b44      	ldr	r3, [pc, #272]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80017fe:	2201      	movs	r2, #1
 8001800:	76da      	strb	r2, [r3, #27]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 128;
 8001802:	4b43      	ldr	r3, [pc, #268]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 8001804:	7a5b      	ldrb	r3, [r3, #9]
 8001806:	3b80      	subs	r3, #128	@ 0x80
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b41      	ldr	r3, [pc, #260]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 800180c:	725a      	strb	r2, [r3, #9]
 800180e:	e002      	b.n	8001816 <HAL_UARTEx_RxEventCallback+0x376>
					pc_control.b = 0;
 8001810:	4b3f      	ldr	r3, [pc, #252]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 8001812:	2200      	movs	r2, #0
 8001814:	76da      	strb	r2, [r3, #27]
				if(pc_control.keyboard_values_2>63){
 8001816:	4b3e      	ldr	r3, [pc, #248]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 8001818:	7a5b      	ldrb	r3, [r3, #9]
 800181a:	2b3f      	cmp	r3, #63	@ 0x3f
 800181c:	d909      	bls.n	8001832 <HAL_UARTEx_RxEventCallback+0x392>
					pc_control.v = 1;
 800181e:	4b3c      	ldr	r3, [pc, #240]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 8001820:	2201      	movs	r2, #1
 8001822:	769a      	strb	r2, [r3, #26]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 64;
 8001824:	4b3a      	ldr	r3, [pc, #232]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 8001826:	7a5b      	ldrb	r3, [r3, #9]
 8001828:	3b40      	subs	r3, #64	@ 0x40
 800182a:	b2da      	uxtb	r2, r3
 800182c:	4b38      	ldr	r3, [pc, #224]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 800182e:	725a      	strb	r2, [r3, #9]
 8001830:	e002      	b.n	8001838 <HAL_UARTEx_RxEventCallback+0x398>
					pc_control.v = 0;
 8001832:	4b37      	ldr	r3, [pc, #220]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 8001834:	2200      	movs	r2, #0
 8001836:	769a      	strb	r2, [r3, #26]
				if(pc_control.keyboard_values_2>31){
 8001838:	4b35      	ldr	r3, [pc, #212]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 800183a:	7a5b      	ldrb	r3, [r3, #9]
 800183c:	2b1f      	cmp	r3, #31
 800183e:	d909      	bls.n	8001854 <HAL_UARTEx_RxEventCallback+0x3b4>
					pc_control.c = 1;
 8001840:	4b33      	ldr	r3, [pc, #204]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 8001842:	2201      	movs	r2, #1
 8001844:	765a      	strb	r2, [r3, #25]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 32;
 8001846:	4b32      	ldr	r3, [pc, #200]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 8001848:	7a5b      	ldrb	r3, [r3, #9]
 800184a:	3b20      	subs	r3, #32
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b30      	ldr	r3, [pc, #192]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 8001850:	725a      	strb	r2, [r3, #9]
 8001852:	e002      	b.n	800185a <HAL_UARTEx_RxEventCallback+0x3ba>
					pc_control.c = 0;
 8001854:	4b2e      	ldr	r3, [pc, #184]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 8001856:	2200      	movs	r2, #0
 8001858:	765a      	strb	r2, [r3, #25]
				if(pc_control.keyboard_values_2>15){
 800185a:	4b2d      	ldr	r3, [pc, #180]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 800185c:	7a5b      	ldrb	r3, [r3, #9]
 800185e:	2b0f      	cmp	r3, #15
 8001860:	d909      	bls.n	8001876 <HAL_UARTEx_RxEventCallback+0x3d6>
					pc_control.x = 1;
 8001862:	4b2b      	ldr	r3, [pc, #172]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 8001864:	2201      	movs	r2, #1
 8001866:	761a      	strb	r2, [r3, #24]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 16;
 8001868:	4b29      	ldr	r3, [pc, #164]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 800186a:	7a5b      	ldrb	r3, [r3, #9]
 800186c:	3b10      	subs	r3, #16
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b27      	ldr	r3, [pc, #156]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 8001872:	725a      	strb	r2, [r3, #9]
 8001874:	e002      	b.n	800187c <HAL_UARTEx_RxEventCallback+0x3dc>
					pc_control.x = 0;
 8001876:	4b26      	ldr	r3, [pc, #152]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 8001878:	2200      	movs	r2, #0
 800187a:	761a      	strb	r2, [r3, #24]
				if(pc_control.keyboard_values_2>7){
 800187c:	4b24      	ldr	r3, [pc, #144]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 800187e:	7a5b      	ldrb	r3, [r3, #9]
 8001880:	2b07      	cmp	r3, #7
 8001882:	d909      	bls.n	8001898 <HAL_UARTEx_RxEventCallback+0x3f8>
					pc_control.z = 1;
 8001884:	4b22      	ldr	r3, [pc, #136]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 8001886:	2201      	movs	r2, #1
 8001888:	75da      	strb	r2, [r3, #23]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 8;
 800188a:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 800188c:	7a5b      	ldrb	r3, [r3, #9]
 800188e:	3b08      	subs	r3, #8
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 8001894:	725a      	strb	r2, [r3, #9]
 8001896:	e002      	b.n	800189e <HAL_UARTEx_RxEventCallback+0x3fe>
					pc_control.z = 0;
 8001898:	4b1d      	ldr	r3, [pc, #116]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 800189a:	2200      	movs	r2, #0
 800189c:	75da      	strb	r2, [r3, #23]
				if(pc_control.keyboard_values_2>3){
 800189e:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80018a0:	7a5b      	ldrb	r3, [r3, #9]
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d909      	bls.n	80018ba <HAL_UARTEx_RxEventCallback+0x41a>
					pc_control.g = 1;
 80018a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	759a      	strb	r2, [r3, #22]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 4;
 80018ac:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80018ae:	7a5b      	ldrb	r3, [r3, #9]
 80018b0:	3b04      	subs	r3, #4
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	4b16      	ldr	r3, [pc, #88]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80018b6:	725a      	strb	r2, [r3, #9]
 80018b8:	e002      	b.n	80018c0 <HAL_UARTEx_RxEventCallback+0x420>
					pc_control.g = 0;
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80018bc:	2200      	movs	r2, #0
 80018be:	759a      	strb	r2, [r3, #22]
				if(pc_control.keyboard_values_2>1){
 80018c0:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80018c2:	7a5b      	ldrb	r3, [r3, #9]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d909      	bls.n	80018dc <HAL_UARTEx_RxEventCallback+0x43c>
					pc_control.f = 1;
 80018c8:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	755a      	strb	r2, [r3, #21]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 2;
 80018ce:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80018d0:	7a5b      	ldrb	r3, [r3, #9]
 80018d2:	3b02      	subs	r3, #2
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80018d8:	725a      	strb	r2, [r3, #9]
 80018da:	e002      	b.n	80018e2 <HAL_UARTEx_RxEventCallback+0x442>
					pc_control.f = 0;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80018de:	2200      	movs	r2, #0
 80018e0:	755a      	strb	r2, [r3, #21]
				if(pc_control.keyboard_values_2 > 0){
 80018e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80018e4:	7a5b      	ldrb	r3, [r3, #9]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_UARTEx_RxEventCallback+0x452>
					pc_control.r = 1;
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	751a      	strb	r2, [r3, #20]
 80018f0:	e002      	b.n	80018f8 <HAL_UARTEx_RxEventCallback+0x458>
					pc_control.r = 0;
 80018f2:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <HAL_UARTEx_RxEventCallback+0x470>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	751a      	strb	r2, [r3, #20]
		    	memcpy(&robot_position, (RxBuff_2 + frame_header_offset), map_data_len);
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <HAL_UARTEx_RxEventCallback+0x474>)
 80018fa:	2267      	movs	r2, #103	@ 0x67
 80018fc:	4619      	mov	r1, r3
 80018fe:	4806      	ldr	r0, [pc, #24]	@ (8001918 <HAL_UARTEx_RxEventCallback+0x478>)
 8001900:	f00c f9d4 	bl	800dcac <memcpy>
		        break;
 8001904:	bf00      	nop
		    }
		}
	}
}
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000514 	.word	0x20000514
 8001914:	2000036b 	.word	0x2000036b
 8001918:	200004a8 	.word	0x200004a8

0800191c <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	@ 0x28
 8001920:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 8001922:	2301      	movs	r3, #1
 8001924:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8001926:	2300      	movs	r3, #0
 8001928:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 800192a:	2301      	movs	r3, #1
 800192c:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 800192e:	2300      	movs	r3, #0
 8001930:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8001946:	463b      	mov	r3, r7
 8001948:	4619      	mov	r1, r3
 800194a:	480f      	ldr	r0, [pc, #60]	@ (8001988 <can_filter_init+0x6c>)
 800194c:	f003 fb7e 	bl	800504c <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8001950:	480d      	ldr	r0, [pc, #52]	@ (8001988 <can_filter_init+0x6c>)
 8001952:	f003 fc5b 	bl	800520c <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001956:	2102      	movs	r1, #2
 8001958:	480b      	ldr	r0, [pc, #44]	@ (8001988 <can_filter_init+0x6c>)
 800195a:	f003 fe8d 	bl	8005678 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 800195e:	230e      	movs	r3, #14
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 8001962:	230e      	movs	r3, #14
 8001964:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 8001966:	463b      	mov	r3, r7
 8001968:	4619      	mov	r1, r3
 800196a:	4808      	ldr	r0, [pc, #32]	@ (800198c <can_filter_init+0x70>)
 800196c:	f003 fb6e 	bl	800504c <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 8001970:	4806      	ldr	r0, [pc, #24]	@ (800198c <can_filter_init+0x70>)
 8001972:	f003 fc4b 	bl	800520c <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001976:	2102      	movs	r1, #2
 8001978:	4804      	ldr	r0, [pc, #16]	@ (800198c <can_filter_init+0x70>)
 800197a:	f003 fe7d 	bl	8005678 <HAL_CAN_ActivateNotification>
}
 800197e:	bf00      	nop
 8001980:	3728      	adds	r7, #40	@ 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000698 	.word	0x20000698
 800198c:	200006c0 	.word	0x200006c0

08001990 <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 800199a:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <imu_pwm_set+0x1c>)
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	6353      	str	r3, [r2, #52]	@ 0x34

}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	40014400 	.word	0x40014400

080019b0 <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	4613      	mov	r3, r2
 80019bc:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 80019be:	4b27      	ldr	r3, [pc, #156]	@ (8001a5c <RC_init+0xac>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	695a      	ldr	r2, [r3, #20]
 80019c4:	4b25      	ldr	r3, [pc, #148]	@ (8001a5c <RC_init+0xac>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019cc:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 80019ce:	4b23      	ldr	r3, [pc, #140]	@ (8001a5c <RC_init+0xac>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	4b21      	ldr	r3, [pc, #132]	@ (8001a5c <RC_init+0xac>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 0210 	orr.w	r2, r2, #16
 80019dc:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 80019de:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <RC_init+0xb0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <RC_init+0xb0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0201 	bic.w	r2, r2, #1
 80019ec:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 80019ee:	e007      	b.n	8001a00 <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80019f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <RC_init+0xb0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <RC_init+0xb0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0201 	bic.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8001a00:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <RC_init+0xb0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 8001a0e:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <RC_init+0xb0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a14      	ldr	r2, [pc, #80]	@ (8001a64 <RC_init+0xb4>)
 8001a14:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 8001a16:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <RC_init+0xb0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 8001a1e:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <RC_init+0xb0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 8001a26:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <RC_init+0xb0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	88fa      	ldrh	r2, [r7, #6]
 8001a2c:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <RC_init+0xb0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <RC_init+0xb0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001a3c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 8001a3e:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <RC_init+0xb0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <RC_init+0xb0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0201 	orr.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000b24 	.word	0x20000b24
 8001a60:	20000c74 	.word	0x20000c74
 8001a64:	40004804 	.word	0x40004804

08001a68 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
    osDelay(500);
 8001a70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a74:	f009 f9c4 	bl	800ae00 <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 8001a78:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001b1c <imu_temp_control_task+0xb4>
 8001a7c:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001b20 <imu_temp_control_task+0xb8>
 8001a80:	4a28      	ldr	r2, [pc, #160]	@ (8001b24 <imu_temp_control_task+0xbc>)
 8001a82:	2100      	movs	r1, #0
 8001a84:	4828      	ldr	r0, [pc, #160]	@ (8001b28 <imu_temp_control_task+0xc0>)
 8001a86:	f001 facf 	bl	8003028 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a8a:	4b28      	ldr	r3, [pc, #160]	@ (8001b2c <imu_temp_control_task+0xc4>)
 8001a8c:	2210      	movs	r2, #16
 8001a8e:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a90:	4826      	ldr	r0, [pc, #152]	@ (8001b2c <imu_temp_control_task+0xc4>)
 8001a92:	f006 fbcc 	bl	800822e <HAL_SPI_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <imu_temp_control_task+0x38>
    {
        Error_Handler();
 8001a9c:	f001 fabe 	bl	800301c <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f00a facb 	bl	800c03c <pcTaskGetName>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f00a fb5b 	bl	800c164 <xTaskGetHandle>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8001b30 <imu_temp_control_task+0xc8>)
 8001ab2:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b34 <imu_temp_control_task+0xcc>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 8001aba:	bf00      	nop
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f00a ff7b 	bl	800c9bc <ulTaskNotifyTake>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d1f7      	bne.n	8001abc <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8001acc:	f7fe ff4e 	bl	800096c <IMU_get_temp>
 8001ad0:	eef0 7a40 	vmov.f32	s15, s0
 8001ad4:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8001b38 <imu_temp_control_task+0xd0>
 8001ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8001adc:	4812      	ldr	r0, [pc, #72]	@ (8001b28 <imu_temp_control_task+0xc0>)
 8001ade:	f001 fafa 	bl	80030d6 <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 8001ae2:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <imu_temp_control_task+0xc0>)
 8001ae4:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ae8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af0:	d503      	bpl.n	8001afa <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 8001af2:	4b0d      	ldr	r3, [pc, #52]	@ (8001b28 <imu_temp_control_task+0xc0>)
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8001afa:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <imu_temp_control_task+0xc0>)
 8001afc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b04:	ee17 3a90 	vmov	r3, s15
 8001b08:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8001b0a:	89fb      	ldrh	r3, [r7, #14]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff3f 	bl	8001990 <imu_pwm_set>
        osDelay(5);
 8001b12:	2005      	movs	r0, #5
 8001b14:	f009 f974 	bl	800ae00 <osDelay>
    {
 8001b18:	e7cf      	b.n	8001aba <imu_temp_control_task+0x52>
 8001b1a:	bf00      	nop
 8001b1c:	45898000 	.word	0x45898000
 8001b20:	458ca000 	.word	0x458ca000
 8001b24:	0800e5f8 	.word	0x0800e5f8
 8001b28:	20000640 	.word	0x20000640
 8001b2c:	2000073c 	.word	0x2000073c
 8001b30:	20000638 	.word	0x20000638
 8001b34:	2000063c 	.word	0x2000063c
 8001b38:	42200000 	.word	0x42200000

08001b3c <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 8001b46:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	88fa      	ldrh	r2, [r7, #6]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d11b      	bne.n	8001b88 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8001b50:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <HAL_GPIO_EXTI_Callback+0x58>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d016      	beq.n	8001b88 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b5a:	f00a fea1 	bl	800c8a0 <xTaskGetSchedulerState>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d011      	beq.n	8001b88 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 8001b64:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	490c      	ldr	r1, [pc, #48]	@ (8001b9c <HAL_GPIO_EXTI_Callback+0x60>)
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f00a ff72 	bl	800ca54 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001b70:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <HAL_GPIO_EXTI_Callback+0x60>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d007      	beq.n	8001b88 <HAL_GPIO_EXTI_Callback+0x4c>
 8001b78:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <HAL_GPIO_EXTI_Callback+0x64>)
 8001b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	f3bf 8f4f 	dsb	sy
 8001b84:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	2000000e 	.word	0x2000000e
 8001b94:	2000063c 	.word	0x2000063c
 8001b98:	20000638 	.word	0x20000638
 8001b9c:	20000688 	.word	0x20000688
 8001ba0:	e000ed04 	.word	0xe000ed04

08001ba4 <ist8310_init>:
/**
  * @brief          initialize ist8310
  * @param[in]      none
  * @retval         error value
  */
uint8_t ist8310_init(void) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
    static const uint8_t wait_time = 150;
    static const uint8_t sleepTime = 50;
    uint8_t res = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	71bb      	strb	r3, [r7, #6]
    uint8_t writeNum = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	71fb      	strb	r3, [r7, #7]

    ist8310_GPIO_init();
 8001bb2:	f000 f8bd 	bl	8001d30 <ist8310_GPIO_init>
    ist8310_com_init();
 8001bb6:	f000 f8c2 	bl	8001d3e <ist8310_com_init>

    ist8310_RST_L();
 8001bba:	f000 f97b 	bl	8001eb4 <ist8310_RST_L>
    ist8310_delay_ms(sleepTime);
 8001bbe:	4b30      	ldr	r3, [pc, #192]	@ (8001c80 <ist8310_init+0xdc>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f916 	bl	8001df4 <ist8310_delay_ms>
    ist8310_RST_H();
 8001bc8:	f000 f968 	bl	8001e9c <ist8310_RST_H>
    ist8310_delay_ms(sleepTime);
 8001bcc:	4b2c      	ldr	r3, [pc, #176]	@ (8001c80 <ist8310_init+0xdc>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 f90f 	bl	8001df4 <ist8310_delay_ms>

    res = ist8310_IIC_read_single_reg(IST8310_WHO_AM_I);
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f000 f8b8 	bl	8001d4c <ist8310_IIC_read_single_reg>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	71bb      	strb	r3, [r7, #6]
    if (res != IST8310_WHO_AM_I_VALUE) {
 8001be0:	79bb      	ldrb	r3, [r7, #6]
 8001be2:	2b10      	cmp	r3, #16
 8001be4:	d001      	beq.n	8001bea <ist8310_init+0x46>
        return IST8310_NO_SENSOR;
 8001be6:	2340      	movs	r3, #64	@ 0x40
 8001be8:	e045      	b.n	8001c76 <ist8310_init+0xd2>
    }
    //set mpu6500 sonsor config and check
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 8001bea:	2300      	movs	r3, #0
 8001bec:	71fb      	strb	r3, [r7, #7]
 8001bee:	e03e      	b.n	8001c6e <ist8310_init+0xca>
        ist8310_IIC_write_single_reg(ist8310_write_reg_data_error[writeNum][0], ist8310_write_reg_data_error[writeNum][1]);
 8001bf0:	79fa      	ldrb	r2, [r7, #7]
 8001bf2:	4924      	ldr	r1, [pc, #144]	@ (8001c84 <ist8310_init+0xe0>)
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	7818      	ldrb	r0, [r3, #0]
 8001bfe:	79fa      	ldrb	r2, [r7, #7]
 8001c00:	4920      	ldr	r1, [pc, #128]	@ (8001c84 <ist8310_init+0xe0>)
 8001c02:	4613      	mov	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	440b      	add	r3, r1
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f000 f8b8 	bl	8001d84 <ist8310_IIC_write_single_reg>
        ist8310_delay_us(wait_time);
 8001c14:	4b1c      	ldr	r3, [pc, #112]	@ (8001c88 <ist8310_init+0xe4>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 f8f9 	bl	8001e10 <ist8310_delay_us>
        res = ist8310_IIC_read_single_reg(ist8310_write_reg_data_error[writeNum][0]);
 8001c1e:	79fa      	ldrb	r2, [r7, #7]
 8001c20:	4918      	ldr	r1, [pc, #96]	@ (8001c84 <ist8310_init+0xe0>)
 8001c22:	4613      	mov	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	4413      	add	r3, r2
 8001c28:	440b      	add	r3, r1
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 f88d 	bl	8001d4c <ist8310_IIC_read_single_reg>
 8001c32:	4603      	mov	r3, r0
 8001c34:	71bb      	strb	r3, [r7, #6]
        ist8310_delay_us(wait_time);
 8001c36:	4b14      	ldr	r3, [pc, #80]	@ (8001c88 <ist8310_init+0xe4>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f8e8 	bl	8001e10 <ist8310_delay_us>
        if (res != ist8310_write_reg_data_error[writeNum][1]) {
 8001c40:	79fa      	ldrb	r2, [r7, #7]
 8001c42:	4910      	ldr	r1, [pc, #64]	@ (8001c84 <ist8310_init+0xe0>)
 8001c44:	4613      	mov	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	79ba      	ldrb	r2, [r7, #6]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d008      	beq.n	8001c68 <ist8310_init+0xc4>
            return ist8310_write_reg_data_error[writeNum][2];
 8001c56:	79fa      	ldrb	r2, [r7, #7]
 8001c58:	490a      	ldr	r1, [pc, #40]	@ (8001c84 <ist8310_init+0xe0>)
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	3302      	adds	r3, #2
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	e006      	b.n	8001c76 <ist8310_init+0xd2>
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	71fb      	strb	r3, [r7, #7]
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d9bd      	bls.n	8001bf0 <ist8310_init+0x4c>
        }
    }
    return IST8310_NO_ERROR;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	0800e610 	.word	0x0800e610
 8001c84:	0800e604 	.word	0x0800e604
 8001c88:	0800e611 	.word	0x0800e611

08001c8c <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 8001c98:	f107 0308 	add.w	r3, r7, #8
 8001c9c:	2206      	movs	r2, #6
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	f000 f88b 	bl	8001dbc <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 8001ca6:	7a7b      	ldrb	r3, [r7, #9]
 8001ca8:	021b      	lsls	r3, r3, #8
 8001caa:	b21a      	sxth	r2, r3
 8001cac:	7a3b      	ldrb	r3, [r7, #8]
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 8001cb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cb8:	ee07 3a90 	vmov	s15, r3
 8001cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001d2c <ist8310_read_mag+0xa0>
 8001cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 8001cce:	7afb      	ldrb	r3, [r7, #11]
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	b21a      	sxth	r2, r3
 8001cd4:	7abb      	ldrb	r3, [r7, #10]
 8001cd6:	b21b      	sxth	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 8001cdc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ce0:	ee07 3a90 	vmov	s15, r3
 8001ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3304      	adds	r3, #4
 8001cec:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001d2c <ist8310_read_mag+0xa0>
 8001cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf4:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 8001cf8:	7b7b      	ldrb	r3, [r7, #13]
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	b21a      	sxth	r2, r3
 8001cfe:	7b3b      	ldrb	r3, [r7, #12]
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	4313      	orrs	r3, r2
 8001d04:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 8001d06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d0a:	ee07 3a90 	vmov	s15, r3
 8001d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3308      	adds	r3, #8
 8001d16:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001d2c <ist8310_read_mag+0xa0>
 8001d1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d1e:	edc3 7a00 	vstr	s15, [r3]
}
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	3e99999a 	.word	0x3e99999a

08001d30 <ist8310_GPIO_init>:
  * @brief          initialize ist8310 gpio.
  * @param[in]      none
  * @retval         none
  */
void ist8310_GPIO_init(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0

}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <ist8310_com_init>:
  * @brief          initialize ist8310 communication interface
  * @param[in]      none
  * @retval         none
  */
void ist8310_com_init(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <ist8310_IIC_read_single_reg>:
  * @brief          read a byte of ist8310 by i2c
  * @param[in]      register address
  * @retval         value of the register
  */
uint8_t ist8310_IIC_read_single_reg(uint8_t reg)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af04      	add	r7, sp, #16
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&res,1,10);
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	230a      	movs	r3, #10
 8001d60:	9302      	str	r3, [sp, #8]
 8001d62:	2301      	movs	r3, #1
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	f107 030f 	add.w	r3, r7, #15
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	211c      	movs	r1, #28
 8001d70:	4803      	ldr	r0, [pc, #12]	@ (8001d80 <ist8310_IIC_read_single_reg+0x34>)
 8001d72:	f004 fff7 	bl	8006d64 <HAL_I2C_Mem_Read>
    return res;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	200006e8 	.word	0x200006e8

08001d84 <ist8310_IIC_write_single_reg>:
  * @param[in]      register address
  * @param[in]      write value
  * @retval         value of the register
  */
void ist8310_IIC_write_single_reg(uint8_t reg, uint8_t data)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af04      	add	r7, sp, #16
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	460a      	mov	r2, r1
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	4613      	mov	r3, r2
 8001d92:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&data,1,10);
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	230a      	movs	r3, #10
 8001d9a:	9302      	str	r3, [sp, #8]
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	1dbb      	adds	r3, r7, #6
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	2301      	movs	r3, #1
 8001da6:	211c      	movs	r1, #28
 8001da8:	4803      	ldr	r0, [pc, #12]	@ (8001db8 <ist8310_IIC_write_single_reg+0x34>)
 8001daa:	f004 fee1 	bl	8006b70 <HAL_I2C_Mem_Write>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200006e8 	.word	0x200006e8

08001dbc <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af04      	add	r7, sp, #16
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	79bb      	ldrb	r3, [r7, #6]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	210a      	movs	r1, #10
 8001dd6:	9102      	str	r1, [sp, #8]
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	211c      	movs	r1, #28
 8001de2:	4803      	ldr	r0, [pc, #12]	@ (8001df0 <ist8310_IIC_read_muli_reg+0x34>)
 8001de4:	f004 ffbe 	bl	8006d64 <HAL_I2C_Mem_Read>
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	200006e8 	.word	0x200006e8

08001df4 <ist8310_delay_ms>:
  * @brief          delay x millisecond
  * @param[in]      ms: ms millisecond
  * @retval         none
  */
void ist8310_delay_ms(uint16_t ms)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f003 f803 	bl	8004e0c <HAL_Delay>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <ist8310_delay_us>:
  * @brief          delay x microsecond
  * @param[in]      us: us microsecond
  * @retval         none
  */
void ist8310_delay_us(uint16_t us)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	@ 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	80fb      	strh	r3, [r7, #6]
    uint32_t ticks = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
    uint32_t told = 0, tnow = 0, tcnt = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	2300      	movs	r3, #0
 8001e28:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <ist8310_delay_us+0x88>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	60fb      	str	r3, [r7, #12]
    ticks = us * 72;
 8001e34:	88fa      	ldrh	r2, [r7, #6]
 8001e36:	4613      	mov	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8001e40:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <ist8310_delay_us+0x88>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8001e46:	4b14      	ldr	r3, [pc, #80]	@ (8001e98 <ist8310_delay_us+0x88>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d0f8      	beq.n	8001e46 <ist8310_delay_us+0x36>
        {
            if (tnow < told)
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d206      	bcs.n	8001e6a <ist8310_delay_us+0x5a>
            {
                tcnt += told - tnow;
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4413      	add	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	e007      	b.n	8001e7a <ist8310_delay_us+0x6a>
            }
            else
            {
                tcnt += reload - tnow + told;
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad2      	subs	r2, r2, r3
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	4413      	add	r3, r2
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4413      	add	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d200      	bcs.n	8001e88 <ist8310_delay_us+0x78>
        tnow = SysTick->VAL;
 8001e86:	e7de      	b.n	8001e46 <ist8310_delay_us+0x36>
            {
                break;
 8001e88:	bf00      	nop
            }
        }
    }
}
 8001e8a:	bf00      	nop
 8001e8c:	3724      	adds	r7, #36	@ 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000e010 	.word	0xe000e010

08001e9c <ist8310_RST_H>:
  * @brief          set the RSTN PIN to 1
  * @param[in]      none
  * @retval         none
  */
void ist8310_RST_H(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	2140      	movs	r1, #64	@ 0x40
 8001ea4:	4802      	ldr	r0, [pc, #8]	@ (8001eb0 <ist8310_RST_H+0x14>)
 8001ea6:	f004 fced 	bl	8006884 <HAL_GPIO_WritePin>
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40021800 	.word	0x40021800

08001eb4 <ist8310_RST_L>:
  * @brief          set the RSTN PIN to 0
  * @param[in]      none
  * @retval         none
  */
extern void ist8310_RST_L(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2140      	movs	r1, #64	@ 0x40
 8001ebc:	4802      	ldr	r0, [pc, #8]	@ (8001ec8 <ist8310_RST_L+0x14>)
 8001ebe:	f004 fce1 	bl	8006884 <HAL_GPIO_WritePin>
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40021800 	.word	0x40021800

08001ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed0:	f002 ff2a 	bl	8004d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ed4:	f000 f876 	bl	8001fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ed8:	f000 fd1e 	bl	8002918 <MX_GPIO_Init>
  MX_DMA_Init();
 8001edc:	f000 fca6 	bl	800282c <MX_DMA_Init>
  MX_CAN1_Init();
 8001ee0:	f000 f8dc 	bl	800209c <MX_CAN1_Init>
  MX_CAN2_Init();
 8001ee4:	f000 f910 	bl	8002108 <MX_CAN2_Init>
  MX_SPI1_Init();
 8001ee8:	f000 f972 	bl	80021d0 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001eec:	f000 fa4e 	bl	800238c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001ef0:	f000 fc1c 	bl	800272c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001ef4:	f000 fc70 	bl	80027d8 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8001ef8:	f000 f9a0 	bl	800223c <MX_TIM1_Init>
  MX_TIM8_Init();
 8001efc:	f000 fb2c 	bl	8002558 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8001f00:	f000 fc3e 	bl	8002780 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8001f04:	f000 fbc4 	bl	8002690 <MX_TIM10_Init>
  MX_I2C3_Init();
 8001f08:	f000 f934 	bl	8002174 <MX_I2C3_Init>
  MX_TIM5_Init();
 8001f0c:	f000 fab4 	bl	8002478 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8001f10:	f7ff fd04 	bl	800191c <can_filter_init>
  remote_control_init();
 8001f14:	f001 fdc6 	bl	8003aa4 <remote_control_init>
  usart_Init();
 8001f18:	f7ff fa84 	bl	8001424 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 8001f1c:	f001 fdd0 	bl	8003ac0 <get_remote_control_point>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4a17      	ldr	r2, [pc, #92]	@ (8001f80 <main+0xb4>)
 8001f24:	6013      	str	r3, [r2, #0]

  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */
  PWMInit(&htim1, &htim4, &htim5, &htim8);
 8001f26:	4b17      	ldr	r3, [pc, #92]	@ (8001f84 <main+0xb8>)
 8001f28:	4a17      	ldr	r2, [pc, #92]	@ (8001f88 <main+0xbc>)
 8001f2a:	4918      	ldr	r1, [pc, #96]	@ (8001f8c <main+0xc0>)
 8001f2c:	4818      	ldr	r0, [pc, #96]	@ (8001f90 <main+0xc4>)
 8001f2e:	f001 fa1b 	bl	8003368 <PWMInit>
  /* Init scheduler */
  osKernelInitialize();
 8001f32:	f008 fe89 	bl	800ac48 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 8001f36:	4a17      	ldr	r2, [pc, #92]	@ (8001f94 <main+0xc8>)
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4817      	ldr	r0, [pc, #92]	@ (8001f98 <main+0xcc>)
 8001f3c:	f008 fece 	bl	800acdc <osThreadNew>
 8001f40:	4603      	mov	r3, r0
 8001f42:	4a16      	ldr	r2, [pc, #88]	@ (8001f9c <main+0xd0>)
 8001f44:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 8001f46:	4a16      	ldr	r2, [pc, #88]	@ (8001fa0 <main+0xd4>)
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4816      	ldr	r0, [pc, #88]	@ (8001fa4 <main+0xd8>)
 8001f4c:	f008 fec6 	bl	800acdc <osThreadNew>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4a15      	ldr	r2, [pc, #84]	@ (8001fa8 <main+0xdc>)
 8001f54:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8001f56:	4a15      	ldr	r2, [pc, #84]	@ (8001fac <main+0xe0>)
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4815      	ldr	r0, [pc, #84]	@ (8001fb0 <main+0xe4>)
 8001f5c:	f008 febe 	bl	800acdc <osThreadNew>
 8001f60:	4603      	mov	r3, r0
 8001f62:	4a14      	ldr	r2, [pc, #80]	@ (8001fb4 <main+0xe8>)
 8001f64:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 8001f66:	4a14      	ldr	r2, [pc, #80]	@ (8001fb8 <main+0xec>)
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4814      	ldr	r0, [pc, #80]	@ (8001fbc <main+0xf0>)
 8001f6c:	f008 feb6 	bl	800acdc <osThreadNew>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4a13      	ldr	r2, [pc, #76]	@ (8001fc0 <main+0xf4>)
 8001f74:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001f76:	f008 fe8b 	bl	800ac90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f7a:	bf00      	nop
 8001f7c:	e7fd      	b.n	8001f7a <main+0xae>
 8001f7e:	bf00      	nop
 8001f80:	20000da4 	.word	0x20000da4
 8001f84:	2000086c 	.word	0x2000086c
 8001f88:	20000824 	.word	0x20000824
 8001f8c:	200007dc 	.word	0x200007dc
 8001f90:	20000794 	.word	0x20000794
 8001f94:	0800e614 	.word	0x0800e614
 8001f98:	08002c25 	.word	0x08002c25
 8001f9c:	20000d94 	.word	0x20000d94
 8001fa0:	0800e638 	.word	0x0800e638
 8001fa4:	08002c89 	.word	0x08002c89
 8001fa8:	20000d98 	.word	0x20000d98
 8001fac:	0800e65c 	.word	0x0800e65c
 8001fb0:	08001a69 	.word	0x08001a69
 8001fb4:	20000d9c 	.word	0x20000d9c
 8001fb8:	0800e680 	.word	0x0800e680
 8001fbc:	0800300d 	.word	0x0800300d
 8001fc0:	20000da0 	.word	0x20000da0

08001fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b094      	sub	sp, #80	@ 0x50
 8001fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fca:	f107 0320 	add.w	r3, r7, #32
 8001fce:	2230      	movs	r2, #48	@ 0x30
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f00b fde0 	bl	800db98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd8:	f107 030c 	add.w	r3, r7, #12
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	4b29      	ldr	r3, [pc, #164]	@ (8002094 <SystemClock_Config+0xd0>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff0:	4a28      	ldr	r2, [pc, #160]	@ (8002094 <SystemClock_Config+0xd0>)
 8001ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff8:	4b26      	ldr	r3, [pc, #152]	@ (8002094 <SystemClock_Config+0xd0>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002004:	2300      	movs	r3, #0
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	4b23      	ldr	r3, [pc, #140]	@ (8002098 <SystemClock_Config+0xd4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a22      	ldr	r2, [pc, #136]	@ (8002098 <SystemClock_Config+0xd4>)
 800200e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	4b20      	ldr	r3, [pc, #128]	@ (8002098 <SystemClock_Config+0xd4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002020:	2301      	movs	r3, #1
 8002022:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002024:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800202a:	2302      	movs	r3, #2
 800202c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800202e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002032:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002034:	2306      	movs	r3, #6
 8002036:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002038:	23a8      	movs	r3, #168	@ 0xa8
 800203a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800203c:	2302      	movs	r3, #2
 800203e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002040:	2304      	movs	r3, #4
 8002042:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002044:	f107 0320 	add.w	r3, r7, #32
 8002048:	4618      	mov	r0, r3
 800204a:	f005 fc71 	bl	8007930 <HAL_RCC_OscConfig>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002054:	f000 ffe2 	bl	800301c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002058:	230f      	movs	r3, #15
 800205a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800205c:	2302      	movs	r3, #2
 800205e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002064:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002068:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800206a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800206e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	2105      	movs	r1, #5
 8002076:	4618      	mov	r0, r3
 8002078:	f005 fed2 	bl	8007e20 <HAL_RCC_ClockConfig>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002082:	f000 ffcb 	bl	800301c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002086:	f005 ffb1 	bl	8007fec <HAL_RCC_EnableCSS>
}
 800208a:	bf00      	nop
 800208c:	3750      	adds	r7, #80	@ 0x50
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
 8002098:	40007000 	.word	0x40007000

0800209c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80020a0:	4b17      	ldr	r3, [pc, #92]	@ (8002100 <MX_CAN1_Init+0x64>)
 80020a2:	4a18      	ldr	r2, [pc, #96]	@ (8002104 <MX_CAN1_Init+0x68>)
 80020a4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80020a6:	4b16      	ldr	r3, [pc, #88]	@ (8002100 <MX_CAN1_Init+0x64>)
 80020a8:	2203      	movs	r2, #3
 80020aa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80020ac:	4b14      	ldr	r3, [pc, #80]	@ (8002100 <MX_CAN1_Init+0x64>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80020b2:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <MX_CAN1_Init+0x64>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80020b8:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <MX_CAN1_Init+0x64>)
 80020ba:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80020be:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80020c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002100 <MX_CAN1_Init+0x64>)
 80020c2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80020c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80020c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002100 <MX_CAN1_Init+0x64>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80020ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <MX_CAN1_Init+0x64>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80020d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002100 <MX_CAN1_Init+0x64>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80020da:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <MX_CAN1_Init+0x64>)
 80020dc:	2200      	movs	r2, #0
 80020de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80020e0:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <MX_CAN1_Init+0x64>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80020e6:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <MX_CAN1_Init+0x64>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80020ec:	4804      	ldr	r0, [pc, #16]	@ (8002100 <MX_CAN1_Init+0x64>)
 80020ee:	f002 feb1 	bl	8004e54 <HAL_CAN_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80020f8:	f000 ff90 	bl	800301c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000698 	.word	0x20000698
 8002104:	40006400 	.word	0x40006400

08002108 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800210c:	4b17      	ldr	r3, [pc, #92]	@ (800216c <MX_CAN2_Init+0x64>)
 800210e:	4a18      	ldr	r2, [pc, #96]	@ (8002170 <MX_CAN2_Init+0x68>)
 8002110:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8002112:	4b16      	ldr	r3, [pc, #88]	@ (800216c <MX_CAN2_Init+0x64>)
 8002114:	2203      	movs	r2, #3
 8002116:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002118:	4b14      	ldr	r3, [pc, #80]	@ (800216c <MX_CAN2_Init+0x64>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800211e:	4b13      	ldr	r3, [pc, #76]	@ (800216c <MX_CAN2_Init+0x64>)
 8002120:	2200      	movs	r2, #0
 8002122:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8002124:	4b11      	ldr	r3, [pc, #68]	@ (800216c <MX_CAN2_Init+0x64>)
 8002126:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 800212a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800212c:	4b0f      	ldr	r3, [pc, #60]	@ (800216c <MX_CAN2_Init+0x64>)
 800212e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002132:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002134:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <MX_CAN2_Init+0x64>)
 8002136:	2200      	movs	r2, #0
 8002138:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800213a:	4b0c      	ldr	r3, [pc, #48]	@ (800216c <MX_CAN2_Init+0x64>)
 800213c:	2200      	movs	r2, #0
 800213e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002140:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <MX_CAN2_Init+0x64>)
 8002142:	2200      	movs	r2, #0
 8002144:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002146:	4b09      	ldr	r3, [pc, #36]	@ (800216c <MX_CAN2_Init+0x64>)
 8002148:	2200      	movs	r2, #0
 800214a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800214c:	4b07      	ldr	r3, [pc, #28]	@ (800216c <MX_CAN2_Init+0x64>)
 800214e:	2200      	movs	r2, #0
 8002150:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002152:	4b06      	ldr	r3, [pc, #24]	@ (800216c <MX_CAN2_Init+0x64>)
 8002154:	2200      	movs	r2, #0
 8002156:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002158:	4804      	ldr	r0, [pc, #16]	@ (800216c <MX_CAN2_Init+0x64>)
 800215a:	f002 fe7b 	bl	8004e54 <HAL_CAN_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002164:	f000 ff5a 	bl	800301c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}
 800216c:	200006c0 	.word	0x200006c0
 8002170:	40006800 	.word	0x40006800

08002174 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002178:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <MX_I2C3_Init+0x50>)
 800217a:	4a13      	ldr	r2, [pc, #76]	@ (80021c8 <MX_I2C3_Init+0x54>)
 800217c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800217e:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <MX_I2C3_Init+0x50>)
 8002180:	4a12      	ldr	r2, [pc, #72]	@ (80021cc <MX_I2C3_Init+0x58>)
 8002182:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002184:	4b0f      	ldr	r3, [pc, #60]	@ (80021c4 <MX_I2C3_Init+0x50>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800218a:	4b0e      	ldr	r3, [pc, #56]	@ (80021c4 <MX_I2C3_Init+0x50>)
 800218c:	2200      	movs	r2, #0
 800218e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002190:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <MX_I2C3_Init+0x50>)
 8002192:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002196:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002198:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <MX_I2C3_Init+0x50>)
 800219a:	2200      	movs	r2, #0
 800219c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800219e:	4b09      	ldr	r3, [pc, #36]	@ (80021c4 <MX_I2C3_Init+0x50>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021a4:	4b07      	ldr	r3, [pc, #28]	@ (80021c4 <MX_I2C3_Init+0x50>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021aa:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <MX_I2C3_Init+0x50>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80021b0:	4804      	ldr	r0, [pc, #16]	@ (80021c4 <MX_I2C3_Init+0x50>)
 80021b2:	f004 fb99 	bl	80068e8 <HAL_I2C_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80021bc:	f000 ff2e 	bl	800301c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	200006e8 	.word	0x200006e8
 80021c8:	40005c00 	.word	0x40005c00
 80021cc:	00061a80 	.word	0x00061a80

080021d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021d4:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <MX_SPI1_Init+0x64>)
 80021d6:	4a18      	ldr	r2, [pc, #96]	@ (8002238 <MX_SPI1_Init+0x68>)
 80021d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021da:	4b16      	ldr	r3, [pc, #88]	@ (8002234 <MX_SPI1_Init+0x64>)
 80021dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021e2:	4b14      	ldr	r3, [pc, #80]	@ (8002234 <MX_SPI1_Init+0x64>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021e8:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <MX_SPI1_Init+0x64>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80021ee:	4b11      	ldr	r3, [pc, #68]	@ (8002234 <MX_SPI1_Init+0x64>)
 80021f0:	2202      	movs	r2, #2
 80021f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80021f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <MX_SPI1_Init+0x64>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002234 <MX_SPI1_Init+0x64>)
 80021fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002200:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002202:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <MX_SPI1_Init+0x64>)
 8002204:	2238      	movs	r2, #56	@ 0x38
 8002206:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002208:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <MX_SPI1_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800220e:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <MX_SPI1_Init+0x64>)
 8002210:	2200      	movs	r2, #0
 8002212:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002214:	4b07      	ldr	r3, [pc, #28]	@ (8002234 <MX_SPI1_Init+0x64>)
 8002216:	2200      	movs	r2, #0
 8002218:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800221a:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <MX_SPI1_Init+0x64>)
 800221c:	220a      	movs	r2, #10
 800221e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002220:	4804      	ldr	r0, [pc, #16]	@ (8002234 <MX_SPI1_Init+0x64>)
 8002222:	f006 f804 	bl	800822e <HAL_SPI_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800222c:	f000 fef6 	bl	800301c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}
 8002234:	2000073c 	.word	0x2000073c
 8002238:	40013000 	.word	0x40013000

0800223c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b092      	sub	sp, #72	@ 0x48
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002242:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800224c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
 800225c:	615a      	str	r2, [r3, #20]
 800225e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	2220      	movs	r2, #32
 8002264:	2100      	movs	r1, #0
 8002266:	4618      	mov	r0, r3
 8002268:	f00b fc96 	bl	800db98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800226c:	4b45      	ldr	r3, [pc, #276]	@ (8002384 <MX_TIM1_Init+0x148>)
 800226e:	4a46      	ldr	r2, [pc, #280]	@ (8002388 <MX_TIM1_Init+0x14c>)
 8002270:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 335;
 8002272:	4b44      	ldr	r3, [pc, #272]	@ (8002384 <MX_TIM1_Init+0x148>)
 8002274:	f240 124f 	movw	r2, #335	@ 0x14f
 8002278:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227a:	4b42      	ldr	r3, [pc, #264]	@ (8002384 <MX_TIM1_Init+0x148>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8002280:	4b40      	ldr	r3, [pc, #256]	@ (8002384 <MX_TIM1_Init+0x148>)
 8002282:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002286:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002288:	4b3e      	ldr	r3, [pc, #248]	@ (8002384 <MX_TIM1_Init+0x148>)
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800228e:	4b3d      	ldr	r3, [pc, #244]	@ (8002384 <MX_TIM1_Init+0x148>)
 8002290:	2200      	movs	r2, #0
 8002292:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002294:	4b3b      	ldr	r3, [pc, #236]	@ (8002384 <MX_TIM1_Init+0x148>)
 8002296:	2200      	movs	r2, #0
 8002298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800229a:	483a      	ldr	r0, [pc, #232]	@ (8002384 <MX_TIM1_Init+0x148>)
 800229c:	f006 fb94 	bl	80089c8 <HAL_TIM_PWM_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80022a6:	f000 feb9 	bl	800301c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80022b6:	4619      	mov	r1, r3
 80022b8:	4832      	ldr	r0, [pc, #200]	@ (8002384 <MX_TIM1_Init+0x148>)
 80022ba:	f007 f9b3 	bl	8009624 <HAL_TIMEx_MasterConfigSynchronization>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80022c4:	f000 feaa 	bl	800301c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022c8:	2360      	movs	r3, #96	@ 0x60
 80022ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022d0:	2300      	movs	r3, #0
 80022d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022d4:	2300      	movs	r3, #0
 80022d6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022d8:	2300      	movs	r3, #0
 80022da:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022dc:	2300      	movs	r3, #0
 80022de:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022e0:	2300      	movs	r3, #0
 80022e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022e8:	2200      	movs	r2, #0
 80022ea:	4619      	mov	r1, r3
 80022ec:	4825      	ldr	r0, [pc, #148]	@ (8002384 <MX_TIM1_Init+0x148>)
 80022ee:	f006 fcf3 	bl	8008cd8 <HAL_TIM_PWM_ConfigChannel>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80022f8:	f000 fe90 	bl	800301c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002300:	2204      	movs	r2, #4
 8002302:	4619      	mov	r1, r3
 8002304:	481f      	ldr	r0, [pc, #124]	@ (8002384 <MX_TIM1_Init+0x148>)
 8002306:	f006 fce7 	bl	8008cd8 <HAL_TIM_PWM_ConfigChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8002310:	f000 fe84 	bl	800301c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002314:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002318:	2208      	movs	r2, #8
 800231a:	4619      	mov	r1, r3
 800231c:	4819      	ldr	r0, [pc, #100]	@ (8002384 <MX_TIM1_Init+0x148>)
 800231e:	f006 fcdb 	bl	8008cd8 <HAL_TIM_PWM_ConfigChannel>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002328:	f000 fe78 	bl	800301c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800232c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002330:	220c      	movs	r2, #12
 8002332:	4619      	mov	r1, r3
 8002334:	4813      	ldr	r0, [pc, #76]	@ (8002384 <MX_TIM1_Init+0x148>)
 8002336:	f006 fccf 	bl	8008cd8 <HAL_TIM_PWM_ConfigChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002340:	f000 fe6c 	bl	800301c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002344:	2300      	movs	r3, #0
 8002346:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002348:	2300      	movs	r3, #0
 800234a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002358:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800235c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	4619      	mov	r1, r3
 8002366:	4807      	ldr	r0, [pc, #28]	@ (8002384 <MX_TIM1_Init+0x148>)
 8002368:	f007 f9d8 	bl	800971c <HAL_TIMEx_ConfigBreakDeadTime>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8002372:	f000 fe53 	bl	800301c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002376:	4803      	ldr	r0, [pc, #12]	@ (8002384 <MX_TIM1_Init+0x148>)
 8002378:	f002 f8aa 	bl	80044d0 <HAL_TIM_MspPostInit>

}
 800237c:	bf00      	nop
 800237e:	3748      	adds	r7, #72	@ 0x48
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000794 	.word	0x20000794
 8002388:	40010000 	.word	0x40010000

0800238c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08e      	sub	sp, #56	@ 0x38
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002392:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a0:	f107 0320 	add.w	r3, r7, #32
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
 80023b8:	615a      	str	r2, [r3, #20]
 80023ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002470 <MX_TIM4_Init+0xe4>)
 80023be:	4a2d      	ldr	r2, [pc, #180]	@ (8002474 <MX_TIM4_Init+0xe8>)
 80023c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80023c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002470 <MX_TIM4_Init+0xe4>)
 80023c4:	2253      	movs	r2, #83	@ 0x53
 80023c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c8:	4b29      	ldr	r3, [pc, #164]	@ (8002470 <MX_TIM4_Init+0xe4>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 80023ce:	4b28      	ldr	r3, [pc, #160]	@ (8002470 <MX_TIM4_Init+0xe4>)
 80023d0:	22f9      	movs	r2, #249	@ 0xf9
 80023d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d4:	4b26      	ldr	r3, [pc, #152]	@ (8002470 <MX_TIM4_Init+0xe4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023da:	4b25      	ldr	r3, [pc, #148]	@ (8002470 <MX_TIM4_Init+0xe4>)
 80023dc:	2280      	movs	r2, #128	@ 0x80
 80023de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80023e0:	4823      	ldr	r0, [pc, #140]	@ (8002470 <MX_TIM4_Init+0xe4>)
 80023e2:	f006 fa39 	bl	8008858 <HAL_TIM_Base_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80023ec:	f000 fe16 	bl	800301c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80023f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023fa:	4619      	mov	r1, r3
 80023fc:	481c      	ldr	r0, [pc, #112]	@ (8002470 <MX_TIM4_Init+0xe4>)
 80023fe:	f006 fd2d 	bl	8008e5c <HAL_TIM_ConfigClockSource>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002408:	f000 fe08 	bl	800301c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800240c:	4818      	ldr	r0, [pc, #96]	@ (8002470 <MX_TIM4_Init+0xe4>)
 800240e:	f006 fadb 	bl	80089c8 <HAL_TIM_PWM_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002418:	f000 fe00 	bl	800301c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241c:	2300      	movs	r3, #0
 800241e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002424:	f107 0320 	add.w	r3, r7, #32
 8002428:	4619      	mov	r1, r3
 800242a:	4811      	ldr	r0, [pc, #68]	@ (8002470 <MX_TIM4_Init+0xe4>)
 800242c:	f007 f8fa 	bl	8009624 <HAL_TIMEx_MasterConfigSynchronization>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002436:	f000 fdf1 	bl	800301c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800243a:	2360      	movs	r3, #96	@ 0x60
 800243c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 800243e:	f642 1303 	movw	r3, #10499	@ 0x2903
 8002442:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	2208      	movs	r2, #8
 8002450:	4619      	mov	r1, r3
 8002452:	4807      	ldr	r0, [pc, #28]	@ (8002470 <MX_TIM4_Init+0xe4>)
 8002454:	f006 fc40 	bl	8008cd8 <HAL_TIM_PWM_ConfigChannel>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800245e:	f000 fddd 	bl	800301c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002462:	4803      	ldr	r0, [pc, #12]	@ (8002470 <MX_TIM4_Init+0xe4>)
 8002464:	f002 f834 	bl	80044d0 <HAL_TIM_MspPostInit>

}
 8002468:	bf00      	nop
 800246a:	3738      	adds	r7, #56	@ 0x38
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	200007dc 	.word	0x200007dc
 8002474:	40000800 	.word	0x40000800

08002478 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	@ 0x28
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800247e:	f107 0320 	add.w	r3, r7, #32
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
 8002494:	611a      	str	r2, [r3, #16]
 8002496:	615a      	str	r2, [r3, #20]
 8002498:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800249a:	4b2d      	ldr	r3, [pc, #180]	@ (8002550 <MX_TIM5_Init+0xd8>)
 800249c:	4a2d      	ldr	r2, [pc, #180]	@ (8002554 <MX_TIM5_Init+0xdc>)
 800249e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80024a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002550 <MX_TIM5_Init+0xd8>)
 80024a2:	2253      	movs	r2, #83	@ 0x53
 80024a4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002550 <MX_TIM5_Init+0xd8>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 80024ac:	4b28      	ldr	r3, [pc, #160]	@ (8002550 <MX_TIM5_Init+0xd8>)
 80024ae:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80024b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b4:	4b26      	ldr	r3, [pc, #152]	@ (8002550 <MX_TIM5_Init+0xd8>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ba:	4b25      	ldr	r3, [pc, #148]	@ (8002550 <MX_TIM5_Init+0xd8>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80024c0:	4823      	ldr	r0, [pc, #140]	@ (8002550 <MX_TIM5_Init+0xd8>)
 80024c2:	f006 fa81 	bl	80089c8 <HAL_TIM_PWM_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80024cc:	f000 fda6 	bl	800301c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d0:	2300      	movs	r3, #0
 80024d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024d8:	f107 0320 	add.w	r3, r7, #32
 80024dc:	4619      	mov	r1, r3
 80024de:	481c      	ldr	r0, [pc, #112]	@ (8002550 <MX_TIM5_Init+0xd8>)
 80024e0:	f007 f8a0 	bl	8009624 <HAL_TIMEx_MasterConfigSynchronization>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80024ea:	f000 fd97 	bl	800301c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ee:	2360      	movs	r3, #96	@ 0x60
 80024f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	2200      	movs	r2, #0
 8002502:	4619      	mov	r1, r3
 8002504:	4812      	ldr	r0, [pc, #72]	@ (8002550 <MX_TIM5_Init+0xd8>)
 8002506:	f006 fbe7 	bl	8008cd8 <HAL_TIM_PWM_ConfigChannel>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002510:	f000 fd84 	bl	800301c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	2204      	movs	r2, #4
 8002518:	4619      	mov	r1, r3
 800251a:	480d      	ldr	r0, [pc, #52]	@ (8002550 <MX_TIM5_Init+0xd8>)
 800251c:	f006 fbdc 	bl	8008cd8 <HAL_TIM_PWM_ConfigChannel>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002526:	f000 fd79 	bl	800301c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	2208      	movs	r2, #8
 800252e:	4619      	mov	r1, r3
 8002530:	4807      	ldr	r0, [pc, #28]	@ (8002550 <MX_TIM5_Init+0xd8>)
 8002532:	f006 fbd1 	bl	8008cd8 <HAL_TIM_PWM_ConfigChannel>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 800253c:	f000 fd6e 	bl	800301c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002540:	4803      	ldr	r0, [pc, #12]	@ (8002550 <MX_TIM5_Init+0xd8>)
 8002542:	f001 ffc5 	bl	80044d0 <HAL_TIM_MspPostInit>

}
 8002546:	bf00      	nop
 8002548:	3728      	adds	r7, #40	@ 0x28
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000824 	.word	0x20000824
 8002554:	40000c00 	.word	0x40000c00

08002558 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b092      	sub	sp, #72	@ 0x48
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002568:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
 8002578:	615a      	str	r2, [r3, #20]
 800257a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800257c:	1d3b      	adds	r3, r7, #4
 800257e:	2220      	movs	r2, #32
 8002580:	2100      	movs	r1, #0
 8002582:	4618      	mov	r0, r3
 8002584:	f00b fb08 	bl	800db98 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002588:	4b3f      	ldr	r3, [pc, #252]	@ (8002688 <MX_TIM8_Init+0x130>)
 800258a:	4a40      	ldr	r2, [pc, #256]	@ (800268c <MX_TIM8_Init+0x134>)
 800258c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 800258e:	4b3e      	ldr	r3, [pc, #248]	@ (8002688 <MX_TIM8_Init+0x130>)
 8002590:	2253      	movs	r2, #83	@ 0x53
 8002592:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002594:	4b3c      	ldr	r3, [pc, #240]	@ (8002688 <MX_TIM8_Init+0x130>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 800259a:	4b3b      	ldr	r3, [pc, #236]	@ (8002688 <MX_TIM8_Init+0x130>)
 800259c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80025a0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a2:	4b39      	ldr	r3, [pc, #228]	@ (8002688 <MX_TIM8_Init+0x130>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80025a8:	4b37      	ldr	r3, [pc, #220]	@ (8002688 <MX_TIM8_Init+0x130>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025ae:	4b36      	ldr	r3, [pc, #216]	@ (8002688 <MX_TIM8_Init+0x130>)
 80025b0:	2280      	movs	r2, #128	@ 0x80
 80025b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80025b4:	4834      	ldr	r0, [pc, #208]	@ (8002688 <MX_TIM8_Init+0x130>)
 80025b6:	f006 fa07 	bl	80089c8 <HAL_TIM_PWM_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80025c0:	f000 fd2c 	bl	800301c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c4:	2300      	movs	r3, #0
 80025c6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80025cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80025d0:	4619      	mov	r1, r3
 80025d2:	482d      	ldr	r0, [pc, #180]	@ (8002688 <MX_TIM8_Init+0x130>)
 80025d4:	f007 f826 	bl	8009624 <HAL_TIMEx_MasterConfigSynchronization>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80025de:	f000 fd1d 	bl	800301c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e2:	2360      	movs	r3, #96	@ 0x60
 80025e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ea:	2300      	movs	r3, #0
 80025ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025ee:	2300      	movs	r3, #0
 80025f0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025fa:	2300      	movs	r3, #0
 80025fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002602:	2200      	movs	r2, #0
 8002604:	4619      	mov	r1, r3
 8002606:	4820      	ldr	r0, [pc, #128]	@ (8002688 <MX_TIM8_Init+0x130>)
 8002608:	f006 fb66 	bl	8008cd8 <HAL_TIM_PWM_ConfigChannel>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002612:	f000 fd03 	bl	800301c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002616:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800261a:	2204      	movs	r2, #4
 800261c:	4619      	mov	r1, r3
 800261e:	481a      	ldr	r0, [pc, #104]	@ (8002688 <MX_TIM8_Init+0x130>)
 8002620:	f006 fb5a 	bl	8008cd8 <HAL_TIM_PWM_ConfigChannel>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800262a:	f000 fcf7 	bl	800301c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800262e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002632:	2208      	movs	r2, #8
 8002634:	4619      	mov	r1, r3
 8002636:	4814      	ldr	r0, [pc, #80]	@ (8002688 <MX_TIM8_Init+0x130>)
 8002638:	f006 fb4e 	bl	8008cd8 <HAL_TIM_PWM_ConfigChannel>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002642:	f000 fceb 	bl	800301c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800265a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800265e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002660:	2300      	movs	r3, #0
 8002662:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	4619      	mov	r1, r3
 8002668:	4807      	ldr	r0, [pc, #28]	@ (8002688 <MX_TIM8_Init+0x130>)
 800266a:	f007 f857 	bl	800971c <HAL_TIMEx_ConfigBreakDeadTime>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8002674:	f000 fcd2 	bl	800301c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002678:	4803      	ldr	r0, [pc, #12]	@ (8002688 <MX_TIM8_Init+0x130>)
 800267a:	f001 ff29 	bl	80044d0 <HAL_TIM_MspPostInit>

}
 800267e:	bf00      	nop
 8002680:	3748      	adds	r7, #72	@ 0x48
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	2000086c 	.word	0x2000086c
 800268c:	40010400 	.word	0x40010400

08002690 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002696:	1d3b      	adds	r3, r7, #4
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
 80026a4:	615a      	str	r2, [r3, #20]
 80026a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80026a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002724 <MX_TIM10_Init+0x94>)
 80026aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002728 <MX_TIM10_Init+0x98>)
 80026ac:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80026ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <MX_TIM10_Init+0x94>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002724 <MX_TIM10_Init+0x94>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 80026ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002724 <MX_TIM10_Init+0x94>)
 80026bc:	f241 3287 	movw	r2, #4999	@ 0x1387
 80026c0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c2:	4b18      	ldr	r3, [pc, #96]	@ (8002724 <MX_TIM10_Init+0x94>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c8:	4b16      	ldr	r3, [pc, #88]	@ (8002724 <MX_TIM10_Init+0x94>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80026ce:	4815      	ldr	r0, [pc, #84]	@ (8002724 <MX_TIM10_Init+0x94>)
 80026d0:	f006 f8c2 	bl	8008858 <HAL_TIM_Base_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80026da:	f000 fc9f 	bl	800301c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80026de:	4811      	ldr	r0, [pc, #68]	@ (8002724 <MX_TIM10_Init+0x94>)
 80026e0:	f006 f972 	bl	80089c8 <HAL_TIM_PWM_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80026ea:	f000 fc97 	bl	800301c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ee:	2360      	movs	r3, #96	@ 0x60
 80026f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	2200      	movs	r2, #0
 8002702:	4619      	mov	r1, r3
 8002704:	4807      	ldr	r0, [pc, #28]	@ (8002724 <MX_TIM10_Init+0x94>)
 8002706:	f006 fae7 	bl	8008cd8 <HAL_TIM_PWM_ConfigChannel>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002710:	f000 fc84 	bl	800301c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002714:	4803      	ldr	r0, [pc, #12]	@ (8002724 <MX_TIM10_Init+0x94>)
 8002716:	f001 fedb 	bl	80044d0 <HAL_TIM_MspPostInit>

}
 800271a:	bf00      	nop
 800271c:	3720      	adds	r7, #32
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200008b4 	.word	0x200008b4
 8002728:	40014400 	.word	0x40014400

0800272c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002730:	4b11      	ldr	r3, [pc, #68]	@ (8002778 <MX_USART1_UART_Init+0x4c>)
 8002732:	4a12      	ldr	r2, [pc, #72]	@ (800277c <MX_USART1_UART_Init+0x50>)
 8002734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002736:	4b10      	ldr	r3, [pc, #64]	@ (8002778 <MX_USART1_UART_Init+0x4c>)
 8002738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800273c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800273e:	4b0e      	ldr	r3, [pc, #56]	@ (8002778 <MX_USART1_UART_Init+0x4c>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002744:	4b0c      	ldr	r3, [pc, #48]	@ (8002778 <MX_USART1_UART_Init+0x4c>)
 8002746:	2200      	movs	r2, #0
 8002748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800274a:	4b0b      	ldr	r3, [pc, #44]	@ (8002778 <MX_USART1_UART_Init+0x4c>)
 800274c:	2200      	movs	r2, #0
 800274e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002750:	4b09      	ldr	r3, [pc, #36]	@ (8002778 <MX_USART1_UART_Init+0x4c>)
 8002752:	220c      	movs	r2, #12
 8002754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002756:	4b08      	ldr	r3, [pc, #32]	@ (8002778 <MX_USART1_UART_Init+0x4c>)
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800275c:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <MX_USART1_UART_Init+0x4c>)
 800275e:	2200      	movs	r2, #0
 8002760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002762:	4805      	ldr	r0, [pc, #20]	@ (8002778 <MX_USART1_UART_Init+0x4c>)
 8002764:	f007 f82c 	bl	80097c0 <HAL_UART_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800276e:	f000 fc55 	bl	800301c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000adc 	.word	0x20000adc
 800277c:	40011000 	.word	0x40011000

08002780 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002784:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <MX_USART3_UART_Init+0x4c>)
 8002786:	4a12      	ldr	r2, [pc, #72]	@ (80027d0 <MX_USART3_UART_Init+0x50>)
 8002788:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 800278a:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <MX_USART3_UART_Init+0x4c>)
 800278c:	4a11      	ldr	r2, [pc, #68]	@ (80027d4 <MX_USART3_UART_Init+0x54>)
 800278e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002790:	4b0e      	ldr	r3, [pc, #56]	@ (80027cc <MX_USART3_UART_Init+0x4c>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002796:	4b0d      	ldr	r3, [pc, #52]	@ (80027cc <MX_USART3_UART_Init+0x4c>)
 8002798:	2200      	movs	r2, #0
 800279a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 800279c:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <MX_USART3_UART_Init+0x4c>)
 800279e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027a4:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <MX_USART3_UART_Init+0x4c>)
 80027a6:	220c      	movs	r2, #12
 80027a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027aa:	4b08      	ldr	r3, [pc, #32]	@ (80027cc <MX_USART3_UART_Init+0x4c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b0:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <MX_USART3_UART_Init+0x4c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027b6:	4805      	ldr	r0, [pc, #20]	@ (80027cc <MX_USART3_UART_Init+0x4c>)
 80027b8:	f007 f802 	bl	80097c0 <HAL_UART_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80027c2:	f000 fc2b 	bl	800301c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000b24 	.word	0x20000b24
 80027d0:	40004800 	.word	0x40004800
 80027d4:	000186a0 	.word	0x000186a0

080027d8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80027dc:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <MX_USART6_UART_Init+0x4c>)
 80027de:	4a12      	ldr	r2, [pc, #72]	@ (8002828 <MX_USART6_UART_Init+0x50>)
 80027e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80027e2:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <MX_USART6_UART_Init+0x4c>)
 80027e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80027ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002824 <MX_USART6_UART_Init+0x4c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80027f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <MX_USART6_UART_Init+0x4c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80027f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <MX_USART6_UART_Init+0x4c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80027fc:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <MX_USART6_UART_Init+0x4c>)
 80027fe:	220c      	movs	r2, #12
 8002800:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002802:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <MX_USART6_UART_Init+0x4c>)
 8002804:	2200      	movs	r2, #0
 8002806:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002808:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <MX_USART6_UART_Init+0x4c>)
 800280a:	2200      	movs	r2, #0
 800280c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800280e:	4805      	ldr	r0, [pc, #20]	@ (8002824 <MX_USART6_UART_Init+0x4c>)
 8002810:	f006 ffd6 	bl	80097c0 <HAL_UART_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800281a:	f000 fbff 	bl	800301c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000b6c 	.word	0x20000b6c
 8002828:	40011400 	.word	0x40011400

0800282c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	4b37      	ldr	r3, [pc, #220]	@ (8002914 <MX_DMA_Init+0xe8>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	4a36      	ldr	r2, [pc, #216]	@ (8002914 <MX_DMA_Init+0xe8>)
 800283c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002840:	6313      	str	r3, [r2, #48]	@ 0x30
 8002842:	4b34      	ldr	r3, [pc, #208]	@ (8002914 <MX_DMA_Init+0xe8>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	4b30      	ldr	r3, [pc, #192]	@ (8002914 <MX_DMA_Init+0xe8>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	4a2f      	ldr	r2, [pc, #188]	@ (8002914 <MX_DMA_Init+0xe8>)
 8002858:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800285c:	6313      	str	r3, [r2, #48]	@ 0x30
 800285e:	4b2d      	ldr	r3, [pc, #180]	@ (8002914 <MX_DMA_Init+0xe8>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800286a:	2200      	movs	r2, #0
 800286c:	2105      	movs	r1, #5
 800286e:	200c      	movs	r0, #12
 8002870:	f003 fa33 	bl	8005cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002874:	200c      	movs	r0, #12
 8002876:	f003 fa4c 	bl	8005d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	2105      	movs	r1, #5
 800287e:	200d      	movs	r0, #13
 8002880:	f003 fa2b 	bl	8005cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002884:	200d      	movs	r0, #13
 8002886:	f003 fa44 	bl	8005d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2105      	movs	r1, #5
 800288e:	200f      	movs	r0, #15
 8002890:	f003 fa23 	bl	8005cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002894:	200f      	movs	r0, #15
 8002896:	f003 fa3c 	bl	8005d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2105      	movs	r1, #5
 800289e:	202f      	movs	r0, #47	@ 0x2f
 80028a0:	f003 fa1b 	bl	8005cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80028a4:	202f      	movs	r0, #47	@ 0x2f
 80028a6:	f003 fa34 	bl	8005d12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2105      	movs	r1, #5
 80028ae:	2039      	movs	r0, #57	@ 0x39
 80028b0:	f003 fa13 	bl	8005cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80028b4:	2039      	movs	r0, #57	@ 0x39
 80028b6:	f003 fa2c 	bl	8005d12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80028ba:	2200      	movs	r2, #0
 80028bc:	2105      	movs	r1, #5
 80028be:	203a      	movs	r0, #58	@ 0x3a
 80028c0:	f003 fa0b 	bl	8005cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80028c4:	203a      	movs	r0, #58	@ 0x3a
 80028c6:	f003 fa24 	bl	8005d12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2105      	movs	r1, #5
 80028ce:	203b      	movs	r0, #59	@ 0x3b
 80028d0:	f003 fa03 	bl	8005cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80028d4:	203b      	movs	r0, #59	@ 0x3b
 80028d6:	f003 fa1c 	bl	8005d12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80028da:	2200      	movs	r2, #0
 80028dc:	2105      	movs	r1, #5
 80028de:	2044      	movs	r0, #68	@ 0x44
 80028e0:	f003 f9fb 	bl	8005cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80028e4:	2044      	movs	r0, #68	@ 0x44
 80028e6:	f003 fa14 	bl	8005d12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80028ea:	2200      	movs	r2, #0
 80028ec:	2105      	movs	r1, #5
 80028ee:	2045      	movs	r0, #69	@ 0x45
 80028f0:	f003 f9f3 	bl	8005cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80028f4:	2045      	movs	r0, #69	@ 0x45
 80028f6:	f003 fa0c 	bl	8005d12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2105      	movs	r1, #5
 80028fe:	2046      	movs	r0, #70	@ 0x46
 8002900:	f003 f9eb 	bl	8005cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002904:	2046      	movs	r0, #70	@ 0x46
 8002906:	f003 fa04 	bl	8005d12 <HAL_NVIC_EnableIRQ>

}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800

08002918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08e      	sub	sp, #56	@ 0x38
 800291c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]
 800292c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	623b      	str	r3, [r7, #32]
 8002932:	4b71      	ldr	r3, [pc, #452]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	4a70      	ldr	r2, [pc, #448]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	6313      	str	r3, [r2, #48]	@ 0x30
 800293e:	4b6e      	ldr	r3, [pc, #440]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	623b      	str	r3, [r7, #32]
 8002948:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	4b6a      	ldr	r3, [pc, #424]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002952:	4a69      	ldr	r2, [pc, #420]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 8002954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002958:	6313      	str	r3, [r2, #48]	@ 0x30
 800295a:	4b67      	ldr	r3, [pc, #412]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	4b63      	ldr	r3, [pc, #396]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4a62      	ldr	r2, [pc, #392]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6313      	str	r3, [r2, #48]	@ 0x30
 8002976:	4b60      	ldr	r3, [pc, #384]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	61bb      	str	r3, [r7, #24]
 8002980:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	4b5c      	ldr	r3, [pc, #368]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	4a5b      	ldr	r2, [pc, #364]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 800298c:	f043 0308 	orr.w	r3, r3, #8
 8002990:	6313      	str	r3, [r2, #48]	@ 0x30
 8002992:	4b59      	ldr	r3, [pc, #356]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	4b55      	ldr	r3, [pc, #340]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	4a54      	ldr	r2, [pc, #336]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 80029a8:	f043 0304 	orr.w	r3, r3, #4
 80029ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ae:	4b52      	ldr	r3, [pc, #328]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	4b4e      	ldr	r3, [pc, #312]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	4a4d      	ldr	r2, [pc, #308]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 80029c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ca:	4b4b      	ldr	r3, [pc, #300]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	4b47      	ldr	r3, [pc, #284]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	4a46      	ldr	r2, [pc, #280]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 80029e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e6:	4b44      	ldr	r3, [pc, #272]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	4b40      	ldr	r3, [pc, #256]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	4a3f      	ldr	r2, [pc, #252]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 80029fc:	f043 0320 	orr.w	r3, r3, #32
 8002a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a02:	4b3d      	ldr	r3, [pc, #244]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	603b      	str	r3, [r7, #0]
 8002a12:	4b39      	ldr	r3, [pc, #228]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	4a38      	ldr	r2, [pc, #224]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 8002a18:	f043 0310 	orr.w	r3, r3, #16
 8002a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a1e:	4b36      	ldr	r3, [pc, #216]	@ (8002af8 <MX_GPIO_Init+0x1e0>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2140      	movs	r1, #64	@ 0x40
 8002a2e:	4833      	ldr	r0, [pc, #204]	@ (8002afc <MX_GPIO_Init+0x1e4>)
 8002a30:	f003 ff28 	bl	8006884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002a34:	2200      	movs	r2, #0
 8002a36:	2110      	movs	r1, #16
 8002a38:	4831      	ldr	r0, [pc, #196]	@ (8002b00 <MX_GPIO_Init+0x1e8>)
 8002a3a:	f003 ff23 	bl	8006884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2101      	movs	r1, #1
 8002a42:	4830      	ldr	r0, [pc, #192]	@ (8002b04 <MX_GPIO_Init+0x1ec>)
 8002a44:	f003 ff1e 	bl	8006884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a48:	2340      	movs	r3, #64	@ 0x40
 8002a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a54:	2300      	movs	r3, #0
 8002a56:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4827      	ldr	r0, [pc, #156]	@ (8002afc <MX_GPIO_Init+0x1e4>)
 8002a60:	f003 fd74 	bl	800654c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a64:	2308      	movs	r3, #8
 8002a66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a68:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a76:	4619      	mov	r1, r3
 8002a78:	4820      	ldr	r0, [pc, #128]	@ (8002afc <MX_GPIO_Init+0x1e4>)
 8002a7a:	f003 fd67 	bl	800654c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a7e:	2310      	movs	r3, #16
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a82:	2301      	movs	r3, #1
 8002a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a92:	4619      	mov	r1, r3
 8002a94:	481a      	ldr	r0, [pc, #104]	@ (8002b00 <MX_GPIO_Init+0x1e8>)
 8002a96:	f003 fd59 	bl	800654c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 8002a9a:	2330      	movs	r3, #48	@ 0x30
 8002a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aac:	4619      	mov	r1, r3
 8002aae:	4816      	ldr	r0, [pc, #88]	@ (8002b08 <MX_GPIO_Init+0x1f0>)
 8002ab0:	f003 fd4c 	bl	800654c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ac8:	4619      	mov	r1, r3
 8002aca:	480e      	ldr	r0, [pc, #56]	@ (8002b04 <MX_GPIO_Init+0x1ec>)
 8002acc:	f003 fd3e 	bl	800654c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2105      	movs	r1, #5
 8002ad4:	2009      	movs	r0, #9
 8002ad6:	f003 f900 	bl	8005cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002ada:	2009      	movs	r0, #9
 8002adc:	f003 f919 	bl	8005d12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2105      	movs	r1, #5
 8002ae4:	200a      	movs	r0, #10
 8002ae6:	f003 f8f8 	bl	8005cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002aea:	200a      	movs	r0, #10
 8002aec:	f003 f911 	bl	8005d12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002af0:	bf00      	nop
 8002af2:	3738      	adds	r7, #56	@ 0x38
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40021800 	.word	0x40021800
 8002b00:	40020000 	.word	0x40020000
 8002b04:	40020400 	.word	0x40020400
 8002b08:	40020800 	.word	0x40020800

08002b0c <positionPIDByMe>:

/* USER CODE BEGIN 4 */
int16_t positionPIDByMe(int16_t *prevDiff, int8_t *isNegativeRegion1, int8_t *previousRegion1, int16_t DifferenceBetweenCurrentAndWannabePosition, int16_t *sumI1, float kPu, float kIu, float kDu) {
 8002b0c:	b480      	push	{r7}
 8002b0e:	b08b      	sub	sp, #44	@ 0x2c
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	61f8      	str	r0, [r7, #28]
 8002b14:	61b9      	str	r1, [r7, #24]
 8002b16:	617a      	str	r2, [r7, #20]
 8002b18:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b1c:	edc7 0a02 	vstr	s1, [r7, #8]
 8002b20:	ed87 1a01 	vstr	s2, [r7, #4]
 8002b24:	827b      	strh	r3, [r7, #18]
	if (DifferenceBetweenCurrentAndWannabePosition >= 0) {
 8002b26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	db03      	blt.n	8002b36 <positionPIDByMe+0x2a>
		*isNegativeRegion1 = -1;
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	22ff      	movs	r2, #255	@ 0xff
 8002b32:	701a      	strb	r2, [r3, #0]
 8002b34:	e002      	b.n	8002b3c <positionPIDByMe+0x30>
	} else {
		*isNegativeRegion1 = 1;
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	701a      	strb	r2, [r3, #0]
	}
	if (*isNegativeRegion1 != *previousRegion1) {
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f993 2000 	ldrsb.w	r2, [r3]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f993 3000 	ldrsb.w	r3, [r3]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d002      	beq.n	8002b52 <positionPIDByMe+0x46>
		*sumI1 = 0;
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4e:	2200      	movs	r2, #0
 8002b50:	801a      	strh	r2, [r3, #0]
	}
	*previousRegion1 = *isNegativeRegion1;
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	f993 2000 	ldrsb.w	r2, [r3]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	701a      	strb	r2, [r3, #0]
	*sumI1 += (int)((float)(DifferenceBetweenCurrentAndWannabePosition)*0.005f);
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b68:	ee07 3a90 	vmov	s15, r3
 8002b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b70:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002c1c <positionPIDByMe+0x110>
 8002b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b7c:	ee17 3a90 	vmov	r3, s15
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	b21a      	sxth	r2, r3
 8002b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8a:	801a      	strh	r2, [r3, #0]
	int16_t PositionToGo = (int)(kPu*(float)(DifferenceBetweenCurrentAndWannabePosition));
 8002b8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b90:	ee07 3a90 	vmov	s15, r3
 8002b94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b98:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ba4:	ee17 3a90 	vmov	r3, s15
 8002ba8:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t IntegralToGo = (int)(kIu*((float)(*sumI1)));
 8002baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bb0:	ee07 3a90 	vmov	s15, r3
 8002bb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bc4:	ee17 3a90 	vmov	r3, s15
 8002bc8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t DerivativeToGo = (int)((kDu)*((float)(DifferenceBetweenCurrentAndWannabePosition - *prevDiff))*(float)200);
 8002bca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002bce:	69fa      	ldr	r2, [r7, #28]
 8002bd0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	ee07 3a90 	vmov	s15, r3
 8002bda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bde:	edd7 7a01 	vldr	s15, [r7, #4]
 8002be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002c20 <positionPIDByMe+0x114>
 8002bea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bf2:	ee17 3a90 	vmov	r3, s15
 8002bf6:	847b      	strh	r3, [r7, #34]	@ 0x22
	*prevDiff = DifferenceBetweenCurrentAndWannabePosition;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	8a7a      	ldrh	r2, [r7, #18]
 8002bfc:	801a      	strh	r2, [r3, #0]
	return PositionToGo+IntegralToGo+DerivativeToGo;
 8002bfe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002c00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c02:	4413      	add	r3, r2
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002c08:	4413      	add	r3, r2
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	b21b      	sxth	r3, r3
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	372c      	adds	r7, #44	@ 0x2c
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	3ba3d70a 	.word	0x3ba3d70a
 8002c20:	43480000 	.word	0x43480000

08002c24 <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	// HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
	// __HAL_TIM_PRESCALER(&htim4, 2);
	// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
	// HAL_TIM_Base_Start(&htim4);
	if (BMI088_accel_init()) {
 8002c2c:	f7fd fd4e 	bl	80006cc <BMI088_accel_init>
		// usart_printf("WARNING - BMI088 accelerometer init failed \r\n");
	}
	if (BMI088_gyro_init()) {
 8002c30:	f7fd fe04 	bl	800083c <BMI088_gyro_init>
		// usart_printf("WARNING - BMI088 gyroscope init failed \r\n");
	}
	if (ist8310_init()) {
 8002c34:	f7fe ffb6 	bl	8001ba4 <ist8310_init>
		//set_motor_voltage(5, 4000);

		// HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);

		// PWMOn(LED,1);
		PWMOutput(LED, 1, 500);
 8002c38:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	2001      	movs	r0, #1
 8002c40:	f000 fdc8 	bl	80037d4 <PWMOutput>
		PWMInitialize(LED, FR, 1, 0.9);
 8002c44:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8002c7c <TaskMain+0x58>
 8002c48:	2201      	movs	r2, #1
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	f000 fca9 	bl	80035a4 <PWMInitialize>
		// PWMTimerStarter();
		usart_printf("on\r\n");
 8002c52:	480b      	ldr	r0, [pc, #44]	@ (8002c80 <TaskMain+0x5c>)
 8002c54:	f7fe fbfe 	bl	8001454 <usart_printf>
		osDelay(500);
 8002c58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002c5c:	f008 f8d0 	bl	800ae00 <osDelay>
		//sendB2bData(CAN_b2b_A_ID, 1, 1, 1, 1);
		// HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
		//set_motor_voltage(5, -4000);
		// HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);
		PWMOff(LED, 1);
 8002c60:	2101      	movs	r1, #1
 8002c62:	2001      	movs	r0, #1
 8002c64:	f000 fde6 	bl	8003834 <PWMOff>
		// PWMTimerStarter();
		usart_printf("off\r\n");
 8002c68:	4806      	ldr	r0, [pc, #24]	@ (8002c84 <TaskMain+0x60>)
 8002c6a:	f7fe fbf3 	bl	8001454 <usart_printf>
		osDelay(500);
 8002c6e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002c72:	f008 f8c5 	bl	800ae00 <osDelay>
		PWMOutput(LED, 1, 500);
 8002c76:	bf00      	nop
 8002c78:	e7de      	b.n	8002c38 <TaskMain+0x14>
 8002c7a:	bf00      	nop
 8002c7c:	3f666666 	.word	0x3f666666
 8002c80:	0800e598 	.word	0x0800e598
 8002c84:	0800e5a0 	.word	0x0800e5a0

08002c88 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b0b8      	sub	sp, #224	@ 0xe0
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskChassis */
	/* USER CODE BEGIN TaskChassis */
	int16_t rcRPM[4] = {0,0,0,0};                              // maps rc percentage reading to motors, assuming we're running M3508s at max 469RPM
 8002c90:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
	int16_t rcPitch = 0;                                   // range: 3376 ~ 2132
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
	htim4.Instance->CCR3=0;
	*/

	int8_t motorOn = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
	int8_t switched = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f887 30d0 	strb.w	r3, [r7, #208]	@ 0xd0
	int8_t shot1Round = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	//int8_t RNC = 0;
	int16_t sumI1 =0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	int16_t sumI2 =0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
	int16_t sumI3 =0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
	int16_t sumI4 =0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
	int8_t isNegativeRegion1 = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	int8_t isNegativeRegion2 = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
	int8_t isNegativeRegion3 = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
	int8_t isNegativeRegion4 = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
	int8_t previousRegion1 = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
	int8_t previousRegion2 = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
	int8_t previousRegion3 = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
	int8_t previousRegion4 = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2
	int16_t prevDiff1 = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	int16_t prevDiff2 = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
	int16_t prevDiff3 = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
	int16_t prevDiff4 = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc

	int16_t shooterMotor = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
	// int16_t pR = 0;
	//int8_t counter = 0;
	uint16_t testmotor = 6161;
 8002d18:	f641 0311 	movw	r3, #6161	@ 0x1811
 8002d1c:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
	uint16_t pivoter = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
	double angle = 0;
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
	int16_t xJoystickDirection = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
	int16_t yJoystickDirection = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
	int16_t rotationOfChassis = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
	// Total Rotation is 1.25 times for 90degrees therefore motor has to rotate
	// PID onto this (This is the hypothetical orientation)
	int16_t chassisOrientation = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
	int16_t chassisPID = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
	int16_t rcVal2 = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c

	int16_t randomOrientations[24] = {-380, -202, 462, -114, 240, -210, 150, 170, 248, 106, 118, 538, -260, -288, -120, 86, -264, 452, -592, 390, -410, 414, 54, -542};
 8002d56:	4ba5      	ldr	r3, [pc, #660]	@ (8002fec <TaskChassis+0x364>)
 8002d58:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002d5c:	461d      	mov	r5, r3
 8002d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002d6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int16_t startingVal = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
	int8_t started = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
	uint8_t increment = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
	int16_t instancesCounter = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

	int16_t previousVal = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
	int32_t rotationalVal = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	int16_t revolutions = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
	int8_t resetPerStart = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
	int32_t rotationTarget = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	int32_t posForGunMotor = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	int8_t burst = 3;
 8002daa:	2303      	movs	r3, #3
 8002dac:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

	int8_t customFiringModeSwitcher = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
	int8_t startedChecking = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
	int8_t switchedDown = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
	int8_t finalTHing = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	int16_t counterForSwitching = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

	int16_t buzzLengthCounter = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
	int8_t beepingInProgress = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
	int8_t beeped = 1;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

	int16_t rotationCompStab = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	int16_t testTHing[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8002de6:	f107 030c 	add.w	r3, r7, #12
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	605a      	str	r2, [r3, #4]
 8002df0:	609a      	str	r2, [r3, #8]
 8002df2:	60da      	str	r2, [r3, #12]
 8002df4:	611a      	str	r2, [r3, #16]
 8002df6:	829a      	strh	r2, [r3, #20]
	*/

	for(;;) {


		for (int i = 0; i < 4; i++) {
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002dfe:	e01f      	b.n	8002e40 <TaskChassis+0x1b8>
			rcRPM[i] = getRCchannel(i) * 13.645f;              // 13.645 = 469 / 187 / 660 * 3591, 660 = max reading in one direction
 8002e00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e04:	b25b      	sxtb	r3, r3
 8002e06:	4618      	mov	r0, r3
 8002e08:	f001 f810 	bl	8003e2c <getRCchannel>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	ee07 3a90 	vmov	s15, r3
 8002e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e16:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8002ff0 <TaskChassis+0x368>
 8002e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e22:	ee17 3a90 	vmov	r3, s15
 8002e26:	b21a      	sxth	r2, r3
 8002e28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	33d8      	adds	r3, #216	@ 0xd8
 8002e30:	443b      	add	r3, r7
 8002e32:	f823 2c7c 	strh.w	r2, [r3, #-124]
		for (int i = 0; i < 4; i++) {
 8002e36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002e40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	dddb      	ble.n	8002e00 <TaskChassis+0x178>
		}

		xJoystickDirection = rcRPM[2];
 8002e48:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8002e4c:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
		yJoystickDirection = rcRPM[3];
 8002e50:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8002e54:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
		rotationOfChassis = rcRPM[0];
 8002e58:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002e5c:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2

		chassisTargetRPM.motorRPM[0] = 1000;
 8002e60:	4b64      	ldr	r3, [pc, #400]	@ (8002ff4 <TaskChassis+0x36c>)
 8002e62:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e66:	801a      	strh	r2, [r3, #0]
		chassisTargetRPM.motorRPM[1] = 1000;
 8002e68:	4b62      	ldr	r3, [pc, #392]	@ (8002ff4 <TaskChassis+0x36c>)
 8002e6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e6e:	805a      	strh	r2, [r3, #2]
		chassisTargetRPM.motorRPM[2] = 1000;
 8002e70:	4b60      	ldr	r3, [pc, #384]	@ (8002ff4 <TaskChassis+0x36c>)
 8002e72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e76:	809a      	strh	r2, [r3, #4]
		chassisTargetRPM.motorRPM[3] = 1000;
 8002e78:	4b5e      	ldr	r3, [pc, #376]	@ (8002ff4 <TaskChassis+0x36c>)
 8002e7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e7e:	80da      	strh	r2, [r3, #6]

		//2640
		// 420

		int16_t turretPitch = (getRCchannel(1)*0.63f)+2640;
 8002e80:	2001      	movs	r0, #1
 8002e82:	f000 ffd3 	bl	8003e2c <getRCchannel>
 8002e86:	4603      	mov	r3, r0
 8002e88:	ee07 3a90 	vmov	s15, r3
 8002e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e90:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8002ff8 <TaskChassis+0x370>
 8002e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e98:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002ffc <TaskChassis+0x374>
 8002e9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ea4:	ee17 3a90 	vmov	r3, s15
 8002ea8:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74

		float kPu = 0.5;
 8002eac:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8002eb0:	673b      	str	r3, [r7, #112]	@ 0x70
		float kIu = 0;
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
		float kDu = 0;
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	66bb      	str	r3, [r7, #104]	@ 0x68

		int16_t pitchMotorPosition = getMotorPosition(9);
 8002ebe:	2009      	movs	r0, #9
 8002ec0:	f7fe fa7e 	bl	80013c0 <getMotorPosition>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

		int16_t DifferenceBetweenCurrentAndWannabePosition = turretPitch-pitchMotorPosition;
 8002eca:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8002ece:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

		setGM6020voltageRPM(9, positionPIDByMe(&prevDiff1, &isNegativeRegion1, &previousRegion1, DifferenceBetweenCurrentAndWannabePosition, &sumI1, kPu, kIu, kDu), DONUTMOTOR);
 8002eda:	f9b7 4064 	ldrsh.w	r4, [r7, #100]	@ 0x64
 8002ede:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002ee2:	f107 0159 	add.w	r1, r7, #89	@ 0x59
 8002ee6:	f107 0056 	add.w	r0, r7, #86	@ 0x56
 8002eea:	f107 035a 	add.w	r3, r7, #90	@ 0x5a
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	ed97 1a1a 	vldr	s2, [r7, #104]	@ 0x68
 8002ef4:	edd7 0a1b 	vldr	s1, [r7, #108]	@ 0x6c
 8002ef8:	ed97 0a1c 	vldr	s0, [r7, #112]	@ 0x70
 8002efc:	4623      	mov	r3, r4
 8002efe:	f7ff fe05 	bl	8002b0c <positionPIDByMe>
 8002f02:	4603      	mov	r3, r0
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b3e      	ldr	r3, [pc, #248]	@ (8003000 <TaskChassis+0x378>)
 8002f08:	edd3 6a00 	vldr	s13, [r3]
 8002f0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f10:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f14:	eeb0 0a66 	vmov.f32	s0, s13
 8002f18:	eef0 0a47 	vmov.f32	s1, s14
 8002f1c:	eeb0 1a67 	vmov.f32	s2, s15
 8002f20:	4611      	mov	r1, r2
 8002f22:	2009      	movs	r0, #9
 8002f24:	f7fe fa18 	bl	8001358 <setGM6020voltageRPM>

		setM3508RPM(1, chassisTargetRPM.motorRPM[0], chassisPreset);
 8002f28:	4b32      	ldr	r3, [pc, #200]	@ (8002ff4 <TaskChassis+0x36c>)
 8002f2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f2e:	4b35      	ldr	r3, [pc, #212]	@ (8003004 <TaskChassis+0x37c>)
 8002f30:	edd3 6a00 	vldr	s13, [r3]
 8002f34:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f38:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f3c:	eeb0 0a66 	vmov.f32	s0, s13
 8002f40:	eef0 0a47 	vmov.f32	s1, s14
 8002f44:	eeb0 1a67 	vmov.f32	s2, s15
 8002f48:	4611      	mov	r1, r2
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	f7fe f9d0 	bl	80012f0 <setM3508RPM>
		setM3508RPM(2, chassisTargetRPM.motorRPM[1], chassisPreset);
 8002f50:	4b28      	ldr	r3, [pc, #160]	@ (8002ff4 <TaskChassis+0x36c>)
 8002f52:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002f56:	4b2b      	ldr	r3, [pc, #172]	@ (8003004 <TaskChassis+0x37c>)
 8002f58:	edd3 6a00 	vldr	s13, [r3]
 8002f5c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f60:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f64:	eeb0 0a66 	vmov.f32	s0, s13
 8002f68:	eef0 0a47 	vmov.f32	s1, s14
 8002f6c:	eeb0 1a67 	vmov.f32	s2, s15
 8002f70:	4611      	mov	r1, r2
 8002f72:	2002      	movs	r0, #2
 8002f74:	f7fe f9bc 	bl	80012f0 <setM3508RPM>
		setM3508RPM(3, chassisTargetRPM.motorRPM[2], chassisPreset);
 8002f78:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff4 <TaskChassis+0x36c>)
 8002f7a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002f7e:	4b21      	ldr	r3, [pc, #132]	@ (8003004 <TaskChassis+0x37c>)
 8002f80:	edd3 6a00 	vldr	s13, [r3]
 8002f84:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f88:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f8c:	eeb0 0a66 	vmov.f32	s0, s13
 8002f90:	eef0 0a47 	vmov.f32	s1, s14
 8002f94:	eeb0 1a67 	vmov.f32	s2, s15
 8002f98:	4611      	mov	r1, r2
 8002f9a:	2003      	movs	r0, #3
 8002f9c:	f7fe f9a8 	bl	80012f0 <setM3508RPM>
		setM3508RPM(4, chassisTargetRPM.motorRPM[3], chassisPreset);
 8002fa0:	4b14      	ldr	r3, [pc, #80]	@ (8002ff4 <TaskChassis+0x36c>)
 8002fa2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002fa6:	4b17      	ldr	r3, [pc, #92]	@ (8003004 <TaskChassis+0x37c>)
 8002fa8:	edd3 6a00 	vldr	s13, [r3]
 8002fac:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fb4:	eeb0 0a66 	vmov.f32	s0, s13
 8002fb8:	eef0 0a47 	vmov.f32	s1, s14
 8002fbc:	eeb0 1a67 	vmov.f32	s2, s15
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	2004      	movs	r0, #4
 8002fc4:	f7fe f994 	bl	80012f0 <setM3508RPM>

		usart_printf("%d %d\r\n", pitchMotorPosition, getMotorCurrent(9));
 8002fc8:	f9b7 4066 	ldrsh.w	r4, [r7, #102]	@ 0x66
 8002fcc:	2009      	movs	r0, #9
 8002fce:	f7fe fa0f 	bl	80013f0 <getMotorCurrent>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	480b      	ldr	r0, [pc, #44]	@ (8003008 <TaskChassis+0x380>)
 8002fda:	f7fe fa3b 	bl	8001454 <usart_printf>

		PWMTimerStarter();
 8002fde:	f000 fc55 	bl	800388c <PWMTimerStarter>
		osDelay(5);
 8002fe2:	2005      	movs	r0, #5
 8002fe4:	f007 ff0c 	bl	800ae00 <osDelay>
	for(;;) {
 8002fe8:	e706      	b.n	8002df8 <TaskChassis+0x170>
 8002fea:	bf00      	nop
 8002fec:	0800e5b0 	.word	0x0800e5b0
 8002ff0:	415a51ec 	.word	0x415a51ec
 8002ff4:	20000da8 	.word	0x20000da8
 8002ff8:	3f2147ae 	.word	0x3f2147ae
 8002ffc:	45250000 	.word	0x45250000
 8003000:	2000004c 	.word	0x2000004c
 8003004:	20000040 	.word	0x20000040
 8003008:	0800e5a8 	.word	0x0800e5a8

0800300c <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003014:	2001      	movs	r0, #1
 8003016:	f007 fef3 	bl	800ae00 <osDelay>
 800301a:	e7fb      	b.n	8003014 <TaskTurret+0x8>

0800301c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003020:	b672      	cpsid	i
}
 8003022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003024:	bf00      	nop
 8003026:	e7fd      	b.n	8003024 <Error_Handler+0x8>

08003028 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	6178      	str	r0, [r7, #20]
 8003030:	460b      	mov	r3, r1
 8003032:	60fa      	str	r2, [r7, #12]
 8003034:	ed87 0a02 	vstr	s0, [r7, #8]
 8003038:	edc7 0a01 	vstr	s1, [r7, #4]
 800303c:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d042      	beq.n	80030ca <PID_init+0xa2>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d03f      	beq.n	80030ca <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	7cfa      	ldrb	r2, [r7, #19]
 800304e:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	3304      	adds	r3, #4
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	3308      	adds	r3, #8
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	635a      	str	r2, [r3, #52]	@ 0x34
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	621a      	str	r2, [r3, #32]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	6a1a      	ldr	r2, [r3, #32]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	645a      	str	r2, [r3, #68]	@ 0x44
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	641a      	str	r2, [r3, #64]	@ 0x40
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030c8:	e000      	b.n	80030cc <PID_init+0xa4>
        return;
 80030ca:	bf00      	nop
}
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b085      	sub	sp, #20
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	ed87 0a02 	vstr	s0, [r7, #8]
 80030e2:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d102      	bne.n	80030f2 <PID_calc+0x1c>
    {
        return 0.0f;
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	e130      	b.n	8003354 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 800310e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003112:	edd7 7a02 	vldr	s15, [r7, #8]
 8003116:	ee77 7a67 	vsub.f32	s15, s14, s15
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f040 8095 	bne.w	8003254 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	edd3 6a02 	vldr	s13, [r3, #8]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003152:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800317c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	ed93 7a03 	vldr	s14, [r3, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80031a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b0:	dd04      	ble.n	80031bc <PID_calc+0xe6>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80031ba:	e014      	b.n	80031e6 <PID_calc+0x110>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80031c8:	eef1 7a67 	vneg.f32	s15, s15
 80031cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d4:	d507      	bpl.n	80031e6 <PID_calc+0x110>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80031dc:	eef1 7a67 	vneg.f32	s15, s15
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80031f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80031fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	ed93 7a08 	vldr	s14, [r3, #32]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003212:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321a:	dd04      	ble.n	8003226 <PID_calc+0x150>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	621a      	str	r2, [r3, #32]
 8003224:	e094      	b.n	8003350 <PID_calc+0x27a>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	ed93 7a08 	vldr	s14, [r3, #32]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003232:	eef1 7a67 	vneg.f32	s15, s15
 8003236:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800323a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323e:	f140 8087 	bpl.w	8003350 <PID_calc+0x27a>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	edd3 7a04 	vldr	s15, [r3, #16]
 8003248:	eef1 7a67 	vneg.f32	s15, s15
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	edc3 7a08 	vstr	s15, [r3, #32]
 8003252:	e07d      	b.n	8003350 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d179      	bne.n	8003350 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800326e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80032ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80032b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80032bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80032d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	ed93 7a08 	vldr	s14, [r3, #32]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80032ee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80032f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	ed93 7a08 	vldr	s14, [r3, #32]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331a:	dd04      	ble.n	8003326 <PID_calc+0x250>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	621a      	str	r2, [r3, #32]
 8003324:	e014      	b.n	8003350 <PID_calc+0x27a>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	ed93 7a08 	vldr	s14, [r3, #32]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003332:	eef1 7a67 	vneg.f32	s15, s15
 8003336:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800333a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333e:	d507      	bpl.n	8003350 <PID_calc+0x27a>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	edd3 7a04 	vldr	s15, [r3, #16]
 8003346:	eef1 7a67 	vneg.f32	s15, s15
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a1b      	ldr	r3, [r3, #32]
}
 8003354:	ee07 3a90 	vmov	s15, r3
 8003358:	eeb0 0a67 	vmov.f32	s0, s15
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 8003376:	4a12      	ldr	r2, [pc, #72]	@ (80033c0 <PWMInit+0x58>)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 800337c:	4a11      	ldr	r2, [pc, #68]	@ (80033c4 <PWMInit+0x5c>)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 8003382:	4a11      	ldr	r2, [pc, #68]	@ (80033c8 <PWMInit+0x60>)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 8003388:	4a10      	ldr	r2, [pc, #64]	@ (80033cc <PWMInit+0x64>)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 800338e:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <PWMInit+0x58>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f005 fab0 	bl	80088f8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 8003398:	4b0a      	ldr	r3, [pc, #40]	@ (80033c4 <PWMInit+0x5c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f005 faab 	bl	80088f8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 80033a2:	4b09      	ldr	r3, [pc, #36]	@ (80033c8 <PWMInit+0x60>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f005 faa6 	bl	80088f8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 80033ac:	4b07      	ldr	r3, [pc, #28]	@ (80033cc <PWMInit+0x64>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f005 faa1 	bl	80088f8 <HAL_TIM_Base_Start>
}
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	20000db8 	.word	0x20000db8
 80033c4:	20000dbc 	.word	0x20000dbc
 80033c8:	20000dc0 	.word	0x20000dc0
 80033cc:	20000dc4 	.word	0x20000dc4

080033d0 <calculateOutputPeriodToGetFrequency>:

uint32_t calculateOutputPeriodToGetFrequency (TypesThatUsePWM_t Type, uint32_t desiredFrequency) {
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	6039      	str	r1, [r7, #0]
 80033da:	71fb      	strb	r3, [r7, #7]
	uint32_t finalVal = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]
	switch (Type) {
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d02c      	beq.n	8003440 <calculateOutputPeriodToGetFrequency+0x70>
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	dc3d      	bgt.n	8003466 <calculateOutputPeriodToGetFrequency+0x96>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <calculateOutputPeriodToGetFrequency+0x24>
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d013      	beq.n	800341a <calculateOutputPeriodToGetFrequency+0x4a>
 80033f2:	e038      	b.n	8003466 <calculateOutputPeriodToGetFrequency+0x96>
	case 0:
		finalVal = 1/(PWMPre*desiredFrequency);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	ee07 3a90 	vmov	s15, r3
 80033fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fe:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003474 <calculateOutputPeriodToGetFrequency+0xa4>
 8003402:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003406:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800340a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800340e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003412:	ee17 3a90 	vmov	r3, s15
 8003416:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 8003418:	e025      	b.n	8003466 <calculateOutputPeriodToGetFrequency+0x96>
	case 1:
		finalVal = 1/(LEDPre*desiredFrequency);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	ee07 3a90 	vmov	s15, r3
 8003420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003424:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003478 <calculateOutputPeriodToGetFrequency+0xa8>
 8003428:	ee27 7a87 	vmul.f32	s14, s15, s14
 800342c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003438:	ee17 3a90 	vmov	r3, s15
 800343c:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 800343e:	e012      	b.n	8003466 <calculateOutputPeriodToGetFrequency+0x96>
	case 2:
		finalVal = 1/(buzzerPre*desiredFrequency);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	ee07 3a90 	vmov	s15, r3
 8003446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800344a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8003478 <calculateOutputPeriodToGetFrequency+0xa8>
 800344e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800345a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800345e:	ee17 3a90 	vmov	r3, s15
 8003462:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 8003464:	bf00      	nop
	}

	return finalVal;
 8003466:	68fb      	ldr	r3, [r7, #12]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	360637bd 	.word	0x360637bd
 8003478:	358637bd 	.word	0x358637bd

0800347c <safeOutputPeriodValueCalculator>:

uint32_t safeOutputPeriodValueCalculator(int32_t maxVal, float ratioVal) {
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	ed87 0a00 	vstr	s0, [r7]
	// float val = (maxVal);
	// uint32_t val = maxVal;
	// uint32_t val = 500;

	uint32_t val1 = maxVal * ratioVal;// (uint32_t)val;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003492:	edd7 7a00 	vldr	s15, [r7]
 8003496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800349e:	ee17 3a90 	vmov	r3, s15
 80034a2:	60fb      	str	r3, [r7, #12]

	if (val1 > (uint32_t)maxVal) {
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d902      	bls.n	80034b2 <safeOutputPeriodValueCalculator+0x36>
		val1 = (uint32_t)(maxVal);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	e004      	b.n	80034bc <safeOutputPeriodValueCalculator+0x40>
	} else if (val1 < 1) {
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <safeOutputPeriodValueCalculator+0x40>
		val1 = 1;
 80034b8:	2301      	movs	r3, #1
 80034ba:	60fb      	str	r3, [r7, #12]
	}

	// val1 = val1-1;
	return val1;
 80034bc:	68fb      	ldr	r3, [r7, #12]

}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <calculateOutputPeriodValue>:

uint32_t calculateOutputPeriodValue (TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	ed87 0a00 	vstr	s0, [r7]
 80034d8:	71fb      	strb	r3, [r7, #7]
 80034da:	460b      	mov	r3, r1
 80034dc:	71bb      	strb	r3, [r7, #6]
 80034de:	4613      	mov	r3, r2
 80034e0:	717b      	strb	r3, [r7, #5]
	uint32_t returnVal = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
	// usart_printf("beanis1 %d", position);
	switch (Type) {
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d03c      	beq.n	8003566 <calculateOutputPeriodValue+0x9a>
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	dc51      	bgt.n	8003594 <calculateOutputPeriodValue+0xc8>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <calculateOutputPeriodValue+0x2e>
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d01b      	beq.n	8003530 <calculateOutputPeriodValue+0x64>
 80034f8:	e04c      	b.n	8003594 <calculateOutputPeriodValue+0xc8>
		case 0:
			if (microsecondOrFullrange == MS) {
 80034fa:	79bb      	ldrb	r3, [r7, #6]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <calculateOutputPeriodValue+0x4a>
				returnVal = (uint32_t)(val)/PWMµsPre;
 8003500:	edd7 7a00 	vldr	s15, [r7]
 8003504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003508:	ee17 2a90 	vmov	r2, s15
 800350c:	2302      	movs	r3, #2
 800350e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003512:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
			}
			// usart_printf("beanis %d %d\r\n", returnVal, period[position-1]);
			// PWMS[position-1].period = returnVal;
			break;
 8003514:	e03e      	b.n	8003594 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
 8003516:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800351a:	3b01      	subs	r3, #1
 800351c:	4a20      	ldr	r2, [pc, #128]	@ (80035a0 <calculateOutputPeriodValue+0xd4>)
 800351e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003522:	ed97 0a00 	vldr	s0, [r7]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff ffa8 	bl	800347c <safeOutputPeriodValueCalculator>
 800352c:	60f8      	str	r0, [r7, #12]
			break;
 800352e:	e031      	b.n	8003594 <calculateOutputPeriodValue+0xc8>
		case 1:
			if (microsecondOrFullrange == MS) {
 8003530:	79bb      	ldrb	r3, [r7, #6]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10a      	bne.n	800354c <calculateOutputPeriodValue+0x80>
				returnVal = (uint32_t)(val)/LEDµsPre;
 8003536:	edd7 7a00 	vldr	s15, [r7]
 800353a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800353e:	ee17 2a90 	vmov	r2, s15
 8003542:	2301      	movs	r3, #1
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	60fb      	str	r3, [r7, #12]
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
			}
			// usart_printf("%d %d\r\n", returnVal, period[position+6]);
			// (int32_t)((float)(period[position+6]) * val)
			// PWMS[position+6].period = returnVal;
			break;
 800354a:	e023      	b.n	8003594 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
 800354c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003550:	3306      	adds	r3, #6
 8003552:	4a13      	ldr	r2, [pc, #76]	@ (80035a0 <calculateOutputPeriodValue+0xd4>)
 8003554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003558:	ed97 0a00 	vldr	s0, [r7]
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff ff8d 	bl	800347c <safeOutputPeriodValueCalculator>
 8003562:	60f8      	str	r0, [r7, #12]
			break;
 8003564:	e016      	b.n	8003594 <calculateOutputPeriodValue+0xc8>
		case 2:
			if (microsecondOrFullrange == MS) {
 8003566:	79bb      	ldrb	r3, [r7, #6]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10a      	bne.n	8003582 <calculateOutputPeriodValue+0xb6>
				returnVal = (uint32_t)(val)/buzzerµsPre;
 800356c:	edd7 7a00 	vldr	s15, [r7]
 8003570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003574:	ee17 2a90 	vmov	r2, s15
 8003578:	2301      	movs	r3, #1
 800357a:	fbb2 f3f3 	udiv	r3, r2, r3
 800357e:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
			}
			// PWMS[10].period = returnVal;
			// usart_printf("%d %d\r\n", returnVal, period[10]);
			break;
 8003580:	e007      	b.n	8003592 <calculateOutputPeriodValue+0xc6>
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
 8003582:	4b07      	ldr	r3, [pc, #28]	@ (80035a0 <calculateOutputPeriodValue+0xd4>)
 8003584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003586:	ed97 0a00 	vldr	s0, [r7]
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff ff76 	bl	800347c <safeOutputPeriodValueCalculator>
 8003590:	60f8      	str	r0, [r7, #12]
			break;
 8003592:	bf00      	nop
		default:
	}
	return returnVal;
 8003594:	68fb      	ldr	r3, [r7, #12]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000e00 	.word	0x20000e00

080035a4 <PWMInitialize>:

void PWMInitialize(TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	ed87 0a00 	vstr	s0, [r7]
 80035b0:	71fb      	strb	r3, [r7, #7]
 80035b2:	460b      	mov	r3, r1
 80035b4:	71bb      	strb	r3, [r7, #6]
 80035b6:	4613      	mov	r3, r2
 80035b8:	717b      	strb	r3, [r7, #5]

	// usart_printf("beanis2 %d\r\n", position);

	uint32_t value = calculateOutputPeriodValue (Type, microsecondOrFullrange, position, val);
 80035ba:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80035be:	79b9      	ldrb	r1, [r7, #6]
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	ed97 0a00 	vldr	s0, [r7]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff ff80 	bl	80034cc <calculateOutputPeriodValue>
 80035cc:	60f8      	str	r0, [r7, #12]
	switch (Type) {
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d076      	beq.n	80036c2 <PWMInitialize+0x11e>
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	dc7e      	bgt.n	80036d6 <PWMInitialize+0x132>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <PWMInitialize+0x3e>
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d04a      	beq.n	8003676 <PWMInitialize+0xd2>
	case 2:
		(*tim4).Instance->CCR3=value;
		subPeriod[10] = value;
		break;
	}
	return;
 80035e0:	e079      	b.n	80036d6 <PWMInitialize+0x132>
		switch (position) {
 80035e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	2b06      	cmp	r3, #6
 80035ea:	d83b      	bhi.n	8003664 <PWMInitialize+0xc0>
 80035ec:	a201      	add	r2, pc, #4	@ (adr r2, 80035f4 <PWMInitialize+0x50>)
 80035ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f2:	bf00      	nop
 80035f4:	08003611 	.word	0x08003611
 80035f8:	0800361d 	.word	0x0800361d
 80035fc:	08003629 	.word	0x08003629
 8003600:	08003635 	.word	0x08003635
 8003604:	08003641 	.word	0x08003641
 8003608:	0800364d 	.word	0x0800364d
 800360c:	08003659 	.word	0x08003659
			(*tim1).Instance->CCR1=value;
 8003610:	4b33      	ldr	r3, [pc, #204]	@ (80036e0 <PWMInitialize+0x13c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800361a:	e024      	b.n	8003666 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR2=value;
 800361c:	4b30      	ldr	r3, [pc, #192]	@ (80036e0 <PWMInitialize+0x13c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8003626:	e01e      	b.n	8003666 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR3=value;
 8003628:	4b2d      	ldr	r3, [pc, #180]	@ (80036e0 <PWMInitialize+0x13c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8003632:	e018      	b.n	8003666 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR4=value;
 8003634:	4b2a      	ldr	r3, [pc, #168]	@ (80036e0 <PWMInitialize+0x13c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 800363e:	e012      	b.n	8003666 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR1=value;
 8003640:	4b28      	ldr	r3, [pc, #160]	@ (80036e4 <PWMInitialize+0x140>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800364a:	e00c      	b.n	8003666 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR2=value;
 800364c:	4b25      	ldr	r3, [pc, #148]	@ (80036e4 <PWMInitialize+0x140>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8003656:	e006      	b.n	8003666 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR3=value;
 8003658:	4b22      	ldr	r3, [pc, #136]	@ (80036e4 <PWMInitialize+0x140>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8003662:	e000      	b.n	8003666 <PWMInitialize+0xc2>
			break;
 8003664:	bf00      	nop
		subPeriod[position-1] = value;
 8003666:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800366a:	3b01      	subs	r3, #1
 800366c:	491e      	ldr	r1, [pc, #120]	@ (80036e8 <PWMInitialize+0x144>)
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8003674:	e02e      	b.n	80036d4 <PWMInitialize+0x130>
		switch (position) {
 8003676:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800367a:	2b03      	cmp	r3, #3
 800367c:	d012      	beq.n	80036a4 <PWMInitialize+0x100>
 800367e:	2b03      	cmp	r3, #3
 8003680:	dc16      	bgt.n	80036b0 <PWMInitialize+0x10c>
 8003682:	2b01      	cmp	r3, #1
 8003684:	d002      	beq.n	800368c <PWMInitialize+0xe8>
 8003686:	2b02      	cmp	r3, #2
 8003688:	d006      	beq.n	8003698 <PWMInitialize+0xf4>
			break;
 800368a:	e011      	b.n	80036b0 <PWMInitialize+0x10c>
			(*tim5).Instance->CCR1=value;
 800368c:	4b17      	ldr	r3, [pc, #92]	@ (80036ec <PWMInitialize+0x148>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8003696:	e00c      	b.n	80036b2 <PWMInitialize+0x10e>
			(*tim5).Instance->CCR2=value;
 8003698:	4b14      	ldr	r3, [pc, #80]	@ (80036ec <PWMInitialize+0x148>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 80036a2:	e006      	b.n	80036b2 <PWMInitialize+0x10e>
			(*tim5).Instance->CCR3=value;
 80036a4:	4b11      	ldr	r3, [pc, #68]	@ (80036ec <PWMInitialize+0x148>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 80036ae:	e000      	b.n	80036b2 <PWMInitialize+0x10e>
			break;
 80036b0:	bf00      	nop
		subPeriod[position+6] = value;
 80036b2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80036b6:	3306      	adds	r3, #6
 80036b8:	490b      	ldr	r1, [pc, #44]	@ (80036e8 <PWMInitialize+0x144>)
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80036c0:	e008      	b.n	80036d4 <PWMInitialize+0x130>
		(*tim4).Instance->CCR3=value;
 80036c2:	4b0b      	ldr	r3, [pc, #44]	@ (80036f0 <PWMInitialize+0x14c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	63da      	str	r2, [r3, #60]	@ 0x3c
		subPeriod[10] = value;
 80036cc:	4a06      	ldr	r2, [pc, #24]	@ (80036e8 <PWMInitialize+0x144>)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 80036d2:	bf00      	nop
	return;
 80036d4:	bf00      	nop
 80036d6:	bf00      	nop
}
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20000db8 	.word	0x20000db8
 80036e4:	20000dc4 	.word	0x20000dc4
 80036e8:	20000dd4 	.word	0x20000dd4
 80036ec:	20000dc0 	.word	0x20000dc0
 80036f0:	20000dbc 	.word	0x20000dbc

080036f4 <MotorPositionForInitializingPeriod>:

void MotorPositionForInitializingPeriod(int8_t Position, uint32_t calculatedPeriod) {
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	6039      	str	r1, [r7, #0]
 80036fe:	71fb      	strb	r3, [r7, #7]
	if (Position < 5) {
 8003700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003704:	2b04      	cmp	r3, #4
 8003706:	dc0c      	bgt.n	8003722 <MotorPositionForInitializingPeriod+0x2e>

		(*tim1).Instance->ARR = calculatedPeriod;
 8003708:	4b0f      	ldr	r3, [pc, #60]	@ (8003748 <MotorPositionForInitializingPeriod+0x54>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	62da      	str	r2, [r3, #44]	@ 0x2c
		// (*tim1).Init.Period = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	3b01      	subs	r3, #1
 8003718:	490c      	ldr	r1, [pc, #48]	@ (800374c <MotorPositionForInitializingPeriod+0x58>)
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	} else {
		(*tim8).Instance->ARR = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
	}

}
 8003720:	e00b      	b.n	800373a <MotorPositionForInitializingPeriod+0x46>
		(*tim8).Instance->ARR = calculatedPeriod;
 8003722:	4b0b      	ldr	r3, [pc, #44]	@ (8003750 <MotorPositionForInitializingPeriod+0x5c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position-1] = calculatedPeriod;
 800372c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003730:	3b01      	subs	r3, #1
 8003732:	4906      	ldr	r1, [pc, #24]	@ (800374c <MotorPositionForInitializingPeriod+0x58>)
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	20000db8 	.word	0x20000db8
 800374c:	20000e00 	.word	0x20000e00
 8003750:	20000dc4 	.word	0x20000dc4

08003754 <initializePeriod>:

// htim1.Init.Period
void initializePeriod (TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	603a      	str	r2, [r7, #0]
 800375e:	71fb      	strb	r3, [r7, #7]
 8003760:	460b      	mov	r3, r1
 8003762:	71bb      	strb	r3, [r7, #6]
	uint32_t calculatedPeriod = calculateOutputPeriodToGetFrequency(Type, desiredFrequency);
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	6839      	ldr	r1, [r7, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff fe31 	bl	80033d0 <calculateOutputPeriodToGetFrequency>
 800376e:	60f8      	str	r0, [r7, #12]
	// usart_printf("%d %d\r\n", Position ,calculatedPeriod);
	switch (Type) {
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d01a      	beq.n	80037ac <initializePeriod+0x58>
 8003776:	2b02      	cmp	r3, #2
 8003778:	dc22      	bgt.n	80037c0 <initializePeriod+0x6c>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <initializePeriod+0x30>
 800377e:	2b01      	cmp	r3, #1
 8003780:	d007      	beq.n	8003792 <initializePeriod+0x3e>
		// (*tim4).Init.Period = calculatedPeriod;
		(*tim4).Instance->ARR = calculatedPeriod;
		period[10] = calculatedPeriod;
		break;
	}
	return;
 8003782:	e01d      	b.n	80037c0 <initializePeriod+0x6c>
		MotorPositionForInitializingPeriod(Position, calculatedPeriod);
 8003784:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003788:	68f9      	ldr	r1, [r7, #12]
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff ffb2 	bl	80036f4 <MotorPositionForInitializingPeriod>
		break;
 8003790:	e015      	b.n	80037be <initializePeriod+0x6a>
		(*tim5).Instance->ARR = calculatedPeriod;
 8003792:	4b0d      	ldr	r3, [pc, #52]	@ (80037c8 <initializePeriod+0x74>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position+6] = calculatedPeriod;
 800379c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80037a0:	3306      	adds	r3, #6
 80037a2:	490a      	ldr	r1, [pc, #40]	@ (80037cc <initializePeriod+0x78>)
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80037aa:	e008      	b.n	80037be <initializePeriod+0x6a>
		(*tim4).Instance->ARR = calculatedPeriod;
 80037ac:	4b08      	ldr	r3, [pc, #32]	@ (80037d0 <initializePeriod+0x7c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[10] = calculatedPeriod;
 80037b6:	4a05      	ldr	r2, [pc, #20]	@ (80037cc <initializePeriod+0x78>)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 80037bc:	bf00      	nop
	return;
 80037be:	bf00      	nop
 80037c0:	bf00      	nop
}
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	20000dc0 	.word	0x20000dc0
 80037cc:	20000e00 	.word	0x20000e00
 80037d0:	20000dbc 	.word	0x20000dbc

080037d4 <PWMOutput>:

// (Type, Position, ms or fullrange, val)
void PWMOutput(TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	603a      	str	r2, [r7, #0]
 80037de:	71fb      	strb	r3, [r7, #7]
 80037e0:	460b      	mov	r3, r1
 80037e2:	71bb      	strb	r3, [r7, #6]

	initializePeriod(Type, Position, desiredFrequency);
 80037e4:	f997 1006 	ldrsb.w	r1, [r7, #6]
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff ffb1 	bl	8003754 <initializePeriod>

	// usart_printf("beanis3 %d\r\n", Position);
	switch (Type) {
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d014      	beq.n	8003822 <PWMOutput+0x4e>
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	dc16      	bgt.n	800382a <PWMOutput+0x56>
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <PWMOutput+0x32>
 8003800:	2b01      	cmp	r3, #1
 8003802:	d007      	beq.n	8003814 <PWMOutput+0x40>
 8003804:	e011      	b.n	800382a <PWMOutput+0x56>
	case 0:
		whichPWMisOn[Position-1] = 1;
 8003806:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800380a:	3b01      	subs	r3, #1
 800380c:	4a08      	ldr	r2, [pc, #32]	@ (8003830 <PWMOutput+0x5c>)
 800380e:	2101      	movs	r1, #1
 8003810:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 8003812:	e00a      	b.n	800382a <PWMOutput+0x56>
	case 1:
		whichPWMisOn[Position+6] = 1;
 8003814:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003818:	3306      	adds	r3, #6
 800381a:	4a05      	ldr	r2, [pc, #20]	@ (8003830 <PWMOutput+0x5c>)
 800381c:	2101      	movs	r1, #1
 800381e:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 8003820:	e003      	b.n	800382a <PWMOutput+0x56>
	case 2:
		whichPWMisOn[10] = 1;
 8003822:	4b03      	ldr	r3, [pc, #12]	@ (8003830 <PWMOutput+0x5c>)
 8003824:	2201      	movs	r2, #1
 8003826:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 8003828:	bf00      	nop
	}
	// whichPWMisOn[7]= 1;
	// usart_printf("beanis7 %d %d\r\n", Position, whichPWMisOn[Position-1]);
	// return;
}
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20000dc8 	.word	0x20000dc8

08003834 <PWMOff>:
		// usart_printf("Buzzer %d\r\n", Position);
		return;
	}
}

void PWMOff(TypesThatUsePWM_t Type, int8_t Position) {
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	460a      	mov	r2, r1
 800383e:	71fb      	strb	r3, [r7, #7]
 8003840:	4613      	mov	r3, r2
 8003842:	71bb      	strb	r3, [r7, #6]
	switch (Type) {
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d014      	beq.n	8003874 <PWMOff+0x40>
 800384a:	2b02      	cmp	r3, #2
 800384c:	dc16      	bgt.n	800387c <PWMOff+0x48>
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <PWMOff+0x24>
 8003852:	2b01      	cmp	r3, #1
 8003854:	d007      	beq.n	8003866 <PWMOff+0x32>
 8003856:	e011      	b.n	800387c <PWMOff+0x48>
	case 0:
		whichPWMisOn[Position-1] = 0;
 8003858:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800385c:	3b01      	subs	r3, #1
 800385e:	4a0a      	ldr	r2, [pc, #40]	@ (8003888 <PWMOff+0x54>)
 8003860:	2100      	movs	r1, #0
 8003862:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 8003864:	e00a      	b.n	800387c <PWMOff+0x48>
	case 1:
		whichPWMisOn[Position+6] = 0;
 8003866:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800386a:	3306      	adds	r3, #6
 800386c:	4a06      	ldr	r2, [pc, #24]	@ (8003888 <PWMOff+0x54>)
 800386e:	2100      	movs	r1, #0
 8003870:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 8003872:	e003      	b.n	800387c <PWMOff+0x48>
	case 2:
		whichPWMisOn[10] = 0;
 8003874:	4b04      	ldr	r3, [pc, #16]	@ (8003888 <PWMOff+0x54>)
 8003876:	2200      	movs	r2, #0
 8003878:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 800387a:	bf00      	nop
	}
}
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	20000dc8 	.word	0x20000dc8

0800388c <PWMTimerStarter>:
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}

void PWMTimerStarter() {
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 8003892:	2300      	movs	r3, #0
 8003894:	607b      	str	r3, [r7, #4]
 8003896:	e0f1      	b.n	8003a7c <PWMTimerStarter+0x1f0>
		switch (i) {
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b0a      	cmp	r3, #10
 800389c:	f200 80eb 	bhi.w	8003a76 <PWMTimerStarter+0x1ea>
 80038a0:	a201      	add	r2, pc, #4	@ (adr r2, 80038a8 <PWMTimerStarter+0x1c>)
 80038a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a6:	bf00      	nop
 80038a8:	080038d5 	.word	0x080038d5
 80038ac:	080038fb 	.word	0x080038fb
 80038b0:	08003921 	.word	0x08003921
 80038b4:	08003947 	.word	0x08003947
 80038b8:	0800396d 	.word	0x0800396d
 80038bc:	08003993 	.word	0x08003993
 80038c0:	080039b9 	.word	0x080039b9
 80038c4:	080039df 	.word	0x080039df
 80038c8:	08003a05 	.word	0x08003a05
 80038cc:	08003a2b 	.word	0x08003a2b
 80038d0:	08003a51 	.word	0x08003a51
		case 0:
			if (whichPWMisOn[0] == 1) {
 80038d4:	4b6e      	ldr	r3, [pc, #440]	@ (8003a90 <PWMTimerStarter+0x204>)
 80038d6:	f993 3000 	ldrsb.w	r3, [r3]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d106      	bne.n	80038ec <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 80038de:	4b6d      	ldr	r3, [pc, #436]	@ (8003a94 <PWMTimerStarter+0x208>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2100      	movs	r1, #0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f005 f8bf 	bl	8008a68 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 80038ea:	e0c4      	b.n	8003a76 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 80038ec:	4b69      	ldr	r3, [pc, #420]	@ (8003a94 <PWMTimerStarter+0x208>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2100      	movs	r1, #0
 80038f2:	4618      	mov	r0, r3
 80038f4:	f005 f980 	bl	8008bf8 <HAL_TIM_PWM_Stop>
			break;
 80038f8:	e0bd      	b.n	8003a76 <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 80038fa:	4b65      	ldr	r3, [pc, #404]	@ (8003a90 <PWMTimerStarter+0x204>)
 80038fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d106      	bne.n	8003912 <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8003904:	4b63      	ldr	r3, [pc, #396]	@ (8003a94 <PWMTimerStarter+0x208>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2104      	movs	r1, #4
 800390a:	4618      	mov	r0, r3
 800390c:	f005 f8ac 	bl	8008a68 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 8003910:	e0b1      	b.n	8003a76 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 8003912:	4b60      	ldr	r3, [pc, #384]	@ (8003a94 <PWMTimerStarter+0x208>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2104      	movs	r1, #4
 8003918:	4618      	mov	r0, r3
 800391a:	f005 f96d 	bl	8008bf8 <HAL_TIM_PWM_Stop>
			break;
 800391e:	e0aa      	b.n	8003a76 <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 8003920:	4b5b      	ldr	r3, [pc, #364]	@ (8003a90 <PWMTimerStarter+0x204>)
 8003922:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d106      	bne.n	8003938 <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 800392a:	4b5a      	ldr	r3, [pc, #360]	@ (8003a94 <PWMTimerStarter+0x208>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2108      	movs	r1, #8
 8003930:	4618      	mov	r0, r3
 8003932:	f005 f899 	bl	8008a68 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 8003936:	e09e      	b.n	8003a76 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 8003938:	4b56      	ldr	r3, [pc, #344]	@ (8003a94 <PWMTimerStarter+0x208>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2108      	movs	r1, #8
 800393e:	4618      	mov	r0, r3
 8003940:	f005 f95a 	bl	8008bf8 <HAL_TIM_PWM_Stop>
			break;
 8003944:	e097      	b.n	8003a76 <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 8003946:	4b52      	ldr	r3, [pc, #328]	@ (8003a90 <PWMTimerStarter+0x204>)
 8003948:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d106      	bne.n	800395e <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 8003950:	4b50      	ldr	r3, [pc, #320]	@ (8003a94 <PWMTimerStarter+0x208>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	210c      	movs	r1, #12
 8003956:	4618      	mov	r0, r3
 8003958:	f005 f886 	bl	8008a68 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 800395c:	e08b      	b.n	8003a76 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 800395e:	4b4d      	ldr	r3, [pc, #308]	@ (8003a94 <PWMTimerStarter+0x208>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	210c      	movs	r1, #12
 8003964:	4618      	mov	r0, r3
 8003966:	f005 f947 	bl	8008bf8 <HAL_TIM_PWM_Stop>
			break;
 800396a:	e084      	b.n	8003a76 <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 800396c:	4b48      	ldr	r3, [pc, #288]	@ (8003a90 <PWMTimerStarter+0x204>)
 800396e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d106      	bne.n	8003984 <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 8003976:	4b48      	ldr	r3, [pc, #288]	@ (8003a98 <PWMTimerStarter+0x20c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2100      	movs	r1, #0
 800397c:	4618      	mov	r0, r3
 800397e:	f005 f873 	bl	8008a68 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 8003982:	e078      	b.n	8003a76 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 8003984:	4b44      	ldr	r3, [pc, #272]	@ (8003a98 <PWMTimerStarter+0x20c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f005 f934 	bl	8008bf8 <HAL_TIM_PWM_Stop>
			break;
 8003990:	e071      	b.n	8003a76 <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 8003992:	4b3f      	ldr	r3, [pc, #252]	@ (8003a90 <PWMTimerStarter+0x204>)
 8003994:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d106      	bne.n	80039aa <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 800399c:	4b3e      	ldr	r3, [pc, #248]	@ (8003a98 <PWMTimerStarter+0x20c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2104      	movs	r1, #4
 80039a2:	4618      	mov	r0, r3
 80039a4:	f005 f860 	bl	8008a68 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 80039a8:	e065      	b.n	8003a76 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 80039aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003a98 <PWMTimerStarter+0x20c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2104      	movs	r1, #4
 80039b0:	4618      	mov	r0, r3
 80039b2:	f005 f921 	bl	8008bf8 <HAL_TIM_PWM_Stop>
			break;
 80039b6:	e05e      	b.n	8003a76 <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 80039b8:	4b35      	ldr	r3, [pc, #212]	@ (8003a90 <PWMTimerStarter+0x204>)
 80039ba:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d106      	bne.n	80039d0 <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 80039c2:	4b35      	ldr	r3, [pc, #212]	@ (8003a98 <PWMTimerStarter+0x20c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2108      	movs	r1, #8
 80039c8:	4618      	mov	r0, r3
 80039ca:	f005 f84d 	bl	8008a68 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 80039ce:	e052      	b.n	8003a76 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 80039d0:	4b31      	ldr	r3, [pc, #196]	@ (8003a98 <PWMTimerStarter+0x20c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2108      	movs	r1, #8
 80039d6:	4618      	mov	r0, r3
 80039d8:	f005 f90e 	bl	8008bf8 <HAL_TIM_PWM_Stop>
			break;
 80039dc:	e04b      	b.n	8003a76 <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 80039de:	4b2c      	ldr	r3, [pc, #176]	@ (8003a90 <PWMTimerStarter+0x204>)
 80039e0:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d106      	bne.n	80039f6 <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 80039e8:	4b2c      	ldr	r3, [pc, #176]	@ (8003a9c <PWMTimerStarter+0x210>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2100      	movs	r1, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	f005 f83a 	bl	8008a68 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 80039f4:	e03f      	b.n	8003a76 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 80039f6:	4b29      	ldr	r3, [pc, #164]	@ (8003a9c <PWMTimerStarter+0x210>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2100      	movs	r1, #0
 80039fc:	4618      	mov	r0, r3
 80039fe:	f005 f8fb 	bl	8008bf8 <HAL_TIM_PWM_Stop>
			break;
 8003a02:	e038      	b.n	8003a76 <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 8003a04:	4b22      	ldr	r3, [pc, #136]	@ (8003a90 <PWMTimerStarter+0x204>)
 8003a06:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d106      	bne.n	8003a1c <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 8003a0e:	4b23      	ldr	r3, [pc, #140]	@ (8003a9c <PWMTimerStarter+0x210>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2104      	movs	r1, #4
 8003a14:	4618      	mov	r0, r3
 8003a16:	f005 f827 	bl	8008a68 <HAL_TIM_PWM_Start>

			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
				// usart_printf("beanis\r\n");
			}
			break;
 8003a1a:	e02c      	b.n	8003a76 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 8003a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8003a9c <PWMTimerStarter+0x210>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2104      	movs	r1, #4
 8003a22:	4618      	mov	r0, r3
 8003a24:	f005 f8e8 	bl	8008bf8 <HAL_TIM_PWM_Stop>
			break;
 8003a28:	e025      	b.n	8003a76 <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 8003a2a:	4b19      	ldr	r3, [pc, #100]	@ (8003a90 <PWMTimerStarter+0x204>)
 8003a2c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d106      	bne.n	8003a42 <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 8003a34:	4b19      	ldr	r3, [pc, #100]	@ (8003a9c <PWMTimerStarter+0x210>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2108      	movs	r1, #8
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f005 f814 	bl	8008a68 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 8003a40:	e019      	b.n	8003a76 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 8003a42:	4b16      	ldr	r3, [pc, #88]	@ (8003a9c <PWMTimerStarter+0x210>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2108      	movs	r1, #8
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f005 f8d5 	bl	8008bf8 <HAL_TIM_PWM_Stop>
			break;
 8003a4e:	e012      	b.n	8003a76 <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 8003a50:	4b0f      	ldr	r3, [pc, #60]	@ (8003a90 <PWMTimerStarter+0x204>)
 8003a52:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d106      	bne.n	8003a68 <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 8003a5a:	4b11      	ldr	r3, [pc, #68]	@ (8003aa0 <PWMTimerStarter+0x214>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2108      	movs	r1, #8
 8003a60:	4618      	mov	r0, r3
 8003a62:	f005 f801 	bl	8008a68 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 8003a66:	e005      	b.n	8003a74 <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 8003a68:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa0 <PWMTimerStarter+0x214>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2108      	movs	r1, #8
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f005 f8c2 	bl	8008bf8 <HAL_TIM_PWM_Stop>
			break;
 8003a74:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	607b      	str	r3, [r7, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b0a      	cmp	r3, #10
 8003a80:	f77f af0a 	ble.w	8003898 <PWMTimerStarter+0xc>
		}
	}
}
 8003a84:	bf00      	nop
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000dc8 	.word	0x20000dc8
 8003a94:	20000db8 	.word	0x20000db8
 8003a98:	20000dc4 	.word	0x20000dc4
 8003a9c:	20000dc0 	.word	0x20000dc0
 8003aa0:	20000dbc 	.word	0x20000dbc

08003aa4 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 8003aa8:	2224      	movs	r2, #36	@ 0x24
 8003aaa:	4903      	ldr	r1, [pc, #12]	@ (8003ab8 <remote_control_init+0x14>)
 8003aac:	4803      	ldr	r0, [pc, #12]	@ (8003abc <remote_control_init+0x18>)
 8003aae:	f7fd ff7f 	bl	80019b0 <RC_init>
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000e68 	.word	0x20000e68
 8003abc:	20000e44 	.word	0x20000e44

08003ac0 <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 8003ac4:	4b02      	ldr	r3, [pc, #8]	@ (8003ad0 <get_remote_control_point+0x10>)
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	20000e2c 	.word	0x20000e2c

08003ad4 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 8003ada:	4b44      	ldr	r3, [pc, #272]	@ (8003bec <USART3_IRQHandler+0x118>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00b      	beq.n	8003b00 <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8003ae8:	2300      	movs	r3, #0
 8003aea:	607b      	str	r3, [r7, #4]
 8003aec:	4b3f      	ldr	r3, [pc, #252]	@ (8003bec <USART3_IRQHandler+0x118>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	607b      	str	r3, [r7, #4]
 8003af4:	4b3d      	ldr	r3, [pc, #244]	@ (8003bec <USART3_IRQHandler+0x118>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	607b      	str	r3, [r7, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 8003afe:	e070      	b.n	8003be2 <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8003b00:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf0 <USART3_IRQHandler+0x11c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d06a      	beq.n	8003be2 <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	603b      	str	r3, [r7, #0]
 8003b10:	4b36      	ldr	r3, [pc, #216]	@ (8003bec <USART3_IRQHandler+0x118>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	4b34      	ldr	r3, [pc, #208]	@ (8003bec <USART3_IRQHandler+0x118>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8003b22:	4b34      	ldr	r3, [pc, #208]	@ (8003bf4 <USART3_IRQHandler+0x120>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d12d      	bne.n	8003b8c <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8003b30:	4b30      	ldr	r3, [pc, #192]	@ (8003bf4 <USART3_IRQHandler+0x120>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	4b2f      	ldr	r3, [pc, #188]	@ (8003bf4 <USART3_IRQHandler+0x120>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8003b40:	4b2c      	ldr	r3, [pc, #176]	@ (8003bf4 <USART3_IRQHandler+0x120>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8003bf8 <USART3_IRQHandler+0x124>)
 8003b50:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8003b52:	4b28      	ldr	r3, [pc, #160]	@ (8003bf4 <USART3_IRQHandler+0x120>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2224      	movs	r2, #36	@ 0x24
 8003b58:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 8003b5a:	4b26      	ldr	r3, [pc, #152]	@ (8003bf4 <USART3_IRQHandler+0x120>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	4b24      	ldr	r3, [pc, #144]	@ (8003bf4 <USART3_IRQHandler+0x120>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003b68:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8003b6a:	4b22      	ldr	r3, [pc, #136]	@ (8003bf4 <USART3_IRQHandler+0x120>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b20      	ldr	r3, [pc, #128]	@ (8003bf4 <USART3_IRQHandler+0x120>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0201 	orr.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 8003b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8003bf8 <USART3_IRQHandler+0x124>)
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	2b12      	cmp	r3, #18
 8003b80:	d12f      	bne.n	8003be2 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8003b82:	491e      	ldr	r1, [pc, #120]	@ (8003bfc <USART3_IRQHandler+0x128>)
 8003b84:	481e      	ldr	r0, [pc, #120]	@ (8003c00 <USART3_IRQHandler+0x12c>)
 8003b86:	f000 f841 	bl	8003c0c <sbus_to_rc>
}
 8003b8a:	e02a      	b.n	8003be2 <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8003b8c:	4b19      	ldr	r3, [pc, #100]	@ (8003bf4 <USART3_IRQHandler+0x120>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4b18      	ldr	r3, [pc, #96]	@ (8003bf4 <USART3_IRQHandler+0x120>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8003b9c:	4b15      	ldr	r3, [pc, #84]	@ (8003bf4 <USART3_IRQHandler+0x120>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	4b13      	ldr	r3, [pc, #76]	@ (8003bf8 <USART3_IRQHandler+0x124>)
 8003bac:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8003bae:	4b11      	ldr	r3, [pc, #68]	@ (8003bf4 <USART3_IRQHandler+0x120>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2224      	movs	r2, #36	@ 0x24
 8003bb4:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 8003bb6:	4b13      	ldr	r3, [pc, #76]	@ (8003c04 <USART3_IRQHandler+0x130>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a12      	ldr	r2, [pc, #72]	@ (8003c04 <USART3_IRQHandler+0x130>)
 8003bbc:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003bc0:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8003bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf4 <USART3_IRQHandler+0x120>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf4 <USART3_IRQHandler+0x120>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0201 	orr.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 8003bd2:	4b09      	ldr	r3, [pc, #36]	@ (8003bf8 <USART3_IRQHandler+0x124>)
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	2b12      	cmp	r3, #18
 8003bd8:	d103      	bne.n	8003be2 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 8003bda:	4908      	ldr	r1, [pc, #32]	@ (8003bfc <USART3_IRQHandler+0x128>)
 8003bdc:	480a      	ldr	r0, [pc, #40]	@ (8003c08 <USART3_IRQHandler+0x134>)
 8003bde:	f000 f815 	bl	8003c0c <sbus_to_rc>
}
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000b24 	.word	0x20000b24
 8003bf0:	40004800 	.word	0x40004800
 8003bf4:	20000c74 	.word	0x20000c74
 8003bf8:	20000e8c 	.word	0x20000e8c
 8003bfc:	20000e2c 	.word	0x20000e2c
 8003c00:	20000e44 	.word	0x20000e44
 8003c04:	40026028 	.word	0x40026028
 8003c08:	20000e68 	.word	0x20000e68

08003c0c <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8101 	beq.w	8003e20 <sbus_to_rc+0x214>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80fd 	beq.w	8003e20 <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	b21a      	sxth	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3301      	adds	r3, #1
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	b21b      	sxth	r3, r3
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	b21b      	sxth	r3, r3
 8003c3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c42:	b21a      	sxth	r2, r3
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	08db      	lsrs	r3, r3, #3
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	b21a      	sxth	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3302      	adds	r3, #2
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	015b      	lsls	r3, r3, #5
 8003c60:	b21b      	sxth	r3, r3
 8003c62:	4313      	orrs	r3, r2
 8003c64:	b21b      	sxth	r3, r3
 8003c66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c6a:	b21a      	sxth	r2, r3
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3302      	adds	r3, #2
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	099b      	lsrs	r3, r3, #6
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	b21a      	sxth	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3303      	adds	r3, #3
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	b21b      	sxth	r3, r3
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3304      	adds	r3, #4
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003c98:	b21b      	sxth	r3, r3
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8003c9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ca2:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3304      	adds	r3, #4
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	085b      	lsrs	r3, r3, #1
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	b21a      	sxth	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3305      	adds	r3, #5
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	01db      	lsls	r3, r3, #7
 8003cc0:	b21b      	sxth	r3, r3
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	b21b      	sxth	r3, r3
 8003cc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cca:	b21a      	sxth	r2, r3
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3305      	adds	r3, #5
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3305      	adds	r3, #5
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	109b      	asrs	r3, r3, #2
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3306      	adds	r3, #6
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	b21a      	sxth	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3307      	adds	r3, #7
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	b21b      	sxth	r3, r3
 8003d16:	4313      	orrs	r3, r2
 8003d18:	b21a      	sxth	r2, r3
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3308      	adds	r3, #8
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	b21a      	sxth	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3309      	adds	r3, #9
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	b21b      	sxth	r3, r3
 8003d34:	4313      	orrs	r3, r2
 8003d36:	b21a      	sxth	r2, r3
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	330a      	adds	r3, #10
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	b21a      	sxth	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	330b      	adds	r3, #11
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	021b      	lsls	r3, r3, #8
 8003d50:	b21b      	sxth	r3, r3
 8003d52:	4313      	orrs	r3, r2
 8003d54:	b21a      	sxth	r2, r3
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	330c      	adds	r3, #12
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	330d      	adds	r3, #13
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	330e      	adds	r3, #14
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	b21a      	sxth	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	330f      	adds	r3, #15
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	b21b      	sxth	r3, r3
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	b21b      	sxth	r3, r3
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3310      	adds	r3, #16
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	b21a      	sxth	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3311      	adds	r3, #17
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	b21b      	sxth	r3, r3
 8003da8:	4313      	orrs	r3, r2
 8003daa:	b21a      	sxth	r2, r3
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003db6:	b21b      	sxth	r3, r3
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	b21a      	sxth	r2, r3
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003dcc:	b21b      	sxth	r3, r3
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	b21a      	sxth	r2, r3
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003de2:	b21b      	sxth	r3, r3
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	b21a      	sxth	r2, r3
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003df8:	b21b      	sxth	r3, r3
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	b21a      	sxth	r2, r3
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e0e:	b21b      	sxth	r3, r3
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	b21a      	sxth	r2, r3
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	811a      	strh	r2, [r3, #8]
 8003e1e:	e000      	b.n	8003e22 <sbus_to_rc+0x216>
        return;
 8003e20:	bf00      	nop
}
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 8003e36:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <getRCchannel+0x24>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003e3e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003e42:	b21b      	sxth	r3, r3
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	2000005c 	.word	0x2000005c

08003e54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	4b12      	ldr	r3, [pc, #72]	@ (8003ea8 <HAL_MspInit+0x54>)
 8003e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e62:	4a11      	ldr	r2, [pc, #68]	@ (8003ea8 <HAL_MspInit+0x54>)
 8003e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea8 <HAL_MspInit+0x54>)
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e72:	607b      	str	r3, [r7, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea8 <HAL_MspInit+0x54>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ea8 <HAL_MspInit+0x54>)
 8003e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e86:	4b08      	ldr	r3, [pc, #32]	@ (8003ea8 <HAL_MspInit+0x54>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e92:	2200      	movs	r2, #0
 8003e94:	210f      	movs	r1, #15
 8003e96:	f06f 0001 	mvn.w	r0, #1
 8003e9a:	f001 ff1e 	bl	8005cda <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40023800 	.word	0x40023800

08003eac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08c      	sub	sp, #48	@ 0x30
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb4:	f107 031c 	add.w	r3, r7, #28
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	605a      	str	r2, [r3, #4]
 8003ebe:	609a      	str	r2, [r3, #8]
 8003ec0:	60da      	str	r2, [r3, #12]
 8003ec2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a4a      	ldr	r2, [pc, #296]	@ (8003ff4 <HAL_CAN_MspInit+0x148>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d13d      	bne.n	8003f4a <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003ece:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff8 <HAL_CAN_MspInit+0x14c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	4a48      	ldr	r2, [pc, #288]	@ (8003ff8 <HAL_CAN_MspInit+0x14c>)
 8003ed6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003ed8:	4b47      	ldr	r3, [pc, #284]	@ (8003ff8 <HAL_CAN_MspInit+0x14c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d10d      	bne.n	8003efc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61bb      	str	r3, [r7, #24]
 8003ee4:	4b45      	ldr	r3, [pc, #276]	@ (8003ffc <HAL_CAN_MspInit+0x150>)
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee8:	4a44      	ldr	r2, [pc, #272]	@ (8003ffc <HAL_CAN_MspInit+0x150>)
 8003eea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003eee:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ef0:	4b42      	ldr	r3, [pc, #264]	@ (8003ffc <HAL_CAN_MspInit+0x150>)
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	4b3e      	ldr	r3, [pc, #248]	@ (8003ffc <HAL_CAN_MspInit+0x150>)
 8003f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f04:	4a3d      	ldr	r2, [pc, #244]	@ (8003ffc <HAL_CAN_MspInit+0x150>)
 8003f06:	f043 0308 	orr.w	r3, r3, #8
 8003f0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f0c:	4b3b      	ldr	r3, [pc, #236]	@ (8003ffc <HAL_CAN_MspInit+0x150>)
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f24:	2303      	movs	r3, #3
 8003f26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003f28:	2309      	movs	r3, #9
 8003f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f2c:	f107 031c 	add.w	r3, r7, #28
 8003f30:	4619      	mov	r1, r3
 8003f32:	4833      	ldr	r0, [pc, #204]	@ (8004000 <HAL_CAN_MspInit+0x154>)
 8003f34:	f002 fb0a 	bl	800654c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2105      	movs	r1, #5
 8003f3c:	2014      	movs	r0, #20
 8003f3e:	f001 fecc 	bl	8005cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003f42:	2014      	movs	r0, #20
 8003f44:	f001 fee5 	bl	8005d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003f48:	e04f      	b.n	8003fea <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8004004 <HAL_CAN_MspInit+0x158>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d14a      	bne.n	8003fea <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	4b28      	ldr	r3, [pc, #160]	@ (8003ffc <HAL_CAN_MspInit+0x150>)
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5c:	4a27      	ldr	r2, [pc, #156]	@ (8003ffc <HAL_CAN_MspInit+0x150>)
 8003f5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f62:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f64:	4b25      	ldr	r3, [pc, #148]	@ (8003ffc <HAL_CAN_MspInit+0x150>)
 8003f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003f70:	4b21      	ldr	r3, [pc, #132]	@ (8003ff8 <HAL_CAN_MspInit+0x14c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3301      	adds	r3, #1
 8003f76:	4a20      	ldr	r2, [pc, #128]	@ (8003ff8 <HAL_CAN_MspInit+0x14c>)
 8003f78:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ff8 <HAL_CAN_MspInit+0x14c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d10d      	bne.n	8003f9e <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	4b1d      	ldr	r3, [pc, #116]	@ (8003ffc <HAL_CAN_MspInit+0x150>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003ffc <HAL_CAN_MspInit+0x150>)
 8003f8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f92:	4b1a      	ldr	r3, [pc, #104]	@ (8003ffc <HAL_CAN_MspInit+0x150>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	4b16      	ldr	r3, [pc, #88]	@ (8003ffc <HAL_CAN_MspInit+0x150>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa6:	4a15      	ldr	r2, [pc, #84]	@ (8003ffc <HAL_CAN_MspInit+0x150>)
 8003fa8:	f043 0302 	orr.w	r3, r3, #2
 8003fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fae:	4b13      	ldr	r3, [pc, #76]	@ (8003ffc <HAL_CAN_MspInit+0x150>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003fba:	2360      	movs	r3, #96	@ 0x60
 8003fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003fca:	2309      	movs	r3, #9
 8003fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fce:	f107 031c 	add.w	r3, r7, #28
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	480c      	ldr	r0, [pc, #48]	@ (8004008 <HAL_CAN_MspInit+0x15c>)
 8003fd6:	f002 fab9 	bl	800654c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8003fda:	2200      	movs	r2, #0
 8003fdc:	2105      	movs	r1, #5
 8003fde:	2040      	movs	r0, #64	@ 0x40
 8003fe0:	f001 fe7b 	bl	8005cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003fe4:	2040      	movs	r0, #64	@ 0x40
 8003fe6:	f001 fe94 	bl	8005d12 <HAL_NVIC_EnableIRQ>
}
 8003fea:	bf00      	nop
 8003fec:	3730      	adds	r7, #48	@ 0x30
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40006400 	.word	0x40006400
 8003ff8:	20000e90 	.word	0x20000e90
 8003ffc:	40023800 	.word	0x40023800
 8004000:	40020c00 	.word	0x40020c00
 8004004:	40006800 	.word	0x40006800
 8004008:	40020400 	.word	0x40020400

0800400c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08a      	sub	sp, #40	@ 0x28
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004014:	f107 0314 	add.w	r3, r7, #20
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	605a      	str	r2, [r3, #4]
 800401e:	609a      	str	r2, [r3, #8]
 8004020:	60da      	str	r2, [r3, #12]
 8004022:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a29      	ldr	r2, [pc, #164]	@ (80040d0 <HAL_I2C_MspInit+0xc4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d14b      	bne.n	80040c6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	4b28      	ldr	r3, [pc, #160]	@ (80040d4 <HAL_I2C_MspInit+0xc8>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004036:	4a27      	ldr	r2, [pc, #156]	@ (80040d4 <HAL_I2C_MspInit+0xc8>)
 8004038:	f043 0304 	orr.w	r3, r3, #4
 800403c:	6313      	str	r3, [r2, #48]	@ 0x30
 800403e:	4b25      	ldr	r3, [pc, #148]	@ (80040d4 <HAL_I2C_MspInit+0xc8>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	4b21      	ldr	r3, [pc, #132]	@ (80040d4 <HAL_I2C_MspInit+0xc8>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004052:	4a20      	ldr	r2, [pc, #128]	@ (80040d4 <HAL_I2C_MspInit+0xc8>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	6313      	str	r3, [r2, #48]	@ 0x30
 800405a:	4b1e      	ldr	r3, [pc, #120]	@ (80040d4 <HAL_I2C_MspInit+0xc8>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004066:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800406a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800406c:	2312      	movs	r3, #18
 800406e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004070:	2300      	movs	r3, #0
 8004072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004074:	2303      	movs	r3, #3
 8004076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004078:	2304      	movs	r3, #4
 800407a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800407c:	f107 0314 	add.w	r3, r7, #20
 8004080:	4619      	mov	r1, r3
 8004082:	4815      	ldr	r0, [pc, #84]	@ (80040d8 <HAL_I2C_MspInit+0xcc>)
 8004084:	f002 fa62 	bl	800654c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004088:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800408c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800408e:	2312      	movs	r3, #18
 8004090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004096:	2303      	movs	r3, #3
 8004098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800409a:	2304      	movs	r3, #4
 800409c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800409e:	f107 0314 	add.w	r3, r7, #20
 80040a2:	4619      	mov	r1, r3
 80040a4:	480d      	ldr	r0, [pc, #52]	@ (80040dc <HAL_I2C_MspInit+0xd0>)
 80040a6:	f002 fa51 	bl	800654c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	4b09      	ldr	r3, [pc, #36]	@ (80040d4 <HAL_I2C_MspInit+0xc8>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b2:	4a08      	ldr	r2, [pc, #32]	@ (80040d4 <HAL_I2C_MspInit+0xc8>)
 80040b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80040ba:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <HAL_I2C_MspInit+0xc8>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80040c6:	bf00      	nop
 80040c8:	3728      	adds	r7, #40	@ 0x28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40005c00 	.word	0x40005c00
 80040d4:	40023800 	.word	0x40023800
 80040d8:	40020800 	.word	0x40020800
 80040dc:	40020000 	.word	0x40020000

080040e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08a      	sub	sp, #40	@ 0x28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e8:	f107 0314 	add.w	r3, r7, #20
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	605a      	str	r2, [r3, #4]
 80040f2:	609a      	str	r2, [r3, #8]
 80040f4:	60da      	str	r2, [r3, #12]
 80040f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a28      	ldr	r2, [pc, #160]	@ (80041a0 <HAL_SPI_MspInit+0xc0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d149      	bne.n	8004196 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	4b27      	ldr	r3, [pc, #156]	@ (80041a4 <HAL_SPI_MspInit+0xc4>)
 8004108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410a:	4a26      	ldr	r2, [pc, #152]	@ (80041a4 <HAL_SPI_MspInit+0xc4>)
 800410c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004110:	6453      	str	r3, [r2, #68]	@ 0x44
 8004112:	4b24      	ldr	r3, [pc, #144]	@ (80041a4 <HAL_SPI_MspInit+0xc4>)
 8004114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004116:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	4b20      	ldr	r3, [pc, #128]	@ (80041a4 <HAL_SPI_MspInit+0xc4>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004126:	4a1f      	ldr	r2, [pc, #124]	@ (80041a4 <HAL_SPI_MspInit+0xc4>)
 8004128:	f043 0302 	orr.w	r3, r3, #2
 800412c:	6313      	str	r3, [r2, #48]	@ 0x30
 800412e:	4b1d      	ldr	r3, [pc, #116]	@ (80041a4 <HAL_SPI_MspInit+0xc4>)
 8004130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	4b19      	ldr	r3, [pc, #100]	@ (80041a4 <HAL_SPI_MspInit+0xc4>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	4a18      	ldr	r2, [pc, #96]	@ (80041a4 <HAL_SPI_MspInit+0xc4>)
 8004144:	f043 0301 	orr.w	r3, r3, #1
 8004148:	6313      	str	r3, [r2, #48]	@ 0x30
 800414a:	4b16      	ldr	r3, [pc, #88]	@ (80041a4 <HAL_SPI_MspInit+0xc4>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	60bb      	str	r3, [r7, #8]
 8004154:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8004156:	2318      	movs	r3, #24
 8004158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415a:	2302      	movs	r3, #2
 800415c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004162:	2303      	movs	r3, #3
 8004164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004166:	2305      	movs	r3, #5
 8004168:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800416a:	f107 0314 	add.w	r3, r7, #20
 800416e:	4619      	mov	r1, r3
 8004170:	480d      	ldr	r0, [pc, #52]	@ (80041a8 <HAL_SPI_MspInit+0xc8>)
 8004172:	f002 f9eb 	bl	800654c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004176:	2380      	movs	r3, #128	@ 0x80
 8004178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417a:	2302      	movs	r3, #2
 800417c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004182:	2303      	movs	r3, #3
 8004184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004186:	2305      	movs	r3, #5
 8004188:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800418a:	f107 0314 	add.w	r3, r7, #20
 800418e:	4619      	mov	r1, r3
 8004190:	4806      	ldr	r0, [pc, #24]	@ (80041ac <HAL_SPI_MspInit+0xcc>)
 8004192:	f002 f9db 	bl	800654c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004196:	bf00      	nop
 8004198:	3728      	adds	r7, #40	@ 0x28
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40013000 	.word	0x40013000
 80041a4:	40023800 	.word	0x40023800
 80041a8:	40020400 	.word	0x40020400
 80041ac:	40020000 	.word	0x40020000

080041b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a83      	ldr	r2, [pc, #524]	@ (80043cc <HAL_TIM_PWM_MspInit+0x21c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d13e      	bne.n	8004240 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	4b82      	ldr	r3, [pc, #520]	@ (80043d0 <HAL_TIM_PWM_MspInit+0x220>)
 80041c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ca:	4a81      	ldr	r2, [pc, #516]	@ (80043d0 <HAL_TIM_PWM_MspInit+0x220>)
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80041d2:	4b7f      	ldr	r3, [pc, #508]	@ (80043d0 <HAL_TIM_PWM_MspInit+0x220>)
 80041d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream3;
 80041de:	4b7d      	ldr	r3, [pc, #500]	@ (80043d4 <HAL_TIM_PWM_MspInit+0x224>)
 80041e0:	4a7d      	ldr	r2, [pc, #500]	@ (80043d8 <HAL_TIM_PWM_MspInit+0x228>)
 80041e2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80041e4:	4b7b      	ldr	r3, [pc, #492]	@ (80043d4 <HAL_TIM_PWM_MspInit+0x224>)
 80041e6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80041ea:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041ec:	4b79      	ldr	r3, [pc, #484]	@ (80043d4 <HAL_TIM_PWM_MspInit+0x224>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80041f2:	4b78      	ldr	r3, [pc, #480]	@ (80043d4 <HAL_TIM_PWM_MspInit+0x224>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80041f8:	4b76      	ldr	r3, [pc, #472]	@ (80043d4 <HAL_TIM_PWM_MspInit+0x224>)
 80041fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041fe:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004200:	4b74      	ldr	r3, [pc, #464]	@ (80043d4 <HAL_TIM_PWM_MspInit+0x224>)
 8004202:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004206:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004208:	4b72      	ldr	r3, [pc, #456]	@ (80043d4 <HAL_TIM_PWM_MspInit+0x224>)
 800420a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800420e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8004210:	4b70      	ldr	r3, [pc, #448]	@ (80043d4 <HAL_TIM_PWM_MspInit+0x224>)
 8004212:	2200      	movs	r2, #0
 8004214:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004216:	4b6f      	ldr	r3, [pc, #444]	@ (80043d4 <HAL_TIM_PWM_MspInit+0x224>)
 8004218:	2200      	movs	r2, #0
 800421a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800421c:	4b6d      	ldr	r3, [pc, #436]	@ (80043d4 <HAL_TIM_PWM_MspInit+0x224>)
 800421e:	2200      	movs	r2, #0
 8004220:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8004222:	486c      	ldr	r0, [pc, #432]	@ (80043d4 <HAL_TIM_PWM_MspInit+0x224>)
 8004224:	f001 fd90 	bl	8005d48 <HAL_DMA_Init>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 800422e:	f7fe fef5 	bl	800301c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a67      	ldr	r2, [pc, #412]	@ (80043d4 <HAL_TIM_PWM_MspInit+0x224>)
 8004236:	625a      	str	r2, [r3, #36]	@ 0x24
 8004238:	4a66      	ldr	r2, [pc, #408]	@ (80043d4 <HAL_TIM_PWM_MspInit+0x224>)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800423e:	e0c1      	b.n	80043c4 <HAL_TIM_PWM_MspInit+0x214>
  else if(htim_pwm->Instance==TIM5)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a65      	ldr	r2, [pc, #404]	@ (80043dc <HAL_TIM_PWM_MspInit+0x22c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d16e      	bne.n	8004328 <HAL_TIM_PWM_MspInit+0x178>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800424a:	2300      	movs	r3, #0
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	4b60      	ldr	r3, [pc, #384]	@ (80043d0 <HAL_TIM_PWM_MspInit+0x220>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004252:	4a5f      	ldr	r2, [pc, #380]	@ (80043d0 <HAL_TIM_PWM_MspInit+0x220>)
 8004254:	f043 0308 	orr.w	r3, r3, #8
 8004258:	6413      	str	r3, [r2, #64]	@ 0x40
 800425a:	4b5d      	ldr	r3, [pc, #372]	@ (80043d0 <HAL_TIM_PWM_MspInit+0x220>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	613b      	str	r3, [r7, #16]
 8004264:	693b      	ldr	r3, [r7, #16]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8004266:	4b5e      	ldr	r3, [pc, #376]	@ (80043e0 <HAL_TIM_PWM_MspInit+0x230>)
 8004268:	4a5e      	ldr	r2, [pc, #376]	@ (80043e4 <HAL_TIM_PWM_MspInit+0x234>)
 800426a:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 800426c:	4b5c      	ldr	r3, [pc, #368]	@ (80043e0 <HAL_TIM_PWM_MspInit+0x230>)
 800426e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8004272:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004274:	4b5a      	ldr	r3, [pc, #360]	@ (80043e0 <HAL_TIM_PWM_MspInit+0x230>)
 8004276:	2200      	movs	r2, #0
 8004278:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800427a:	4b59      	ldr	r3, [pc, #356]	@ (80043e0 <HAL_TIM_PWM_MspInit+0x230>)
 800427c:	2200      	movs	r2, #0
 800427e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004280:	4b57      	ldr	r3, [pc, #348]	@ (80043e0 <HAL_TIM_PWM_MspInit+0x230>)
 8004282:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004286:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004288:	4b55      	ldr	r3, [pc, #340]	@ (80043e0 <HAL_TIM_PWM_MspInit+0x230>)
 800428a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800428e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004290:	4b53      	ldr	r3, [pc, #332]	@ (80043e0 <HAL_TIM_PWM_MspInit+0x230>)
 8004292:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004296:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8004298:	4b51      	ldr	r3, [pc, #324]	@ (80043e0 <HAL_TIM_PWM_MspInit+0x230>)
 800429a:	2200      	movs	r2, #0
 800429c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800429e:	4b50      	ldr	r3, [pc, #320]	@ (80043e0 <HAL_TIM_PWM_MspInit+0x230>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042a4:	4b4e      	ldr	r3, [pc, #312]	@ (80043e0 <HAL_TIM_PWM_MspInit+0x230>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 80042aa:	484d      	ldr	r0, [pc, #308]	@ (80043e0 <HAL_TIM_PWM_MspInit+0x230>)
 80042ac:	f001 fd4c 	bl	8005d48 <HAL_DMA_Init>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <HAL_TIM_PWM_MspInit+0x10a>
      Error_Handler();
 80042b6:	f7fe feb1 	bl	800301c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a48      	ldr	r2, [pc, #288]	@ (80043e0 <HAL_TIM_PWM_MspInit+0x230>)
 80042be:	625a      	str	r2, [r3, #36]	@ 0x24
 80042c0:	4a47      	ldr	r2, [pc, #284]	@ (80043e0 <HAL_TIM_PWM_MspInit+0x230>)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 80042c6:	4b48      	ldr	r3, [pc, #288]	@ (80043e8 <HAL_TIM_PWM_MspInit+0x238>)
 80042c8:	4a48      	ldr	r2, [pc, #288]	@ (80043ec <HAL_TIM_PWM_MspInit+0x23c>)
 80042ca:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 80042cc:	4b46      	ldr	r3, [pc, #280]	@ (80043e8 <HAL_TIM_PWM_MspInit+0x238>)
 80042ce:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80042d2:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042d4:	4b44      	ldr	r3, [pc, #272]	@ (80043e8 <HAL_TIM_PWM_MspInit+0x238>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80042da:	4b43      	ldr	r3, [pc, #268]	@ (80043e8 <HAL_TIM_PWM_MspInit+0x238>)
 80042dc:	2200      	movs	r2, #0
 80042de:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80042e0:	4b41      	ldr	r3, [pc, #260]	@ (80043e8 <HAL_TIM_PWM_MspInit+0x238>)
 80042e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042e6:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80042e8:	4b3f      	ldr	r3, [pc, #252]	@ (80043e8 <HAL_TIM_PWM_MspInit+0x238>)
 80042ea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80042ee:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80042f0:	4b3d      	ldr	r3, [pc, #244]	@ (80043e8 <HAL_TIM_PWM_MspInit+0x238>)
 80042f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80042f6:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 80042f8:	4b3b      	ldr	r3, [pc, #236]	@ (80043e8 <HAL_TIM_PWM_MspInit+0x238>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80042fe:	4b3a      	ldr	r3, [pc, #232]	@ (80043e8 <HAL_TIM_PWM_MspInit+0x238>)
 8004300:	2200      	movs	r2, #0
 8004302:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004304:	4b38      	ldr	r3, [pc, #224]	@ (80043e8 <HAL_TIM_PWM_MspInit+0x238>)
 8004306:	2200      	movs	r2, #0
 8004308:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 800430a:	4837      	ldr	r0, [pc, #220]	@ (80043e8 <HAL_TIM_PWM_MspInit+0x238>)
 800430c:	f001 fd1c 	bl	8005d48 <HAL_DMA_Init>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_TIM_PWM_MspInit+0x16a>
      Error_Handler();
 8004316:	f7fe fe81 	bl	800301c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a32      	ldr	r2, [pc, #200]	@ (80043e8 <HAL_TIM_PWM_MspInit+0x238>)
 800431e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004320:	4a31      	ldr	r2, [pc, #196]	@ (80043e8 <HAL_TIM_PWM_MspInit+0x238>)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004326:	e04d      	b.n	80043c4 <HAL_TIM_PWM_MspInit+0x214>
  else if(htim_pwm->Instance==TIM8)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a30      	ldr	r2, [pc, #192]	@ (80043f0 <HAL_TIM_PWM_MspInit+0x240>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d148      	bne.n	80043c4 <HAL_TIM_PWM_MspInit+0x214>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	4b26      	ldr	r3, [pc, #152]	@ (80043d0 <HAL_TIM_PWM_MspInit+0x220>)
 8004338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433a:	4a25      	ldr	r2, [pc, #148]	@ (80043d0 <HAL_TIM_PWM_MspInit+0x220>)
 800433c:	f043 0302 	orr.w	r3, r3, #2
 8004340:	6453      	str	r3, [r2, #68]	@ 0x44
 8004342:	4b23      	ldr	r3, [pc, #140]	@ (80043d0 <HAL_TIM_PWM_MspInit+0x220>)
 8004344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch1_ch2_ch3.Instance = DMA2_Stream2;
 800434e:	4b29      	ldr	r3, [pc, #164]	@ (80043f4 <HAL_TIM_PWM_MspInit+0x244>)
 8004350:	4a29      	ldr	r2, [pc, #164]	@ (80043f8 <HAL_TIM_PWM_MspInit+0x248>)
 8004352:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1_ch2_ch3.Init.Channel = DMA_CHANNEL_0;
 8004354:	4b27      	ldr	r3, [pc, #156]	@ (80043f4 <HAL_TIM_PWM_MspInit+0x244>)
 8004356:	2200      	movs	r2, #0
 8004358:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1_ch2_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800435a:	4b26      	ldr	r3, [pc, #152]	@ (80043f4 <HAL_TIM_PWM_MspInit+0x244>)
 800435c:	2200      	movs	r2, #0
 800435e:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1_ch2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004360:	4b24      	ldr	r3, [pc, #144]	@ (80043f4 <HAL_TIM_PWM_MspInit+0x244>)
 8004362:	2200      	movs	r2, #0
 8004364:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1_ch2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8004366:	4b23      	ldr	r3, [pc, #140]	@ (80043f4 <HAL_TIM_PWM_MspInit+0x244>)
 8004368:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800436c:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1_ch2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800436e:	4b21      	ldr	r3, [pc, #132]	@ (80043f4 <HAL_TIM_PWM_MspInit+0x244>)
 8004370:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004374:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1_ch2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004376:	4b1f      	ldr	r3, [pc, #124]	@ (80043f4 <HAL_TIM_PWM_MspInit+0x244>)
 8004378:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800437c:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1_ch2_ch3.Init.Mode = DMA_NORMAL;
 800437e:	4b1d      	ldr	r3, [pc, #116]	@ (80043f4 <HAL_TIM_PWM_MspInit+0x244>)
 8004380:	2200      	movs	r2, #0
 8004382:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1_ch2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8004384:	4b1b      	ldr	r3, [pc, #108]	@ (80043f4 <HAL_TIM_PWM_MspInit+0x244>)
 8004386:	2200      	movs	r2, #0
 8004388:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1_ch2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800438a:	4b1a      	ldr	r3, [pc, #104]	@ (80043f4 <HAL_TIM_PWM_MspInit+0x244>)
 800438c:	2200      	movs	r2, #0
 800438e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1_ch2_ch3) != HAL_OK)
 8004390:	4818      	ldr	r0, [pc, #96]	@ (80043f4 <HAL_TIM_PWM_MspInit+0x244>)
 8004392:	f001 fcd9 	bl	8005d48 <HAL_DMA_Init>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_TIM_PWM_MspInit+0x1f0>
      Error_Handler();
 800439c:	f7fe fe3e 	bl	800301c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1_ch2_ch3);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a14      	ldr	r2, [pc, #80]	@ (80043f4 <HAL_TIM_PWM_MspInit+0x244>)
 80043a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80043a6:	4a13      	ldr	r2, [pc, #76]	@ (80043f4 <HAL_TIM_PWM_MspInit+0x244>)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch1_ch2_ch3);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a11      	ldr	r2, [pc, #68]	@ (80043f4 <HAL_TIM_PWM_MspInit+0x244>)
 80043b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80043b2:	4a10      	ldr	r2, [pc, #64]	@ (80043f4 <HAL_TIM_PWM_MspInit+0x244>)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch1_ch2_ch3);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a0e      	ldr	r2, [pc, #56]	@ (80043f4 <HAL_TIM_PWM_MspInit+0x244>)
 80043bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80043be:	4a0d      	ldr	r2, [pc, #52]	@ (80043f4 <HAL_TIM_PWM_MspInit+0x244>)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80043c4:	bf00      	nop
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40010000 	.word	0x40010000
 80043d0:	40023800 	.word	0x40023800
 80043d4:	200008fc 	.word	0x200008fc
 80043d8:	40026458 	.word	0x40026458
 80043dc:	40000c00 	.word	0x40000c00
 80043e0:	200009bc 	.word	0x200009bc
 80043e4:	40026040 	.word	0x40026040
 80043e8:	20000a1c 	.word	0x20000a1c
 80043ec:	40026070 	.word	0x40026070
 80043f0:	40010400 	.word	0x40010400
 80043f4:	20000a7c 	.word	0x20000a7c
 80043f8:	40026440 	.word	0x40026440

080043fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a2c      	ldr	r2, [pc, #176]	@ (80044bc <HAL_TIM_Base_MspInit+0xc0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d13e      	bne.n	800448c <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	4b2b      	ldr	r3, [pc, #172]	@ (80044c0 <HAL_TIM_Base_MspInit+0xc4>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004416:	4a2a      	ldr	r2, [pc, #168]	@ (80044c0 <HAL_TIM_Base_MspInit+0xc4>)
 8004418:	f043 0304 	orr.w	r3, r3, #4
 800441c:	6413      	str	r3, [r2, #64]	@ 0x40
 800441e:	4b28      	ldr	r3, [pc, #160]	@ (80044c0 <HAL_TIM_Base_MspInit+0xc4>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 800442a:	4b26      	ldr	r3, [pc, #152]	@ (80044c4 <HAL_TIM_Base_MspInit+0xc8>)
 800442c:	4a26      	ldr	r2, [pc, #152]	@ (80044c8 <HAL_TIM_Base_MspInit+0xcc>)
 800442e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8004430:	4b24      	ldr	r3, [pc, #144]	@ (80044c4 <HAL_TIM_Base_MspInit+0xc8>)
 8004432:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004436:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004438:	4b22      	ldr	r3, [pc, #136]	@ (80044c4 <HAL_TIM_Base_MspInit+0xc8>)
 800443a:	2200      	movs	r2, #0
 800443c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800443e:	4b21      	ldr	r3, [pc, #132]	@ (80044c4 <HAL_TIM_Base_MspInit+0xc8>)
 8004440:	2200      	movs	r2, #0
 8004442:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8004444:	4b1f      	ldr	r3, [pc, #124]	@ (80044c4 <HAL_TIM_Base_MspInit+0xc8>)
 8004446:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800444a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800444c:	4b1d      	ldr	r3, [pc, #116]	@ (80044c4 <HAL_TIM_Base_MspInit+0xc8>)
 800444e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004452:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004454:	4b1b      	ldr	r3, [pc, #108]	@ (80044c4 <HAL_TIM_Base_MspInit+0xc8>)
 8004456:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800445a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 800445c:	4b19      	ldr	r3, [pc, #100]	@ (80044c4 <HAL_TIM_Base_MspInit+0xc8>)
 800445e:	2200      	movs	r2, #0
 8004460:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8004462:	4b18      	ldr	r3, [pc, #96]	@ (80044c4 <HAL_TIM_Base_MspInit+0xc8>)
 8004464:	2200      	movs	r2, #0
 8004466:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004468:	4b16      	ldr	r3, [pc, #88]	@ (80044c4 <HAL_TIM_Base_MspInit+0xc8>)
 800446a:	2200      	movs	r2, #0
 800446c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800446e:	4815      	ldr	r0, [pc, #84]	@ (80044c4 <HAL_TIM_Base_MspInit+0xc8>)
 8004470:	f001 fc6a 	bl	8005d48 <HAL_DMA_Init>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800447a:	f7fe fdcf 	bl	800301c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a10      	ldr	r2, [pc, #64]	@ (80044c4 <HAL_TIM_Base_MspInit+0xc8>)
 8004482:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004484:	4a0f      	ldr	r2, [pc, #60]	@ (80044c4 <HAL_TIM_Base_MspInit+0xc8>)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800448a:	e012      	b.n	80044b2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0e      	ldr	r2, [pc, #56]	@ (80044cc <HAL_TIM_Base_MspInit+0xd0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d10d      	bne.n	80044b2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004496:	2300      	movs	r3, #0
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	4b09      	ldr	r3, [pc, #36]	@ (80044c0 <HAL_TIM_Base_MspInit+0xc4>)
 800449c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449e:	4a08      	ldr	r2, [pc, #32]	@ (80044c0 <HAL_TIM_Base_MspInit+0xc4>)
 80044a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80044a6:	4b06      	ldr	r3, [pc, #24]	@ (80044c0 <HAL_TIM_Base_MspInit+0xc4>)
 80044a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	68bb      	ldr	r3, [r7, #8]
}
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40000800 	.word	0x40000800
 80044c0:	40023800 	.word	0x40023800
 80044c4:	2000095c 	.word	0x2000095c
 80044c8:	400260b8 	.word	0x400260b8
 80044cc:	40014400 	.word	0x40014400

080044d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08e      	sub	sp, #56	@ 0x38
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	605a      	str	r2, [r3, #4]
 80044e2:	609a      	str	r2, [r3, #8]
 80044e4:	60da      	str	r2, [r3, #12]
 80044e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a6a      	ldr	r2, [pc, #424]	@ (8004698 <HAL_TIM_MspPostInit+0x1c8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d11f      	bne.n	8004532 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80044f2:	2300      	movs	r3, #0
 80044f4:	623b      	str	r3, [r7, #32]
 80044f6:	4b69      	ldr	r3, [pc, #420]	@ (800469c <HAL_TIM_MspPostInit+0x1cc>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fa:	4a68      	ldr	r2, [pc, #416]	@ (800469c <HAL_TIM_MspPostInit+0x1cc>)
 80044fc:	f043 0310 	orr.w	r3, r3, #16
 8004500:	6313      	str	r3, [r2, #48]	@ 0x30
 8004502:	4b66      	ldr	r3, [pc, #408]	@ (800469c <HAL_TIM_MspPostInit+0x1cc>)
 8004504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	623b      	str	r3, [r7, #32]
 800450c:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 800450e:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8004512:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004514:	2302      	movs	r3, #2
 8004516:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004518:	2300      	movs	r3, #0
 800451a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800451c:	2300      	movs	r3, #0
 800451e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004520:	2301      	movs	r3, #1
 8004522:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004528:	4619      	mov	r1, r3
 800452a:	485d      	ldr	r0, [pc, #372]	@ (80046a0 <HAL_TIM_MspPostInit+0x1d0>)
 800452c:	f002 f80e 	bl	800654c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8004530:	e0ae      	b.n	8004690 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a5b      	ldr	r2, [pc, #364]	@ (80046a4 <HAL_TIM_MspPostInit+0x1d4>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d11f      	bne.n	800457c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800453c:	2300      	movs	r3, #0
 800453e:	61fb      	str	r3, [r7, #28]
 8004540:	4b56      	ldr	r3, [pc, #344]	@ (800469c <HAL_TIM_MspPostInit+0x1cc>)
 8004542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004544:	4a55      	ldr	r2, [pc, #340]	@ (800469c <HAL_TIM_MspPostInit+0x1cc>)
 8004546:	f043 0308 	orr.w	r3, r3, #8
 800454a:	6313      	str	r3, [r2, #48]	@ 0x30
 800454c:	4b53      	ldr	r3, [pc, #332]	@ (800469c <HAL_TIM_MspPostInit+0x1cc>)
 800454e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004558:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800455c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455e:	2302      	movs	r3, #2
 8004560:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004562:	2300      	movs	r3, #0
 8004564:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004566:	2300      	movs	r3, #0
 8004568:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800456a:	2302      	movs	r3, #2
 800456c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800456e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004572:	4619      	mov	r1, r3
 8004574:	484c      	ldr	r0, [pc, #304]	@ (80046a8 <HAL_TIM_MspPostInit+0x1d8>)
 8004576:	f001 ffe9 	bl	800654c <HAL_GPIO_Init>
}
 800457a:	e089      	b.n	8004690 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a4a      	ldr	r2, [pc, #296]	@ (80046ac <HAL_TIM_MspPostInit+0x1dc>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d11f      	bne.n	80045c6 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004586:	2300      	movs	r3, #0
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	4b44      	ldr	r3, [pc, #272]	@ (800469c <HAL_TIM_MspPostInit+0x1cc>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458e:	4a43      	ldr	r2, [pc, #268]	@ (800469c <HAL_TIM_MspPostInit+0x1cc>)
 8004590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004594:	6313      	str	r3, [r2, #48]	@ 0x30
 8004596:	4b41      	ldr	r3, [pc, #260]	@ (800469c <HAL_TIM_MspPostInit+0x1cc>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 80045a2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80045a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a8:	2302      	movs	r3, #2
 80045aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b0:	2300      	movs	r3, #0
 80045b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80045b4:	2302      	movs	r3, #2
 80045b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80045b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045bc:	4619      	mov	r1, r3
 80045be:	483c      	ldr	r0, [pc, #240]	@ (80046b0 <HAL_TIM_MspPostInit+0x1e0>)
 80045c0:	f001 ffc4 	bl	800654c <HAL_GPIO_Init>
}
 80045c4:	e064      	b.n	8004690 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a3a      	ldr	r2, [pc, #232]	@ (80046b4 <HAL_TIM_MspPostInit+0x1e4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d13c      	bne.n	800464a <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	4b31      	ldr	r3, [pc, #196]	@ (800469c <HAL_TIM_MspPostInit+0x1cc>)
 80045d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d8:	4a30      	ldr	r2, [pc, #192]	@ (800469c <HAL_TIM_MspPostInit+0x1cc>)
 80045da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045de:	6313      	str	r3, [r2, #48]	@ 0x30
 80045e0:	4b2e      	ldr	r3, [pc, #184]	@ (800469c <HAL_TIM_MspPostInit+0x1cc>)
 80045e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045ec:	2300      	movs	r3, #0
 80045ee:	613b      	str	r3, [r7, #16]
 80045f0:	4b2a      	ldr	r3, [pc, #168]	@ (800469c <HAL_TIM_MspPostInit+0x1cc>)
 80045f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f4:	4a29      	ldr	r2, [pc, #164]	@ (800469c <HAL_TIM_MspPostInit+0x1cc>)
 80045f6:	f043 0304 	orr.w	r3, r3, #4
 80045fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80045fc:	4b27      	ldr	r3, [pc, #156]	@ (800469c <HAL_TIM_MspPostInit+0x1cc>)
 80045fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004608:	23c0      	movs	r3, #192	@ 0xc0
 800460a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800460c:	2302      	movs	r3, #2
 800460e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004610:	2300      	movs	r3, #0
 8004612:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004614:	2300      	movs	r3, #0
 8004616:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004618:	2303      	movs	r3, #3
 800461a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800461c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004620:	4619      	mov	r1, r3
 8004622:	4825      	ldr	r0, [pc, #148]	@ (80046b8 <HAL_TIM_MspPostInit+0x1e8>)
 8004624:	f001 ff92 	bl	800654c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004628:	2340      	movs	r3, #64	@ 0x40
 800462a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800462c:	2302      	movs	r3, #2
 800462e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004630:	2300      	movs	r3, #0
 8004632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004634:	2300      	movs	r3, #0
 8004636:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004638:	2303      	movs	r3, #3
 800463a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800463c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004640:	4619      	mov	r1, r3
 8004642:	481e      	ldr	r0, [pc, #120]	@ (80046bc <HAL_TIM_MspPostInit+0x1ec>)
 8004644:	f001 ff82 	bl	800654c <HAL_GPIO_Init>
}
 8004648:	e022      	b.n	8004690 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a1c      	ldr	r2, [pc, #112]	@ (80046c0 <HAL_TIM_MspPostInit+0x1f0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d11d      	bne.n	8004690 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	4b10      	ldr	r3, [pc, #64]	@ (800469c <HAL_TIM_MspPostInit+0x1cc>)
 800465a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465c:	4a0f      	ldr	r2, [pc, #60]	@ (800469c <HAL_TIM_MspPostInit+0x1cc>)
 800465e:	f043 0320 	orr.w	r3, r3, #32
 8004662:	6313      	str	r3, [r2, #48]	@ 0x30
 8004664:	4b0d      	ldr	r3, [pc, #52]	@ (800469c <HAL_TIM_MspPostInit+0x1cc>)
 8004666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004670:	2340      	movs	r3, #64	@ 0x40
 8004672:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004674:	2302      	movs	r3, #2
 8004676:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004678:	2301      	movs	r3, #1
 800467a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800467c:	2302      	movs	r3, #2
 800467e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004680:	2303      	movs	r3, #3
 8004682:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004688:	4619      	mov	r1, r3
 800468a:	480e      	ldr	r0, [pc, #56]	@ (80046c4 <HAL_TIM_MspPostInit+0x1f4>)
 800468c:	f001 ff5e 	bl	800654c <HAL_GPIO_Init>
}
 8004690:	bf00      	nop
 8004692:	3738      	adds	r7, #56	@ 0x38
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40010000 	.word	0x40010000
 800469c:	40023800 	.word	0x40023800
 80046a0:	40021000 	.word	0x40021000
 80046a4:	40000800 	.word	0x40000800
 80046a8:	40020c00 	.word	0x40020c00
 80046ac:	40000c00 	.word	0x40000c00
 80046b0:	40021c00 	.word	0x40021c00
 80046b4:	40010400 	.word	0x40010400
 80046b8:	40022000 	.word	0x40022000
 80046bc:	40020800 	.word	0x40020800
 80046c0:	40014400 	.word	0x40014400
 80046c4:	40021400 	.word	0x40021400

080046c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08e      	sub	sp, #56	@ 0x38
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	605a      	str	r2, [r3, #4]
 80046da:	609a      	str	r2, [r3, #8]
 80046dc:	60da      	str	r2, [r3, #12]
 80046de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a90      	ldr	r2, [pc, #576]	@ (8004928 <HAL_UART_MspInit+0x260>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	f040 80b2 	bne.w	8004850 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046ec:	2300      	movs	r3, #0
 80046ee:	623b      	str	r3, [r7, #32]
 80046f0:	4b8e      	ldr	r3, [pc, #568]	@ (800492c <HAL_UART_MspInit+0x264>)
 80046f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f4:	4a8d      	ldr	r2, [pc, #564]	@ (800492c <HAL_UART_MspInit+0x264>)
 80046f6:	f043 0310 	orr.w	r3, r3, #16
 80046fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80046fc:	4b8b      	ldr	r3, [pc, #556]	@ (800492c <HAL_UART_MspInit+0x264>)
 80046fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	623b      	str	r3, [r7, #32]
 8004706:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004708:	2300      	movs	r3, #0
 800470a:	61fb      	str	r3, [r7, #28]
 800470c:	4b87      	ldr	r3, [pc, #540]	@ (800492c <HAL_UART_MspInit+0x264>)
 800470e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004710:	4a86      	ldr	r2, [pc, #536]	@ (800492c <HAL_UART_MspInit+0x264>)
 8004712:	f043 0302 	orr.w	r3, r3, #2
 8004716:	6313      	str	r3, [r2, #48]	@ 0x30
 8004718:	4b84      	ldr	r3, [pc, #528]	@ (800492c <HAL_UART_MspInit+0x264>)
 800471a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004724:	2300      	movs	r3, #0
 8004726:	61bb      	str	r3, [r7, #24]
 8004728:	4b80      	ldr	r3, [pc, #512]	@ (800492c <HAL_UART_MspInit+0x264>)
 800472a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472c:	4a7f      	ldr	r2, [pc, #508]	@ (800492c <HAL_UART_MspInit+0x264>)
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	6313      	str	r3, [r2, #48]	@ 0x30
 8004734:	4b7d      	ldr	r3, [pc, #500]	@ (800492c <HAL_UART_MspInit+0x264>)
 8004736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	61bb      	str	r3, [r7, #24]
 800473e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004740:	2380      	movs	r3, #128	@ 0x80
 8004742:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004744:	2302      	movs	r3, #2
 8004746:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004748:	2300      	movs	r3, #0
 800474a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800474c:	2303      	movs	r3, #3
 800474e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004750:	2307      	movs	r3, #7
 8004752:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004754:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004758:	4619      	mov	r1, r3
 800475a:	4875      	ldr	r0, [pc, #468]	@ (8004930 <HAL_UART_MspInit+0x268>)
 800475c:	f001 fef6 	bl	800654c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004760:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004764:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004766:	2302      	movs	r3, #2
 8004768:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476a:	2300      	movs	r3, #0
 800476c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800476e:	2303      	movs	r3, #3
 8004770:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004772:	2307      	movs	r3, #7
 8004774:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004776:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800477a:	4619      	mov	r1, r3
 800477c:	486d      	ldr	r0, [pc, #436]	@ (8004934 <HAL_UART_MspInit+0x26c>)
 800477e:	f001 fee5 	bl	800654c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004782:	4b6d      	ldr	r3, [pc, #436]	@ (8004938 <HAL_UART_MspInit+0x270>)
 8004784:	4a6d      	ldr	r2, [pc, #436]	@ (800493c <HAL_UART_MspInit+0x274>)
 8004786:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004788:	4b6b      	ldr	r3, [pc, #428]	@ (8004938 <HAL_UART_MspInit+0x270>)
 800478a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800478e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004790:	4b69      	ldr	r3, [pc, #420]	@ (8004938 <HAL_UART_MspInit+0x270>)
 8004792:	2240      	movs	r2, #64	@ 0x40
 8004794:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004796:	4b68      	ldr	r3, [pc, #416]	@ (8004938 <HAL_UART_MspInit+0x270>)
 8004798:	2200      	movs	r2, #0
 800479a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800479c:	4b66      	ldr	r3, [pc, #408]	@ (8004938 <HAL_UART_MspInit+0x270>)
 800479e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047a2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047a4:	4b64      	ldr	r3, [pc, #400]	@ (8004938 <HAL_UART_MspInit+0x270>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047aa:	4b63      	ldr	r3, [pc, #396]	@ (8004938 <HAL_UART_MspInit+0x270>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80047b0:	4b61      	ldr	r3, [pc, #388]	@ (8004938 <HAL_UART_MspInit+0x270>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80047b6:	4b60      	ldr	r3, [pc, #384]	@ (8004938 <HAL_UART_MspInit+0x270>)
 80047b8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80047bc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047be:	4b5e      	ldr	r3, [pc, #376]	@ (8004938 <HAL_UART_MspInit+0x270>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80047c4:	485c      	ldr	r0, [pc, #368]	@ (8004938 <HAL_UART_MspInit+0x270>)
 80047c6:	f001 fabf 	bl	8005d48 <HAL_DMA_Init>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80047d0:	f7fe fc24 	bl	800301c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a58      	ldr	r2, [pc, #352]	@ (8004938 <HAL_UART_MspInit+0x270>)
 80047d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80047da:	4a57      	ldr	r2, [pc, #348]	@ (8004938 <HAL_UART_MspInit+0x270>)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80047e0:	4b57      	ldr	r3, [pc, #348]	@ (8004940 <HAL_UART_MspInit+0x278>)
 80047e2:	4a58      	ldr	r2, [pc, #352]	@ (8004944 <HAL_UART_MspInit+0x27c>)
 80047e4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80047e6:	4b56      	ldr	r3, [pc, #344]	@ (8004940 <HAL_UART_MspInit+0x278>)
 80047e8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80047ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047ee:	4b54      	ldr	r3, [pc, #336]	@ (8004940 <HAL_UART_MspInit+0x278>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047f4:	4b52      	ldr	r3, [pc, #328]	@ (8004940 <HAL_UART_MspInit+0x278>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047fa:	4b51      	ldr	r3, [pc, #324]	@ (8004940 <HAL_UART_MspInit+0x278>)
 80047fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004800:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004802:	4b4f      	ldr	r3, [pc, #316]	@ (8004940 <HAL_UART_MspInit+0x278>)
 8004804:	2200      	movs	r2, #0
 8004806:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004808:	4b4d      	ldr	r3, [pc, #308]	@ (8004940 <HAL_UART_MspInit+0x278>)
 800480a:	2200      	movs	r2, #0
 800480c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800480e:	4b4c      	ldr	r3, [pc, #304]	@ (8004940 <HAL_UART_MspInit+0x278>)
 8004810:	2200      	movs	r2, #0
 8004812:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004814:	4b4a      	ldr	r3, [pc, #296]	@ (8004940 <HAL_UART_MspInit+0x278>)
 8004816:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800481a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800481c:	4b48      	ldr	r3, [pc, #288]	@ (8004940 <HAL_UART_MspInit+0x278>)
 800481e:	2200      	movs	r2, #0
 8004820:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004822:	4847      	ldr	r0, [pc, #284]	@ (8004940 <HAL_UART_MspInit+0x278>)
 8004824:	f001 fa90 	bl	8005d48 <HAL_DMA_Init>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 800482e:	f7fe fbf5 	bl	800301c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a42      	ldr	r2, [pc, #264]	@ (8004940 <HAL_UART_MspInit+0x278>)
 8004836:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004838:	4a41      	ldr	r2, [pc, #260]	@ (8004940 <HAL_UART_MspInit+0x278>)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800483e:	2200      	movs	r2, #0
 8004840:	2105      	movs	r1, #5
 8004842:	2025      	movs	r0, #37	@ 0x25
 8004844:	f001 fa49 	bl	8005cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004848:	2025      	movs	r0, #37	@ 0x25
 800484a:	f001 fa62 	bl	8005d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800484e:	e11c      	b.n	8004a8a <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a3c      	ldr	r2, [pc, #240]	@ (8004948 <HAL_UART_MspInit+0x280>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d17e      	bne.n	8004958 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	4b33      	ldr	r3, [pc, #204]	@ (800492c <HAL_UART_MspInit+0x264>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004862:	4a32      	ldr	r2, [pc, #200]	@ (800492c <HAL_UART_MspInit+0x264>)
 8004864:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004868:	6413      	str	r3, [r2, #64]	@ 0x40
 800486a:	4b30      	ldr	r3, [pc, #192]	@ (800492c <HAL_UART_MspInit+0x264>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004876:	2300      	movs	r3, #0
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	4b2c      	ldr	r3, [pc, #176]	@ (800492c <HAL_UART_MspInit+0x264>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800487e:	4a2b      	ldr	r2, [pc, #172]	@ (800492c <HAL_UART_MspInit+0x264>)
 8004880:	f043 0304 	orr.w	r3, r3, #4
 8004884:	6313      	str	r3, [r2, #48]	@ 0x30
 8004886:	4b29      	ldr	r3, [pc, #164]	@ (800492c <HAL_UART_MspInit+0x264>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8004892:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004896:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004898:	2302      	movs	r3, #2
 800489a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489c:	2300      	movs	r3, #0
 800489e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048a0:	2303      	movs	r3, #3
 80048a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80048a4:	2307      	movs	r3, #7
 80048a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048ac:	4619      	mov	r1, r3
 80048ae:	4827      	ldr	r0, [pc, #156]	@ (800494c <HAL_UART_MspInit+0x284>)
 80048b0:	f001 fe4c 	bl	800654c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80048b4:	4b26      	ldr	r3, [pc, #152]	@ (8004950 <HAL_UART_MspInit+0x288>)
 80048b6:	4a27      	ldr	r2, [pc, #156]	@ (8004954 <HAL_UART_MspInit+0x28c>)
 80048b8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80048ba:	4b25      	ldr	r3, [pc, #148]	@ (8004950 <HAL_UART_MspInit+0x288>)
 80048bc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80048c0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048c2:	4b23      	ldr	r3, [pc, #140]	@ (8004950 <HAL_UART_MspInit+0x288>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048c8:	4b21      	ldr	r3, [pc, #132]	@ (8004950 <HAL_UART_MspInit+0x288>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048ce:	4b20      	ldr	r3, [pc, #128]	@ (8004950 <HAL_UART_MspInit+0x288>)
 80048d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048d4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004950 <HAL_UART_MspInit+0x288>)
 80048d8:	2200      	movs	r2, #0
 80048da:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048dc:	4b1c      	ldr	r3, [pc, #112]	@ (8004950 <HAL_UART_MspInit+0x288>)
 80048de:	2200      	movs	r2, #0
 80048e0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80048e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004950 <HAL_UART_MspInit+0x288>)
 80048e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048e8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80048ea:	4b19      	ldr	r3, [pc, #100]	@ (8004950 <HAL_UART_MspInit+0x288>)
 80048ec:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80048f0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048f2:	4b17      	ldr	r3, [pc, #92]	@ (8004950 <HAL_UART_MspInit+0x288>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80048f8:	4815      	ldr	r0, [pc, #84]	@ (8004950 <HAL_UART_MspInit+0x288>)
 80048fa:	f001 fa25 	bl	8005d48 <HAL_DMA_Init>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <HAL_UART_MspInit+0x240>
      Error_Handler();
 8004904:	f7fe fb8a 	bl	800301c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a11      	ldr	r2, [pc, #68]	@ (8004950 <HAL_UART_MspInit+0x288>)
 800490c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800490e:	4a10      	ldr	r2, [pc, #64]	@ (8004950 <HAL_UART_MspInit+0x288>)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004914:	2200      	movs	r2, #0
 8004916:	2105      	movs	r1, #5
 8004918:	2027      	movs	r0, #39	@ 0x27
 800491a:	f001 f9de 	bl	8005cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800491e:	2027      	movs	r0, #39	@ 0x27
 8004920:	f001 f9f7 	bl	8005d12 <HAL_NVIC_EnableIRQ>
}
 8004924:	e0b1      	b.n	8004a8a <HAL_UART_MspInit+0x3c2>
 8004926:	bf00      	nop
 8004928:	40011000 	.word	0x40011000
 800492c:	40023800 	.word	0x40023800
 8004930:	40020400 	.word	0x40020400
 8004934:	40020000 	.word	0x40020000
 8004938:	20000bb4 	.word	0x20000bb4
 800493c:	400264b8 	.word	0x400264b8
 8004940:	20000c14 	.word	0x20000c14
 8004944:	40026488 	.word	0x40026488
 8004948:	40004800 	.word	0x40004800
 800494c:	40020800 	.word	0x40020800
 8004950:	20000c74 	.word	0x20000c74
 8004954:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a4d      	ldr	r2, [pc, #308]	@ (8004a94 <HAL_UART_MspInit+0x3cc>)
 800495e:	4293      	cmp	r3, r2
 8004960:	f040 8093 	bne.w	8004a8a <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	4b4b      	ldr	r3, [pc, #300]	@ (8004a98 <HAL_UART_MspInit+0x3d0>)
 800496a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496c:	4a4a      	ldr	r2, [pc, #296]	@ (8004a98 <HAL_UART_MspInit+0x3d0>)
 800496e:	f043 0320 	orr.w	r3, r3, #32
 8004972:	6453      	str	r3, [r2, #68]	@ 0x44
 8004974:	4b48      	ldr	r3, [pc, #288]	@ (8004a98 <HAL_UART_MspInit+0x3d0>)
 8004976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004980:	2300      	movs	r3, #0
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	4b44      	ldr	r3, [pc, #272]	@ (8004a98 <HAL_UART_MspInit+0x3d0>)
 8004986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004988:	4a43      	ldr	r2, [pc, #268]	@ (8004a98 <HAL_UART_MspInit+0x3d0>)
 800498a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800498e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004990:	4b41      	ldr	r3, [pc, #260]	@ (8004a98 <HAL_UART_MspInit+0x3d0>)
 8004992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 800499c:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80049a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049a2:	2302      	movs	r3, #2
 80049a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049aa:	2303      	movs	r3, #3
 80049ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80049ae:	2308      	movs	r3, #8
 80049b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80049b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049b6:	4619      	mov	r1, r3
 80049b8:	4838      	ldr	r0, [pc, #224]	@ (8004a9c <HAL_UART_MspInit+0x3d4>)
 80049ba:	f001 fdc7 	bl	800654c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80049be:	4b38      	ldr	r3, [pc, #224]	@ (8004aa0 <HAL_UART_MspInit+0x3d8>)
 80049c0:	4a38      	ldr	r2, [pc, #224]	@ (8004aa4 <HAL_UART_MspInit+0x3dc>)
 80049c2:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80049c4:	4b36      	ldr	r3, [pc, #216]	@ (8004aa0 <HAL_UART_MspInit+0x3d8>)
 80049c6:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80049ca:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049cc:	4b34      	ldr	r3, [pc, #208]	@ (8004aa0 <HAL_UART_MspInit+0x3d8>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049d2:	4b33      	ldr	r3, [pc, #204]	@ (8004aa0 <HAL_UART_MspInit+0x3d8>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049d8:	4b31      	ldr	r3, [pc, #196]	@ (8004aa0 <HAL_UART_MspInit+0x3d8>)
 80049da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049de:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049e0:	4b2f      	ldr	r3, [pc, #188]	@ (8004aa0 <HAL_UART_MspInit+0x3d8>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049e6:	4b2e      	ldr	r3, [pc, #184]	@ (8004aa0 <HAL_UART_MspInit+0x3d8>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80049ec:	4b2c      	ldr	r3, [pc, #176]	@ (8004aa0 <HAL_UART_MspInit+0x3d8>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80049f2:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa0 <HAL_UART_MspInit+0x3d8>)
 80049f4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80049f8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049fa:	4b29      	ldr	r3, [pc, #164]	@ (8004aa0 <HAL_UART_MspInit+0x3d8>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004a00:	4827      	ldr	r0, [pc, #156]	@ (8004aa0 <HAL_UART_MspInit+0x3d8>)
 8004a02:	f001 f9a1 	bl	8005d48 <HAL_DMA_Init>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8004a0c:	f7fe fb06 	bl	800301c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a23      	ldr	r2, [pc, #140]	@ (8004aa0 <HAL_UART_MspInit+0x3d8>)
 8004a14:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a16:	4a22      	ldr	r2, [pc, #136]	@ (8004aa0 <HAL_UART_MspInit+0x3d8>)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004a1c:	4b22      	ldr	r3, [pc, #136]	@ (8004aa8 <HAL_UART_MspInit+0x3e0>)
 8004a1e:	4a23      	ldr	r2, [pc, #140]	@ (8004aac <HAL_UART_MspInit+0x3e4>)
 8004a20:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8004a22:	4b21      	ldr	r3, [pc, #132]	@ (8004aa8 <HAL_UART_MspInit+0x3e0>)
 8004a24:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004a28:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8004aa8 <HAL_UART_MspInit+0x3e0>)
 8004a2c:	2240      	movs	r2, #64	@ 0x40
 8004a2e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a30:	4b1d      	ldr	r3, [pc, #116]	@ (8004aa8 <HAL_UART_MspInit+0x3e0>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a36:	4b1c      	ldr	r3, [pc, #112]	@ (8004aa8 <HAL_UART_MspInit+0x3e0>)
 8004a38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a3c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa8 <HAL_UART_MspInit+0x3e0>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a44:	4b18      	ldr	r3, [pc, #96]	@ (8004aa8 <HAL_UART_MspInit+0x3e0>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004a4a:	4b17      	ldr	r3, [pc, #92]	@ (8004aa8 <HAL_UART_MspInit+0x3e0>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004a50:	4b15      	ldr	r3, [pc, #84]	@ (8004aa8 <HAL_UART_MspInit+0x3e0>)
 8004a52:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004a56:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a58:	4b13      	ldr	r3, [pc, #76]	@ (8004aa8 <HAL_UART_MspInit+0x3e0>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004a5e:	4812      	ldr	r0, [pc, #72]	@ (8004aa8 <HAL_UART_MspInit+0x3e0>)
 8004a60:	f001 f972 	bl	8005d48 <HAL_DMA_Init>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8004a6a:	f7fe fad7 	bl	800301c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a0d      	ldr	r2, [pc, #52]	@ (8004aa8 <HAL_UART_MspInit+0x3e0>)
 8004a72:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a74:	4a0c      	ldr	r2, [pc, #48]	@ (8004aa8 <HAL_UART_MspInit+0x3e0>)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2105      	movs	r1, #5
 8004a7e:	2047      	movs	r0, #71	@ 0x47
 8004a80:	f001 f92b 	bl	8005cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004a84:	2047      	movs	r0, #71	@ 0x47
 8004a86:	f001 f944 	bl	8005d12 <HAL_NVIC_EnableIRQ>
}
 8004a8a:	bf00      	nop
 8004a8c:	3738      	adds	r7, #56	@ 0x38
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	40011400 	.word	0x40011400
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	40021800 	.word	0x40021800
 8004aa0:	20000cd4 	.word	0x20000cd4
 8004aa4:	40026428 	.word	0x40026428
 8004aa8:	20000d34 	.word	0x20000d34
 8004aac:	400264a0 	.word	0x400264a0

08004ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004ab4:	f003 fba0 	bl	80081f8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ab8:	bf00      	nop
 8004aba:	e7fd      	b.n	8004ab8 <NMI_Handler+0x8>

08004abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ac0:	bf00      	nop
 8004ac2:	e7fd      	b.n	8004ac0 <HardFault_Handler+0x4>

08004ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ac8:	bf00      	nop
 8004aca:	e7fd      	b.n	8004ac8 <MemManage_Handler+0x4>

08004acc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ad0:	bf00      	nop
 8004ad2:	e7fd      	b.n	8004ad0 <BusFault_Handler+0x4>

08004ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ad8:	bf00      	nop
 8004ada:	e7fd      	b.n	8004ad8 <UsageFault_Handler+0x4>

08004adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ae0:	bf00      	nop
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004aee:	f000 f96d 	bl	8004dcc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004af2:	f007 fed5 	bl	800c8a0 <xTaskGetSchedulerState>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d001      	beq.n	8004b00 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004afc:	f008 fdac 	bl	800d658 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b00:	bf00      	nop
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004b08:	2008      	movs	r0, #8
 8004b0a:	f001 fed5 	bl	80068b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 8004b0e:	4802      	ldr	r0, [pc, #8]	@ (8004b18 <EXTI3_IRQHandler+0x14>)
 8004b10:	f7fd f8bc 	bl	8001c8c <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8004b14:	bf00      	nop
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	2000068c 	.word	0x2000068c

08004b1c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 8004b20:	2010      	movs	r0, #16
 8004b22:	f001 fec9 	bl	80068b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004b26:	bf00      	nop
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004b30:	4802      	ldr	r0, [pc, #8]	@ (8004b3c <DMA1_Stream1_IRQHandler+0x10>)
 8004b32:	f001 faa1 	bl	8006078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004b36:	bf00      	nop
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000c74 	.word	0x20000c74

08004b40 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8004b44:	4802      	ldr	r0, [pc, #8]	@ (8004b50 <DMA1_Stream2_IRQHandler+0x10>)
 8004b46:	f001 fa97 	bl	8006078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004b4a:	bf00      	nop
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	200009bc 	.word	0x200009bc

08004b54 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8004b58:	4802      	ldr	r0, [pc, #8]	@ (8004b64 <DMA1_Stream4_IRQHandler+0x10>)
 8004b5a:	f001 fa8d 	bl	8006078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004b5e:	bf00      	nop
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20000a1c 	.word	0x20000a1c

08004b68 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004b6c:	4802      	ldr	r0, [pc, #8]	@ (8004b78 <CAN1_RX0_IRQHandler+0x10>)
 8004b6e:	f000 fda9 	bl	80056c4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004b72:	bf00      	nop
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000698 	.word	0x20000698

08004b7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004b80:	4802      	ldr	r0, [pc, #8]	@ (8004b8c <USART1_IRQHandler+0x10>)
 8004b82:	f004 ff3b 	bl	80099fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004b86:	bf00      	nop
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000adc 	.word	0x20000adc

08004b90 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8004b94:	4802      	ldr	r0, [pc, #8]	@ (8004ba0 <DMA1_Stream7_IRQHandler+0x10>)
 8004b96:	f001 fa6f 	bl	8006078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004b9a:	bf00      	nop
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	2000095c 	.word	0x2000095c

08004ba4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004ba8:	4802      	ldr	r0, [pc, #8]	@ (8004bb4 <DMA2_Stream1_IRQHandler+0x10>)
 8004baa:	f001 fa65 	bl	8006078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004bae:	bf00      	nop
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000cd4 	.word	0x20000cd4

08004bb8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1_ch2_ch3);
 8004bbc:	4802      	ldr	r0, [pc, #8]	@ (8004bc8 <DMA2_Stream2_IRQHandler+0x10>)
 8004bbe:	f001 fa5b 	bl	8006078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004bc2:	bf00      	nop
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000a7c 	.word	0x20000a7c

08004bcc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8004bd0:	4802      	ldr	r0, [pc, #8]	@ (8004bdc <DMA2_Stream3_IRQHandler+0x10>)
 8004bd2:	f001 fa51 	bl	8006078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004bd6:	bf00      	nop
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	200008fc 	.word	0x200008fc

08004be0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004be4:	4802      	ldr	r0, [pc, #8]	@ (8004bf0 <CAN2_RX0_IRQHandler+0x10>)
 8004be6:	f000 fd6d 	bl	80056c4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004bea:	bf00      	nop
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	200006c0 	.word	0x200006c0

08004bf4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004bf8:	4802      	ldr	r0, [pc, #8]	@ (8004c04 <DMA2_Stream5_IRQHandler+0x10>)
 8004bfa:	f001 fa3d 	bl	8006078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8004bfe:	bf00      	nop
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20000c14 	.word	0x20000c14

08004c08 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8004c0c:	4802      	ldr	r0, [pc, #8]	@ (8004c18 <DMA2_Stream6_IRQHandler+0x10>)
 8004c0e:	f001 fa33 	bl	8006078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004c12:	bf00      	nop
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20000d34 	.word	0x20000d34

08004c1c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004c20:	4802      	ldr	r0, [pc, #8]	@ (8004c2c <DMA2_Stream7_IRQHandler+0x10>)
 8004c22:	f001 fa29 	bl	8006078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004c26:	bf00      	nop
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000bb4 	.word	0x20000bb4

08004c30 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004c34:	4802      	ldr	r0, [pc, #8]	@ (8004c40 <USART6_IRQHandler+0x10>)
 8004c36:	f004 fee1 	bl	80099fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004c3a:	bf00      	nop
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000b6c 	.word	0x20000b6c

08004c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c4c:	4a14      	ldr	r2, [pc, #80]	@ (8004ca0 <_sbrk+0x5c>)
 8004c4e:	4b15      	ldr	r3, [pc, #84]	@ (8004ca4 <_sbrk+0x60>)
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c58:	4b13      	ldr	r3, [pc, #76]	@ (8004ca8 <_sbrk+0x64>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d102      	bne.n	8004c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c60:	4b11      	ldr	r3, [pc, #68]	@ (8004ca8 <_sbrk+0x64>)
 8004c62:	4a12      	ldr	r2, [pc, #72]	@ (8004cac <_sbrk+0x68>)
 8004c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c66:	4b10      	ldr	r3, [pc, #64]	@ (8004ca8 <_sbrk+0x64>)
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d207      	bcs.n	8004c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c74:	f008 ffee 	bl	800dc54 <__errno>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	220c      	movs	r2, #12
 8004c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c82:	e009      	b.n	8004c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c84:	4b08      	ldr	r3, [pc, #32]	@ (8004ca8 <_sbrk+0x64>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c8a:	4b07      	ldr	r3, [pc, #28]	@ (8004ca8 <_sbrk+0x64>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4413      	add	r3, r2
 8004c92:	4a05      	ldr	r2, [pc, #20]	@ (8004ca8 <_sbrk+0x64>)
 8004c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c96:	68fb      	ldr	r3, [r7, #12]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20020000 	.word	0x20020000
 8004ca4:	00000400 	.word	0x00000400
 8004ca8:	20000e94 	.word	0x20000e94
 8004cac:	200059d0 	.word	0x200059d0

08004cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004cb4:	4b06      	ldr	r3, [pc, #24]	@ (8004cd0 <SystemInit+0x20>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cba:	4a05      	ldr	r2, [pc, #20]	@ (8004cd0 <SystemInit+0x20>)
 8004cbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004cc4:	bf00      	nop
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	e000ed00 	.word	0xe000ed00

08004cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004cd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004d0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004cd8:	f7ff ffea 	bl	8004cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004cdc:	480c      	ldr	r0, [pc, #48]	@ (8004d10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004cde:	490d      	ldr	r1, [pc, #52]	@ (8004d14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8004d18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ce4:	e002      	b.n	8004cec <LoopCopyDataInit>

08004ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cea:	3304      	adds	r3, #4

08004cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cf0:	d3f9      	bcc.n	8004ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8004d1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004cf4:	4c0a      	ldr	r4, [pc, #40]	@ (8004d20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cf8:	e001      	b.n	8004cfe <LoopFillZerobss>

08004cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cfc:	3204      	adds	r2, #4

08004cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d00:	d3fb      	bcc.n	8004cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004d02:	f008 ffad 	bl	800dc60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d06:	f7fd f8e1 	bl	8001ecc <main>
  bx  lr    
 8004d0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004d0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d14:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8004d18:	0800e708 	.word	0x0800e708
  ldr r2, =_sbss
 8004d1c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8004d20:	200059cc 	.word	0x200059cc

08004d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d24:	e7fe      	b.n	8004d24 <ADC_IRQHandler>
	...

08004d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d68 <HAL_Init+0x40>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0d      	ldr	r2, [pc, #52]	@ (8004d68 <HAL_Init+0x40>)
 8004d32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d38:	4b0b      	ldr	r3, [pc, #44]	@ (8004d68 <HAL_Init+0x40>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8004d68 <HAL_Init+0x40>)
 8004d3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d44:	4b08      	ldr	r3, [pc, #32]	@ (8004d68 <HAL_Init+0x40>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a07      	ldr	r2, [pc, #28]	@ (8004d68 <HAL_Init+0x40>)
 8004d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d50:	2003      	movs	r0, #3
 8004d52:	f000 ffb7 	bl	8005cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d56:	200f      	movs	r0, #15
 8004d58:	f000 f808 	bl	8004d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d5c:	f7ff f87a 	bl	8003e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40023c00 	.word	0x40023c00

08004d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d74:	4b12      	ldr	r3, [pc, #72]	@ (8004dc0 <HAL_InitTick+0x54>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	4b12      	ldr	r3, [pc, #72]	@ (8004dc4 <HAL_InitTick+0x58>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 ffcf 	bl	8005d2e <HAL_SYSTICK_Config>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e00e      	b.n	8004db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b0f      	cmp	r3, #15
 8004d9e:	d80a      	bhi.n	8004db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004da0:	2200      	movs	r2, #0
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004da8:	f000 ff97 	bl	8005cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004dac:	4a06      	ldr	r2, [pc, #24]	@ (8004dc8 <HAL_InitTick+0x5c>)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	e000      	b.n	8004db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20000060 	.word	0x20000060
 8004dc4:	20000068 	.word	0x20000068
 8004dc8:	20000064 	.word	0x20000064

08004dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004dd0:	4b06      	ldr	r3, [pc, #24]	@ (8004dec <HAL_IncTick+0x20>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <HAL_IncTick+0x24>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4413      	add	r3, r2
 8004ddc:	4a04      	ldr	r2, [pc, #16]	@ (8004df0 <HAL_IncTick+0x24>)
 8004dde:	6013      	str	r3, [r2, #0]
}
 8004de0:	bf00      	nop
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20000068 	.word	0x20000068
 8004df0:	20000e98 	.word	0x20000e98

08004df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  return uwTick;
 8004df8:	4b03      	ldr	r3, [pc, #12]	@ (8004e08 <HAL_GetTick+0x14>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000e98 	.word	0x20000e98

08004e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e14:	f7ff ffee 	bl	8004df4 <HAL_GetTick>
 8004e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e24:	d005      	beq.n	8004e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e26:	4b0a      	ldr	r3, [pc, #40]	@ (8004e50 <HAL_Delay+0x44>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e32:	bf00      	nop
 8004e34:	f7ff ffde 	bl	8004df4 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d8f7      	bhi.n	8004e34 <HAL_Delay+0x28>
  {
  }
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000068 	.word	0x20000068

08004e54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e0ed      	b.n	8005042 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff f81a 	bl	8003eac <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e88:	f7ff ffb4 	bl	8004df4 <HAL_GetTick>
 8004e8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004e8e:	e012      	b.n	8004eb6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e90:	f7ff ffb0 	bl	8004df4 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b0a      	cmp	r3, #10
 8004e9c:	d90b      	bls.n	8004eb6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2205      	movs	r2, #5
 8004eae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e0c5      	b.n	8005042 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0e5      	beq.n	8004e90 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0202 	bic.w	r2, r2, #2
 8004ed2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ed4:	f7ff ff8e 	bl	8004df4 <HAL_GetTick>
 8004ed8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004eda:	e012      	b.n	8004f02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004edc:	f7ff ff8a 	bl	8004df4 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b0a      	cmp	r3, #10
 8004ee8:	d90b      	bls.n	8004f02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2205      	movs	r2, #5
 8004efa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e09f      	b.n	8005042 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1e5      	bne.n	8004edc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	7e1b      	ldrb	r3, [r3, #24]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d108      	bne.n	8004f2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	e007      	b.n	8004f3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	7e5b      	ldrb	r3, [r3, #25]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d108      	bne.n	8004f54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e007      	b.n	8004f64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	7e9b      	ldrb	r3, [r3, #26]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d108      	bne.n	8004f7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0220 	orr.w	r2, r2, #32
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	e007      	b.n	8004f8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0220 	bic.w	r2, r2, #32
 8004f8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	7edb      	ldrb	r3, [r3, #27]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d108      	bne.n	8004fa8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0210 	bic.w	r2, r2, #16
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	e007      	b.n	8004fb8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0210 	orr.w	r2, r2, #16
 8004fb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	7f1b      	ldrb	r3, [r3, #28]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d108      	bne.n	8004fd2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0208 	orr.w	r2, r2, #8
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	e007      	b.n	8004fe2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0208 	bic.w	r2, r2, #8
 8004fe0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	7f5b      	ldrb	r3, [r3, #29]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d108      	bne.n	8004ffc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 0204 	orr.w	r2, r2, #4
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	e007      	b.n	800500c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0204 	bic.w	r2, r2, #4
 800500a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	ea42 0103 	orr.w	r1, r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	1e5a      	subs	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005062:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005064:	7cfb      	ldrb	r3, [r7, #19]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d003      	beq.n	8005072 <HAL_CAN_ConfigFilter+0x26>
 800506a:	7cfb      	ldrb	r3, [r7, #19]
 800506c:	2b02      	cmp	r3, #2
 800506e:	f040 80be 	bne.w	80051ee <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005072:	4b65      	ldr	r3, [pc, #404]	@ (8005208 <HAL_CAN_ConfigFilter+0x1bc>)
 8005074:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800507c:	f043 0201 	orr.w	r2, r3, #1
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800508c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a0:	021b      	lsls	r3, r3, #8
 80050a2:	431a      	orrs	r2, r3
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f003 031f 	and.w	r3, r3, #31
 80050b2:	2201      	movs	r2, #1
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	43db      	mvns	r3, r3
 80050c4:	401a      	ands	r2, r3
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d123      	bne.n	800511c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	43db      	mvns	r3, r3
 80050de:	401a      	ands	r2, r3
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80050f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	3248      	adds	r2, #72	@ 0x48
 80050fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005110:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005112:	6979      	ldr	r1, [r7, #20]
 8005114:	3348      	adds	r3, #72	@ 0x48
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	440b      	add	r3, r1
 800511a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d122      	bne.n	800516a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	431a      	orrs	r2, r3
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005144:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	3248      	adds	r2, #72	@ 0x48
 800514a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800515e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005160:	6979      	ldr	r1, [r7, #20]
 8005162:	3348      	adds	r3, #72	@ 0x48
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	440b      	add	r3, r1
 8005168:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d109      	bne.n	8005186 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	43db      	mvns	r3, r3
 800517c:	401a      	ands	r2, r3
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005184:	e007      	b.n	8005196 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	431a      	orrs	r2, r3
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d109      	bne.n	80051b2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	43db      	mvns	r3, r3
 80051a8:	401a      	ands	r2, r3
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80051b0:	e007      	b.n	80051c2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d107      	bne.n	80051da <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80051e0:	f023 0201 	bic.w	r2, r3, #1
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	e006      	b.n	80051fc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
  }
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	40006400 	.word	0x40006400

0800520c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3020 	ldrb.w	r3, [r3, #32]
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	d12e      	bne.n	800527e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0201 	bic.w	r2, r2, #1
 8005236:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005238:	f7ff fddc 	bl	8004df4 <HAL_GetTick>
 800523c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800523e:	e012      	b.n	8005266 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005240:	f7ff fdd8 	bl	8004df4 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b0a      	cmp	r3, #10
 800524c:	d90b      	bls.n	8005266 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005252:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2205      	movs	r2, #5
 800525e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e012      	b.n	800528c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e5      	bne.n	8005240 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	e006      	b.n	800528c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005282:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
  }
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005294:	b480      	push	{r7}
 8005296:	b089      	sub	sp, #36	@ 0x24
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052a8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80052b2:	7ffb      	ldrb	r3, [r7, #31]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d003      	beq.n	80052c0 <HAL_CAN_AddTxMessage+0x2c>
 80052b8:	7ffb      	ldrb	r3, [r7, #31]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	f040 80ad 	bne.w	800541a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10a      	bne.n	80052e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d105      	bne.n	80052e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 8095 	beq.w	800540a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	0e1b      	lsrs	r3, r3, #24
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80052ea:	2201      	movs	r2, #1
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	409a      	lsls	r2, r3
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10d      	bne.n	8005318 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005306:	68f9      	ldr	r1, [r7, #12]
 8005308:	6809      	ldr	r1, [r1, #0]
 800530a:	431a      	orrs	r2, r3
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	3318      	adds	r3, #24
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	440b      	add	r3, r1
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	e00f      	b.n	8005338 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005322:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005328:	68f9      	ldr	r1, [r7, #12]
 800532a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800532c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	3318      	adds	r3, #24
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	440b      	add	r3, r1
 8005336:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6819      	ldr	r1, [r3, #0]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	3318      	adds	r3, #24
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	440b      	add	r3, r1
 8005348:	3304      	adds	r3, #4
 800534a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	7d1b      	ldrb	r3, [r3, #20]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d111      	bne.n	8005378 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	3318      	adds	r3, #24
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	4413      	add	r3, r2
 8005360:	3304      	adds	r3, #4
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	6811      	ldr	r1, [r2, #0]
 8005368:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	3318      	adds	r3, #24
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	440b      	add	r3, r1
 8005374:	3304      	adds	r3, #4
 8005376:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3307      	adds	r3, #7
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	061a      	lsls	r2, r3, #24
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3306      	adds	r3, #6
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	041b      	lsls	r3, r3, #16
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3305      	adds	r3, #5
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	021b      	lsls	r3, r3, #8
 8005392:	4313      	orrs	r3, r2
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	3204      	adds	r2, #4
 8005398:	7812      	ldrb	r2, [r2, #0]
 800539a:	4610      	mov	r0, r2
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	6811      	ldr	r1, [r2, #0]
 80053a0:	ea43 0200 	orr.w	r2, r3, r0
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	440b      	add	r3, r1
 80053aa:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80053ae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3303      	adds	r3, #3
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	061a      	lsls	r2, r3, #24
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3302      	adds	r3, #2
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	041b      	lsls	r3, r3, #16
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3301      	adds	r3, #1
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	4313      	orrs	r3, r2
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	7812      	ldrb	r2, [r2, #0]
 80053d0:	4610      	mov	r0, r2
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	6811      	ldr	r1, [r2, #0]
 80053d6:	ea43 0200 	orr.w	r2, r3, r0
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	440b      	add	r3, r1
 80053e0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80053e4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	3318      	adds	r3, #24
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	4413      	add	r3, r2
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	6811      	ldr	r1, [r2, #0]
 80053f8:	f043 0201 	orr.w	r2, r3, #1
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	3318      	adds	r3, #24
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	440b      	add	r3, r1
 8005404:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	e00e      	b.n	8005428 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e006      	b.n	8005428 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
  }
}
 8005428:	4618      	mov	r0, r3
 800542a:	3724      	adds	r7, #36	@ 0x24
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005448:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800544a:	7dfb      	ldrb	r3, [r7, #23]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d003      	beq.n	8005458 <HAL_CAN_GetRxMessage+0x24>
 8005450:	7dfb      	ldrb	r3, [r7, #23]
 8005452:	2b02      	cmp	r3, #2
 8005454:	f040 8103 	bne.w	800565e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10e      	bne.n	800547c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0303 	and.w	r3, r3, #3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d116      	bne.n	800549a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005470:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e0f7      	b.n	800566c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d107      	bne.n	800549a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e0e8      	b.n	800566c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	331b      	adds	r3, #27
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	4413      	add	r3, r2
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0204 	and.w	r2, r3, #4
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10c      	bne.n	80054d2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	331b      	adds	r3, #27
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	4413      	add	r3, r2
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	0d5b      	lsrs	r3, r3, #21
 80054c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	e00b      	b.n	80054ea <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	331b      	adds	r3, #27
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	4413      	add	r3, r2
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	08db      	lsrs	r3, r3, #3
 80054e2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	331b      	adds	r3, #27
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	4413      	add	r3, r2
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0202 	and.w	r2, r3, #2
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	331b      	adds	r3, #27
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	4413      	add	r3, r2
 800550c:	3304      	adds	r3, #4
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2208      	movs	r2, #8
 800551c:	611a      	str	r2, [r3, #16]
 800551e:	e00b      	b.n	8005538 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	331b      	adds	r3, #27
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	4413      	add	r3, r2
 800552c:	3304      	adds	r3, #4
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 020f 	and.w	r2, r3, #15
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	331b      	adds	r3, #27
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	4413      	add	r3, r2
 8005544:	3304      	adds	r3, #4
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	0a1b      	lsrs	r3, r3, #8
 800554a:	b2da      	uxtb	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	331b      	adds	r3, #27
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	4413      	add	r3, r2
 800555c:	3304      	adds	r3, #4
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	0c1b      	lsrs	r3, r3, #16
 8005562:	b29a      	uxth	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	4413      	add	r3, r2
 8005572:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	b2da      	uxtb	r2, r3
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	4413      	add	r3, r2
 8005588:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	0a1a      	lsrs	r2, r3, #8
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	3301      	adds	r3, #1
 8005594:	b2d2      	uxtb	r2, r2
 8005596:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	0c1a      	lsrs	r2, r3, #16
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	3302      	adds	r3, #2
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	0e1a      	lsrs	r2, r3, #24
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	3303      	adds	r3, #3
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	011b      	lsls	r3, r3, #4
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	3304      	adds	r3, #4
 80055e0:	b2d2      	uxtb	r2, r2
 80055e2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	0a1a      	lsrs	r2, r3, #8
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	3305      	adds	r3, #5
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	4413      	add	r3, r2
 8005608:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	0c1a      	lsrs	r2, r3, #16
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	3306      	adds	r3, #6
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	4413      	add	r3, r2
 8005622:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	0e1a      	lsrs	r2, r3, #24
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	3307      	adds	r3, #7
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d108      	bne.n	800564a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0220 	orr.w	r2, r2, #32
 8005646:	60da      	str	r2, [r3, #12]
 8005648:	e007      	b.n	800565a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0220 	orr.w	r2, r2, #32
 8005658:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	e006      	b.n	800566c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005662:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
  }
}
 800566c:	4618      	mov	r0, r3
 800566e:	371c      	adds	r7, #28
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005688:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d002      	beq.n	8005696 <HAL_CAN_ActivateNotification+0x1e>
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d109      	bne.n	80056aa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6959      	ldr	r1, [r3, #20]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e006      	b.n	80056b8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
  }
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08a      	sub	sp, #40	@ 0x28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80056cc:	2300      	movs	r3, #0
 80056ce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d07c      	beq.n	8005804 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d023      	beq.n	800575c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2201      	movs	r2, #1
 800571a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f983 	bl	8005a32 <HAL_CAN_TxMailbox0CompleteCallback>
 800572c:	e016      	b.n	800575c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d004      	beq.n	8005742 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800573e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005740:	e00c      	b.n	800575c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d004      	beq.n	8005756 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005752:	627b      	str	r3, [r7, #36]	@ 0x24
 8005754:	e002      	b.n	800575c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f989 	bl	8005a6e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005762:	2b00      	cmp	r3, #0
 8005764:	d024      	beq.n	80057b0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800576e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f963 	bl	8005a46 <HAL_CAN_TxMailbox1CompleteCallback>
 8005780:	e016      	b.n	80057b0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005788:	2b00      	cmp	r3, #0
 800578a:	d004      	beq.n	8005796 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800578c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005792:	627b      	str	r3, [r7, #36]	@ 0x24
 8005794:	e00c      	b.n	80057b0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057a8:	e002      	b.n	80057b0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f969 	bl	8005a82 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d024      	beq.n	8005804 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80057c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f943 	bl	8005a5a <HAL_CAN_TxMailbox2CompleteCallback>
 80057d4:	e016      	b.n	8005804 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d004      	beq.n	80057ea <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057e8:	e00c      	b.n	8005804 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d004      	beq.n	80057fe <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80057f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80057fc:	e002      	b.n	8005804 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f949 	bl	8005a96 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	f003 0308 	and.w	r3, r3, #8
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00c      	beq.n	8005828 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f003 0310 	and.w	r3, r3, #16
 8005814:	2b00      	cmp	r3, #0
 8005816:	d007      	beq.n	8005828 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800581e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2210      	movs	r2, #16
 8005826:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00b      	beq.n	800584a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f003 0308 	and.w	r3, r3, #8
 8005838:	2b00      	cmp	r3, #0
 800583a:	d006      	beq.n	800584a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2208      	movs	r2, #8
 8005842:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f930 	bl	8005aaa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d009      	beq.n	8005868 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7fb f9d6 	bl	8000c14 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00c      	beq.n	800588c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f003 0310 	and.w	r3, r3, #16
 8005878:	2b00      	cmp	r3, #0
 800587a:	d007      	beq.n	800588c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800587c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005882:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2210      	movs	r2, #16
 800588a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00b      	beq.n	80058ae <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f003 0308 	and.w	r3, r3, #8
 800589c:	2b00      	cmp	r3, #0
 800589e:	d006      	beq.n	80058ae <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2208      	movs	r2, #8
 80058a6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f912 	bl	8005ad2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	f003 0310 	and.w	r3, r3, #16
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d009      	beq.n	80058cc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f8f9 	bl	8005abe <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00b      	beq.n	80058ee <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	f003 0310 	and.w	r3, r3, #16
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d006      	beq.n	80058ee <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2210      	movs	r2, #16
 80058e6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f8fc 	bl	8005ae6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00b      	beq.n	8005910 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d006      	beq.n	8005910 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2208      	movs	r2, #8
 8005908:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f8f5 	bl	8005afa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d07b      	beq.n	8005a12 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d072      	beq.n	8005a0a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005946:	2b00      	cmp	r3, #0
 8005948:	d008      	beq.n	800595c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	f043 0302 	orr.w	r3, r3, #2
 800595a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005962:	2b00      	cmp	r3, #0
 8005964:	d008      	beq.n	8005978 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005972:	f043 0304 	orr.w	r3, r3, #4
 8005976:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800597e:	2b00      	cmp	r3, #0
 8005980:	d043      	beq.n	8005a0a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005988:	2b00      	cmp	r3, #0
 800598a:	d03e      	beq.n	8005a0a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005992:	2b60      	cmp	r3, #96	@ 0x60
 8005994:	d02b      	beq.n	80059ee <HAL_CAN_IRQHandler+0x32a>
 8005996:	2b60      	cmp	r3, #96	@ 0x60
 8005998:	d82e      	bhi.n	80059f8 <HAL_CAN_IRQHandler+0x334>
 800599a:	2b50      	cmp	r3, #80	@ 0x50
 800599c:	d022      	beq.n	80059e4 <HAL_CAN_IRQHandler+0x320>
 800599e:	2b50      	cmp	r3, #80	@ 0x50
 80059a0:	d82a      	bhi.n	80059f8 <HAL_CAN_IRQHandler+0x334>
 80059a2:	2b40      	cmp	r3, #64	@ 0x40
 80059a4:	d019      	beq.n	80059da <HAL_CAN_IRQHandler+0x316>
 80059a6:	2b40      	cmp	r3, #64	@ 0x40
 80059a8:	d826      	bhi.n	80059f8 <HAL_CAN_IRQHandler+0x334>
 80059aa:	2b30      	cmp	r3, #48	@ 0x30
 80059ac:	d010      	beq.n	80059d0 <HAL_CAN_IRQHandler+0x30c>
 80059ae:	2b30      	cmp	r3, #48	@ 0x30
 80059b0:	d822      	bhi.n	80059f8 <HAL_CAN_IRQHandler+0x334>
 80059b2:	2b10      	cmp	r3, #16
 80059b4:	d002      	beq.n	80059bc <HAL_CAN_IRQHandler+0x2f8>
 80059b6:	2b20      	cmp	r3, #32
 80059b8:	d005      	beq.n	80059c6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80059ba:	e01d      	b.n	80059f8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80059bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059be:	f043 0308 	orr.w	r3, r3, #8
 80059c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80059c4:	e019      	b.n	80059fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	f043 0310 	orr.w	r3, r3, #16
 80059cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80059ce:	e014      	b.n	80059fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	f043 0320 	orr.w	r3, r3, #32
 80059d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80059d8:	e00f      	b.n	80059fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80059da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80059e2:	e00a      	b.n	80059fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80059ec:	e005      	b.n	80059fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80059ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80059f6:	e000      	b.n	80059fa <HAL_CAN_IRQHandler+0x336>
            break;
 80059f8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699a      	ldr	r2, [r3, #24]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005a08:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2204      	movs	r2, #4
 8005a10:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d008      	beq.n	8005a2a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f872 	bl	8005b0e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005a2a:	bf00      	nop
 8005a2c:	3728      	adds	r7, #40	@ 0x28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005b02:	bf00      	nop
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
	...

08005b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b34:	4b0c      	ldr	r3, [pc, #48]	@ (8005b68 <__NVIC_SetPriorityGrouping+0x44>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005b40:	4013      	ands	r3, r2
 8005b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b56:	4a04      	ldr	r2, [pc, #16]	@ (8005b68 <__NVIC_SetPriorityGrouping+0x44>)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	60d3      	str	r3, [r2, #12]
}
 8005b5c:	bf00      	nop
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	e000ed00 	.word	0xe000ed00

08005b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b70:	4b04      	ldr	r3, [pc, #16]	@ (8005b84 <__NVIC_GetPriorityGrouping+0x18>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	0a1b      	lsrs	r3, r3, #8
 8005b76:	f003 0307 	and.w	r3, r3, #7
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	e000ed00 	.word	0xe000ed00

08005b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	db0b      	blt.n	8005bb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	f003 021f 	and.w	r2, r3, #31
 8005ba0:	4907      	ldr	r1, [pc, #28]	@ (8005bc0 <__NVIC_EnableIRQ+0x38>)
 8005ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	2001      	movs	r0, #1
 8005baa:	fa00 f202 	lsl.w	r2, r0, r2
 8005bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	e000e100 	.word	0xe000e100

08005bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	4603      	mov	r3, r0
 8005bcc:	6039      	str	r1, [r7, #0]
 8005bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	db0a      	blt.n	8005bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	490c      	ldr	r1, [pc, #48]	@ (8005c10 <__NVIC_SetPriority+0x4c>)
 8005bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be2:	0112      	lsls	r2, r2, #4
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	440b      	add	r3, r1
 8005be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bec:	e00a      	b.n	8005c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	4908      	ldr	r1, [pc, #32]	@ (8005c14 <__NVIC_SetPriority+0x50>)
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	3b04      	subs	r3, #4
 8005bfc:	0112      	lsls	r2, r2, #4
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	440b      	add	r3, r1
 8005c02:	761a      	strb	r2, [r3, #24]
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	e000e100 	.word	0xe000e100
 8005c14:	e000ed00 	.word	0xe000ed00

08005c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b089      	sub	sp, #36	@ 0x24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	f1c3 0307 	rsb	r3, r3, #7
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	bf28      	it	cs
 8005c36:	2304      	movcs	r3, #4
 8005c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	2b06      	cmp	r3, #6
 8005c40:	d902      	bls.n	8005c48 <NVIC_EncodePriority+0x30>
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	3b03      	subs	r3, #3
 8005c46:	e000      	b.n	8005c4a <NVIC_EncodePriority+0x32>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	43da      	mvns	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	401a      	ands	r2, r3
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6a:	43d9      	mvns	r1, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c70:	4313      	orrs	r3, r2
         );
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3724      	adds	r7, #36	@ 0x24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
	...

08005c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c90:	d301      	bcc.n	8005c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c92:	2301      	movs	r3, #1
 8005c94:	e00f      	b.n	8005cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c96:	4a0a      	ldr	r2, [pc, #40]	@ (8005cc0 <SysTick_Config+0x40>)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c9e:	210f      	movs	r1, #15
 8005ca0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ca4:	f7ff ff8e 	bl	8005bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ca8:	4b05      	ldr	r3, [pc, #20]	@ (8005cc0 <SysTick_Config+0x40>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cae:	4b04      	ldr	r3, [pc, #16]	@ (8005cc0 <SysTick_Config+0x40>)
 8005cb0:	2207      	movs	r2, #7
 8005cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	e000e010 	.word	0xe000e010

08005cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff ff29 	bl	8005b24 <__NVIC_SetPriorityGrouping>
}
 8005cd2:	bf00      	nop
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b086      	sub	sp, #24
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	607a      	str	r2, [r7, #4]
 8005ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005cec:	f7ff ff3e 	bl	8005b6c <__NVIC_GetPriorityGrouping>
 8005cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	6978      	ldr	r0, [r7, #20]
 8005cf8:	f7ff ff8e 	bl	8005c18 <NVIC_EncodePriority>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d02:	4611      	mov	r1, r2
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7ff ff5d 	bl	8005bc4 <__NVIC_SetPriority>
}
 8005d0a:	bf00      	nop
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	4603      	mov	r3, r0
 8005d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff ff31 	bl	8005b88 <__NVIC_EnableIRQ>
}
 8005d26:	bf00      	nop
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff ffa2 	bl	8005c80 <SysTick_Config>
 8005d3c:	4603      	mov	r3, r0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005d54:	f7ff f84e 	bl	8004df4 <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e099      	b.n	8005e98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0201 	bic.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d84:	e00f      	b.n	8005da6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d86:	f7ff f835 	bl	8004df4 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	2b05      	cmp	r3, #5
 8005d92:	d908      	bls.n	8005da6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2220      	movs	r2, #32
 8005d98:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2203      	movs	r2, #3
 8005d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e078      	b.n	8005e98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e8      	bne.n	8005d86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4b38      	ldr	r3, [pc, #224]	@ (8005ea0 <HAL_DMA_Init+0x158>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	d107      	bne.n	8005e10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f023 0307 	bic.w	r3, r3, #7
 8005e26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d117      	bne.n	8005e6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00e      	beq.n	8005e6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fb01 	bl	8006454 <DMA_CheckFifoParam>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d008      	beq.n	8005e6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2240      	movs	r2, #64	@ 0x40
 8005e5c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005e66:	2301      	movs	r3, #1
 8005e68:	e016      	b.n	8005e98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fab8 	bl	80063e8 <DMA_CalcBaseAndBitshift>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e80:	223f      	movs	r2, #63	@ 0x3f
 8005e82:	409a      	lsls	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	f010803f 	.word	0xf010803f

08005ea4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d101      	bne.n	8005eca <HAL_DMA_Start_IT+0x26>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e040      	b.n	8005f4c <HAL_DMA_Start_IT+0xa8>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d12f      	bne.n	8005f3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 fa4a 	bl	800638c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005efc:	223f      	movs	r2, #63	@ 0x3f
 8005efe:	409a      	lsls	r2, r3
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0216 	orr.w	r2, r2, #22
 8005f12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d007      	beq.n	8005f2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0208 	orr.w	r2, r2, #8
 8005f2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0201 	orr.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	e005      	b.n	8005f4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005f46:	2302      	movs	r3, #2
 8005f48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005f62:	f7fe ff47 	bl	8004df4 <HAL_GetTick>
 8005f66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d008      	beq.n	8005f86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2280      	movs	r2, #128	@ 0x80
 8005f78:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e052      	b.n	800602c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 0216 	bic.w	r2, r2, #22
 8005f94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	695a      	ldr	r2, [r3, #20]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fa4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d103      	bne.n	8005fb6 <HAL_DMA_Abort+0x62>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d007      	beq.n	8005fc6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0208 	bic.w	r2, r2, #8
 8005fc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0201 	bic.w	r2, r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fd6:	e013      	b.n	8006000 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005fd8:	f7fe ff0c 	bl	8004df4 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b05      	cmp	r3, #5
 8005fe4:	d90c      	bls.n	8006000 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2203      	movs	r2, #3
 8005ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e015      	b.n	800602c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e4      	bne.n	8005fd8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006012:	223f      	movs	r2, #63	@ 0x3f
 8006014:	409a      	lsls	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d004      	beq.n	8006052 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2280      	movs	r2, #128	@ 0x80
 800604c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e00c      	b.n	800606c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2205      	movs	r2, #5
 8006056:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0201 	bic.w	r2, r2, #1
 8006068:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006084:	4b8e      	ldr	r3, [pc, #568]	@ (80062c0 <HAL_DMA_IRQHandler+0x248>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a8e      	ldr	r2, [pc, #568]	@ (80062c4 <HAL_DMA_IRQHandler+0x24c>)
 800608a:	fba2 2303 	umull	r2, r3, r2, r3
 800608e:	0a9b      	lsrs	r3, r3, #10
 8006090:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006096:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a2:	2208      	movs	r2, #8
 80060a4:	409a      	lsls	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4013      	ands	r3, r2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d01a      	beq.n	80060e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d013      	beq.n	80060e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0204 	bic.w	r2, r2, #4
 80060ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060d0:	2208      	movs	r2, #8
 80060d2:	409a      	lsls	r2, r3
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060dc:	f043 0201 	orr.w	r2, r3, #1
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e8:	2201      	movs	r2, #1
 80060ea:	409a      	lsls	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4013      	ands	r3, r2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d012      	beq.n	800611a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00b      	beq.n	800611a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006106:	2201      	movs	r2, #1
 8006108:	409a      	lsls	r2, r3
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006112:	f043 0202 	orr.w	r2, r3, #2
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800611e:	2204      	movs	r2, #4
 8006120:	409a      	lsls	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	4013      	ands	r3, r2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d012      	beq.n	8006150 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00b      	beq.n	8006150 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800613c:	2204      	movs	r2, #4
 800613e:	409a      	lsls	r2, r3
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006148:	f043 0204 	orr.w	r2, r3, #4
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006154:	2210      	movs	r2, #16
 8006156:	409a      	lsls	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4013      	ands	r3, r2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d043      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d03c      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006172:	2210      	movs	r2, #16
 8006174:	409a      	lsls	r2, r3
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d018      	beq.n	80061ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d108      	bne.n	80061a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	d024      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	4798      	blx	r3
 80061a6:	e01f      	b.n	80061e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d01b      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	4798      	blx	r3
 80061b8:	e016      	b.n	80061e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d107      	bne.n	80061d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0208 	bic.w	r2, r2, #8
 80061d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ec:	2220      	movs	r2, #32
 80061ee:	409a      	lsls	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4013      	ands	r3, r2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 808f 	beq.w	8006318 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 8087 	beq.w	8006318 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800620e:	2220      	movs	r2, #32
 8006210:	409a      	lsls	r2, r3
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b05      	cmp	r3, #5
 8006220:	d136      	bne.n	8006290 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0216 	bic.w	r2, r2, #22
 8006230:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695a      	ldr	r2, [r3, #20]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006240:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d103      	bne.n	8006252 <HAL_DMA_IRQHandler+0x1da>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800624e:	2b00      	cmp	r3, #0
 8006250:	d007      	beq.n	8006262 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0208 	bic.w	r2, r2, #8
 8006260:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006266:	223f      	movs	r2, #63	@ 0x3f
 8006268:	409a      	lsls	r2, r3
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006282:	2b00      	cmp	r3, #0
 8006284:	d07e      	beq.n	8006384 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	4798      	blx	r3
        }
        return;
 800628e:	e079      	b.n	8006384 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d01d      	beq.n	80062da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10d      	bne.n	80062c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d031      	beq.n	8006318 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	4798      	blx	r3
 80062bc:	e02c      	b.n	8006318 <HAL_DMA_IRQHandler+0x2a0>
 80062be:	bf00      	nop
 80062c0:	20000060 	.word	0x20000060
 80062c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d023      	beq.n	8006318 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	4798      	blx	r3
 80062d8:	e01e      	b.n	8006318 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10f      	bne.n	8006308 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 0210 	bic.w	r2, r2, #16
 80062f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800631c:	2b00      	cmp	r3, #0
 800631e:	d032      	beq.n	8006386 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d022      	beq.n	8006372 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2205      	movs	r2, #5
 8006330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0201 	bic.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	3301      	adds	r3, #1
 8006348:	60bb      	str	r3, [r7, #8]
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	429a      	cmp	r2, r3
 800634e:	d307      	bcc.n	8006360 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1f2      	bne.n	8006344 <HAL_DMA_IRQHandler+0x2cc>
 800635e:	e000      	b.n	8006362 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006360:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	4798      	blx	r3
 8006382:	e000      	b.n	8006386 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006384:	bf00      	nop
    }
  }
}
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80063a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	2b40      	cmp	r3, #64	@ 0x40
 80063b8:	d108      	bne.n	80063cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80063ca:	e007      	b.n	80063dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	60da      	str	r2, [r3, #12]
}
 80063dc:	bf00      	nop
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	3b10      	subs	r3, #16
 80063f8:	4a14      	ldr	r2, [pc, #80]	@ (800644c <DMA_CalcBaseAndBitshift+0x64>)
 80063fa:	fba2 2303 	umull	r2, r3, r2, r3
 80063fe:	091b      	lsrs	r3, r3, #4
 8006400:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006402:	4a13      	ldr	r2, [pc, #76]	@ (8006450 <DMA_CalcBaseAndBitshift+0x68>)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4413      	add	r3, r2
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b03      	cmp	r3, #3
 8006414:	d909      	bls.n	800642a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800641e:	f023 0303 	bic.w	r3, r3, #3
 8006422:	1d1a      	adds	r2, r3, #4
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	659a      	str	r2, [r3, #88]	@ 0x58
 8006428:	e007      	b.n	800643a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006432:	f023 0303 	bic.w	r3, r3, #3
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	aaaaaaab 	.word	0xaaaaaaab
 8006450:	0800e6bc 	.word	0x0800e6bc

08006454 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800645c:	2300      	movs	r3, #0
 800645e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006464:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d11f      	bne.n	80064ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2b03      	cmp	r3, #3
 8006472:	d856      	bhi.n	8006522 <DMA_CheckFifoParam+0xce>
 8006474:	a201      	add	r2, pc, #4	@ (adr r2, 800647c <DMA_CheckFifoParam+0x28>)
 8006476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647a:	bf00      	nop
 800647c:	0800648d 	.word	0x0800648d
 8006480:	0800649f 	.word	0x0800649f
 8006484:	0800648d 	.word	0x0800648d
 8006488:	08006523 	.word	0x08006523
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006490:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d046      	beq.n	8006526 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800649c:	e043      	b.n	8006526 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80064a6:	d140      	bne.n	800652a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064ac:	e03d      	b.n	800652a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064b6:	d121      	bne.n	80064fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d837      	bhi.n	800652e <DMA_CheckFifoParam+0xda>
 80064be:	a201      	add	r2, pc, #4	@ (adr r2, 80064c4 <DMA_CheckFifoParam+0x70>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080064d5 	.word	0x080064d5
 80064c8:	080064db 	.word	0x080064db
 80064cc:	080064d5 	.word	0x080064d5
 80064d0:	080064ed 	.word	0x080064ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	73fb      	strb	r3, [r7, #15]
      break;
 80064d8:	e030      	b.n	800653c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d025      	beq.n	8006532 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064ea:	e022      	b.n	8006532 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80064f4:	d11f      	bne.n	8006536 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80064fa:	e01c      	b.n	8006536 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d903      	bls.n	800650a <DMA_CheckFifoParam+0xb6>
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b03      	cmp	r3, #3
 8006506:	d003      	beq.n	8006510 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006508:	e018      	b.n	800653c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	73fb      	strb	r3, [r7, #15]
      break;
 800650e:	e015      	b.n	800653c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006514:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00e      	beq.n	800653a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	73fb      	strb	r3, [r7, #15]
      break;
 8006520:	e00b      	b.n	800653a <DMA_CheckFifoParam+0xe6>
      break;
 8006522:	bf00      	nop
 8006524:	e00a      	b.n	800653c <DMA_CheckFifoParam+0xe8>
      break;
 8006526:	bf00      	nop
 8006528:	e008      	b.n	800653c <DMA_CheckFifoParam+0xe8>
      break;
 800652a:	bf00      	nop
 800652c:	e006      	b.n	800653c <DMA_CheckFifoParam+0xe8>
      break;
 800652e:	bf00      	nop
 8006530:	e004      	b.n	800653c <DMA_CheckFifoParam+0xe8>
      break;
 8006532:	bf00      	nop
 8006534:	e002      	b.n	800653c <DMA_CheckFifoParam+0xe8>
      break;   
 8006536:	bf00      	nop
 8006538:	e000      	b.n	800653c <DMA_CheckFifoParam+0xe8>
      break;
 800653a:	bf00      	nop
    }
  } 
  
  return status; 
 800653c:	7bfb      	ldrb	r3, [r7, #15]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop

0800654c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800654c:	b480      	push	{r7}
 800654e:	b089      	sub	sp, #36	@ 0x24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006556:	2300      	movs	r3, #0
 8006558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800655a:	2300      	movs	r3, #0
 800655c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800655e:	2300      	movs	r3, #0
 8006560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006562:	2300      	movs	r3, #0
 8006564:	61fb      	str	r3, [r7, #28]
 8006566:	e16b      	b.n	8006840 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006568:	2201      	movs	r2, #1
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	fa02 f303 	lsl.w	r3, r2, r3
 8006570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4013      	ands	r3, r2
 800657a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	429a      	cmp	r2, r3
 8006582:	f040 815a 	bne.w	800683a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	2b01      	cmp	r3, #1
 8006590:	d005      	beq.n	800659e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800659a:	2b02      	cmp	r3, #2
 800659c:	d130      	bne.n	8006600 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	005b      	lsls	r3, r3, #1
 80065a8:	2203      	movs	r2, #3
 80065aa:	fa02 f303 	lsl.w	r3, r2, r3
 80065ae:	43db      	mvns	r3, r3
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	4013      	ands	r3, r2
 80065b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	fa02 f303 	lsl.w	r3, r2, r3
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065d4:	2201      	movs	r2, #1
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	fa02 f303 	lsl.w	r3, r2, r3
 80065dc:	43db      	mvns	r3, r3
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	4013      	ands	r3, r2
 80065e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	091b      	lsrs	r3, r3, #4
 80065ea:	f003 0201 	and.w	r2, r3, #1
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	fa02 f303 	lsl.w	r3, r2, r3
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f003 0303 	and.w	r3, r3, #3
 8006608:	2b03      	cmp	r3, #3
 800660a:	d017      	beq.n	800663c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	005b      	lsls	r3, r3, #1
 8006616:	2203      	movs	r2, #3
 8006618:	fa02 f303 	lsl.w	r3, r2, r3
 800661c:	43db      	mvns	r3, r3
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	4013      	ands	r3, r2
 8006622:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	fa02 f303 	lsl.w	r3, r2, r3
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	4313      	orrs	r3, r2
 8006634:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d123      	bne.n	8006690 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	08da      	lsrs	r2, r3, #3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3208      	adds	r2, #8
 8006650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006654:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	220f      	movs	r2, #15
 8006660:	fa02 f303 	lsl.w	r3, r2, r3
 8006664:	43db      	mvns	r3, r3
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	4013      	ands	r3, r2
 800666a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	691a      	ldr	r2, [r3, #16]
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	fa02 f303 	lsl.w	r3, r2, r3
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	4313      	orrs	r3, r2
 8006680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	08da      	lsrs	r2, r3, #3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3208      	adds	r2, #8
 800668a:	69b9      	ldr	r1, [r7, #24]
 800668c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	2203      	movs	r2, #3
 800669c:	fa02 f303 	lsl.w	r3, r2, r3
 80066a0:	43db      	mvns	r3, r3
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	4013      	ands	r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f003 0203 	and.w	r2, r3, #3
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	fa02 f303 	lsl.w	r3, r2, r3
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 80b4 	beq.w	800683a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066d2:	2300      	movs	r3, #0
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	4b60      	ldr	r3, [pc, #384]	@ (8006858 <HAL_GPIO_Init+0x30c>)
 80066d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066da:	4a5f      	ldr	r2, [pc, #380]	@ (8006858 <HAL_GPIO_Init+0x30c>)
 80066dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80066e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80066e2:	4b5d      	ldr	r3, [pc, #372]	@ (8006858 <HAL_GPIO_Init+0x30c>)
 80066e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066ee:	4a5b      	ldr	r2, [pc, #364]	@ (800685c <HAL_GPIO_Init+0x310>)
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	089b      	lsrs	r3, r3, #2
 80066f4:	3302      	adds	r3, #2
 80066f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	f003 0303 	and.w	r3, r3, #3
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	220f      	movs	r2, #15
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	43db      	mvns	r3, r3
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	4013      	ands	r3, r2
 8006710:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a52      	ldr	r2, [pc, #328]	@ (8006860 <HAL_GPIO_Init+0x314>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d02b      	beq.n	8006772 <HAL_GPIO_Init+0x226>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a51      	ldr	r2, [pc, #324]	@ (8006864 <HAL_GPIO_Init+0x318>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d025      	beq.n	800676e <HAL_GPIO_Init+0x222>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a50      	ldr	r2, [pc, #320]	@ (8006868 <HAL_GPIO_Init+0x31c>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d01f      	beq.n	800676a <HAL_GPIO_Init+0x21e>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a4f      	ldr	r2, [pc, #316]	@ (800686c <HAL_GPIO_Init+0x320>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d019      	beq.n	8006766 <HAL_GPIO_Init+0x21a>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a4e      	ldr	r2, [pc, #312]	@ (8006870 <HAL_GPIO_Init+0x324>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d013      	beq.n	8006762 <HAL_GPIO_Init+0x216>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a4d      	ldr	r2, [pc, #308]	@ (8006874 <HAL_GPIO_Init+0x328>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d00d      	beq.n	800675e <HAL_GPIO_Init+0x212>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a4c      	ldr	r2, [pc, #304]	@ (8006878 <HAL_GPIO_Init+0x32c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d007      	beq.n	800675a <HAL_GPIO_Init+0x20e>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a4b      	ldr	r2, [pc, #300]	@ (800687c <HAL_GPIO_Init+0x330>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d101      	bne.n	8006756 <HAL_GPIO_Init+0x20a>
 8006752:	2307      	movs	r3, #7
 8006754:	e00e      	b.n	8006774 <HAL_GPIO_Init+0x228>
 8006756:	2308      	movs	r3, #8
 8006758:	e00c      	b.n	8006774 <HAL_GPIO_Init+0x228>
 800675a:	2306      	movs	r3, #6
 800675c:	e00a      	b.n	8006774 <HAL_GPIO_Init+0x228>
 800675e:	2305      	movs	r3, #5
 8006760:	e008      	b.n	8006774 <HAL_GPIO_Init+0x228>
 8006762:	2304      	movs	r3, #4
 8006764:	e006      	b.n	8006774 <HAL_GPIO_Init+0x228>
 8006766:	2303      	movs	r3, #3
 8006768:	e004      	b.n	8006774 <HAL_GPIO_Init+0x228>
 800676a:	2302      	movs	r3, #2
 800676c:	e002      	b.n	8006774 <HAL_GPIO_Init+0x228>
 800676e:	2301      	movs	r3, #1
 8006770:	e000      	b.n	8006774 <HAL_GPIO_Init+0x228>
 8006772:	2300      	movs	r3, #0
 8006774:	69fa      	ldr	r2, [r7, #28]
 8006776:	f002 0203 	and.w	r2, r2, #3
 800677a:	0092      	lsls	r2, r2, #2
 800677c:	4093      	lsls	r3, r2
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	4313      	orrs	r3, r2
 8006782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006784:	4935      	ldr	r1, [pc, #212]	@ (800685c <HAL_GPIO_Init+0x310>)
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	089b      	lsrs	r3, r3, #2
 800678a:	3302      	adds	r3, #2
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006792:	4b3b      	ldr	r3, [pc, #236]	@ (8006880 <HAL_GPIO_Init+0x334>)
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	43db      	mvns	r3, r3
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	4013      	ands	r3, r2
 80067a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80067b6:	4a32      	ldr	r2, [pc, #200]	@ (8006880 <HAL_GPIO_Init+0x334>)
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80067bc:	4b30      	ldr	r3, [pc, #192]	@ (8006880 <HAL_GPIO_Init+0x334>)
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	43db      	mvns	r3, r3
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	4013      	ands	r3, r2
 80067ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	4313      	orrs	r3, r2
 80067de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80067e0:	4a27      	ldr	r2, [pc, #156]	@ (8006880 <HAL_GPIO_Init+0x334>)
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80067e6:	4b26      	ldr	r3, [pc, #152]	@ (8006880 <HAL_GPIO_Init+0x334>)
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	43db      	mvns	r3, r3
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	4013      	ands	r3, r2
 80067f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	4313      	orrs	r3, r2
 8006808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800680a:	4a1d      	ldr	r2, [pc, #116]	@ (8006880 <HAL_GPIO_Init+0x334>)
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006810:	4b1b      	ldr	r3, [pc, #108]	@ (8006880 <HAL_GPIO_Init+0x334>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	43db      	mvns	r3, r3
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	4013      	ands	r3, r2
 800681e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	4313      	orrs	r3, r2
 8006832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006834:	4a12      	ldr	r2, [pc, #72]	@ (8006880 <HAL_GPIO_Init+0x334>)
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	3301      	adds	r3, #1
 800683e:	61fb      	str	r3, [r7, #28]
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	2b0f      	cmp	r3, #15
 8006844:	f67f ae90 	bls.w	8006568 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006848:	bf00      	nop
 800684a:	bf00      	nop
 800684c:	3724      	adds	r7, #36	@ 0x24
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40023800 	.word	0x40023800
 800685c:	40013800 	.word	0x40013800
 8006860:	40020000 	.word	0x40020000
 8006864:	40020400 	.word	0x40020400
 8006868:	40020800 	.word	0x40020800
 800686c:	40020c00 	.word	0x40020c00
 8006870:	40021000 	.word	0x40021000
 8006874:	40021400 	.word	0x40021400
 8006878:	40021800 	.word	0x40021800
 800687c:	40021c00 	.word	0x40021c00
 8006880:	40013c00 	.word	0x40013c00

08006884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	460b      	mov	r3, r1
 800688e:	807b      	strh	r3, [r7, #2]
 8006890:	4613      	mov	r3, r2
 8006892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006894:	787b      	ldrb	r3, [r7, #1]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800689a:	887a      	ldrh	r2, [r7, #2]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80068a0:	e003      	b.n	80068aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80068a2:	887b      	ldrh	r3, [r7, #2]
 80068a4:	041a      	lsls	r2, r3, #16
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	619a      	str	r2, [r3, #24]
}
 80068aa:	bf00      	nop
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
	...

080068b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	4603      	mov	r3, r0
 80068c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80068c2:	4b08      	ldr	r3, [pc, #32]	@ (80068e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068c4:	695a      	ldr	r2, [r3, #20]
 80068c6:	88fb      	ldrh	r3, [r7, #6]
 80068c8:	4013      	ands	r3, r2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d006      	beq.n	80068dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80068ce:	4a05      	ldr	r2, [pc, #20]	@ (80068e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068d0:	88fb      	ldrh	r3, [r7, #6]
 80068d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80068d4:	88fb      	ldrh	r3, [r7, #6]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fb f930 	bl	8001b3c <HAL_GPIO_EXTI_Callback>
  }
}
 80068dc:	bf00      	nop
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	40013c00 	.word	0x40013c00

080068e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e12b      	b.n	8006b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d106      	bne.n	8006914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7fd fb7c 	bl	800400c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2224      	movs	r2, #36	@ 0x24
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f022 0201 	bic.w	r2, r2, #1
 800692a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800693a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800694a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800694c:	f001 fc2c 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 8006950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	4a81      	ldr	r2, [pc, #516]	@ (8006b5c <HAL_I2C_Init+0x274>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d807      	bhi.n	800696c <HAL_I2C_Init+0x84>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4a80      	ldr	r2, [pc, #512]	@ (8006b60 <HAL_I2C_Init+0x278>)
 8006960:	4293      	cmp	r3, r2
 8006962:	bf94      	ite	ls
 8006964:	2301      	movls	r3, #1
 8006966:	2300      	movhi	r3, #0
 8006968:	b2db      	uxtb	r3, r3
 800696a:	e006      	b.n	800697a <HAL_I2C_Init+0x92>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4a7d      	ldr	r2, [pc, #500]	@ (8006b64 <HAL_I2C_Init+0x27c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	bf94      	ite	ls
 8006974:	2301      	movls	r3, #1
 8006976:	2300      	movhi	r3, #0
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e0e7      	b.n	8006b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	4a78      	ldr	r2, [pc, #480]	@ (8006b68 <HAL_I2C_Init+0x280>)
 8006986:	fba2 2303 	umull	r2, r3, r2, r3
 800698a:	0c9b      	lsrs	r3, r3, #18
 800698c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	4a6a      	ldr	r2, [pc, #424]	@ (8006b5c <HAL_I2C_Init+0x274>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d802      	bhi.n	80069bc <HAL_I2C_Init+0xd4>
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	3301      	adds	r3, #1
 80069ba:	e009      	b.n	80069d0 <HAL_I2C_Init+0xe8>
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80069c2:	fb02 f303 	mul.w	r3, r2, r3
 80069c6:	4a69      	ldr	r2, [pc, #420]	@ (8006b6c <HAL_I2C_Init+0x284>)
 80069c8:	fba2 2303 	umull	r2, r3, r2, r3
 80069cc:	099b      	lsrs	r3, r3, #6
 80069ce:	3301      	adds	r3, #1
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	6812      	ldr	r2, [r2, #0]
 80069d4:	430b      	orrs	r3, r1
 80069d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80069e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	495c      	ldr	r1, [pc, #368]	@ (8006b5c <HAL_I2C_Init+0x274>)
 80069ec:	428b      	cmp	r3, r1
 80069ee:	d819      	bhi.n	8006a24 <HAL_I2C_Init+0x13c>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	1e59      	subs	r1, r3, #1
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80069fe:	1c59      	adds	r1, r3, #1
 8006a00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006a04:	400b      	ands	r3, r1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <HAL_I2C_Init+0x138>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	1e59      	subs	r1, r3, #1
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a18:	3301      	adds	r3, #1
 8006a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a1e:	e051      	b.n	8006ac4 <HAL_I2C_Init+0x1dc>
 8006a20:	2304      	movs	r3, #4
 8006a22:	e04f      	b.n	8006ac4 <HAL_I2C_Init+0x1dc>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d111      	bne.n	8006a50 <HAL_I2C_Init+0x168>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	1e58      	subs	r0, r3, #1
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6859      	ldr	r1, [r3, #4]
 8006a34:	460b      	mov	r3, r1
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	440b      	add	r3, r1
 8006a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a3e:	3301      	adds	r3, #1
 8006a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	bf0c      	ite	eq
 8006a48:	2301      	moveq	r3, #1
 8006a4a:	2300      	movne	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	e012      	b.n	8006a76 <HAL_I2C_Init+0x18e>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	1e58      	subs	r0, r3, #1
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6859      	ldr	r1, [r3, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	0099      	lsls	r1, r3, #2
 8006a60:	440b      	add	r3, r1
 8006a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a66:	3301      	adds	r3, #1
 8006a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	bf0c      	ite	eq
 8006a70:	2301      	moveq	r3, #1
 8006a72:	2300      	movne	r3, #0
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <HAL_I2C_Init+0x196>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e022      	b.n	8006ac4 <HAL_I2C_Init+0x1dc>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10e      	bne.n	8006aa4 <HAL_I2C_Init+0x1bc>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	1e58      	subs	r0, r3, #1
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6859      	ldr	r1, [r3, #4]
 8006a8e:	460b      	mov	r3, r1
 8006a90:	005b      	lsls	r3, r3, #1
 8006a92:	440b      	add	r3, r1
 8006a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a98:	3301      	adds	r3, #1
 8006a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aa2:	e00f      	b.n	8006ac4 <HAL_I2C_Init+0x1dc>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	1e58      	subs	r0, r3, #1
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6859      	ldr	r1, [r3, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	440b      	add	r3, r1
 8006ab2:	0099      	lsls	r1, r3, #2
 8006ab4:	440b      	add	r3, r1
 8006ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006aba:	3301      	adds	r3, #1
 8006abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ac0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	6809      	ldr	r1, [r1, #0]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69da      	ldr	r2, [r3, #28]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006af2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	6911      	ldr	r1, [r2, #16]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	68d2      	ldr	r2, [r2, #12]
 8006afe:	4311      	orrs	r1, r2
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6812      	ldr	r2, [r2, #0]
 8006b04:	430b      	orrs	r3, r1
 8006b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	695a      	ldr	r2, [r3, #20]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0201 	orr.w	r2, r2, #1
 8006b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	000186a0 	.word	0x000186a0
 8006b60:	001e847f 	.word	0x001e847f
 8006b64:	003d08ff 	.word	0x003d08ff
 8006b68:	431bde83 	.word	0x431bde83
 8006b6c:	10624dd3 	.word	0x10624dd3

08006b70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af02      	add	r7, sp, #8
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	4608      	mov	r0, r1
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	4603      	mov	r3, r0
 8006b80:	817b      	strh	r3, [r7, #10]
 8006b82:	460b      	mov	r3, r1
 8006b84:	813b      	strh	r3, [r7, #8]
 8006b86:	4613      	mov	r3, r2
 8006b88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b8a:	f7fe f933 	bl	8004df4 <HAL_GetTick>
 8006b8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b20      	cmp	r3, #32
 8006b9a:	f040 80d9 	bne.w	8006d50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	2319      	movs	r3, #25
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	496d      	ldr	r1, [pc, #436]	@ (8006d5c <HAL_I2C_Mem_Write+0x1ec>)
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 fc8b 	bl	80074c4 <I2C_WaitOnFlagUntilTimeout>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e0cc      	b.n	8006d52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d101      	bne.n	8006bc6 <HAL_I2C_Mem_Write+0x56>
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	e0c5      	b.n	8006d52 <HAL_I2C_Mem_Write+0x1e2>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d007      	beq.n	8006bec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0201 	orr.w	r2, r2, #1
 8006bea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2221      	movs	r2, #33	@ 0x21
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2240      	movs	r2, #64	@ 0x40
 8006c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a3a      	ldr	r2, [r7, #32]
 8006c16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4a4d      	ldr	r2, [pc, #308]	@ (8006d60 <HAL_I2C_Mem_Write+0x1f0>)
 8006c2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c2e:	88f8      	ldrh	r0, [r7, #6]
 8006c30:	893a      	ldrh	r2, [r7, #8]
 8006c32:	8979      	ldrh	r1, [r7, #10]
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	9301      	str	r3, [sp, #4]
 8006c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 fac2 	bl	80071c8 <I2C_RequestMemoryWrite>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d052      	beq.n	8006cf0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e081      	b.n	8006d52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 fd50 	bl	80076f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00d      	beq.n	8006c7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d107      	bne.n	8006c76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e06b      	b.n	8006d52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7e:	781a      	ldrb	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c94:	3b01      	subs	r3, #1
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b04      	cmp	r3, #4
 8006cb6:	d11b      	bne.n	8006cf0 <HAL_I2C_Mem_Write+0x180>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d017      	beq.n	8006cf0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc4:	781a      	ldrb	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1aa      	bne.n	8006c4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 fd43 	bl	8007788 <I2C_WaitOnBTFFlagUntilTimeout>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00d      	beq.n	8006d24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	d107      	bne.n	8006d20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e016      	b.n	8006d52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	e000      	b.n	8006d52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006d50:	2302      	movs	r3, #2
  }
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	00100002 	.word	0x00100002
 8006d60:	ffff0000 	.word	0xffff0000

08006d64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08c      	sub	sp, #48	@ 0x30
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	4608      	mov	r0, r1
 8006d6e:	4611      	mov	r1, r2
 8006d70:	461a      	mov	r2, r3
 8006d72:	4603      	mov	r3, r0
 8006d74:	817b      	strh	r3, [r7, #10]
 8006d76:	460b      	mov	r3, r1
 8006d78:	813b      	strh	r3, [r7, #8]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d7e:	f7fe f839 	bl	8004df4 <HAL_GetTick>
 8006d82:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b20      	cmp	r3, #32
 8006d8e:	f040 8214 	bne.w	80071ba <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	2319      	movs	r3, #25
 8006d98:	2201      	movs	r2, #1
 8006d9a:	497b      	ldr	r1, [pc, #492]	@ (8006f88 <HAL_I2C_Mem_Read+0x224>)
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 fb91 	bl	80074c4 <I2C_WaitOnFlagUntilTimeout>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006da8:	2302      	movs	r3, #2
 8006daa:	e207      	b.n	80071bc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d101      	bne.n	8006dba <HAL_I2C_Mem_Read+0x56>
 8006db6:	2302      	movs	r3, #2
 8006db8:	e200      	b.n	80071bc <HAL_I2C_Mem_Read+0x458>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d007      	beq.n	8006de0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f042 0201 	orr.w	r2, r2, #1
 8006dde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006dee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2222      	movs	r2, #34	@ 0x22
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2240      	movs	r2, #64	@ 0x40
 8006dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006e10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4a5b      	ldr	r2, [pc, #364]	@ (8006f8c <HAL_I2C_Mem_Read+0x228>)
 8006e20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e22:	88f8      	ldrh	r0, [r7, #6]
 8006e24:	893a      	ldrh	r2, [r7, #8]
 8006e26:	8979      	ldrh	r1, [r7, #10]
 8006e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2a:	9301      	str	r3, [sp, #4]
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	4603      	mov	r3, r0
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 fa5e 	bl	80072f4 <I2C_RequestMemoryRead>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e1bc      	b.n	80071bc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d113      	bne.n	8006e72 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	623b      	str	r3, [r7, #32]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	623b      	str	r3, [r7, #32]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	623b      	str	r3, [r7, #32]
 8006e5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	e190      	b.n	8007194 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d11b      	bne.n	8006eb2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	61fb      	str	r3, [r7, #28]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	61fb      	str	r3, [r7, #28]
 8006e9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	e170      	b.n	8007194 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d11b      	bne.n	8006ef2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ec8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ed8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eda:	2300      	movs	r3, #0
 8006edc:	61bb      	str	r3, [r7, #24]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	61bb      	str	r3, [r7, #24]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	e150      	b.n	8007194 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	617b      	str	r3, [r7, #20]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	617b      	str	r3, [r7, #20]
 8006f06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006f08:	e144      	b.n	8007194 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	f200 80f1 	bhi.w	80070f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d123      	bne.n	8006f64 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 fc79 	bl	8007818 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e145      	b.n	80071bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691a      	ldr	r2, [r3, #16]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3a:	b2d2      	uxtb	r2, r2
 8006f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f62:	e117      	b.n	8007194 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d14e      	bne.n	800700a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f72:	2200      	movs	r2, #0
 8006f74:	4906      	ldr	r1, [pc, #24]	@ (8006f90 <HAL_I2C_Mem_Read+0x22c>)
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 faa4 	bl	80074c4 <I2C_WaitOnFlagUntilTimeout>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d008      	beq.n	8006f94 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e11a      	b.n	80071bc <HAL_I2C_Mem_Read+0x458>
 8006f86:	bf00      	nop
 8006f88:	00100002 	.word	0x00100002
 8006f8c:	ffff0000 	.word	0xffff0000
 8006f90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	691a      	ldr	r2, [r3, #16]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	691a      	ldr	r2, [r3, #16]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe8:	1c5a      	adds	r2, r3, #1
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	3b01      	subs	r3, #1
 8007002:	b29a      	uxth	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007008:	e0c4      	b.n	8007194 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800700a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007010:	2200      	movs	r2, #0
 8007012:	496c      	ldr	r1, [pc, #432]	@ (80071c4 <HAL_I2C_Mem_Read+0x460>)
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 fa55 	bl	80074c4 <I2C_WaitOnFlagUntilTimeout>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e0cb      	b.n	80071bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007032:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	691a      	ldr	r2, [r3, #16]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007050:	3b01      	subs	r3, #1
 8007052:	b29a      	uxth	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800705c:	b29b      	uxth	r3, r3
 800705e:	3b01      	subs	r3, #1
 8007060:	b29a      	uxth	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800706c:	2200      	movs	r2, #0
 800706e:	4955      	ldr	r1, [pc, #340]	@ (80071c4 <HAL_I2C_Mem_Read+0x460>)
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 fa27 	bl	80074c4 <I2C_WaitOnFlagUntilTimeout>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e09d      	b.n	80071bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800708e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ac:	3b01      	subs	r3, #1
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	691a      	ldr	r2, [r3, #16]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070cc:	b2d2      	uxtb	r2, r2
 80070ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070de:	3b01      	subs	r3, #1
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80070f4:	e04e      	b.n	8007194 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f000 fb8c 	bl	8007818 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e058      	b.n	80071bc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	691a      	ldr	r2, [r3, #16]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007114:	b2d2      	uxtb	r2, r2
 8007116:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007126:	3b01      	subs	r3, #1
 8007128:	b29a      	uxth	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007132:	b29b      	uxth	r3, r3
 8007134:	3b01      	subs	r3, #1
 8007136:	b29a      	uxth	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	f003 0304 	and.w	r3, r3, #4
 8007146:	2b04      	cmp	r3, #4
 8007148:	d124      	bne.n	8007194 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800714e:	2b03      	cmp	r3, #3
 8007150:	d107      	bne.n	8007162 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007160:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	691a      	ldr	r2, [r3, #16]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716c:	b2d2      	uxtb	r2, r2
 800716e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007174:	1c5a      	adds	r2, r3, #1
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800718a:	b29b      	uxth	r3, r3
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007198:	2b00      	cmp	r3, #0
 800719a:	f47f aeb6 	bne.w	8006f0a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	e000      	b.n	80071bc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80071ba:	2302      	movs	r3, #2
  }
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3728      	adds	r7, #40	@ 0x28
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	00010004 	.word	0x00010004

080071c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b088      	sub	sp, #32
 80071cc:	af02      	add	r7, sp, #8
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	4608      	mov	r0, r1
 80071d2:	4611      	mov	r1, r2
 80071d4:	461a      	mov	r2, r3
 80071d6:	4603      	mov	r3, r0
 80071d8:	817b      	strh	r3, [r7, #10]
 80071da:	460b      	mov	r3, r1
 80071dc:	813b      	strh	r3, [r7, #8]
 80071de:	4613      	mov	r3, r2
 80071e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f000 f960 	bl	80074c4 <I2C_WaitOnFlagUntilTimeout>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00d      	beq.n	8007226 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007214:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007218:	d103      	bne.n	8007222 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007220:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e05f      	b.n	80072e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007226:	897b      	ldrh	r3, [r7, #10]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	461a      	mov	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007234:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	6a3a      	ldr	r2, [r7, #32]
 800723a:	492d      	ldr	r1, [pc, #180]	@ (80072f0 <I2C_RequestMemoryWrite+0x128>)
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 f9bb 	bl	80075b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e04c      	b.n	80072e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800724c:	2300      	movs	r3, #0
 800724e:	617b      	str	r3, [r7, #20]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	617b      	str	r3, [r7, #20]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007264:	6a39      	ldr	r1, [r7, #32]
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f000 fa46 	bl	80076f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00d      	beq.n	800728e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007276:	2b04      	cmp	r3, #4
 8007278:	d107      	bne.n	800728a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007288:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e02b      	b.n	80072e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800728e:	88fb      	ldrh	r3, [r7, #6]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d105      	bne.n	80072a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007294:	893b      	ldrh	r3, [r7, #8]
 8007296:	b2da      	uxtb	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	611a      	str	r2, [r3, #16]
 800729e:	e021      	b.n	80072e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80072a0:	893b      	ldrh	r3, [r7, #8]
 80072a2:	0a1b      	lsrs	r3, r3, #8
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072b0:	6a39      	ldr	r1, [r7, #32]
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 fa20 	bl	80076f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00d      	beq.n	80072da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c2:	2b04      	cmp	r3, #4
 80072c4:	d107      	bne.n	80072d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e005      	b.n	80072e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072da:	893b      	ldrh	r3, [r7, #8]
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	00010002 	.word	0x00010002

080072f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b088      	sub	sp, #32
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	4608      	mov	r0, r1
 80072fe:	4611      	mov	r1, r2
 8007300:	461a      	mov	r2, r3
 8007302:	4603      	mov	r3, r0
 8007304:	817b      	strh	r3, [r7, #10]
 8007306:	460b      	mov	r3, r1
 8007308:	813b      	strh	r3, [r7, #8]
 800730a:	4613      	mov	r3, r2
 800730c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800731c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800732c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800732e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	2200      	movs	r2, #0
 8007336:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f000 f8c2 	bl	80074c4 <I2C_WaitOnFlagUntilTimeout>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00d      	beq.n	8007362 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007350:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007354:	d103      	bne.n	800735e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800735c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e0aa      	b.n	80074b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007362:	897b      	ldrh	r3, [r7, #10]
 8007364:	b2db      	uxtb	r3, r3
 8007366:	461a      	mov	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007370:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007374:	6a3a      	ldr	r2, [r7, #32]
 8007376:	4952      	ldr	r1, [pc, #328]	@ (80074c0 <I2C_RequestMemoryRead+0x1cc>)
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 f91d 	bl	80075b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e097      	b.n	80074b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007388:	2300      	movs	r3, #0
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	617b      	str	r3, [r7, #20]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	617b      	str	r3, [r7, #20]
 800739c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800739e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073a0:	6a39      	ldr	r1, [r7, #32]
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f000 f9a8 	bl	80076f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00d      	beq.n	80073ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	d107      	bne.n	80073c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e076      	b.n	80074b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073ca:	88fb      	ldrh	r3, [r7, #6]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d105      	bne.n	80073dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073d0:	893b      	ldrh	r3, [r7, #8]
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	611a      	str	r2, [r3, #16]
 80073da:	e021      	b.n	8007420 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80073dc:	893b      	ldrh	r3, [r7, #8]
 80073de:	0a1b      	lsrs	r3, r3, #8
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073ec:	6a39      	ldr	r1, [r7, #32]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 f982 	bl	80076f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00d      	beq.n	8007416 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fe:	2b04      	cmp	r3, #4
 8007400:	d107      	bne.n	8007412 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007410:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e050      	b.n	80074b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007416:	893b      	ldrh	r3, [r7, #8]
 8007418:	b2da      	uxtb	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007420:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007422:	6a39      	ldr	r1, [r7, #32]
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 f967 	bl	80076f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00d      	beq.n	800744c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007434:	2b04      	cmp	r3, #4
 8007436:	d107      	bne.n	8007448 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007446:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e035      	b.n	80074b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800745a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	2200      	movs	r2, #0
 8007464:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 f82b 	bl	80074c4 <I2C_WaitOnFlagUntilTimeout>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00d      	beq.n	8007490 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800747e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007482:	d103      	bne.n	800748c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800748a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e013      	b.n	80074b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007490:	897b      	ldrh	r3, [r7, #10]
 8007492:	b2db      	uxtb	r3, r3
 8007494:	f043 0301 	orr.w	r3, r3, #1
 8007498:	b2da      	uxtb	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a2:	6a3a      	ldr	r2, [r7, #32]
 80074a4:	4906      	ldr	r1, [pc, #24]	@ (80074c0 <I2C_RequestMemoryRead+0x1cc>)
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 f886 	bl	80075b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e000      	b.n	80074b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	00010002 	.word	0x00010002

080074c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	603b      	str	r3, [r7, #0]
 80074d0:	4613      	mov	r3, r2
 80074d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074d4:	e048      	b.n	8007568 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074dc:	d044      	beq.n	8007568 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074de:	f7fd fc89 	bl	8004df4 <HAL_GetTick>
 80074e2:	4602      	mov	r2, r0
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	683a      	ldr	r2, [r7, #0]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d302      	bcc.n	80074f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d139      	bne.n	8007568 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	0c1b      	lsrs	r3, r3, #16
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d10d      	bne.n	800751a <I2C_WaitOnFlagUntilTimeout+0x56>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	43da      	mvns	r2, r3
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	4013      	ands	r3, r2
 800750a:	b29b      	uxth	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	bf0c      	ite	eq
 8007510:	2301      	moveq	r3, #1
 8007512:	2300      	movne	r3, #0
 8007514:	b2db      	uxtb	r3, r3
 8007516:	461a      	mov	r2, r3
 8007518:	e00c      	b.n	8007534 <I2C_WaitOnFlagUntilTimeout+0x70>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	43da      	mvns	r2, r3
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	4013      	ands	r3, r2
 8007526:	b29b      	uxth	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	bf0c      	ite	eq
 800752c:	2301      	moveq	r3, #1
 800752e:	2300      	movne	r3, #0
 8007530:	b2db      	uxtb	r3, r3
 8007532:	461a      	mov	r2, r3
 8007534:	79fb      	ldrb	r3, [r7, #7]
 8007536:	429a      	cmp	r2, r3
 8007538:	d116      	bne.n	8007568 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2220      	movs	r2, #32
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007554:	f043 0220 	orr.w	r2, r3, #32
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e023      	b.n	80075b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	0c1b      	lsrs	r3, r3, #16
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b01      	cmp	r3, #1
 8007570:	d10d      	bne.n	800758e <I2C_WaitOnFlagUntilTimeout+0xca>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	695b      	ldr	r3, [r3, #20]
 8007578:	43da      	mvns	r2, r3
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	4013      	ands	r3, r2
 800757e:	b29b      	uxth	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	bf0c      	ite	eq
 8007584:	2301      	moveq	r3, #1
 8007586:	2300      	movne	r3, #0
 8007588:	b2db      	uxtb	r3, r3
 800758a:	461a      	mov	r2, r3
 800758c:	e00c      	b.n	80075a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	43da      	mvns	r2, r3
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	4013      	ands	r3, r2
 800759a:	b29b      	uxth	r3, r3
 800759c:	2b00      	cmp	r3, #0
 800759e:	bf0c      	ite	eq
 80075a0:	2301      	moveq	r3, #1
 80075a2:	2300      	movne	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	461a      	mov	r2, r3
 80075a8:	79fb      	ldrb	r3, [r7, #7]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d093      	beq.n	80074d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075c6:	e071      	b.n	80076ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075d6:	d123      	bne.n	8007620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80075f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2220      	movs	r2, #32
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760c:	f043 0204 	orr.w	r2, r3, #4
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e067      	b.n	80076f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007626:	d041      	beq.n	80076ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007628:	f7fd fbe4 	bl	8004df4 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	429a      	cmp	r2, r3
 8007636:	d302      	bcc.n	800763e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d136      	bne.n	80076ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	0c1b      	lsrs	r3, r3, #16
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b01      	cmp	r3, #1
 8007646:	d10c      	bne.n	8007662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	43da      	mvns	r2, r3
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	4013      	ands	r3, r2
 8007654:	b29b      	uxth	r3, r3
 8007656:	2b00      	cmp	r3, #0
 8007658:	bf14      	ite	ne
 800765a:	2301      	movne	r3, #1
 800765c:	2300      	moveq	r3, #0
 800765e:	b2db      	uxtb	r3, r3
 8007660:	e00b      	b.n	800767a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	43da      	mvns	r2, r3
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	4013      	ands	r3, r2
 800766e:	b29b      	uxth	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	bf14      	ite	ne
 8007674:	2301      	movne	r3, #1
 8007676:	2300      	moveq	r3, #0
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d016      	beq.n	80076ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2220      	movs	r2, #32
 8007688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007698:	f043 0220 	orr.w	r2, r3, #32
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e021      	b.n	80076f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	0c1b      	lsrs	r3, r3, #16
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d10c      	bne.n	80076d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	695b      	ldr	r3, [r3, #20]
 80076bc:	43da      	mvns	r2, r3
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	4013      	ands	r3, r2
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	bf14      	ite	ne
 80076c8:	2301      	movne	r3, #1
 80076ca:	2300      	moveq	r3, #0
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	e00b      	b.n	80076e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	43da      	mvns	r2, r3
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	4013      	ands	r3, r2
 80076dc:	b29b      	uxth	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bf14      	ite	ne
 80076e2:	2301      	movne	r3, #1
 80076e4:	2300      	moveq	r3, #0
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f47f af6d 	bne.w	80075c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007704:	e034      	b.n	8007770 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 f8e3 	bl	80078d2 <I2C_IsAcknowledgeFailed>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e034      	b.n	8007780 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800771c:	d028      	beq.n	8007770 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800771e:	f7fd fb69 	bl	8004df4 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	429a      	cmp	r2, r3
 800772c:	d302      	bcc.n	8007734 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d11d      	bne.n	8007770 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800773e:	2b80      	cmp	r3, #128	@ 0x80
 8007740:	d016      	beq.n	8007770 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2220      	movs	r2, #32
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775c:	f043 0220 	orr.w	r2, r3, #32
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e007      	b.n	8007780 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800777a:	2b80      	cmp	r3, #128	@ 0x80
 800777c:	d1c3      	bne.n	8007706 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007794:	e034      	b.n	8007800 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 f89b 	bl	80078d2 <I2C_IsAcknowledgeFailed>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e034      	b.n	8007810 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077ac:	d028      	beq.n	8007800 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ae:	f7fd fb21 	bl	8004df4 <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d302      	bcc.n	80077c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d11d      	bne.n	8007800 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	f003 0304 	and.w	r3, r3, #4
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d016      	beq.n	8007800 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2220      	movs	r2, #32
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ec:	f043 0220 	orr.w	r2, r3, #32
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e007      	b.n	8007810 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	f003 0304 	and.w	r3, r3, #4
 800780a:	2b04      	cmp	r3, #4
 800780c:	d1c3      	bne.n	8007796 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007824:	e049      	b.n	80078ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	f003 0310 	and.w	r3, r3, #16
 8007830:	2b10      	cmp	r3, #16
 8007832:	d119      	bne.n	8007868 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f06f 0210 	mvn.w	r2, #16
 800783c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2220      	movs	r2, #32
 8007848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e030      	b.n	80078ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007868:	f7fd fac4 	bl	8004df4 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	429a      	cmp	r2, r3
 8007876:	d302      	bcc.n	800787e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d11d      	bne.n	80078ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007888:	2b40      	cmp	r3, #64	@ 0x40
 800788a:	d016      	beq.n	80078ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2220      	movs	r2, #32
 8007896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a6:	f043 0220 	orr.w	r2, r3, #32
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e007      	b.n	80078ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078c4:	2b40      	cmp	r3, #64	@ 0x40
 80078c6:	d1ae      	bne.n	8007826 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b083      	sub	sp, #12
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078e8:	d11b      	bne.n	8007922 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80078f2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2220      	movs	r2, #32
 80078fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800790e:	f043 0204 	orr.w	r2, r3, #4
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e000      	b.n	8007924 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d101      	bne.n	8007942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e267      	b.n	8007e12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	d075      	beq.n	8007a3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800794e:	4b88      	ldr	r3, [pc, #544]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f003 030c 	and.w	r3, r3, #12
 8007956:	2b04      	cmp	r3, #4
 8007958:	d00c      	beq.n	8007974 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800795a:	4b85      	ldr	r3, [pc, #532]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007962:	2b08      	cmp	r3, #8
 8007964:	d112      	bne.n	800798c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007966:	4b82      	ldr	r3, [pc, #520]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800796e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007972:	d10b      	bne.n	800798c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007974:	4b7e      	ldr	r3, [pc, #504]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d05b      	beq.n	8007a38 <HAL_RCC_OscConfig+0x108>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d157      	bne.n	8007a38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e242      	b.n	8007e12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007994:	d106      	bne.n	80079a4 <HAL_RCC_OscConfig+0x74>
 8007996:	4b76      	ldr	r3, [pc, #472]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a75      	ldr	r2, [pc, #468]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 800799c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079a0:	6013      	str	r3, [r2, #0]
 80079a2:	e01d      	b.n	80079e0 <HAL_RCC_OscConfig+0xb0>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079ac:	d10c      	bne.n	80079c8 <HAL_RCC_OscConfig+0x98>
 80079ae:	4b70      	ldr	r3, [pc, #448]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a6f      	ldr	r2, [pc, #444]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 80079b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	4b6d      	ldr	r3, [pc, #436]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a6c      	ldr	r2, [pc, #432]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 80079c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	e00b      	b.n	80079e0 <HAL_RCC_OscConfig+0xb0>
 80079c8:	4b69      	ldr	r3, [pc, #420]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a68      	ldr	r2, [pc, #416]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 80079ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	4b66      	ldr	r3, [pc, #408]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a65      	ldr	r2, [pc, #404]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 80079da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d013      	beq.n	8007a10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079e8:	f7fd fa04 	bl	8004df4 <HAL_GetTick>
 80079ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079ee:	e008      	b.n	8007a02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079f0:	f7fd fa00 	bl	8004df4 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	2b64      	cmp	r3, #100	@ 0x64
 80079fc:	d901      	bls.n	8007a02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e207      	b.n	8007e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a02:	4b5b      	ldr	r3, [pc, #364]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d0f0      	beq.n	80079f0 <HAL_RCC_OscConfig+0xc0>
 8007a0e:	e014      	b.n	8007a3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a10:	f7fd f9f0 	bl	8004df4 <HAL_GetTick>
 8007a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a16:	e008      	b.n	8007a2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a18:	f7fd f9ec 	bl	8004df4 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	2b64      	cmp	r3, #100	@ 0x64
 8007a24:	d901      	bls.n	8007a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e1f3      	b.n	8007e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a2a:	4b51      	ldr	r3, [pc, #324]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1f0      	bne.n	8007a18 <HAL_RCC_OscConfig+0xe8>
 8007a36:	e000      	b.n	8007a3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d063      	beq.n	8007b0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a46:	4b4a      	ldr	r3, [pc, #296]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f003 030c 	and.w	r3, r3, #12
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00b      	beq.n	8007a6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a52:	4b47      	ldr	r3, [pc, #284]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a5a:	2b08      	cmp	r3, #8
 8007a5c:	d11c      	bne.n	8007a98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a5e:	4b44      	ldr	r3, [pc, #272]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d116      	bne.n	8007a98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a6a:	4b41      	ldr	r3, [pc, #260]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d005      	beq.n	8007a82 <HAL_RCC_OscConfig+0x152>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d001      	beq.n	8007a82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e1c7      	b.n	8007e12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a82:	4b3b      	ldr	r3, [pc, #236]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	4937      	ldr	r1, [pc, #220]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a96:	e03a      	b.n	8007b0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d020      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007aa0:	4b34      	ldr	r3, [pc, #208]	@ (8007b74 <HAL_RCC_OscConfig+0x244>)
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa6:	f7fd f9a5 	bl	8004df4 <HAL_GetTick>
 8007aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007aac:	e008      	b.n	8007ac0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007aae:	f7fd f9a1 	bl	8004df4 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e1a8      	b.n	8007e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0302 	and.w	r3, r3, #2
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d0f0      	beq.n	8007aae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007acc:	4b28      	ldr	r3, [pc, #160]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	00db      	lsls	r3, r3, #3
 8007ada:	4925      	ldr	r1, [pc, #148]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	600b      	str	r3, [r1, #0]
 8007ae0:	e015      	b.n	8007b0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ae2:	4b24      	ldr	r3, [pc, #144]	@ (8007b74 <HAL_RCC_OscConfig+0x244>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae8:	f7fd f984 	bl	8004df4 <HAL_GetTick>
 8007aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007aee:	e008      	b.n	8007b02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007af0:	f7fd f980 	bl	8004df4 <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d901      	bls.n	8007b02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e187      	b.n	8007e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b02:	4b1b      	ldr	r3, [pc, #108]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1f0      	bne.n	8007af0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0308 	and.w	r3, r3, #8
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d036      	beq.n	8007b88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d016      	beq.n	8007b50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b22:	4b15      	ldr	r3, [pc, #84]	@ (8007b78 <HAL_RCC_OscConfig+0x248>)
 8007b24:	2201      	movs	r2, #1
 8007b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b28:	f7fd f964 	bl	8004df4 <HAL_GetTick>
 8007b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b2e:	e008      	b.n	8007b42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b30:	f7fd f960 	bl	8004df4 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e167      	b.n	8007e12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b42:	4b0b      	ldr	r3, [pc, #44]	@ (8007b70 <HAL_RCC_OscConfig+0x240>)
 8007b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0f0      	beq.n	8007b30 <HAL_RCC_OscConfig+0x200>
 8007b4e:	e01b      	b.n	8007b88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b50:	4b09      	ldr	r3, [pc, #36]	@ (8007b78 <HAL_RCC_OscConfig+0x248>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b56:	f7fd f94d 	bl	8004df4 <HAL_GetTick>
 8007b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b5c:	e00e      	b.n	8007b7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b5e:	f7fd f949 	bl	8004df4 <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d907      	bls.n	8007b7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e150      	b.n	8007e12 <HAL_RCC_OscConfig+0x4e2>
 8007b70:	40023800 	.word	0x40023800
 8007b74:	42470000 	.word	0x42470000
 8007b78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b7c:	4b88      	ldr	r3, [pc, #544]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1ea      	bne.n	8007b5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0304 	and.w	r3, r3, #4
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 8097 	beq.w	8007cc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b96:	2300      	movs	r3, #0
 8007b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b9a:	4b81      	ldr	r3, [pc, #516]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10f      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60bb      	str	r3, [r7, #8]
 8007baa:	4b7d      	ldr	r3, [pc, #500]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bae:	4a7c      	ldr	r2, [pc, #496]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8007bb6:	4b7a      	ldr	r3, [pc, #488]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bbe:	60bb      	str	r3, [r7, #8]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bc6:	4b77      	ldr	r3, [pc, #476]	@ (8007da4 <HAL_RCC_OscConfig+0x474>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d118      	bne.n	8007c04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007bd2:	4b74      	ldr	r3, [pc, #464]	@ (8007da4 <HAL_RCC_OscConfig+0x474>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a73      	ldr	r2, [pc, #460]	@ (8007da4 <HAL_RCC_OscConfig+0x474>)
 8007bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bde:	f7fd f909 	bl	8004df4 <HAL_GetTick>
 8007be2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007be4:	e008      	b.n	8007bf8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007be6:	f7fd f905 	bl	8004df4 <HAL_GetTick>
 8007bea:	4602      	mov	r2, r0
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d901      	bls.n	8007bf8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e10c      	b.n	8007e12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8007da4 <HAL_RCC_OscConfig+0x474>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d0f0      	beq.n	8007be6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d106      	bne.n	8007c1a <HAL_RCC_OscConfig+0x2ea>
 8007c0c:	4b64      	ldr	r3, [pc, #400]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c10:	4a63      	ldr	r2, [pc, #396]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007c12:	f043 0301 	orr.w	r3, r3, #1
 8007c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c18:	e01c      	b.n	8007c54 <HAL_RCC_OscConfig+0x324>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	2b05      	cmp	r3, #5
 8007c20:	d10c      	bne.n	8007c3c <HAL_RCC_OscConfig+0x30c>
 8007c22:	4b5f      	ldr	r3, [pc, #380]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c26:	4a5e      	ldr	r2, [pc, #376]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007c28:	f043 0304 	orr.w	r3, r3, #4
 8007c2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c2e:	4b5c      	ldr	r3, [pc, #368]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c32:	4a5b      	ldr	r2, [pc, #364]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007c34:	f043 0301 	orr.w	r3, r3, #1
 8007c38:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c3a:	e00b      	b.n	8007c54 <HAL_RCC_OscConfig+0x324>
 8007c3c:	4b58      	ldr	r3, [pc, #352]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c40:	4a57      	ldr	r2, [pc, #348]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007c42:	f023 0301 	bic.w	r3, r3, #1
 8007c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c48:	4b55      	ldr	r3, [pc, #340]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c4c:	4a54      	ldr	r2, [pc, #336]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007c4e:	f023 0304 	bic.w	r3, r3, #4
 8007c52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d015      	beq.n	8007c88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c5c:	f7fd f8ca 	bl	8004df4 <HAL_GetTick>
 8007c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c62:	e00a      	b.n	8007c7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c64:	f7fd f8c6 	bl	8004df4 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d901      	bls.n	8007c7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e0cb      	b.n	8007e12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c7a:	4b49      	ldr	r3, [pc, #292]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d0ee      	beq.n	8007c64 <HAL_RCC_OscConfig+0x334>
 8007c86:	e014      	b.n	8007cb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c88:	f7fd f8b4 	bl	8004df4 <HAL_GetTick>
 8007c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c8e:	e00a      	b.n	8007ca6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c90:	f7fd f8b0 	bl	8004df4 <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d901      	bls.n	8007ca6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e0b5      	b.n	8007e12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ca6:	4b3e      	ldr	r3, [pc, #248]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007caa:	f003 0302 	and.w	r3, r3, #2
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1ee      	bne.n	8007c90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d105      	bne.n	8007cc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cb8:	4b39      	ldr	r3, [pc, #228]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cbc:	4a38      	ldr	r2, [pc, #224]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007cbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 80a1 	beq.w	8007e10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007cce:	4b34      	ldr	r3, [pc, #208]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f003 030c 	and.w	r3, r3, #12
 8007cd6:	2b08      	cmp	r3, #8
 8007cd8:	d05c      	beq.n	8007d94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d141      	bne.n	8007d66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ce2:	4b31      	ldr	r3, [pc, #196]	@ (8007da8 <HAL_RCC_OscConfig+0x478>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ce8:	f7fd f884 	bl	8004df4 <HAL_GetTick>
 8007cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cee:	e008      	b.n	8007d02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cf0:	f7fd f880 	bl	8004df4 <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d901      	bls.n	8007d02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e087      	b.n	8007e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d02:	4b27      	ldr	r3, [pc, #156]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1f0      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	69da      	ldr	r2, [r3, #28]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	431a      	orrs	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d1c:	019b      	lsls	r3, r3, #6
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d24:	085b      	lsrs	r3, r3, #1
 8007d26:	3b01      	subs	r3, #1
 8007d28:	041b      	lsls	r3, r3, #16
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d30:	061b      	lsls	r3, r3, #24
 8007d32:	491b      	ldr	r1, [pc, #108]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007d34:	4313      	orrs	r3, r2
 8007d36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d38:	4b1b      	ldr	r3, [pc, #108]	@ (8007da8 <HAL_RCC_OscConfig+0x478>)
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d3e:	f7fd f859 	bl	8004df4 <HAL_GetTick>
 8007d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d44:	e008      	b.n	8007d58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d46:	f7fd f855 	bl	8004df4 <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d901      	bls.n	8007d58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e05c      	b.n	8007e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d58:	4b11      	ldr	r3, [pc, #68]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d0f0      	beq.n	8007d46 <HAL_RCC_OscConfig+0x416>
 8007d64:	e054      	b.n	8007e10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d66:	4b10      	ldr	r3, [pc, #64]	@ (8007da8 <HAL_RCC_OscConfig+0x478>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d6c:	f7fd f842 	bl	8004df4 <HAL_GetTick>
 8007d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d72:	e008      	b.n	8007d86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d74:	f7fd f83e 	bl	8004df4 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d901      	bls.n	8007d86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e045      	b.n	8007e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d86:	4b06      	ldr	r3, [pc, #24]	@ (8007da0 <HAL_RCC_OscConfig+0x470>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1f0      	bne.n	8007d74 <HAL_RCC_OscConfig+0x444>
 8007d92:	e03d      	b.n	8007e10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d107      	bne.n	8007dac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e038      	b.n	8007e12 <HAL_RCC_OscConfig+0x4e2>
 8007da0:	40023800 	.word	0x40023800
 8007da4:	40007000 	.word	0x40007000
 8007da8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007dac:	4b1b      	ldr	r3, [pc, #108]	@ (8007e1c <HAL_RCC_OscConfig+0x4ec>)
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d028      	beq.n	8007e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d121      	bne.n	8007e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d11a      	bne.n	8007e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007ddc:	4013      	ands	r3, r2
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007de2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d111      	bne.n	8007e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df2:	085b      	lsrs	r3, r3, #1
 8007df4:	3b01      	subs	r3, #1
 8007df6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d107      	bne.n	8007e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d001      	beq.n	8007e10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e000      	b.n	8007e12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	40023800 	.word	0x40023800

08007e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e0cc      	b.n	8007fce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e34:	4b68      	ldr	r3, [pc, #416]	@ (8007fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0307 	and.w	r3, r3, #7
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d90c      	bls.n	8007e5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e42:	4b65      	ldr	r3, [pc, #404]	@ (8007fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	b2d2      	uxtb	r2, r2
 8007e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e4a:	4b63      	ldr	r3, [pc, #396]	@ (8007fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0307 	and.w	r3, r3, #7
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d001      	beq.n	8007e5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e0b8      	b.n	8007fce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0302 	and.w	r3, r3, #2
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d020      	beq.n	8007eaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d005      	beq.n	8007e80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e74:	4b59      	ldr	r3, [pc, #356]	@ (8007fdc <HAL_RCC_ClockConfig+0x1bc>)
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	4a58      	ldr	r2, [pc, #352]	@ (8007fdc <HAL_RCC_ClockConfig+0x1bc>)
 8007e7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007e7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0308 	and.w	r3, r3, #8
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d005      	beq.n	8007e98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e8c:	4b53      	ldr	r3, [pc, #332]	@ (8007fdc <HAL_RCC_ClockConfig+0x1bc>)
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	4a52      	ldr	r2, [pc, #328]	@ (8007fdc <HAL_RCC_ClockConfig+0x1bc>)
 8007e92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007e96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e98:	4b50      	ldr	r3, [pc, #320]	@ (8007fdc <HAL_RCC_ClockConfig+0x1bc>)
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	494d      	ldr	r1, [pc, #308]	@ (8007fdc <HAL_RCC_ClockConfig+0x1bc>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d044      	beq.n	8007f40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d107      	bne.n	8007ece <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ebe:	4b47      	ldr	r3, [pc, #284]	@ (8007fdc <HAL_RCC_ClockConfig+0x1bc>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d119      	bne.n	8007efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e07f      	b.n	8007fce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d003      	beq.n	8007ede <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007eda:	2b03      	cmp	r3, #3
 8007edc:	d107      	bne.n	8007eee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ede:	4b3f      	ldr	r3, [pc, #252]	@ (8007fdc <HAL_RCC_ClockConfig+0x1bc>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d109      	bne.n	8007efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e06f      	b.n	8007fce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eee:	4b3b      	ldr	r3, [pc, #236]	@ (8007fdc <HAL_RCC_ClockConfig+0x1bc>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e067      	b.n	8007fce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007efe:	4b37      	ldr	r3, [pc, #220]	@ (8007fdc <HAL_RCC_ClockConfig+0x1bc>)
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f023 0203 	bic.w	r2, r3, #3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	4934      	ldr	r1, [pc, #208]	@ (8007fdc <HAL_RCC_ClockConfig+0x1bc>)
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f10:	f7fc ff70 	bl	8004df4 <HAL_GetTick>
 8007f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f16:	e00a      	b.n	8007f2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f18:	f7fc ff6c 	bl	8004df4 <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d901      	bls.n	8007f2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e04f      	b.n	8007fce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8007fdc <HAL_RCC_ClockConfig+0x1bc>)
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f003 020c 	and.w	r2, r3, #12
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d1eb      	bne.n	8007f18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f40:	4b25      	ldr	r3, [pc, #148]	@ (8007fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0307 	and.w	r3, r3, #7
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d20c      	bcs.n	8007f68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f4e:	4b22      	ldr	r3, [pc, #136]	@ (8007fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007f50:	683a      	ldr	r2, [r7, #0]
 8007f52:	b2d2      	uxtb	r2, r2
 8007f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f56:	4b20      	ldr	r3, [pc, #128]	@ (8007fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0307 	and.w	r3, r3, #7
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d001      	beq.n	8007f68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e032      	b.n	8007fce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0304 	and.w	r3, r3, #4
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d008      	beq.n	8007f86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f74:	4b19      	ldr	r3, [pc, #100]	@ (8007fdc <HAL_RCC_ClockConfig+0x1bc>)
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	4916      	ldr	r1, [pc, #88]	@ (8007fdc <HAL_RCC_ClockConfig+0x1bc>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0308 	and.w	r3, r3, #8
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d009      	beq.n	8007fa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f92:	4b12      	ldr	r3, [pc, #72]	@ (8007fdc <HAL_RCC_ClockConfig+0x1bc>)
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	490e      	ldr	r1, [pc, #56]	@ (8007fdc <HAL_RCC_ClockConfig+0x1bc>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007fa6:	f000 f82d 	bl	8008004 <HAL_RCC_GetSysClockFreq>
 8007faa:	4602      	mov	r2, r0
 8007fac:	4b0b      	ldr	r3, [pc, #44]	@ (8007fdc <HAL_RCC_ClockConfig+0x1bc>)
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	091b      	lsrs	r3, r3, #4
 8007fb2:	f003 030f 	and.w	r3, r3, #15
 8007fb6:	490a      	ldr	r1, [pc, #40]	@ (8007fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8007fb8:	5ccb      	ldrb	r3, [r1, r3]
 8007fba:	fa22 f303 	lsr.w	r3, r2, r3
 8007fbe:	4a09      	ldr	r2, [pc, #36]	@ (8007fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8007fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007fc2:	4b09      	ldr	r3, [pc, #36]	@ (8007fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fc fed0 	bl	8004d6c <HAL_InitTick>

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	40023c00 	.word	0x40023c00
 8007fdc:	40023800 	.word	0x40023800
 8007fe0:	0800e6a4 	.word	0x0800e6a4
 8007fe4:	20000060 	.word	0x20000060
 8007fe8:	20000064 	.word	0x20000064

08007fec <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007ff0:	4b03      	ldr	r3, [pc, #12]	@ (8008000 <HAL_RCC_EnableCSS+0x14>)
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	601a      	str	r2, [r3, #0]
}
 8007ff6:	bf00      	nop
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	4247004c 	.word	0x4247004c

08008004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008008:	b090      	sub	sp, #64	@ 0x40
 800800a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800800c:	2300      	movs	r3, #0
 800800e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008010:	2300      	movs	r3, #0
 8008012:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008014:	2300      	movs	r3, #0
 8008016:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800801c:	4b59      	ldr	r3, [pc, #356]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x180>)
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f003 030c 	and.w	r3, r3, #12
 8008024:	2b08      	cmp	r3, #8
 8008026:	d00d      	beq.n	8008044 <HAL_RCC_GetSysClockFreq+0x40>
 8008028:	2b08      	cmp	r3, #8
 800802a:	f200 80a1 	bhi.w	8008170 <HAL_RCC_GetSysClockFreq+0x16c>
 800802e:	2b00      	cmp	r3, #0
 8008030:	d002      	beq.n	8008038 <HAL_RCC_GetSysClockFreq+0x34>
 8008032:	2b04      	cmp	r3, #4
 8008034:	d003      	beq.n	800803e <HAL_RCC_GetSysClockFreq+0x3a>
 8008036:	e09b      	b.n	8008170 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008038:	4b53      	ldr	r3, [pc, #332]	@ (8008188 <HAL_RCC_GetSysClockFreq+0x184>)
 800803a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800803c:	e09b      	b.n	8008176 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800803e:	4b53      	ldr	r3, [pc, #332]	@ (800818c <HAL_RCC_GetSysClockFreq+0x188>)
 8008040:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008042:	e098      	b.n	8008176 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008044:	4b4f      	ldr	r3, [pc, #316]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x180>)
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800804c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800804e:	4b4d      	ldr	r3, [pc, #308]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x180>)
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d028      	beq.n	80080ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800805a:	4b4a      	ldr	r3, [pc, #296]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x180>)
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	099b      	lsrs	r3, r3, #6
 8008060:	2200      	movs	r2, #0
 8008062:	623b      	str	r3, [r7, #32]
 8008064:	627a      	str	r2, [r7, #36]	@ 0x24
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800806c:	2100      	movs	r1, #0
 800806e:	4b47      	ldr	r3, [pc, #284]	@ (800818c <HAL_RCC_GetSysClockFreq+0x188>)
 8008070:	fb03 f201 	mul.w	r2, r3, r1
 8008074:	2300      	movs	r3, #0
 8008076:	fb00 f303 	mul.w	r3, r0, r3
 800807a:	4413      	add	r3, r2
 800807c:	4a43      	ldr	r2, [pc, #268]	@ (800818c <HAL_RCC_GetSysClockFreq+0x188>)
 800807e:	fba0 1202 	umull	r1, r2, r0, r2
 8008082:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008084:	460a      	mov	r2, r1
 8008086:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008088:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800808a:	4413      	add	r3, r2
 800808c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800808e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008090:	2200      	movs	r2, #0
 8008092:	61bb      	str	r3, [r7, #24]
 8008094:	61fa      	str	r2, [r7, #28]
 8008096:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800809a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800809e:	f7f8 f8ef 	bl	8000280 <__aeabi_uldivmod>
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	4613      	mov	r3, r2
 80080a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080aa:	e053      	b.n	8008154 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080ac:	4b35      	ldr	r3, [pc, #212]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x180>)
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	099b      	lsrs	r3, r3, #6
 80080b2:	2200      	movs	r2, #0
 80080b4:	613b      	str	r3, [r7, #16]
 80080b6:	617a      	str	r2, [r7, #20]
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80080be:	f04f 0b00 	mov.w	fp, #0
 80080c2:	4652      	mov	r2, sl
 80080c4:	465b      	mov	r3, fp
 80080c6:	f04f 0000 	mov.w	r0, #0
 80080ca:	f04f 0100 	mov.w	r1, #0
 80080ce:	0159      	lsls	r1, r3, #5
 80080d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080d4:	0150      	lsls	r0, r2, #5
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	ebb2 080a 	subs.w	r8, r2, sl
 80080de:	eb63 090b 	sbc.w	r9, r3, fp
 80080e2:	f04f 0200 	mov.w	r2, #0
 80080e6:	f04f 0300 	mov.w	r3, #0
 80080ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80080ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80080f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80080f6:	ebb2 0408 	subs.w	r4, r2, r8
 80080fa:	eb63 0509 	sbc.w	r5, r3, r9
 80080fe:	f04f 0200 	mov.w	r2, #0
 8008102:	f04f 0300 	mov.w	r3, #0
 8008106:	00eb      	lsls	r3, r5, #3
 8008108:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800810c:	00e2      	lsls	r2, r4, #3
 800810e:	4614      	mov	r4, r2
 8008110:	461d      	mov	r5, r3
 8008112:	eb14 030a 	adds.w	r3, r4, sl
 8008116:	603b      	str	r3, [r7, #0]
 8008118:	eb45 030b 	adc.w	r3, r5, fp
 800811c:	607b      	str	r3, [r7, #4]
 800811e:	f04f 0200 	mov.w	r2, #0
 8008122:	f04f 0300 	mov.w	r3, #0
 8008126:	e9d7 4500 	ldrd	r4, r5, [r7]
 800812a:	4629      	mov	r1, r5
 800812c:	028b      	lsls	r3, r1, #10
 800812e:	4621      	mov	r1, r4
 8008130:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008134:	4621      	mov	r1, r4
 8008136:	028a      	lsls	r2, r1, #10
 8008138:	4610      	mov	r0, r2
 800813a:	4619      	mov	r1, r3
 800813c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800813e:	2200      	movs	r2, #0
 8008140:	60bb      	str	r3, [r7, #8]
 8008142:	60fa      	str	r2, [r7, #12]
 8008144:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008148:	f7f8 f89a 	bl	8000280 <__aeabi_uldivmod>
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	4613      	mov	r3, r2
 8008152:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008154:	4b0b      	ldr	r3, [pc, #44]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x180>)
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	0c1b      	lsrs	r3, r3, #16
 800815a:	f003 0303 	and.w	r3, r3, #3
 800815e:	3301      	adds	r3, #1
 8008160:	005b      	lsls	r3, r3, #1
 8008162:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8008164:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008168:	fbb2 f3f3 	udiv	r3, r2, r3
 800816c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800816e:	e002      	b.n	8008176 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008170:	4b05      	ldr	r3, [pc, #20]	@ (8008188 <HAL_RCC_GetSysClockFreq+0x184>)
 8008172:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008178:	4618      	mov	r0, r3
 800817a:	3740      	adds	r7, #64	@ 0x40
 800817c:	46bd      	mov	sp, r7
 800817e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008182:	bf00      	nop
 8008184:	40023800 	.word	0x40023800
 8008188:	00f42400 	.word	0x00f42400
 800818c:	00b71b00 	.word	0x00b71b00

08008190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008190:	b480      	push	{r7}
 8008192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008194:	4b03      	ldr	r3, [pc, #12]	@ (80081a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008196:	681b      	ldr	r3, [r3, #0]
}
 8008198:	4618      	mov	r0, r3
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	20000060 	.word	0x20000060

080081a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80081ac:	f7ff fff0 	bl	8008190 <HAL_RCC_GetHCLKFreq>
 80081b0:	4602      	mov	r2, r0
 80081b2:	4b05      	ldr	r3, [pc, #20]	@ (80081c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	0a9b      	lsrs	r3, r3, #10
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	4903      	ldr	r1, [pc, #12]	@ (80081cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80081be:	5ccb      	ldrb	r3, [r1, r3]
 80081c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	40023800 	.word	0x40023800
 80081cc:	0800e6b4 	.word	0x0800e6b4

080081d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80081d4:	f7ff ffdc 	bl	8008190 <HAL_RCC_GetHCLKFreq>
 80081d8:	4602      	mov	r2, r0
 80081da:	4b05      	ldr	r3, [pc, #20]	@ (80081f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	0b5b      	lsrs	r3, r3, #13
 80081e0:	f003 0307 	and.w	r3, r3, #7
 80081e4:	4903      	ldr	r1, [pc, #12]	@ (80081f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081e6:	5ccb      	ldrb	r3, [r1, r3]
 80081e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	40023800 	.word	0x40023800
 80081f4:	0800e6b4 	.word	0x0800e6b4

080081f8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80081fc:	4b06      	ldr	r3, [pc, #24]	@ (8008218 <HAL_RCC_NMI_IRQHandler+0x20>)
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008204:	2b80      	cmp	r3, #128	@ 0x80
 8008206:	d104      	bne.n	8008212 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008208:	f000 f80a 	bl	8008220 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800820c:	4b03      	ldr	r3, [pc, #12]	@ (800821c <HAL_RCC_NMI_IRQHandler+0x24>)
 800820e:	2280      	movs	r2, #128	@ 0x80
 8008210:	701a      	strb	r2, [r3, #0]
  }
}
 8008212:	bf00      	nop
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	40023800 	.word	0x40023800
 800821c:	4002380e 	.word	0x4002380e

08008220 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008220:	b480      	push	{r7}
 8008222:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008224:	bf00      	nop
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b082      	sub	sp, #8
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d101      	bne.n	8008240 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e07b      	b.n	8008338 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008244:	2b00      	cmp	r3, #0
 8008246:	d108      	bne.n	800825a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008250:	d009      	beq.n	8008266 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	61da      	str	r2, [r3, #28]
 8008258:	e005      	b.n	8008266 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b00      	cmp	r3, #0
 8008276:	d106      	bne.n	8008286 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7fb ff2d 	bl	80040e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2202      	movs	r2, #2
 800828a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800829c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80082ae:	431a      	orrs	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082b8:	431a      	orrs	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	f003 0302 	and.w	r3, r3, #2
 80082c2:	431a      	orrs	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	695b      	ldr	r3, [r3, #20]
 80082c8:	f003 0301 	and.w	r3, r3, #1
 80082cc:	431a      	orrs	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082d6:	431a      	orrs	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	69db      	ldr	r3, [r3, #28]
 80082dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082e0:	431a      	orrs	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082ea:	ea42 0103 	orr.w	r1, r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	430a      	orrs	r2, r1
 80082fc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	0c1b      	lsrs	r3, r3, #16
 8008304:	f003 0104 	and.w	r1, r3, #4
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800830c:	f003 0210 	and.w	r2, r3, #16
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	430a      	orrs	r2, r1
 8008316:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	69da      	ldr	r2, [r3, #28]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008326:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b08c      	sub	sp, #48	@ 0x30
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
 800834c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800834e:	2301      	movs	r3, #1
 8008350:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800835e:	2b01      	cmp	r3, #1
 8008360:	d101      	bne.n	8008366 <HAL_SPI_TransmitReceive+0x26>
 8008362:	2302      	movs	r3, #2
 8008364:	e198      	b.n	8008698 <HAL_SPI_TransmitReceive+0x358>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800836e:	f7fc fd41 	bl	8004df4 <HAL_GetTick>
 8008372:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800837a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008384:	887b      	ldrh	r3, [r7, #2]
 8008386:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008388:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800838c:	2b01      	cmp	r3, #1
 800838e:	d00f      	beq.n	80083b0 <HAL_SPI_TransmitReceive+0x70>
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008396:	d107      	bne.n	80083a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d103      	bne.n	80083a8 <HAL_SPI_TransmitReceive+0x68>
 80083a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	d003      	beq.n	80083b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80083a8:	2302      	movs	r3, #2
 80083aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80083ae:	e16d      	b.n	800868c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d005      	beq.n	80083c2 <HAL_SPI_TransmitReceive+0x82>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d002      	beq.n	80083c2 <HAL_SPI_TransmitReceive+0x82>
 80083bc:	887b      	ldrh	r3, [r7, #2]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d103      	bne.n	80083ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80083c8:	e160      	b.n	800868c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b04      	cmp	r3, #4
 80083d4:	d003      	beq.n	80083de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2205      	movs	r2, #5
 80083da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	887a      	ldrh	r2, [r7, #2]
 80083ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	887a      	ldrh	r2, [r7, #2]
 80083f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	887a      	ldrh	r2, [r7, #2]
 8008400:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	887a      	ldrh	r2, [r7, #2]
 8008406:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800841e:	2b40      	cmp	r3, #64	@ 0x40
 8008420:	d007      	beq.n	8008432 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008430:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800843a:	d17c      	bne.n	8008536 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <HAL_SPI_TransmitReceive+0x10a>
 8008444:	8b7b      	ldrh	r3, [r7, #26]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d16a      	bne.n	8008520 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800844e:	881a      	ldrh	r2, [r3, #0]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800845a:	1c9a      	adds	r2, r3, #2
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008464:	b29b      	uxth	r3, r3
 8008466:	3b01      	subs	r3, #1
 8008468:	b29a      	uxth	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800846e:	e057      	b.n	8008520 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b02      	cmp	r3, #2
 800847c:	d11b      	bne.n	80084b6 <HAL_SPI_TransmitReceive+0x176>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008482:	b29b      	uxth	r3, r3
 8008484:	2b00      	cmp	r3, #0
 8008486:	d016      	beq.n	80084b6 <HAL_SPI_TransmitReceive+0x176>
 8008488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800848a:	2b01      	cmp	r3, #1
 800848c:	d113      	bne.n	80084b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008492:	881a      	ldrh	r2, [r3, #0]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800849e:	1c9a      	adds	r2, r3, #2
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	3b01      	subs	r3, #1
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d119      	bne.n	80084f8 <HAL_SPI_TransmitReceive+0x1b8>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d014      	beq.n	80084f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68da      	ldr	r2, [r3, #12]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d8:	b292      	uxth	r2, r2
 80084da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e0:	1c9a      	adds	r2, r3, #2
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	3b01      	subs	r3, #1
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084f4:	2301      	movs	r3, #1
 80084f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80084f8:	f7fc fc7c 	bl	8004df4 <HAL_GetTick>
 80084fc:	4602      	mov	r2, r0
 80084fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008504:	429a      	cmp	r2, r3
 8008506:	d80b      	bhi.n	8008520 <HAL_SPI_TransmitReceive+0x1e0>
 8008508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800850e:	d007      	beq.n	8008520 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800851e:	e0b5      	b.n	800868c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008524:	b29b      	uxth	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1a2      	bne.n	8008470 <HAL_SPI_TransmitReceive+0x130>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800852e:	b29b      	uxth	r3, r3
 8008530:	2b00      	cmp	r3, #0
 8008532:	d19d      	bne.n	8008470 <HAL_SPI_TransmitReceive+0x130>
 8008534:	e080      	b.n	8008638 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d002      	beq.n	8008544 <HAL_SPI_TransmitReceive+0x204>
 800853e:	8b7b      	ldrh	r3, [r7, #26]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d16f      	bne.n	8008624 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	330c      	adds	r3, #12
 800854e:	7812      	ldrb	r2, [r2, #0]
 8008550:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008556:	1c5a      	adds	r2, r3, #1
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008560:	b29b      	uxth	r3, r3
 8008562:	3b01      	subs	r3, #1
 8008564:	b29a      	uxth	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800856a:	e05b      	b.n	8008624 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f003 0302 	and.w	r3, r3, #2
 8008576:	2b02      	cmp	r3, #2
 8008578:	d11c      	bne.n	80085b4 <HAL_SPI_TransmitReceive+0x274>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800857e:	b29b      	uxth	r3, r3
 8008580:	2b00      	cmp	r3, #0
 8008582:	d017      	beq.n	80085b4 <HAL_SPI_TransmitReceive+0x274>
 8008584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008586:	2b01      	cmp	r3, #1
 8008588:	d114      	bne.n	80085b4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	330c      	adds	r3, #12
 8008594:	7812      	ldrb	r2, [r2, #0]
 8008596:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800859c:	1c5a      	adds	r2, r3, #1
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	3b01      	subs	r3, #1
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085b0:	2300      	movs	r3, #0
 80085b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d119      	bne.n	80085f6 <HAL_SPI_TransmitReceive+0x2b6>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d014      	beq.n	80085f6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d6:	b2d2      	uxtb	r2, r2
 80085d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	3b01      	subs	r3, #1
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085f2:	2301      	movs	r3, #1
 80085f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80085f6:	f7fc fbfd 	bl	8004df4 <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008602:	429a      	cmp	r2, r3
 8008604:	d803      	bhi.n	800860e <HAL_SPI_TransmitReceive+0x2ce>
 8008606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008608:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800860c:	d102      	bne.n	8008614 <HAL_SPI_TransmitReceive+0x2d4>
 800860e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008610:	2b00      	cmp	r3, #0
 8008612:	d107      	bne.n	8008624 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008622:	e033      	b.n	800868c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008628:	b29b      	uxth	r3, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	d19e      	bne.n	800856c <HAL_SPI_TransmitReceive+0x22c>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008632:	b29b      	uxth	r3, r3
 8008634:	2b00      	cmp	r3, #0
 8008636:	d199      	bne.n	800856c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800863a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 f8b7 	bl	80087b0 <SPI_EndRxTxTransaction>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d006      	beq.n	8008656 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2220      	movs	r2, #32
 8008652:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8008654:	e01a      	b.n	800868c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10a      	bne.n	8008674 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800865e:	2300      	movs	r3, #0
 8008660:	617b      	str	r3, [r7, #20]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	617b      	str	r3, [r7, #20]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	617b      	str	r3, [r7, #20]
 8008672:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008682:	e003      	b.n	800868c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008694:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008698:	4618      	mov	r0, r3
 800869a:	3730      	adds	r7, #48	@ 0x30
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b088      	sub	sp, #32
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	603b      	str	r3, [r7, #0]
 80086ac:	4613      	mov	r3, r2
 80086ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086b0:	f7fc fba0 	bl	8004df4 <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b8:	1a9b      	subs	r3, r3, r2
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	4413      	add	r3, r2
 80086be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086c0:	f7fc fb98 	bl	8004df4 <HAL_GetTick>
 80086c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086c6:	4b39      	ldr	r3, [pc, #228]	@ (80087ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	015b      	lsls	r3, r3, #5
 80086cc:	0d1b      	lsrs	r3, r3, #20
 80086ce:	69fa      	ldr	r2, [r7, #28]
 80086d0:	fb02 f303 	mul.w	r3, r2, r3
 80086d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086d6:	e054      	b.n	8008782 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086de:	d050      	beq.n	8008782 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086e0:	f7fc fb88 	bl	8004df4 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	69fa      	ldr	r2, [r7, #28]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d902      	bls.n	80086f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d13d      	bne.n	8008772 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008704:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800870e:	d111      	bne.n	8008734 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008718:	d004      	beq.n	8008724 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008722:	d107      	bne.n	8008734 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008732:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800873c:	d10f      	bne.n	800875e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800875c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	e017      	b.n	80087a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d101      	bne.n	800877c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	3b01      	subs	r3, #1
 8008780:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	689a      	ldr	r2, [r3, #8]
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	4013      	ands	r3, r2
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	429a      	cmp	r2, r3
 8008790:	bf0c      	ite	eq
 8008792:	2301      	moveq	r3, #1
 8008794:	2300      	movne	r3, #0
 8008796:	b2db      	uxtb	r3, r3
 8008798:	461a      	mov	r2, r3
 800879a:	79fb      	ldrb	r3, [r7, #7]
 800879c:	429a      	cmp	r2, r3
 800879e:	d19b      	bne.n	80086d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3720      	adds	r7, #32
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	20000060 	.word	0x20000060

080087b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b088      	sub	sp, #32
 80087b4:	af02      	add	r7, sp, #8
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2201      	movs	r2, #1
 80087c4:	2102      	movs	r1, #2
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f7ff ff6a 	bl	80086a0 <SPI_WaitFlagStateUntilTimeout>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d007      	beq.n	80087e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087d6:	f043 0220 	orr.w	r2, r3, #32
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e032      	b.n	8008848 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80087e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008850 <SPI_EndRxTxTransaction+0xa0>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008854 <SPI_EndRxTxTransaction+0xa4>)
 80087e8:	fba2 2303 	umull	r2, r3, r2, r3
 80087ec:	0d5b      	lsrs	r3, r3, #21
 80087ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80087f2:	fb02 f303 	mul.w	r3, r2, r3
 80087f6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008800:	d112      	bne.n	8008828 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2200      	movs	r2, #0
 800880a:	2180      	movs	r1, #128	@ 0x80
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f7ff ff47 	bl	80086a0 <SPI_WaitFlagStateUntilTimeout>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d016      	beq.n	8008846 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800881c:	f043 0220 	orr.w	r2, r3, #32
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e00f      	b.n	8008848 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00a      	beq.n	8008844 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	3b01      	subs	r3, #1
 8008832:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800883e:	2b80      	cmp	r3, #128	@ 0x80
 8008840:	d0f2      	beq.n	8008828 <SPI_EndRxTxTransaction+0x78>
 8008842:	e000      	b.n	8008846 <SPI_EndRxTxTransaction+0x96>
        break;
 8008844:	bf00      	nop
  }

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	20000060 	.word	0x20000060
 8008854:	165e9f81 	.word	0x165e9f81

08008858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e041      	b.n	80088ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d106      	bne.n	8008884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7fb fdbc 	bl	80043fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2202      	movs	r2, #2
 8008888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	3304      	adds	r3, #4
 8008894:	4619      	mov	r1, r3
 8008896:	4610      	mov	r0, r2
 8008898:	f000 fba8 	bl	8008fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
	...

080088f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b01      	cmp	r3, #1
 800890a:	d001      	beq.n	8008910 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e046      	b.n	800899e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a23      	ldr	r2, [pc, #140]	@ (80089ac <HAL_TIM_Base_Start+0xb4>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d022      	beq.n	8008968 <HAL_TIM_Base_Start+0x70>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800892a:	d01d      	beq.n	8008968 <HAL_TIM_Base_Start+0x70>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a1f      	ldr	r2, [pc, #124]	@ (80089b0 <HAL_TIM_Base_Start+0xb8>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d018      	beq.n	8008968 <HAL_TIM_Base_Start+0x70>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a1e      	ldr	r2, [pc, #120]	@ (80089b4 <HAL_TIM_Base_Start+0xbc>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d013      	beq.n	8008968 <HAL_TIM_Base_Start+0x70>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a1c      	ldr	r2, [pc, #112]	@ (80089b8 <HAL_TIM_Base_Start+0xc0>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d00e      	beq.n	8008968 <HAL_TIM_Base_Start+0x70>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a1b      	ldr	r2, [pc, #108]	@ (80089bc <HAL_TIM_Base_Start+0xc4>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d009      	beq.n	8008968 <HAL_TIM_Base_Start+0x70>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a19      	ldr	r2, [pc, #100]	@ (80089c0 <HAL_TIM_Base_Start+0xc8>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d004      	beq.n	8008968 <HAL_TIM_Base_Start+0x70>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a18      	ldr	r2, [pc, #96]	@ (80089c4 <HAL_TIM_Base_Start+0xcc>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d111      	bne.n	800898c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f003 0307 	and.w	r3, r3, #7
 8008972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2b06      	cmp	r3, #6
 8008978:	d010      	beq.n	800899c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f042 0201 	orr.w	r2, r2, #1
 8008988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800898a:	e007      	b.n	800899c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f042 0201 	orr.w	r2, r2, #1
 800899a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3714      	adds	r7, #20
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	40010000 	.word	0x40010000
 80089b0:	40000400 	.word	0x40000400
 80089b4:	40000800 	.word	0x40000800
 80089b8:	40000c00 	.word	0x40000c00
 80089bc:	40010400 	.word	0x40010400
 80089c0:	40014000 	.word	0x40014000
 80089c4:	40001800 	.word	0x40001800

080089c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e041      	b.n	8008a5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d106      	bne.n	80089f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7fb fbde 	bl	80041b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2202      	movs	r2, #2
 80089f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	3304      	adds	r3, #4
 8008a04:	4619      	mov	r1, r3
 8008a06:	4610      	mov	r0, r2
 8008a08:	f000 faf0 	bl	8008fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
	...

08008a68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d109      	bne.n	8008a8c <HAL_TIM_PWM_Start+0x24>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	bf14      	ite	ne
 8008a84:	2301      	movne	r3, #1
 8008a86:	2300      	moveq	r3, #0
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	e022      	b.n	8008ad2 <HAL_TIM_PWM_Start+0x6a>
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	d109      	bne.n	8008aa6 <HAL_TIM_PWM_Start+0x3e>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	bf14      	ite	ne
 8008a9e:	2301      	movne	r3, #1
 8008aa0:	2300      	moveq	r3, #0
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	e015      	b.n	8008ad2 <HAL_TIM_PWM_Start+0x6a>
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2b08      	cmp	r3, #8
 8008aaa:	d109      	bne.n	8008ac0 <HAL_TIM_PWM_Start+0x58>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	bf14      	ite	ne
 8008ab8:	2301      	movne	r3, #1
 8008aba:	2300      	moveq	r3, #0
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	e008      	b.n	8008ad2 <HAL_TIM_PWM_Start+0x6a>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	bf14      	ite	ne
 8008acc:	2301      	movne	r3, #1
 8008ace:	2300      	moveq	r3, #0
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e07c      	b.n	8008bd4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d104      	bne.n	8008aea <HAL_TIM_PWM_Start+0x82>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2202      	movs	r2, #2
 8008ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ae8:	e013      	b.n	8008b12 <HAL_TIM_PWM_Start+0xaa>
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	d104      	bne.n	8008afa <HAL_TIM_PWM_Start+0x92>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2202      	movs	r2, #2
 8008af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008af8:	e00b      	b.n	8008b12 <HAL_TIM_PWM_Start+0xaa>
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	2b08      	cmp	r3, #8
 8008afe:	d104      	bne.n	8008b0a <HAL_TIM_PWM_Start+0xa2>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2202      	movs	r2, #2
 8008b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b08:	e003      	b.n	8008b12 <HAL_TIM_PWM_Start+0xaa>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2201      	movs	r2, #1
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 fd5c 	bl	80095d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a2d      	ldr	r2, [pc, #180]	@ (8008bdc <HAL_TIM_PWM_Start+0x174>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d004      	beq.n	8008b34 <HAL_TIM_PWM_Start+0xcc>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8008be0 <HAL_TIM_PWM_Start+0x178>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d101      	bne.n	8008b38 <HAL_TIM_PWM_Start+0xd0>
 8008b34:	2301      	movs	r3, #1
 8008b36:	e000      	b.n	8008b3a <HAL_TIM_PWM_Start+0xd2>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d007      	beq.n	8008b4e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a22      	ldr	r2, [pc, #136]	@ (8008bdc <HAL_TIM_PWM_Start+0x174>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d022      	beq.n	8008b9e <HAL_TIM_PWM_Start+0x136>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b60:	d01d      	beq.n	8008b9e <HAL_TIM_PWM_Start+0x136>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a1f      	ldr	r2, [pc, #124]	@ (8008be4 <HAL_TIM_PWM_Start+0x17c>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d018      	beq.n	8008b9e <HAL_TIM_PWM_Start+0x136>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a1d      	ldr	r2, [pc, #116]	@ (8008be8 <HAL_TIM_PWM_Start+0x180>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d013      	beq.n	8008b9e <HAL_TIM_PWM_Start+0x136>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8008bec <HAL_TIM_PWM_Start+0x184>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d00e      	beq.n	8008b9e <HAL_TIM_PWM_Start+0x136>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a16      	ldr	r2, [pc, #88]	@ (8008be0 <HAL_TIM_PWM_Start+0x178>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d009      	beq.n	8008b9e <HAL_TIM_PWM_Start+0x136>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a18      	ldr	r2, [pc, #96]	@ (8008bf0 <HAL_TIM_PWM_Start+0x188>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d004      	beq.n	8008b9e <HAL_TIM_PWM_Start+0x136>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a16      	ldr	r2, [pc, #88]	@ (8008bf4 <HAL_TIM_PWM_Start+0x18c>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d111      	bne.n	8008bc2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f003 0307 	and.w	r3, r3, #7
 8008ba8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2b06      	cmp	r3, #6
 8008bae:	d010      	beq.n	8008bd2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f042 0201 	orr.w	r2, r2, #1
 8008bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bc0:	e007      	b.n	8008bd2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f042 0201 	orr.w	r2, r2, #1
 8008bd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	40010000 	.word	0x40010000
 8008be0:	40010400 	.word	0x40010400
 8008be4:	40000400 	.word	0x40000400
 8008be8:	40000800 	.word	0x40000800
 8008bec:	40000c00 	.word	0x40000c00
 8008bf0:	40014000 	.word	0x40014000
 8008bf4:	40001800 	.word	0x40001800

08008bf8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2200      	movs	r2, #0
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 fce4 	bl	80095d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a2e      	ldr	r2, [pc, #184]	@ (8008cd0 <HAL_TIM_PWM_Stop+0xd8>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d004      	beq.n	8008c24 <HAL_TIM_PWM_Stop+0x2c>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8008cd4 <HAL_TIM_PWM_Stop+0xdc>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d101      	bne.n	8008c28 <HAL_TIM_PWM_Stop+0x30>
 8008c24:	2301      	movs	r3, #1
 8008c26:	e000      	b.n	8008c2a <HAL_TIM_PWM_Stop+0x32>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d017      	beq.n	8008c5e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	6a1a      	ldr	r2, [r3, #32]
 8008c34:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008c38:	4013      	ands	r3, r2
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10f      	bne.n	8008c5e <HAL_TIM_PWM_Stop+0x66>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6a1a      	ldr	r2, [r3, #32]
 8008c44:	f240 4344 	movw	r3, #1092	@ 0x444
 8008c48:	4013      	ands	r3, r2
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d107      	bne.n	8008c5e <HAL_TIM_PWM_Stop+0x66>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008c5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6a1a      	ldr	r2, [r3, #32]
 8008c64:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008c68:	4013      	ands	r3, r2
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10f      	bne.n	8008c8e <HAL_TIM_PWM_Stop+0x96>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6a1a      	ldr	r2, [r3, #32]
 8008c74:	f240 4344 	movw	r3, #1092	@ 0x444
 8008c78:	4013      	ands	r3, r2
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d107      	bne.n	8008c8e <HAL_TIM_PWM_Stop+0x96>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f022 0201 	bic.w	r2, r2, #1
 8008c8c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d104      	bne.n	8008c9e <HAL_TIM_PWM_Stop+0xa6>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c9c:	e013      	b.n	8008cc6 <HAL_TIM_PWM_Stop+0xce>
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	2b04      	cmp	r3, #4
 8008ca2:	d104      	bne.n	8008cae <HAL_TIM_PWM_Stop+0xb6>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cac:	e00b      	b.n	8008cc6 <HAL_TIM_PWM_Stop+0xce>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b08      	cmp	r3, #8
 8008cb2:	d104      	bne.n	8008cbe <HAL_TIM_PWM_Stop+0xc6>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cbc:	e003      	b.n	8008cc6 <HAL_TIM_PWM_Stop+0xce>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	40010000 	.word	0x40010000
 8008cd4:	40010400 	.word	0x40010400

08008cd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d101      	bne.n	8008cf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	e0ae      	b.n	8008e54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2b0c      	cmp	r3, #12
 8008d02:	f200 809f 	bhi.w	8008e44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008d06:	a201      	add	r2, pc, #4	@ (adr r2, 8008d0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0c:	08008d41 	.word	0x08008d41
 8008d10:	08008e45 	.word	0x08008e45
 8008d14:	08008e45 	.word	0x08008e45
 8008d18:	08008e45 	.word	0x08008e45
 8008d1c:	08008d81 	.word	0x08008d81
 8008d20:	08008e45 	.word	0x08008e45
 8008d24:	08008e45 	.word	0x08008e45
 8008d28:	08008e45 	.word	0x08008e45
 8008d2c:	08008dc3 	.word	0x08008dc3
 8008d30:	08008e45 	.word	0x08008e45
 8008d34:	08008e45 	.word	0x08008e45
 8008d38:	08008e45 	.word	0x08008e45
 8008d3c:	08008e03 	.word	0x08008e03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68b9      	ldr	r1, [r7, #8]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 f9fc 	bl	8009144 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	699a      	ldr	r2, [r3, #24]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f042 0208 	orr.w	r2, r2, #8
 8008d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	699a      	ldr	r2, [r3, #24]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f022 0204 	bic.w	r2, r2, #4
 8008d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6999      	ldr	r1, [r3, #24]
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	691a      	ldr	r2, [r3, #16]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	619a      	str	r2, [r3, #24]
      break;
 8008d7e:	e064      	b.n	8008e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68b9      	ldr	r1, [r7, #8]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 fa4c 	bl	8009224 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	699a      	ldr	r2, [r3, #24]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	699a      	ldr	r2, [r3, #24]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6999      	ldr	r1, [r3, #24]
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	021a      	lsls	r2, r3, #8
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	430a      	orrs	r2, r1
 8008dbe:	619a      	str	r2, [r3, #24]
      break;
 8008dc0:	e043      	b.n	8008e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68b9      	ldr	r1, [r7, #8]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 faa1 	bl	8009310 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	69da      	ldr	r2, [r3, #28]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f042 0208 	orr.w	r2, r2, #8
 8008ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	69da      	ldr	r2, [r3, #28]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f022 0204 	bic.w	r2, r2, #4
 8008dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	69d9      	ldr	r1, [r3, #28]
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	691a      	ldr	r2, [r3, #16]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	61da      	str	r2, [r3, #28]
      break;
 8008e00:	e023      	b.n	8008e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68b9      	ldr	r1, [r7, #8]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 faf5 	bl	80093f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	69da      	ldr	r2, [r3, #28]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	69da      	ldr	r2, [r3, #28]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	69d9      	ldr	r1, [r3, #28]
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	021a      	lsls	r2, r3, #8
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	61da      	str	r2, [r3, #28]
      break;
 8008e42:	e002      	b.n	8008e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	75fb      	strb	r3, [r7, #23]
      break;
 8008e48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3718      	adds	r7, #24
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d101      	bne.n	8008e78 <HAL_TIM_ConfigClockSource+0x1c>
 8008e74:	2302      	movs	r3, #2
 8008e76:	e0b4      	b.n	8008fe2 <HAL_TIM_ConfigClockSource+0x186>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2202      	movs	r2, #2
 8008e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008eb0:	d03e      	beq.n	8008f30 <HAL_TIM_ConfigClockSource+0xd4>
 8008eb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008eb6:	f200 8087 	bhi.w	8008fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008eba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ebe:	f000 8086 	beq.w	8008fce <HAL_TIM_ConfigClockSource+0x172>
 8008ec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ec6:	d87f      	bhi.n	8008fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ec8:	2b70      	cmp	r3, #112	@ 0x70
 8008eca:	d01a      	beq.n	8008f02 <HAL_TIM_ConfigClockSource+0xa6>
 8008ecc:	2b70      	cmp	r3, #112	@ 0x70
 8008ece:	d87b      	bhi.n	8008fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ed0:	2b60      	cmp	r3, #96	@ 0x60
 8008ed2:	d050      	beq.n	8008f76 <HAL_TIM_ConfigClockSource+0x11a>
 8008ed4:	2b60      	cmp	r3, #96	@ 0x60
 8008ed6:	d877      	bhi.n	8008fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ed8:	2b50      	cmp	r3, #80	@ 0x50
 8008eda:	d03c      	beq.n	8008f56 <HAL_TIM_ConfigClockSource+0xfa>
 8008edc:	2b50      	cmp	r3, #80	@ 0x50
 8008ede:	d873      	bhi.n	8008fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ee0:	2b40      	cmp	r3, #64	@ 0x40
 8008ee2:	d058      	beq.n	8008f96 <HAL_TIM_ConfigClockSource+0x13a>
 8008ee4:	2b40      	cmp	r3, #64	@ 0x40
 8008ee6:	d86f      	bhi.n	8008fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ee8:	2b30      	cmp	r3, #48	@ 0x30
 8008eea:	d064      	beq.n	8008fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8008eec:	2b30      	cmp	r3, #48	@ 0x30
 8008eee:	d86b      	bhi.n	8008fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ef0:	2b20      	cmp	r3, #32
 8008ef2:	d060      	beq.n	8008fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8008ef4:	2b20      	cmp	r3, #32
 8008ef6:	d867      	bhi.n	8008fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d05c      	beq.n	8008fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8008efc:	2b10      	cmp	r3, #16
 8008efe:	d05a      	beq.n	8008fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8008f00:	e062      	b.n	8008fc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f12:	f000 fb41 	bl	8009598 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008f24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	609a      	str	r2, [r3, #8]
      break;
 8008f2e:	e04f      	b.n	8008fd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f40:	f000 fb2a 	bl	8009598 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	689a      	ldr	r2, [r3, #8]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008f52:	609a      	str	r2, [r3, #8]
      break;
 8008f54:	e03c      	b.n	8008fd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f62:	461a      	mov	r2, r3
 8008f64:	f000 fa9e 	bl	80094a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2150      	movs	r1, #80	@ 0x50
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 faf7 	bl	8009562 <TIM_ITRx_SetConfig>
      break;
 8008f74:	e02c      	b.n	8008fd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f82:	461a      	mov	r2, r3
 8008f84:	f000 fabd 	bl	8009502 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2160      	movs	r1, #96	@ 0x60
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 fae7 	bl	8009562 <TIM_ITRx_SetConfig>
      break;
 8008f94:	e01c      	b.n	8008fd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	f000 fa7e 	bl	80094a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2140      	movs	r1, #64	@ 0x40
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 fad7 	bl	8009562 <TIM_ITRx_SetConfig>
      break;
 8008fb4:	e00c      	b.n	8008fd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	f000 face 	bl	8009562 <TIM_ITRx_SetConfig>
      break;
 8008fc6:	e003      	b.n	8008fd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	73fb      	strb	r3, [r7, #15]
      break;
 8008fcc:	e000      	b.n	8008fd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008fce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
	...

08008fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a46      	ldr	r2, [pc, #280]	@ (8009118 <TIM_Base_SetConfig+0x12c>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d013      	beq.n	800902c <TIM_Base_SetConfig+0x40>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800900a:	d00f      	beq.n	800902c <TIM_Base_SetConfig+0x40>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a43      	ldr	r2, [pc, #268]	@ (800911c <TIM_Base_SetConfig+0x130>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d00b      	beq.n	800902c <TIM_Base_SetConfig+0x40>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a42      	ldr	r2, [pc, #264]	@ (8009120 <TIM_Base_SetConfig+0x134>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d007      	beq.n	800902c <TIM_Base_SetConfig+0x40>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a41      	ldr	r2, [pc, #260]	@ (8009124 <TIM_Base_SetConfig+0x138>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d003      	beq.n	800902c <TIM_Base_SetConfig+0x40>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a40      	ldr	r2, [pc, #256]	@ (8009128 <TIM_Base_SetConfig+0x13c>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d108      	bne.n	800903e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	4313      	orrs	r3, r2
 800903c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a35      	ldr	r2, [pc, #212]	@ (8009118 <TIM_Base_SetConfig+0x12c>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d02b      	beq.n	800909e <TIM_Base_SetConfig+0xb2>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800904c:	d027      	beq.n	800909e <TIM_Base_SetConfig+0xb2>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a32      	ldr	r2, [pc, #200]	@ (800911c <TIM_Base_SetConfig+0x130>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d023      	beq.n	800909e <TIM_Base_SetConfig+0xb2>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a31      	ldr	r2, [pc, #196]	@ (8009120 <TIM_Base_SetConfig+0x134>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d01f      	beq.n	800909e <TIM_Base_SetConfig+0xb2>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a30      	ldr	r2, [pc, #192]	@ (8009124 <TIM_Base_SetConfig+0x138>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d01b      	beq.n	800909e <TIM_Base_SetConfig+0xb2>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a2f      	ldr	r2, [pc, #188]	@ (8009128 <TIM_Base_SetConfig+0x13c>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d017      	beq.n	800909e <TIM_Base_SetConfig+0xb2>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a2e      	ldr	r2, [pc, #184]	@ (800912c <TIM_Base_SetConfig+0x140>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d013      	beq.n	800909e <TIM_Base_SetConfig+0xb2>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a2d      	ldr	r2, [pc, #180]	@ (8009130 <TIM_Base_SetConfig+0x144>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d00f      	beq.n	800909e <TIM_Base_SetConfig+0xb2>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a2c      	ldr	r2, [pc, #176]	@ (8009134 <TIM_Base_SetConfig+0x148>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d00b      	beq.n	800909e <TIM_Base_SetConfig+0xb2>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a2b      	ldr	r2, [pc, #172]	@ (8009138 <TIM_Base_SetConfig+0x14c>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d007      	beq.n	800909e <TIM_Base_SetConfig+0xb2>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a2a      	ldr	r2, [pc, #168]	@ (800913c <TIM_Base_SetConfig+0x150>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d003      	beq.n	800909e <TIM_Base_SetConfig+0xb2>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a29      	ldr	r2, [pc, #164]	@ (8009140 <TIM_Base_SetConfig+0x154>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d108      	bne.n	80090b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	689a      	ldr	r2, [r3, #8]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a10      	ldr	r2, [pc, #64]	@ (8009118 <TIM_Base_SetConfig+0x12c>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d003      	beq.n	80090e4 <TIM_Base_SetConfig+0xf8>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a12      	ldr	r2, [pc, #72]	@ (8009128 <TIM_Base_SetConfig+0x13c>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d103      	bne.n	80090ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	691a      	ldr	r2, [r3, #16]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	f003 0301 	and.w	r3, r3, #1
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d105      	bne.n	800910a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	f023 0201 	bic.w	r2, r3, #1
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	611a      	str	r2, [r3, #16]
  }
}
 800910a:	bf00      	nop
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	40010000 	.word	0x40010000
 800911c:	40000400 	.word	0x40000400
 8009120:	40000800 	.word	0x40000800
 8009124:	40000c00 	.word	0x40000c00
 8009128:	40010400 	.word	0x40010400
 800912c:	40014000 	.word	0x40014000
 8009130:	40014400 	.word	0x40014400
 8009134:	40014800 	.word	0x40014800
 8009138:	40001800 	.word	0x40001800
 800913c:	40001c00 	.word	0x40001c00
 8009140:	40002000 	.word	0x40002000

08009144 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009144:	b480      	push	{r7}
 8009146:	b087      	sub	sp, #28
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a1b      	ldr	r3, [r3, #32]
 8009152:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a1b      	ldr	r3, [r3, #32]
 8009158:	f023 0201 	bic.w	r2, r3, #1
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f023 0303 	bic.w	r3, r3, #3
 800917a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	4313      	orrs	r3, r2
 8009184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f023 0302 	bic.w	r3, r3, #2
 800918c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	697a      	ldr	r2, [r7, #20]
 8009194:	4313      	orrs	r3, r2
 8009196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a20      	ldr	r2, [pc, #128]	@ (800921c <TIM_OC1_SetConfig+0xd8>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d003      	beq.n	80091a8 <TIM_OC1_SetConfig+0x64>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a1f      	ldr	r2, [pc, #124]	@ (8009220 <TIM_OC1_SetConfig+0xdc>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d10c      	bne.n	80091c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	f023 0308 	bic.w	r3, r3, #8
 80091ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	697a      	ldr	r2, [r7, #20]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f023 0304 	bic.w	r3, r3, #4
 80091c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a15      	ldr	r2, [pc, #84]	@ (800921c <TIM_OC1_SetConfig+0xd8>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d003      	beq.n	80091d2 <TIM_OC1_SetConfig+0x8e>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a14      	ldr	r2, [pc, #80]	@ (8009220 <TIM_OC1_SetConfig+0xdc>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d111      	bne.n	80091f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80091e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	695b      	ldr	r3, [r3, #20]
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	693a      	ldr	r2, [r7, #16]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	685a      	ldr	r2, [r3, #4]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	697a      	ldr	r2, [r7, #20]
 800920e:	621a      	str	r2, [r3, #32]
}
 8009210:	bf00      	nop
 8009212:	371c      	adds	r7, #28
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr
 800921c:	40010000 	.word	0x40010000
 8009220:	40010400 	.word	0x40010400

08009224 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a1b      	ldr	r3, [r3, #32]
 8009238:	f023 0210 	bic.w	r2, r3, #16
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800925a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	021b      	lsls	r3, r3, #8
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	4313      	orrs	r3, r2
 8009266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	f023 0320 	bic.w	r3, r3, #32
 800926e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	011b      	lsls	r3, r3, #4
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	4313      	orrs	r3, r2
 800927a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a22      	ldr	r2, [pc, #136]	@ (8009308 <TIM_OC2_SetConfig+0xe4>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d003      	beq.n	800928c <TIM_OC2_SetConfig+0x68>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a21      	ldr	r2, [pc, #132]	@ (800930c <TIM_OC2_SetConfig+0xe8>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d10d      	bne.n	80092a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	011b      	lsls	r3, r3, #4
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	4313      	orrs	r3, r2
 800929e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a17      	ldr	r2, [pc, #92]	@ (8009308 <TIM_OC2_SetConfig+0xe4>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d003      	beq.n	80092b8 <TIM_OC2_SetConfig+0x94>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a16      	ldr	r2, [pc, #88]	@ (800930c <TIM_OC2_SetConfig+0xe8>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d113      	bne.n	80092e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80092be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80092c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	695b      	ldr	r3, [r3, #20]
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	693a      	ldr	r2, [r7, #16]
 80092dc:	4313      	orrs	r3, r2
 80092de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	693a      	ldr	r2, [r7, #16]
 80092e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	685a      	ldr	r2, [r3, #4]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	621a      	str	r2, [r3, #32]
}
 80092fa:	bf00      	nop
 80092fc:	371c      	adds	r7, #28
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	40010000 	.word	0x40010000
 800930c:	40010400 	.word	0x40010400

08009310 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a1b      	ldr	r3, [r3, #32]
 8009324:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	69db      	ldr	r3, [r3, #28]
 8009336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800933e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f023 0303 	bic.w	r3, r3, #3
 8009346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	4313      	orrs	r3, r2
 8009350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	021b      	lsls	r3, r3, #8
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	4313      	orrs	r3, r2
 8009364:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a21      	ldr	r2, [pc, #132]	@ (80093f0 <TIM_OC3_SetConfig+0xe0>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d003      	beq.n	8009376 <TIM_OC3_SetConfig+0x66>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a20      	ldr	r2, [pc, #128]	@ (80093f4 <TIM_OC3_SetConfig+0xe4>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d10d      	bne.n	8009392 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800937c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	021b      	lsls	r3, r3, #8
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	4313      	orrs	r3, r2
 8009388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a16      	ldr	r2, [pc, #88]	@ (80093f0 <TIM_OC3_SetConfig+0xe0>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d003      	beq.n	80093a2 <TIM_OC3_SetConfig+0x92>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a15      	ldr	r2, [pc, #84]	@ (80093f4 <TIM_OC3_SetConfig+0xe4>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d113      	bne.n	80093ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80093b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	011b      	lsls	r3, r3, #4
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	011b      	lsls	r3, r3, #4
 80093c4:	693a      	ldr	r2, [r7, #16]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	693a      	ldr	r2, [r7, #16]
 80093ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	685a      	ldr	r2, [r3, #4]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	697a      	ldr	r2, [r7, #20]
 80093e2:	621a      	str	r2, [r3, #32]
}
 80093e4:	bf00      	nop
 80093e6:	371c      	adds	r7, #28
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	40010000 	.word	0x40010000
 80093f4:	40010400 	.word	0x40010400

080093f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b087      	sub	sp, #28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a1b      	ldr	r3, [r3, #32]
 8009406:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a1b      	ldr	r3, [r3, #32]
 800940c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800942e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	021b      	lsls	r3, r3, #8
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	4313      	orrs	r3, r2
 800943a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	031b      	lsls	r3, r3, #12
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	4313      	orrs	r3, r2
 800944e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a12      	ldr	r2, [pc, #72]	@ (800949c <TIM_OC4_SetConfig+0xa4>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d003      	beq.n	8009460 <TIM_OC4_SetConfig+0x68>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a11      	ldr	r2, [pc, #68]	@ (80094a0 <TIM_OC4_SetConfig+0xa8>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d109      	bne.n	8009474 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	695b      	ldr	r3, [r3, #20]
 800946c:	019b      	lsls	r3, r3, #6
 800946e:	697a      	ldr	r2, [r7, #20]
 8009470:	4313      	orrs	r3, r2
 8009472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	685a      	ldr	r2, [r3, #4]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	621a      	str	r2, [r3, #32]
}
 800948e:	bf00      	nop
 8009490:	371c      	adds	r7, #28
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	40010000 	.word	0x40010000
 80094a0:	40010400 	.word	0x40010400

080094a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b087      	sub	sp, #28
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6a1b      	ldr	r3, [r3, #32]
 80094b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6a1b      	ldr	r3, [r3, #32]
 80094ba:	f023 0201 	bic.w	r2, r3, #1
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80094ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	011b      	lsls	r3, r3, #4
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	f023 030a 	bic.w	r3, r3, #10
 80094e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	693a      	ldr	r2, [r7, #16]
 80094ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	621a      	str	r2, [r3, #32]
}
 80094f6:	bf00      	nop
 80094f8:	371c      	adds	r7, #28
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009502:	b480      	push	{r7}
 8009504:	b087      	sub	sp, #28
 8009506:	af00      	add	r7, sp, #0
 8009508:	60f8      	str	r0, [r7, #12]
 800950a:	60b9      	str	r1, [r7, #8]
 800950c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6a1b      	ldr	r3, [r3, #32]
 8009512:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6a1b      	ldr	r3, [r3, #32]
 8009518:	f023 0210 	bic.w	r2, r3, #16
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	699b      	ldr	r3, [r3, #24]
 8009524:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800952c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	031b      	lsls	r3, r3, #12
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	4313      	orrs	r3, r2
 8009536:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800953e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	011b      	lsls	r3, r3, #4
 8009544:	697a      	ldr	r2, [r7, #20]
 8009546:	4313      	orrs	r3, r2
 8009548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	693a      	ldr	r2, [r7, #16]
 800954e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	697a      	ldr	r2, [r7, #20]
 8009554:	621a      	str	r2, [r3, #32]
}
 8009556:	bf00      	nop
 8009558:	371c      	adds	r7, #28
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009562:	b480      	push	{r7}
 8009564:	b085      	sub	sp, #20
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009578:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	4313      	orrs	r3, r2
 8009580:	f043 0307 	orr.w	r3, r3, #7
 8009584:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	609a      	str	r2, [r3, #8]
}
 800958c:	bf00      	nop
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009598:	b480      	push	{r7}
 800959a:	b087      	sub	sp, #28
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
 80095a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80095b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	021a      	lsls	r2, r3, #8
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	431a      	orrs	r2, r3
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	4313      	orrs	r3, r2
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	609a      	str	r2, [r3, #8]
}
 80095cc:	bf00      	nop
 80095ce:	371c      	adds	r7, #28
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80095d8:	b480      	push	{r7}
 80095da:	b087      	sub	sp, #28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	f003 031f 	and.w	r3, r3, #31
 80095ea:	2201      	movs	r2, #1
 80095ec:	fa02 f303 	lsl.w	r3, r2, r3
 80095f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6a1a      	ldr	r2, [r3, #32]
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	43db      	mvns	r3, r3
 80095fa:	401a      	ands	r2, r3
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6a1a      	ldr	r2, [r3, #32]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f003 031f 	and.w	r3, r3, #31
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	fa01 f303 	lsl.w	r3, r1, r3
 8009610:	431a      	orrs	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	621a      	str	r2, [r3, #32]
}
 8009616:	bf00      	nop
 8009618:	371c      	adds	r7, #28
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
	...

08009624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009634:	2b01      	cmp	r3, #1
 8009636:	d101      	bne.n	800963c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009638:	2302      	movs	r3, #2
 800963a:	e05a      	b.n	80096f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2202      	movs	r2, #2
 8009648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	4313      	orrs	r3, r2
 800966c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a21      	ldr	r2, [pc, #132]	@ (8009700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d022      	beq.n	80096c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009688:	d01d      	beq.n	80096c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a1d      	ldr	r2, [pc, #116]	@ (8009704 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d018      	beq.n	80096c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a1b      	ldr	r2, [pc, #108]	@ (8009708 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d013      	beq.n	80096c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a1a      	ldr	r2, [pc, #104]	@ (800970c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d00e      	beq.n	80096c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a18      	ldr	r2, [pc, #96]	@ (8009710 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d009      	beq.n	80096c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a17      	ldr	r2, [pc, #92]	@ (8009714 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d004      	beq.n	80096c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a15      	ldr	r2, [pc, #84]	@ (8009718 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d10c      	bne.n	80096e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	4313      	orrs	r3, r2
 80096d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68ba      	ldr	r2, [r7, #8]
 80096de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	40010000 	.word	0x40010000
 8009704:	40000400 	.word	0x40000400
 8009708:	40000800 	.word	0x40000800
 800970c:	40000c00 	.word	0x40000c00
 8009710:	40010400 	.word	0x40010400
 8009714:	40014000 	.word	0x40014000
 8009718:	40001800 	.word	0x40001800

0800971c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009726:	2300      	movs	r3, #0
 8009728:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009730:	2b01      	cmp	r3, #1
 8009732:	d101      	bne.n	8009738 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009734:	2302      	movs	r3, #2
 8009736:	e03d      	b.n	80097b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	4313      	orrs	r3, r2
 800974c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	4313      	orrs	r3, r2
 800975a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	4313      	orrs	r3, r2
 8009768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4313      	orrs	r3, r2
 8009776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	4313      	orrs	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	695b      	ldr	r3, [r3, #20]
 8009790:	4313      	orrs	r3, r2
 8009792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	69db      	ldr	r3, [r3, #28]
 800979e:	4313      	orrs	r3, r2
 80097a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3714      	adds	r7, #20
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e042      	b.n	8009858 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d106      	bne.n	80097ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7fa ff6e 	bl	80046c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2224      	movs	r2, #36	@ 0x24
 80097f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68da      	ldr	r2, [r3, #12]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 ff77 	bl	800a6f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	691a      	ldr	r2, [r3, #16]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	695a      	ldr	r2, [r3, #20]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68da      	ldr	r2, [r3, #12]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2220      	movs	r2, #32
 8009844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2220      	movs	r2, #32
 800984c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b08c      	sub	sp, #48	@ 0x30
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	4613      	mov	r3, r2
 800986c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009874:	b2db      	uxtb	r3, r3
 8009876:	2b20      	cmp	r3, #32
 8009878:	d156      	bne.n	8009928 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d002      	beq.n	8009886 <HAL_UART_Transmit_DMA+0x26>
 8009880:	88fb      	ldrh	r3, [r7, #6]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e04f      	b.n	800992a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800988a:	68ba      	ldr	r2, [r7, #8]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	88fa      	ldrh	r2, [r7, #6]
 8009894:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	88fa      	ldrh	r2, [r7, #6]
 800989a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2200      	movs	r2, #0
 80098a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2221      	movs	r2, #33	@ 0x21
 80098a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ae:	4a21      	ldr	r2, [pc, #132]	@ (8009934 <HAL_UART_Transmit_DMA+0xd4>)
 80098b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098b6:	4a20      	ldr	r2, [pc, #128]	@ (8009938 <HAL_UART_Transmit_DMA+0xd8>)
 80098b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098be:	4a1f      	ldr	r2, [pc, #124]	@ (800993c <HAL_UART_Transmit_DMA+0xdc>)
 80098c0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098c6:	2200      	movs	r2, #0
 80098c8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80098ca:	f107 0308 	add.w	r3, r7, #8
 80098ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80098d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d6:	6819      	ldr	r1, [r3, #0]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3304      	adds	r3, #4
 80098de:	461a      	mov	r2, r3
 80098e0:	88fb      	ldrh	r3, [r7, #6]
 80098e2:	f7fc fadf 	bl	8005ea4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80098ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	3314      	adds	r3, #20
 80098f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	e853 3f00 	ldrex	r3, [r3]
 80098fe:	617b      	str	r3, [r7, #20]
   return(result);
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009906:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	3314      	adds	r3, #20
 800990e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009910:	627a      	str	r2, [r7, #36]	@ 0x24
 8009912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009914:	6a39      	ldr	r1, [r7, #32]
 8009916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009918:	e841 2300 	strex	r3, r2, [r1]
 800991c:	61fb      	str	r3, [r7, #28]
   return(result);
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1e5      	bne.n	80098f0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8009924:	2300      	movs	r3, #0
 8009926:	e000      	b.n	800992a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009928:	2302      	movs	r3, #2
  }
}
 800992a:	4618      	mov	r0, r3
 800992c:	3730      	adds	r7, #48	@ 0x30
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	08009f85 	.word	0x08009f85
 8009938:	0800a01f 	.word	0x0800a01f
 800993c:	0800a1a3 	.word	0x0800a1a3

08009940 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b08c      	sub	sp, #48	@ 0x30
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	4613      	mov	r3, r2
 800994c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009954:	b2db      	uxtb	r3, r3
 8009956:	2b20      	cmp	r3, #32
 8009958:	d14a      	bne.n	80099f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d002      	beq.n	8009966 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009960:	88fb      	ldrh	r3, [r7, #6]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e043      	b.n	80099f2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2201      	movs	r2, #1
 800996e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009976:	88fb      	ldrh	r3, [r7, #6]
 8009978:	461a      	mov	r2, r3
 800997a:	68b9      	ldr	r1, [r7, #8]
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f000 fc5b 	bl	800a238 <UART_Start_Receive_DMA>
 8009982:	4603      	mov	r3, r0
 8009984:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009988:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800998c:	2b00      	cmp	r3, #0
 800998e:	d12c      	bne.n	80099ea <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009994:	2b01      	cmp	r3, #1
 8009996:	d125      	bne.n	80099e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009998:	2300      	movs	r3, #0
 800999a:	613b      	str	r3, [r7, #16]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	613b      	str	r3, [r7, #16]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	613b      	str	r3, [r7, #16]
 80099ac:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	330c      	adds	r3, #12
 80099b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	e853 3f00 	ldrex	r3, [r3]
 80099bc:	617b      	str	r3, [r7, #20]
   return(result);
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f043 0310 	orr.w	r3, r3, #16
 80099c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	330c      	adds	r3, #12
 80099cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80099d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d2:	6a39      	ldr	r1, [r7, #32]
 80099d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099d6:	e841 2300 	strex	r3, r2, [r1]
 80099da:	61fb      	str	r3, [r7, #28]
   return(result);
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1e5      	bne.n	80099ae <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80099e2:	e002      	b.n	80099ea <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80099ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80099ee:	e000      	b.n	80099f2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80099f0:	2302      	movs	r3, #2
  }
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3730      	adds	r7, #48	@ 0x30
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
	...

080099fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b0ba      	sub	sp, #232	@ 0xe8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009a22:	2300      	movs	r3, #0
 8009a24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a32:	f003 030f 	and.w	r3, r3, #15
 8009a36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009a3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10f      	bne.n	8009a62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a46:	f003 0320 	and.w	r3, r3, #32
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d009      	beq.n	8009a62 <HAL_UART_IRQHandler+0x66>
 8009a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a52:	f003 0320 	and.w	r3, r3, #32
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fd8d 	bl	800a57a <UART_Receive_IT>
      return;
 8009a60:	e25b      	b.n	8009f1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009a62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f000 80de 	beq.w	8009c28 <HAL_UART_IRQHandler+0x22c>
 8009a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a70:	f003 0301 	and.w	r3, r3, #1
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d106      	bne.n	8009a86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a7c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f000 80d1 	beq.w	8009c28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00b      	beq.n	8009aaa <HAL_UART_IRQHandler+0xae>
 8009a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d005      	beq.n	8009aaa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aa2:	f043 0201 	orr.w	r2, r3, #1
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009aae:	f003 0304 	and.w	r3, r3, #4
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00b      	beq.n	8009ace <HAL_UART_IRQHandler+0xd2>
 8009ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009aba:	f003 0301 	and.w	r3, r3, #1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d005      	beq.n	8009ace <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ac6:	f043 0202 	orr.w	r2, r3, #2
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ad2:	f003 0302 	and.w	r3, r3, #2
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00b      	beq.n	8009af2 <HAL_UART_IRQHandler+0xf6>
 8009ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d005      	beq.n	8009af2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aea:	f043 0204 	orr.w	r2, r3, #4
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009af6:	f003 0308 	and.w	r3, r3, #8
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d011      	beq.n	8009b22 <HAL_UART_IRQHandler+0x126>
 8009afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b02:	f003 0320 	and.w	r3, r3, #32
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d105      	bne.n	8009b16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d005      	beq.n	8009b22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b1a:	f043 0208 	orr.w	r2, r3, #8
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f000 81f2 	beq.w	8009f10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b30:	f003 0320 	and.w	r3, r3, #32
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d008      	beq.n	8009b4a <HAL_UART_IRQHandler+0x14e>
 8009b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b3c:	f003 0320 	and.w	r3, r3, #32
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d002      	beq.n	8009b4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fd18 	bl	800a57a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	695b      	ldr	r3, [r3, #20]
 8009b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b54:	2b40      	cmp	r3, #64	@ 0x40
 8009b56:	bf0c      	ite	eq
 8009b58:	2301      	moveq	r3, #1
 8009b5a:	2300      	movne	r3, #0
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b66:	f003 0308 	and.w	r3, r3, #8
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d103      	bne.n	8009b76 <HAL_UART_IRQHandler+0x17a>
 8009b6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d04f      	beq.n	8009c16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fc20 	bl	800a3bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	695b      	ldr	r3, [r3, #20]
 8009b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b86:	2b40      	cmp	r3, #64	@ 0x40
 8009b88:	d141      	bne.n	8009c0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3314      	adds	r3, #20
 8009b90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b98:	e853 3f00 	ldrex	r3, [r3]
 8009b9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3314      	adds	r3, #20
 8009bb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009bb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009bba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009bc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009bc6:	e841 2300 	strex	r3, r2, [r1]
 8009bca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009bce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1d9      	bne.n	8009b8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d013      	beq.n	8009c06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009be2:	4a7e      	ldr	r2, [pc, #504]	@ (8009ddc <HAL_UART_IRQHandler+0x3e0>)
 8009be4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fc fa22 	bl	8006034 <HAL_DMA_Abort_IT>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d016      	beq.n	8009c24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009c00:	4610      	mov	r0, r2
 8009c02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c04:	e00e      	b.n	8009c24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f9b2 	bl	8009f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c0c:	e00a      	b.n	8009c24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f9ae 	bl	8009f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c14:	e006      	b.n	8009c24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f9aa 	bl	8009f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009c22:	e175      	b.n	8009f10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c24:	bf00      	nop
    return;
 8009c26:	e173      	b.n	8009f10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	f040 814f 	bne.w	8009ed0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c36:	f003 0310 	and.w	r3, r3, #16
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f000 8148 	beq.w	8009ed0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c44:	f003 0310 	and.w	r3, r3, #16
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f000 8141 	beq.w	8009ed0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60bb      	str	r3, [r7, #8]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	60bb      	str	r3, [r7, #8]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	60bb      	str	r3, [r7, #8]
 8009c62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	695b      	ldr	r3, [r3, #20]
 8009c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c6e:	2b40      	cmp	r3, #64	@ 0x40
 8009c70:	f040 80b6 	bne.w	8009de0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 8145 	beq.w	8009f14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009c8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c92:	429a      	cmp	r2, r3
 8009c94:	f080 813e 	bcs.w	8009f14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ca4:	69db      	ldr	r3, [r3, #28]
 8009ca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009caa:	f000 8088 	beq.w	8009dbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	330c      	adds	r3, #12
 8009cb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009cbc:	e853 3f00 	ldrex	r3, [r3]
 8009cc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009cc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	330c      	adds	r3, #12
 8009cd6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009cda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009cde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009ce6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009cea:	e841 2300 	strex	r3, r2, [r1]
 8009cee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1d9      	bne.n	8009cae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	3314      	adds	r3, #20
 8009d00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d04:	e853 3f00 	ldrex	r3, [r3]
 8009d08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009d0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d0c:	f023 0301 	bic.w	r3, r3, #1
 8009d10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3314      	adds	r3, #20
 8009d1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009d1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009d22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009d26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009d2a:	e841 2300 	strex	r3, r2, [r1]
 8009d2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009d30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1e1      	bne.n	8009cfa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	3314      	adds	r3, #20
 8009d3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d40:	e853 3f00 	ldrex	r3, [r3]
 8009d44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009d46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3314      	adds	r3, #20
 8009d56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009d5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009d60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d62:	e841 2300 	strex	r3, r2, [r1]
 8009d66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009d68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1e3      	bne.n	8009d36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2220      	movs	r2, #32
 8009d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	330c      	adds	r3, #12
 8009d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d86:	e853 3f00 	ldrex	r3, [r3]
 8009d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d8e:	f023 0310 	bic.w	r3, r3, #16
 8009d92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	330c      	adds	r3, #12
 8009d9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009da0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009da2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009da6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009da8:	e841 2300 	strex	r3, r2, [r1]
 8009dac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009dae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1e3      	bne.n	8009d7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7fc f8cb 	bl	8005f54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	1ad3      	subs	r3, r2, r3
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f7f7 fb63 	bl	80014a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009dda:	e09b      	b.n	8009f14 <HAL_UART_IRQHandler+0x518>
 8009ddc:	0800a483 	.word	0x0800a483
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 808e 	beq.w	8009f18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009dfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f000 8089 	beq.w	8009f18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	330c      	adds	r3, #12
 8009e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e10:	e853 3f00 	ldrex	r3, [r3]
 8009e14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	330c      	adds	r3, #12
 8009e26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009e2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8009e2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e32:	e841 2300 	strex	r3, r2, [r1]
 8009e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1e3      	bne.n	8009e06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	3314      	adds	r3, #20
 8009e44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e48:	e853 3f00 	ldrex	r3, [r3]
 8009e4c:	623b      	str	r3, [r7, #32]
   return(result);
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
 8009e50:	f023 0301 	bic.w	r3, r3, #1
 8009e54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	3314      	adds	r3, #20
 8009e5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009e62:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e6a:	e841 2300 	strex	r3, r2, [r1]
 8009e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1e3      	bne.n	8009e3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2220      	movs	r2, #32
 8009e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	330c      	adds	r3, #12
 8009e8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	e853 3f00 	ldrex	r3, [r3]
 8009e92:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f023 0310 	bic.w	r3, r3, #16
 8009e9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	330c      	adds	r3, #12
 8009ea4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009ea8:	61fa      	str	r2, [r7, #28]
 8009eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eac:	69b9      	ldr	r1, [r7, #24]
 8009eae:	69fa      	ldr	r2, [r7, #28]
 8009eb0:	e841 2300 	strex	r3, r2, [r1]
 8009eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1e3      	bne.n	8009e84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2202      	movs	r2, #2
 8009ec0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ec2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7f7 fae9 	bl	80014a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009ece:	e023      	b.n	8009f18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d009      	beq.n	8009ef0 <HAL_UART_IRQHandler+0x4f4>
 8009edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d003      	beq.n	8009ef0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fade 	bl	800a4aa <UART_Transmit_IT>
    return;
 8009eee:	e014      	b.n	8009f1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00e      	beq.n	8009f1a <HAL_UART_IRQHandler+0x51e>
 8009efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d008      	beq.n	8009f1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fb1e 	bl	800a54a <UART_EndTransmit_IT>
    return;
 8009f0e:	e004      	b.n	8009f1a <HAL_UART_IRQHandler+0x51e>
    return;
 8009f10:	bf00      	nop
 8009f12:	e002      	b.n	8009f1a <HAL_UART_IRQHandler+0x51e>
      return;
 8009f14:	bf00      	nop
 8009f16:	e000      	b.n	8009f1a <HAL_UART_IRQHandler+0x51e>
      return;
 8009f18:	bf00      	nop
  }
}
 8009f1a:	37e8      	adds	r7, #232	@ 0xe8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009f3c:	bf00      	nop
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009f64:	bf00      	nop
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b090      	sub	sp, #64	@ 0x40
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d137      	bne.n	800a010 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3314      	adds	r3, #20
 8009fac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb0:	e853 3f00 	ldrex	r3, [r3]
 8009fb4:	623b      	str	r3, [r7, #32]
   return(result);
 8009fb6:	6a3b      	ldr	r3, [r7, #32]
 8009fb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	3314      	adds	r3, #20
 8009fc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8009fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fce:	e841 2300 	strex	r3, r2, [r1]
 8009fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1e5      	bne.n	8009fa6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	330c      	adds	r3, #12
 8009fe0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	e853 3f00 	ldrex	r3, [r3]
 8009fe8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	330c      	adds	r3, #12
 8009ff8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ffa:	61fa      	str	r2, [r7, #28]
 8009ffc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffe:	69b9      	ldr	r1, [r7, #24]
 800a000:	69fa      	ldr	r2, [r7, #28]
 800a002:	e841 2300 	strex	r3, r2, [r1]
 800a006:	617b      	str	r3, [r7, #20]
   return(result);
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1e5      	bne.n	8009fda <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a00e:	e002      	b.n	800a016 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a010:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a012:	f7ff ff85 	bl	8009f20 <HAL_UART_TxCpltCallback>
}
 800a016:	bf00      	nop
 800a018:	3740      	adds	r7, #64	@ 0x40
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b084      	sub	sp, #16
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a02a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f7ff ff81 	bl	8009f34 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a032:	bf00      	nop
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b09c      	sub	sp, #112	@ 0x70
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a046:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a052:	2b00      	cmp	r3, #0
 800a054:	d172      	bne.n	800a13c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a058:	2200      	movs	r2, #0
 800a05a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a05c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	330c      	adds	r3, #12
 800a062:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a066:	e853 3f00 	ldrex	r3, [r3]
 800a06a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a06c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a06e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a072:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a074:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	330c      	adds	r3, #12
 800a07a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a07c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a07e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a080:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a082:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a084:	e841 2300 	strex	r3, r2, [r1]
 800a088:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a08a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1e5      	bne.n	800a05c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a090:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3314      	adds	r3, #20
 800a096:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09a:	e853 3f00 	ldrex	r3, [r3]
 800a09e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0a2:	f023 0301 	bic.w	r3, r3, #1
 800a0a6:	667b      	str	r3, [r7, #100]	@ 0x64
 800a0a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	3314      	adds	r3, #20
 800a0ae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a0b0:	647a      	str	r2, [r7, #68]	@ 0x44
 800a0b2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0b8:	e841 2300 	strex	r3, r2, [r1]
 800a0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d1e5      	bne.n	800a090 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	3314      	adds	r3, #20
 800a0ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ce:	e853 3f00 	ldrex	r3, [r3]
 800a0d2:	623b      	str	r3, [r7, #32]
   return(result);
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0da:	663b      	str	r3, [r7, #96]	@ 0x60
 800a0dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	3314      	adds	r3, #20
 800a0e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a0e4:	633a      	str	r2, [r7, #48]	@ 0x30
 800a0e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0ec:	e841 2300 	strex	r3, r2, [r1]
 800a0f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d1e5      	bne.n	800a0c4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a0f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0fa:	2220      	movs	r2, #32
 800a0fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a104:	2b01      	cmp	r3, #1
 800a106:	d119      	bne.n	800a13c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a108:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	330c      	adds	r3, #12
 800a10e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	e853 3f00 	ldrex	r3, [r3]
 800a116:	60fb      	str	r3, [r7, #12]
   return(result);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f023 0310 	bic.w	r3, r3, #16
 800a11e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a120:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	330c      	adds	r3, #12
 800a126:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a128:	61fa      	str	r2, [r7, #28]
 800a12a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12c:	69b9      	ldr	r1, [r7, #24]
 800a12e:	69fa      	ldr	r2, [r7, #28]
 800a130:	e841 2300 	strex	r3, r2, [r1]
 800a134:	617b      	str	r3, [r7, #20]
   return(result);
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1e5      	bne.n	800a108 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a13c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a13e:	2200      	movs	r2, #0
 800a140:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a146:	2b01      	cmp	r3, #1
 800a148:	d106      	bne.n	800a158 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a14a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a14c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a14e:	4619      	mov	r1, r3
 800a150:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a152:	f7f7 f9a5 	bl	80014a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a156:	e002      	b.n	800a15e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a158:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a15a:	f7ff fef5 	bl	8009f48 <HAL_UART_RxCpltCallback>
}
 800a15e:	bf00      	nop
 800a160:	3770      	adds	r7, #112	@ 0x70
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b084      	sub	sp, #16
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a172:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2201      	movs	r2, #1
 800a178:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d108      	bne.n	800a194 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a186:	085b      	lsrs	r3, r3, #1
 800a188:	b29b      	uxth	r3, r3
 800a18a:	4619      	mov	r1, r3
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f7f7 f987 	bl	80014a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a192:	e002      	b.n	800a19a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f7ff fee1 	bl	8009f5c <HAL_UART_RxHalfCpltCallback>
}
 800a19a:	bf00      	nop
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	695b      	ldr	r3, [r3, #20]
 800a1ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1be:	2b80      	cmp	r3, #128	@ 0x80
 800a1c0:	bf0c      	ite	eq
 800a1c2:	2301      	moveq	r3, #1
 800a1c4:	2300      	movne	r3, #0
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	2b21      	cmp	r3, #33	@ 0x21
 800a1d4:	d108      	bne.n	800a1e8 <UART_DMAError+0x46>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d005      	beq.n	800a1e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800a1e2:	68b8      	ldr	r0, [r7, #8]
 800a1e4:	f000 f8c2 	bl	800a36c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	695b      	ldr	r3, [r3, #20]
 800a1ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1f2:	2b40      	cmp	r3, #64	@ 0x40
 800a1f4:	bf0c      	ite	eq
 800a1f6:	2301      	moveq	r3, #1
 800a1f8:	2300      	movne	r3, #0
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a204:	b2db      	uxtb	r3, r3
 800a206:	2b22      	cmp	r3, #34	@ 0x22
 800a208:	d108      	bne.n	800a21c <UART_DMAError+0x7a>
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d005      	beq.n	800a21c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	2200      	movs	r2, #0
 800a214:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a216:	68b8      	ldr	r0, [r7, #8]
 800a218:	f000 f8d0 	bl	800a3bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a220:	f043 0210 	orr.w	r2, r3, #16
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a228:	68b8      	ldr	r0, [r7, #8]
 800a22a:	f7ff fea1 	bl	8009f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a22e:	bf00      	nop
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b098      	sub	sp, #96	@ 0x60
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	4613      	mov	r3, r2
 800a244:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	88fa      	ldrh	r2, [r7, #6]
 800a250:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2222      	movs	r2, #34	@ 0x22
 800a25c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a264:	4a3e      	ldr	r2, [pc, #248]	@ (800a360 <UART_Start_Receive_DMA+0x128>)
 800a266:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a26c:	4a3d      	ldr	r2, [pc, #244]	@ (800a364 <UART_Start_Receive_DMA+0x12c>)
 800a26e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a274:	4a3c      	ldr	r2, [pc, #240]	@ (800a368 <UART_Start_Receive_DMA+0x130>)
 800a276:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a27c:	2200      	movs	r2, #0
 800a27e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a280:	f107 0308 	add.w	r3, r7, #8
 800a284:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	3304      	adds	r3, #4
 800a290:	4619      	mov	r1, r3
 800a292:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	88fb      	ldrh	r3, [r7, #6]
 800a298:	f7fb fe04 	bl	8005ea4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a29c:	2300      	movs	r3, #0
 800a29e:	613b      	str	r3, [r7, #16]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	613b      	str	r3, [r7, #16]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	613b      	str	r3, [r7, #16]
 800a2b0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d019      	beq.n	800a2ee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	330c      	adds	r3, #12
 800a2c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2c4:	e853 3f00 	ldrex	r3, [r3]
 800a2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a2ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	330c      	adds	r3, #12
 800a2d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a2da:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a2dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2de:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a2e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a2e2:	e841 2300 	strex	r3, r2, [r1]
 800a2e6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a2e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1e5      	bne.n	800a2ba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	3314      	adds	r3, #20
 800a2f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2f8:	e853 3f00 	ldrex	r3, [r3]
 800a2fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a300:	f043 0301 	orr.w	r3, r3, #1
 800a304:	657b      	str	r3, [r7, #84]	@ 0x54
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	3314      	adds	r3, #20
 800a30c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a30e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a310:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a312:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a314:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a316:	e841 2300 	strex	r3, r2, [r1]
 800a31a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1e5      	bne.n	800a2ee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	3314      	adds	r3, #20
 800a328:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	e853 3f00 	ldrex	r3, [r3]
 800a330:	617b      	str	r3, [r7, #20]
   return(result);
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a338:	653b      	str	r3, [r7, #80]	@ 0x50
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	3314      	adds	r3, #20
 800a340:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a342:	627a      	str	r2, [r7, #36]	@ 0x24
 800a344:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a346:	6a39      	ldr	r1, [r7, #32]
 800a348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a34a:	e841 2300 	strex	r3, r2, [r1]
 800a34e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1e5      	bne.n	800a322 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3760      	adds	r7, #96	@ 0x60
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	0800a03b 	.word	0x0800a03b
 800a364:	0800a167 	.word	0x0800a167
 800a368:	0800a1a3 	.word	0x0800a1a3

0800a36c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b089      	sub	sp, #36	@ 0x24
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	330c      	adds	r3, #12
 800a37a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	e853 3f00 	ldrex	r3, [r3]
 800a382:	60bb      	str	r3, [r7, #8]
   return(result);
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a38a:	61fb      	str	r3, [r7, #28]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	330c      	adds	r3, #12
 800a392:	69fa      	ldr	r2, [r7, #28]
 800a394:	61ba      	str	r2, [r7, #24]
 800a396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a398:	6979      	ldr	r1, [r7, #20]
 800a39a:	69ba      	ldr	r2, [r7, #24]
 800a39c:	e841 2300 	strex	r3, r2, [r1]
 800a3a0:	613b      	str	r3, [r7, #16]
   return(result);
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1e5      	bne.n	800a374 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2220      	movs	r2, #32
 800a3ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a3b0:	bf00      	nop
 800a3b2:	3724      	adds	r7, #36	@ 0x24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b095      	sub	sp, #84	@ 0x54
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	330c      	adds	r3, #12
 800a3ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ce:	e853 3f00 	ldrex	r3, [r3]
 800a3d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	330c      	adds	r3, #12
 800a3e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a3e4:	643a      	str	r2, [r7, #64]	@ 0x40
 800a3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a3ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a3ec:	e841 2300 	strex	r3, r2, [r1]
 800a3f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1e5      	bne.n	800a3c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	3314      	adds	r3, #20
 800a3fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a400:	6a3b      	ldr	r3, [r7, #32]
 800a402:	e853 3f00 	ldrex	r3, [r3]
 800a406:	61fb      	str	r3, [r7, #28]
   return(result);
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	f023 0301 	bic.w	r3, r3, #1
 800a40e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	3314      	adds	r3, #20
 800a416:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a418:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a41a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a41e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a420:	e841 2300 	strex	r3, r2, [r1]
 800a424:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1e5      	bne.n	800a3f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a430:	2b01      	cmp	r3, #1
 800a432:	d119      	bne.n	800a468 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	330c      	adds	r3, #12
 800a43a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	e853 3f00 	ldrex	r3, [r3]
 800a442:	60bb      	str	r3, [r7, #8]
   return(result);
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	f023 0310 	bic.w	r3, r3, #16
 800a44a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	330c      	adds	r3, #12
 800a452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a454:	61ba      	str	r2, [r7, #24]
 800a456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a458:	6979      	ldr	r1, [r7, #20]
 800a45a:	69ba      	ldr	r2, [r7, #24]
 800a45c:	e841 2300 	strex	r3, r2, [r1]
 800a460:	613b      	str	r3, [r7, #16]
   return(result);
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1e5      	bne.n	800a434 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2220      	movs	r2, #32
 800a46c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a476:	bf00      	nop
 800a478:	3754      	adds	r7, #84	@ 0x54
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b084      	sub	sp, #16
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a48e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2200      	movs	r2, #0
 800a494:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f7ff fd67 	bl	8009f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4a2:	bf00      	nop
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	b085      	sub	sp, #20
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b21      	cmp	r3, #33	@ 0x21
 800a4bc:	d13e      	bne.n	800a53c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4c6:	d114      	bne.n	800a4f2 <UART_Transmit_IT+0x48>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	691b      	ldr	r3, [r3, #16]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d110      	bne.n	800a4f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a1b      	ldr	r3, [r3, #32]
 800a4d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	881b      	ldrh	r3, [r3, #0]
 800a4da:	461a      	mov	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	1c9a      	adds	r2, r3, #2
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	621a      	str	r2, [r3, #32]
 800a4f0:	e008      	b.n	800a504 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a1b      	ldr	r3, [r3, #32]
 800a4f6:	1c59      	adds	r1, r3, #1
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	6211      	str	r1, [r2, #32]
 800a4fc:	781a      	ldrb	r2, [r3, #0]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a508:	b29b      	uxth	r3, r3
 800a50a:	3b01      	subs	r3, #1
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	4619      	mov	r1, r3
 800a512:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10f      	bne.n	800a538 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68da      	ldr	r2, [r3, #12]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a526:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68da      	ldr	r2, [r3, #12]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a536:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a538:	2300      	movs	r3, #0
 800a53a:	e000      	b.n	800a53e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a53c:	2302      	movs	r3, #2
  }
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b082      	sub	sp, #8
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68da      	ldr	r2, [r3, #12]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a560:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2220      	movs	r2, #32
 800a566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f7ff fcd8 	bl	8009f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b08c      	sub	sp, #48	@ 0x30
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b22      	cmp	r3, #34	@ 0x22
 800a58c:	f040 80ae 	bne.w	800a6ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a598:	d117      	bne.n	800a5ca <UART_Receive_IT+0x50>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d113      	bne.n	800a5ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5b8:	b29a      	uxth	r2, r3
 800a5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5c2:	1c9a      	adds	r2, r3, #2
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	629a      	str	r2, [r3, #40]	@ 0x28
 800a5c8:	e026      	b.n	800a618 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5dc:	d007      	beq.n	800a5ee <UART_Receive_IT+0x74>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10a      	bne.n	800a5fc <UART_Receive_IT+0x82>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d106      	bne.n	800a5fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	b2da      	uxtb	r2, r3
 800a5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5f8:	701a      	strb	r2, [r3, #0]
 800a5fa:	e008      	b.n	800a60e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	b2db      	uxtb	r3, r3
 800a604:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a608:	b2da      	uxtb	r2, r3
 800a60a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a60c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a612:	1c5a      	adds	r2, r3, #1
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	3b01      	subs	r3, #1
 800a620:	b29b      	uxth	r3, r3
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	4619      	mov	r1, r3
 800a626:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d15d      	bne.n	800a6e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68da      	ldr	r2, [r3, #12]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f022 0220 	bic.w	r2, r2, #32
 800a63a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68da      	ldr	r2, [r3, #12]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a64a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	695a      	ldr	r2, [r3, #20]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f022 0201 	bic.w	r2, r2, #1
 800a65a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2220      	movs	r2, #32
 800a660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d135      	bne.n	800a6de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	330c      	adds	r3, #12
 800a67e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	e853 3f00 	ldrex	r3, [r3]
 800a686:	613b      	str	r3, [r7, #16]
   return(result);
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	f023 0310 	bic.w	r3, r3, #16
 800a68e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	330c      	adds	r3, #12
 800a696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a698:	623a      	str	r2, [r7, #32]
 800a69a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69c:	69f9      	ldr	r1, [r7, #28]
 800a69e:	6a3a      	ldr	r2, [r7, #32]
 800a6a0:	e841 2300 	strex	r3, r2, [r1]
 800a6a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1e5      	bne.n	800a678 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 0310 	and.w	r3, r3, #16
 800a6b6:	2b10      	cmp	r3, #16
 800a6b8:	d10a      	bne.n	800a6d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	60fb      	str	r3, [r7, #12]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	60fb      	str	r3, [r7, #12]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	60fb      	str	r3, [r7, #12]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f7f6 fee2 	bl	80014a0 <HAL_UARTEx_RxEventCallback>
 800a6dc:	e002      	b.n	800a6e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7ff fc32 	bl	8009f48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	e002      	b.n	800a6ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	e000      	b.n	800a6ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a6ec:	2302      	movs	r3, #2
  }
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3730      	adds	r7, #48	@ 0x30
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
	...

0800a6f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a6fc:	b0c0      	sub	sp, #256	@ 0x100
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a714:	68d9      	ldr	r1, [r3, #12]
 800a716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	ea40 0301 	orr.w	r3, r0, r1
 800a720:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a726:	689a      	ldr	r2, [r3, #8]
 800a728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	431a      	orrs	r2, r3
 800a730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a734:	695b      	ldr	r3, [r3, #20]
 800a736:	431a      	orrs	r2, r3
 800a738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a73c:	69db      	ldr	r3, [r3, #28]
 800a73e:	4313      	orrs	r3, r2
 800a740:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a750:	f021 010c 	bic.w	r1, r1, #12
 800a754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a75e:	430b      	orrs	r3, r1
 800a760:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	695b      	ldr	r3, [r3, #20]
 800a76a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a76e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a772:	6999      	ldr	r1, [r3, #24]
 800a774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	ea40 0301 	orr.w	r3, r0, r1
 800a77e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	4b8f      	ldr	r3, [pc, #572]	@ (800a9c4 <UART_SetConfig+0x2cc>)
 800a788:	429a      	cmp	r2, r3
 800a78a:	d005      	beq.n	800a798 <UART_SetConfig+0xa0>
 800a78c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	4b8d      	ldr	r3, [pc, #564]	@ (800a9c8 <UART_SetConfig+0x2d0>)
 800a794:	429a      	cmp	r2, r3
 800a796:	d104      	bne.n	800a7a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a798:	f7fd fd1a 	bl	80081d0 <HAL_RCC_GetPCLK2Freq>
 800a79c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a7a0:	e003      	b.n	800a7aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a7a2:	f7fd fd01 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 800a7a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7ae:	69db      	ldr	r3, [r3, #28]
 800a7b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7b4:	f040 810c 	bne.w	800a9d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a7b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a7c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a7c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a7ca:	4622      	mov	r2, r4
 800a7cc:	462b      	mov	r3, r5
 800a7ce:	1891      	adds	r1, r2, r2
 800a7d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a7d2:	415b      	adcs	r3, r3
 800a7d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a7d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a7da:	4621      	mov	r1, r4
 800a7dc:	eb12 0801 	adds.w	r8, r2, r1
 800a7e0:	4629      	mov	r1, r5
 800a7e2:	eb43 0901 	adc.w	r9, r3, r1
 800a7e6:	f04f 0200 	mov.w	r2, #0
 800a7ea:	f04f 0300 	mov.w	r3, #0
 800a7ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a7f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a7f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a7fa:	4690      	mov	r8, r2
 800a7fc:	4699      	mov	r9, r3
 800a7fe:	4623      	mov	r3, r4
 800a800:	eb18 0303 	adds.w	r3, r8, r3
 800a804:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a808:	462b      	mov	r3, r5
 800a80a:	eb49 0303 	adc.w	r3, r9, r3
 800a80e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a81e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a822:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a826:	460b      	mov	r3, r1
 800a828:	18db      	adds	r3, r3, r3
 800a82a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a82c:	4613      	mov	r3, r2
 800a82e:	eb42 0303 	adc.w	r3, r2, r3
 800a832:	657b      	str	r3, [r7, #84]	@ 0x54
 800a834:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a838:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a83c:	f7f5 fd20 	bl	8000280 <__aeabi_uldivmod>
 800a840:	4602      	mov	r2, r0
 800a842:	460b      	mov	r3, r1
 800a844:	4b61      	ldr	r3, [pc, #388]	@ (800a9cc <UART_SetConfig+0x2d4>)
 800a846:	fba3 2302 	umull	r2, r3, r3, r2
 800a84a:	095b      	lsrs	r3, r3, #5
 800a84c:	011c      	lsls	r4, r3, #4
 800a84e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a852:	2200      	movs	r2, #0
 800a854:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a858:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a85c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a860:	4642      	mov	r2, r8
 800a862:	464b      	mov	r3, r9
 800a864:	1891      	adds	r1, r2, r2
 800a866:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a868:	415b      	adcs	r3, r3
 800a86a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a86c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a870:	4641      	mov	r1, r8
 800a872:	eb12 0a01 	adds.w	sl, r2, r1
 800a876:	4649      	mov	r1, r9
 800a878:	eb43 0b01 	adc.w	fp, r3, r1
 800a87c:	f04f 0200 	mov.w	r2, #0
 800a880:	f04f 0300 	mov.w	r3, #0
 800a884:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a888:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a88c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a890:	4692      	mov	sl, r2
 800a892:	469b      	mov	fp, r3
 800a894:	4643      	mov	r3, r8
 800a896:	eb1a 0303 	adds.w	r3, sl, r3
 800a89a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a89e:	464b      	mov	r3, r9
 800a8a0:	eb4b 0303 	adc.w	r3, fp, r3
 800a8a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a8a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a8b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a8b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a8bc:	460b      	mov	r3, r1
 800a8be:	18db      	adds	r3, r3, r3
 800a8c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	eb42 0303 	adc.w	r3, r2, r3
 800a8c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a8ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a8d2:	f7f5 fcd5 	bl	8000280 <__aeabi_uldivmod>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	460b      	mov	r3, r1
 800a8da:	4611      	mov	r1, r2
 800a8dc:	4b3b      	ldr	r3, [pc, #236]	@ (800a9cc <UART_SetConfig+0x2d4>)
 800a8de:	fba3 2301 	umull	r2, r3, r3, r1
 800a8e2:	095b      	lsrs	r3, r3, #5
 800a8e4:	2264      	movs	r2, #100	@ 0x64
 800a8e6:	fb02 f303 	mul.w	r3, r2, r3
 800a8ea:	1acb      	subs	r3, r1, r3
 800a8ec:	00db      	lsls	r3, r3, #3
 800a8ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a8f2:	4b36      	ldr	r3, [pc, #216]	@ (800a9cc <UART_SetConfig+0x2d4>)
 800a8f4:	fba3 2302 	umull	r2, r3, r3, r2
 800a8f8:	095b      	lsrs	r3, r3, #5
 800a8fa:	005b      	lsls	r3, r3, #1
 800a8fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a900:	441c      	add	r4, r3
 800a902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a906:	2200      	movs	r2, #0
 800a908:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a90c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a910:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a914:	4642      	mov	r2, r8
 800a916:	464b      	mov	r3, r9
 800a918:	1891      	adds	r1, r2, r2
 800a91a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a91c:	415b      	adcs	r3, r3
 800a91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a920:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a924:	4641      	mov	r1, r8
 800a926:	1851      	adds	r1, r2, r1
 800a928:	6339      	str	r1, [r7, #48]	@ 0x30
 800a92a:	4649      	mov	r1, r9
 800a92c:	414b      	adcs	r3, r1
 800a92e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a930:	f04f 0200 	mov.w	r2, #0
 800a934:	f04f 0300 	mov.w	r3, #0
 800a938:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a93c:	4659      	mov	r1, fp
 800a93e:	00cb      	lsls	r3, r1, #3
 800a940:	4651      	mov	r1, sl
 800a942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a946:	4651      	mov	r1, sl
 800a948:	00ca      	lsls	r2, r1, #3
 800a94a:	4610      	mov	r0, r2
 800a94c:	4619      	mov	r1, r3
 800a94e:	4603      	mov	r3, r0
 800a950:	4642      	mov	r2, r8
 800a952:	189b      	adds	r3, r3, r2
 800a954:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a958:	464b      	mov	r3, r9
 800a95a:	460a      	mov	r2, r1
 800a95c:	eb42 0303 	adc.w	r3, r2, r3
 800a960:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a970:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a974:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a978:	460b      	mov	r3, r1
 800a97a:	18db      	adds	r3, r3, r3
 800a97c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a97e:	4613      	mov	r3, r2
 800a980:	eb42 0303 	adc.w	r3, r2, r3
 800a984:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a986:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a98a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a98e:	f7f5 fc77 	bl	8000280 <__aeabi_uldivmod>
 800a992:	4602      	mov	r2, r0
 800a994:	460b      	mov	r3, r1
 800a996:	4b0d      	ldr	r3, [pc, #52]	@ (800a9cc <UART_SetConfig+0x2d4>)
 800a998:	fba3 1302 	umull	r1, r3, r3, r2
 800a99c:	095b      	lsrs	r3, r3, #5
 800a99e:	2164      	movs	r1, #100	@ 0x64
 800a9a0:	fb01 f303 	mul.w	r3, r1, r3
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	00db      	lsls	r3, r3, #3
 800a9a8:	3332      	adds	r3, #50	@ 0x32
 800a9aa:	4a08      	ldr	r2, [pc, #32]	@ (800a9cc <UART_SetConfig+0x2d4>)
 800a9ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a9b0:	095b      	lsrs	r3, r3, #5
 800a9b2:	f003 0207 	and.w	r2, r3, #7
 800a9b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4422      	add	r2, r4
 800a9be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a9c0:	e106      	b.n	800abd0 <UART_SetConfig+0x4d8>
 800a9c2:	bf00      	nop
 800a9c4:	40011000 	.word	0x40011000
 800a9c8:	40011400 	.word	0x40011400
 800a9cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a9d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a9da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a9de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a9e2:	4642      	mov	r2, r8
 800a9e4:	464b      	mov	r3, r9
 800a9e6:	1891      	adds	r1, r2, r2
 800a9e8:	6239      	str	r1, [r7, #32]
 800a9ea:	415b      	adcs	r3, r3
 800a9ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a9f2:	4641      	mov	r1, r8
 800a9f4:	1854      	adds	r4, r2, r1
 800a9f6:	4649      	mov	r1, r9
 800a9f8:	eb43 0501 	adc.w	r5, r3, r1
 800a9fc:	f04f 0200 	mov.w	r2, #0
 800aa00:	f04f 0300 	mov.w	r3, #0
 800aa04:	00eb      	lsls	r3, r5, #3
 800aa06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aa0a:	00e2      	lsls	r2, r4, #3
 800aa0c:	4614      	mov	r4, r2
 800aa0e:	461d      	mov	r5, r3
 800aa10:	4643      	mov	r3, r8
 800aa12:	18e3      	adds	r3, r4, r3
 800aa14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aa18:	464b      	mov	r3, r9
 800aa1a:	eb45 0303 	adc.w	r3, r5, r3
 800aa1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aa22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aa2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800aa32:	f04f 0200 	mov.w	r2, #0
 800aa36:	f04f 0300 	mov.w	r3, #0
 800aa3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800aa3e:	4629      	mov	r1, r5
 800aa40:	008b      	lsls	r3, r1, #2
 800aa42:	4621      	mov	r1, r4
 800aa44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa48:	4621      	mov	r1, r4
 800aa4a:	008a      	lsls	r2, r1, #2
 800aa4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800aa50:	f7f5 fc16 	bl	8000280 <__aeabi_uldivmod>
 800aa54:	4602      	mov	r2, r0
 800aa56:	460b      	mov	r3, r1
 800aa58:	4b60      	ldr	r3, [pc, #384]	@ (800abdc <UART_SetConfig+0x4e4>)
 800aa5a:	fba3 2302 	umull	r2, r3, r3, r2
 800aa5e:	095b      	lsrs	r3, r3, #5
 800aa60:	011c      	lsls	r4, r3, #4
 800aa62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa66:	2200      	movs	r2, #0
 800aa68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aa6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800aa70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800aa74:	4642      	mov	r2, r8
 800aa76:	464b      	mov	r3, r9
 800aa78:	1891      	adds	r1, r2, r2
 800aa7a:	61b9      	str	r1, [r7, #24]
 800aa7c:	415b      	adcs	r3, r3
 800aa7e:	61fb      	str	r3, [r7, #28]
 800aa80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa84:	4641      	mov	r1, r8
 800aa86:	1851      	adds	r1, r2, r1
 800aa88:	6139      	str	r1, [r7, #16]
 800aa8a:	4649      	mov	r1, r9
 800aa8c:	414b      	adcs	r3, r1
 800aa8e:	617b      	str	r3, [r7, #20]
 800aa90:	f04f 0200 	mov.w	r2, #0
 800aa94:	f04f 0300 	mov.w	r3, #0
 800aa98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aa9c:	4659      	mov	r1, fp
 800aa9e:	00cb      	lsls	r3, r1, #3
 800aaa0:	4651      	mov	r1, sl
 800aaa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aaa6:	4651      	mov	r1, sl
 800aaa8:	00ca      	lsls	r2, r1, #3
 800aaaa:	4610      	mov	r0, r2
 800aaac:	4619      	mov	r1, r3
 800aaae:	4603      	mov	r3, r0
 800aab0:	4642      	mov	r2, r8
 800aab2:	189b      	adds	r3, r3, r2
 800aab4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aab8:	464b      	mov	r3, r9
 800aaba:	460a      	mov	r2, r1
 800aabc:	eb42 0303 	adc.w	r3, r2, r3
 800aac0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aace:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800aad0:	f04f 0200 	mov.w	r2, #0
 800aad4:	f04f 0300 	mov.w	r3, #0
 800aad8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800aadc:	4649      	mov	r1, r9
 800aade:	008b      	lsls	r3, r1, #2
 800aae0:	4641      	mov	r1, r8
 800aae2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aae6:	4641      	mov	r1, r8
 800aae8:	008a      	lsls	r2, r1, #2
 800aaea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800aaee:	f7f5 fbc7 	bl	8000280 <__aeabi_uldivmod>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	4b38      	ldr	r3, [pc, #224]	@ (800abdc <UART_SetConfig+0x4e4>)
 800aafa:	fba3 2301 	umull	r2, r3, r3, r1
 800aafe:	095b      	lsrs	r3, r3, #5
 800ab00:	2264      	movs	r2, #100	@ 0x64
 800ab02:	fb02 f303 	mul.w	r3, r2, r3
 800ab06:	1acb      	subs	r3, r1, r3
 800ab08:	011b      	lsls	r3, r3, #4
 800ab0a:	3332      	adds	r3, #50	@ 0x32
 800ab0c:	4a33      	ldr	r2, [pc, #204]	@ (800abdc <UART_SetConfig+0x4e4>)
 800ab0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab12:	095b      	lsrs	r3, r3, #5
 800ab14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ab18:	441c      	add	r4, r3
 800ab1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab1e:	2200      	movs	r2, #0
 800ab20:	673b      	str	r3, [r7, #112]	@ 0x70
 800ab22:	677a      	str	r2, [r7, #116]	@ 0x74
 800ab24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ab28:	4642      	mov	r2, r8
 800ab2a:	464b      	mov	r3, r9
 800ab2c:	1891      	adds	r1, r2, r2
 800ab2e:	60b9      	str	r1, [r7, #8]
 800ab30:	415b      	adcs	r3, r3
 800ab32:	60fb      	str	r3, [r7, #12]
 800ab34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab38:	4641      	mov	r1, r8
 800ab3a:	1851      	adds	r1, r2, r1
 800ab3c:	6039      	str	r1, [r7, #0]
 800ab3e:	4649      	mov	r1, r9
 800ab40:	414b      	adcs	r3, r1
 800ab42:	607b      	str	r3, [r7, #4]
 800ab44:	f04f 0200 	mov.w	r2, #0
 800ab48:	f04f 0300 	mov.w	r3, #0
 800ab4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ab50:	4659      	mov	r1, fp
 800ab52:	00cb      	lsls	r3, r1, #3
 800ab54:	4651      	mov	r1, sl
 800ab56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab5a:	4651      	mov	r1, sl
 800ab5c:	00ca      	lsls	r2, r1, #3
 800ab5e:	4610      	mov	r0, r2
 800ab60:	4619      	mov	r1, r3
 800ab62:	4603      	mov	r3, r0
 800ab64:	4642      	mov	r2, r8
 800ab66:	189b      	adds	r3, r3, r2
 800ab68:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab6a:	464b      	mov	r3, r9
 800ab6c:	460a      	mov	r2, r1
 800ab6e:	eb42 0303 	adc.w	r3, r2, r3
 800ab72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ab74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ab7e:	667a      	str	r2, [r7, #100]	@ 0x64
 800ab80:	f04f 0200 	mov.w	r2, #0
 800ab84:	f04f 0300 	mov.w	r3, #0
 800ab88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ab8c:	4649      	mov	r1, r9
 800ab8e:	008b      	lsls	r3, r1, #2
 800ab90:	4641      	mov	r1, r8
 800ab92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab96:	4641      	mov	r1, r8
 800ab98:	008a      	lsls	r2, r1, #2
 800ab9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ab9e:	f7f5 fb6f 	bl	8000280 <__aeabi_uldivmod>
 800aba2:	4602      	mov	r2, r0
 800aba4:	460b      	mov	r3, r1
 800aba6:	4b0d      	ldr	r3, [pc, #52]	@ (800abdc <UART_SetConfig+0x4e4>)
 800aba8:	fba3 1302 	umull	r1, r3, r3, r2
 800abac:	095b      	lsrs	r3, r3, #5
 800abae:	2164      	movs	r1, #100	@ 0x64
 800abb0:	fb01 f303 	mul.w	r3, r1, r3
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	011b      	lsls	r3, r3, #4
 800abb8:	3332      	adds	r3, #50	@ 0x32
 800abba:	4a08      	ldr	r2, [pc, #32]	@ (800abdc <UART_SetConfig+0x4e4>)
 800abbc:	fba2 2303 	umull	r2, r3, r2, r3
 800abc0:	095b      	lsrs	r3, r3, #5
 800abc2:	f003 020f 	and.w	r2, r3, #15
 800abc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4422      	add	r2, r4
 800abce:	609a      	str	r2, [r3, #8]
}
 800abd0:	bf00      	nop
 800abd2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800abd6:	46bd      	mov	sp, r7
 800abd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800abdc:	51eb851f 	.word	0x51eb851f

0800abe0 <__NVIC_SetPriority>:
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	4603      	mov	r3, r0
 800abe8:	6039      	str	r1, [r7, #0]
 800abea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800abec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	db0a      	blt.n	800ac0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	b2da      	uxtb	r2, r3
 800abf8:	490c      	ldr	r1, [pc, #48]	@ (800ac2c <__NVIC_SetPriority+0x4c>)
 800abfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abfe:	0112      	lsls	r2, r2, #4
 800ac00:	b2d2      	uxtb	r2, r2
 800ac02:	440b      	add	r3, r1
 800ac04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ac08:	e00a      	b.n	800ac20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	b2da      	uxtb	r2, r3
 800ac0e:	4908      	ldr	r1, [pc, #32]	@ (800ac30 <__NVIC_SetPriority+0x50>)
 800ac10:	79fb      	ldrb	r3, [r7, #7]
 800ac12:	f003 030f 	and.w	r3, r3, #15
 800ac16:	3b04      	subs	r3, #4
 800ac18:	0112      	lsls	r2, r2, #4
 800ac1a:	b2d2      	uxtb	r2, r2
 800ac1c:	440b      	add	r3, r1
 800ac1e:	761a      	strb	r2, [r3, #24]
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr
 800ac2c:	e000e100 	.word	0xe000e100
 800ac30:	e000ed00 	.word	0xe000ed00

0800ac34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ac34:	b580      	push	{r7, lr}
 800ac36:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ac38:	2100      	movs	r1, #0
 800ac3a:	f06f 0004 	mvn.w	r0, #4
 800ac3e:	f7ff ffcf 	bl	800abe0 <__NVIC_SetPriority>
#endif
}
 800ac42:	bf00      	nop
 800ac44:	bd80      	pop	{r7, pc}
	...

0800ac48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac4e:	f3ef 8305 	mrs	r3, IPSR
 800ac52:	603b      	str	r3, [r7, #0]
  return(result);
 800ac54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d003      	beq.n	800ac62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ac5a:	f06f 0305 	mvn.w	r3, #5
 800ac5e:	607b      	str	r3, [r7, #4]
 800ac60:	e00c      	b.n	800ac7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ac62:	4b0a      	ldr	r3, [pc, #40]	@ (800ac8c <osKernelInitialize+0x44>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d105      	bne.n	800ac76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ac6a:	4b08      	ldr	r3, [pc, #32]	@ (800ac8c <osKernelInitialize+0x44>)
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ac70:	2300      	movs	r3, #0
 800ac72:	607b      	str	r3, [r7, #4]
 800ac74:	e002      	b.n	800ac7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ac76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ac7c:	687b      	ldr	r3, [r7, #4]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	370c      	adds	r7, #12
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	20000e9c 	.word	0x20000e9c

0800ac90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac96:	f3ef 8305 	mrs	r3, IPSR
 800ac9a:	603b      	str	r3, [r7, #0]
  return(result);
 800ac9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d003      	beq.n	800acaa <osKernelStart+0x1a>
    stat = osErrorISR;
 800aca2:	f06f 0305 	mvn.w	r3, #5
 800aca6:	607b      	str	r3, [r7, #4]
 800aca8:	e010      	b.n	800accc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800acaa:	4b0b      	ldr	r3, [pc, #44]	@ (800acd8 <osKernelStart+0x48>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d109      	bne.n	800acc6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800acb2:	f7ff ffbf 	bl	800ac34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800acb6:	4b08      	ldr	r3, [pc, #32]	@ (800acd8 <osKernelStart+0x48>)
 800acb8:	2202      	movs	r2, #2
 800acba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800acbc:	f001 f892 	bl	800bde4 <vTaskStartScheduler>
      stat = osOK;
 800acc0:	2300      	movs	r3, #0
 800acc2:	607b      	str	r3, [r7, #4]
 800acc4:	e002      	b.n	800accc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800acc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800acca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800accc:	687b      	ldr	r3, [r7, #4]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3708      	adds	r7, #8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	20000e9c 	.word	0x20000e9c

0800acdc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800acdc:	b580      	push	{r7, lr}
 800acde:	b08e      	sub	sp, #56	@ 0x38
 800ace0:	af04      	add	r7, sp, #16
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ace8:	2300      	movs	r3, #0
 800acea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acec:	f3ef 8305 	mrs	r3, IPSR
 800acf0:	617b      	str	r3, [r7, #20]
  return(result);
 800acf2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d17e      	bne.n	800adf6 <osThreadNew+0x11a>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d07b      	beq.n	800adf6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800acfe:	2380      	movs	r3, #128	@ 0x80
 800ad00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ad02:	2318      	movs	r3, #24
 800ad04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ad06:	2300      	movs	r3, #0
 800ad08:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ad0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ad0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d045      	beq.n	800ada2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d002      	beq.n	800ad24 <osThreadNew+0x48>
        name = attr->name;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	699b      	ldr	r3, [r3, #24]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d002      	beq.n	800ad32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	699b      	ldr	r3, [r3, #24]
 800ad30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d008      	beq.n	800ad4a <osThreadNew+0x6e>
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	2b38      	cmp	r3, #56	@ 0x38
 800ad3c:	d805      	bhi.n	800ad4a <osThreadNew+0x6e>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	f003 0301 	and.w	r3, r3, #1
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d001      	beq.n	800ad4e <osThreadNew+0x72>
        return (NULL);
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	e054      	b.n	800adf8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	695b      	ldr	r3, [r3, #20]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d003      	beq.n	800ad5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	695b      	ldr	r3, [r3, #20]
 800ad5a:	089b      	lsrs	r3, r3, #2
 800ad5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00e      	beq.n	800ad84 <osThreadNew+0xa8>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	2ba7      	cmp	r3, #167	@ 0xa7
 800ad6c:	d90a      	bls.n	800ad84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d006      	beq.n	800ad84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	695b      	ldr	r3, [r3, #20]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d002      	beq.n	800ad84 <osThreadNew+0xa8>
        mem = 1;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	61bb      	str	r3, [r7, #24]
 800ad82:	e010      	b.n	800ada6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10c      	bne.n	800ada6 <osThreadNew+0xca>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d108      	bne.n	800ada6 <osThreadNew+0xca>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	691b      	ldr	r3, [r3, #16]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d104      	bne.n	800ada6 <osThreadNew+0xca>
          mem = 0;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	61bb      	str	r3, [r7, #24]
 800ada0:	e001      	b.n	800ada6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d110      	bne.n	800adce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800adb4:	9202      	str	r2, [sp, #8]
 800adb6:	9301      	str	r3, [sp, #4]
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	9300      	str	r3, [sp, #0]
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	6a3a      	ldr	r2, [r7, #32]
 800adc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f000 fe1a 	bl	800b9fc <xTaskCreateStatic>
 800adc8:	4603      	mov	r3, r0
 800adca:	613b      	str	r3, [r7, #16]
 800adcc:	e013      	b.n	800adf6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d110      	bne.n	800adf6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800add4:	6a3b      	ldr	r3, [r7, #32]
 800add6:	b29a      	uxth	r2, r3
 800add8:	f107 0310 	add.w	r3, r7, #16
 800addc:	9301      	str	r3, [sp, #4]
 800adde:	69fb      	ldr	r3, [r7, #28]
 800ade0:	9300      	str	r3, [sp, #0]
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f000 fe68 	bl	800babc <xTaskCreate>
 800adec:	4603      	mov	r3, r0
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d001      	beq.n	800adf6 <osThreadNew+0x11a>
            hTask = NULL;
 800adf2:	2300      	movs	r3, #0
 800adf4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800adf6:	693b      	ldr	r3, [r7, #16]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3728      	adds	r7, #40	@ 0x28
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae08:	f3ef 8305 	mrs	r3, IPSR
 800ae0c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d003      	beq.n	800ae1c <osDelay+0x1c>
    stat = osErrorISR;
 800ae14:	f06f 0305 	mvn.w	r3, #5
 800ae18:	60fb      	str	r3, [r7, #12]
 800ae1a:	e007      	b.n	800ae2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d002      	beq.n	800ae2c <osDelay+0x2c>
      vTaskDelay(ticks);
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 ffa6 	bl	800bd78 <vTaskDelay>
    }
  }

  return (stat);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
	...

0800ae38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ae38:	b480      	push	{r7}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	60b9      	str	r1, [r7, #8]
 800ae42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	4a07      	ldr	r2, [pc, #28]	@ (800ae64 <vApplicationGetIdleTaskMemory+0x2c>)
 800ae48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	4a06      	ldr	r2, [pc, #24]	@ (800ae68 <vApplicationGetIdleTaskMemory+0x30>)
 800ae4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2280      	movs	r2, #128	@ 0x80
 800ae54:	601a      	str	r2, [r3, #0]
}
 800ae56:	bf00      	nop
 800ae58:	3714      	adds	r7, #20
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	20000ea0 	.word	0x20000ea0
 800ae68:	20000f48 	.word	0x20000f48

0800ae6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	4a07      	ldr	r2, [pc, #28]	@ (800ae98 <vApplicationGetTimerTaskMemory+0x2c>)
 800ae7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	4a06      	ldr	r2, [pc, #24]	@ (800ae9c <vApplicationGetTimerTaskMemory+0x30>)
 800ae82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ae8a:	601a      	str	r2, [r3, #0]
}
 800ae8c:	bf00      	nop
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr
 800ae98:	20001148 	.word	0x20001148
 800ae9c:	200011f0 	.word	0x200011f0

0800aea0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f103 0208 	add.w	r2, r3, #8
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aeb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f103 0208 	add.w	r2, r3, #8
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f103 0208 	add.w	r2, r3, #8
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aed4:	bf00      	nop
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aeee:	bf00      	nop
 800aef0:	370c      	adds	r7, #12
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aefa:	b480      	push	{r7}
 800aefc:	b085      	sub	sp, #20
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
 800af02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	689a      	ldr	r2, [r3, #8]
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	683a      	ldr	r2, [r7, #0]
 800af1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	683a      	ldr	r2, [r7, #0]
 800af24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	1c5a      	adds	r2, r3, #1
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	601a      	str	r2, [r3, #0]
}
 800af36:	bf00      	nop
 800af38:	3714      	adds	r7, #20
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr

0800af42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af42:	b480      	push	{r7}
 800af44:	b085      	sub	sp, #20
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af58:	d103      	bne.n	800af62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	60fb      	str	r3, [r7, #12]
 800af60:	e00c      	b.n	800af7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	3308      	adds	r3, #8
 800af66:	60fb      	str	r3, [r7, #12]
 800af68:	e002      	b.n	800af70 <vListInsert+0x2e>
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	60fb      	str	r3, [r7, #12]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	68ba      	ldr	r2, [r7, #8]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d2f6      	bcs.n	800af6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	685a      	ldr	r2, [r3, #4]
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	683a      	ldr	r2, [r7, #0]
 800af8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	68fa      	ldr	r2, [r7, #12]
 800af90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	1c5a      	adds	r2, r3, #1
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	601a      	str	r2, [r3, #0]
}
 800afa8:	bf00      	nop
 800afaa:	3714      	adds	r7, #20
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	6892      	ldr	r2, [r2, #8]
 800afca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	6852      	ldr	r2, [r2, #4]
 800afd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d103      	bne.n	800afe8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	689a      	ldr	r2, [r3, #8]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	1e5a      	subs	r2, r3, #1
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3714      	adds	r7, #20
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr

0800b008 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10b      	bne.n	800b034 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b020:	f383 8811 	msr	BASEPRI, r3
 800b024:	f3bf 8f6f 	isb	sy
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b02e:	bf00      	nop
 800b030:	bf00      	nop
 800b032:	e7fd      	b.n	800b030 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b034:	f002 fa80 	bl	800d538 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b040:	68f9      	ldr	r1, [r7, #12]
 800b042:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b044:	fb01 f303 	mul.w	r3, r1, r3
 800b048:	441a      	add	r2, r3
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2200      	movs	r2, #0
 800b052:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b064:	3b01      	subs	r3, #1
 800b066:	68f9      	ldr	r1, [r7, #12]
 800b068:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b06a:	fb01 f303 	mul.w	r3, r1, r3
 800b06e:	441a      	add	r2, r3
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	22ff      	movs	r2, #255	@ 0xff
 800b078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	22ff      	movs	r2, #255	@ 0xff
 800b080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d114      	bne.n	800b0b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d01a      	beq.n	800b0c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	3310      	adds	r3, #16
 800b096:	4618      	mov	r0, r3
 800b098:	f001 fa3c 	bl	800c514 <xTaskRemoveFromEventList>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d012      	beq.n	800b0c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b0a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b0d8 <xQueueGenericReset+0xd0>)
 800b0a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0a8:	601a      	str	r2, [r3, #0]
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	f3bf 8f6f 	isb	sy
 800b0b2:	e009      	b.n	800b0c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	3310      	adds	r3, #16
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7ff fef1 	bl	800aea0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	3324      	adds	r3, #36	@ 0x24
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7ff feec 	bl	800aea0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b0c8:	f002 fa68 	bl	800d59c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b0cc:	2301      	movs	r3, #1
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	e000ed04 	.word	0xe000ed04

0800b0dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b08e      	sub	sp, #56	@ 0x38
 800b0e0:	af02      	add	r7, sp, #8
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
 800b0e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d10b      	bne.n	800b108 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0f4:	f383 8811 	msr	BASEPRI, r3
 800b0f8:	f3bf 8f6f 	isb	sy
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b102:	bf00      	nop
 800b104:	bf00      	nop
 800b106:	e7fd      	b.n	800b104 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10b      	bne.n	800b126 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b120:	bf00      	nop
 800b122:	bf00      	nop
 800b124:	e7fd      	b.n	800b122 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d002      	beq.n	800b132 <xQueueGenericCreateStatic+0x56>
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d001      	beq.n	800b136 <xQueueGenericCreateStatic+0x5a>
 800b132:	2301      	movs	r3, #1
 800b134:	e000      	b.n	800b138 <xQueueGenericCreateStatic+0x5c>
 800b136:	2300      	movs	r3, #0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10b      	bne.n	800b154 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b140:	f383 8811 	msr	BASEPRI, r3
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	623b      	str	r3, [r7, #32]
}
 800b14e:	bf00      	nop
 800b150:	bf00      	nop
 800b152:	e7fd      	b.n	800b150 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d102      	bne.n	800b160 <xQueueGenericCreateStatic+0x84>
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d101      	bne.n	800b164 <xQueueGenericCreateStatic+0x88>
 800b160:	2301      	movs	r3, #1
 800b162:	e000      	b.n	800b166 <xQueueGenericCreateStatic+0x8a>
 800b164:	2300      	movs	r3, #0
 800b166:	2b00      	cmp	r3, #0
 800b168:	d10b      	bne.n	800b182 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b16e:	f383 8811 	msr	BASEPRI, r3
 800b172:	f3bf 8f6f 	isb	sy
 800b176:	f3bf 8f4f 	dsb	sy
 800b17a:	61fb      	str	r3, [r7, #28]
}
 800b17c:	bf00      	nop
 800b17e:	bf00      	nop
 800b180:	e7fd      	b.n	800b17e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b182:	2350      	movs	r3, #80	@ 0x50
 800b184:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	2b50      	cmp	r3, #80	@ 0x50
 800b18a:	d00b      	beq.n	800b1a4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b18c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b190:	f383 8811 	msr	BASEPRI, r3
 800b194:	f3bf 8f6f 	isb	sy
 800b198:	f3bf 8f4f 	dsb	sy
 800b19c:	61bb      	str	r3, [r7, #24]
}
 800b19e:	bf00      	nop
 800b1a0:	bf00      	nop
 800b1a2:	e7fd      	b.n	800b1a0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b1a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d00d      	beq.n	800b1cc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b1b8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	68b9      	ldr	r1, [r7, #8]
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f000 f805 	bl	800b1d6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3730      	adds	r7, #48	@ 0x30
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b084      	sub	sp, #16
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	60f8      	str	r0, [r7, #12]
 800b1de:	60b9      	str	r1, [r7, #8]
 800b1e0:	607a      	str	r2, [r7, #4]
 800b1e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d103      	bne.n	800b1f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	69ba      	ldr	r2, [r7, #24]
 800b1ee:	601a      	str	r2, [r3, #0]
 800b1f0:	e002      	b.n	800b1f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b204:	2101      	movs	r1, #1
 800b206:	69b8      	ldr	r0, [r7, #24]
 800b208:	f7ff fefe 	bl	800b008 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	78fa      	ldrb	r2, [r7, #3]
 800b210:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b214:	bf00      	nop
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b08e      	sub	sp, #56	@ 0x38
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	607a      	str	r2, [r7, #4]
 800b228:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b22a:	2300      	movs	r3, #0
 800b22c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b234:	2b00      	cmp	r3, #0
 800b236:	d10b      	bne.n	800b250 <xQueueGenericSend+0x34>
	__asm volatile
 800b238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b23c:	f383 8811 	msr	BASEPRI, r3
 800b240:	f3bf 8f6f 	isb	sy
 800b244:	f3bf 8f4f 	dsb	sy
 800b248:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b24a:	bf00      	nop
 800b24c:	bf00      	nop
 800b24e:	e7fd      	b.n	800b24c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d103      	bne.n	800b25e <xQueueGenericSend+0x42>
 800b256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d101      	bne.n	800b262 <xQueueGenericSend+0x46>
 800b25e:	2301      	movs	r3, #1
 800b260:	e000      	b.n	800b264 <xQueueGenericSend+0x48>
 800b262:	2300      	movs	r3, #0
 800b264:	2b00      	cmp	r3, #0
 800b266:	d10b      	bne.n	800b280 <xQueueGenericSend+0x64>
	__asm volatile
 800b268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b26c:	f383 8811 	msr	BASEPRI, r3
 800b270:	f3bf 8f6f 	isb	sy
 800b274:	f3bf 8f4f 	dsb	sy
 800b278:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b27a:	bf00      	nop
 800b27c:	bf00      	nop
 800b27e:	e7fd      	b.n	800b27c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	2b02      	cmp	r3, #2
 800b284:	d103      	bne.n	800b28e <xQueueGenericSend+0x72>
 800b286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d101      	bne.n	800b292 <xQueueGenericSend+0x76>
 800b28e:	2301      	movs	r3, #1
 800b290:	e000      	b.n	800b294 <xQueueGenericSend+0x78>
 800b292:	2300      	movs	r3, #0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d10b      	bne.n	800b2b0 <xQueueGenericSend+0x94>
	__asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	623b      	str	r3, [r7, #32]
}
 800b2aa:	bf00      	nop
 800b2ac:	bf00      	nop
 800b2ae:	e7fd      	b.n	800b2ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2b0:	f001 faf6 	bl	800c8a0 <xTaskGetSchedulerState>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d102      	bne.n	800b2c0 <xQueueGenericSend+0xa4>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d101      	bne.n	800b2c4 <xQueueGenericSend+0xa8>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e000      	b.n	800b2c6 <xQueueGenericSend+0xaa>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10b      	bne.n	800b2e2 <xQueueGenericSend+0xc6>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	61fb      	str	r3, [r7, #28]
}
 800b2dc:	bf00      	nop
 800b2de:	bf00      	nop
 800b2e0:	e7fd      	b.n	800b2de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2e2:	f002 f929 	bl	800d538 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d302      	bcc.n	800b2f8 <xQueueGenericSend+0xdc>
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	d129      	bne.n	800b34c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b2f8:	683a      	ldr	r2, [r7, #0]
 800b2fa:	68b9      	ldr	r1, [r7, #8]
 800b2fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2fe:	f000 fa0f 	bl	800b720 <prvCopyDataToQueue>
 800b302:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d010      	beq.n	800b32e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b30e:	3324      	adds	r3, #36	@ 0x24
 800b310:	4618      	mov	r0, r3
 800b312:	f001 f8ff 	bl	800c514 <xTaskRemoveFromEventList>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d013      	beq.n	800b344 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b31c:	4b3f      	ldr	r3, [pc, #252]	@ (800b41c <xQueueGenericSend+0x200>)
 800b31e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b322:	601a      	str	r2, [r3, #0]
 800b324:	f3bf 8f4f 	dsb	sy
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	e00a      	b.n	800b344 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b32e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b330:	2b00      	cmp	r3, #0
 800b332:	d007      	beq.n	800b344 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b334:	4b39      	ldr	r3, [pc, #228]	@ (800b41c <xQueueGenericSend+0x200>)
 800b336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b33a:	601a      	str	r2, [r3, #0]
 800b33c:	f3bf 8f4f 	dsb	sy
 800b340:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b344:	f002 f92a 	bl	800d59c <vPortExitCritical>
				return pdPASS;
 800b348:	2301      	movs	r3, #1
 800b34a:	e063      	b.n	800b414 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d103      	bne.n	800b35a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b352:	f002 f923 	bl	800d59c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b356:	2300      	movs	r3, #0
 800b358:	e05c      	b.n	800b414 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b35a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d106      	bne.n	800b36e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b360:	f107 0314 	add.w	r3, r7, #20
 800b364:	4618      	mov	r0, r3
 800b366:	f001 f939 	bl	800c5dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b36a:	2301      	movs	r3, #1
 800b36c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b36e:	f002 f915 	bl	800d59c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b372:	f000 fda7 	bl	800bec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b376:	f002 f8df 	bl	800d538 <vPortEnterCritical>
 800b37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b380:	b25b      	sxtb	r3, r3
 800b382:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b386:	d103      	bne.n	800b390 <xQueueGenericSend+0x174>
 800b388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b38a:	2200      	movs	r2, #0
 800b38c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b392:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b396:	b25b      	sxtb	r3, r3
 800b398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b39c:	d103      	bne.n	800b3a6 <xQueueGenericSend+0x18a>
 800b39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b3a6:	f002 f8f9 	bl	800d59c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3aa:	1d3a      	adds	r2, r7, #4
 800b3ac:	f107 0314 	add.w	r3, r7, #20
 800b3b0:	4611      	mov	r1, r2
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f001 f928 	bl	800c608 <xTaskCheckForTimeOut>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d124      	bne.n	800b408 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b3be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b3c0:	f000 faa6 	bl	800b910 <prvIsQueueFull>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d018      	beq.n	800b3fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3cc:	3310      	adds	r3, #16
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	4611      	mov	r1, r2
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f001 f84c 	bl	800c470 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b3d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b3da:	f000 fa31 	bl	800b840 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b3de:	f000 fd7f 	bl	800bee0 <xTaskResumeAll>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f47f af7c 	bne.w	800b2e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b3ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b41c <xQueueGenericSend+0x200>)
 800b3ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3f0:	601a      	str	r2, [r3, #0]
 800b3f2:	f3bf 8f4f 	dsb	sy
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	e772      	b.n	800b2e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b3fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b3fe:	f000 fa1f 	bl	800b840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b402:	f000 fd6d 	bl	800bee0 <xTaskResumeAll>
 800b406:	e76c      	b.n	800b2e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b408:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b40a:	f000 fa19 	bl	800b840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b40e:	f000 fd67 	bl	800bee0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b412:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b414:	4618      	mov	r0, r3
 800b416:	3738      	adds	r7, #56	@ 0x38
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	e000ed04 	.word	0xe000ed04

0800b420 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b090      	sub	sp, #64	@ 0x40
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
 800b42c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10b      	bne.n	800b450 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b44a:	bf00      	nop
 800b44c:	bf00      	nop
 800b44e:	e7fd      	b.n	800b44c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d103      	bne.n	800b45e <xQueueGenericSendFromISR+0x3e>
 800b456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d101      	bne.n	800b462 <xQueueGenericSendFromISR+0x42>
 800b45e:	2301      	movs	r3, #1
 800b460:	e000      	b.n	800b464 <xQueueGenericSendFromISR+0x44>
 800b462:	2300      	movs	r3, #0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10b      	bne.n	800b480 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b46c:	f383 8811 	msr	BASEPRI, r3
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f3bf 8f4f 	dsb	sy
 800b478:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b47a:	bf00      	nop
 800b47c:	bf00      	nop
 800b47e:	e7fd      	b.n	800b47c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	2b02      	cmp	r3, #2
 800b484:	d103      	bne.n	800b48e <xQueueGenericSendFromISR+0x6e>
 800b486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d101      	bne.n	800b492 <xQueueGenericSendFromISR+0x72>
 800b48e:	2301      	movs	r3, #1
 800b490:	e000      	b.n	800b494 <xQueueGenericSendFromISR+0x74>
 800b492:	2300      	movs	r3, #0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d10b      	bne.n	800b4b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b49c:	f383 8811 	msr	BASEPRI, r3
 800b4a0:	f3bf 8f6f 	isb	sy
 800b4a4:	f3bf 8f4f 	dsb	sy
 800b4a8:	623b      	str	r3, [r7, #32]
}
 800b4aa:	bf00      	nop
 800b4ac:	bf00      	nop
 800b4ae:	e7fd      	b.n	800b4ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4b0:	f002 f922 	bl	800d6f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b4b4:	f3ef 8211 	mrs	r2, BASEPRI
 800b4b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4bc:	f383 8811 	msr	BASEPRI, r3
 800b4c0:	f3bf 8f6f 	isb	sy
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	61fa      	str	r2, [r7, #28]
 800b4ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b4cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b4ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d302      	bcc.n	800b4e2 <xQueueGenericSendFromISR+0xc2>
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	d12f      	bne.n	800b542 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b4e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	68b9      	ldr	r1, [r7, #8]
 800b4f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b4f8:	f000 f912 	bl	800b720 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b4fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b500:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b504:	d112      	bne.n	800b52c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d016      	beq.n	800b53c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b510:	3324      	adds	r3, #36	@ 0x24
 800b512:	4618      	mov	r0, r3
 800b514:	f000 fffe 	bl	800c514 <xTaskRemoveFromEventList>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00e      	beq.n	800b53c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00b      	beq.n	800b53c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2201      	movs	r2, #1
 800b528:	601a      	str	r2, [r3, #0]
 800b52a:	e007      	b.n	800b53c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b52c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b530:	3301      	adds	r3, #1
 800b532:	b2db      	uxtb	r3, r3
 800b534:	b25a      	sxtb	r2, r3
 800b536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b53c:	2301      	movs	r3, #1
 800b53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b540:	e001      	b.n	800b546 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b542:	2300      	movs	r3, #0
 800b544:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b548:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b550:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b554:	4618      	mov	r0, r3
 800b556:	3740      	adds	r7, #64	@ 0x40
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b08c      	sub	sp, #48	@ 0x30
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b568:	2300      	movs	r3, #0
 800b56a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b572:	2b00      	cmp	r3, #0
 800b574:	d10b      	bne.n	800b58e <xQueueReceive+0x32>
	__asm volatile
 800b576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b57a:	f383 8811 	msr	BASEPRI, r3
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	623b      	str	r3, [r7, #32]
}
 800b588:	bf00      	nop
 800b58a:	bf00      	nop
 800b58c:	e7fd      	b.n	800b58a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d103      	bne.n	800b59c <xQueueReceive+0x40>
 800b594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d101      	bne.n	800b5a0 <xQueueReceive+0x44>
 800b59c:	2301      	movs	r3, #1
 800b59e:	e000      	b.n	800b5a2 <xQueueReceive+0x46>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d10b      	bne.n	800b5be <xQueueReceive+0x62>
	__asm volatile
 800b5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5aa:	f383 8811 	msr	BASEPRI, r3
 800b5ae:	f3bf 8f6f 	isb	sy
 800b5b2:	f3bf 8f4f 	dsb	sy
 800b5b6:	61fb      	str	r3, [r7, #28]
}
 800b5b8:	bf00      	nop
 800b5ba:	bf00      	nop
 800b5bc:	e7fd      	b.n	800b5ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b5be:	f001 f96f 	bl	800c8a0 <xTaskGetSchedulerState>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d102      	bne.n	800b5ce <xQueueReceive+0x72>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d101      	bne.n	800b5d2 <xQueueReceive+0x76>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e000      	b.n	800b5d4 <xQueueReceive+0x78>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d10b      	bne.n	800b5f0 <xQueueReceive+0x94>
	__asm volatile
 800b5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5dc:	f383 8811 	msr	BASEPRI, r3
 800b5e0:	f3bf 8f6f 	isb	sy
 800b5e4:	f3bf 8f4f 	dsb	sy
 800b5e8:	61bb      	str	r3, [r7, #24]
}
 800b5ea:	bf00      	nop
 800b5ec:	bf00      	nop
 800b5ee:	e7fd      	b.n	800b5ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b5f0:	f001 ffa2 	bl	800d538 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d01f      	beq.n	800b640 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b600:	68b9      	ldr	r1, [r7, #8]
 800b602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b604:	f000 f8f6 	bl	800b7f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60a:	1e5a      	subs	r2, r3, #1
 800b60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b60e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d00f      	beq.n	800b638 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b61a:	3310      	adds	r3, #16
 800b61c:	4618      	mov	r0, r3
 800b61e:	f000 ff79 	bl	800c514 <xTaskRemoveFromEventList>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d007      	beq.n	800b638 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b628:	4b3c      	ldr	r3, [pc, #240]	@ (800b71c <xQueueReceive+0x1c0>)
 800b62a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b62e:	601a      	str	r2, [r3, #0]
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b638:	f001 ffb0 	bl	800d59c <vPortExitCritical>
				return pdPASS;
 800b63c:	2301      	movs	r3, #1
 800b63e:	e069      	b.n	800b714 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d103      	bne.n	800b64e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b646:	f001 ffa9 	bl	800d59c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b64a:	2300      	movs	r3, #0
 800b64c:	e062      	b.n	800b714 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b650:	2b00      	cmp	r3, #0
 800b652:	d106      	bne.n	800b662 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b654:	f107 0310 	add.w	r3, r7, #16
 800b658:	4618      	mov	r0, r3
 800b65a:	f000 ffbf 	bl	800c5dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b65e:	2301      	movs	r3, #1
 800b660:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b662:	f001 ff9b 	bl	800d59c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b666:	f000 fc2d 	bl	800bec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b66a:	f001 ff65 	bl	800d538 <vPortEnterCritical>
 800b66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b670:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b674:	b25b      	sxtb	r3, r3
 800b676:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b67a:	d103      	bne.n	800b684 <xQueueReceive+0x128>
 800b67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b67e:	2200      	movs	r2, #0
 800b680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b686:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b68a:	b25b      	sxtb	r3, r3
 800b68c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b690:	d103      	bne.n	800b69a <xQueueReceive+0x13e>
 800b692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b694:	2200      	movs	r2, #0
 800b696:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b69a:	f001 ff7f 	bl	800d59c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b69e:	1d3a      	adds	r2, r7, #4
 800b6a0:	f107 0310 	add.w	r3, r7, #16
 800b6a4:	4611      	mov	r1, r2
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f000 ffae 	bl	800c608 <xTaskCheckForTimeOut>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d123      	bne.n	800b6fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b6b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6b4:	f000 f916 	bl	800b8e4 <prvIsQueueEmpty>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d017      	beq.n	800b6ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6c0:	3324      	adds	r3, #36	@ 0x24
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	4611      	mov	r1, r2
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f000 fed2 	bl	800c470 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b6cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6ce:	f000 f8b7 	bl	800b840 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b6d2:	f000 fc05 	bl	800bee0 <xTaskResumeAll>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d189      	bne.n	800b5f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b6dc:	4b0f      	ldr	r3, [pc, #60]	@ (800b71c <xQueueReceive+0x1c0>)
 800b6de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6e2:	601a      	str	r2, [r3, #0]
 800b6e4:	f3bf 8f4f 	dsb	sy
 800b6e8:	f3bf 8f6f 	isb	sy
 800b6ec:	e780      	b.n	800b5f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b6ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6f0:	f000 f8a6 	bl	800b840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b6f4:	f000 fbf4 	bl	800bee0 <xTaskResumeAll>
 800b6f8:	e77a      	b.n	800b5f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b6fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6fc:	f000 f8a0 	bl	800b840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b700:	f000 fbee 	bl	800bee0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b704:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b706:	f000 f8ed 	bl	800b8e4 <prvIsQueueEmpty>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f43f af6f 	beq.w	800b5f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b712:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b714:	4618      	mov	r0, r3
 800b716:	3730      	adds	r7, #48	@ 0x30
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	e000ed04 	.word	0xe000ed04

0800b720 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b72c:	2300      	movs	r3, #0
 800b72e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b734:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d10d      	bne.n	800b75a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d14d      	bne.n	800b7e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	4618      	mov	r0, r3
 800b74c:	f001 f8c6 	bl	800c8dc <xTaskPriorityDisinherit>
 800b750:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2200      	movs	r2, #0
 800b756:	609a      	str	r2, [r3, #8]
 800b758:	e043      	b.n	800b7e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d119      	bne.n	800b794 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6858      	ldr	r0, [r3, #4]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b768:	461a      	mov	r2, r3
 800b76a:	68b9      	ldr	r1, [r7, #8]
 800b76c:	f002 fa9e 	bl	800dcac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	685a      	ldr	r2, [r3, #4]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b778:	441a      	add	r2, r3
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	685a      	ldr	r2, [r3, #4]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	429a      	cmp	r2, r3
 800b788:	d32b      	bcc.n	800b7e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	605a      	str	r2, [r3, #4]
 800b792:	e026      	b.n	800b7e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	68d8      	ldr	r0, [r3, #12]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b79c:	461a      	mov	r2, r3
 800b79e:	68b9      	ldr	r1, [r7, #8]
 800b7a0:	f002 fa84 	bl	800dcac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	68da      	ldr	r2, [r3, #12]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7ac:	425b      	negs	r3, r3
 800b7ae:	441a      	add	r2, r3
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	68da      	ldr	r2, [r3, #12]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d207      	bcs.n	800b7d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	689a      	ldr	r2, [r3, #8]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7c8:	425b      	negs	r3, r3
 800b7ca:	441a      	add	r2, r3
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	d105      	bne.n	800b7e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d002      	beq.n	800b7e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	1c5a      	adds	r2, r3, #1
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b7ea:	697b      	ldr	r3, [r7, #20]
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3718      	adds	r7, #24
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b802:	2b00      	cmp	r3, #0
 800b804:	d018      	beq.n	800b838 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	68da      	ldr	r2, [r3, #12]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b80e:	441a      	add	r2, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	68da      	ldr	r2, [r3, #12]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d303      	bcc.n	800b828 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	68d9      	ldr	r1, [r3, #12]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b830:	461a      	mov	r2, r3
 800b832:	6838      	ldr	r0, [r7, #0]
 800b834:	f002 fa3a 	bl	800dcac <memcpy>
	}
}
 800b838:	bf00      	nop
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b848:	f001 fe76 	bl	800d538 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b852:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b854:	e011      	b.n	800b87a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d012      	beq.n	800b884 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	3324      	adds	r3, #36	@ 0x24
 800b862:	4618      	mov	r0, r3
 800b864:	f000 fe56 	bl	800c514 <xTaskRemoveFromEventList>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d001      	beq.n	800b872 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b86e:	f000 ff2f 	bl	800c6d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b872:	7bfb      	ldrb	r3, [r7, #15]
 800b874:	3b01      	subs	r3, #1
 800b876:	b2db      	uxtb	r3, r3
 800b878:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b87a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	dce9      	bgt.n	800b856 <prvUnlockQueue+0x16>
 800b882:	e000      	b.n	800b886 <prvUnlockQueue+0x46>
					break;
 800b884:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	22ff      	movs	r2, #255	@ 0xff
 800b88a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b88e:	f001 fe85 	bl	800d59c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b892:	f001 fe51 	bl	800d538 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b89c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b89e:	e011      	b.n	800b8c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	691b      	ldr	r3, [r3, #16]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d012      	beq.n	800b8ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	3310      	adds	r3, #16
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f000 fe31 	bl	800c514 <xTaskRemoveFromEventList>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d001      	beq.n	800b8bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b8b8:	f000 ff0a 	bl	800c6d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b8bc:	7bbb      	ldrb	r3, [r7, #14]
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b8c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	dce9      	bgt.n	800b8a0 <prvUnlockQueue+0x60>
 800b8cc:	e000      	b.n	800b8d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b8ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	22ff      	movs	r2, #255	@ 0xff
 800b8d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b8d8:	f001 fe60 	bl	800d59c <vPortExitCritical>
}
 800b8dc:	bf00      	nop
 800b8de:	3710      	adds	r7, #16
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b8ec:	f001 fe24 	bl	800d538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d102      	bne.n	800b8fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	60fb      	str	r3, [r7, #12]
 800b8fc:	e001      	b.n	800b902 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b8fe:	2300      	movs	r3, #0
 800b900:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b902:	f001 fe4b 	bl	800d59c <vPortExitCritical>

	return xReturn;
 800b906:	68fb      	ldr	r3, [r7, #12]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3710      	adds	r7, #16
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b918:	f001 fe0e 	bl	800d538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b924:	429a      	cmp	r2, r3
 800b926:	d102      	bne.n	800b92e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b928:	2301      	movs	r3, #1
 800b92a:	60fb      	str	r3, [r7, #12]
 800b92c:	e001      	b.n	800b932 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b92e:	2300      	movs	r3, #0
 800b930:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b932:	f001 fe33 	bl	800d59c <vPortExitCritical>

	return xReturn;
 800b936:	68fb      	ldr	r3, [r7, #12]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b94a:	2300      	movs	r3, #0
 800b94c:	60fb      	str	r3, [r7, #12]
 800b94e:	e014      	b.n	800b97a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b950:	4a0f      	ldr	r2, [pc, #60]	@ (800b990 <vQueueAddToRegistry+0x50>)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10b      	bne.n	800b974 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b95c:	490c      	ldr	r1, [pc, #48]	@ (800b990 <vQueueAddToRegistry+0x50>)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	683a      	ldr	r2, [r7, #0]
 800b962:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b966:	4a0a      	ldr	r2, [pc, #40]	@ (800b990 <vQueueAddToRegistry+0x50>)
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	00db      	lsls	r3, r3, #3
 800b96c:	4413      	add	r3, r2
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b972:	e006      	b.n	800b982 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	3301      	adds	r3, #1
 800b978:	60fb      	str	r3, [r7, #12]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2b07      	cmp	r3, #7
 800b97e:	d9e7      	bls.n	800b950 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b980:	bf00      	nop
 800b982:	bf00      	nop
 800b984:	3714      	adds	r7, #20
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr
 800b98e:	bf00      	nop
 800b990:	200015f0 	.word	0x200015f0

0800b994 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b994:	b580      	push	{r7, lr}
 800b996:	b086      	sub	sp, #24
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b9a4:	f001 fdc8 	bl	800d538 <vPortEnterCritical>
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b9ae:	b25b      	sxtb	r3, r3
 800b9b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b9b4:	d103      	bne.n	800b9be <vQueueWaitForMessageRestricted+0x2a>
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b9c4:	b25b      	sxtb	r3, r3
 800b9c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b9ca:	d103      	bne.n	800b9d4 <vQueueWaitForMessageRestricted+0x40>
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b9d4:	f001 fde2 	bl	800d59c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d106      	bne.n	800b9ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	3324      	adds	r3, #36	@ 0x24
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	68b9      	ldr	r1, [r7, #8]
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f000 fd67 	bl	800c4bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b9ee:	6978      	ldr	r0, [r7, #20]
 800b9f0:	f7ff ff26 	bl	800b840 <prvUnlockQueue>
	}
 800b9f4:	bf00      	nop
 800b9f6:	3718      	adds	r7, #24
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b08e      	sub	sp, #56	@ 0x38
 800ba00:	af04      	add	r7, sp, #16
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
 800ba08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ba0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d10b      	bne.n	800ba28 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ba10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	623b      	str	r3, [r7, #32]
}
 800ba22:	bf00      	nop
 800ba24:	bf00      	nop
 800ba26:	e7fd      	b.n	800ba24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ba28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10b      	bne.n	800ba46 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	61fb      	str	r3, [r7, #28]
}
 800ba40:	bf00      	nop
 800ba42:	bf00      	nop
 800ba44:	e7fd      	b.n	800ba42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ba46:	23a8      	movs	r3, #168	@ 0xa8
 800ba48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	2ba8      	cmp	r3, #168	@ 0xa8
 800ba4e:	d00b      	beq.n	800ba68 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ba50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba54:	f383 8811 	msr	BASEPRI, r3
 800ba58:	f3bf 8f6f 	isb	sy
 800ba5c:	f3bf 8f4f 	dsb	sy
 800ba60:	61bb      	str	r3, [r7, #24]
}
 800ba62:	bf00      	nop
 800ba64:	bf00      	nop
 800ba66:	e7fd      	b.n	800ba64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ba68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ba6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d01e      	beq.n	800baae <xTaskCreateStatic+0xb2>
 800ba70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d01b      	beq.n	800baae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ba7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ba80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba82:	2202      	movs	r2, #2
 800ba84:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ba88:	2300      	movs	r3, #0
 800ba8a:	9303      	str	r3, [sp, #12]
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8e:	9302      	str	r3, [sp, #8]
 800ba90:	f107 0314 	add.w	r3, r7, #20
 800ba94:	9301      	str	r3, [sp, #4]
 800ba96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	68b9      	ldr	r1, [r7, #8]
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f000 f851 	bl	800bb48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800baa6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800baa8:	f000 f8f6 	bl	800bc98 <prvAddNewTaskToReadyList>
 800baac:	e001      	b.n	800bab2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800baae:	2300      	movs	r3, #0
 800bab0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bab2:	697b      	ldr	r3, [r7, #20]
	}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3728      	adds	r7, #40	@ 0x28
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800babc:	b580      	push	{r7, lr}
 800babe:	b08c      	sub	sp, #48	@ 0x30
 800bac0:	af04      	add	r7, sp, #16
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	603b      	str	r3, [r7, #0]
 800bac8:	4613      	mov	r3, r2
 800baca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bacc:	88fb      	ldrh	r3, [r7, #6]
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	4618      	mov	r0, r3
 800bad2:	f001 fe53 	bl	800d77c <pvPortMalloc>
 800bad6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00e      	beq.n	800bafc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bade:	20a8      	movs	r0, #168	@ 0xa8
 800bae0:	f001 fe4c 	bl	800d77c <pvPortMalloc>
 800bae4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bae6:	69fb      	ldr	r3, [r7, #28]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d003      	beq.n	800baf4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	697a      	ldr	r2, [r7, #20]
 800baf0:	631a      	str	r2, [r3, #48]	@ 0x30
 800baf2:	e005      	b.n	800bb00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800baf4:	6978      	ldr	r0, [r7, #20]
 800baf6:	f001 ff0f 	bl	800d918 <vPortFree>
 800bafa:	e001      	b.n	800bb00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bafc:	2300      	movs	r3, #0
 800bafe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d017      	beq.n	800bb36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bb06:	69fb      	ldr	r3, [r7, #28]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bb0e:	88fa      	ldrh	r2, [r7, #6]
 800bb10:	2300      	movs	r3, #0
 800bb12:	9303      	str	r3, [sp, #12]
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	9302      	str	r3, [sp, #8]
 800bb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb1a:	9301      	str	r3, [sp, #4]
 800bb1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb1e:	9300      	str	r3, [sp, #0]
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	68b9      	ldr	r1, [r7, #8]
 800bb24:	68f8      	ldr	r0, [r7, #12]
 800bb26:	f000 f80f 	bl	800bb48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bb2a:	69f8      	ldr	r0, [r7, #28]
 800bb2c:	f000 f8b4 	bl	800bc98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bb30:	2301      	movs	r3, #1
 800bb32:	61bb      	str	r3, [r7, #24]
 800bb34:	e002      	b.n	800bb3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bb36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bb3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bb3c:	69bb      	ldr	r3, [r7, #24]
	}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3720      	adds	r7, #32
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
	...

0800bb48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b088      	sub	sp, #32
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	607a      	str	r2, [r7, #4]
 800bb54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb58:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	461a      	mov	r2, r3
 800bb60:	21a5      	movs	r1, #165	@ 0xa5
 800bb62:	f002 f819 	bl	800db98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bb66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb70:	3b01      	subs	r3, #1
 800bb72:	009b      	lsls	r3, r3, #2
 800bb74:	4413      	add	r3, r2
 800bb76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	f023 0307 	bic.w	r3, r3, #7
 800bb7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	f003 0307 	and.w	r3, r3, #7
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00b      	beq.n	800bba2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800bb8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb8e:	f383 8811 	msr	BASEPRI, r3
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	f3bf 8f4f 	dsb	sy
 800bb9a:	617b      	str	r3, [r7, #20]
}
 800bb9c:	bf00      	nop
 800bb9e:	bf00      	nop
 800bba0:	e7fd      	b.n	800bb9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d01f      	beq.n	800bbe8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bba8:	2300      	movs	r3, #0
 800bbaa:	61fb      	str	r3, [r7, #28]
 800bbac:	e012      	b.n	800bbd4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	7819      	ldrb	r1, [r3, #0]
 800bbb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	4413      	add	r3, r2
 800bbbc:	3334      	adds	r3, #52	@ 0x34
 800bbbe:	460a      	mov	r2, r1
 800bbc0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bbc2:	68ba      	ldr	r2, [r7, #8]
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	4413      	add	r3, r2
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d006      	beq.n	800bbdc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	61fb      	str	r3, [r7, #28]
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	2b0f      	cmp	r3, #15
 800bbd8:	d9e9      	bls.n	800bbae <prvInitialiseNewTask+0x66>
 800bbda:	e000      	b.n	800bbde <prvInitialiseNewTask+0x96>
			{
				break;
 800bbdc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bbe6:	e003      	b.n	800bbf0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bbe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbea:	2200      	movs	r2, #0
 800bbec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bbf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbf2:	2b37      	cmp	r3, #55	@ 0x37
 800bbf4:	d901      	bls.n	800bbfa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bbf6:	2337      	movs	r3, #55	@ 0x37
 800bbf8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbfe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bc00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc04:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc08:	2200      	movs	r2, #0
 800bc0a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bc0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc0e:	3304      	adds	r3, #4
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7ff f965 	bl	800aee0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc18:	3318      	adds	r3, #24
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7ff f960 	bl	800aee0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bc20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bc2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bc30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc34:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bc3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc40:	2200      	movs	r2, #0
 800bc42:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc48:	3354      	adds	r3, #84	@ 0x54
 800bc4a:	224c      	movs	r2, #76	@ 0x4c
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f001 ffa2 	bl	800db98 <memset>
 800bc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc56:	4a0d      	ldr	r2, [pc, #52]	@ (800bc8c <prvInitialiseNewTask+0x144>)
 800bc58:	659a      	str	r2, [r3, #88]	@ 0x58
 800bc5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc5c:	4a0c      	ldr	r2, [pc, #48]	@ (800bc90 <prvInitialiseNewTask+0x148>)
 800bc5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bc60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc62:	4a0c      	ldr	r2, [pc, #48]	@ (800bc94 <prvInitialiseNewTask+0x14c>)
 800bc64:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	68f9      	ldr	r1, [r7, #12]
 800bc6a:	69b8      	ldr	r0, [r7, #24]
 800bc6c:	f001 fb36 	bl	800d2dc <pxPortInitialiseStack>
 800bc70:	4602      	mov	r2, r0
 800bc72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bc76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d002      	beq.n	800bc82 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bc7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc82:	bf00      	nop
 800bc84:	3720      	adds	r7, #32
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	20005884 	.word	0x20005884
 800bc90:	200058ec 	.word	0x200058ec
 800bc94:	20005954 	.word	0x20005954

0800bc98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bca0:	f001 fc4a 	bl	800d538 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bca4:	4b2d      	ldr	r3, [pc, #180]	@ (800bd5c <prvAddNewTaskToReadyList+0xc4>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	4a2c      	ldr	r2, [pc, #176]	@ (800bd5c <prvAddNewTaskToReadyList+0xc4>)
 800bcac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bcae:	4b2c      	ldr	r3, [pc, #176]	@ (800bd60 <prvAddNewTaskToReadyList+0xc8>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d109      	bne.n	800bcca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bcb6:	4a2a      	ldr	r2, [pc, #168]	@ (800bd60 <prvAddNewTaskToReadyList+0xc8>)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bcbc:	4b27      	ldr	r3, [pc, #156]	@ (800bd5c <prvAddNewTaskToReadyList+0xc4>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d110      	bne.n	800bce6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bcc4:	f000 fd28 	bl	800c718 <prvInitialiseTaskLists>
 800bcc8:	e00d      	b.n	800bce6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bcca:	4b26      	ldr	r3, [pc, #152]	@ (800bd64 <prvAddNewTaskToReadyList+0xcc>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d109      	bne.n	800bce6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bcd2:	4b23      	ldr	r3, [pc, #140]	@ (800bd60 <prvAddNewTaskToReadyList+0xc8>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d802      	bhi.n	800bce6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bce0:	4a1f      	ldr	r2, [pc, #124]	@ (800bd60 <prvAddNewTaskToReadyList+0xc8>)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bce6:	4b20      	ldr	r3, [pc, #128]	@ (800bd68 <prvAddNewTaskToReadyList+0xd0>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	3301      	adds	r3, #1
 800bcec:	4a1e      	ldr	r2, [pc, #120]	@ (800bd68 <prvAddNewTaskToReadyList+0xd0>)
 800bcee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bcf0:	4b1d      	ldr	r3, [pc, #116]	@ (800bd68 <prvAddNewTaskToReadyList+0xd0>)
 800bcf2:	681a      	ldr	r2, [r3, #0]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcfc:	4b1b      	ldr	r3, [pc, #108]	@ (800bd6c <prvAddNewTaskToReadyList+0xd4>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d903      	bls.n	800bd0c <prvAddNewTaskToReadyList+0x74>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd08:	4a18      	ldr	r2, [pc, #96]	@ (800bd6c <prvAddNewTaskToReadyList+0xd4>)
 800bd0a:	6013      	str	r3, [r2, #0]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd10:	4613      	mov	r3, r2
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	4413      	add	r3, r2
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	4a15      	ldr	r2, [pc, #84]	@ (800bd70 <prvAddNewTaskToReadyList+0xd8>)
 800bd1a:	441a      	add	r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	3304      	adds	r3, #4
 800bd20:	4619      	mov	r1, r3
 800bd22:	4610      	mov	r0, r2
 800bd24:	f7ff f8e9 	bl	800aefa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bd28:	f001 fc38 	bl	800d59c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bd2c:	4b0d      	ldr	r3, [pc, #52]	@ (800bd64 <prvAddNewTaskToReadyList+0xcc>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00e      	beq.n	800bd52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bd34:	4b0a      	ldr	r3, [pc, #40]	@ (800bd60 <prvAddNewTaskToReadyList+0xc8>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d207      	bcs.n	800bd52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bd42:	4b0c      	ldr	r3, [pc, #48]	@ (800bd74 <prvAddNewTaskToReadyList+0xdc>)
 800bd44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd48:	601a      	str	r2, [r3, #0]
 800bd4a:	f3bf 8f4f 	dsb	sy
 800bd4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd52:	bf00      	nop
 800bd54:	3708      	adds	r7, #8
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	20001b04 	.word	0x20001b04
 800bd60:	20001630 	.word	0x20001630
 800bd64:	20001b10 	.word	0x20001b10
 800bd68:	20001b20 	.word	0x20001b20
 800bd6c:	20001b0c 	.word	0x20001b0c
 800bd70:	20001634 	.word	0x20001634
 800bd74:	e000ed04 	.word	0xe000ed04

0800bd78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bd80:	2300      	movs	r3, #0
 800bd82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d018      	beq.n	800bdbc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bd8a:	4b14      	ldr	r3, [pc, #80]	@ (800bddc <vTaskDelay+0x64>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d00b      	beq.n	800bdaa <vTaskDelay+0x32>
	__asm volatile
 800bd92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd96:	f383 8811 	msr	BASEPRI, r3
 800bd9a:	f3bf 8f6f 	isb	sy
 800bd9e:	f3bf 8f4f 	dsb	sy
 800bda2:	60bb      	str	r3, [r7, #8]
}
 800bda4:	bf00      	nop
 800bda6:	bf00      	nop
 800bda8:	e7fd      	b.n	800bda6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bdaa:	f000 f88b 	bl	800bec4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bdae:	2100      	movs	r1, #0
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 fee5 	bl	800cb80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bdb6:	f000 f893 	bl	800bee0 <xTaskResumeAll>
 800bdba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d107      	bne.n	800bdd2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bdc2:	4b07      	ldr	r3, [pc, #28]	@ (800bde0 <vTaskDelay+0x68>)
 800bdc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdc8:	601a      	str	r2, [r3, #0]
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bdd2:	bf00      	nop
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	20001b2c 	.word	0x20001b2c
 800bde0:	e000ed04 	.word	0xe000ed04

0800bde4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b08a      	sub	sp, #40	@ 0x28
 800bde8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bdea:	2300      	movs	r3, #0
 800bdec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bdf2:	463a      	mov	r2, r7
 800bdf4:	1d39      	adds	r1, r7, #4
 800bdf6:	f107 0308 	add.w	r3, r7, #8
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7ff f81c 	bl	800ae38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800be00:	6839      	ldr	r1, [r7, #0]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	68ba      	ldr	r2, [r7, #8]
 800be06:	9202      	str	r2, [sp, #8]
 800be08:	9301      	str	r3, [sp, #4]
 800be0a:	2300      	movs	r3, #0
 800be0c:	9300      	str	r3, [sp, #0]
 800be0e:	2300      	movs	r3, #0
 800be10:	460a      	mov	r2, r1
 800be12:	4924      	ldr	r1, [pc, #144]	@ (800bea4 <vTaskStartScheduler+0xc0>)
 800be14:	4824      	ldr	r0, [pc, #144]	@ (800bea8 <vTaskStartScheduler+0xc4>)
 800be16:	f7ff fdf1 	bl	800b9fc <xTaskCreateStatic>
 800be1a:	4603      	mov	r3, r0
 800be1c:	4a23      	ldr	r2, [pc, #140]	@ (800beac <vTaskStartScheduler+0xc8>)
 800be1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800be20:	4b22      	ldr	r3, [pc, #136]	@ (800beac <vTaskStartScheduler+0xc8>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d002      	beq.n	800be2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800be28:	2301      	movs	r3, #1
 800be2a:	617b      	str	r3, [r7, #20]
 800be2c:	e001      	b.n	800be32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800be2e:	2300      	movs	r3, #0
 800be30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	2b01      	cmp	r3, #1
 800be36:	d102      	bne.n	800be3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800be38:	f000 fef6 	bl	800cc28 <xTimerCreateTimerTask>
 800be3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d11b      	bne.n	800be7c <vTaskStartScheduler+0x98>
	__asm volatile
 800be44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be48:	f383 8811 	msr	BASEPRI, r3
 800be4c:	f3bf 8f6f 	isb	sy
 800be50:	f3bf 8f4f 	dsb	sy
 800be54:	613b      	str	r3, [r7, #16]
}
 800be56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800be58:	4b15      	ldr	r3, [pc, #84]	@ (800beb0 <vTaskStartScheduler+0xcc>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	3354      	adds	r3, #84	@ 0x54
 800be5e:	4a15      	ldr	r2, [pc, #84]	@ (800beb4 <vTaskStartScheduler+0xd0>)
 800be60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800be62:	4b15      	ldr	r3, [pc, #84]	@ (800beb8 <vTaskStartScheduler+0xd4>)
 800be64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800be6a:	4b14      	ldr	r3, [pc, #80]	@ (800bebc <vTaskStartScheduler+0xd8>)
 800be6c:	2201      	movs	r2, #1
 800be6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800be70:	4b13      	ldr	r3, [pc, #76]	@ (800bec0 <vTaskStartScheduler+0xdc>)
 800be72:	2200      	movs	r2, #0
 800be74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800be76:	f001 fabb 	bl	800d3f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800be7a:	e00f      	b.n	800be9c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be82:	d10b      	bne.n	800be9c <vTaskStartScheduler+0xb8>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	60fb      	str	r3, [r7, #12]
}
 800be96:	bf00      	nop
 800be98:	bf00      	nop
 800be9a:	e7fd      	b.n	800be98 <vTaskStartScheduler+0xb4>
}
 800be9c:	bf00      	nop
 800be9e:	3718      	adds	r7, #24
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	0800e5e0 	.word	0x0800e5e0
 800bea8:	0800c6e9 	.word	0x0800c6e9
 800beac:	20001b28 	.word	0x20001b28
 800beb0:	20001630 	.word	0x20001630
 800beb4:	20000070 	.word	0x20000070
 800beb8:	20001b24 	.word	0x20001b24
 800bebc:	20001b10 	.word	0x20001b10
 800bec0:	20001b08 	.word	0x20001b08

0800bec4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bec4:	b480      	push	{r7}
 800bec6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bec8:	4b04      	ldr	r3, [pc, #16]	@ (800bedc <vTaskSuspendAll+0x18>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	3301      	adds	r3, #1
 800bece:	4a03      	ldr	r2, [pc, #12]	@ (800bedc <vTaskSuspendAll+0x18>)
 800bed0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bed2:	bf00      	nop
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr
 800bedc:	20001b2c 	.word	0x20001b2c

0800bee0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bee6:	2300      	movs	r3, #0
 800bee8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800beea:	2300      	movs	r3, #0
 800beec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800beee:	4b42      	ldr	r3, [pc, #264]	@ (800bff8 <xTaskResumeAll+0x118>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d10b      	bne.n	800bf0e <xTaskResumeAll+0x2e>
	__asm volatile
 800bef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800befa:	f383 8811 	msr	BASEPRI, r3
 800befe:	f3bf 8f6f 	isb	sy
 800bf02:	f3bf 8f4f 	dsb	sy
 800bf06:	603b      	str	r3, [r7, #0]
}
 800bf08:	bf00      	nop
 800bf0a:	bf00      	nop
 800bf0c:	e7fd      	b.n	800bf0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bf0e:	f001 fb13 	bl	800d538 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bf12:	4b39      	ldr	r3, [pc, #228]	@ (800bff8 <xTaskResumeAll+0x118>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	3b01      	subs	r3, #1
 800bf18:	4a37      	ldr	r2, [pc, #220]	@ (800bff8 <xTaskResumeAll+0x118>)
 800bf1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf1c:	4b36      	ldr	r3, [pc, #216]	@ (800bff8 <xTaskResumeAll+0x118>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d162      	bne.n	800bfea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bf24:	4b35      	ldr	r3, [pc, #212]	@ (800bffc <xTaskResumeAll+0x11c>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d05e      	beq.n	800bfea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf2c:	e02f      	b.n	800bf8e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf2e:	4b34      	ldr	r3, [pc, #208]	@ (800c000 <xTaskResumeAll+0x120>)
 800bf30:	68db      	ldr	r3, [r3, #12]
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	3318      	adds	r3, #24
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7ff f83a 	bl	800afb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	3304      	adds	r3, #4
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7ff f835 	bl	800afb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf4e:	4b2d      	ldr	r3, [pc, #180]	@ (800c004 <xTaskResumeAll+0x124>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d903      	bls.n	800bf5e <xTaskResumeAll+0x7e>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf5a:	4a2a      	ldr	r2, [pc, #168]	@ (800c004 <xTaskResumeAll+0x124>)
 800bf5c:	6013      	str	r3, [r2, #0]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf62:	4613      	mov	r3, r2
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	4413      	add	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4a27      	ldr	r2, [pc, #156]	@ (800c008 <xTaskResumeAll+0x128>)
 800bf6c:	441a      	add	r2, r3
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	3304      	adds	r3, #4
 800bf72:	4619      	mov	r1, r3
 800bf74:	4610      	mov	r0, r2
 800bf76:	f7fe ffc0 	bl	800aefa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf7e:	4b23      	ldr	r3, [pc, #140]	@ (800c00c <xTaskResumeAll+0x12c>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d302      	bcc.n	800bf8e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800bf88:	4b21      	ldr	r3, [pc, #132]	@ (800c010 <xTaskResumeAll+0x130>)
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf8e:	4b1c      	ldr	r3, [pc, #112]	@ (800c000 <xTaskResumeAll+0x120>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d1cb      	bne.n	800bf2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d001      	beq.n	800bfa0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bf9c:	f000 fc60 	bl	800c860 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bfa0:	4b1c      	ldr	r3, [pc, #112]	@ (800c014 <xTaskResumeAll+0x134>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d010      	beq.n	800bfce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bfac:	f000 f940 	bl	800c230 <xTaskIncrementTick>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d002      	beq.n	800bfbc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800bfb6:	4b16      	ldr	r3, [pc, #88]	@ (800c010 <xTaskResumeAll+0x130>)
 800bfb8:	2201      	movs	r2, #1
 800bfba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	3b01      	subs	r3, #1
 800bfc0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d1f1      	bne.n	800bfac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800bfc8:	4b12      	ldr	r3, [pc, #72]	@ (800c014 <xTaskResumeAll+0x134>)
 800bfca:	2200      	movs	r2, #0
 800bfcc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bfce:	4b10      	ldr	r3, [pc, #64]	@ (800c010 <xTaskResumeAll+0x130>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d009      	beq.n	800bfea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bfda:	4b0f      	ldr	r3, [pc, #60]	@ (800c018 <xTaskResumeAll+0x138>)
 800bfdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfe0:	601a      	str	r2, [r3, #0]
 800bfe2:	f3bf 8f4f 	dsb	sy
 800bfe6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bfea:	f001 fad7 	bl	800d59c <vPortExitCritical>

	return xAlreadyYielded;
 800bfee:	68bb      	ldr	r3, [r7, #8]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3710      	adds	r7, #16
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	20001b2c 	.word	0x20001b2c
 800bffc:	20001b04 	.word	0x20001b04
 800c000:	20001ac4 	.word	0x20001ac4
 800c004:	20001b0c 	.word	0x20001b0c
 800c008:	20001634 	.word	0x20001634
 800c00c:	20001630 	.word	0x20001630
 800c010:	20001b18 	.word	0x20001b18
 800c014:	20001b14 	.word	0x20001b14
 800c018:	e000ed04 	.word	0xe000ed04

0800c01c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c022:	4b05      	ldr	r3, [pc, #20]	@ (800c038 <xTaskGetTickCount+0x1c>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c028:	687b      	ldr	r3, [r7, #4]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	370c      	adds	r7, #12
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	20001b08 	.word	0x20001b08

0800c03c <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800c03c:	b480      	push	{r7}
 800c03e:	b085      	sub	sp, #20
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d102      	bne.n	800c050 <pcTaskGetName+0x14>
 800c04a:	4b0e      	ldr	r3, [pc, #56]	@ (800c084 <pcTaskGetName+0x48>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	e000      	b.n	800c052 <pcTaskGetName+0x16>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10b      	bne.n	800c072 <pcTaskGetName+0x36>
	__asm volatile
 800c05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	60bb      	str	r3, [r7, #8]
}
 800c06c:	bf00      	nop
 800c06e:	bf00      	nop
 800c070:	e7fd      	b.n	800c06e <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	3334      	adds	r3, #52	@ 0x34
}
 800c076:	4618      	mov	r0, r3
 800c078:	3714      	adds	r7, #20
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr
 800c082:	bf00      	nop
 800c084:	20001630 	.word	0x20001630

0800c088 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800c088:	b480      	push	{r7}
 800c08a:	b08b      	sub	sp, #44	@ 0x2c
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800c092:	2300      	movs	r3, #0
 800c094:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d05b      	beq.n	800c156 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	61bb      	str	r3, [r7, #24]
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	685a      	ldr	r2, [r3, #4]
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	605a      	str	r2, [r3, #4]
 800c0ac:	69bb      	ldr	r3, [r7, #24]
 800c0ae:	685a      	ldr	r2, [r3, #4]
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	3308      	adds	r3, #8
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d104      	bne.n	800c0c2 <prvSearchForNameWithinSingleList+0x3a>
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	685a      	ldr	r2, [r3, #4]
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	605a      	str	r2, [r3, #4]
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	613b      	str	r3, [r7, #16]
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	685a      	ldr	r2, [r3, #4]
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	605a      	str	r2, [r3, #4]
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	685a      	ldr	r2, [r3, #4]
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	3308      	adds	r3, #8
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d104      	bne.n	800c0ee <prvSearchForNameWithinSingleList+0x66>
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	685a      	ldr	r2, [r3, #4]
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	605a      	str	r2, [r3, #4]
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	623b      	str	r3, [r7, #32]
 800c0fe:	e01c      	b.n	800c13a <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800c100:	68fa      	ldr	r2, [r7, #12]
 800c102:	6a3b      	ldr	r3, [r7, #32]
 800c104:	4413      	add	r3, r2
 800c106:	3334      	adds	r3, #52	@ 0x34
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800c10c:	683a      	ldr	r2, [r7, #0]
 800c10e:	6a3b      	ldr	r3, [r7, #32]
 800c110:	4413      	add	r3, r2
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	7afa      	ldrb	r2, [r7, #11]
 800c116:	429a      	cmp	r2, r3
 800c118:	d002      	beq.n	800c120 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800c11a:	2301      	movs	r3, #1
 800c11c:	61fb      	str	r3, [r7, #28]
 800c11e:	e006      	b.n	800c12e <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800c120:	7afb      	ldrb	r3, [r7, #11]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d103      	bne.n	800c12e <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800c12a:	2301      	movs	r3, #1
 800c12c:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800c12e:	69fb      	ldr	r3, [r7, #28]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d106      	bne.n	800c142 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c134:	6a3b      	ldr	r3, [r7, #32]
 800c136:	3301      	adds	r3, #1
 800c138:	623b      	str	r3, [r7, #32]
 800c13a:	6a3b      	ldr	r3, [r7, #32]
 800c13c:	2b0f      	cmp	r3, #15
 800c13e:	d9df      	bls.n	800c100 <prvSearchForNameWithinSingleList+0x78>
 800c140:	e000      	b.n	800c144 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800c142:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800c144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c146:	2b00      	cmp	r3, #0
 800c148:	d104      	bne.n	800c154 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800c14a:	68fa      	ldr	r2, [r7, #12]
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d1bb      	bne.n	800c0ca <prvSearchForNameWithinSingleList+0x42>
 800c152:	e000      	b.n	800c156 <prvSearchForNameWithinSingleList+0xce>
					break;
 800c154:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800c156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800c158:	4618      	mov	r0, r3
 800c15a:	372c      	adds	r7, #44	@ 0x2c
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c164:	b580      	push	{r7, lr}
 800c166:	b086      	sub	sp, #24
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800c16c:	2338      	movs	r3, #56	@ 0x38
 800c16e:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f7f4 f82d 	bl	80001d0 <strlen>
 800c176:	4603      	mov	r3, r0
 800c178:	2b0f      	cmp	r3, #15
 800c17a:	d90b      	bls.n	800c194 <xTaskGetHandle+0x30>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	60fb      	str	r3, [r7, #12]
}
 800c18e:	bf00      	nop
 800c190:	bf00      	nop
 800c192:	e7fd      	b.n	800c190 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800c194:	f7ff fe96 	bl	800bec4 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	3b01      	subs	r3, #1
 800c19c:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800c19e:	697a      	ldr	r2, [r7, #20]
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4413      	add	r3, r2
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	4a1c      	ldr	r2, [pc, #112]	@ (800c21c <xTaskGetHandle+0xb8>)
 800c1aa:	4413      	add	r3, r2
 800c1ac:	6879      	ldr	r1, [r7, #4]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7ff ff6a 	bl	800c088 <prvSearchForNameWithinSingleList>
 800c1b4:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d103      	bne.n	800c1c4 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d1ea      	bne.n	800c198 <xTaskGetHandle+0x34>
 800c1c2:	e000      	b.n	800c1c6 <xTaskGetHandle+0x62>
					break;
 800c1c4:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d106      	bne.n	800c1da <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800c1cc:	4b14      	ldr	r3, [pc, #80]	@ (800c220 <xTaskGetHandle+0xbc>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	6879      	ldr	r1, [r7, #4]
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7ff ff58 	bl	800c088 <prvSearchForNameWithinSingleList>
 800c1d8:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d106      	bne.n	800c1ee <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800c1e0:	4b10      	ldr	r3, [pc, #64]	@ (800c224 <xTaskGetHandle+0xc0>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	6879      	ldr	r1, [r7, #4]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7ff ff4e 	bl	800c088 <prvSearchForNameWithinSingleList>
 800c1ec:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d104      	bne.n	800c1fe <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800c1f4:	6879      	ldr	r1, [r7, #4]
 800c1f6:	480c      	ldr	r0, [pc, #48]	@ (800c228 <xTaskGetHandle+0xc4>)
 800c1f8:	f7ff ff46 	bl	800c088 <prvSearchForNameWithinSingleList>
 800c1fc:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d104      	bne.n	800c20e <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800c204:	6879      	ldr	r1, [r7, #4]
 800c206:	4809      	ldr	r0, [pc, #36]	@ (800c22c <xTaskGetHandle+0xc8>)
 800c208:	f7ff ff3e 	bl	800c088 <prvSearchForNameWithinSingleList>
 800c20c:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800c20e:	f7ff fe67 	bl	800bee0 <xTaskResumeAll>

		return pxTCB;
 800c212:	693b      	ldr	r3, [r7, #16]
	}
 800c214:	4618      	mov	r0, r3
 800c216:	3718      	adds	r7, #24
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	20001634 	.word	0x20001634
 800c220:	20001abc 	.word	0x20001abc
 800c224:	20001ac0 	.word	0x20001ac0
 800c228:	20001af0 	.word	0x20001af0
 800c22c:	20001ad8 	.word	0x20001ad8

0800c230 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b086      	sub	sp, #24
 800c234:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c236:	2300      	movs	r3, #0
 800c238:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c23a:	4b4f      	ldr	r3, [pc, #316]	@ (800c378 <xTaskIncrementTick+0x148>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f040 8090 	bne.w	800c364 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c244:	4b4d      	ldr	r3, [pc, #308]	@ (800c37c <xTaskIncrementTick+0x14c>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	3301      	adds	r3, #1
 800c24a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c24c:	4a4b      	ldr	r2, [pc, #300]	@ (800c37c <xTaskIncrementTick+0x14c>)
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d121      	bne.n	800c29c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c258:	4b49      	ldr	r3, [pc, #292]	@ (800c380 <xTaskIncrementTick+0x150>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00b      	beq.n	800c27a <xTaskIncrementTick+0x4a>
	__asm volatile
 800c262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c266:	f383 8811 	msr	BASEPRI, r3
 800c26a:	f3bf 8f6f 	isb	sy
 800c26e:	f3bf 8f4f 	dsb	sy
 800c272:	603b      	str	r3, [r7, #0]
}
 800c274:	bf00      	nop
 800c276:	bf00      	nop
 800c278:	e7fd      	b.n	800c276 <xTaskIncrementTick+0x46>
 800c27a:	4b41      	ldr	r3, [pc, #260]	@ (800c380 <xTaskIncrementTick+0x150>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	60fb      	str	r3, [r7, #12]
 800c280:	4b40      	ldr	r3, [pc, #256]	@ (800c384 <xTaskIncrementTick+0x154>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a3e      	ldr	r2, [pc, #248]	@ (800c380 <xTaskIncrementTick+0x150>)
 800c286:	6013      	str	r3, [r2, #0]
 800c288:	4a3e      	ldr	r2, [pc, #248]	@ (800c384 <xTaskIncrementTick+0x154>)
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6013      	str	r3, [r2, #0]
 800c28e:	4b3e      	ldr	r3, [pc, #248]	@ (800c388 <xTaskIncrementTick+0x158>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	3301      	adds	r3, #1
 800c294:	4a3c      	ldr	r2, [pc, #240]	@ (800c388 <xTaskIncrementTick+0x158>)
 800c296:	6013      	str	r3, [r2, #0]
 800c298:	f000 fae2 	bl	800c860 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c29c:	4b3b      	ldr	r3, [pc, #236]	@ (800c38c <xTaskIncrementTick+0x15c>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	693a      	ldr	r2, [r7, #16]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d349      	bcc.n	800c33a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2a6:	4b36      	ldr	r3, [pc, #216]	@ (800c380 <xTaskIncrementTick+0x150>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d104      	bne.n	800c2ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2b0:	4b36      	ldr	r3, [pc, #216]	@ (800c38c <xTaskIncrementTick+0x15c>)
 800c2b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c2b6:	601a      	str	r2, [r3, #0]
					break;
 800c2b8:	e03f      	b.n	800c33a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2ba:	4b31      	ldr	r3, [pc, #196]	@ (800c380 <xTaskIncrementTick+0x150>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c2ca:	693a      	ldr	r2, [r7, #16]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d203      	bcs.n	800c2da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c2d2:	4a2e      	ldr	r2, [pc, #184]	@ (800c38c <xTaskIncrementTick+0x15c>)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c2d8:	e02f      	b.n	800c33a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	3304      	adds	r3, #4
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7fe fe68 	bl	800afb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d004      	beq.n	800c2f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	3318      	adds	r3, #24
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7fe fe5f 	bl	800afb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2fa:	4b25      	ldr	r3, [pc, #148]	@ (800c390 <xTaskIncrementTick+0x160>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d903      	bls.n	800c30a <xTaskIncrementTick+0xda>
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c306:	4a22      	ldr	r2, [pc, #136]	@ (800c390 <xTaskIncrementTick+0x160>)
 800c308:	6013      	str	r3, [r2, #0]
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c30e:	4613      	mov	r3, r2
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	4413      	add	r3, r2
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	4a1f      	ldr	r2, [pc, #124]	@ (800c394 <xTaskIncrementTick+0x164>)
 800c318:	441a      	add	r2, r3
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	3304      	adds	r3, #4
 800c31e:	4619      	mov	r1, r3
 800c320:	4610      	mov	r0, r2
 800c322:	f7fe fdea 	bl	800aefa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c32a:	4b1b      	ldr	r3, [pc, #108]	@ (800c398 <xTaskIncrementTick+0x168>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c330:	429a      	cmp	r2, r3
 800c332:	d3b8      	bcc.n	800c2a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c334:	2301      	movs	r3, #1
 800c336:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c338:	e7b5      	b.n	800c2a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c33a:	4b17      	ldr	r3, [pc, #92]	@ (800c398 <xTaskIncrementTick+0x168>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c340:	4914      	ldr	r1, [pc, #80]	@ (800c394 <xTaskIncrementTick+0x164>)
 800c342:	4613      	mov	r3, r2
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	4413      	add	r3, r2
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	440b      	add	r3, r1
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d901      	bls.n	800c356 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c352:	2301      	movs	r3, #1
 800c354:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c356:	4b11      	ldr	r3, [pc, #68]	@ (800c39c <xTaskIncrementTick+0x16c>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d007      	beq.n	800c36e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c35e:	2301      	movs	r3, #1
 800c360:	617b      	str	r3, [r7, #20]
 800c362:	e004      	b.n	800c36e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c364:	4b0e      	ldr	r3, [pc, #56]	@ (800c3a0 <xTaskIncrementTick+0x170>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	3301      	adds	r3, #1
 800c36a:	4a0d      	ldr	r2, [pc, #52]	@ (800c3a0 <xTaskIncrementTick+0x170>)
 800c36c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c36e:	697b      	ldr	r3, [r7, #20]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3718      	adds	r7, #24
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	20001b2c 	.word	0x20001b2c
 800c37c:	20001b08 	.word	0x20001b08
 800c380:	20001abc 	.word	0x20001abc
 800c384:	20001ac0 	.word	0x20001ac0
 800c388:	20001b1c 	.word	0x20001b1c
 800c38c:	20001b24 	.word	0x20001b24
 800c390:	20001b0c 	.word	0x20001b0c
 800c394:	20001634 	.word	0x20001634
 800c398:	20001630 	.word	0x20001630
 800c39c:	20001b18 	.word	0x20001b18
 800c3a0:	20001b14 	.word	0x20001b14

0800c3a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c3aa:	4b2b      	ldr	r3, [pc, #172]	@ (800c458 <vTaskSwitchContext+0xb4>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d003      	beq.n	800c3ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c3b2:	4b2a      	ldr	r3, [pc, #168]	@ (800c45c <vTaskSwitchContext+0xb8>)
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c3b8:	e047      	b.n	800c44a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c3ba:	4b28      	ldr	r3, [pc, #160]	@ (800c45c <vTaskSwitchContext+0xb8>)
 800c3bc:	2200      	movs	r2, #0
 800c3be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3c0:	4b27      	ldr	r3, [pc, #156]	@ (800c460 <vTaskSwitchContext+0xbc>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	60fb      	str	r3, [r7, #12]
 800c3c6:	e011      	b.n	800c3ec <vTaskSwitchContext+0x48>
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d10b      	bne.n	800c3e6 <vTaskSwitchContext+0x42>
	__asm volatile
 800c3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d2:	f383 8811 	msr	BASEPRI, r3
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	f3bf 8f4f 	dsb	sy
 800c3de:	607b      	str	r3, [r7, #4]
}
 800c3e0:	bf00      	nop
 800c3e2:	bf00      	nop
 800c3e4:	e7fd      	b.n	800c3e2 <vTaskSwitchContext+0x3e>
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	3b01      	subs	r3, #1
 800c3ea:	60fb      	str	r3, [r7, #12]
 800c3ec:	491d      	ldr	r1, [pc, #116]	@ (800c464 <vTaskSwitchContext+0xc0>)
 800c3ee:	68fa      	ldr	r2, [r7, #12]
 800c3f0:	4613      	mov	r3, r2
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	4413      	add	r3, r2
 800c3f6:	009b      	lsls	r3, r3, #2
 800c3f8:	440b      	add	r3, r1
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d0e3      	beq.n	800c3c8 <vTaskSwitchContext+0x24>
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	4613      	mov	r3, r2
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	4413      	add	r3, r2
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	4a16      	ldr	r2, [pc, #88]	@ (800c464 <vTaskSwitchContext+0xc0>)
 800c40c:	4413      	add	r3, r2
 800c40e:	60bb      	str	r3, [r7, #8]
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	685a      	ldr	r2, [r3, #4]
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	605a      	str	r2, [r3, #4]
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	685a      	ldr	r2, [r3, #4]
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	3308      	adds	r3, #8
 800c422:	429a      	cmp	r2, r3
 800c424:	d104      	bne.n	800c430 <vTaskSwitchContext+0x8c>
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	685a      	ldr	r2, [r3, #4]
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	605a      	str	r2, [r3, #4]
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	68db      	ldr	r3, [r3, #12]
 800c436:	4a0c      	ldr	r2, [pc, #48]	@ (800c468 <vTaskSwitchContext+0xc4>)
 800c438:	6013      	str	r3, [r2, #0]
 800c43a:	4a09      	ldr	r2, [pc, #36]	@ (800c460 <vTaskSwitchContext+0xbc>)
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c440:	4b09      	ldr	r3, [pc, #36]	@ (800c468 <vTaskSwitchContext+0xc4>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	3354      	adds	r3, #84	@ 0x54
 800c446:	4a09      	ldr	r2, [pc, #36]	@ (800c46c <vTaskSwitchContext+0xc8>)
 800c448:	6013      	str	r3, [r2, #0]
}
 800c44a:	bf00      	nop
 800c44c:	3714      	adds	r7, #20
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop
 800c458:	20001b2c 	.word	0x20001b2c
 800c45c:	20001b18 	.word	0x20001b18
 800c460:	20001b0c 	.word	0x20001b0c
 800c464:	20001634 	.word	0x20001634
 800c468:	20001630 	.word	0x20001630
 800c46c:	20000070 	.word	0x20000070

0800c470 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10b      	bne.n	800c498 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c484:	f383 8811 	msr	BASEPRI, r3
 800c488:	f3bf 8f6f 	isb	sy
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	60fb      	str	r3, [r7, #12]
}
 800c492:	bf00      	nop
 800c494:	bf00      	nop
 800c496:	e7fd      	b.n	800c494 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c498:	4b07      	ldr	r3, [pc, #28]	@ (800c4b8 <vTaskPlaceOnEventList+0x48>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	3318      	adds	r3, #24
 800c49e:	4619      	mov	r1, r3
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f7fe fd4e 	bl	800af42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c4a6:	2101      	movs	r1, #1
 800c4a8:	6838      	ldr	r0, [r7, #0]
 800c4aa:	f000 fb69 	bl	800cb80 <prvAddCurrentTaskToDelayedList>
}
 800c4ae:	bf00      	nop
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	20001630 	.word	0x20001630

0800c4bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b086      	sub	sp, #24
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d10b      	bne.n	800c4e6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d2:	f383 8811 	msr	BASEPRI, r3
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	f3bf 8f4f 	dsb	sy
 800c4de:	617b      	str	r3, [r7, #20]
}
 800c4e0:	bf00      	nop
 800c4e2:	bf00      	nop
 800c4e4:	e7fd      	b.n	800c4e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c4e6:	4b0a      	ldr	r3, [pc, #40]	@ (800c510 <vTaskPlaceOnEventListRestricted+0x54>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	3318      	adds	r3, #24
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f7fe fd03 	bl	800aefa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d002      	beq.n	800c500 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c4fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c4fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c500:	6879      	ldr	r1, [r7, #4]
 800c502:	68b8      	ldr	r0, [r7, #8]
 800c504:	f000 fb3c 	bl	800cb80 <prvAddCurrentTaskToDelayedList>
	}
 800c508:	bf00      	nop
 800c50a:	3718      	adds	r7, #24
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	20001630 	.word	0x20001630

0800c514 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b086      	sub	sp, #24
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d10b      	bne.n	800c542 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c52a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52e:	f383 8811 	msr	BASEPRI, r3
 800c532:	f3bf 8f6f 	isb	sy
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	60fb      	str	r3, [r7, #12]
}
 800c53c:	bf00      	nop
 800c53e:	bf00      	nop
 800c540:	e7fd      	b.n	800c53e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	3318      	adds	r3, #24
 800c546:	4618      	mov	r0, r3
 800c548:	f7fe fd34 	bl	800afb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c54c:	4b1d      	ldr	r3, [pc, #116]	@ (800c5c4 <xTaskRemoveFromEventList+0xb0>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d11d      	bne.n	800c590 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	3304      	adds	r3, #4
 800c558:	4618      	mov	r0, r3
 800c55a:	f7fe fd2b 	bl	800afb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c562:	4b19      	ldr	r3, [pc, #100]	@ (800c5c8 <xTaskRemoveFromEventList+0xb4>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	429a      	cmp	r2, r3
 800c568:	d903      	bls.n	800c572 <xTaskRemoveFromEventList+0x5e>
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c56e:	4a16      	ldr	r2, [pc, #88]	@ (800c5c8 <xTaskRemoveFromEventList+0xb4>)
 800c570:	6013      	str	r3, [r2, #0]
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c576:	4613      	mov	r3, r2
 800c578:	009b      	lsls	r3, r3, #2
 800c57a:	4413      	add	r3, r2
 800c57c:	009b      	lsls	r3, r3, #2
 800c57e:	4a13      	ldr	r2, [pc, #76]	@ (800c5cc <xTaskRemoveFromEventList+0xb8>)
 800c580:	441a      	add	r2, r3
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	3304      	adds	r3, #4
 800c586:	4619      	mov	r1, r3
 800c588:	4610      	mov	r0, r2
 800c58a:	f7fe fcb6 	bl	800aefa <vListInsertEnd>
 800c58e:	e005      	b.n	800c59c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	3318      	adds	r3, #24
 800c594:	4619      	mov	r1, r3
 800c596:	480e      	ldr	r0, [pc, #56]	@ (800c5d0 <xTaskRemoveFromEventList+0xbc>)
 800c598:	f7fe fcaf 	bl	800aefa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5a0:	4b0c      	ldr	r3, [pc, #48]	@ (800c5d4 <xTaskRemoveFromEventList+0xc0>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d905      	bls.n	800c5b6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c5ae:	4b0a      	ldr	r3, [pc, #40]	@ (800c5d8 <xTaskRemoveFromEventList+0xc4>)
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	601a      	str	r2, [r3, #0]
 800c5b4:	e001      	b.n	800c5ba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c5ba:	697b      	ldr	r3, [r7, #20]
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3718      	adds	r7, #24
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	20001b2c 	.word	0x20001b2c
 800c5c8:	20001b0c 	.word	0x20001b0c
 800c5cc:	20001634 	.word	0x20001634
 800c5d0:	20001ac4 	.word	0x20001ac4
 800c5d4:	20001630 	.word	0x20001630
 800c5d8:	20001b18 	.word	0x20001b18

0800c5dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c5e4:	4b06      	ldr	r3, [pc, #24]	@ (800c600 <vTaskInternalSetTimeOutState+0x24>)
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c5ec:	4b05      	ldr	r3, [pc, #20]	@ (800c604 <vTaskInternalSetTimeOutState+0x28>)
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	605a      	str	r2, [r3, #4]
}
 800c5f4:	bf00      	nop
 800c5f6:	370c      	adds	r7, #12
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr
 800c600:	20001b1c 	.word	0x20001b1c
 800c604:	20001b08 	.word	0x20001b08

0800c608 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b088      	sub	sp, #32
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d10b      	bne.n	800c630 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c61c:	f383 8811 	msr	BASEPRI, r3
 800c620:	f3bf 8f6f 	isb	sy
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	613b      	str	r3, [r7, #16]
}
 800c62a:	bf00      	nop
 800c62c:	bf00      	nop
 800c62e:	e7fd      	b.n	800c62c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d10b      	bne.n	800c64e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c63a:	f383 8811 	msr	BASEPRI, r3
 800c63e:	f3bf 8f6f 	isb	sy
 800c642:	f3bf 8f4f 	dsb	sy
 800c646:	60fb      	str	r3, [r7, #12]
}
 800c648:	bf00      	nop
 800c64a:	bf00      	nop
 800c64c:	e7fd      	b.n	800c64a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c64e:	f000 ff73 	bl	800d538 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c652:	4b1d      	ldr	r3, [pc, #116]	@ (800c6c8 <xTaskCheckForTimeOut+0xc0>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	69ba      	ldr	r2, [r7, #24]
 800c65e:	1ad3      	subs	r3, r2, r3
 800c660:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c66a:	d102      	bne.n	800c672 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c66c:	2300      	movs	r3, #0
 800c66e:	61fb      	str	r3, [r7, #28]
 800c670:	e023      	b.n	800c6ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	4b15      	ldr	r3, [pc, #84]	@ (800c6cc <xTaskCheckForTimeOut+0xc4>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d007      	beq.n	800c68e <xTaskCheckForTimeOut+0x86>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	69ba      	ldr	r2, [r7, #24]
 800c684:	429a      	cmp	r2, r3
 800c686:	d302      	bcc.n	800c68e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c688:	2301      	movs	r3, #1
 800c68a:	61fb      	str	r3, [r7, #28]
 800c68c:	e015      	b.n	800c6ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	697a      	ldr	r2, [r7, #20]
 800c694:	429a      	cmp	r2, r3
 800c696:	d20b      	bcs.n	800c6b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	1ad2      	subs	r2, r2, r3
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f7ff ff99 	bl	800c5dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	61fb      	str	r3, [r7, #28]
 800c6ae:	e004      	b.n	800c6ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c6ba:	f000 ff6f 	bl	800d59c <vPortExitCritical>

	return xReturn;
 800c6be:	69fb      	ldr	r3, [r7, #28]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3720      	adds	r7, #32
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	20001b08 	.word	0x20001b08
 800c6cc:	20001b1c 	.word	0x20001b1c

0800c6d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c6d4:	4b03      	ldr	r3, [pc, #12]	@ (800c6e4 <vTaskMissedYield+0x14>)
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	601a      	str	r2, [r3, #0]
}
 800c6da:	bf00      	nop
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr
 800c6e4:	20001b18 	.word	0x20001b18

0800c6e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c6f0:	f000 f852 	bl	800c798 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c6f4:	4b06      	ldr	r3, [pc, #24]	@ (800c710 <prvIdleTask+0x28>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d9f9      	bls.n	800c6f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c6fc:	4b05      	ldr	r3, [pc, #20]	@ (800c714 <prvIdleTask+0x2c>)
 800c6fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c702:	601a      	str	r2, [r3, #0]
 800c704:	f3bf 8f4f 	dsb	sy
 800c708:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c70c:	e7f0      	b.n	800c6f0 <prvIdleTask+0x8>
 800c70e:	bf00      	nop
 800c710:	20001634 	.word	0x20001634
 800c714:	e000ed04 	.word	0xe000ed04

0800c718 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c71e:	2300      	movs	r3, #0
 800c720:	607b      	str	r3, [r7, #4]
 800c722:	e00c      	b.n	800c73e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	4613      	mov	r3, r2
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	4413      	add	r3, r2
 800c72c:	009b      	lsls	r3, r3, #2
 800c72e:	4a12      	ldr	r2, [pc, #72]	@ (800c778 <prvInitialiseTaskLists+0x60>)
 800c730:	4413      	add	r3, r2
 800c732:	4618      	mov	r0, r3
 800c734:	f7fe fbb4 	bl	800aea0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	3301      	adds	r3, #1
 800c73c:	607b      	str	r3, [r7, #4]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2b37      	cmp	r3, #55	@ 0x37
 800c742:	d9ef      	bls.n	800c724 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c744:	480d      	ldr	r0, [pc, #52]	@ (800c77c <prvInitialiseTaskLists+0x64>)
 800c746:	f7fe fbab 	bl	800aea0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c74a:	480d      	ldr	r0, [pc, #52]	@ (800c780 <prvInitialiseTaskLists+0x68>)
 800c74c:	f7fe fba8 	bl	800aea0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c750:	480c      	ldr	r0, [pc, #48]	@ (800c784 <prvInitialiseTaskLists+0x6c>)
 800c752:	f7fe fba5 	bl	800aea0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c756:	480c      	ldr	r0, [pc, #48]	@ (800c788 <prvInitialiseTaskLists+0x70>)
 800c758:	f7fe fba2 	bl	800aea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c75c:	480b      	ldr	r0, [pc, #44]	@ (800c78c <prvInitialiseTaskLists+0x74>)
 800c75e:	f7fe fb9f 	bl	800aea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c762:	4b0b      	ldr	r3, [pc, #44]	@ (800c790 <prvInitialiseTaskLists+0x78>)
 800c764:	4a05      	ldr	r2, [pc, #20]	@ (800c77c <prvInitialiseTaskLists+0x64>)
 800c766:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c768:	4b0a      	ldr	r3, [pc, #40]	@ (800c794 <prvInitialiseTaskLists+0x7c>)
 800c76a:	4a05      	ldr	r2, [pc, #20]	@ (800c780 <prvInitialiseTaskLists+0x68>)
 800c76c:	601a      	str	r2, [r3, #0]
}
 800c76e:	bf00      	nop
 800c770:	3708      	adds	r7, #8
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
 800c776:	bf00      	nop
 800c778:	20001634 	.word	0x20001634
 800c77c:	20001a94 	.word	0x20001a94
 800c780:	20001aa8 	.word	0x20001aa8
 800c784:	20001ac4 	.word	0x20001ac4
 800c788:	20001ad8 	.word	0x20001ad8
 800c78c:	20001af0 	.word	0x20001af0
 800c790:	20001abc 	.word	0x20001abc
 800c794:	20001ac0 	.word	0x20001ac0

0800c798 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c79e:	e019      	b.n	800c7d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c7a0:	f000 feca 	bl	800d538 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7a4:	4b10      	ldr	r3, [pc, #64]	@ (800c7e8 <prvCheckTasksWaitingTermination+0x50>)
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	3304      	adds	r3, #4
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7fe fbff 	bl	800afb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c7b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c7ec <prvCheckTasksWaitingTermination+0x54>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	3b01      	subs	r3, #1
 800c7bc:	4a0b      	ldr	r2, [pc, #44]	@ (800c7ec <prvCheckTasksWaitingTermination+0x54>)
 800c7be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c7c0:	4b0b      	ldr	r3, [pc, #44]	@ (800c7f0 <prvCheckTasksWaitingTermination+0x58>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	3b01      	subs	r3, #1
 800c7c6:	4a0a      	ldr	r2, [pc, #40]	@ (800c7f0 <prvCheckTasksWaitingTermination+0x58>)
 800c7c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c7ca:	f000 fee7 	bl	800d59c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 f810 	bl	800c7f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c7d4:	4b06      	ldr	r3, [pc, #24]	@ (800c7f0 <prvCheckTasksWaitingTermination+0x58>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d1e1      	bne.n	800c7a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c7dc:	bf00      	nop
 800c7de:	bf00      	nop
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	20001ad8 	.word	0x20001ad8
 800c7ec:	20001b04 	.word	0x20001b04
 800c7f0:	20001aec 	.word	0x20001aec

0800c7f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	3354      	adds	r3, #84	@ 0x54
 800c800:	4618      	mov	r0, r3
 800c802:	f001 f9d1 	bl	800dba8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d108      	bne.n	800c822 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c814:	4618      	mov	r0, r3
 800c816:	f001 f87f 	bl	800d918 <vPortFree>
				vPortFree( pxTCB );
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f001 f87c 	bl	800d918 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c820:	e019      	b.n	800c856 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d103      	bne.n	800c834 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f001 f873 	bl	800d918 <vPortFree>
	}
 800c832:	e010      	b.n	800c856 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c83a:	2b02      	cmp	r3, #2
 800c83c:	d00b      	beq.n	800c856 <prvDeleteTCB+0x62>
	__asm volatile
 800c83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	60fb      	str	r3, [r7, #12]
}
 800c850:	bf00      	nop
 800c852:	bf00      	nop
 800c854:	e7fd      	b.n	800c852 <prvDeleteTCB+0x5e>
	}
 800c856:	bf00      	nop
 800c858:	3710      	adds	r7, #16
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
	...

0800c860 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c860:	b480      	push	{r7}
 800c862:	b083      	sub	sp, #12
 800c864:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c866:	4b0c      	ldr	r3, [pc, #48]	@ (800c898 <prvResetNextTaskUnblockTime+0x38>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d104      	bne.n	800c87a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c870:	4b0a      	ldr	r3, [pc, #40]	@ (800c89c <prvResetNextTaskUnblockTime+0x3c>)
 800c872:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c876:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c878:	e008      	b.n	800c88c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c87a:	4b07      	ldr	r3, [pc, #28]	@ (800c898 <prvResetNextTaskUnblockTime+0x38>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	4a04      	ldr	r2, [pc, #16]	@ (800c89c <prvResetNextTaskUnblockTime+0x3c>)
 800c88a:	6013      	str	r3, [r2, #0]
}
 800c88c:	bf00      	nop
 800c88e:	370c      	adds	r7, #12
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr
 800c898:	20001abc 	.word	0x20001abc
 800c89c:	20001b24 	.word	0x20001b24

0800c8a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c8a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c8d4 <xTaskGetSchedulerState+0x34>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d102      	bne.n	800c8b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	607b      	str	r3, [r7, #4]
 800c8b2:	e008      	b.n	800c8c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8b4:	4b08      	ldr	r3, [pc, #32]	@ (800c8d8 <xTaskGetSchedulerState+0x38>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d102      	bne.n	800c8c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c8bc:	2302      	movs	r3, #2
 800c8be:	607b      	str	r3, [r7, #4]
 800c8c0:	e001      	b.n	800c8c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c8c6:	687b      	ldr	r3, [r7, #4]
	}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	370c      	adds	r7, #12
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr
 800c8d4:	20001b10 	.word	0x20001b10
 800c8d8:	20001b2c 	.word	0x20001b2c

0800c8dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b086      	sub	sp, #24
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d058      	beq.n	800c9a4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c8f2:	4b2f      	ldr	r3, [pc, #188]	@ (800c9b0 <xTaskPriorityDisinherit+0xd4>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	693a      	ldr	r2, [r7, #16]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d00b      	beq.n	800c914 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c8fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c900:	f383 8811 	msr	BASEPRI, r3
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	f3bf 8f4f 	dsb	sy
 800c90c:	60fb      	str	r3, [r7, #12]
}
 800c90e:	bf00      	nop
 800c910:	bf00      	nop
 800c912:	e7fd      	b.n	800c910 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d10b      	bne.n	800c934 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c920:	f383 8811 	msr	BASEPRI, r3
 800c924:	f3bf 8f6f 	isb	sy
 800c928:	f3bf 8f4f 	dsb	sy
 800c92c:	60bb      	str	r3, [r7, #8]
}
 800c92e:	bf00      	nop
 800c930:	bf00      	nop
 800c932:	e7fd      	b.n	800c930 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c938:	1e5a      	subs	r2, r3, #1
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c946:	429a      	cmp	r2, r3
 800c948:	d02c      	beq.n	800c9a4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d128      	bne.n	800c9a4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	3304      	adds	r3, #4
 800c956:	4618      	mov	r0, r3
 800c958:	f7fe fb2c 	bl	800afb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c968:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c974:	4b0f      	ldr	r3, [pc, #60]	@ (800c9b4 <xTaskPriorityDisinherit+0xd8>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d903      	bls.n	800c984 <xTaskPriorityDisinherit+0xa8>
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c980:	4a0c      	ldr	r2, [pc, #48]	@ (800c9b4 <xTaskPriorityDisinherit+0xd8>)
 800c982:	6013      	str	r3, [r2, #0]
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c988:	4613      	mov	r3, r2
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	4413      	add	r3, r2
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	4a09      	ldr	r2, [pc, #36]	@ (800c9b8 <xTaskPriorityDisinherit+0xdc>)
 800c992:	441a      	add	r2, r3
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	3304      	adds	r3, #4
 800c998:	4619      	mov	r1, r3
 800c99a:	4610      	mov	r0, r2
 800c99c:	f7fe faad 	bl	800aefa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c9a4:	697b      	ldr	r3, [r7, #20]
	}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3718      	adds	r7, #24
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	20001630 	.word	0x20001630
 800c9b4:	20001b0c 	.word	0x20001b0c
 800c9b8:	20001634 	.word	0x20001634

0800c9bc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c9c6:	f000 fdb7 	bl	800d538 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c9ca:	4b20      	ldr	r3, [pc, #128]	@ (800ca4c <ulTaskNotifyTake+0x90>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d113      	bne.n	800c9fe <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c9d6:	4b1d      	ldr	r3, [pc, #116]	@ (800ca4c <ulTaskNotifyTake+0x90>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d00b      	beq.n	800c9fe <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c9e6:	2101      	movs	r1, #1
 800c9e8:	6838      	ldr	r0, [r7, #0]
 800c9ea:	f000 f8c9 	bl	800cb80 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c9ee:	4b18      	ldr	r3, [pc, #96]	@ (800ca50 <ulTaskNotifyTake+0x94>)
 800c9f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9f4:	601a      	str	r2, [r3, #0]
 800c9f6:	f3bf 8f4f 	dsb	sy
 800c9fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c9fe:	f000 fdcd 	bl	800d59c <vPortExitCritical>

		taskENTER_CRITICAL();
 800ca02:	f000 fd99 	bl	800d538 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ca06:	4b11      	ldr	r3, [pc, #68]	@ (800ca4c <ulTaskNotifyTake+0x90>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ca0e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00e      	beq.n	800ca34 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d005      	beq.n	800ca28 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ca1c:	4b0b      	ldr	r3, [pc, #44]	@ (800ca4c <ulTaskNotifyTake+0x90>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800ca26:	e005      	b.n	800ca34 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800ca28:	4b08      	ldr	r3, [pc, #32]	@ (800ca4c <ulTaskNotifyTake+0x90>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	3a01      	subs	r2, #1
 800ca30:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca34:	4b05      	ldr	r3, [pc, #20]	@ (800ca4c <ulTaskNotifyTake+0x90>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800ca3e:	f000 fdad 	bl	800d59c <vPortExitCritical>

		return ulReturn;
 800ca42:	68fb      	ldr	r3, [r7, #12]
	}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3710      	adds	r7, #16
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	20001630 	.word	0x20001630
 800ca50:	e000ed04 	.word	0xe000ed04

0800ca54 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b08a      	sub	sp, #40	@ 0x28
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d10b      	bne.n	800ca7c <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800ca64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca68:	f383 8811 	msr	BASEPRI, r3
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	61bb      	str	r3, [r7, #24]
}
 800ca76:	bf00      	nop
 800ca78:	bf00      	nop
 800ca7a:	e7fd      	b.n	800ca78 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca7c:	f000 fe3c 	bl	800d6f8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800ca84:	f3ef 8211 	mrs	r2, BASEPRI
 800ca88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca8c:	f383 8811 	msr	BASEPRI, r3
 800ca90:	f3bf 8f6f 	isb	sy
 800ca94:	f3bf 8f4f 	dsb	sy
 800ca98:	617a      	str	r2, [r7, #20]
 800ca9a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ca9c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca9e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800caa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800caa6:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800caa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caaa:	2202      	movs	r2, #2
 800caac:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800cab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cab6:	1c5a      	adds	r2, r3, #1
 800cab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cabe:	7ffb      	ldrb	r3, [r7, #31]
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d147      	bne.n	800cb54 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d00b      	beq.n	800cae4 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800cacc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cad0:	f383 8811 	msr	BASEPRI, r3
 800cad4:	f3bf 8f6f 	isb	sy
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	60fb      	str	r3, [r7, #12]
}
 800cade:	bf00      	nop
 800cae0:	bf00      	nop
 800cae2:	e7fd      	b.n	800cae0 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cae4:	4b20      	ldr	r3, [pc, #128]	@ (800cb68 <vTaskNotifyGiveFromISR+0x114>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d11d      	bne.n	800cb28 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800caec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caee:	3304      	adds	r3, #4
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7fe fa5f 	bl	800afb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800caf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cafa:	4b1c      	ldr	r3, [pc, #112]	@ (800cb6c <vTaskNotifyGiveFromISR+0x118>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d903      	bls.n	800cb0a <vTaskNotifyGiveFromISR+0xb6>
 800cb02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb06:	4a19      	ldr	r2, [pc, #100]	@ (800cb6c <vTaskNotifyGiveFromISR+0x118>)
 800cb08:	6013      	str	r3, [r2, #0]
 800cb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb0e:	4613      	mov	r3, r2
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	4413      	add	r3, r2
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	4a16      	ldr	r2, [pc, #88]	@ (800cb70 <vTaskNotifyGiveFromISR+0x11c>)
 800cb18:	441a      	add	r2, r3
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1c:	3304      	adds	r3, #4
 800cb1e:	4619      	mov	r1, r3
 800cb20:	4610      	mov	r0, r2
 800cb22:	f7fe f9ea 	bl	800aefa <vListInsertEnd>
 800cb26:	e005      	b.n	800cb34 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800cb28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2a:	3318      	adds	r3, #24
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	4811      	ldr	r0, [pc, #68]	@ (800cb74 <vTaskNotifyGiveFromISR+0x120>)
 800cb30:	f7fe f9e3 	bl	800aefa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cb34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb38:	4b0f      	ldr	r3, [pc, #60]	@ (800cb78 <vTaskNotifyGiveFromISR+0x124>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d908      	bls.n	800cb54 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d002      	beq.n	800cb4e <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800cb4e:	4b0b      	ldr	r3, [pc, #44]	@ (800cb7c <vTaskNotifyGiveFromISR+0x128>)
 800cb50:	2201      	movs	r2, #1
 800cb52:	601a      	str	r2, [r3, #0]
 800cb54:	6a3b      	ldr	r3, [r7, #32]
 800cb56:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	f383 8811 	msr	BASEPRI, r3
}
 800cb5e:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800cb60:	bf00      	nop
 800cb62:	3728      	adds	r7, #40	@ 0x28
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	20001b2c 	.word	0x20001b2c
 800cb6c:	20001b0c 	.word	0x20001b0c
 800cb70:	20001634 	.word	0x20001634
 800cb74:	20001ac4 	.word	0x20001ac4
 800cb78:	20001630 	.word	0x20001630
 800cb7c:	20001b18 	.word	0x20001b18

0800cb80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cb8a:	4b21      	ldr	r3, [pc, #132]	@ (800cc10 <prvAddCurrentTaskToDelayedList+0x90>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb90:	4b20      	ldr	r3, [pc, #128]	@ (800cc14 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	3304      	adds	r3, #4
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7fe fa0c 	bl	800afb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cba2:	d10a      	bne.n	800cbba <prvAddCurrentTaskToDelayedList+0x3a>
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d007      	beq.n	800cbba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbaa:	4b1a      	ldr	r3, [pc, #104]	@ (800cc14 <prvAddCurrentTaskToDelayedList+0x94>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	3304      	adds	r3, #4
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	4819      	ldr	r0, [pc, #100]	@ (800cc18 <prvAddCurrentTaskToDelayedList+0x98>)
 800cbb4:	f7fe f9a1 	bl	800aefa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cbb8:	e026      	b.n	800cc08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cbba:	68fa      	ldr	r2, [r7, #12]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	4413      	add	r3, r2
 800cbc0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cbc2:	4b14      	ldr	r3, [pc, #80]	@ (800cc14 <prvAddCurrentTaskToDelayedList+0x94>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	68ba      	ldr	r2, [r7, #8]
 800cbc8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cbca:	68ba      	ldr	r2, [r7, #8]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d209      	bcs.n	800cbe6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbd2:	4b12      	ldr	r3, [pc, #72]	@ (800cc1c <prvAddCurrentTaskToDelayedList+0x9c>)
 800cbd4:	681a      	ldr	r2, [r3, #0]
 800cbd6:	4b0f      	ldr	r3, [pc, #60]	@ (800cc14 <prvAddCurrentTaskToDelayedList+0x94>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	3304      	adds	r3, #4
 800cbdc:	4619      	mov	r1, r3
 800cbde:	4610      	mov	r0, r2
 800cbe0:	f7fe f9af 	bl	800af42 <vListInsert>
}
 800cbe4:	e010      	b.n	800cc08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbe6:	4b0e      	ldr	r3, [pc, #56]	@ (800cc20 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cbe8:	681a      	ldr	r2, [r3, #0]
 800cbea:	4b0a      	ldr	r3, [pc, #40]	@ (800cc14 <prvAddCurrentTaskToDelayedList+0x94>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	3304      	adds	r3, #4
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	4610      	mov	r0, r2
 800cbf4:	f7fe f9a5 	bl	800af42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cbf8:	4b0a      	ldr	r3, [pc, #40]	@ (800cc24 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	68ba      	ldr	r2, [r7, #8]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d202      	bcs.n	800cc08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cc02:	4a08      	ldr	r2, [pc, #32]	@ (800cc24 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	6013      	str	r3, [r2, #0]
}
 800cc08:	bf00      	nop
 800cc0a:	3710      	adds	r7, #16
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}
 800cc10:	20001b08 	.word	0x20001b08
 800cc14:	20001630 	.word	0x20001630
 800cc18:	20001af0 	.word	0x20001af0
 800cc1c:	20001ac0 	.word	0x20001ac0
 800cc20:	20001abc 	.word	0x20001abc
 800cc24:	20001b24 	.word	0x20001b24

0800cc28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b08a      	sub	sp, #40	@ 0x28
 800cc2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cc32:	f000 fb13 	bl	800d25c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cc36:	4b1d      	ldr	r3, [pc, #116]	@ (800ccac <xTimerCreateTimerTask+0x84>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d021      	beq.n	800cc82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cc42:	2300      	movs	r3, #0
 800cc44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cc46:	1d3a      	adds	r2, r7, #4
 800cc48:	f107 0108 	add.w	r1, r7, #8
 800cc4c:	f107 030c 	add.w	r3, r7, #12
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7fe f90b 	bl	800ae6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cc56:	6879      	ldr	r1, [r7, #4]
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	68fa      	ldr	r2, [r7, #12]
 800cc5c:	9202      	str	r2, [sp, #8]
 800cc5e:	9301      	str	r3, [sp, #4]
 800cc60:	2302      	movs	r3, #2
 800cc62:	9300      	str	r3, [sp, #0]
 800cc64:	2300      	movs	r3, #0
 800cc66:	460a      	mov	r2, r1
 800cc68:	4911      	ldr	r1, [pc, #68]	@ (800ccb0 <xTimerCreateTimerTask+0x88>)
 800cc6a:	4812      	ldr	r0, [pc, #72]	@ (800ccb4 <xTimerCreateTimerTask+0x8c>)
 800cc6c:	f7fe fec6 	bl	800b9fc <xTaskCreateStatic>
 800cc70:	4603      	mov	r3, r0
 800cc72:	4a11      	ldr	r2, [pc, #68]	@ (800ccb8 <xTimerCreateTimerTask+0x90>)
 800cc74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cc76:	4b10      	ldr	r3, [pc, #64]	@ (800ccb8 <xTimerCreateTimerTask+0x90>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d001      	beq.n	800cc82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d10b      	bne.n	800cca0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800cc88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc8c:	f383 8811 	msr	BASEPRI, r3
 800cc90:	f3bf 8f6f 	isb	sy
 800cc94:	f3bf 8f4f 	dsb	sy
 800cc98:	613b      	str	r3, [r7, #16]
}
 800cc9a:	bf00      	nop
 800cc9c:	bf00      	nop
 800cc9e:	e7fd      	b.n	800cc9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cca0:	697b      	ldr	r3, [r7, #20]
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3718      	adds	r7, #24
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	20001b60 	.word	0x20001b60
 800ccb0:	0800e5e8 	.word	0x0800e5e8
 800ccb4:	0800cdf5 	.word	0x0800cdf5
 800ccb8:	20001b64 	.word	0x20001b64

0800ccbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b08a      	sub	sp, #40	@ 0x28
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	607a      	str	r2, [r7, #4]
 800ccc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ccca:	2300      	movs	r3, #0
 800cccc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d10b      	bne.n	800ccec <xTimerGenericCommand+0x30>
	__asm volatile
 800ccd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd8:	f383 8811 	msr	BASEPRI, r3
 800ccdc:	f3bf 8f6f 	isb	sy
 800cce0:	f3bf 8f4f 	dsb	sy
 800cce4:	623b      	str	r3, [r7, #32]
}
 800cce6:	bf00      	nop
 800cce8:	bf00      	nop
 800ccea:	e7fd      	b.n	800cce8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ccec:	4b19      	ldr	r3, [pc, #100]	@ (800cd54 <xTimerGenericCommand+0x98>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d02a      	beq.n	800cd4a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	2b05      	cmp	r3, #5
 800cd04:	dc18      	bgt.n	800cd38 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cd06:	f7ff fdcb 	bl	800c8a0 <xTaskGetSchedulerState>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b02      	cmp	r3, #2
 800cd0e:	d109      	bne.n	800cd24 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cd10:	4b10      	ldr	r3, [pc, #64]	@ (800cd54 <xTimerGenericCommand+0x98>)
 800cd12:	6818      	ldr	r0, [r3, #0]
 800cd14:	f107 0110 	add.w	r1, r7, #16
 800cd18:	2300      	movs	r3, #0
 800cd1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd1c:	f7fe fa7e 	bl	800b21c <xQueueGenericSend>
 800cd20:	6278      	str	r0, [r7, #36]	@ 0x24
 800cd22:	e012      	b.n	800cd4a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cd24:	4b0b      	ldr	r3, [pc, #44]	@ (800cd54 <xTimerGenericCommand+0x98>)
 800cd26:	6818      	ldr	r0, [r3, #0]
 800cd28:	f107 0110 	add.w	r1, r7, #16
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f7fe fa74 	bl	800b21c <xQueueGenericSend>
 800cd34:	6278      	str	r0, [r7, #36]	@ 0x24
 800cd36:	e008      	b.n	800cd4a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cd38:	4b06      	ldr	r3, [pc, #24]	@ (800cd54 <xTimerGenericCommand+0x98>)
 800cd3a:	6818      	ldr	r0, [r3, #0]
 800cd3c:	f107 0110 	add.w	r1, r7, #16
 800cd40:	2300      	movs	r3, #0
 800cd42:	683a      	ldr	r2, [r7, #0]
 800cd44:	f7fe fb6c 	bl	800b420 <xQueueGenericSendFromISR>
 800cd48:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cd4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3728      	adds	r7, #40	@ 0x28
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	20001b60 	.word	0x20001b60

0800cd58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b088      	sub	sp, #32
 800cd5c:	af02      	add	r7, sp, #8
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd62:	4b23      	ldr	r3, [pc, #140]	@ (800cdf0 <prvProcessExpiredTimer+0x98>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	68db      	ldr	r3, [r3, #12]
 800cd6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	3304      	adds	r3, #4
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fe f91f 	bl	800afb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd7c:	f003 0304 	and.w	r3, r3, #4
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d023      	beq.n	800cdcc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	699a      	ldr	r2, [r3, #24]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	18d1      	adds	r1, r2, r3
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	683a      	ldr	r2, [r7, #0]
 800cd90:	6978      	ldr	r0, [r7, #20]
 800cd92:	f000 f8d5 	bl	800cf40 <prvInsertTimerInActiveList>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d020      	beq.n	800cdde <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	9300      	str	r3, [sp, #0]
 800cda0:	2300      	movs	r3, #0
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	2100      	movs	r1, #0
 800cda6:	6978      	ldr	r0, [r7, #20]
 800cda8:	f7ff ff88 	bl	800ccbc <xTimerGenericCommand>
 800cdac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d114      	bne.n	800cdde <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cdb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdb8:	f383 8811 	msr	BASEPRI, r3
 800cdbc:	f3bf 8f6f 	isb	sy
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	60fb      	str	r3, [r7, #12]
}
 800cdc6:	bf00      	nop
 800cdc8:	bf00      	nop
 800cdca:	e7fd      	b.n	800cdc8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cdd2:	f023 0301 	bic.w	r3, r3, #1
 800cdd6:	b2da      	uxtb	r2, r3
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	6a1b      	ldr	r3, [r3, #32]
 800cde2:	6978      	ldr	r0, [r7, #20]
 800cde4:	4798      	blx	r3
}
 800cde6:	bf00      	nop
 800cde8:	3718      	adds	r7, #24
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	20001b58 	.word	0x20001b58

0800cdf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cdfc:	f107 0308 	add.w	r3, r7, #8
 800ce00:	4618      	mov	r0, r3
 800ce02:	f000 f859 	bl	800ceb8 <prvGetNextExpireTime>
 800ce06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f000 f805 	bl	800ce1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ce12:	f000 f8d7 	bl	800cfc4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ce16:	bf00      	nop
 800ce18:	e7f0      	b.n	800cdfc <prvTimerTask+0x8>
	...

0800ce1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ce26:	f7ff f84d 	bl	800bec4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ce2a:	f107 0308 	add.w	r3, r7, #8
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f000 f866 	bl	800cf00 <prvSampleTimeNow>
 800ce34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d130      	bne.n	800ce9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d10a      	bne.n	800ce58 <prvProcessTimerOrBlockTask+0x3c>
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d806      	bhi.n	800ce58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ce4a:	f7ff f849 	bl	800bee0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ce4e:	68f9      	ldr	r1, [r7, #12]
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f7ff ff81 	bl	800cd58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ce56:	e024      	b.n	800cea2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d008      	beq.n	800ce70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ce5e:	4b13      	ldr	r3, [pc, #76]	@ (800ceac <prvProcessTimerOrBlockTask+0x90>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d101      	bne.n	800ce6c <prvProcessTimerOrBlockTask+0x50>
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e000      	b.n	800ce6e <prvProcessTimerOrBlockTask+0x52>
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ce70:	4b0f      	ldr	r3, [pc, #60]	@ (800ceb0 <prvProcessTimerOrBlockTask+0x94>)
 800ce72:	6818      	ldr	r0, [r3, #0]
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	1ad3      	subs	r3, r2, r3
 800ce7a:	683a      	ldr	r2, [r7, #0]
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	f7fe fd89 	bl	800b994 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ce82:	f7ff f82d 	bl	800bee0 <xTaskResumeAll>
 800ce86:	4603      	mov	r3, r0
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d10a      	bne.n	800cea2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ce8c:	4b09      	ldr	r3, [pc, #36]	@ (800ceb4 <prvProcessTimerOrBlockTask+0x98>)
 800ce8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	f3bf 8f4f 	dsb	sy
 800ce98:	f3bf 8f6f 	isb	sy
}
 800ce9c:	e001      	b.n	800cea2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ce9e:	f7ff f81f 	bl	800bee0 <xTaskResumeAll>
}
 800cea2:	bf00      	nop
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	20001b5c 	.word	0x20001b5c
 800ceb0:	20001b60 	.word	0x20001b60
 800ceb4:	e000ed04 	.word	0xe000ed04

0800ceb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b085      	sub	sp, #20
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cec0:	4b0e      	ldr	r3, [pc, #56]	@ (800cefc <prvGetNextExpireTime+0x44>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d101      	bne.n	800cece <prvGetNextExpireTime+0x16>
 800ceca:	2201      	movs	r2, #1
 800cecc:	e000      	b.n	800ced0 <prvGetNextExpireTime+0x18>
 800cece:	2200      	movs	r2, #0
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d105      	bne.n	800cee8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cedc:	4b07      	ldr	r3, [pc, #28]	@ (800cefc <prvGetNextExpireTime+0x44>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	68db      	ldr	r3, [r3, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	60fb      	str	r3, [r7, #12]
 800cee6:	e001      	b.n	800ceec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cee8:	2300      	movs	r3, #0
 800ceea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ceec:	68fb      	ldr	r3, [r7, #12]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3714      	adds	r7, #20
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr
 800cefa:	bf00      	nop
 800cefc:	20001b58 	.word	0x20001b58

0800cf00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cf08:	f7ff f888 	bl	800c01c <xTaskGetTickCount>
 800cf0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cf0e:	4b0b      	ldr	r3, [pc, #44]	@ (800cf3c <prvSampleTimeNow+0x3c>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d205      	bcs.n	800cf24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cf18:	f000 f93a 	bl	800d190 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	601a      	str	r2, [r3, #0]
 800cf22:	e002      	b.n	800cf2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cf2a:	4a04      	ldr	r2, [pc, #16]	@ (800cf3c <prvSampleTimeNow+0x3c>)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cf30:	68fb      	ldr	r3, [r7, #12]
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3710      	adds	r7, #16
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	20001b68 	.word	0x20001b68

0800cf40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b086      	sub	sp, #24
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	607a      	str	r2, [r7, #4]
 800cf4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	68ba      	ldr	r2, [r7, #8]
 800cf56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	68fa      	ldr	r2, [r7, #12]
 800cf5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cf5e:	68ba      	ldr	r2, [r7, #8]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d812      	bhi.n	800cf8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	1ad2      	subs	r2, r2, r3
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	699b      	ldr	r3, [r3, #24]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d302      	bcc.n	800cf7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cf74:	2301      	movs	r3, #1
 800cf76:	617b      	str	r3, [r7, #20]
 800cf78:	e01b      	b.n	800cfb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cf7a:	4b10      	ldr	r3, [pc, #64]	@ (800cfbc <prvInsertTimerInActiveList+0x7c>)
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	3304      	adds	r3, #4
 800cf82:	4619      	mov	r1, r3
 800cf84:	4610      	mov	r0, r2
 800cf86:	f7fd ffdc 	bl	800af42 <vListInsert>
 800cf8a:	e012      	b.n	800cfb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cf8c:	687a      	ldr	r2, [r7, #4]
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d206      	bcs.n	800cfa2 <prvInsertTimerInActiveList+0x62>
 800cf94:	68ba      	ldr	r2, [r7, #8]
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d302      	bcc.n	800cfa2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	617b      	str	r3, [r7, #20]
 800cfa0:	e007      	b.n	800cfb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cfa2:	4b07      	ldr	r3, [pc, #28]	@ (800cfc0 <prvInsertTimerInActiveList+0x80>)
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	3304      	adds	r3, #4
 800cfaa:	4619      	mov	r1, r3
 800cfac:	4610      	mov	r0, r2
 800cfae:	f7fd ffc8 	bl	800af42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cfb2:	697b      	ldr	r3, [r7, #20]
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3718      	adds	r7, #24
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	20001b5c 	.word	0x20001b5c
 800cfc0:	20001b58 	.word	0x20001b58

0800cfc4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b08e      	sub	sp, #56	@ 0x38
 800cfc8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cfca:	e0ce      	b.n	800d16a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	da19      	bge.n	800d006 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cfd2:	1d3b      	adds	r3, r7, #4
 800cfd4:	3304      	adds	r3, #4
 800cfd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cfd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d10b      	bne.n	800cff6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cfde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	61fb      	str	r3, [r7, #28]
}
 800cff0:	bf00      	nop
 800cff2:	bf00      	nop
 800cff4:	e7fd      	b.n	800cff2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cffc:	6850      	ldr	r0, [r2, #4]
 800cffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d000:	6892      	ldr	r2, [r2, #8]
 800d002:	4611      	mov	r1, r2
 800d004:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f2c0 80ae 	blt.w	800d16a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d014:	695b      	ldr	r3, [r3, #20]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d004      	beq.n	800d024 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d01c:	3304      	adds	r3, #4
 800d01e:	4618      	mov	r0, r3
 800d020:	f7fd ffc8 	bl	800afb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d024:	463b      	mov	r3, r7
 800d026:	4618      	mov	r0, r3
 800d028:	f7ff ff6a 	bl	800cf00 <prvSampleTimeNow>
 800d02c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2b09      	cmp	r3, #9
 800d032:	f200 8097 	bhi.w	800d164 <prvProcessReceivedCommands+0x1a0>
 800d036:	a201      	add	r2, pc, #4	@ (adr r2, 800d03c <prvProcessReceivedCommands+0x78>)
 800d038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d03c:	0800d065 	.word	0x0800d065
 800d040:	0800d065 	.word	0x0800d065
 800d044:	0800d065 	.word	0x0800d065
 800d048:	0800d0db 	.word	0x0800d0db
 800d04c:	0800d0ef 	.word	0x0800d0ef
 800d050:	0800d13b 	.word	0x0800d13b
 800d054:	0800d065 	.word	0x0800d065
 800d058:	0800d065 	.word	0x0800d065
 800d05c:	0800d0db 	.word	0x0800d0db
 800d060:	0800d0ef 	.word	0x0800d0ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d066:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d06a:	f043 0301 	orr.w	r3, r3, #1
 800d06e:	b2da      	uxtb	r2, r3
 800d070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d072:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d076:	68ba      	ldr	r2, [r7, #8]
 800d078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d07a:	699b      	ldr	r3, [r3, #24]
 800d07c:	18d1      	adds	r1, r2, r3
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d082:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d084:	f7ff ff5c 	bl	800cf40 <prvInsertTimerInActiveList>
 800d088:	4603      	mov	r3, r0
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d06c      	beq.n	800d168 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d090:	6a1b      	ldr	r3, [r3, #32]
 800d092:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d094:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d098:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d09c:	f003 0304 	and.w	r3, r3, #4
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d061      	beq.n	800d168 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d0a4:	68ba      	ldr	r2, [r7, #8]
 800d0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0a8:	699b      	ldr	r3, [r3, #24]
 800d0aa:	441a      	add	r2, r3
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	9300      	str	r3, [sp, #0]
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d0b6:	f7ff fe01 	bl	800ccbc <xTimerGenericCommand>
 800d0ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d0bc:	6a3b      	ldr	r3, [r7, #32]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d152      	bne.n	800d168 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c6:	f383 8811 	msr	BASEPRI, r3
 800d0ca:	f3bf 8f6f 	isb	sy
 800d0ce:	f3bf 8f4f 	dsb	sy
 800d0d2:	61bb      	str	r3, [r7, #24]
}
 800d0d4:	bf00      	nop
 800d0d6:	bf00      	nop
 800d0d8:	e7fd      	b.n	800d0d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d0da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d0e0:	f023 0301 	bic.w	r3, r3, #1
 800d0e4:	b2da      	uxtb	r2, r3
 800d0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d0ec:	e03d      	b.n	800d16a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d0f4:	f043 0301 	orr.w	r3, r3, #1
 800d0f8:	b2da      	uxtb	r2, r3
 800d0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d100:	68ba      	ldr	r2, [r7, #8]
 800d102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d104:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d108:	699b      	ldr	r3, [r3, #24]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d10b      	bne.n	800d126 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d112:	f383 8811 	msr	BASEPRI, r3
 800d116:	f3bf 8f6f 	isb	sy
 800d11a:	f3bf 8f4f 	dsb	sy
 800d11e:	617b      	str	r3, [r7, #20]
}
 800d120:	bf00      	nop
 800d122:	bf00      	nop
 800d124:	e7fd      	b.n	800d122 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d128:	699a      	ldr	r2, [r3, #24]
 800d12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d12c:	18d1      	adds	r1, r2, r3
 800d12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d134:	f7ff ff04 	bl	800cf40 <prvInsertTimerInActiveList>
					break;
 800d138:	e017      	b.n	800d16a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d13c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d140:	f003 0302 	and.w	r3, r3, #2
 800d144:	2b00      	cmp	r3, #0
 800d146:	d103      	bne.n	800d150 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d148:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d14a:	f000 fbe5 	bl	800d918 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d14e:	e00c      	b.n	800d16a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d152:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d156:	f023 0301 	bic.w	r3, r3, #1
 800d15a:	b2da      	uxtb	r2, r3
 800d15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d15e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d162:	e002      	b.n	800d16a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d164:	bf00      	nop
 800d166:	e000      	b.n	800d16a <prvProcessReceivedCommands+0x1a6>
					break;
 800d168:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d16a:	4b08      	ldr	r3, [pc, #32]	@ (800d18c <prvProcessReceivedCommands+0x1c8>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	1d39      	adds	r1, r7, #4
 800d170:	2200      	movs	r2, #0
 800d172:	4618      	mov	r0, r3
 800d174:	f7fe f9f2 	bl	800b55c <xQueueReceive>
 800d178:	4603      	mov	r3, r0
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	f47f af26 	bne.w	800cfcc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d180:	bf00      	nop
 800d182:	bf00      	nop
 800d184:	3730      	adds	r7, #48	@ 0x30
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	20001b60 	.word	0x20001b60

0800d190 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b088      	sub	sp, #32
 800d194:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d196:	e049      	b.n	800d22c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d198:	4b2e      	ldr	r3, [pc, #184]	@ (800d254 <prvSwitchTimerLists+0xc4>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	68db      	ldr	r3, [r3, #12]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1a2:	4b2c      	ldr	r3, [pc, #176]	@ (800d254 <prvSwitchTimerLists+0xc4>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	68db      	ldr	r3, [r3, #12]
 800d1a8:	68db      	ldr	r3, [r3, #12]
 800d1aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	3304      	adds	r3, #4
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7fd feff 	bl	800afb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	6a1b      	ldr	r3, [r3, #32]
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d1c4:	f003 0304 	and.w	r3, r3, #4
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d02f      	beq.n	800d22c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	699b      	ldr	r3, [r3, #24]
 800d1d0:	693a      	ldr	r2, [r7, #16]
 800d1d2:	4413      	add	r3, r2
 800d1d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d1d6:	68ba      	ldr	r2, [r7, #8]
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d90e      	bls.n	800d1fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	68ba      	ldr	r2, [r7, #8]
 800d1e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	68fa      	ldr	r2, [r7, #12]
 800d1e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d1ea:	4b1a      	ldr	r3, [pc, #104]	@ (800d254 <prvSwitchTimerLists+0xc4>)
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	3304      	adds	r3, #4
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	4610      	mov	r0, r2
 800d1f6:	f7fd fea4 	bl	800af42 <vListInsert>
 800d1fa:	e017      	b.n	800d22c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	9300      	str	r3, [sp, #0]
 800d200:	2300      	movs	r3, #0
 800d202:	693a      	ldr	r2, [r7, #16]
 800d204:	2100      	movs	r1, #0
 800d206:	68f8      	ldr	r0, [r7, #12]
 800d208:	f7ff fd58 	bl	800ccbc <xTimerGenericCommand>
 800d20c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d10b      	bne.n	800d22c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d218:	f383 8811 	msr	BASEPRI, r3
 800d21c:	f3bf 8f6f 	isb	sy
 800d220:	f3bf 8f4f 	dsb	sy
 800d224:	603b      	str	r3, [r7, #0]
}
 800d226:	bf00      	nop
 800d228:	bf00      	nop
 800d22a:	e7fd      	b.n	800d228 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d22c:	4b09      	ldr	r3, [pc, #36]	@ (800d254 <prvSwitchTimerLists+0xc4>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d1b0      	bne.n	800d198 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d236:	4b07      	ldr	r3, [pc, #28]	@ (800d254 <prvSwitchTimerLists+0xc4>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d23c:	4b06      	ldr	r3, [pc, #24]	@ (800d258 <prvSwitchTimerLists+0xc8>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a04      	ldr	r2, [pc, #16]	@ (800d254 <prvSwitchTimerLists+0xc4>)
 800d242:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d244:	4a04      	ldr	r2, [pc, #16]	@ (800d258 <prvSwitchTimerLists+0xc8>)
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	6013      	str	r3, [r2, #0]
}
 800d24a:	bf00      	nop
 800d24c:	3718      	adds	r7, #24
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}
 800d252:	bf00      	nop
 800d254:	20001b58 	.word	0x20001b58
 800d258:	20001b5c 	.word	0x20001b5c

0800d25c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d262:	f000 f969 	bl	800d538 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d266:	4b15      	ldr	r3, [pc, #84]	@ (800d2bc <prvCheckForValidListAndQueue+0x60>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d120      	bne.n	800d2b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d26e:	4814      	ldr	r0, [pc, #80]	@ (800d2c0 <prvCheckForValidListAndQueue+0x64>)
 800d270:	f7fd fe16 	bl	800aea0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d274:	4813      	ldr	r0, [pc, #76]	@ (800d2c4 <prvCheckForValidListAndQueue+0x68>)
 800d276:	f7fd fe13 	bl	800aea0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d27a:	4b13      	ldr	r3, [pc, #76]	@ (800d2c8 <prvCheckForValidListAndQueue+0x6c>)
 800d27c:	4a10      	ldr	r2, [pc, #64]	@ (800d2c0 <prvCheckForValidListAndQueue+0x64>)
 800d27e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d280:	4b12      	ldr	r3, [pc, #72]	@ (800d2cc <prvCheckForValidListAndQueue+0x70>)
 800d282:	4a10      	ldr	r2, [pc, #64]	@ (800d2c4 <prvCheckForValidListAndQueue+0x68>)
 800d284:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d286:	2300      	movs	r3, #0
 800d288:	9300      	str	r3, [sp, #0]
 800d28a:	4b11      	ldr	r3, [pc, #68]	@ (800d2d0 <prvCheckForValidListAndQueue+0x74>)
 800d28c:	4a11      	ldr	r2, [pc, #68]	@ (800d2d4 <prvCheckForValidListAndQueue+0x78>)
 800d28e:	2110      	movs	r1, #16
 800d290:	200a      	movs	r0, #10
 800d292:	f7fd ff23 	bl	800b0dc <xQueueGenericCreateStatic>
 800d296:	4603      	mov	r3, r0
 800d298:	4a08      	ldr	r2, [pc, #32]	@ (800d2bc <prvCheckForValidListAndQueue+0x60>)
 800d29a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d29c:	4b07      	ldr	r3, [pc, #28]	@ (800d2bc <prvCheckForValidListAndQueue+0x60>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d005      	beq.n	800d2b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d2a4:	4b05      	ldr	r3, [pc, #20]	@ (800d2bc <prvCheckForValidListAndQueue+0x60>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	490b      	ldr	r1, [pc, #44]	@ (800d2d8 <prvCheckForValidListAndQueue+0x7c>)
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7fe fb48 	bl	800b940 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d2b0:	f000 f974 	bl	800d59c <vPortExitCritical>
}
 800d2b4:	bf00      	nop
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	20001b60 	.word	0x20001b60
 800d2c0:	20001b30 	.word	0x20001b30
 800d2c4:	20001b44 	.word	0x20001b44
 800d2c8:	20001b58 	.word	0x20001b58
 800d2cc:	20001b5c 	.word	0x20001b5c
 800d2d0:	20001c0c 	.word	0x20001c0c
 800d2d4:	20001b6c 	.word	0x20001b6c
 800d2d8:	0800e5f0 	.word	0x0800e5f0

0800d2dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b085      	sub	sp, #20
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	60f8      	str	r0, [r7, #12]
 800d2e4:	60b9      	str	r1, [r7, #8]
 800d2e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	3b04      	subs	r3, #4
 800d2ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d2f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	3b04      	subs	r3, #4
 800d2fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	f023 0201 	bic.w	r2, r3, #1
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	3b04      	subs	r3, #4
 800d30a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d30c:	4a0c      	ldr	r2, [pc, #48]	@ (800d340 <pxPortInitialiseStack+0x64>)
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	3b14      	subs	r3, #20
 800d316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	3b04      	subs	r3, #4
 800d322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f06f 0202 	mvn.w	r2, #2
 800d32a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	3b20      	subs	r3, #32
 800d330:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d332:	68fb      	ldr	r3, [r7, #12]
}
 800d334:	4618      	mov	r0, r3
 800d336:	3714      	adds	r7, #20
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr
 800d340:	0800d345 	.word	0x0800d345

0800d344 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d34e:	4b13      	ldr	r3, [pc, #76]	@ (800d39c <prvTaskExitError+0x58>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d356:	d00b      	beq.n	800d370 <prvTaskExitError+0x2c>
	__asm volatile
 800d358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d35c:	f383 8811 	msr	BASEPRI, r3
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	60fb      	str	r3, [r7, #12]
}
 800d36a:	bf00      	nop
 800d36c:	bf00      	nop
 800d36e:	e7fd      	b.n	800d36c <prvTaskExitError+0x28>
	__asm volatile
 800d370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d374:	f383 8811 	msr	BASEPRI, r3
 800d378:	f3bf 8f6f 	isb	sy
 800d37c:	f3bf 8f4f 	dsb	sy
 800d380:	60bb      	str	r3, [r7, #8]
}
 800d382:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d384:	bf00      	nop
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d0fc      	beq.n	800d386 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d38c:	bf00      	nop
 800d38e:	bf00      	nop
 800d390:	3714      	adds	r7, #20
 800d392:	46bd      	mov	sp, r7
 800d394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d398:	4770      	bx	lr
 800d39a:	bf00      	nop
 800d39c:	2000006c 	.word	0x2000006c

0800d3a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d3a0:	4b07      	ldr	r3, [pc, #28]	@ (800d3c0 <pxCurrentTCBConst2>)
 800d3a2:	6819      	ldr	r1, [r3, #0]
 800d3a4:	6808      	ldr	r0, [r1, #0]
 800d3a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3aa:	f380 8809 	msr	PSP, r0
 800d3ae:	f3bf 8f6f 	isb	sy
 800d3b2:	f04f 0000 	mov.w	r0, #0
 800d3b6:	f380 8811 	msr	BASEPRI, r0
 800d3ba:	4770      	bx	lr
 800d3bc:	f3af 8000 	nop.w

0800d3c0 <pxCurrentTCBConst2>:
 800d3c0:	20001630 	.word	0x20001630
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d3c4:	bf00      	nop
 800d3c6:	bf00      	nop

0800d3c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d3c8:	4808      	ldr	r0, [pc, #32]	@ (800d3ec <prvPortStartFirstTask+0x24>)
 800d3ca:	6800      	ldr	r0, [r0, #0]
 800d3cc:	6800      	ldr	r0, [r0, #0]
 800d3ce:	f380 8808 	msr	MSP, r0
 800d3d2:	f04f 0000 	mov.w	r0, #0
 800d3d6:	f380 8814 	msr	CONTROL, r0
 800d3da:	b662      	cpsie	i
 800d3dc:	b661      	cpsie	f
 800d3de:	f3bf 8f4f 	dsb	sy
 800d3e2:	f3bf 8f6f 	isb	sy
 800d3e6:	df00      	svc	0
 800d3e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d3ea:	bf00      	nop
 800d3ec:	e000ed08 	.word	0xe000ed08

0800d3f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b086      	sub	sp, #24
 800d3f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d3f6:	4b47      	ldr	r3, [pc, #284]	@ (800d514 <xPortStartScheduler+0x124>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4a47      	ldr	r2, [pc, #284]	@ (800d518 <xPortStartScheduler+0x128>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d10b      	bne.n	800d418 <xPortStartScheduler+0x28>
	__asm volatile
 800d400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d404:	f383 8811 	msr	BASEPRI, r3
 800d408:	f3bf 8f6f 	isb	sy
 800d40c:	f3bf 8f4f 	dsb	sy
 800d410:	613b      	str	r3, [r7, #16]
}
 800d412:	bf00      	nop
 800d414:	bf00      	nop
 800d416:	e7fd      	b.n	800d414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d418:	4b3e      	ldr	r3, [pc, #248]	@ (800d514 <xPortStartScheduler+0x124>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	4a3f      	ldr	r2, [pc, #252]	@ (800d51c <xPortStartScheduler+0x12c>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d10b      	bne.n	800d43a <xPortStartScheduler+0x4a>
	__asm volatile
 800d422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d426:	f383 8811 	msr	BASEPRI, r3
 800d42a:	f3bf 8f6f 	isb	sy
 800d42e:	f3bf 8f4f 	dsb	sy
 800d432:	60fb      	str	r3, [r7, #12]
}
 800d434:	bf00      	nop
 800d436:	bf00      	nop
 800d438:	e7fd      	b.n	800d436 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d43a:	4b39      	ldr	r3, [pc, #228]	@ (800d520 <xPortStartScheduler+0x130>)
 800d43c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	b2db      	uxtb	r3, r3
 800d444:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	22ff      	movs	r2, #255	@ 0xff
 800d44a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	b2db      	uxtb	r3, r3
 800d452:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d454:	78fb      	ldrb	r3, [r7, #3]
 800d456:	b2db      	uxtb	r3, r3
 800d458:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d45c:	b2da      	uxtb	r2, r3
 800d45e:	4b31      	ldr	r3, [pc, #196]	@ (800d524 <xPortStartScheduler+0x134>)
 800d460:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d462:	4b31      	ldr	r3, [pc, #196]	@ (800d528 <xPortStartScheduler+0x138>)
 800d464:	2207      	movs	r2, #7
 800d466:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d468:	e009      	b.n	800d47e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d46a:	4b2f      	ldr	r3, [pc, #188]	@ (800d528 <xPortStartScheduler+0x138>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	3b01      	subs	r3, #1
 800d470:	4a2d      	ldr	r2, [pc, #180]	@ (800d528 <xPortStartScheduler+0x138>)
 800d472:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d474:	78fb      	ldrb	r3, [r7, #3]
 800d476:	b2db      	uxtb	r3, r3
 800d478:	005b      	lsls	r3, r3, #1
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d47e:	78fb      	ldrb	r3, [r7, #3]
 800d480:	b2db      	uxtb	r3, r3
 800d482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d486:	2b80      	cmp	r3, #128	@ 0x80
 800d488:	d0ef      	beq.n	800d46a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d48a:	4b27      	ldr	r3, [pc, #156]	@ (800d528 <xPortStartScheduler+0x138>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f1c3 0307 	rsb	r3, r3, #7
 800d492:	2b04      	cmp	r3, #4
 800d494:	d00b      	beq.n	800d4ae <xPortStartScheduler+0xbe>
	__asm volatile
 800d496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d49a:	f383 8811 	msr	BASEPRI, r3
 800d49e:	f3bf 8f6f 	isb	sy
 800d4a2:	f3bf 8f4f 	dsb	sy
 800d4a6:	60bb      	str	r3, [r7, #8]
}
 800d4a8:	bf00      	nop
 800d4aa:	bf00      	nop
 800d4ac:	e7fd      	b.n	800d4aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d4ae:	4b1e      	ldr	r3, [pc, #120]	@ (800d528 <xPortStartScheduler+0x138>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	021b      	lsls	r3, r3, #8
 800d4b4:	4a1c      	ldr	r2, [pc, #112]	@ (800d528 <xPortStartScheduler+0x138>)
 800d4b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d4b8:	4b1b      	ldr	r3, [pc, #108]	@ (800d528 <xPortStartScheduler+0x138>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d4c0:	4a19      	ldr	r2, [pc, #100]	@ (800d528 <xPortStartScheduler+0x138>)
 800d4c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	b2da      	uxtb	r2, r3
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d4cc:	4b17      	ldr	r3, [pc, #92]	@ (800d52c <xPortStartScheduler+0x13c>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a16      	ldr	r2, [pc, #88]	@ (800d52c <xPortStartScheduler+0x13c>)
 800d4d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d4d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d4d8:	4b14      	ldr	r3, [pc, #80]	@ (800d52c <xPortStartScheduler+0x13c>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	4a13      	ldr	r2, [pc, #76]	@ (800d52c <xPortStartScheduler+0x13c>)
 800d4de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d4e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d4e4:	f000 f8da 	bl	800d69c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d4e8:	4b11      	ldr	r3, [pc, #68]	@ (800d530 <xPortStartScheduler+0x140>)
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d4ee:	f000 f8f9 	bl	800d6e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d4f2:	4b10      	ldr	r3, [pc, #64]	@ (800d534 <xPortStartScheduler+0x144>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4a0f      	ldr	r2, [pc, #60]	@ (800d534 <xPortStartScheduler+0x144>)
 800d4f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d4fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d4fe:	f7ff ff63 	bl	800d3c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d502:	f7fe ff4f 	bl	800c3a4 <vTaskSwitchContext>
	prvTaskExitError();
 800d506:	f7ff ff1d 	bl	800d344 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d50a:	2300      	movs	r3, #0
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3718      	adds	r7, #24
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	e000ed00 	.word	0xe000ed00
 800d518:	410fc271 	.word	0x410fc271
 800d51c:	410fc270 	.word	0x410fc270
 800d520:	e000e400 	.word	0xe000e400
 800d524:	20001c5c 	.word	0x20001c5c
 800d528:	20001c60 	.word	0x20001c60
 800d52c:	e000ed20 	.word	0xe000ed20
 800d530:	2000006c 	.word	0x2000006c
 800d534:	e000ef34 	.word	0xe000ef34

0800d538 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d538:	b480      	push	{r7}
 800d53a:	b083      	sub	sp, #12
 800d53c:	af00      	add	r7, sp, #0
	__asm volatile
 800d53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d542:	f383 8811 	msr	BASEPRI, r3
 800d546:	f3bf 8f6f 	isb	sy
 800d54a:	f3bf 8f4f 	dsb	sy
 800d54e:	607b      	str	r3, [r7, #4]
}
 800d550:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d552:	4b10      	ldr	r3, [pc, #64]	@ (800d594 <vPortEnterCritical+0x5c>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	3301      	adds	r3, #1
 800d558:	4a0e      	ldr	r2, [pc, #56]	@ (800d594 <vPortEnterCritical+0x5c>)
 800d55a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d55c:	4b0d      	ldr	r3, [pc, #52]	@ (800d594 <vPortEnterCritical+0x5c>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	2b01      	cmp	r3, #1
 800d562:	d110      	bne.n	800d586 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d564:	4b0c      	ldr	r3, [pc, #48]	@ (800d598 <vPortEnterCritical+0x60>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	b2db      	uxtb	r3, r3
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d00b      	beq.n	800d586 <vPortEnterCritical+0x4e>
	__asm volatile
 800d56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d572:	f383 8811 	msr	BASEPRI, r3
 800d576:	f3bf 8f6f 	isb	sy
 800d57a:	f3bf 8f4f 	dsb	sy
 800d57e:	603b      	str	r3, [r7, #0]
}
 800d580:	bf00      	nop
 800d582:	bf00      	nop
 800d584:	e7fd      	b.n	800d582 <vPortEnterCritical+0x4a>
	}
}
 800d586:	bf00      	nop
 800d588:	370c      	adds	r7, #12
 800d58a:	46bd      	mov	sp, r7
 800d58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d590:	4770      	bx	lr
 800d592:	bf00      	nop
 800d594:	2000006c 	.word	0x2000006c
 800d598:	e000ed04 	.word	0xe000ed04

0800d59c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d5a2:	4b12      	ldr	r3, [pc, #72]	@ (800d5ec <vPortExitCritical+0x50>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d10b      	bne.n	800d5c2 <vPortExitCritical+0x26>
	__asm volatile
 800d5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ae:	f383 8811 	msr	BASEPRI, r3
 800d5b2:	f3bf 8f6f 	isb	sy
 800d5b6:	f3bf 8f4f 	dsb	sy
 800d5ba:	607b      	str	r3, [r7, #4]
}
 800d5bc:	bf00      	nop
 800d5be:	bf00      	nop
 800d5c0:	e7fd      	b.n	800d5be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d5c2:	4b0a      	ldr	r3, [pc, #40]	@ (800d5ec <vPortExitCritical+0x50>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	3b01      	subs	r3, #1
 800d5c8:	4a08      	ldr	r2, [pc, #32]	@ (800d5ec <vPortExitCritical+0x50>)
 800d5ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d5cc:	4b07      	ldr	r3, [pc, #28]	@ (800d5ec <vPortExitCritical+0x50>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d105      	bne.n	800d5e0 <vPortExitCritical+0x44>
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	f383 8811 	msr	BASEPRI, r3
}
 800d5de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d5e0:	bf00      	nop
 800d5e2:	370c      	adds	r7, #12
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr
 800d5ec:	2000006c 	.word	0x2000006c

0800d5f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d5f0:	f3ef 8009 	mrs	r0, PSP
 800d5f4:	f3bf 8f6f 	isb	sy
 800d5f8:	4b15      	ldr	r3, [pc, #84]	@ (800d650 <pxCurrentTCBConst>)
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	f01e 0f10 	tst.w	lr, #16
 800d600:	bf08      	it	eq
 800d602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d60a:	6010      	str	r0, [r2, #0]
 800d60c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d610:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d614:	f380 8811 	msr	BASEPRI, r0
 800d618:	f3bf 8f4f 	dsb	sy
 800d61c:	f3bf 8f6f 	isb	sy
 800d620:	f7fe fec0 	bl	800c3a4 <vTaskSwitchContext>
 800d624:	f04f 0000 	mov.w	r0, #0
 800d628:	f380 8811 	msr	BASEPRI, r0
 800d62c:	bc09      	pop	{r0, r3}
 800d62e:	6819      	ldr	r1, [r3, #0]
 800d630:	6808      	ldr	r0, [r1, #0]
 800d632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d636:	f01e 0f10 	tst.w	lr, #16
 800d63a:	bf08      	it	eq
 800d63c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d640:	f380 8809 	msr	PSP, r0
 800d644:	f3bf 8f6f 	isb	sy
 800d648:	4770      	bx	lr
 800d64a:	bf00      	nop
 800d64c:	f3af 8000 	nop.w

0800d650 <pxCurrentTCBConst>:
 800d650:	20001630 	.word	0x20001630
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d654:	bf00      	nop
 800d656:	bf00      	nop

0800d658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
	__asm volatile
 800d65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d662:	f383 8811 	msr	BASEPRI, r3
 800d666:	f3bf 8f6f 	isb	sy
 800d66a:	f3bf 8f4f 	dsb	sy
 800d66e:	607b      	str	r3, [r7, #4]
}
 800d670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d672:	f7fe fddd 	bl	800c230 <xTaskIncrementTick>
 800d676:	4603      	mov	r3, r0
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d003      	beq.n	800d684 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d67c:	4b06      	ldr	r3, [pc, #24]	@ (800d698 <xPortSysTickHandler+0x40>)
 800d67e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d682:	601a      	str	r2, [r3, #0]
 800d684:	2300      	movs	r3, #0
 800d686:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	f383 8811 	msr	BASEPRI, r3
}
 800d68e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d690:	bf00      	nop
 800d692:	3708      	adds	r7, #8
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}
 800d698:	e000ed04 	.word	0xe000ed04

0800d69c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d69c:	b480      	push	{r7}
 800d69e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d6a0:	4b0b      	ldr	r3, [pc, #44]	@ (800d6d0 <vPortSetupTimerInterrupt+0x34>)
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d6a6:	4b0b      	ldr	r3, [pc, #44]	@ (800d6d4 <vPortSetupTimerInterrupt+0x38>)
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d6ac:	4b0a      	ldr	r3, [pc, #40]	@ (800d6d8 <vPortSetupTimerInterrupt+0x3c>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a0a      	ldr	r2, [pc, #40]	@ (800d6dc <vPortSetupTimerInterrupt+0x40>)
 800d6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d6b6:	099b      	lsrs	r3, r3, #6
 800d6b8:	4a09      	ldr	r2, [pc, #36]	@ (800d6e0 <vPortSetupTimerInterrupt+0x44>)
 800d6ba:	3b01      	subs	r3, #1
 800d6bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d6be:	4b04      	ldr	r3, [pc, #16]	@ (800d6d0 <vPortSetupTimerInterrupt+0x34>)
 800d6c0:	2207      	movs	r2, #7
 800d6c2:	601a      	str	r2, [r3, #0]
}
 800d6c4:	bf00      	nop
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6cc:	4770      	bx	lr
 800d6ce:	bf00      	nop
 800d6d0:	e000e010 	.word	0xe000e010
 800d6d4:	e000e018 	.word	0xe000e018
 800d6d8:	20000060 	.word	0x20000060
 800d6dc:	10624dd3 	.word	0x10624dd3
 800d6e0:	e000e014 	.word	0xe000e014

0800d6e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d6e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d6f4 <vPortEnableVFP+0x10>
 800d6e8:	6801      	ldr	r1, [r0, #0]
 800d6ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d6ee:	6001      	str	r1, [r0, #0]
 800d6f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d6f2:	bf00      	nop
 800d6f4:	e000ed88 	.word	0xe000ed88

0800d6f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d6fe:	f3ef 8305 	mrs	r3, IPSR
 800d702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2b0f      	cmp	r3, #15
 800d708:	d915      	bls.n	800d736 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d70a:	4a18      	ldr	r2, [pc, #96]	@ (800d76c <vPortValidateInterruptPriority+0x74>)
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	4413      	add	r3, r2
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d714:	4b16      	ldr	r3, [pc, #88]	@ (800d770 <vPortValidateInterruptPriority+0x78>)
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	7afa      	ldrb	r2, [r7, #11]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d20b      	bcs.n	800d736 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d722:	f383 8811 	msr	BASEPRI, r3
 800d726:	f3bf 8f6f 	isb	sy
 800d72a:	f3bf 8f4f 	dsb	sy
 800d72e:	607b      	str	r3, [r7, #4]
}
 800d730:	bf00      	nop
 800d732:	bf00      	nop
 800d734:	e7fd      	b.n	800d732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d736:	4b0f      	ldr	r3, [pc, #60]	@ (800d774 <vPortValidateInterruptPriority+0x7c>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d73e:	4b0e      	ldr	r3, [pc, #56]	@ (800d778 <vPortValidateInterruptPriority+0x80>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	429a      	cmp	r2, r3
 800d744:	d90b      	bls.n	800d75e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d74a:	f383 8811 	msr	BASEPRI, r3
 800d74e:	f3bf 8f6f 	isb	sy
 800d752:	f3bf 8f4f 	dsb	sy
 800d756:	603b      	str	r3, [r7, #0]
}
 800d758:	bf00      	nop
 800d75a:	bf00      	nop
 800d75c:	e7fd      	b.n	800d75a <vPortValidateInterruptPriority+0x62>
	}
 800d75e:	bf00      	nop
 800d760:	3714      	adds	r7, #20
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr
 800d76a:	bf00      	nop
 800d76c:	e000e3f0 	.word	0xe000e3f0
 800d770:	20001c5c 	.word	0x20001c5c
 800d774:	e000ed0c 	.word	0xe000ed0c
 800d778:	20001c60 	.word	0x20001c60

0800d77c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b08a      	sub	sp, #40	@ 0x28
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d784:	2300      	movs	r3, #0
 800d786:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d788:	f7fe fb9c 	bl	800bec4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d78c:	4b5c      	ldr	r3, [pc, #368]	@ (800d900 <pvPortMalloc+0x184>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d101      	bne.n	800d798 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d794:	f000 f924 	bl	800d9e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d798:	4b5a      	ldr	r3, [pc, #360]	@ (800d904 <pvPortMalloc+0x188>)
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	4013      	ands	r3, r2
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	f040 8095 	bne.w	800d8d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d01e      	beq.n	800d7ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d7ac:	2208      	movs	r2, #8
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	4413      	add	r3, r2
 800d7b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f003 0307 	and.w	r3, r3, #7
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d015      	beq.n	800d7ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f023 0307 	bic.w	r3, r3, #7
 800d7c4:	3308      	adds	r3, #8
 800d7c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f003 0307 	and.w	r3, r3, #7
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d00b      	beq.n	800d7ea <pvPortMalloc+0x6e>
	__asm volatile
 800d7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d6:	f383 8811 	msr	BASEPRI, r3
 800d7da:	f3bf 8f6f 	isb	sy
 800d7de:	f3bf 8f4f 	dsb	sy
 800d7e2:	617b      	str	r3, [r7, #20]
}
 800d7e4:	bf00      	nop
 800d7e6:	bf00      	nop
 800d7e8:	e7fd      	b.n	800d7e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d06f      	beq.n	800d8d0 <pvPortMalloc+0x154>
 800d7f0:	4b45      	ldr	r3, [pc, #276]	@ (800d908 <pvPortMalloc+0x18c>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d86a      	bhi.n	800d8d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d7fa:	4b44      	ldr	r3, [pc, #272]	@ (800d90c <pvPortMalloc+0x190>)
 800d7fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d7fe:	4b43      	ldr	r3, [pc, #268]	@ (800d90c <pvPortMalloc+0x190>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d804:	e004      	b.n	800d810 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d808:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d812:	685b      	ldr	r3, [r3, #4]
 800d814:	687a      	ldr	r2, [r7, #4]
 800d816:	429a      	cmp	r2, r3
 800d818:	d903      	bls.n	800d822 <pvPortMalloc+0xa6>
 800d81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d1f1      	bne.n	800d806 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d822:	4b37      	ldr	r3, [pc, #220]	@ (800d900 <pvPortMalloc+0x184>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d828:	429a      	cmp	r2, r3
 800d82a:	d051      	beq.n	800d8d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d82c:	6a3b      	ldr	r3, [r7, #32]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	2208      	movs	r2, #8
 800d832:	4413      	add	r3, r2
 800d834:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	6a3b      	ldr	r3, [r7, #32]
 800d83c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d840:	685a      	ldr	r2, [r3, #4]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	1ad2      	subs	r2, r2, r3
 800d846:	2308      	movs	r3, #8
 800d848:	005b      	lsls	r3, r3, #1
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d920      	bls.n	800d890 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d84e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	4413      	add	r3, r2
 800d854:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d856:	69bb      	ldr	r3, [r7, #24]
 800d858:	f003 0307 	and.w	r3, r3, #7
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d00b      	beq.n	800d878 <pvPortMalloc+0xfc>
	__asm volatile
 800d860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d864:	f383 8811 	msr	BASEPRI, r3
 800d868:	f3bf 8f6f 	isb	sy
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	613b      	str	r3, [r7, #16]
}
 800d872:	bf00      	nop
 800d874:	bf00      	nop
 800d876:	e7fd      	b.n	800d874 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d87a:	685a      	ldr	r2, [r3, #4]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	1ad2      	subs	r2, r2, r3
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d88a:	69b8      	ldr	r0, [r7, #24]
 800d88c:	f000 f90a 	bl	800daa4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d890:	4b1d      	ldr	r3, [pc, #116]	@ (800d908 <pvPortMalloc+0x18c>)
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	1ad3      	subs	r3, r2, r3
 800d89a:	4a1b      	ldr	r2, [pc, #108]	@ (800d908 <pvPortMalloc+0x18c>)
 800d89c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d89e:	4b1a      	ldr	r3, [pc, #104]	@ (800d908 <pvPortMalloc+0x18c>)
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	4b1b      	ldr	r3, [pc, #108]	@ (800d910 <pvPortMalloc+0x194>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d203      	bcs.n	800d8b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d8aa:	4b17      	ldr	r3, [pc, #92]	@ (800d908 <pvPortMalloc+0x18c>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4a18      	ldr	r2, [pc, #96]	@ (800d910 <pvPortMalloc+0x194>)
 800d8b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b4:	685a      	ldr	r2, [r3, #4]
 800d8b6:	4b13      	ldr	r3, [pc, #76]	@ (800d904 <pvPortMalloc+0x188>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	431a      	orrs	r2, r3
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d8c6:	4b13      	ldr	r3, [pc, #76]	@ (800d914 <pvPortMalloc+0x198>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	4a11      	ldr	r2, [pc, #68]	@ (800d914 <pvPortMalloc+0x198>)
 800d8ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d8d0:	f7fe fb06 	bl	800bee0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	f003 0307 	and.w	r3, r3, #7
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d00b      	beq.n	800d8f6 <pvPortMalloc+0x17a>
	__asm volatile
 800d8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8e2:	f383 8811 	msr	BASEPRI, r3
 800d8e6:	f3bf 8f6f 	isb	sy
 800d8ea:	f3bf 8f4f 	dsb	sy
 800d8ee:	60fb      	str	r3, [r7, #12]
}
 800d8f0:	bf00      	nop
 800d8f2:	bf00      	nop
 800d8f4:	e7fd      	b.n	800d8f2 <pvPortMalloc+0x176>
	return pvReturn;
 800d8f6:	69fb      	ldr	r3, [r7, #28]
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3728      	adds	r7, #40	@ 0x28
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}
 800d900:	2000586c 	.word	0x2000586c
 800d904:	20005880 	.word	0x20005880
 800d908:	20005870 	.word	0x20005870
 800d90c:	20005864 	.word	0x20005864
 800d910:	20005874 	.word	0x20005874
 800d914:	20005878 	.word	0x20005878

0800d918 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b086      	sub	sp, #24
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d04f      	beq.n	800d9ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d92a:	2308      	movs	r3, #8
 800d92c:	425b      	negs	r3, r3
 800d92e:	697a      	ldr	r2, [r7, #20]
 800d930:	4413      	add	r3, r2
 800d932:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	685a      	ldr	r2, [r3, #4]
 800d93c:	4b25      	ldr	r3, [pc, #148]	@ (800d9d4 <vPortFree+0xbc>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4013      	ands	r3, r2
 800d942:	2b00      	cmp	r3, #0
 800d944:	d10b      	bne.n	800d95e <vPortFree+0x46>
	__asm volatile
 800d946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d94a:	f383 8811 	msr	BASEPRI, r3
 800d94e:	f3bf 8f6f 	isb	sy
 800d952:	f3bf 8f4f 	dsb	sy
 800d956:	60fb      	str	r3, [r7, #12]
}
 800d958:	bf00      	nop
 800d95a:	bf00      	nop
 800d95c:	e7fd      	b.n	800d95a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d00b      	beq.n	800d97e <vPortFree+0x66>
	__asm volatile
 800d966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d96a:	f383 8811 	msr	BASEPRI, r3
 800d96e:	f3bf 8f6f 	isb	sy
 800d972:	f3bf 8f4f 	dsb	sy
 800d976:	60bb      	str	r3, [r7, #8]
}
 800d978:	bf00      	nop
 800d97a:	bf00      	nop
 800d97c:	e7fd      	b.n	800d97a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	685a      	ldr	r2, [r3, #4]
 800d982:	4b14      	ldr	r3, [pc, #80]	@ (800d9d4 <vPortFree+0xbc>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	4013      	ands	r3, r2
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d01e      	beq.n	800d9ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d11a      	bne.n	800d9ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	685a      	ldr	r2, [r3, #4]
 800d998:	4b0e      	ldr	r3, [pc, #56]	@ (800d9d4 <vPortFree+0xbc>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	43db      	mvns	r3, r3
 800d99e:	401a      	ands	r2, r3
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d9a4:	f7fe fa8e 	bl	800bec4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	685a      	ldr	r2, [r3, #4]
 800d9ac:	4b0a      	ldr	r3, [pc, #40]	@ (800d9d8 <vPortFree+0xc0>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4413      	add	r3, r2
 800d9b2:	4a09      	ldr	r2, [pc, #36]	@ (800d9d8 <vPortFree+0xc0>)
 800d9b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d9b6:	6938      	ldr	r0, [r7, #16]
 800d9b8:	f000 f874 	bl	800daa4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d9bc:	4b07      	ldr	r3, [pc, #28]	@ (800d9dc <vPortFree+0xc4>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	4a06      	ldr	r2, [pc, #24]	@ (800d9dc <vPortFree+0xc4>)
 800d9c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d9c6:	f7fe fa8b 	bl	800bee0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d9ca:	bf00      	nop
 800d9cc:	3718      	adds	r7, #24
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	20005880 	.word	0x20005880
 800d9d8:	20005870 	.word	0x20005870
 800d9dc:	2000587c 	.word	0x2000587c

0800d9e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b085      	sub	sp, #20
 800d9e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d9e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d9ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d9ec:	4b27      	ldr	r3, [pc, #156]	@ (800da8c <prvHeapInit+0xac>)
 800d9ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f003 0307 	and.w	r3, r3, #7
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d00c      	beq.n	800da14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	3307      	adds	r3, #7
 800d9fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f023 0307 	bic.w	r3, r3, #7
 800da06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800da08:	68ba      	ldr	r2, [r7, #8]
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	1ad3      	subs	r3, r2, r3
 800da0e:	4a1f      	ldr	r2, [pc, #124]	@ (800da8c <prvHeapInit+0xac>)
 800da10:	4413      	add	r3, r2
 800da12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800da18:	4a1d      	ldr	r2, [pc, #116]	@ (800da90 <prvHeapInit+0xb0>)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800da1e:	4b1c      	ldr	r3, [pc, #112]	@ (800da90 <prvHeapInit+0xb0>)
 800da20:	2200      	movs	r2, #0
 800da22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	68ba      	ldr	r2, [r7, #8]
 800da28:	4413      	add	r3, r2
 800da2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800da2c:	2208      	movs	r2, #8
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	1a9b      	subs	r3, r3, r2
 800da32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	f023 0307 	bic.w	r3, r3, #7
 800da3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	4a15      	ldr	r2, [pc, #84]	@ (800da94 <prvHeapInit+0xb4>)
 800da40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800da42:	4b14      	ldr	r3, [pc, #80]	@ (800da94 <prvHeapInit+0xb4>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	2200      	movs	r2, #0
 800da48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800da4a:	4b12      	ldr	r3, [pc, #72]	@ (800da94 <prvHeapInit+0xb4>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	2200      	movs	r2, #0
 800da50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	68fa      	ldr	r2, [r7, #12]
 800da5a:	1ad2      	subs	r2, r2, r3
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800da60:	4b0c      	ldr	r3, [pc, #48]	@ (800da94 <prvHeapInit+0xb4>)
 800da62:	681a      	ldr	r2, [r3, #0]
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	4a0a      	ldr	r2, [pc, #40]	@ (800da98 <prvHeapInit+0xb8>)
 800da6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	685b      	ldr	r3, [r3, #4]
 800da74:	4a09      	ldr	r2, [pc, #36]	@ (800da9c <prvHeapInit+0xbc>)
 800da76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800da78:	4b09      	ldr	r3, [pc, #36]	@ (800daa0 <prvHeapInit+0xc0>)
 800da7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800da7e:	601a      	str	r2, [r3, #0]
}
 800da80:	bf00      	nop
 800da82:	3714      	adds	r7, #20
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr
 800da8c:	20001c64 	.word	0x20001c64
 800da90:	20005864 	.word	0x20005864
 800da94:	2000586c 	.word	0x2000586c
 800da98:	20005874 	.word	0x20005874
 800da9c:	20005870 	.word	0x20005870
 800daa0:	20005880 	.word	0x20005880

0800daa4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800daa4:	b480      	push	{r7}
 800daa6:	b085      	sub	sp, #20
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800daac:	4b28      	ldr	r3, [pc, #160]	@ (800db50 <prvInsertBlockIntoFreeList+0xac>)
 800daae:	60fb      	str	r3, [r7, #12]
 800dab0:	e002      	b.n	800dab8 <prvInsertBlockIntoFreeList+0x14>
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	60fb      	str	r3, [r7, #12]
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d8f7      	bhi.n	800dab2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	68ba      	ldr	r2, [r7, #8]
 800dacc:	4413      	add	r3, r2
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d108      	bne.n	800dae6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	685a      	ldr	r2, [r3, #4]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	441a      	add	r2, r3
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	68ba      	ldr	r2, [r7, #8]
 800daf0:	441a      	add	r2, r3
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d118      	bne.n	800db2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681a      	ldr	r2, [r3, #0]
 800dafe:	4b15      	ldr	r3, [pc, #84]	@ (800db54 <prvInsertBlockIntoFreeList+0xb0>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	429a      	cmp	r2, r3
 800db04:	d00d      	beq.n	800db22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	685a      	ldr	r2, [r3, #4]
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	441a      	add	r2, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	601a      	str	r2, [r3, #0]
 800db20:	e008      	b.n	800db34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800db22:	4b0c      	ldr	r3, [pc, #48]	@ (800db54 <prvInsertBlockIntoFreeList+0xb0>)
 800db24:	681a      	ldr	r2, [r3, #0]
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	601a      	str	r2, [r3, #0]
 800db2a:	e003      	b.n	800db34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800db34:	68fa      	ldr	r2, [r7, #12]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	429a      	cmp	r2, r3
 800db3a:	d002      	beq.n	800db42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	687a      	ldr	r2, [r7, #4]
 800db40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db42:	bf00      	nop
 800db44:	3714      	adds	r7, #20
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr
 800db4e:	bf00      	nop
 800db50:	20005864 	.word	0x20005864
 800db54:	2000586c 	.word	0x2000586c

0800db58 <_vsiprintf_r>:
 800db58:	b500      	push	{lr}
 800db5a:	b09b      	sub	sp, #108	@ 0x6c
 800db5c:	9100      	str	r1, [sp, #0]
 800db5e:	9104      	str	r1, [sp, #16]
 800db60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800db64:	9105      	str	r1, [sp, #20]
 800db66:	9102      	str	r1, [sp, #8]
 800db68:	4905      	ldr	r1, [pc, #20]	@ (800db80 <_vsiprintf_r+0x28>)
 800db6a:	9103      	str	r1, [sp, #12]
 800db6c:	4669      	mov	r1, sp
 800db6e:	f000 f951 	bl	800de14 <_svfiprintf_r>
 800db72:	9b00      	ldr	r3, [sp, #0]
 800db74:	2200      	movs	r2, #0
 800db76:	701a      	strb	r2, [r3, #0]
 800db78:	b01b      	add	sp, #108	@ 0x6c
 800db7a:	f85d fb04 	ldr.w	pc, [sp], #4
 800db7e:	bf00      	nop
 800db80:	ffff0208 	.word	0xffff0208

0800db84 <vsiprintf>:
 800db84:	4613      	mov	r3, r2
 800db86:	460a      	mov	r2, r1
 800db88:	4601      	mov	r1, r0
 800db8a:	4802      	ldr	r0, [pc, #8]	@ (800db94 <vsiprintf+0x10>)
 800db8c:	6800      	ldr	r0, [r0, #0]
 800db8e:	f7ff bfe3 	b.w	800db58 <_vsiprintf_r>
 800db92:	bf00      	nop
 800db94:	20000070 	.word	0x20000070

0800db98 <memset>:
 800db98:	4402      	add	r2, r0
 800db9a:	4603      	mov	r3, r0
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d100      	bne.n	800dba2 <memset+0xa>
 800dba0:	4770      	bx	lr
 800dba2:	f803 1b01 	strb.w	r1, [r3], #1
 800dba6:	e7f9      	b.n	800db9c <memset+0x4>

0800dba8 <_reclaim_reent>:
 800dba8:	4b29      	ldr	r3, [pc, #164]	@ (800dc50 <_reclaim_reent+0xa8>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4283      	cmp	r3, r0
 800dbae:	b570      	push	{r4, r5, r6, lr}
 800dbb0:	4604      	mov	r4, r0
 800dbb2:	d04b      	beq.n	800dc4c <_reclaim_reent+0xa4>
 800dbb4:	69c3      	ldr	r3, [r0, #28]
 800dbb6:	b1ab      	cbz	r3, 800dbe4 <_reclaim_reent+0x3c>
 800dbb8:	68db      	ldr	r3, [r3, #12]
 800dbba:	b16b      	cbz	r3, 800dbd8 <_reclaim_reent+0x30>
 800dbbc:	2500      	movs	r5, #0
 800dbbe:	69e3      	ldr	r3, [r4, #28]
 800dbc0:	68db      	ldr	r3, [r3, #12]
 800dbc2:	5959      	ldr	r1, [r3, r5]
 800dbc4:	2900      	cmp	r1, #0
 800dbc6:	d13b      	bne.n	800dc40 <_reclaim_reent+0x98>
 800dbc8:	3504      	adds	r5, #4
 800dbca:	2d80      	cmp	r5, #128	@ 0x80
 800dbcc:	d1f7      	bne.n	800dbbe <_reclaim_reent+0x16>
 800dbce:	69e3      	ldr	r3, [r4, #28]
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	68d9      	ldr	r1, [r3, #12]
 800dbd4:	f000 f878 	bl	800dcc8 <_free_r>
 800dbd8:	69e3      	ldr	r3, [r4, #28]
 800dbda:	6819      	ldr	r1, [r3, #0]
 800dbdc:	b111      	cbz	r1, 800dbe4 <_reclaim_reent+0x3c>
 800dbde:	4620      	mov	r0, r4
 800dbe0:	f000 f872 	bl	800dcc8 <_free_r>
 800dbe4:	6961      	ldr	r1, [r4, #20]
 800dbe6:	b111      	cbz	r1, 800dbee <_reclaim_reent+0x46>
 800dbe8:	4620      	mov	r0, r4
 800dbea:	f000 f86d 	bl	800dcc8 <_free_r>
 800dbee:	69e1      	ldr	r1, [r4, #28]
 800dbf0:	b111      	cbz	r1, 800dbf8 <_reclaim_reent+0x50>
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	f000 f868 	bl	800dcc8 <_free_r>
 800dbf8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dbfa:	b111      	cbz	r1, 800dc02 <_reclaim_reent+0x5a>
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	f000 f863 	bl	800dcc8 <_free_r>
 800dc02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc04:	b111      	cbz	r1, 800dc0c <_reclaim_reent+0x64>
 800dc06:	4620      	mov	r0, r4
 800dc08:	f000 f85e 	bl	800dcc8 <_free_r>
 800dc0c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800dc0e:	b111      	cbz	r1, 800dc16 <_reclaim_reent+0x6e>
 800dc10:	4620      	mov	r0, r4
 800dc12:	f000 f859 	bl	800dcc8 <_free_r>
 800dc16:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800dc18:	b111      	cbz	r1, 800dc20 <_reclaim_reent+0x78>
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	f000 f854 	bl	800dcc8 <_free_r>
 800dc20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800dc22:	b111      	cbz	r1, 800dc2a <_reclaim_reent+0x82>
 800dc24:	4620      	mov	r0, r4
 800dc26:	f000 f84f 	bl	800dcc8 <_free_r>
 800dc2a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dc2c:	b111      	cbz	r1, 800dc34 <_reclaim_reent+0x8c>
 800dc2e:	4620      	mov	r0, r4
 800dc30:	f000 f84a 	bl	800dcc8 <_free_r>
 800dc34:	6a23      	ldr	r3, [r4, #32]
 800dc36:	b14b      	cbz	r3, 800dc4c <_reclaim_reent+0xa4>
 800dc38:	4620      	mov	r0, r4
 800dc3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc3e:	4718      	bx	r3
 800dc40:	680e      	ldr	r6, [r1, #0]
 800dc42:	4620      	mov	r0, r4
 800dc44:	f000 f840 	bl	800dcc8 <_free_r>
 800dc48:	4631      	mov	r1, r6
 800dc4a:	e7bb      	b.n	800dbc4 <_reclaim_reent+0x1c>
 800dc4c:	bd70      	pop	{r4, r5, r6, pc}
 800dc4e:	bf00      	nop
 800dc50:	20000070 	.word	0x20000070

0800dc54 <__errno>:
 800dc54:	4b01      	ldr	r3, [pc, #4]	@ (800dc5c <__errno+0x8>)
 800dc56:	6818      	ldr	r0, [r3, #0]
 800dc58:	4770      	bx	lr
 800dc5a:	bf00      	nop
 800dc5c:	20000070 	.word	0x20000070

0800dc60 <__libc_init_array>:
 800dc60:	b570      	push	{r4, r5, r6, lr}
 800dc62:	4d0d      	ldr	r5, [pc, #52]	@ (800dc98 <__libc_init_array+0x38>)
 800dc64:	4c0d      	ldr	r4, [pc, #52]	@ (800dc9c <__libc_init_array+0x3c>)
 800dc66:	1b64      	subs	r4, r4, r5
 800dc68:	10a4      	asrs	r4, r4, #2
 800dc6a:	2600      	movs	r6, #0
 800dc6c:	42a6      	cmp	r6, r4
 800dc6e:	d109      	bne.n	800dc84 <__libc_init_array+0x24>
 800dc70:	4d0b      	ldr	r5, [pc, #44]	@ (800dca0 <__libc_init_array+0x40>)
 800dc72:	4c0c      	ldr	r4, [pc, #48]	@ (800dca4 <__libc_init_array+0x44>)
 800dc74:	f000 fc66 	bl	800e544 <_init>
 800dc78:	1b64      	subs	r4, r4, r5
 800dc7a:	10a4      	asrs	r4, r4, #2
 800dc7c:	2600      	movs	r6, #0
 800dc7e:	42a6      	cmp	r6, r4
 800dc80:	d105      	bne.n	800dc8e <__libc_init_array+0x2e>
 800dc82:	bd70      	pop	{r4, r5, r6, pc}
 800dc84:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc88:	4798      	blx	r3
 800dc8a:	3601      	adds	r6, #1
 800dc8c:	e7ee      	b.n	800dc6c <__libc_init_array+0xc>
 800dc8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc92:	4798      	blx	r3
 800dc94:	3601      	adds	r6, #1
 800dc96:	e7f2      	b.n	800dc7e <__libc_init_array+0x1e>
 800dc98:	0800e700 	.word	0x0800e700
 800dc9c:	0800e700 	.word	0x0800e700
 800dca0:	0800e700 	.word	0x0800e700
 800dca4:	0800e704 	.word	0x0800e704

0800dca8 <__retarget_lock_acquire_recursive>:
 800dca8:	4770      	bx	lr

0800dcaa <__retarget_lock_release_recursive>:
 800dcaa:	4770      	bx	lr

0800dcac <memcpy>:
 800dcac:	440a      	add	r2, r1
 800dcae:	4291      	cmp	r1, r2
 800dcb0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dcb4:	d100      	bne.n	800dcb8 <memcpy+0xc>
 800dcb6:	4770      	bx	lr
 800dcb8:	b510      	push	{r4, lr}
 800dcba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcc2:	4291      	cmp	r1, r2
 800dcc4:	d1f9      	bne.n	800dcba <memcpy+0xe>
 800dcc6:	bd10      	pop	{r4, pc}

0800dcc8 <_free_r>:
 800dcc8:	b538      	push	{r3, r4, r5, lr}
 800dcca:	4605      	mov	r5, r0
 800dccc:	2900      	cmp	r1, #0
 800dcce:	d041      	beq.n	800dd54 <_free_r+0x8c>
 800dcd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcd4:	1f0c      	subs	r4, r1, #4
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	bfb8      	it	lt
 800dcda:	18e4      	addlt	r4, r4, r3
 800dcdc:	f000 fbc6 	bl	800e46c <__malloc_lock>
 800dce0:	4a1d      	ldr	r2, [pc, #116]	@ (800dd58 <_free_r+0x90>)
 800dce2:	6813      	ldr	r3, [r2, #0]
 800dce4:	b933      	cbnz	r3, 800dcf4 <_free_r+0x2c>
 800dce6:	6063      	str	r3, [r4, #4]
 800dce8:	6014      	str	r4, [r2, #0]
 800dcea:	4628      	mov	r0, r5
 800dcec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcf0:	f000 bbc2 	b.w	800e478 <__malloc_unlock>
 800dcf4:	42a3      	cmp	r3, r4
 800dcf6:	d908      	bls.n	800dd0a <_free_r+0x42>
 800dcf8:	6820      	ldr	r0, [r4, #0]
 800dcfa:	1821      	adds	r1, r4, r0
 800dcfc:	428b      	cmp	r3, r1
 800dcfe:	bf01      	itttt	eq
 800dd00:	6819      	ldreq	r1, [r3, #0]
 800dd02:	685b      	ldreq	r3, [r3, #4]
 800dd04:	1809      	addeq	r1, r1, r0
 800dd06:	6021      	streq	r1, [r4, #0]
 800dd08:	e7ed      	b.n	800dce6 <_free_r+0x1e>
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	b10b      	cbz	r3, 800dd14 <_free_r+0x4c>
 800dd10:	42a3      	cmp	r3, r4
 800dd12:	d9fa      	bls.n	800dd0a <_free_r+0x42>
 800dd14:	6811      	ldr	r1, [r2, #0]
 800dd16:	1850      	adds	r0, r2, r1
 800dd18:	42a0      	cmp	r0, r4
 800dd1a:	d10b      	bne.n	800dd34 <_free_r+0x6c>
 800dd1c:	6820      	ldr	r0, [r4, #0]
 800dd1e:	4401      	add	r1, r0
 800dd20:	1850      	adds	r0, r2, r1
 800dd22:	4283      	cmp	r3, r0
 800dd24:	6011      	str	r1, [r2, #0]
 800dd26:	d1e0      	bne.n	800dcea <_free_r+0x22>
 800dd28:	6818      	ldr	r0, [r3, #0]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	6053      	str	r3, [r2, #4]
 800dd2e:	4408      	add	r0, r1
 800dd30:	6010      	str	r0, [r2, #0]
 800dd32:	e7da      	b.n	800dcea <_free_r+0x22>
 800dd34:	d902      	bls.n	800dd3c <_free_r+0x74>
 800dd36:	230c      	movs	r3, #12
 800dd38:	602b      	str	r3, [r5, #0]
 800dd3a:	e7d6      	b.n	800dcea <_free_r+0x22>
 800dd3c:	6820      	ldr	r0, [r4, #0]
 800dd3e:	1821      	adds	r1, r4, r0
 800dd40:	428b      	cmp	r3, r1
 800dd42:	bf04      	itt	eq
 800dd44:	6819      	ldreq	r1, [r3, #0]
 800dd46:	685b      	ldreq	r3, [r3, #4]
 800dd48:	6063      	str	r3, [r4, #4]
 800dd4a:	bf04      	itt	eq
 800dd4c:	1809      	addeq	r1, r1, r0
 800dd4e:	6021      	streq	r1, [r4, #0]
 800dd50:	6054      	str	r4, [r2, #4]
 800dd52:	e7ca      	b.n	800dcea <_free_r+0x22>
 800dd54:	bd38      	pop	{r3, r4, r5, pc}
 800dd56:	bf00      	nop
 800dd58:	200059c8 	.word	0x200059c8

0800dd5c <__ssputs_r>:
 800dd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd60:	688e      	ldr	r6, [r1, #8]
 800dd62:	461f      	mov	r7, r3
 800dd64:	42be      	cmp	r6, r7
 800dd66:	680b      	ldr	r3, [r1, #0]
 800dd68:	4682      	mov	sl, r0
 800dd6a:	460c      	mov	r4, r1
 800dd6c:	4690      	mov	r8, r2
 800dd6e:	d82d      	bhi.n	800ddcc <__ssputs_r+0x70>
 800dd70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dd78:	d026      	beq.n	800ddc8 <__ssputs_r+0x6c>
 800dd7a:	6965      	ldr	r5, [r4, #20]
 800dd7c:	6909      	ldr	r1, [r1, #16]
 800dd7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd82:	eba3 0901 	sub.w	r9, r3, r1
 800dd86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd8a:	1c7b      	adds	r3, r7, #1
 800dd8c:	444b      	add	r3, r9
 800dd8e:	106d      	asrs	r5, r5, #1
 800dd90:	429d      	cmp	r5, r3
 800dd92:	bf38      	it	cc
 800dd94:	461d      	movcc	r5, r3
 800dd96:	0553      	lsls	r3, r2, #21
 800dd98:	d527      	bpl.n	800ddea <__ssputs_r+0x8e>
 800dd9a:	4629      	mov	r1, r5
 800dd9c:	f000 f958 	bl	800e050 <_malloc_r>
 800dda0:	4606      	mov	r6, r0
 800dda2:	b360      	cbz	r0, 800ddfe <__ssputs_r+0xa2>
 800dda4:	6921      	ldr	r1, [r4, #16]
 800dda6:	464a      	mov	r2, r9
 800dda8:	f7ff ff80 	bl	800dcac <memcpy>
 800ddac:	89a3      	ldrh	r3, [r4, #12]
 800ddae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ddb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddb6:	81a3      	strh	r3, [r4, #12]
 800ddb8:	6126      	str	r6, [r4, #16]
 800ddba:	6165      	str	r5, [r4, #20]
 800ddbc:	444e      	add	r6, r9
 800ddbe:	eba5 0509 	sub.w	r5, r5, r9
 800ddc2:	6026      	str	r6, [r4, #0]
 800ddc4:	60a5      	str	r5, [r4, #8]
 800ddc6:	463e      	mov	r6, r7
 800ddc8:	42be      	cmp	r6, r7
 800ddca:	d900      	bls.n	800ddce <__ssputs_r+0x72>
 800ddcc:	463e      	mov	r6, r7
 800ddce:	6820      	ldr	r0, [r4, #0]
 800ddd0:	4632      	mov	r2, r6
 800ddd2:	4641      	mov	r1, r8
 800ddd4:	f000 fb84 	bl	800e4e0 <memmove>
 800ddd8:	68a3      	ldr	r3, [r4, #8]
 800ddda:	1b9b      	subs	r3, r3, r6
 800dddc:	60a3      	str	r3, [r4, #8]
 800ddde:	6823      	ldr	r3, [r4, #0]
 800dde0:	4433      	add	r3, r6
 800dde2:	6023      	str	r3, [r4, #0]
 800dde4:	2000      	movs	r0, #0
 800dde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddea:	462a      	mov	r2, r5
 800ddec:	f000 fb4a 	bl	800e484 <_realloc_r>
 800ddf0:	4606      	mov	r6, r0
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	d1e0      	bne.n	800ddb8 <__ssputs_r+0x5c>
 800ddf6:	6921      	ldr	r1, [r4, #16]
 800ddf8:	4650      	mov	r0, sl
 800ddfa:	f7ff ff65 	bl	800dcc8 <_free_r>
 800ddfe:	230c      	movs	r3, #12
 800de00:	f8ca 3000 	str.w	r3, [sl]
 800de04:	89a3      	ldrh	r3, [r4, #12]
 800de06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de0a:	81a3      	strh	r3, [r4, #12]
 800de0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de10:	e7e9      	b.n	800dde6 <__ssputs_r+0x8a>
	...

0800de14 <_svfiprintf_r>:
 800de14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de18:	4698      	mov	r8, r3
 800de1a:	898b      	ldrh	r3, [r1, #12]
 800de1c:	061b      	lsls	r3, r3, #24
 800de1e:	b09d      	sub	sp, #116	@ 0x74
 800de20:	4607      	mov	r7, r0
 800de22:	460d      	mov	r5, r1
 800de24:	4614      	mov	r4, r2
 800de26:	d510      	bpl.n	800de4a <_svfiprintf_r+0x36>
 800de28:	690b      	ldr	r3, [r1, #16]
 800de2a:	b973      	cbnz	r3, 800de4a <_svfiprintf_r+0x36>
 800de2c:	2140      	movs	r1, #64	@ 0x40
 800de2e:	f000 f90f 	bl	800e050 <_malloc_r>
 800de32:	6028      	str	r0, [r5, #0]
 800de34:	6128      	str	r0, [r5, #16]
 800de36:	b930      	cbnz	r0, 800de46 <_svfiprintf_r+0x32>
 800de38:	230c      	movs	r3, #12
 800de3a:	603b      	str	r3, [r7, #0]
 800de3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de40:	b01d      	add	sp, #116	@ 0x74
 800de42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de46:	2340      	movs	r3, #64	@ 0x40
 800de48:	616b      	str	r3, [r5, #20]
 800de4a:	2300      	movs	r3, #0
 800de4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800de4e:	2320      	movs	r3, #32
 800de50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800de54:	f8cd 800c 	str.w	r8, [sp, #12]
 800de58:	2330      	movs	r3, #48	@ 0x30
 800de5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dff8 <_svfiprintf_r+0x1e4>
 800de5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de62:	f04f 0901 	mov.w	r9, #1
 800de66:	4623      	mov	r3, r4
 800de68:	469a      	mov	sl, r3
 800de6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de6e:	b10a      	cbz	r2, 800de74 <_svfiprintf_r+0x60>
 800de70:	2a25      	cmp	r2, #37	@ 0x25
 800de72:	d1f9      	bne.n	800de68 <_svfiprintf_r+0x54>
 800de74:	ebba 0b04 	subs.w	fp, sl, r4
 800de78:	d00b      	beq.n	800de92 <_svfiprintf_r+0x7e>
 800de7a:	465b      	mov	r3, fp
 800de7c:	4622      	mov	r2, r4
 800de7e:	4629      	mov	r1, r5
 800de80:	4638      	mov	r0, r7
 800de82:	f7ff ff6b 	bl	800dd5c <__ssputs_r>
 800de86:	3001      	adds	r0, #1
 800de88:	f000 80a7 	beq.w	800dfda <_svfiprintf_r+0x1c6>
 800de8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de8e:	445a      	add	r2, fp
 800de90:	9209      	str	r2, [sp, #36]	@ 0x24
 800de92:	f89a 3000 	ldrb.w	r3, [sl]
 800de96:	2b00      	cmp	r3, #0
 800de98:	f000 809f 	beq.w	800dfda <_svfiprintf_r+0x1c6>
 800de9c:	2300      	movs	r3, #0
 800de9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dea6:	f10a 0a01 	add.w	sl, sl, #1
 800deaa:	9304      	str	r3, [sp, #16]
 800deac:	9307      	str	r3, [sp, #28]
 800deae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800deb2:	931a      	str	r3, [sp, #104]	@ 0x68
 800deb4:	4654      	mov	r4, sl
 800deb6:	2205      	movs	r2, #5
 800deb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800debc:	484e      	ldr	r0, [pc, #312]	@ (800dff8 <_svfiprintf_r+0x1e4>)
 800debe:	f7f2 f98f 	bl	80001e0 <memchr>
 800dec2:	9a04      	ldr	r2, [sp, #16]
 800dec4:	b9d8      	cbnz	r0, 800defe <_svfiprintf_r+0xea>
 800dec6:	06d0      	lsls	r0, r2, #27
 800dec8:	bf44      	itt	mi
 800deca:	2320      	movmi	r3, #32
 800decc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ded0:	0711      	lsls	r1, r2, #28
 800ded2:	bf44      	itt	mi
 800ded4:	232b      	movmi	r3, #43	@ 0x2b
 800ded6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800deda:	f89a 3000 	ldrb.w	r3, [sl]
 800dede:	2b2a      	cmp	r3, #42	@ 0x2a
 800dee0:	d015      	beq.n	800df0e <_svfiprintf_r+0xfa>
 800dee2:	9a07      	ldr	r2, [sp, #28]
 800dee4:	4654      	mov	r4, sl
 800dee6:	2000      	movs	r0, #0
 800dee8:	f04f 0c0a 	mov.w	ip, #10
 800deec:	4621      	mov	r1, r4
 800deee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800def2:	3b30      	subs	r3, #48	@ 0x30
 800def4:	2b09      	cmp	r3, #9
 800def6:	d94b      	bls.n	800df90 <_svfiprintf_r+0x17c>
 800def8:	b1b0      	cbz	r0, 800df28 <_svfiprintf_r+0x114>
 800defa:	9207      	str	r2, [sp, #28]
 800defc:	e014      	b.n	800df28 <_svfiprintf_r+0x114>
 800defe:	eba0 0308 	sub.w	r3, r0, r8
 800df02:	fa09 f303 	lsl.w	r3, r9, r3
 800df06:	4313      	orrs	r3, r2
 800df08:	9304      	str	r3, [sp, #16]
 800df0a:	46a2      	mov	sl, r4
 800df0c:	e7d2      	b.n	800deb4 <_svfiprintf_r+0xa0>
 800df0e:	9b03      	ldr	r3, [sp, #12]
 800df10:	1d19      	adds	r1, r3, #4
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	9103      	str	r1, [sp, #12]
 800df16:	2b00      	cmp	r3, #0
 800df18:	bfbb      	ittet	lt
 800df1a:	425b      	neglt	r3, r3
 800df1c:	f042 0202 	orrlt.w	r2, r2, #2
 800df20:	9307      	strge	r3, [sp, #28]
 800df22:	9307      	strlt	r3, [sp, #28]
 800df24:	bfb8      	it	lt
 800df26:	9204      	strlt	r2, [sp, #16]
 800df28:	7823      	ldrb	r3, [r4, #0]
 800df2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800df2c:	d10a      	bne.n	800df44 <_svfiprintf_r+0x130>
 800df2e:	7863      	ldrb	r3, [r4, #1]
 800df30:	2b2a      	cmp	r3, #42	@ 0x2a
 800df32:	d132      	bne.n	800df9a <_svfiprintf_r+0x186>
 800df34:	9b03      	ldr	r3, [sp, #12]
 800df36:	1d1a      	adds	r2, r3, #4
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	9203      	str	r2, [sp, #12]
 800df3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800df40:	3402      	adds	r4, #2
 800df42:	9305      	str	r3, [sp, #20]
 800df44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e008 <_svfiprintf_r+0x1f4>
 800df48:	7821      	ldrb	r1, [r4, #0]
 800df4a:	2203      	movs	r2, #3
 800df4c:	4650      	mov	r0, sl
 800df4e:	f7f2 f947 	bl	80001e0 <memchr>
 800df52:	b138      	cbz	r0, 800df64 <_svfiprintf_r+0x150>
 800df54:	9b04      	ldr	r3, [sp, #16]
 800df56:	eba0 000a 	sub.w	r0, r0, sl
 800df5a:	2240      	movs	r2, #64	@ 0x40
 800df5c:	4082      	lsls	r2, r0
 800df5e:	4313      	orrs	r3, r2
 800df60:	3401      	adds	r4, #1
 800df62:	9304      	str	r3, [sp, #16]
 800df64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df68:	4824      	ldr	r0, [pc, #144]	@ (800dffc <_svfiprintf_r+0x1e8>)
 800df6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800df6e:	2206      	movs	r2, #6
 800df70:	f7f2 f936 	bl	80001e0 <memchr>
 800df74:	2800      	cmp	r0, #0
 800df76:	d036      	beq.n	800dfe6 <_svfiprintf_r+0x1d2>
 800df78:	4b21      	ldr	r3, [pc, #132]	@ (800e000 <_svfiprintf_r+0x1ec>)
 800df7a:	bb1b      	cbnz	r3, 800dfc4 <_svfiprintf_r+0x1b0>
 800df7c:	9b03      	ldr	r3, [sp, #12]
 800df7e:	3307      	adds	r3, #7
 800df80:	f023 0307 	bic.w	r3, r3, #7
 800df84:	3308      	adds	r3, #8
 800df86:	9303      	str	r3, [sp, #12]
 800df88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df8a:	4433      	add	r3, r6
 800df8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800df8e:	e76a      	b.n	800de66 <_svfiprintf_r+0x52>
 800df90:	fb0c 3202 	mla	r2, ip, r2, r3
 800df94:	460c      	mov	r4, r1
 800df96:	2001      	movs	r0, #1
 800df98:	e7a8      	b.n	800deec <_svfiprintf_r+0xd8>
 800df9a:	2300      	movs	r3, #0
 800df9c:	3401      	adds	r4, #1
 800df9e:	9305      	str	r3, [sp, #20]
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	f04f 0c0a 	mov.w	ip, #10
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfac:	3a30      	subs	r2, #48	@ 0x30
 800dfae:	2a09      	cmp	r2, #9
 800dfb0:	d903      	bls.n	800dfba <_svfiprintf_r+0x1a6>
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d0c6      	beq.n	800df44 <_svfiprintf_r+0x130>
 800dfb6:	9105      	str	r1, [sp, #20]
 800dfb8:	e7c4      	b.n	800df44 <_svfiprintf_r+0x130>
 800dfba:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfbe:	4604      	mov	r4, r0
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	e7f0      	b.n	800dfa6 <_svfiprintf_r+0x192>
 800dfc4:	ab03      	add	r3, sp, #12
 800dfc6:	9300      	str	r3, [sp, #0]
 800dfc8:	462a      	mov	r2, r5
 800dfca:	4b0e      	ldr	r3, [pc, #56]	@ (800e004 <_svfiprintf_r+0x1f0>)
 800dfcc:	a904      	add	r1, sp, #16
 800dfce:	4638      	mov	r0, r7
 800dfd0:	f3af 8000 	nop.w
 800dfd4:	1c42      	adds	r2, r0, #1
 800dfd6:	4606      	mov	r6, r0
 800dfd8:	d1d6      	bne.n	800df88 <_svfiprintf_r+0x174>
 800dfda:	89ab      	ldrh	r3, [r5, #12]
 800dfdc:	065b      	lsls	r3, r3, #25
 800dfde:	f53f af2d 	bmi.w	800de3c <_svfiprintf_r+0x28>
 800dfe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dfe4:	e72c      	b.n	800de40 <_svfiprintf_r+0x2c>
 800dfe6:	ab03      	add	r3, sp, #12
 800dfe8:	9300      	str	r3, [sp, #0]
 800dfea:	462a      	mov	r2, r5
 800dfec:	4b05      	ldr	r3, [pc, #20]	@ (800e004 <_svfiprintf_r+0x1f0>)
 800dfee:	a904      	add	r1, sp, #16
 800dff0:	4638      	mov	r0, r7
 800dff2:	f000 f91b 	bl	800e22c <_printf_i>
 800dff6:	e7ed      	b.n	800dfd4 <_svfiprintf_r+0x1c0>
 800dff8:	0800e6c4 	.word	0x0800e6c4
 800dffc:	0800e6ce 	.word	0x0800e6ce
 800e000:	00000000 	.word	0x00000000
 800e004:	0800dd5d 	.word	0x0800dd5d
 800e008:	0800e6ca 	.word	0x0800e6ca

0800e00c <sbrk_aligned>:
 800e00c:	b570      	push	{r4, r5, r6, lr}
 800e00e:	4e0f      	ldr	r6, [pc, #60]	@ (800e04c <sbrk_aligned+0x40>)
 800e010:	460c      	mov	r4, r1
 800e012:	6831      	ldr	r1, [r6, #0]
 800e014:	4605      	mov	r5, r0
 800e016:	b911      	cbnz	r1, 800e01e <sbrk_aligned+0x12>
 800e018:	f000 fa7c 	bl	800e514 <_sbrk_r>
 800e01c:	6030      	str	r0, [r6, #0]
 800e01e:	4621      	mov	r1, r4
 800e020:	4628      	mov	r0, r5
 800e022:	f000 fa77 	bl	800e514 <_sbrk_r>
 800e026:	1c43      	adds	r3, r0, #1
 800e028:	d103      	bne.n	800e032 <sbrk_aligned+0x26>
 800e02a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e02e:	4620      	mov	r0, r4
 800e030:	bd70      	pop	{r4, r5, r6, pc}
 800e032:	1cc4      	adds	r4, r0, #3
 800e034:	f024 0403 	bic.w	r4, r4, #3
 800e038:	42a0      	cmp	r0, r4
 800e03a:	d0f8      	beq.n	800e02e <sbrk_aligned+0x22>
 800e03c:	1a21      	subs	r1, r4, r0
 800e03e:	4628      	mov	r0, r5
 800e040:	f000 fa68 	bl	800e514 <_sbrk_r>
 800e044:	3001      	adds	r0, #1
 800e046:	d1f2      	bne.n	800e02e <sbrk_aligned+0x22>
 800e048:	e7ef      	b.n	800e02a <sbrk_aligned+0x1e>
 800e04a:	bf00      	nop
 800e04c:	200059c4 	.word	0x200059c4

0800e050 <_malloc_r>:
 800e050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e054:	1ccd      	adds	r5, r1, #3
 800e056:	f025 0503 	bic.w	r5, r5, #3
 800e05a:	3508      	adds	r5, #8
 800e05c:	2d0c      	cmp	r5, #12
 800e05e:	bf38      	it	cc
 800e060:	250c      	movcc	r5, #12
 800e062:	2d00      	cmp	r5, #0
 800e064:	4606      	mov	r6, r0
 800e066:	db01      	blt.n	800e06c <_malloc_r+0x1c>
 800e068:	42a9      	cmp	r1, r5
 800e06a:	d904      	bls.n	800e076 <_malloc_r+0x26>
 800e06c:	230c      	movs	r3, #12
 800e06e:	6033      	str	r3, [r6, #0]
 800e070:	2000      	movs	r0, #0
 800e072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e076:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e14c <_malloc_r+0xfc>
 800e07a:	f000 f9f7 	bl	800e46c <__malloc_lock>
 800e07e:	f8d8 3000 	ldr.w	r3, [r8]
 800e082:	461c      	mov	r4, r3
 800e084:	bb44      	cbnz	r4, 800e0d8 <_malloc_r+0x88>
 800e086:	4629      	mov	r1, r5
 800e088:	4630      	mov	r0, r6
 800e08a:	f7ff ffbf 	bl	800e00c <sbrk_aligned>
 800e08e:	1c43      	adds	r3, r0, #1
 800e090:	4604      	mov	r4, r0
 800e092:	d158      	bne.n	800e146 <_malloc_r+0xf6>
 800e094:	f8d8 4000 	ldr.w	r4, [r8]
 800e098:	4627      	mov	r7, r4
 800e09a:	2f00      	cmp	r7, #0
 800e09c:	d143      	bne.n	800e126 <_malloc_r+0xd6>
 800e09e:	2c00      	cmp	r4, #0
 800e0a0:	d04b      	beq.n	800e13a <_malloc_r+0xea>
 800e0a2:	6823      	ldr	r3, [r4, #0]
 800e0a4:	4639      	mov	r1, r7
 800e0a6:	4630      	mov	r0, r6
 800e0a8:	eb04 0903 	add.w	r9, r4, r3
 800e0ac:	f000 fa32 	bl	800e514 <_sbrk_r>
 800e0b0:	4581      	cmp	r9, r0
 800e0b2:	d142      	bne.n	800e13a <_malloc_r+0xea>
 800e0b4:	6821      	ldr	r1, [r4, #0]
 800e0b6:	1a6d      	subs	r5, r5, r1
 800e0b8:	4629      	mov	r1, r5
 800e0ba:	4630      	mov	r0, r6
 800e0bc:	f7ff ffa6 	bl	800e00c <sbrk_aligned>
 800e0c0:	3001      	adds	r0, #1
 800e0c2:	d03a      	beq.n	800e13a <_malloc_r+0xea>
 800e0c4:	6823      	ldr	r3, [r4, #0]
 800e0c6:	442b      	add	r3, r5
 800e0c8:	6023      	str	r3, [r4, #0]
 800e0ca:	f8d8 3000 	ldr.w	r3, [r8]
 800e0ce:	685a      	ldr	r2, [r3, #4]
 800e0d0:	bb62      	cbnz	r2, 800e12c <_malloc_r+0xdc>
 800e0d2:	f8c8 7000 	str.w	r7, [r8]
 800e0d6:	e00f      	b.n	800e0f8 <_malloc_r+0xa8>
 800e0d8:	6822      	ldr	r2, [r4, #0]
 800e0da:	1b52      	subs	r2, r2, r5
 800e0dc:	d420      	bmi.n	800e120 <_malloc_r+0xd0>
 800e0de:	2a0b      	cmp	r2, #11
 800e0e0:	d917      	bls.n	800e112 <_malloc_r+0xc2>
 800e0e2:	1961      	adds	r1, r4, r5
 800e0e4:	42a3      	cmp	r3, r4
 800e0e6:	6025      	str	r5, [r4, #0]
 800e0e8:	bf18      	it	ne
 800e0ea:	6059      	strne	r1, [r3, #4]
 800e0ec:	6863      	ldr	r3, [r4, #4]
 800e0ee:	bf08      	it	eq
 800e0f0:	f8c8 1000 	streq.w	r1, [r8]
 800e0f4:	5162      	str	r2, [r4, r5]
 800e0f6:	604b      	str	r3, [r1, #4]
 800e0f8:	4630      	mov	r0, r6
 800e0fa:	f000 f9bd 	bl	800e478 <__malloc_unlock>
 800e0fe:	f104 000b 	add.w	r0, r4, #11
 800e102:	1d23      	adds	r3, r4, #4
 800e104:	f020 0007 	bic.w	r0, r0, #7
 800e108:	1ac2      	subs	r2, r0, r3
 800e10a:	bf1c      	itt	ne
 800e10c:	1a1b      	subne	r3, r3, r0
 800e10e:	50a3      	strne	r3, [r4, r2]
 800e110:	e7af      	b.n	800e072 <_malloc_r+0x22>
 800e112:	6862      	ldr	r2, [r4, #4]
 800e114:	42a3      	cmp	r3, r4
 800e116:	bf0c      	ite	eq
 800e118:	f8c8 2000 	streq.w	r2, [r8]
 800e11c:	605a      	strne	r2, [r3, #4]
 800e11e:	e7eb      	b.n	800e0f8 <_malloc_r+0xa8>
 800e120:	4623      	mov	r3, r4
 800e122:	6864      	ldr	r4, [r4, #4]
 800e124:	e7ae      	b.n	800e084 <_malloc_r+0x34>
 800e126:	463c      	mov	r4, r7
 800e128:	687f      	ldr	r7, [r7, #4]
 800e12a:	e7b6      	b.n	800e09a <_malloc_r+0x4a>
 800e12c:	461a      	mov	r2, r3
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	42a3      	cmp	r3, r4
 800e132:	d1fb      	bne.n	800e12c <_malloc_r+0xdc>
 800e134:	2300      	movs	r3, #0
 800e136:	6053      	str	r3, [r2, #4]
 800e138:	e7de      	b.n	800e0f8 <_malloc_r+0xa8>
 800e13a:	230c      	movs	r3, #12
 800e13c:	6033      	str	r3, [r6, #0]
 800e13e:	4630      	mov	r0, r6
 800e140:	f000 f99a 	bl	800e478 <__malloc_unlock>
 800e144:	e794      	b.n	800e070 <_malloc_r+0x20>
 800e146:	6005      	str	r5, [r0, #0]
 800e148:	e7d6      	b.n	800e0f8 <_malloc_r+0xa8>
 800e14a:	bf00      	nop
 800e14c:	200059c8 	.word	0x200059c8

0800e150 <_printf_common>:
 800e150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e154:	4616      	mov	r6, r2
 800e156:	4698      	mov	r8, r3
 800e158:	688a      	ldr	r2, [r1, #8]
 800e15a:	690b      	ldr	r3, [r1, #16]
 800e15c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e160:	4293      	cmp	r3, r2
 800e162:	bfb8      	it	lt
 800e164:	4613      	movlt	r3, r2
 800e166:	6033      	str	r3, [r6, #0]
 800e168:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e16c:	4607      	mov	r7, r0
 800e16e:	460c      	mov	r4, r1
 800e170:	b10a      	cbz	r2, 800e176 <_printf_common+0x26>
 800e172:	3301      	adds	r3, #1
 800e174:	6033      	str	r3, [r6, #0]
 800e176:	6823      	ldr	r3, [r4, #0]
 800e178:	0699      	lsls	r1, r3, #26
 800e17a:	bf42      	ittt	mi
 800e17c:	6833      	ldrmi	r3, [r6, #0]
 800e17e:	3302      	addmi	r3, #2
 800e180:	6033      	strmi	r3, [r6, #0]
 800e182:	6825      	ldr	r5, [r4, #0]
 800e184:	f015 0506 	ands.w	r5, r5, #6
 800e188:	d106      	bne.n	800e198 <_printf_common+0x48>
 800e18a:	f104 0a19 	add.w	sl, r4, #25
 800e18e:	68e3      	ldr	r3, [r4, #12]
 800e190:	6832      	ldr	r2, [r6, #0]
 800e192:	1a9b      	subs	r3, r3, r2
 800e194:	42ab      	cmp	r3, r5
 800e196:	dc26      	bgt.n	800e1e6 <_printf_common+0x96>
 800e198:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e19c:	6822      	ldr	r2, [r4, #0]
 800e19e:	3b00      	subs	r3, #0
 800e1a0:	bf18      	it	ne
 800e1a2:	2301      	movne	r3, #1
 800e1a4:	0692      	lsls	r2, r2, #26
 800e1a6:	d42b      	bmi.n	800e200 <_printf_common+0xb0>
 800e1a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e1ac:	4641      	mov	r1, r8
 800e1ae:	4638      	mov	r0, r7
 800e1b0:	47c8      	blx	r9
 800e1b2:	3001      	adds	r0, #1
 800e1b4:	d01e      	beq.n	800e1f4 <_printf_common+0xa4>
 800e1b6:	6823      	ldr	r3, [r4, #0]
 800e1b8:	6922      	ldr	r2, [r4, #16]
 800e1ba:	f003 0306 	and.w	r3, r3, #6
 800e1be:	2b04      	cmp	r3, #4
 800e1c0:	bf02      	ittt	eq
 800e1c2:	68e5      	ldreq	r5, [r4, #12]
 800e1c4:	6833      	ldreq	r3, [r6, #0]
 800e1c6:	1aed      	subeq	r5, r5, r3
 800e1c8:	68a3      	ldr	r3, [r4, #8]
 800e1ca:	bf0c      	ite	eq
 800e1cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1d0:	2500      	movne	r5, #0
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	bfc4      	itt	gt
 800e1d6:	1a9b      	subgt	r3, r3, r2
 800e1d8:	18ed      	addgt	r5, r5, r3
 800e1da:	2600      	movs	r6, #0
 800e1dc:	341a      	adds	r4, #26
 800e1de:	42b5      	cmp	r5, r6
 800e1e0:	d11a      	bne.n	800e218 <_printf_common+0xc8>
 800e1e2:	2000      	movs	r0, #0
 800e1e4:	e008      	b.n	800e1f8 <_printf_common+0xa8>
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	4652      	mov	r2, sl
 800e1ea:	4641      	mov	r1, r8
 800e1ec:	4638      	mov	r0, r7
 800e1ee:	47c8      	blx	r9
 800e1f0:	3001      	adds	r0, #1
 800e1f2:	d103      	bne.n	800e1fc <_printf_common+0xac>
 800e1f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1fc:	3501      	adds	r5, #1
 800e1fe:	e7c6      	b.n	800e18e <_printf_common+0x3e>
 800e200:	18e1      	adds	r1, r4, r3
 800e202:	1c5a      	adds	r2, r3, #1
 800e204:	2030      	movs	r0, #48	@ 0x30
 800e206:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e20a:	4422      	add	r2, r4
 800e20c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e210:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e214:	3302      	adds	r3, #2
 800e216:	e7c7      	b.n	800e1a8 <_printf_common+0x58>
 800e218:	2301      	movs	r3, #1
 800e21a:	4622      	mov	r2, r4
 800e21c:	4641      	mov	r1, r8
 800e21e:	4638      	mov	r0, r7
 800e220:	47c8      	blx	r9
 800e222:	3001      	adds	r0, #1
 800e224:	d0e6      	beq.n	800e1f4 <_printf_common+0xa4>
 800e226:	3601      	adds	r6, #1
 800e228:	e7d9      	b.n	800e1de <_printf_common+0x8e>
	...

0800e22c <_printf_i>:
 800e22c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e230:	7e0f      	ldrb	r7, [r1, #24]
 800e232:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e234:	2f78      	cmp	r7, #120	@ 0x78
 800e236:	4691      	mov	r9, r2
 800e238:	4680      	mov	r8, r0
 800e23a:	460c      	mov	r4, r1
 800e23c:	469a      	mov	sl, r3
 800e23e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e242:	d807      	bhi.n	800e254 <_printf_i+0x28>
 800e244:	2f62      	cmp	r7, #98	@ 0x62
 800e246:	d80a      	bhi.n	800e25e <_printf_i+0x32>
 800e248:	2f00      	cmp	r7, #0
 800e24a:	f000 80d2 	beq.w	800e3f2 <_printf_i+0x1c6>
 800e24e:	2f58      	cmp	r7, #88	@ 0x58
 800e250:	f000 80b9 	beq.w	800e3c6 <_printf_i+0x19a>
 800e254:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e258:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e25c:	e03a      	b.n	800e2d4 <_printf_i+0xa8>
 800e25e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e262:	2b15      	cmp	r3, #21
 800e264:	d8f6      	bhi.n	800e254 <_printf_i+0x28>
 800e266:	a101      	add	r1, pc, #4	@ (adr r1, 800e26c <_printf_i+0x40>)
 800e268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e26c:	0800e2c5 	.word	0x0800e2c5
 800e270:	0800e2d9 	.word	0x0800e2d9
 800e274:	0800e255 	.word	0x0800e255
 800e278:	0800e255 	.word	0x0800e255
 800e27c:	0800e255 	.word	0x0800e255
 800e280:	0800e255 	.word	0x0800e255
 800e284:	0800e2d9 	.word	0x0800e2d9
 800e288:	0800e255 	.word	0x0800e255
 800e28c:	0800e255 	.word	0x0800e255
 800e290:	0800e255 	.word	0x0800e255
 800e294:	0800e255 	.word	0x0800e255
 800e298:	0800e3d9 	.word	0x0800e3d9
 800e29c:	0800e303 	.word	0x0800e303
 800e2a0:	0800e393 	.word	0x0800e393
 800e2a4:	0800e255 	.word	0x0800e255
 800e2a8:	0800e255 	.word	0x0800e255
 800e2ac:	0800e3fb 	.word	0x0800e3fb
 800e2b0:	0800e255 	.word	0x0800e255
 800e2b4:	0800e303 	.word	0x0800e303
 800e2b8:	0800e255 	.word	0x0800e255
 800e2bc:	0800e255 	.word	0x0800e255
 800e2c0:	0800e39b 	.word	0x0800e39b
 800e2c4:	6833      	ldr	r3, [r6, #0]
 800e2c6:	1d1a      	adds	r2, r3, #4
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	6032      	str	r2, [r6, #0]
 800e2cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e2d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	e09d      	b.n	800e414 <_printf_i+0x1e8>
 800e2d8:	6833      	ldr	r3, [r6, #0]
 800e2da:	6820      	ldr	r0, [r4, #0]
 800e2dc:	1d19      	adds	r1, r3, #4
 800e2de:	6031      	str	r1, [r6, #0]
 800e2e0:	0606      	lsls	r6, r0, #24
 800e2e2:	d501      	bpl.n	800e2e8 <_printf_i+0xbc>
 800e2e4:	681d      	ldr	r5, [r3, #0]
 800e2e6:	e003      	b.n	800e2f0 <_printf_i+0xc4>
 800e2e8:	0645      	lsls	r5, r0, #25
 800e2ea:	d5fb      	bpl.n	800e2e4 <_printf_i+0xb8>
 800e2ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e2f0:	2d00      	cmp	r5, #0
 800e2f2:	da03      	bge.n	800e2fc <_printf_i+0xd0>
 800e2f4:	232d      	movs	r3, #45	@ 0x2d
 800e2f6:	426d      	negs	r5, r5
 800e2f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2fc:	4859      	ldr	r0, [pc, #356]	@ (800e464 <_printf_i+0x238>)
 800e2fe:	230a      	movs	r3, #10
 800e300:	e011      	b.n	800e326 <_printf_i+0xfa>
 800e302:	6821      	ldr	r1, [r4, #0]
 800e304:	6833      	ldr	r3, [r6, #0]
 800e306:	0608      	lsls	r0, r1, #24
 800e308:	f853 5b04 	ldr.w	r5, [r3], #4
 800e30c:	d402      	bmi.n	800e314 <_printf_i+0xe8>
 800e30e:	0649      	lsls	r1, r1, #25
 800e310:	bf48      	it	mi
 800e312:	b2ad      	uxthmi	r5, r5
 800e314:	2f6f      	cmp	r7, #111	@ 0x6f
 800e316:	4853      	ldr	r0, [pc, #332]	@ (800e464 <_printf_i+0x238>)
 800e318:	6033      	str	r3, [r6, #0]
 800e31a:	bf14      	ite	ne
 800e31c:	230a      	movne	r3, #10
 800e31e:	2308      	moveq	r3, #8
 800e320:	2100      	movs	r1, #0
 800e322:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e326:	6866      	ldr	r6, [r4, #4]
 800e328:	60a6      	str	r6, [r4, #8]
 800e32a:	2e00      	cmp	r6, #0
 800e32c:	bfa2      	ittt	ge
 800e32e:	6821      	ldrge	r1, [r4, #0]
 800e330:	f021 0104 	bicge.w	r1, r1, #4
 800e334:	6021      	strge	r1, [r4, #0]
 800e336:	b90d      	cbnz	r5, 800e33c <_printf_i+0x110>
 800e338:	2e00      	cmp	r6, #0
 800e33a:	d04b      	beq.n	800e3d4 <_printf_i+0x1a8>
 800e33c:	4616      	mov	r6, r2
 800e33e:	fbb5 f1f3 	udiv	r1, r5, r3
 800e342:	fb03 5711 	mls	r7, r3, r1, r5
 800e346:	5dc7      	ldrb	r7, [r0, r7]
 800e348:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e34c:	462f      	mov	r7, r5
 800e34e:	42bb      	cmp	r3, r7
 800e350:	460d      	mov	r5, r1
 800e352:	d9f4      	bls.n	800e33e <_printf_i+0x112>
 800e354:	2b08      	cmp	r3, #8
 800e356:	d10b      	bne.n	800e370 <_printf_i+0x144>
 800e358:	6823      	ldr	r3, [r4, #0]
 800e35a:	07df      	lsls	r7, r3, #31
 800e35c:	d508      	bpl.n	800e370 <_printf_i+0x144>
 800e35e:	6923      	ldr	r3, [r4, #16]
 800e360:	6861      	ldr	r1, [r4, #4]
 800e362:	4299      	cmp	r1, r3
 800e364:	bfde      	ittt	le
 800e366:	2330      	movle	r3, #48	@ 0x30
 800e368:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e36c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e370:	1b92      	subs	r2, r2, r6
 800e372:	6122      	str	r2, [r4, #16]
 800e374:	f8cd a000 	str.w	sl, [sp]
 800e378:	464b      	mov	r3, r9
 800e37a:	aa03      	add	r2, sp, #12
 800e37c:	4621      	mov	r1, r4
 800e37e:	4640      	mov	r0, r8
 800e380:	f7ff fee6 	bl	800e150 <_printf_common>
 800e384:	3001      	adds	r0, #1
 800e386:	d14a      	bne.n	800e41e <_printf_i+0x1f2>
 800e388:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e38c:	b004      	add	sp, #16
 800e38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e392:	6823      	ldr	r3, [r4, #0]
 800e394:	f043 0320 	orr.w	r3, r3, #32
 800e398:	6023      	str	r3, [r4, #0]
 800e39a:	4833      	ldr	r0, [pc, #204]	@ (800e468 <_printf_i+0x23c>)
 800e39c:	2778      	movs	r7, #120	@ 0x78
 800e39e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e3a2:	6823      	ldr	r3, [r4, #0]
 800e3a4:	6831      	ldr	r1, [r6, #0]
 800e3a6:	061f      	lsls	r7, r3, #24
 800e3a8:	f851 5b04 	ldr.w	r5, [r1], #4
 800e3ac:	d402      	bmi.n	800e3b4 <_printf_i+0x188>
 800e3ae:	065f      	lsls	r7, r3, #25
 800e3b0:	bf48      	it	mi
 800e3b2:	b2ad      	uxthmi	r5, r5
 800e3b4:	6031      	str	r1, [r6, #0]
 800e3b6:	07d9      	lsls	r1, r3, #31
 800e3b8:	bf44      	itt	mi
 800e3ba:	f043 0320 	orrmi.w	r3, r3, #32
 800e3be:	6023      	strmi	r3, [r4, #0]
 800e3c0:	b11d      	cbz	r5, 800e3ca <_printf_i+0x19e>
 800e3c2:	2310      	movs	r3, #16
 800e3c4:	e7ac      	b.n	800e320 <_printf_i+0xf4>
 800e3c6:	4827      	ldr	r0, [pc, #156]	@ (800e464 <_printf_i+0x238>)
 800e3c8:	e7e9      	b.n	800e39e <_printf_i+0x172>
 800e3ca:	6823      	ldr	r3, [r4, #0]
 800e3cc:	f023 0320 	bic.w	r3, r3, #32
 800e3d0:	6023      	str	r3, [r4, #0]
 800e3d2:	e7f6      	b.n	800e3c2 <_printf_i+0x196>
 800e3d4:	4616      	mov	r6, r2
 800e3d6:	e7bd      	b.n	800e354 <_printf_i+0x128>
 800e3d8:	6833      	ldr	r3, [r6, #0]
 800e3da:	6825      	ldr	r5, [r4, #0]
 800e3dc:	6961      	ldr	r1, [r4, #20]
 800e3de:	1d18      	adds	r0, r3, #4
 800e3e0:	6030      	str	r0, [r6, #0]
 800e3e2:	062e      	lsls	r6, r5, #24
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	d501      	bpl.n	800e3ec <_printf_i+0x1c0>
 800e3e8:	6019      	str	r1, [r3, #0]
 800e3ea:	e002      	b.n	800e3f2 <_printf_i+0x1c6>
 800e3ec:	0668      	lsls	r0, r5, #25
 800e3ee:	d5fb      	bpl.n	800e3e8 <_printf_i+0x1bc>
 800e3f0:	8019      	strh	r1, [r3, #0]
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	6123      	str	r3, [r4, #16]
 800e3f6:	4616      	mov	r6, r2
 800e3f8:	e7bc      	b.n	800e374 <_printf_i+0x148>
 800e3fa:	6833      	ldr	r3, [r6, #0]
 800e3fc:	1d1a      	adds	r2, r3, #4
 800e3fe:	6032      	str	r2, [r6, #0]
 800e400:	681e      	ldr	r6, [r3, #0]
 800e402:	6862      	ldr	r2, [r4, #4]
 800e404:	2100      	movs	r1, #0
 800e406:	4630      	mov	r0, r6
 800e408:	f7f1 feea 	bl	80001e0 <memchr>
 800e40c:	b108      	cbz	r0, 800e412 <_printf_i+0x1e6>
 800e40e:	1b80      	subs	r0, r0, r6
 800e410:	6060      	str	r0, [r4, #4]
 800e412:	6863      	ldr	r3, [r4, #4]
 800e414:	6123      	str	r3, [r4, #16]
 800e416:	2300      	movs	r3, #0
 800e418:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e41c:	e7aa      	b.n	800e374 <_printf_i+0x148>
 800e41e:	6923      	ldr	r3, [r4, #16]
 800e420:	4632      	mov	r2, r6
 800e422:	4649      	mov	r1, r9
 800e424:	4640      	mov	r0, r8
 800e426:	47d0      	blx	sl
 800e428:	3001      	adds	r0, #1
 800e42a:	d0ad      	beq.n	800e388 <_printf_i+0x15c>
 800e42c:	6823      	ldr	r3, [r4, #0]
 800e42e:	079b      	lsls	r3, r3, #30
 800e430:	d413      	bmi.n	800e45a <_printf_i+0x22e>
 800e432:	68e0      	ldr	r0, [r4, #12]
 800e434:	9b03      	ldr	r3, [sp, #12]
 800e436:	4298      	cmp	r0, r3
 800e438:	bfb8      	it	lt
 800e43a:	4618      	movlt	r0, r3
 800e43c:	e7a6      	b.n	800e38c <_printf_i+0x160>
 800e43e:	2301      	movs	r3, #1
 800e440:	4632      	mov	r2, r6
 800e442:	4649      	mov	r1, r9
 800e444:	4640      	mov	r0, r8
 800e446:	47d0      	blx	sl
 800e448:	3001      	adds	r0, #1
 800e44a:	d09d      	beq.n	800e388 <_printf_i+0x15c>
 800e44c:	3501      	adds	r5, #1
 800e44e:	68e3      	ldr	r3, [r4, #12]
 800e450:	9903      	ldr	r1, [sp, #12]
 800e452:	1a5b      	subs	r3, r3, r1
 800e454:	42ab      	cmp	r3, r5
 800e456:	dcf2      	bgt.n	800e43e <_printf_i+0x212>
 800e458:	e7eb      	b.n	800e432 <_printf_i+0x206>
 800e45a:	2500      	movs	r5, #0
 800e45c:	f104 0619 	add.w	r6, r4, #25
 800e460:	e7f5      	b.n	800e44e <_printf_i+0x222>
 800e462:	bf00      	nop
 800e464:	0800e6d5 	.word	0x0800e6d5
 800e468:	0800e6e6 	.word	0x0800e6e6

0800e46c <__malloc_lock>:
 800e46c:	4801      	ldr	r0, [pc, #4]	@ (800e474 <__malloc_lock+0x8>)
 800e46e:	f7ff bc1b 	b.w	800dca8 <__retarget_lock_acquire_recursive>
 800e472:	bf00      	nop
 800e474:	200059c0 	.word	0x200059c0

0800e478 <__malloc_unlock>:
 800e478:	4801      	ldr	r0, [pc, #4]	@ (800e480 <__malloc_unlock+0x8>)
 800e47a:	f7ff bc16 	b.w	800dcaa <__retarget_lock_release_recursive>
 800e47e:	bf00      	nop
 800e480:	200059c0 	.word	0x200059c0

0800e484 <_realloc_r>:
 800e484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e488:	4680      	mov	r8, r0
 800e48a:	4615      	mov	r5, r2
 800e48c:	460c      	mov	r4, r1
 800e48e:	b921      	cbnz	r1, 800e49a <_realloc_r+0x16>
 800e490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e494:	4611      	mov	r1, r2
 800e496:	f7ff bddb 	b.w	800e050 <_malloc_r>
 800e49a:	b92a      	cbnz	r2, 800e4a8 <_realloc_r+0x24>
 800e49c:	f7ff fc14 	bl	800dcc8 <_free_r>
 800e4a0:	2400      	movs	r4, #0
 800e4a2:	4620      	mov	r0, r4
 800e4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4a8:	f000 f844 	bl	800e534 <_malloc_usable_size_r>
 800e4ac:	4285      	cmp	r5, r0
 800e4ae:	4606      	mov	r6, r0
 800e4b0:	d802      	bhi.n	800e4b8 <_realloc_r+0x34>
 800e4b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e4b6:	d8f4      	bhi.n	800e4a2 <_realloc_r+0x1e>
 800e4b8:	4629      	mov	r1, r5
 800e4ba:	4640      	mov	r0, r8
 800e4bc:	f7ff fdc8 	bl	800e050 <_malloc_r>
 800e4c0:	4607      	mov	r7, r0
 800e4c2:	2800      	cmp	r0, #0
 800e4c4:	d0ec      	beq.n	800e4a0 <_realloc_r+0x1c>
 800e4c6:	42b5      	cmp	r5, r6
 800e4c8:	462a      	mov	r2, r5
 800e4ca:	4621      	mov	r1, r4
 800e4cc:	bf28      	it	cs
 800e4ce:	4632      	movcs	r2, r6
 800e4d0:	f7ff fbec 	bl	800dcac <memcpy>
 800e4d4:	4621      	mov	r1, r4
 800e4d6:	4640      	mov	r0, r8
 800e4d8:	f7ff fbf6 	bl	800dcc8 <_free_r>
 800e4dc:	463c      	mov	r4, r7
 800e4de:	e7e0      	b.n	800e4a2 <_realloc_r+0x1e>

0800e4e0 <memmove>:
 800e4e0:	4288      	cmp	r0, r1
 800e4e2:	b510      	push	{r4, lr}
 800e4e4:	eb01 0402 	add.w	r4, r1, r2
 800e4e8:	d902      	bls.n	800e4f0 <memmove+0x10>
 800e4ea:	4284      	cmp	r4, r0
 800e4ec:	4623      	mov	r3, r4
 800e4ee:	d807      	bhi.n	800e500 <memmove+0x20>
 800e4f0:	1e43      	subs	r3, r0, #1
 800e4f2:	42a1      	cmp	r1, r4
 800e4f4:	d008      	beq.n	800e508 <memmove+0x28>
 800e4f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4fe:	e7f8      	b.n	800e4f2 <memmove+0x12>
 800e500:	4402      	add	r2, r0
 800e502:	4601      	mov	r1, r0
 800e504:	428a      	cmp	r2, r1
 800e506:	d100      	bne.n	800e50a <memmove+0x2a>
 800e508:	bd10      	pop	{r4, pc}
 800e50a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e50e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e512:	e7f7      	b.n	800e504 <memmove+0x24>

0800e514 <_sbrk_r>:
 800e514:	b538      	push	{r3, r4, r5, lr}
 800e516:	4d06      	ldr	r5, [pc, #24]	@ (800e530 <_sbrk_r+0x1c>)
 800e518:	2300      	movs	r3, #0
 800e51a:	4604      	mov	r4, r0
 800e51c:	4608      	mov	r0, r1
 800e51e:	602b      	str	r3, [r5, #0]
 800e520:	f7f6 fb90 	bl	8004c44 <_sbrk>
 800e524:	1c43      	adds	r3, r0, #1
 800e526:	d102      	bne.n	800e52e <_sbrk_r+0x1a>
 800e528:	682b      	ldr	r3, [r5, #0]
 800e52a:	b103      	cbz	r3, 800e52e <_sbrk_r+0x1a>
 800e52c:	6023      	str	r3, [r4, #0]
 800e52e:	bd38      	pop	{r3, r4, r5, pc}
 800e530:	200059bc 	.word	0x200059bc

0800e534 <_malloc_usable_size_r>:
 800e534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e538:	1f18      	subs	r0, r3, #4
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	bfbc      	itt	lt
 800e53e:	580b      	ldrlt	r3, [r1, r0]
 800e540:	18c0      	addlt	r0, r0, r3
 800e542:	4770      	bx	lr

0800e544 <_init>:
 800e544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e546:	bf00      	nop
 800e548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e54a:	bc08      	pop	{r3}
 800e54c:	469e      	mov	lr, r3
 800e54e:	4770      	bx	lr

0800e550 <_fini>:
 800e550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e552:	bf00      	nop
 800e554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e556:	bc08      	pop	{r3}
 800e558:	469e      	mov	lr, r3
 800e55a:	4770      	bx	lr
