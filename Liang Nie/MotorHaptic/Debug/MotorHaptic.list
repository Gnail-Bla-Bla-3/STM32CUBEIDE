
MotorHaptic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf5c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800d0ec  0800d0ec  0000e0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d244  0800d244  0000f07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d244  0800d244  0000e244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d24c  0800d24c  0000f07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d24c  0800d24c  0000e24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d250  0800d250  0000e250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800d254  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f07c  2**0
                  CONTENTS
 10 .bss          0000570c  2000007c  2000007c  0000f07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005788  20005788  0000f07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025856  00000000  00000000  0000f0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000054aa  00000000  00000000  00034902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001eb0  00000000  00000000  00039db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017ff  00000000  00000000  0003bc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261e3  00000000  00000000  0003d45f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025b9d  00000000  00000000  00063642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0eff  00000000  00000000  000891df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016a0de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008578  00000000  00000000  0016a124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0017269c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d0d4 	.word	0x0800d0d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800d0d4 	.word	0x0800d0d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000574:	4b04      	ldr	r3, [pc, #16]	@ (8000588 <BMI088_ACCEL_NS_L+0x18>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a04      	ldr	r2, [pc, #16]	@ (800058c <BMI088_ACCEL_NS_L+0x1c>)
 800057a:	8811      	ldrh	r1, [r2, #0]
 800057c:	2200      	movs	r2, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f005 f99e 	bl	80058c0 <HAL_GPIO_WritePin>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000000 	.word	0x20000000
 800058c:	20000004 	.word	0x20000004

08000590 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8000594:	4b04      	ldr	r3, [pc, #16]	@ (80005a8 <BMI088_ACCEL_NS_H+0x18>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a04      	ldr	r2, [pc, #16]	@ (80005ac <BMI088_ACCEL_NS_H+0x1c>)
 800059a:	8811      	ldrh	r1, [r2, #0]
 800059c:	2201      	movs	r2, #1
 800059e:	4618      	mov	r0, r3
 80005a0:	f005 f98e 	bl	80058c0 <HAL_GPIO_WritePin>
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000000 	.word	0x20000000
 80005ac:	20000004 	.word	0x20000004

080005b0 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 80005b4:	4b04      	ldr	r3, [pc, #16]	@ (80005c8 <BMI088_GYRO_NS_L+0x18>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a04      	ldr	r2, [pc, #16]	@ (80005cc <BMI088_GYRO_NS_L+0x1c>)
 80005ba:	8811      	ldrh	r1, [r2, #0]
 80005bc:	2200      	movs	r2, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f005 f97e 	bl	80058c0 <HAL_GPIO_WritePin>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000008 	.word	0x20000008
 80005cc:	2000000c 	.word	0x2000000c

080005d0 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 80005d4:	4b04      	ldr	r3, [pc, #16]	@ (80005e8 <BMI088_GYRO_NS_H+0x18>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a04      	ldr	r2, [pc, #16]	@ (80005ec <BMI088_GYRO_NS_H+0x1c>)
 80005da:	8811      	ldrh	r1, [r2, #0]
 80005dc:	2201      	movs	r2, #1
 80005de:	4618      	mov	r0, r3
 80005e0:	f005 f96e 	bl	80058c0 <HAL_GPIO_WritePin>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000008 	.word	0x20000008
 80005ec:	2000000c 	.word	0x2000000c

080005f0 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 80005fa:	f107 020f 	add.w	r2, r7, #15
 80005fe:	1df9      	adds	r1, r7, #7
 8000600:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	4803      	ldr	r0, [pc, #12]	@ (8000618 <BMI088_read_write_byte+0x28>)
 800060a:	f006 fc81 	bl	8006f10 <HAL_SPI_TransmitReceive>
    return rx_data;
 800060e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000074c 	.word	0x2000074c

0800061c <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 8000620:	4a05      	ldr	r2, [pc, #20]	@ (8000638 <IMU_get_temp+0x1c>)
 8000622:	4906      	ldr	r1, [pc, #24]	@ (800063c <IMU_get_temp+0x20>)
 8000624:	4806      	ldr	r0, [pc, #24]	@ (8000640 <IMU_get_temp+0x24>)
 8000626:	f000 f80d 	bl	8000644 <BMI088_read>
	return temp;
 800062a:	4b03      	ldr	r3, [pc, #12]	@ (8000638 <IMU_get_temp+0x1c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	ee07 3a90 	vmov	s15, r3
}
 8000632:	eeb0 0a67 	vmov.f32	s0, s15
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000b0 	.word	0x200000b0
 800063c:	200000a4 	.word	0x200000a4
 8000640:	20000098 	.word	0x20000098

08000644 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 8000650:	4a70      	ldr	r2, [pc, #448]	@ (8000814 <BMI088_read+0x1d0>)
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065a:	6018      	str	r0, [r3, #0]
 800065c:	3304      	adds	r3, #4
 800065e:	8019      	strh	r1, [r3, #0]
 8000660:	3302      	adds	r3, #2
 8000662:	0c0a      	lsrs	r2, r1, #16
 8000664:	701a      	strb	r2, [r3, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 800066a:	f7ff ff81 	bl	8000570 <BMI088_ACCEL_NS_L>
 800066e:	2092      	movs	r0, #146	@ 0x92
 8000670:	f7ff ffbe 	bl	80005f0 <BMI088_read_write_byte>
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	2206      	movs	r2, #6
 800067a:	4619      	mov	r1, r3
 800067c:	2012      	movs	r0, #18
 800067e:	f000 f8cf 	bl	8000820 <BMI088_read_muli_reg>
 8000682:	f7ff ff85 	bl	8000590 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 8000686:	7d7b      	ldrb	r3, [r7, #21]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	b21a      	sxth	r2, r3
 800068c:	7d3b      	ldrb	r3, [r7, #20]
 800068e:	b21b      	sxth	r3, r3
 8000690:	4313      	orrs	r3, r2
 8000692:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000694:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000698:	ee07 3a90 	vmov	s15, r3
 800069c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006a0:	4b5d      	ldr	r3, [pc, #372]	@ (8000818 <BMI088_read+0x1d4>)
 80006a2:	edd3 7a00 	vldr	s15, [r3]
 80006a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 80006b0:	7dfb      	ldrb	r3, [r7, #23]
 80006b2:	021b      	lsls	r3, r3, #8
 80006b4:	b21a      	sxth	r2, r3
 80006b6:	7dbb      	ldrb	r3, [r7, #22]
 80006b8:	b21b      	sxth	r3, r3
 80006ba:	4313      	orrs	r3, r2
 80006bc:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80006be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006c2:	ee07 3a90 	vmov	s15, r3
 80006c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ca:	4b53      	ldr	r3, [pc, #332]	@ (8000818 <BMI088_read+0x1d4>)
 80006cc:	edd3 7a00 	vldr	s15, [r3]
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	3304      	adds	r3, #4
 80006d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006d8:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 80006dc:	7e7b      	ldrb	r3, [r7, #25]
 80006de:	021b      	lsls	r3, r3, #8
 80006e0:	b21a      	sxth	r2, r3
 80006e2:	7e3b      	ldrb	r3, [r7, #24]
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	4313      	orrs	r3, r2
 80006e8:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80006ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006ee:	ee07 3a90 	vmov	s15, r3
 80006f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006f6:	4b48      	ldr	r3, [pc, #288]	@ (8000818 <BMI088_read+0x1d4>)
 80006f8:	edd3 7a00 	vldr	s15, [r3]
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	3308      	adds	r3, #8
 8000700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000704:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 8000708:	f7ff ff52 	bl	80005b0 <BMI088_GYRO_NS_L>
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	2208      	movs	r2, #8
 8000712:	4619      	mov	r1, r3
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f883 	bl	8000820 <BMI088_read_muli_reg>
 800071a:	f7ff ff59 	bl	80005d0 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 800071e:	7d3b      	ldrb	r3, [r7, #20]
 8000720:	2b0f      	cmp	r3, #15
 8000722:	d140      	bne.n	80007a6 <BMI088_read+0x162>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000724:	7dfb      	ldrb	r3, [r7, #23]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	b21a      	sxth	r2, r3
 800072a:	7dbb      	ldrb	r3, [r7, #22]
 800072c:	b21b      	sxth	r3, r3
 800072e:	4313      	orrs	r3, r2
 8000730:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000732:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000736:	ee07 3a90 	vmov	s15, r3
 800073a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800073e:	4b37      	ldr	r3, [pc, #220]	@ (800081c <BMI088_read+0x1d8>)
 8000740:	edd3 7a00 	vldr	s15, [r3]
 8000744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 800074e:	7e7b      	ldrb	r3, [r7, #25]
 8000750:	021b      	lsls	r3, r3, #8
 8000752:	b21a      	sxth	r2, r3
 8000754:	7e3b      	ldrb	r3, [r7, #24]
 8000756:	b21b      	sxth	r3, r3
 8000758:	4313      	orrs	r3, r2
 800075a:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 800075c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000760:	ee07 3a90 	vmov	s15, r3
 8000764:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000768:	4b2c      	ldr	r3, [pc, #176]	@ (800081c <BMI088_read+0x1d8>)
 800076a:	edd3 7a00 	vldr	s15, [r3]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3304      	adds	r3, #4
 8000772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000776:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 800077a:	7efb      	ldrb	r3, [r7, #27]
 800077c:	021b      	lsls	r3, r3, #8
 800077e:	b21a      	sxth	r2, r3
 8000780:	7ebb      	ldrb	r3, [r7, #26]
 8000782:	b21b      	sxth	r3, r3
 8000784:	4313      	orrs	r3, r2
 8000786:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000788:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800078c:	ee07 3a90 	vmov	s15, r3
 8000790:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000794:	4b21      	ldr	r3, [pc, #132]	@ (800081c <BMI088_read+0x1d8>)
 8000796:	edd3 7a00 	vldr	s15, [r3]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	3308      	adds	r3, #8
 800079e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007a2:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 80007a6:	f7ff fee3 	bl	8000570 <BMI088_ACCEL_NS_L>
 80007aa:	20a2      	movs	r0, #162	@ 0xa2
 80007ac:	f7ff ff20 	bl	80005f0 <BMI088_read_write_byte>
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	2202      	movs	r2, #2
 80007b6:	4619      	mov	r1, r3
 80007b8:	2022      	movs	r0, #34	@ 0x22
 80007ba:	f000 f831 	bl	8000820 <BMI088_read_muli_reg>
 80007be:	f7ff fee7 	bl	8000590 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 80007c2:	7d3b      	ldrb	r3, [r7, #20]
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	b21a      	sxth	r2, r3
 80007c8:	7d7b      	ldrb	r3, [r7, #21]
 80007ca:	095b      	lsrs	r3, r3, #5
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 80007d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80007d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80007dc:	db04      	blt.n	80007e8 <BMI088_read+0x1a4>
    {
        bmi088_raw_temp -= 2048;
 80007de:	8bfb      	ldrh	r3, [r7, #30]
 80007e0:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 80007e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80007ec:	ee07 3a90 	vmov	s15, r3
 80007f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007f4:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 80007f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007fc:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8000800:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	edc3 7a00 	vstr	s15, [r3]
}
 800080a:	bf00      	nop
 800080c:	3720      	adds	r7, #32
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	0800d0ec 	.word	0x0800d0ec
 8000818:	20000010 	.word	0x20000010
 800081c:	20000014 	.word	0x20000014

08000820 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	6039      	str	r1, [r7, #0]
 800082a:	71fb      	strb	r3, [r7, #7]
 800082c:	4613      	mov	r3, r2
 800082e:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fed9 	bl	80005f0 <BMI088_read_write_byte>

    while (len != 0)
 800083e:	e00c      	b.n	800085a <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8000840:	2055      	movs	r0, #85	@ 0x55
 8000842:	f7ff fed5 	bl	80005f0 <BMI088_read_write_byte>
 8000846:	4603      	mov	r3, r0
 8000848:	461a      	mov	r2, r3
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	701a      	strb	r2, [r3, #0]
        buf++;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	603b      	str	r3, [r7, #0]
        len--;
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	3b01      	subs	r3, #1
 8000858:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 800085a:	79bb      	ldrb	r3, [r7, #6]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1ef      	bne.n	8000840 <BMI088_read_muli_reg+0x20>
    }
}
 8000860:	bf00      	nop
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <HAL_CAN_RxFifo0MsgPendingCallback>:


extern robot_status_t robot_status;
extern power_heat_data_t power_heat_data;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	@ 0x30
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	f107 0210 	add.w	r2, r7, #16
 800087c:	2100      	movs	r1, #0
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f003 fdef 	bl	8004462 <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800088a:	d813      	bhi.n	80008b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 800088c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000890:	f240 809c 	bls.w	80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 8000894:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000898:	2b03      	cmp	r3, #3
 800089a:	f200 8097 	bhi.w	80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 800089e:	a201      	add	r2, pc, #4	@ (adr r2, 80008a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80008a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a4:	080009a9 	.word	0x080009a9
 80008a8:	080009bb 	.word	0x080009bb
 80008ac:	080009cd 	.word	0x080009cd
 80008b0:	080009cd 	.word	0x080009cd
 80008b4:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 80008b8:	2b0a      	cmp	r3, #10
 80008ba:	f200 8087 	bhi.w	80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
            uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	3b01      	subs	r3, #1
 80008c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (hcan == &hcan1) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a44      	ldr	r2, [pc, #272]	@ (80009dc <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d131      	bne.n	8000934 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
                //memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
                //memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
                get_motor_feedback(&motorFeedback[0][i], rx_data);
 80008d0:	7a3b      	ldrb	r3, [r7, #8]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	7a7b      	ldrb	r3, [r7, #9]
 80008d8:	b21b      	sxth	r3, r3
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21a      	sxth	r2, r3
 80008de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008e2:	b291      	uxth	r1, r2
 80008e4:	4a3e      	ldr	r2, [pc, #248]	@ (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80008e6:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 80008ea:	7abb      	ldrb	r3, [r7, #10]
 80008ec:	021b      	lsls	r3, r3, #8
 80008ee:	b219      	sxth	r1, r3
 80008f0:	7afb      	ldrb	r3, [r7, #11]
 80008f2:	b21a      	sxth	r2, r3
 80008f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008f8:	430a      	orrs	r2, r1
 80008fa:	b211      	sxth	r1, r2
 80008fc:	4a38      	ldr	r2, [pc, #224]	@ (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	4413      	add	r3, r2
 8000902:	460a      	mov	r2, r1
 8000904:	805a      	strh	r2, [r3, #2]
 8000906:	7b3b      	ldrb	r3, [r7, #12]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b219      	sxth	r1, r3
 800090c:	7b7b      	ldrb	r3, [r7, #13]
 800090e:	b21a      	sxth	r2, r3
 8000910:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000914:	430a      	orrs	r2, r1
 8000916:	b211      	sxth	r1, r2
 8000918:	4a31      	ldr	r2, [pc, #196]	@ (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	4413      	add	r3, r2
 800091e:	460a      	mov	r2, r1
 8000920:	809a      	strh	r2, [r3, #4]
 8000922:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000926:	7bb9      	ldrb	r1, [r7, #14]
 8000928:	4a2d      	ldr	r2, [pc, #180]	@ (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	4413      	add	r3, r2
 800092e:	460a      	mov	r2, r1
 8000930:	719a      	strb	r2, [r3, #6]
            } else if (hcan == &hcan2) {
                //memcpy(&motorFeedback[1][i], &rx_data[0], 8);
                get_motor_feedback(&motorFeedback[1][i], rx_data);
                //usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
            }
            break;
 8000932:	e04d      	b.n	80009d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
            } else if (hcan == &hcan2) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a2b      	ldr	r2, [pc, #172]	@ (80009e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d149      	bne.n	80009d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
                get_motor_feedback(&motorFeedback[1][i], rx_data);
 800093c:	7a3b      	ldrb	r3, [r7, #8]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	b21a      	sxth	r2, r3
 8000942:	7a7b      	ldrb	r3, [r7, #9]
 8000944:	b21b      	sxth	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b21a      	sxth	r2, r3
 800094a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800094e:	b291      	uxth	r1, r2
 8000950:	4a23      	ldr	r2, [pc, #140]	@ (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8000952:	330b      	adds	r3, #11
 8000954:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8000958:	7abb      	ldrb	r3, [r7, #10]
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	b219      	sxth	r1, r3
 800095e:	7afb      	ldrb	r3, [r7, #11]
 8000960:	b21a      	sxth	r2, r3
 8000962:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000966:	430a      	orrs	r2, r1
 8000968:	b211      	sxth	r1, r2
 800096a:	4a1d      	ldr	r2, [pc, #116]	@ (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800096c:	330b      	adds	r3, #11
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	4413      	add	r3, r2
 8000972:	460a      	mov	r2, r1
 8000974:	805a      	strh	r2, [r3, #2]
 8000976:	7b3b      	ldrb	r3, [r7, #12]
 8000978:	021b      	lsls	r3, r3, #8
 800097a:	b219      	sxth	r1, r3
 800097c:	7b7b      	ldrb	r3, [r7, #13]
 800097e:	b21a      	sxth	r2, r3
 8000980:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000984:	430a      	orrs	r2, r1
 8000986:	b211      	sxth	r1, r2
 8000988:	4a15      	ldr	r2, [pc, #84]	@ (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800098a:	330b      	adds	r3, #11
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	4413      	add	r3, r2
 8000990:	460a      	mov	r2, r1
 8000992:	809a      	strh	r2, [r3, #4]
 8000994:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000998:	7bb9      	ldrb	r1, [r7, #14]
 800099a:	4a11      	ldr	r2, [pc, #68]	@ (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800099c:	330b      	adds	r3, #11
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	4413      	add	r3, r2
 80009a2:	460a      	mov	r2, r1
 80009a4:	719a      	strb	r2, [r3, #6]
            break;
 80009a6:	e013      	b.n	80009d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
        }
        case CAN_POWER_ID: {

            memcpy(&power_heat_data, &rx_data, 8);
 80009a8:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80009aa:	461a      	mov	r2, r3
 80009ac:	f107 0308 	add.w	r3, r7, #8
 80009b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009b4:	e882 0003 	stmia.w	r2, {r0, r1}
            break;
 80009b8:	e00b      	b.n	80009d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
        }
        case CAN_HEAT_ID: {
            memcpy((&power_heat_data.buffer_energy), &rx_data, 8);
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80009bc:	3308      	adds	r3, #8
 80009be:	f107 0208 	add.w	r2, r7, #8
 80009c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009c6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80009ca:	e002      	b.n	80009d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
            //memcpy((&robot_status.shooter_barrel_heat_limit), &rx_data, 6);
            break;
        }

        default: {
            break;
 80009cc:	bf00      	nop
 80009ce:	e000      	b.n	80009d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
            break;
 80009d0:	bf00      	nop
        }
    }
}
 80009d2:	bf00      	nop
 80009d4:	3730      	adds	r7, #48	@ 0x30
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200006a8 	.word	0x200006a8
 80009e0:	20000104 	.word	0x20000104
 80009e4:	200006d0 	.word	0x200006d0
 80009e8:	20000514 	.word	0x20000514

080009ec <CAN_DriveMotor>:
		HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
	} else {      // do nothing
	}
}

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4604      	mov	r4, r0
 80009f4:	4608      	mov	r0, r1
 80009f6:	4611      	mov	r1, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	4623      	mov	r3, r4
 80009fc:	71fb      	strb	r3, [r7, #7]
 80009fe:	4603      	mov	r3, r0
 8000a00:	80bb      	strh	r3, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	807b      	strh	r3, [r7, #2]
 8000a06:	4613      	mov	r3, r2
 8000a08:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    MotorTransmitHeader.StdId = headerID;
 8000a0a:	88bb      	ldrh	r3, [r7, #4]
 8000a0c:	4a27      	ldr	r2, [pc, #156]	@ (8000aac <CAN_DriveMotor+0xc0>)
 8000a0e:	6013      	str	r3, [r2, #0]
    MotorTransmitHeader.IDE = CAN_ID_STD;
 8000a10:	4b26      	ldr	r3, [pc, #152]	@ (8000aac <CAN_DriveMotor+0xc0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
    MotorTransmitHeader.RTR = CAN_RTR_DATA;
 8000a16:	4b25      	ldr	r3, [pc, #148]	@ (8000aac <CAN_DriveMotor+0xc0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
    MotorTransmitHeader.DLC = 0x08;
 8000a1c:	4b23      	ldr	r3, [pc, #140]	@ (8000aac <CAN_DriveMotor+0xc0>)
 8000a1e:	2208      	movs	r2, #8
 8000a20:	611a      	str	r2, [r3, #16]
    //memcpy(&CAN_MotorSendBuffer[0], &m1, 2);
    //memcpy(&CAN_MotorSendBuffer[2], &m2, 2);
    //memcpy(&CAN_MotorSendBuffer[4], &m3, 2);
    //memcpy(&CAN_MotorSendBuffer[6], &m4, 2);     // first 8 bits and last 8 bits of each int16_t is flipped, kms
    CAN_MotorSendBuffer[0] = m1 >> 8;
 8000a22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a26:	121b      	asrs	r3, r3, #8
 8000a28:	b21b      	sxth	r3, r3
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	4b20      	ldr	r3, [pc, #128]	@ (8000ab0 <CAN_DriveMotor+0xc4>)
 8000a2e:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 8000a30:	887b      	ldrh	r3, [r7, #2]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab0 <CAN_DriveMotor+0xc4>)
 8000a36:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 8000a38:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a3c:	121b      	asrs	r3, r3, #8
 8000a3e:	b21b      	sxth	r3, r3
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <CAN_DriveMotor+0xc4>)
 8000a44:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 8000a46:	883b      	ldrh	r3, [r7, #0]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4b19      	ldr	r3, [pc, #100]	@ (8000ab0 <CAN_DriveMotor+0xc4>)
 8000a4c:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 8000a4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000a52:	121b      	asrs	r3, r3, #8
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <CAN_DriveMotor+0xc4>)
 8000a5a:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 8000a5c:	8c3b      	ldrh	r3, [r7, #32]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <CAN_DriveMotor+0xc4>)
 8000a62:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 8000a64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000a68:	121b      	asrs	r3, r3, #8
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <CAN_DriveMotor+0xc4>)
 8000a70:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 8000a72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <CAN_DriveMotor+0xc4>)
 8000a78:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d107      	bne.n	8000a90 <CAN_DriveMotor+0xa4>
    	HAL_CAN_AddTxMessage(&CAN_1, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <CAN_DriveMotor+0xc4>)
 8000a86:	4909      	ldr	r1, [pc, #36]	@ (8000aac <CAN_DriveMotor+0xc0>)
 8000a88:	480a      	ldr	r0, [pc, #40]	@ (8000ab4 <CAN_DriveMotor+0xc8>)
 8000a8a:	f003 fc0f 	bl	80042ac <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
    } else {      // do nothing
    }
}
 8000a8e:	e009      	b.n	8000aa4 <CAN_DriveMotor+0xb8>
    } else if (bus == 2) {
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d106      	bne.n	8000aa4 <CAN_DriveMotor+0xb8>
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	4a05      	ldr	r2, [pc, #20]	@ (8000ab0 <CAN_DriveMotor+0xc4>)
 8000a9c:	4903      	ldr	r1, [pc, #12]	@ (8000aac <CAN_DriveMotor+0xc0>)
 8000a9e:	4806      	ldr	r0, [pc, #24]	@ (8000ab8 <CAN_DriveMotor+0xcc>)
 8000aa0:	f003 fc04 	bl	80042ac <HAL_CAN_AddTxMessage>
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd90      	pop	{r4, r7, pc}
 8000aac:	200000b4 	.word	0x200000b4
 8000ab0:	200000cc 	.word	0x200000cc
 8000ab4:	200006a8 	.word	0x200006a8
 8000ab8:	200006d0 	.word	0x200006d0

08000abc <CAN_setMotorCtrlVal>:
	}
}


// Max Power *
void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 8000abc:	b5b0      	push	{r4, r5, r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af02      	add	r7, sp, #8
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4608      	mov	r0, r1
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4623      	mov	r3, r4
 8000acc:	71fb      	strb	r3, [r7, #7]
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71bb      	strb	r3, [r7, #6]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	717b      	strb	r3, [r7, #5]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 8000ada:	79bb      	ldrb	r3, [r7, #6]
 8000adc:	2b04      	cmp	r3, #4
 8000ade:	f000 8142 	beq.w	8000d66 <CAN_setMotorCtrlVal+0x2aa>
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	f300 81e1 	bgt.w	8000eaa <CAN_setMotorCtrlVal+0x3ee>
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	dc02      	bgt.n	8000af2 <CAN_setMotorCtrlVal+0x36>
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	dc04      	bgt.n	8000afa <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 8000af0:	e1db      	b.n	8000eaa <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	f000 8097 	beq.w	8000c26 <CAN_setMotorCtrlVal+0x16a>
}
 8000af8:	e1d7      	b.n	8000eaa <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8000afa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	dc02      	bgt.n	8000b08 <CAN_setMotorCtrlVal+0x4c>
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	dc05      	bgt.n	8000b12 <CAN_setMotorCtrlVal+0x56>
					break;
 8000b06:	e08c      	b.n	8000c22 <CAN_setMotorCtrlVal+0x166>
 8000b08:	3b05      	subs	r3, #5
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	f200 8089 	bhi.w	8000c22 <CAN_setMotorCtrlVal+0x166>
 8000b10:	e042      	b.n	8000b98 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	1e5a      	subs	r2, r3, #1
 8000b16:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b1a:	1e59      	subs	r1, r3, #1
 8000b1c:	48bd      	ldr	r0, [pc, #756]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000b1e:	4613      	mov	r3, r2
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	4413      	add	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	440b      	add	r3, r1
 8000b28:	887a      	ldrh	r2, [r7, #2]
 8000b2a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	1e5a      	subs	r2, r3, #1
 8000b32:	49b8      	ldr	r1, [pc, #736]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000b34:	4613      	mov	r3, r2
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	4413      	add	r3, r2
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	440b      	add	r3, r1
 8000b3e:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	1e5a      	subs	r2, r3, #1
 8000b46:	49b3      	ldr	r1, [pc, #716]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000b48:	4613      	mov	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4413      	add	r3, r2
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	440b      	add	r3, r1
 8000b52:	3302      	adds	r3, #2
 8000b54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	1e5a      	subs	r2, r3, #1
 8000b5c:	49ad      	ldr	r1, [pc, #692]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000b5e:	4613      	mov	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	4413      	add	r3, r2
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	440b      	add	r3, r1
 8000b68:	3304      	adds	r3, #4
 8000b6a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	1e5a      	subs	r2, r3, #1
 8000b72:	48a8      	ldr	r0, [pc, #672]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000b74:	4613      	mov	r3, r2
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	4413      	add	r3, r2
 8000b7a:	00db      	lsls	r3, r3, #3
 8000b7c:	4403      	add	r3, r0
 8000b7e:	3306      	adds	r3, #6
 8000b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b84:	79f8      	ldrb	r0, [r7, #7]
 8000b86:	9301      	str	r3, [sp, #4]
 8000b88:	9100      	str	r1, [sp, #0]
 8000b8a:	462b      	mov	r3, r5
 8000b8c:	4622      	mov	r2, r4
 8000b8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b92:	f7ff ff2b 	bl	80009ec <CAN_DriveMotor>
					break;
 8000b96:	e045      	b.n	8000c24 <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	1e5a      	subs	r2, r3, #1
 8000b9c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000ba0:	1f59      	subs	r1, r3, #5
 8000ba2:	489c      	ldr	r0, [pc, #624]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	4413      	add	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	440b      	add	r3, r1
 8000bae:	3304      	adds	r3, #4
 8000bb0:	887a      	ldrh	r2, [r7, #2]
 8000bb2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	1e5a      	subs	r2, r3, #1
 8000bba:	4996      	ldr	r1, [pc, #600]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	4413      	add	r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	440b      	add	r3, r1
 8000bc6:	3308      	adds	r3, #8
 8000bc8:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	1e5a      	subs	r2, r3, #1
 8000bd0:	4990      	ldr	r1, [pc, #576]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	4413      	add	r3, r2
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	440b      	add	r3, r1
 8000bdc:	330a      	adds	r3, #10
 8000bde:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	1e5a      	subs	r2, r3, #1
 8000be6:	498b      	ldr	r1, [pc, #556]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	440b      	add	r3, r1
 8000bf2:	330c      	adds	r3, #12
 8000bf4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	1e5a      	subs	r2, r3, #1
 8000bfc:	4885      	ldr	r0, [pc, #532]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000bfe:	4613      	mov	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4413      	add	r3, r2
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	4403      	add	r3, r0
 8000c08:	330e      	adds	r3, #14
 8000c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c0e:	79f8      	ldrb	r0, [r7, #7]
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	9100      	str	r1, [sp, #0]
 8000c14:	462b      	mov	r3, r5
 8000c16:	4622      	mov	r2, r4
 8000c18:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000c1c:	f7ff fee6 	bl	80009ec <CAN_DriveMotor>
					break;
 8000c20:	e000      	b.n	8000c24 <CAN_setMotorCtrlVal+0x168>
					break;
 8000c22:	bf00      	nop
			break;
 8000c24:	e141      	b.n	8000eaa <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8000c26:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000c2a:	2b08      	cmp	r3, #8
 8000c2c:	f000 8097 	beq.w	8000d5e <CAN_setMotorCtrlVal+0x2a2>
 8000c30:	2b08      	cmp	r3, #8
 8000c32:	f300 8096 	bgt.w	8000d62 <CAN_setMotorCtrlVal+0x2a6>
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	dc02      	bgt.n	8000c40 <CAN_setMotorCtrlVal+0x184>
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	dc05      	bgt.n	8000c4a <CAN_setMotorCtrlVal+0x18e>
					break;
 8000c3e:	e090      	b.n	8000d62 <CAN_setMotorCtrlVal+0x2a6>
 8000c40:	3b05      	subs	r3, #5
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	f200 808d 	bhi.w	8000d62 <CAN_setMotorCtrlVal+0x2a6>
 8000c48:	e044      	b.n	8000cd4 <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	1e5a      	subs	r2, r3, #1
 8000c4e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000c52:	1e59      	subs	r1, r3, #1
 8000c54:	486f      	ldr	r0, [pc, #444]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	440b      	add	r3, r1
 8000c60:	3304      	adds	r3, #4
 8000c62:	887a      	ldrh	r2, [r7, #2]
 8000c64:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	4969      	ldr	r1, [pc, #420]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000c6e:	4613      	mov	r3, r2
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	4413      	add	r3, r2
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	440b      	add	r3, r1
 8000c78:	3308      	adds	r3, #8
 8000c7a:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	1e5a      	subs	r2, r3, #1
 8000c82:	4964      	ldr	r1, [pc, #400]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000c84:	4613      	mov	r3, r2
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	4413      	add	r3, r2
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	440b      	add	r3, r1
 8000c8e:	330a      	adds	r3, #10
 8000c90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	1e5a      	subs	r2, r3, #1
 8000c98:	495e      	ldr	r1, [pc, #376]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	440b      	add	r3, r1
 8000ca4:	330c      	adds	r3, #12
 8000ca6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	1e5a      	subs	r2, r3, #1
 8000cae:	4859      	ldr	r0, [pc, #356]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	4403      	add	r3, r0
 8000cba:	330e      	adds	r3, #14
 8000cbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cc0:	79f8      	ldrb	r0, [r7, #7]
 8000cc2:	9301      	str	r3, [sp, #4]
 8000cc4:	9100      	str	r1, [sp, #0]
 8000cc6:	462b      	mov	r3, r5
 8000cc8:	4622      	mov	r2, r4
 8000cca:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000cce:	f7ff fe8d 	bl	80009ec <CAN_DriveMotor>
					break;
 8000cd2:	e047      	b.n	8000d64 <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	1e5a      	subs	r2, r3, #1
 8000cd8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000cdc:	1f59      	subs	r1, r3, #5
 8000cde:	484d      	ldr	r0, [pc, #308]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	3308      	adds	r3, #8
 8000cec:	887a      	ldrh	r2, [r7, #2]
 8000cee:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	1e5a      	subs	r2, r3, #1
 8000cf6:	4947      	ldr	r1, [pc, #284]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	440b      	add	r3, r1
 8000d02:	3310      	adds	r3, #16
 8000d04:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	1e5a      	subs	r2, r3, #1
 8000d0c:	4941      	ldr	r1, [pc, #260]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000d0e:	4613      	mov	r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	4413      	add	r3, r2
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	440b      	add	r3, r1
 8000d18:	3312      	adds	r3, #18
 8000d1a:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	1e5a      	subs	r2, r3, #1
 8000d22:	493c      	ldr	r1, [pc, #240]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000d24:	4613      	mov	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4413      	add	r3, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	440b      	add	r3, r1
 8000d2e:	3314      	adds	r3, #20
 8000d30:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	1e5a      	subs	r2, r3, #1
 8000d38:	4836      	ldr	r0, [pc, #216]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4413      	add	r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	4403      	add	r3, r0
 8000d44:	3316      	adds	r3, #22
 8000d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d4a:	79f8      	ldrb	r0, [r7, #7]
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	9100      	str	r1, [sp, #0]
 8000d50:	462b      	mov	r3, r5
 8000d52:	4622      	mov	r2, r4
 8000d54:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8000d58:	f7ff fe48 	bl	80009ec <CAN_DriveMotor>
					break;
 8000d5c:	e002      	b.n	8000d64 <CAN_setMotorCtrlVal+0x2a8>
					break;
 8000d5e:	bf00      	nop
 8000d60:	e0a3      	b.n	8000eaa <CAN_setMotorCtrlVal+0x3ee>
					break;
 8000d62:	bf00      	nop
			break;
 8000d64:	e0a1      	b.n	8000eaa <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8000d66:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000d6a:	2b08      	cmp	r3, #8
 8000d6c:	f000 8099 	beq.w	8000ea2 <CAN_setMotorCtrlVal+0x3e6>
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	f300 8098 	bgt.w	8000ea6 <CAN_setMotorCtrlVal+0x3ea>
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	dc02      	bgt.n	8000d80 <CAN_setMotorCtrlVal+0x2c4>
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	dc05      	bgt.n	8000d8a <CAN_setMotorCtrlVal+0x2ce>
					break;
 8000d7e:	e092      	b.n	8000ea6 <CAN_setMotorCtrlVal+0x3ea>
 8000d80:	3b05      	subs	r3, #5
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	f200 808f 	bhi.w	8000ea6 <CAN_setMotorCtrlVal+0x3ea>
 8000d88:	e046      	b.n	8000e18 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000d92:	1e59      	subs	r1, r3, #1
 8000d94:	481f      	ldr	r0, [pc, #124]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000d96:	4613      	mov	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	4413      	add	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	440b      	add	r3, r1
 8000da0:	3304      	adds	r3, #4
 8000da2:	887a      	ldrh	r2, [r7, #2]
 8000da4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	1e5a      	subs	r2, r3, #1
 8000dac:	4919      	ldr	r1, [pc, #100]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000dae:	4613      	mov	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4413      	add	r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	440b      	add	r3, r1
 8000db8:	3308      	adds	r3, #8
 8000dba:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	1e5a      	subs	r2, r3, #1
 8000dc2:	4914      	ldr	r1, [pc, #80]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	440b      	add	r3, r1
 8000dce:	330a      	adds	r3, #10
 8000dd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	1e5a      	subs	r2, r3, #1
 8000dd8:	490e      	ldr	r1, [pc, #56]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000dda:	4613      	mov	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	440b      	add	r3, r1
 8000de4:	330c      	adds	r3, #12
 8000de6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	1e5a      	subs	r2, r3, #1
 8000dee:	4809      	ldr	r0, [pc, #36]	@ (8000e14 <CAN_setMotorCtrlVal+0x358>)
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	4403      	add	r3, r0
 8000dfa:	330e      	adds	r3, #14
 8000dfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e00:	79f8      	ldrb	r0, [r7, #7]
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	9100      	str	r1, [sp, #0]
 8000e06:	462b      	mov	r3, r5
 8000e08:	4622      	mov	r2, r4
 8000e0a:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8000e0e:	f7ff fded 	bl	80009ec <CAN_DriveMotor>
					break;
 8000e12:	e049      	b.n	8000ea8 <CAN_setMotorCtrlVal+0x3ec>
 8000e14:	200000d4 	.word	0x200000d4
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	1e5a      	subs	r2, r3, #1
 8000e1c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000e20:	1f59      	subs	r1, r3, #5
 8000e22:	4824      	ldr	r0, [pc, #144]	@ (8000eb4 <CAN_setMotorCtrlVal+0x3f8>)
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	3308      	adds	r3, #8
 8000e30:	887a      	ldrh	r2, [r7, #2]
 8000e32:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	1e5a      	subs	r2, r3, #1
 8000e3a:	491e      	ldr	r1, [pc, #120]	@ (8000eb4 <CAN_setMotorCtrlVal+0x3f8>)
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4413      	add	r3, r2
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	440b      	add	r3, r1
 8000e46:	3310      	adds	r3, #16
 8000e48:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	1e5a      	subs	r2, r3, #1
 8000e50:	4918      	ldr	r1, [pc, #96]	@ (8000eb4 <CAN_setMotorCtrlVal+0x3f8>)
 8000e52:	4613      	mov	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	440b      	add	r3, r1
 8000e5c:	3312      	adds	r3, #18
 8000e5e:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	1e5a      	subs	r2, r3, #1
 8000e66:	4913      	ldr	r1, [pc, #76]	@ (8000eb4 <CAN_setMotorCtrlVal+0x3f8>)
 8000e68:	4613      	mov	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	440b      	add	r3, r1
 8000e72:	3314      	adds	r3, #20
 8000e74:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	1e5a      	subs	r2, r3, #1
 8000e7c:	480d      	ldr	r0, [pc, #52]	@ (8000eb4 <CAN_setMotorCtrlVal+0x3f8>)
 8000e7e:	4613      	mov	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4403      	add	r3, r0
 8000e88:	3316      	adds	r3, #22
 8000e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e8e:	79f8      	ldrb	r0, [r7, #7]
 8000e90:	9301      	str	r3, [sp, #4]
 8000e92:	9100      	str	r1, [sp, #0]
 8000e94:	462b      	mov	r3, r5
 8000e96:	4622      	mov	r2, r4
 8000e98:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8000e9c:	f7ff fda6 	bl	80009ec <CAN_DriveMotor>
					break;
 8000ea0:	e002      	b.n	8000ea8 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8000ea2:	bf00      	nop
 8000ea4:	e000      	b.n	8000ea8 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8000ea6:	bf00      	nop
			break;
 8000ea8:	bf00      	nop
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200000d4 	.word	0x200000d4

08000eb8 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b08b      	sub	sp, #44	@ 0x2c
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	eef0 6a40 	vmov.f32	s13, s0
 8000eca:	eeb0 7a60 	vmov.f32	s14, s1
 8000ece:	eef0 7a41 	vmov.f32	s15, s2
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	75fb      	strb	r3, [r7, #23]
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	75bb      	strb	r3, [r7, #22]
 8000eda:	460b      	mov	r3, r1
 8000edc:	757b      	strb	r3, [r7, #21]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	827b      	strh	r3, [r7, #18]
 8000ee2:	edc7 6a01 	vstr	s13, [r7, #4]
 8000ee6:	ed87 7a02 	vstr	s14, [r7, #8]
 8000eea:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 8000ef2:	7dfb      	ldrb	r3, [r7, #23]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 8000ef8:	7dbb      	ldrb	r3, [r7, #22]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	dc02      	bgt.n	8000f04 <calcRPM_PID+0x4c>
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	dc04      	bgt.n	8000f0c <calcRPM_PID+0x54>
 8000f02:	e00d      	b.n	8000f20 <calcRPM_PID+0x68>
 8000f04:	3b03      	subs	r3, #3
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d80a      	bhi.n	8000f20 <calcRPM_PID+0x68>
 8000f0a:	e004      	b.n	8000f16 <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 8000f0c:	7d7b      	ldrb	r3, [r7, #21]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f14:	e009      	b.n	8000f2a <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 8000f16:	7d7b      	ldrb	r3, [r7, #21]
 8000f18:	3303      	adds	r3, #3
 8000f1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f1e:	e004      	b.n	8000f2a <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 8000f20:	7d7b      	ldrb	r3, [r7, #21]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f28:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 8000f2a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8000f2e:	7ffa      	ldrb	r2, [r7, #31]
 8000f30:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8000f34:	4c70      	ldr	r4, [pc, #448]	@ (80010f8 <calcRPM_PID+0x240>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	4403      	add	r3, r0
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	4423      	add	r3, r4
 8000f46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f4a:	7ffa      	ldrb	r2, [r7, #31]
 8000f4c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8000f50:	1ac9      	subs	r1, r1, r3
 8000f52:	4c6a      	ldr	r4, [pc, #424]	@ (80010fc <calcRPM_PID+0x244>)
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4403      	add	r3, r0
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	4423      	add	r3, r4
 8000f64:	3304      	adds	r3, #4
 8000f66:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8000f68:	7ffa      	ldrb	r2, [r7, #31]
 8000f6a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8000f6e:	4863      	ldr	r0, [pc, #396]	@ (80010fc <calcRPM_PID+0x244>)
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	011b      	lsls	r3, r3, #4
 8000f7e:	4403      	add	r3, r0
 8000f80:	3308      	adds	r3, #8
 8000f82:	6819      	ldr	r1, [r3, #0]
 8000f84:	7ffa      	ldrb	r2, [r7, #31]
 8000f86:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8000f8a:	4c5c      	ldr	r4, [pc, #368]	@ (80010fc <calcRPM_PID+0x244>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	4403      	add	r3, r0
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	4423      	add	r3, r4
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	7ffa      	ldrb	r2, [r7, #31]
 8000fa2:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8000fa6:	4419      	add	r1, r3
 8000fa8:	4c54      	ldr	r4, [pc, #336]	@ (80010fc <calcRPM_PID+0x244>)
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4403      	add	r3, r0
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	4423      	add	r3, r4
 8000fba:	3308      	adds	r3, #8
 8000fbc:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 8000fbe:	7ffa      	ldrb	r2, [r7, #31]
 8000fc0:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8000fc4:	484d      	ldr	r0, [pc, #308]	@ (80010fc <calcRPM_PID+0x244>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	4403      	add	r3, r0
 8000fd6:	6819      	ldr	r1, [r3, #0]
 8000fd8:	7ffa      	ldrb	r2, [r7, #31]
 8000fda:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8000fde:	4c46      	ldr	r4, [pc, #280]	@ (80010f8 <calcRPM_PID+0x240>)
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	4403      	add	r3, r0
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	4423      	add	r3, r4
 8000ff0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ff4:	7ffa      	ldrb	r2, [r7, #31]
 8000ff6:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8000ffa:	1ac9      	subs	r1, r1, r3
 8000ffc:	4c3f      	ldr	r4, [pc, #252]	@ (80010fc <calcRPM_PID+0x244>)
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4413      	add	r3, r2
 8001008:	4403      	add	r3, r0
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	4423      	add	r3, r4
 800100e:	330c      	adds	r3, #12
 8001010:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 8001012:	7ffa      	ldrb	r2, [r7, #31]
 8001014:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001018:	4837      	ldr	r0, [pc, #220]	@ (80010f8 <calcRPM_PID+0x240>)
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	440b      	add	r3, r1
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4403      	add	r3, r0
 800102a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800102e:	7ffa      	ldrb	r2, [r7, #31]
 8001030:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001034:	461c      	mov	r4, r3
 8001036:	4831      	ldr	r0, [pc, #196]	@ (80010fc <calcRPM_PID+0x244>)
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	440b      	add	r3, r1
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	4403      	add	r3, r0
 8001048:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 800104a:	ed97 7a01 	vldr	s14, [r7, #4]
 800104e:	7ffa      	ldrb	r2, [r7, #31]
 8001050:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001054:	4829      	ldr	r0, [pc, #164]	@ (80010fc <calcRPM_PID+0x244>)
 8001056:	4613      	mov	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	4413      	add	r3, r2
 8001060:	440b      	add	r3, r1
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	4403      	add	r3, r0
 8001066:	3304      	adds	r3, #4
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	ee07 3a90 	vmov	s15, r3
 800106e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001072:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001076:	edd7 6a02 	vldr	s13, [r7, #8]
 800107a:	7ffa      	ldrb	r2, [r7, #31]
 800107c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001080:	481e      	ldr	r0, [pc, #120]	@ (80010fc <calcRPM_PID+0x244>)
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	440b      	add	r3, r1
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	4403      	add	r3, r0
 8001092:	3308      	adds	r3, #8
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010a6:	edd7 6a03 	vldr	s13, [r7, #12]
 80010aa:	7ffa      	ldrb	r2, [r7, #31]
 80010ac:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80010b0:	4812      	ldr	r0, [pc, #72]	@ (80010fc <calcRPM_PID+0x244>)
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	440b      	add	r3, r1
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	4403      	add	r3, r0
 80010c2:	330c      	adds	r3, #12
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010da:	ee17 3a90 	vmov	r3, s15
 80010de:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 80010e0:	7dbb      	ldrb	r3, [r7, #22]
 80010e2:	6a39      	ldr	r1, [r7, #32]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 f80b 	bl	8001100 <applyCtrlLimit>
 80010ea:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 80010ec:	6a3b      	ldr	r3, [r7, #32]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	372c      	adds	r7, #44	@ 0x2c
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd90      	pop	{r4, r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000104 	.word	0x20000104
 80010fc:	200001b4 	.word	0x200001b4

08001100 <applyCtrlLimit>:
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
}

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b04      	cmp	r3, #4
 8001110:	d009      	beq.n	8001126 <applyCtrlLimit+0x26>
 8001112:	2b04      	cmp	r3, #4
 8001114:	dc29      	bgt.n	800116a <applyCtrlLimit+0x6a>
 8001116:	2b02      	cmp	r3, #2
 8001118:	dc02      	bgt.n	8001120 <applyCtrlLimit+0x20>
 800111a:	2b00      	cmp	r3, #0
 800111c:	dc03      	bgt.n	8001126 <applyCtrlLimit+0x26>
 800111e:	e024      	b.n	800116a <applyCtrlLimit+0x6a>
 8001120:	2b03      	cmp	r3, #3
 8001122:	d00f      	beq.n	8001144 <applyCtrlLimit+0x44>
 8001124:	e021      	b.n	800116a <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800112c:	dd03      	ble.n	8001136 <applyCtrlLimit+0x36>
				val = 16384;
 800112e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001132:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 8001134:	e016      	b.n	8001164 <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 800113c:	da12      	bge.n	8001164 <applyCtrlLimit+0x64>
				val = -16384;
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <applyCtrlLimit+0x78>)
 8001140:	603b      	str	r3, [r7, #0]
			break;
 8001142:	e00f      	b.n	8001164 <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800114a:	4293      	cmp	r3, r2
 800114c:	dd03      	ble.n	8001156 <applyCtrlLimit+0x56>
				val = 25000;
 800114e:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8001152:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 8001154:	e008      	b.n	8001168 <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	4a08      	ldr	r2, [pc, #32]	@ (800117c <applyCtrlLimit+0x7c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	da04      	bge.n	8001168 <applyCtrlLimit+0x68>
				val = -25000;
 800115e:	4b07      	ldr	r3, [pc, #28]	@ (800117c <applyCtrlLimit+0x7c>)
 8001160:	603b      	str	r3, [r7, #0]
			break;
 8001162:	e001      	b.n	8001168 <applyCtrlLimit+0x68>
			break;
 8001164:	bf00      	nop
 8001166:	e000      	b.n	800116a <applyCtrlLimit+0x6a>
			break;
 8001168:	bf00      	nop
		}
	}
	return val;
 800116a:	683b      	ldr	r3, [r7, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	ffffc000 	.word	0xffffc000
 800117c:	ffff9e58 	.word	0xffff9e58

08001180 <setMotorRPM>:

void setMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b087      	sub	sp, #28
 8001184:	af00      	add	r7, sp, #0
 8001186:	4604      	mov	r4, r0
 8001188:	4608      	mov	r0, r1
 800118a:	4611      	mov	r1, r2
 800118c:	461a      	mov	r2, r3
 800118e:	eef0 6a40 	vmov.f32	s13, s0
 8001192:	eeb0 7a60 	vmov.f32	s14, s1
 8001196:	eef0 7a41 	vmov.f32	s15, s2
 800119a:	4623      	mov	r3, r4
 800119c:	75fb      	strb	r3, [r7, #23]
 800119e:	4603      	mov	r3, r0
 80011a0:	75bb      	strb	r3, [r7, #22]
 80011a2:	460b      	mov	r3, r1
 80011a4:	757b      	strb	r3, [r7, #21]
 80011a6:	4613      	mov	r3, r2
 80011a8:	827b      	strh	r3, [r7, #18]
 80011aa:	edc7 6a01 	vstr	s13, [r7, #4]
 80011ae:	ed87 7a02 	vstr	s14, [r7, #8]
 80011b2:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcRPM_PID(bus, motorType, motorID, RPMtarget, preset));
 80011b6:	edd7 6a01 	vldr	s13, [r7, #4]
 80011ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80011be:	edd7 7a03 	vldr	s15, [r7, #12]
 80011c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011c6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80011ca:	7db9      	ldrb	r1, [r7, #22]
 80011cc:	7df8      	ldrb	r0, [r7, #23]
 80011ce:	eeb0 0a66 	vmov.f32	s0, s13
 80011d2:	eef0 0a47 	vmov.f32	s1, s14
 80011d6:	eeb0 1a67 	vmov.f32	s2, s15
 80011da:	f7ff fe6d 	bl	8000eb8 <calcRPM_PID>
 80011de:	4603      	mov	r3, r0
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80011e6:	7db9      	ldrb	r1, [r7, #22]
 80011e8:	7df8      	ldrb	r0, [r7, #23]
 80011ea:	f7ff fc67 	bl	8000abc <CAN_setMotorCtrlVal>
}
 80011ee:	bf00      	nop
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd90      	pop	{r4, r7, pc}
	...

080011f8 <getRotorPosition>:

void setMotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcPosition_PID(bus, motorType, motorID, positionTarget, preset));
}

uint16_t getRotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
 8001202:	460b      	mov	r3, r1
 8001204:	71bb      	strb	r3, [r7, #6]
 8001206:	4613      	mov	r3, r2
 8001208:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	2b02      	cmp	r3, #2
 800120e:	dc02      	bgt.n	8001216 <getRotorPosition+0x1e>
 8001210:	2b00      	cmp	r3, #0
 8001212:	dc04      	bgt.n	800121e <getRotorPosition+0x26>
 8001214:	e034      	b.n	8001280 <getRotorPosition+0x88>
 8001216:	3b03      	subs	r3, #3
 8001218:	2b01      	cmp	r3, #1
 800121a:	d831      	bhi.n	8001280 <getRotorPosition+0x88>
 800121c:	e016      	b.n	800124c <getRotorPosition+0x54>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 800121e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001222:	2b00      	cmp	r3, #0
 8001224:	dd29      	ble.n	800127a <getRotorPosition+0x82>
 8001226:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800122a:	2b08      	cmp	r3, #8
 800122c:	dc25      	bgt.n	800127a <getRotorPosition+0x82>
				return motorFeedback[bus - 1][motorID - 1].rotor_position;
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	1e5a      	subs	r2, r3, #1
 8001232:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001236:	1e59      	subs	r1, r3, #1
 8001238:	4815      	ldr	r0, [pc, #84]	@ (8001290 <getRotorPosition+0x98>)
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	440b      	add	r3, r1
 8001246:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 800124a:	e01b      	b.n	8001284 <getRotorPosition+0x8c>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 800124c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001250:	2b00      	cmp	r3, #0
 8001252:	dd14      	ble.n	800127e <getRotorPosition+0x86>
 8001254:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001258:	2b07      	cmp	r3, #7
 800125a:	dc10      	bgt.n	800127e <getRotorPosition+0x86>
				return motorFeedback[bus - 1][motorID + 3].rotor_position;
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	1e5a      	subs	r2, r3, #1
 8001260:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001264:	1cd9      	adds	r1, r3, #3
 8001266:	480a      	ldr	r0, [pc, #40]	@ (8001290 <getRotorPosition+0x98>)
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	440b      	add	r3, r1
 8001274:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001278:	e004      	b.n	8001284 <getRotorPosition+0x8c>
			break;
 800127a:	bf00      	nop
 800127c:	e000      	b.n	8001280 <getRotorPosition+0x88>
			}
			break;
 800127e:	bf00      	nop
		}
	}
	return -1;
 8001280:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	20000104 	.word	0x20000104

08001294 <usart_Init>:
pc_control_t pc_control;
custom_client_data_t custom_client_data;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 8001298:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800129c:	4905      	ldr	r1, [pc, #20]	@ (80012b4 <usart_Init+0x20>)
 800129e:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <usart_Init+0x24>)
 80012a0:	f007 f916 	bl	80084d0 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 80012a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012a8:	4904      	ldr	r1, [pc, #16]	@ (80012bc <usart_Init+0x28>)
 80012aa:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <usart_Init+0x2c>)
 80012ac:	f007 f910 	bl	80084d0 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000314 	.word	0x20000314
 80012b8:	2000090c 	.word	0x2000090c
 80012bc:	20000414 	.word	0x20000414
 80012c0:	20000994 	.word	0x20000994

080012c4 <usart_printf>:

void usart_printf(const char *fmt,...) {
 80012c4:	b40f      	push	{r0, r1, r2, r3}
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001300 <usart_printf+0x3c>)
 80012d0:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 80012d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <usart_printf+0x3c>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	68b9      	ldr	r1, [r7, #8]
 80012d8:	480a      	ldr	r0, [pc, #40]	@ (8001304 <usart_printf+0x40>)
 80012da:	f00b fa1b 	bl	800c714 <vsiprintf>
 80012de:	4603      	mov	r3, r0
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <usart_printf+0x44>)
 80012e4:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 80012e6:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <usart_printf+0x44>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	4905      	ldr	r1, [pc, #20]	@ (8001304 <usart_printf+0x40>)
 80012ee:	4807      	ldr	r0, [pc, #28]	@ (800130c <usart_printf+0x48>)
 80012f0:	f007 f870 	bl	80083d4 <HAL_UART_Transmit_DMA>
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012fc:	b004      	add	sp, #16
 80012fe:	4770      	bx	lr
 8001300:	20000540 	.word	0x20000540
 8001304:	20000544 	.word	0x20000544
 8001308:	20000644 	.word	0x20000644
 800130c:	2000090c 	.word	0x2000090c

08001310 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
			}

	}
	*/

}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 800132e:	2301      	movs	r3, #1
 8001330:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8001336:	2301      	movs	r3, #1
 8001338:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 800133a:	2300      	movs	r3, #0
 800133c:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8001352:	463b      	mov	r3, r7
 8001354:	4619      	mov	r1, r3
 8001356:	480f      	ldr	r0, [pc, #60]	@ (8001394 <can_filter_init+0x6c>)
 8001358:	f002 fe84 	bl	8004064 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 800135c:	480d      	ldr	r0, [pc, #52]	@ (8001394 <can_filter_init+0x6c>)
 800135e:	f002 ff61 	bl	8004224 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001362:	2102      	movs	r1, #2
 8001364:	480b      	ldr	r0, [pc, #44]	@ (8001394 <can_filter_init+0x6c>)
 8001366:	f003 f98e 	bl	8004686 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 800136a:	230e      	movs	r3, #14
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 800136e:	230e      	movs	r3, #14
 8001370:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 8001372:	463b      	mov	r3, r7
 8001374:	4619      	mov	r1, r3
 8001376:	4808      	ldr	r0, [pc, #32]	@ (8001398 <can_filter_init+0x70>)
 8001378:	f002 fe74 	bl	8004064 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 800137c:	4806      	ldr	r0, [pc, #24]	@ (8001398 <can_filter_init+0x70>)
 800137e:	f002 ff51 	bl	8004224 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001382:	2102      	movs	r1, #2
 8001384:	4804      	ldr	r0, [pc, #16]	@ (8001398 <can_filter_init+0x70>)
 8001386:	f003 f97e 	bl	8004686 <HAL_CAN_ActivateNotification>
}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	@ 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200006a8 	.word	0x200006a8
 8001398:	200006d0 	.word	0x200006d0

0800139c <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 80013a6:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <imu_pwm_set+0x1c>)
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	6353      	str	r3, [r2, #52]	@ 0x34

}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	40014400 	.word	0x40014400

080013bc <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	4613      	mov	r3, r2
 80013c8:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 80013ca:	4b27      	ldr	r3, [pc, #156]	@ (8001468 <RC_init+0xac>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	695a      	ldr	r2, [r3, #20]
 80013d0:	4b25      	ldr	r3, [pc, #148]	@ (8001468 <RC_init+0xac>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80013d8:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 80013da:	4b23      	ldr	r3, [pc, #140]	@ (8001468 <RC_init+0xac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <RC_init+0xac>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f042 0210 	orr.w	r2, r2, #16
 80013e8:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 80013ea:	4b20      	ldr	r3, [pc, #128]	@ (800146c <RC_init+0xb0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b1e      	ldr	r3, [pc, #120]	@ (800146c <RC_init+0xb0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0201 	bic.w	r2, r2, #1
 80013f8:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 80013fa:	e007      	b.n	800140c <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80013fc:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <RC_init+0xb0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <RC_init+0xb0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0201 	bic.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 800140c:	4b17      	ldr	r3, [pc, #92]	@ (800146c <RC_init+0xb0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 800141a:	4b14      	ldr	r3, [pc, #80]	@ (800146c <RC_init+0xb0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a14      	ldr	r2, [pc, #80]	@ (8001470 <RC_init+0xb4>)
 8001420:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 8001422:	4b12      	ldr	r3, [pc, #72]	@ (800146c <RC_init+0xb0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <RC_init+0xb0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <RC_init+0xb0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	88fa      	ldrh	r2, [r7, #6]
 8001438:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 800143a:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <RC_init+0xb0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <RC_init+0xb0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001448:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 800144a:	4b08      	ldr	r3, [pc, #32]	@ (800146c <RC_init+0xb0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <RC_init+0xb0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f042 0201 	orr.w	r2, r2, #1
 8001458:	601a      	str	r2, [r3, #0]
}
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000950 	.word	0x20000950
 800146c:	20000a98 	.word	0x20000a98
 8001470:	40004804 	.word	0x40004804

08001474 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
    osDelay(500);
 800147c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001480:	f008 fa84 	bl	800998c <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 8001484:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001528 <imu_temp_control_task+0xb4>
 8001488:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 800152c <imu_temp_control_task+0xb8>
 800148c:	4a28      	ldr	r2, [pc, #160]	@ (8001530 <imu_temp_control_task+0xbc>)
 800148e:	2100      	movs	r1, #0
 8001490:	4828      	ldr	r0, [pc, #160]	@ (8001534 <imu_temp_control_task+0xc0>)
 8001492:	f001 f895 	bl	80025c0 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001496:	4b28      	ldr	r3, [pc, #160]	@ (8001538 <imu_temp_control_task+0xc4>)
 8001498:	2210      	movs	r2, #16
 800149a:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800149c:	4826      	ldr	r0, [pc, #152]	@ (8001538 <imu_temp_control_task+0xc4>)
 800149e:	f005 fcae 	bl	8006dfe <HAL_SPI_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <imu_temp_control_task+0x38>
    {
        Error_Handler();
 80014a8:	f001 f884 	bl	80025b4 <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 80014ac:	2000      	movs	r0, #0
 80014ae:	f009 fb8b 	bl	800abc8 <pcTaskGetName>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f009 fc1b 	bl	800acf0 <xTaskGetHandle>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4a1f      	ldr	r2, [pc, #124]	@ (800153c <imu_temp_control_task+0xc8>)
 80014be:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 80014c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001540 <imu_temp_control_task+0xcc>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 80014c6:	bf00      	nop
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014cc:	2001      	movs	r0, #1
 80014ce:	f00a f83b 	bl	800b548 <ulTaskNotifyTake>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d1f7      	bne.n	80014c8 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 80014d8:	f7ff f8a0 	bl	800061c <IMU_get_temp>
 80014dc:	eef0 7a40 	vmov.f32	s15, s0
 80014e0:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8001544 <imu_temp_control_task+0xd0>
 80014e4:	eeb0 0a67 	vmov.f32	s0, s15
 80014e8:	4812      	ldr	r0, [pc, #72]	@ (8001534 <imu_temp_control_task+0xc0>)
 80014ea:	f001 f8c0 	bl	800266e <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <imu_temp_control_task+0xc0>)
 80014f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80014f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fc:	d503      	bpl.n	8001506 <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 80014fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001534 <imu_temp_control_task+0xc0>)
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8001506:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <imu_temp_control_task+0xc0>)
 8001508:	edd3 7a08 	vldr	s15, [r3, #32]
 800150c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001510:	ee17 3a90 	vmov	r3, s15
 8001514:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8001516:	89fb      	ldrh	r3, [r7, #14]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff3f 	bl	800139c <imu_pwm_set>
        osDelay(5);
 800151e:	2005      	movs	r0, #5
 8001520:	f008 fa34 	bl	800998c <osDelay>
    {
 8001524:	e7cf      	b.n	80014c6 <imu_temp_control_task+0x52>
 8001526:	bf00      	nop
 8001528:	45898000 	.word	0x45898000
 800152c:	458ca000 	.word	0x458ca000
 8001530:	0800d154 	.word	0x0800d154
 8001534:	20000650 	.word	0x20000650
 8001538:	2000074c 	.word	0x2000074c
 800153c:	20000648 	.word	0x20000648
 8001540:	2000064c 	.word	0x2000064c
 8001544:	42200000 	.word	0x42200000

08001548 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 8001552:	4b12      	ldr	r3, [pc, #72]	@ (800159c <HAL_GPIO_EXTI_Callback+0x54>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	88fa      	ldrh	r2, [r7, #6]
 8001558:	429a      	cmp	r2, r3
 800155a:	d11b      	bne.n	8001594 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 800155c:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <HAL_GPIO_EXTI_Callback+0x58>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d016      	beq.n	8001594 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001566:	f009 ff61 	bl	800b42c <xTaskGetSchedulerState>
 800156a:	4603      	mov	r3, r0
 800156c:	2b01      	cmp	r3, #1
 800156e:	d011      	beq.n	8001594 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	490c      	ldr	r1, [pc, #48]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x60>)
 8001576:	4618      	mov	r0, r3
 8001578:	f00a f832 	bl	800b5e0 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800157c:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x60>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d007      	beq.n	8001594 <HAL_GPIO_EXTI_Callback+0x4c>
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <HAL_GPIO_EXTI_Callback+0x64>)
 8001586:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	f3bf 8f4f 	dsb	sy
 8001590:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	2000000e 	.word	0x2000000e
 80015a0:	2000064c 	.word	0x2000064c
 80015a4:	20000648 	.word	0x20000648
 80015a8:	20000698 	.word	0x20000698
 80015ac:	e000ed04 	.word	0xe000ed04

080015b0 <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 80015bc:	f107 0308 	add.w	r3, r7, #8
 80015c0:	2206      	movs	r2, #6
 80015c2:	4619      	mov	r1, r3
 80015c4:	2003      	movs	r0, #3
 80015c6:	f000 f845 	bl	8001654 <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 80015ca:	7a7b      	ldrb	r3, [r7, #9]
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	7a3b      	ldrb	r3, [r7, #8]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 80015d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e4:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001650 <ist8310_read_mag+0xa0>
 80015e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 80015f2:	7afb      	ldrb	r3, [r7, #11]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	7abb      	ldrb	r3, [r7, #10]
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 8001600:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3304      	adds	r3, #4
 8001610:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001650 <ist8310_read_mag+0xa0>
 8001614:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001618:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 800161c:	7b7b      	ldrb	r3, [r7, #13]
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b21a      	sxth	r2, r3
 8001622:	7b3b      	ldrb	r3, [r7, #12]
 8001624:	b21b      	sxth	r3, r3
 8001626:	4313      	orrs	r3, r2
 8001628:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 800162a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3308      	adds	r3, #8
 800163a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001650 <ist8310_read_mag+0xa0>
 800163e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001642:	edc3 7a00 	vstr	s15, [r3]
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	3e99999a 	.word	0x3e99999a

08001654 <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af04      	add	r7, sp, #16
 800165a:	4603      	mov	r3, r0
 800165c:	6039      	str	r1, [r7, #0]
 800165e:	71fb      	strb	r3, [r7, #7]
 8001660:	4613      	mov	r3, r2
 8001662:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	b29a      	uxth	r2, r3
 8001668:	79bb      	ldrb	r3, [r7, #6]
 800166a:	b29b      	uxth	r3, r3
 800166c:	210a      	movs	r1, #10
 800166e:	9102      	str	r1, [sp, #8]
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2301      	movs	r3, #1
 8001678:	211c      	movs	r1, #28
 800167a:	4803      	ldr	r0, [pc, #12]	@ (8001688 <ist8310_IIC_read_muli_reg+0x34>)
 800167c:	f004 fa96 	bl	8005bac <HAL_I2C_Mem_Read>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200006f8 	.word	0x200006f8

0800168c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001690:	f002 fb7a 	bl	8003d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001694:	f000 f868 	bl	8001768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001698:	f000 fcea 	bl	8002070 <MX_GPIO_Init>
  MX_DMA_Init();
 800169c:	f000 fc9a 	bl	8001fd4 <MX_DMA_Init>
  MX_CAN1_Init();
 80016a0:	f000 f8ce 	bl	8001840 <MX_CAN1_Init>
  MX_CAN2_Init();
 80016a4:	f000 f902 	bl	80018ac <MX_CAN2_Init>
  MX_SPI1_Init();
 80016a8:	f000 f964 	bl	8001974 <MX_SPI1_Init>
  MX_TIM4_Init();
 80016ac:	f000 fa40 	bl	8001b30 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80016b0:	f000 fc10 	bl	8001ed4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80016b4:	f000 fc64 	bl	8001f80 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80016b8:	f000 f992 	bl	80019e0 <MX_TIM1_Init>
  MX_TIM8_Init();
 80016bc:	f000 fb20 	bl	8001d00 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 80016c0:	f000 fc32 	bl	8001f28 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 80016c4:	f000 fbb8 	bl	8001e38 <MX_TIM10_Init>
  MX_I2C3_Init();
 80016c8:	f000 f926 	bl	8001918 <MX_I2C3_Init>
  MX_TIM5_Init();
 80016cc:	f000 faa8 	bl	8001c20 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 80016d0:	f7ff fe2a 	bl	8001328 <can_filter_init>
  remote_control_init();
 80016d4:	f001 fa54 	bl	8002b80 <remote_control_init>
  usart_Init();
 80016d8:	f7ff fddc 	bl	8001294 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 80016dc:	f001 fa5e 	bl	8002b9c <get_remote_control_point>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a14      	ldr	r2, [pc, #80]	@ (8001734 <main+0xa8>)
 80016e4:	6013      	str	r3, [r2, #0]
  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80016e6:	f008 f875 	bl	80097d4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 80016ea:	4a13      	ldr	r2, [pc, #76]	@ (8001738 <main+0xac>)
 80016ec:	2100      	movs	r1, #0
 80016ee:	4813      	ldr	r0, [pc, #76]	@ (800173c <main+0xb0>)
 80016f0:	f008 f8ba 	bl	8009868 <osThreadNew>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a12      	ldr	r2, [pc, #72]	@ (8001740 <main+0xb4>)
 80016f8:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 80016fa:	4a12      	ldr	r2, [pc, #72]	@ (8001744 <main+0xb8>)
 80016fc:	2100      	movs	r1, #0
 80016fe:	4812      	ldr	r0, [pc, #72]	@ (8001748 <main+0xbc>)
 8001700:	f008 f8b2 	bl	8009868 <osThreadNew>
 8001704:	4603      	mov	r3, r0
 8001706:	4a11      	ldr	r2, [pc, #68]	@ (800174c <main+0xc0>)
 8001708:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 800170a:	4a11      	ldr	r2, [pc, #68]	@ (8001750 <main+0xc4>)
 800170c:	2100      	movs	r1, #0
 800170e:	4811      	ldr	r0, [pc, #68]	@ (8001754 <main+0xc8>)
 8001710:	f008 f8aa 	bl	8009868 <osThreadNew>
 8001714:	4603      	mov	r3, r0
 8001716:	4a10      	ldr	r2, [pc, #64]	@ (8001758 <main+0xcc>)
 8001718:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 800171a:	4a10      	ldr	r2, [pc, #64]	@ (800175c <main+0xd0>)
 800171c:	2100      	movs	r1, #0
 800171e:	4810      	ldr	r0, [pc, #64]	@ (8001760 <main+0xd4>)
 8001720:	f008 f8a2 	bl	8009868 <osThreadNew>
 8001724:	4603      	mov	r3, r0
 8001726:	4a0f      	ldr	r2, [pc, #60]	@ (8001764 <main+0xd8>)
 8001728:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800172a:	f008 f877 	bl	800981c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800172e:	bf00      	nop
 8001730:	e7fd      	b.n	800172e <main+0xa2>
 8001732:	bf00      	nop
 8001734:	20000bc8 	.word	0x20000bc8
 8001738:	0800d160 	.word	0x0800d160
 800173c:	0800227d 	.word	0x0800227d
 8001740:	20000bb8 	.word	0x20000bb8
 8001744:	0800d184 	.word	0x0800d184
 8001748:	0800228d 	.word	0x0800228d
 800174c:	20000bbc 	.word	0x20000bbc
 8001750:	0800d1a8 	.word	0x0800d1a8
 8001754:	08001475 	.word	0x08001475
 8001758:	20000bc0 	.word	0x20000bc0
 800175c:	0800d1cc 	.word	0x0800d1cc
 8001760:	080025a5 	.word	0x080025a5
 8001764:	20000bc4 	.word	0x20000bc4

08001768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b094      	sub	sp, #80	@ 0x50
 800176c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176e:	f107 0320 	add.w	r3, r7, #32
 8001772:	2230      	movs	r2, #48	@ 0x30
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f00a ffd6 	bl	800c728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	4b29      	ldr	r3, [pc, #164]	@ (8001838 <SystemClock_Config+0xd0>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001794:	4a28      	ldr	r2, [pc, #160]	@ (8001838 <SystemClock_Config+0xd0>)
 8001796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800179a:	6413      	str	r3, [r2, #64]	@ 0x40
 800179c:	4b26      	ldr	r3, [pc, #152]	@ (8001838 <SystemClock_Config+0xd0>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	4b23      	ldr	r3, [pc, #140]	@ (800183c <SystemClock_Config+0xd4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a22      	ldr	r2, [pc, #136]	@ (800183c <SystemClock_Config+0xd4>)
 80017b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b20      	ldr	r3, [pc, #128]	@ (800183c <SystemClock_Config+0xd4>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017c4:	2301      	movs	r3, #1
 80017c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ce:	2302      	movs	r3, #2
 80017d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80017d8:	2306      	movs	r3, #6
 80017da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017dc:	23a8      	movs	r3, #168	@ 0xa8
 80017de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017e0:	2302      	movs	r3, #2
 80017e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017e4:	2304      	movs	r3, #4
 80017e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e8:	f107 0320 	add.w	r3, r7, #32
 80017ec:	4618      	mov	r0, r3
 80017ee:	f004 fe87 	bl	8006500 <HAL_RCC_OscConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017f8:	f000 fedc 	bl	80025b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017fc:	230f      	movs	r3, #15
 80017fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001800:	2302      	movs	r3, #2
 8001802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001808:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800180c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800180e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001812:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2105      	movs	r1, #5
 800181a:	4618      	mov	r0, r3
 800181c:	f005 f8e8 	bl	80069f0 <HAL_RCC_ClockConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001826:	f000 fec5 	bl	80025b4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800182a:	f005 f9c7 	bl	8006bbc <HAL_RCC_EnableCSS>
}
 800182e:	bf00      	nop
 8001830:	3750      	adds	r7, #80	@ 0x50
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800
 800183c:	40007000 	.word	0x40007000

08001840 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001844:	4b17      	ldr	r3, [pc, #92]	@ (80018a4 <MX_CAN1_Init+0x64>)
 8001846:	4a18      	ldr	r2, [pc, #96]	@ (80018a8 <MX_CAN1_Init+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800184a:	4b16      	ldr	r3, [pc, #88]	@ (80018a4 <MX_CAN1_Init+0x64>)
 800184c:	2203      	movs	r2, #3
 800184e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001850:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <MX_CAN1_Init+0x64>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001856:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <MX_CAN1_Init+0x64>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <MX_CAN1_Init+0x64>)
 800185e:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8001862:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001864:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <MX_CAN1_Init+0x64>)
 8001866:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800186a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800186c:	4b0d      	ldr	r3, [pc, #52]	@ (80018a4 <MX_CAN1_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001872:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <MX_CAN1_Init+0x64>)
 8001874:	2200      	movs	r2, #0
 8001876:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001878:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <MX_CAN1_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <MX_CAN1_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001884:	4b07      	ldr	r3, [pc, #28]	@ (80018a4 <MX_CAN1_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <MX_CAN1_Init+0x64>)
 800188c:	2200      	movs	r2, #0
 800188e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001890:	4804      	ldr	r0, [pc, #16]	@ (80018a4 <MX_CAN1_Init+0x64>)
 8001892:	f002 faeb 	bl	8003e6c <HAL_CAN_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800189c:	f000 fe8a 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200006a8 	.word	0x200006a8
 80018a8:	40006400 	.word	0x40006400

080018ac <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80018b0:	4b17      	ldr	r3, [pc, #92]	@ (8001910 <MX_CAN2_Init+0x64>)
 80018b2:	4a18      	ldr	r2, [pc, #96]	@ (8001914 <MX_CAN2_Init+0x68>)
 80018b4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 80018b6:	4b16      	ldr	r3, [pc, #88]	@ (8001910 <MX_CAN2_Init+0x64>)
 80018b8:	2203      	movs	r2, #3
 80018ba:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80018bc:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <MX_CAN2_Init+0x64>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018c2:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <MX_CAN2_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 80018c8:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <MX_CAN2_Init+0x64>)
 80018ca:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80018ce:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <MX_CAN2_Init+0x64>)
 80018d2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80018d6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80018d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001910 <MX_CAN2_Init+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80018de:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <MX_CAN2_Init+0x64>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <MX_CAN2_Init+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <MX_CAN2_Init+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80018f0:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <MX_CAN2_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <MX_CAN2_Init+0x64>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80018fc:	4804      	ldr	r0, [pc, #16]	@ (8001910 <MX_CAN2_Init+0x64>)
 80018fe:	f002 fab5 	bl	8003e6c <HAL_CAN_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001908:	f000 fe54 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200006d0 	.word	0x200006d0
 8001914:	40006800 	.word	0x40006800

08001918 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800191c:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <MX_I2C3_Init+0x50>)
 800191e:	4a13      	ldr	r2, [pc, #76]	@ (800196c <MX_I2C3_Init+0x54>)
 8001920:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001922:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <MX_I2C3_Init+0x50>)
 8001924:	4a12      	ldr	r2, [pc, #72]	@ (8001970 <MX_I2C3_Init+0x58>)
 8001926:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001928:	4b0f      	ldr	r3, [pc, #60]	@ (8001968 <MX_I2C3_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800192e:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <MX_I2C3_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001934:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <MX_I2C3_Init+0x50>)
 8001936:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800193a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800193c:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <MX_I2C3_Init+0x50>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001942:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <MX_I2C3_Init+0x50>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001948:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <MX_I2C3_Init+0x50>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <MX_I2C3_Init+0x50>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001954:	4804      	ldr	r0, [pc, #16]	@ (8001968 <MX_I2C3_Init+0x50>)
 8001956:	f003 ffe5 	bl	8005924 <HAL_I2C_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001960:	f000 fe28 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200006f8 	.word	0x200006f8
 800196c:	40005c00 	.word	0x40005c00
 8001970:	00061a80 	.word	0x00061a80

08001974 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001978:	4b17      	ldr	r3, [pc, #92]	@ (80019d8 <MX_SPI1_Init+0x64>)
 800197a:	4a18      	ldr	r2, [pc, #96]	@ (80019dc <MX_SPI1_Init+0x68>)
 800197c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800197e:	4b16      	ldr	r3, [pc, #88]	@ (80019d8 <MX_SPI1_Init+0x64>)
 8001980:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001984:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001986:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <MX_SPI1_Init+0x64>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <MX_SPI1_Init+0x64>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001992:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <MX_SPI1_Init+0x64>)
 8001994:	2202      	movs	r2, #2
 8001996:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001998:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <MX_SPI1_Init+0x64>)
 800199a:	2201      	movs	r2, #1
 800199c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800199e:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <MX_SPI1_Init+0x64>)
 80019a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80019a6:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <MX_SPI1_Init+0x64>)
 80019a8:	2238      	movs	r2, #56	@ 0x38
 80019aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ac:	4b0a      	ldr	r3, [pc, #40]	@ (80019d8 <MX_SPI1_Init+0x64>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <MX_SPI1_Init+0x64>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b8:	4b07      	ldr	r3, [pc, #28]	@ (80019d8 <MX_SPI1_Init+0x64>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <MX_SPI1_Init+0x64>)
 80019c0:	220a      	movs	r2, #10
 80019c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019c4:	4804      	ldr	r0, [pc, #16]	@ (80019d8 <MX_SPI1_Init+0x64>)
 80019c6:	f005 fa1a 	bl	8006dfe <HAL_SPI_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019d0:	f000 fdf0 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	2000074c 	.word	0x2000074c
 80019dc:	40013000 	.word	0x40013000

080019e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b092      	sub	sp, #72	@ 0x48
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
 8001a00:	615a      	str	r2, [r3, #20]
 8001a02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	2220      	movs	r2, #32
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f00a fe8c 	bl	800c728 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a10:	4b45      	ldr	r3, [pc, #276]	@ (8001b28 <MX_TIM1_Init+0x148>)
 8001a12:	4a46      	ldr	r2, [pc, #280]	@ (8001b2c <MX_TIM1_Init+0x14c>)
 8001a14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001a16:	4b44      	ldr	r3, [pc, #272]	@ (8001b28 <MX_TIM1_Init+0x148>)
 8001a18:	2253      	movs	r2, #83	@ 0x53
 8001a1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1c:	4b42      	ldr	r3, [pc, #264]	@ (8001b28 <MX_TIM1_Init+0x148>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001a22:	4b41      	ldr	r3, [pc, #260]	@ (8001b28 <MX_TIM1_Init+0x148>)
 8001a24:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001a28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b28 <MX_TIM1_Init+0x148>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a30:	4b3d      	ldr	r3, [pc, #244]	@ (8001b28 <MX_TIM1_Init+0x148>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a36:	4b3c      	ldr	r3, [pc, #240]	@ (8001b28 <MX_TIM1_Init+0x148>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a3c:	483a      	ldr	r0, [pc, #232]	@ (8001b28 <MX_TIM1_Init+0x148>)
 8001a3e:	f005 fd8b 	bl	8007558 <HAL_TIM_PWM_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001a48:	f000 fdb4 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a54:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4833      	ldr	r0, [pc, #204]	@ (8001b28 <MX_TIM1_Init+0x148>)
 8001a5c:	f006 fb9e 	bl	800819c <HAL_TIMEx_MasterConfigSynchronization>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001a66:	f000 fda5 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a6a:	2360      	movs	r3, #96	@ 0x60
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a76:	2300      	movs	r3, #0
 8001a78:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4826      	ldr	r0, [pc, #152]	@ (8001b28 <MX_TIM1_Init+0x148>)
 8001a90:	f005 feea 	bl	8007868 <HAL_TIM_PWM_ConfigChannel>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001a9a:	f000 fd8b 	bl	80025b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4820      	ldr	r0, [pc, #128]	@ (8001b28 <MX_TIM1_Init+0x148>)
 8001aa8:	f005 fede 	bl	8007868 <HAL_TIM_PWM_ConfigChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001ab2:	f000 fd7f 	bl	80025b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aba:	2208      	movs	r2, #8
 8001abc:	4619      	mov	r1, r3
 8001abe:	481a      	ldr	r0, [pc, #104]	@ (8001b28 <MX_TIM1_Init+0x148>)
 8001ac0:	f005 fed2 	bl	8007868 <HAL_TIM_PWM_ConfigChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001aca:	f000 fd73 	bl	80025b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4814      	ldr	r0, [pc, #80]	@ (8001b28 <MX_TIM1_Init+0x148>)
 8001ad8:	f005 fec6 	bl	8007868 <HAL_TIM_PWM_ConfigChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001ae2:	f000 fd67 	bl	80025b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001afa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001afe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	4619      	mov	r1, r3
 8001b08:	4807      	ldr	r0, [pc, #28]	@ (8001b28 <MX_TIM1_Init+0x148>)
 8001b0a:	f006 fbc3 	bl	8008294 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001b14:	f000 fd4e 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b18:	4803      	ldr	r0, [pc, #12]	@ (8001b28 <MX_TIM1_Init+0x148>)
 8001b1a:	f001 fd3b 	bl	8003594 <HAL_TIM_MspPostInit>

}
 8001b1e:	bf00      	nop
 8001b20:	3748      	adds	r7, #72	@ 0x48
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200007a4 	.word	0x200007a4
 8001b2c:	40010000 	.word	0x40010000

08001b30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08e      	sub	sp, #56	@ 0x38
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b44:	f107 0320 	add.w	r3, r7, #32
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
 8001b5c:	615a      	str	r2, [r3, #20]
 8001b5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b60:	4b2d      	ldr	r3, [pc, #180]	@ (8001c18 <MX_TIM4_Init+0xe8>)
 8001b62:	4a2e      	ldr	r2, [pc, #184]	@ (8001c1c <MX_TIM4_Init+0xec>)
 8001b64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b66:	4b2c      	ldr	r3, [pc, #176]	@ (8001c18 <MX_TIM4_Init+0xe8>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c18 <MX_TIM4_Init+0xe8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 8001b72:	4b29      	ldr	r3, [pc, #164]	@ (8001c18 <MX_TIM4_Init+0xe8>)
 8001b74:	f245 2207 	movw	r2, #20999	@ 0x5207
 8001b78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7a:	4b27      	ldr	r3, [pc, #156]	@ (8001c18 <MX_TIM4_Init+0xe8>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b80:	4b25      	ldr	r3, [pc, #148]	@ (8001c18 <MX_TIM4_Init+0xe8>)
 8001b82:	2280      	movs	r2, #128	@ 0x80
 8001b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b86:	4824      	ldr	r0, [pc, #144]	@ (8001c18 <MX_TIM4_Init+0xe8>)
 8001b88:	f005 fc2e 	bl	80073e8 <HAL_TIM_Base_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001b92:	f000 fd0f 	bl	80025b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	481d      	ldr	r0, [pc, #116]	@ (8001c18 <MX_TIM4_Init+0xe8>)
 8001ba4:	f005 ff22 	bl	80079ec <HAL_TIM_ConfigClockSource>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001bae:	f000 fd01 	bl	80025b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001bb2:	4819      	ldr	r0, [pc, #100]	@ (8001c18 <MX_TIM4_Init+0xe8>)
 8001bb4:	f005 fcd0 	bl	8007558 <HAL_TIM_PWM_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001bbe:	f000 fcf9 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bca:	f107 0320 	add.w	r3, r7, #32
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4811      	ldr	r0, [pc, #68]	@ (8001c18 <MX_TIM4_Init+0xe8>)
 8001bd2:	f006 fae3 	bl	800819c <HAL_TIMEx_MasterConfigSynchronization>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001bdc:	f000 fcea 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be0:	2360      	movs	r3, #96	@ 0x60
 8001be2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8001be4:	f642 1303 	movw	r3, #10499	@ 0x2903
 8001be8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4807      	ldr	r0, [pc, #28]	@ (8001c18 <MX_TIM4_Init+0xe8>)
 8001bfa:	f005 fe35 	bl	8007868 <HAL_TIM_PWM_ConfigChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001c04:	f000 fcd6 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c08:	4803      	ldr	r0, [pc, #12]	@ (8001c18 <MX_TIM4_Init+0xe8>)
 8001c0a:	f001 fcc3 	bl	8003594 <HAL_TIM_MspPostInit>

}
 8001c0e:	bf00      	nop
 8001c10:	3738      	adds	r7, #56	@ 0x38
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200007ec 	.word	0x200007ec
 8001c1c:	40000800 	.word	0x40000800

08001c20 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	@ 0x28
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c26:	f107 0320 	add.w	r3, r7, #32
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
 8001c3c:	611a      	str	r2, [r3, #16]
 8001c3e:	615a      	str	r2, [r3, #20]
 8001c40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c42:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf8 <MX_TIM5_Init+0xd8>)
 8001c44:	4a2d      	ldr	r2, [pc, #180]	@ (8001cfc <MX_TIM5_Init+0xdc>)
 8001c46:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42;
 8001c48:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf8 <MX_TIM5_Init+0xd8>)
 8001c4a:	222a      	movs	r2, #42	@ 0x2a
 8001c4c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf8 <MX_TIM5_Init+0xd8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8001c54:	4b28      	ldr	r3, [pc, #160]	@ (8001cf8 <MX_TIM5_Init+0xd8>)
 8001c56:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001c5a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5c:	4b26      	ldr	r3, [pc, #152]	@ (8001cf8 <MX_TIM5_Init+0xd8>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c62:	4b25      	ldr	r3, [pc, #148]	@ (8001cf8 <MX_TIM5_Init+0xd8>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001c68:	4823      	ldr	r0, [pc, #140]	@ (8001cf8 <MX_TIM5_Init+0xd8>)
 8001c6a:	f005 fc75 	bl	8007558 <HAL_TIM_PWM_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001c74:	f000 fc9e 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c80:	f107 0320 	add.w	r3, r7, #32
 8001c84:	4619      	mov	r1, r3
 8001c86:	481c      	ldr	r0, [pc, #112]	@ (8001cf8 <MX_TIM5_Init+0xd8>)
 8001c88:	f006 fa88 	bl	800819c <HAL_TIMEx_MasterConfigSynchronization>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001c92:	f000 fc8f 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c96:	2360      	movs	r3, #96	@ 0x60
 8001c98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	2200      	movs	r2, #0
 8001caa:	4619      	mov	r1, r3
 8001cac:	4812      	ldr	r0, [pc, #72]	@ (8001cf8 <MX_TIM5_Init+0xd8>)
 8001cae:	f005 fddb 	bl	8007868 <HAL_TIM_PWM_ConfigChannel>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001cb8:	f000 fc7c 	bl	80025b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	480d      	ldr	r0, [pc, #52]	@ (8001cf8 <MX_TIM5_Init+0xd8>)
 8001cc4:	f005 fdd0 	bl	8007868 <HAL_TIM_PWM_ConfigChannel>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001cce:	f000 fc71 	bl	80025b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4807      	ldr	r0, [pc, #28]	@ (8001cf8 <MX_TIM5_Init+0xd8>)
 8001cda:	f005 fdc5 	bl	8007868 <HAL_TIM_PWM_ConfigChannel>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8001ce4:	f000 fc66 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001ce8:	4803      	ldr	r0, [pc, #12]	@ (8001cf8 <MX_TIM5_Init+0xd8>)
 8001cea:	f001 fc53 	bl	8003594 <HAL_TIM_MspPostInit>

}
 8001cee:	bf00      	nop
 8001cf0:	3728      	adds	r7, #40	@ 0x28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000834 	.word	0x20000834
 8001cfc:	40000c00 	.word	0x40000c00

08001d00 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b092      	sub	sp, #72	@ 0x48
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d06:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
 8001d20:	615a      	str	r2, [r3, #20]
 8001d22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	2220      	movs	r2, #32
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f00a fcfc 	bl	800c728 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d30:	4b3f      	ldr	r3, [pc, #252]	@ (8001e30 <MX_TIM8_Init+0x130>)
 8001d32:	4a40      	ldr	r2, [pc, #256]	@ (8001e34 <MX_TIM8_Init+0x134>)
 8001d34:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8001d36:	4b3e      	ldr	r3, [pc, #248]	@ (8001e30 <MX_TIM8_Init+0x130>)
 8001d38:	2253      	movs	r2, #83	@ 0x53
 8001d3a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3c:	4b3c      	ldr	r3, [pc, #240]	@ (8001e30 <MX_TIM8_Init+0x130>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8001d42:	4b3b      	ldr	r3, [pc, #236]	@ (8001e30 <MX_TIM8_Init+0x130>)
 8001d44:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001d48:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4a:	4b39      	ldr	r3, [pc, #228]	@ (8001e30 <MX_TIM8_Init+0x130>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d50:	4b37      	ldr	r3, [pc, #220]	@ (8001e30 <MX_TIM8_Init+0x130>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d56:	4b36      	ldr	r3, [pc, #216]	@ (8001e30 <MX_TIM8_Init+0x130>)
 8001d58:	2280      	movs	r2, #128	@ 0x80
 8001d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d5c:	4834      	ldr	r0, [pc, #208]	@ (8001e30 <MX_TIM8_Init+0x130>)
 8001d5e:	f005 fbfb 	bl	8007558 <HAL_TIM_PWM_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001d68:	f000 fc24 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d78:	4619      	mov	r1, r3
 8001d7a:	482d      	ldr	r0, [pc, #180]	@ (8001e30 <MX_TIM8_Init+0x130>)
 8001d7c:	f006 fa0e 	bl	800819c <HAL_TIMEx_MasterConfigSynchronization>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001d86:	f000 fc15 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d8a:	2360      	movs	r3, #96	@ 0x60
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d92:	2300      	movs	r3, #0
 8001d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d96:	2300      	movs	r3, #0
 8001d98:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001daa:	2200      	movs	r2, #0
 8001dac:	4619      	mov	r1, r3
 8001dae:	4820      	ldr	r0, [pc, #128]	@ (8001e30 <MX_TIM8_Init+0x130>)
 8001db0:	f005 fd5a 	bl	8007868 <HAL_TIM_PWM_ConfigChannel>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8001dba:	f000 fbfb 	bl	80025b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	481a      	ldr	r0, [pc, #104]	@ (8001e30 <MX_TIM8_Init+0x130>)
 8001dc8:	f005 fd4e 	bl	8007868 <HAL_TIM_PWM_ConfigChannel>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8001dd2:	f000 fbef 	bl	80025b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dda:	2208      	movs	r2, #8
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4814      	ldr	r0, [pc, #80]	@ (8001e30 <MX_TIM8_Init+0x130>)
 8001de0:	f005 fd42 	bl	8007868 <HAL_TIM_PWM_ConfigChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8001dea:	f000 fbe3 	bl	80025b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4807      	ldr	r0, [pc, #28]	@ (8001e30 <MX_TIM8_Init+0x130>)
 8001e12:	f006 fa3f 	bl	8008294 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8001e1c:	f000 fbca 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001e20:	4803      	ldr	r0, [pc, #12]	@ (8001e30 <MX_TIM8_Init+0x130>)
 8001e22:	f001 fbb7 	bl	8003594 <HAL_TIM_MspPostInit>

}
 8001e26:	bf00      	nop
 8001e28:	3748      	adds	r7, #72	@ 0x48
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000087c 	.word	0x2000087c
 8001e34:	40010400 	.word	0x40010400

08001e38 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
 8001e4c:	615a      	str	r2, [r3, #20]
 8001e4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001e50:	4b1e      	ldr	r3, [pc, #120]	@ (8001ecc <MX_TIM10_Init+0x94>)
 8001e52:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed0 <MX_TIM10_Init+0x98>)
 8001e54:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001e56:	4b1d      	ldr	r3, [pc, #116]	@ (8001ecc <MX_TIM10_Init+0x94>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ecc <MX_TIM10_Init+0x94>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8001e62:	4b1a      	ldr	r3, [pc, #104]	@ (8001ecc <MX_TIM10_Init+0x94>)
 8001e64:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001e68:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6a:	4b18      	ldr	r3, [pc, #96]	@ (8001ecc <MX_TIM10_Init+0x94>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e70:	4b16      	ldr	r3, [pc, #88]	@ (8001ecc <MX_TIM10_Init+0x94>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001e76:	4815      	ldr	r0, [pc, #84]	@ (8001ecc <MX_TIM10_Init+0x94>)
 8001e78:	f005 fab6 	bl	80073e8 <HAL_TIM_Base_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001e82:	f000 fb97 	bl	80025b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001e86:	4811      	ldr	r0, [pc, #68]	@ (8001ecc <MX_TIM10_Init+0x94>)
 8001e88:	f005 fb66 	bl	8007558 <HAL_TIM_PWM_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001e92:	f000 fb8f 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e96:	2360      	movs	r3, #96	@ 0x60
 8001e98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4807      	ldr	r0, [pc, #28]	@ (8001ecc <MX_TIM10_Init+0x94>)
 8001eae:	f005 fcdb 	bl	8007868 <HAL_TIM_PWM_ConfigChannel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001eb8:	f000 fb7c 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001ebc:	4803      	ldr	r0, [pc, #12]	@ (8001ecc <MX_TIM10_Init+0x94>)
 8001ebe:	f001 fb69 	bl	8003594 <HAL_TIM_MspPostInit>

}
 8001ec2:	bf00      	nop
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200008c4 	.word	0x200008c4
 8001ed0:	40014400 	.word	0x40014400

08001ed4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001eda:	4a12      	ldr	r2, [pc, #72]	@ (8001f24 <MX_USART1_UART_Init+0x50>)
 8001edc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ede:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001ee0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ee4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001efa:	220c      	movs	r2, #12
 8001efc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efe:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f04:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f0a:	4805      	ldr	r0, [pc, #20]	@ (8001f20 <MX_USART1_UART_Init+0x4c>)
 8001f0c:	f006 fa14 	bl	8008338 <HAL_UART_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f16:	f000 fb4d 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	2000090c 	.word	0x2000090c
 8001f24:	40011000 	.word	0x40011000

08001f28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <MX_USART3_UART_Init+0x4c>)
 8001f2e:	4a12      	ldr	r2, [pc, #72]	@ (8001f78 <MX_USART3_UART_Init+0x50>)
 8001f30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8001f32:	4b10      	ldr	r3, [pc, #64]	@ (8001f74 <MX_USART3_UART_Init+0x4c>)
 8001f34:	4a11      	ldr	r2, [pc, #68]	@ (8001f7c <MX_USART3_UART_Init+0x54>)
 8001f36:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f38:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <MX_USART3_UART_Init+0x4c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <MX_USART3_UART_Init+0x4c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8001f44:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <MX_USART3_UART_Init+0x4c>)
 8001f46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f4c:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <MX_USART3_UART_Init+0x4c>)
 8001f4e:	220c      	movs	r2, #12
 8001f50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f52:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <MX_USART3_UART_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f58:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <MX_USART3_UART_Init+0x4c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f5e:	4805      	ldr	r0, [pc, #20]	@ (8001f74 <MX_USART3_UART_Init+0x4c>)
 8001f60:	f006 f9ea 	bl	8008338 <HAL_UART_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f6a:	f000 fb23 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000950 	.word	0x20000950
 8001f78:	40004800 	.word	0x40004800
 8001f7c:	000186a0 	.word	0x000186a0

08001f80 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <MX_USART6_UART_Init+0x4c>)
 8001f86:	4a12      	ldr	r2, [pc, #72]	@ (8001fd0 <MX_USART6_UART_Init+0x50>)
 8001f88:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001f8a:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <MX_USART6_UART_Init+0x4c>)
 8001f8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f90:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f92:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <MX_USART6_UART_Init+0x4c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f98:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <MX_USART6_UART_Init+0x4c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <MX_USART6_UART_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <MX_USART6_UART_Init+0x4c>)
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001faa:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <MX_USART6_UART_Init+0x4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <MX_USART6_UART_Init+0x4c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001fb6:	4805      	ldr	r0, [pc, #20]	@ (8001fcc <MX_USART6_UART_Init+0x4c>)
 8001fb8:	f006 f9be 	bl	8008338 <HAL_UART_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001fc2:	f000 faf7 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000994 	.word	0x20000994
 8001fd0:	40011400 	.word	0x40011400

08001fd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	4b23      	ldr	r3, [pc, #140]	@ (800206c <MX_DMA_Init+0x98>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	4a22      	ldr	r2, [pc, #136]	@ (800206c <MX_DMA_Init+0x98>)
 8001fe4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fea:	4b20      	ldr	r3, [pc, #128]	@ (800206c <MX_DMA_Init+0x98>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800206c <MX_DMA_Init+0x98>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800206c <MX_DMA_Init+0x98>)
 8002000:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002004:	6313      	str	r3, [r2, #48]	@ 0x30
 8002006:	4b19      	ldr	r3, [pc, #100]	@ (800206c <MX_DMA_Init+0x98>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	2105      	movs	r1, #5
 8002016:	200c      	movs	r0, #12
 8002018:	f002 fe65 	bl	8004ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800201c:	200c      	movs	r0, #12
 800201e:	f002 fe7e 	bl	8004d1e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002022:	2200      	movs	r2, #0
 8002024:	2105      	movs	r1, #5
 8002026:	2039      	movs	r0, #57	@ 0x39
 8002028:	f002 fe5d 	bl	8004ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800202c:	2039      	movs	r0, #57	@ 0x39
 800202e:	f002 fe76 	bl	8004d1e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2105      	movs	r1, #5
 8002036:	203a      	movs	r0, #58	@ 0x3a
 8002038:	f002 fe55 	bl	8004ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800203c:	203a      	movs	r0, #58	@ 0x3a
 800203e:	f002 fe6e 	bl	8004d1e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	2105      	movs	r1, #5
 8002046:	2045      	movs	r0, #69	@ 0x45
 8002048:	f002 fe4d 	bl	8004ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800204c:	2045      	movs	r0, #69	@ 0x45
 800204e:	f002 fe66 	bl	8004d1e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2105      	movs	r1, #5
 8002056:	2046      	movs	r0, #70	@ 0x46
 8002058:	f002 fe45 	bl	8004ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800205c:	2046      	movs	r0, #70	@ 0x46
 800205e:	f002 fe5e 	bl	8004d1e <HAL_NVIC_EnableIRQ>

}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800

08002070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08e      	sub	sp, #56	@ 0x38
 8002074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
 8002084:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	623b      	str	r3, [r7, #32]
 800208a:	4b77      	ldr	r3, [pc, #476]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	4a76      	ldr	r2, [pc, #472]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 8002090:	f043 0302 	orr.w	r3, r3, #2
 8002094:	6313      	str	r3, [r2, #48]	@ 0x30
 8002096:	4b74      	ldr	r3, [pc, #464]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	623b      	str	r3, [r7, #32]
 80020a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	4b70      	ldr	r3, [pc, #448]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	4a6f      	ldr	r2, [pc, #444]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 80020ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ba:	61fb      	str	r3, [r7, #28]
 80020bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	4b69      	ldr	r3, [pc, #420]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	4a68      	ldr	r2, [pc, #416]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ce:	4b66      	ldr	r3, [pc, #408]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	61bb      	str	r3, [r7, #24]
 80020d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	4b62      	ldr	r3, [pc, #392]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	4a61      	ldr	r2, [pc, #388]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	4a5a      	ldr	r2, [pc, #360]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	6313      	str	r3, [r2, #48]	@ 0x30
 8002106:	4b58      	ldr	r3, [pc, #352]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b54      	ldr	r3, [pc, #336]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	4a53      	ldr	r2, [pc, #332]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 800211c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002120:	6313      	str	r3, [r2, #48]	@ 0x30
 8002122:	4b51      	ldr	r3, [pc, #324]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	4b4d      	ldr	r3, [pc, #308]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	4a4c      	ldr	r2, [pc, #304]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 8002138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800213c:	6313      	str	r3, [r2, #48]	@ 0x30
 800213e:	4b4a      	ldr	r3, [pc, #296]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	4b46      	ldr	r3, [pc, #280]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	4a45      	ldr	r2, [pc, #276]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 8002154:	f043 0320 	orr.w	r3, r3, #32
 8002158:	6313      	str	r3, [r2, #48]	@ 0x30
 800215a:	4b43      	ldr	r3, [pc, #268]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	603b      	str	r3, [r7, #0]
 800216a:	4b3f      	ldr	r3, [pc, #252]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	4a3e      	ldr	r2, [pc, #248]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 8002170:	f043 0310 	orr.w	r3, r3, #16
 8002174:	6313      	str	r3, [r2, #48]	@ 0x30
 8002176:	4b3c      	ldr	r3, [pc, #240]	@ (8002268 <MX_GPIO_Init+0x1f8>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002182:	2200      	movs	r2, #0
 8002184:	2140      	movs	r1, #64	@ 0x40
 8002186:	4839      	ldr	r0, [pc, #228]	@ (800226c <MX_GPIO_Init+0x1fc>)
 8002188:	f003 fb9a 	bl	80058c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800218c:	2200      	movs	r2, #0
 800218e:	2110      	movs	r1, #16
 8002190:	4837      	ldr	r0, [pc, #220]	@ (8002270 <MX_GPIO_Init+0x200>)
 8002192:	f003 fb95 	bl	80058c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002196:	2200      	movs	r2, #0
 8002198:	2101      	movs	r1, #1
 800219a:	4836      	ldr	r0, [pc, #216]	@ (8002274 <MX_GPIO_Init+0x204>)
 800219c:	f003 fb90 	bl	80058c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021a0:	2340      	movs	r3, #64	@ 0x40
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a4:	2301      	movs	r3, #1
 80021a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021b4:	4619      	mov	r1, r3
 80021b6:	482d      	ldr	r0, [pc, #180]	@ (800226c <MX_GPIO_Init+0x1fc>)
 80021b8:	f003 f9ce 	bl	8005558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021bc:	2308      	movs	r3, #8
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021ce:	4619      	mov	r1, r3
 80021d0:	4826      	ldr	r0, [pc, #152]	@ (800226c <MX_GPIO_Init+0x1fc>)
 80021d2:	f003 f9c1 	bl	8005558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021d6:	2301      	movs	r3, #1
 80021d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021da:	2300      	movs	r3, #0
 80021dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021e6:	4619      	mov	r1, r3
 80021e8:	4821      	ldr	r0, [pc, #132]	@ (8002270 <MX_GPIO_Init+0x200>)
 80021ea:	f003 f9b5 	bl	8005558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021ee:	2310      	movs	r3, #16
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f2:	2301      	movs	r3, #1
 80021f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002202:	4619      	mov	r1, r3
 8002204:	481a      	ldr	r0, [pc, #104]	@ (8002270 <MX_GPIO_Init+0x200>)
 8002206:	f003 f9a7 	bl	8005558 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 800220a:	2330      	movs	r3, #48	@ 0x30
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800220e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002212:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002218:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800221c:	4619      	mov	r1, r3
 800221e:	4816      	ldr	r0, [pc, #88]	@ (8002278 <MX_GPIO_Init+0x208>)
 8002220:	f003 f99a 	bl	8005558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002224:	2301      	movs	r3, #1
 8002226:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002228:	2301      	movs	r3, #1
 800222a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002238:	4619      	mov	r1, r3
 800223a:	480e      	ldr	r0, [pc, #56]	@ (8002274 <MX_GPIO_Init+0x204>)
 800223c:	f003 f98c 	bl	8005558 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002240:	2200      	movs	r2, #0
 8002242:	2105      	movs	r1, #5
 8002244:	2009      	movs	r0, #9
 8002246:	f002 fd4e 	bl	8004ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800224a:	2009      	movs	r0, #9
 800224c:	f002 fd67 	bl	8004d1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002250:	2200      	movs	r2, #0
 8002252:	2105      	movs	r1, #5
 8002254:	200a      	movs	r0, #10
 8002256:	f002 fd46 	bl	8004ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800225a:	200a      	movs	r0, #10
 800225c:	f002 fd5f 	bl	8004d1e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002260:	bf00      	nop
 8002262:	3738      	adds	r7, #56	@ 0x38
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40023800 	.word	0x40023800
 800226c:	40021800 	.word	0x40021800
 8002270:	40020000 	.word	0x40020000
 8002274:	40020400 	.word	0x40020400
 8002278:	40020800 	.word	0x40020800

0800227c <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	for(;;) {
		osDelay(5);
 8002284:	2005      	movs	r0, #5
 8002286:	f007 fb81 	bl	800998c <osDelay>
 800228a:	e7fb      	b.n	8002284 <TaskMain+0x8>

0800228c <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b092      	sub	sp, #72	@ 0x48
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskChassis */
	PWMInit(&htim1, &htim4, &htim5, &htim8);
 8002294:	4bba      	ldr	r3, [pc, #744]	@ (8002580 <TaskChassis+0x2f4>)
 8002296:	4abb      	ldr	r2, [pc, #748]	@ (8002584 <TaskChassis+0x2f8>)
 8002298:	49bb      	ldr	r1, [pc, #748]	@ (8002588 <TaskChassis+0x2fc>)
 800229a:	48bc      	ldr	r0, [pc, #752]	@ (800258c <TaskChassis+0x300>)
 800229c:	f000 fb30 	bl	8002900 <PWMInit>

	PID_preset_t YPVoltageRPM = {10.0, 0.0, 0.0};
 80022a0:	4bbb      	ldr	r3, [pc, #748]	@ (8002590 <TaskChassis+0x304>)
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	61fb      	str	r3, [r7, #28]
	PID_preset_t CMT = {10, 0.0, 0.0};
 80022b0:	4bb7      	ldr	r3, [pc, #732]	@ (8002590 <TaskChassis+0x304>)
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	613b      	str	r3, [r7, #16]

    int16_t clickScaler = 1;
 80022c0:	2301      	movs	r3, #1
 80022c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    int16_t returnScaler = 2;
 80022c4:	2302      	movs	r3, #2
 80022c6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    int16_t rpmOutput = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	877b      	strh	r3, [r7, #58]	@ 0x3a
    int16_t maxAmp = 1*819.2; // 819.2 is the scaler for 1 amp
 80022cc:	f240 3333 	movw	r3, #819	@ 0x333
 80022d0:	873b      	strh	r3, [r7, #56]	@ 0x38
    	// usart_printf("Beans %d\r\n", getMotorRPM(Bus1, M2006, 5));




    	uint16_t currentPos = getRotorPosition(Bus1, M2006, 5);
 80022d2:	2205      	movs	r2, #5
 80022d4:	2102      	movs	r1, #2
 80022d6:	2001      	movs	r0, #1
 80022d8:	f7fe ff8e 	bl	80011f8 <getRotorPosition>
 80022dc:	4603      	mov	r3, r0
 80022de:	86fb      	strh	r3, [r7, #54]	@ 0x36
    	int16_t incrementLow = (currentPos-1000)/614;
 80022e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80022e2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80022e6:	4aab      	ldr	r2, [pc, #684]	@ (8002594 <TaskChassis+0x308>)
 80022e8:	fb82 1203 	smull	r1, r2, r2, r3
 80022ec:	441a      	add	r2, r3
 80022ee:	1252      	asrs	r2, r2, #9
 80022f0:	17db      	asrs	r3, r3, #31
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	86bb      	strh	r3, [r7, #52]	@ 0x34
    	int16_t incrementHigh = incrementLow+1;
 80022f6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80022f8:	3301      	adds	r3, #1
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	867b      	strh	r3, [r7, #50]	@ 0x32
    	// usart_printf("LI: %d, HI: %d\r\n", incrementLow, incrementHigh);

    	int16_t maxAmp = 1*819.2; // 819.2 is the scaler for 1 amp
 80022fe:	f240 3333 	movw	r3, #819	@ 0x333
 8002302:	863b      	strh	r3, [r7, #48]	@ 0x30
    	int8_t incrementer = 1;
 8002304:	2301      	movs	r3, #1
 8002306:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    	int16_t turnVal = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    	int16_t stallCounter = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	857b      	strh	r3, [r7, #42]	@ 0x2a
    	rpmOutput = currentPos- 1000;
 8002312:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002314:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002318:	b29b      	uxth	r3, r3
 800231a:	877b      	strh	r3, [r7, #58]	@ 0x3a

    	float scalerValThing = 0.05;
 800231c:	4b9e      	ldr	r3, [pc, #632]	@ (8002598 <TaskChassis+0x30c>)
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24

    	// The first 2 if statements are temporary just to test before the housing is made
    	if (currentPos < 1000) {
 8002320:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002322:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002326:	d225      	bcs.n	8002374 <TaskChassis+0xe8>
    		setMotorRPM(Bus1, M2006, 5, returnScaler * (1000-currentPos), YPVoltageRPM);
 8002328:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800232a:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800232e:	b29a      	uxth	r2, r3
 8002330:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002332:	fb12 f303 	smulbb	r3, r2, r3
 8002336:	b29b      	uxth	r3, r3
 8002338:	b21b      	sxth	r3, r3
 800233a:	edd7 6a05 	vldr	s13, [r7, #20]
 800233e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002342:	edd7 7a07 	vldr	s15, [r7, #28]
 8002346:	eeb0 0a66 	vmov.f32	s0, s13
 800234a:	eef0 0a47 	vmov.f32	s1, s14
 800234e:	eeb0 1a67 	vmov.f32	s2, s15
 8002352:	2205      	movs	r2, #5
 8002354:	2102      	movs	r1, #2
 8002356:	2001      	movs	r0, #1
 8002358:	f7fe ff12 	bl	8001180 <setMotorRPM>
    		rpmOutput = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	877b      	strh	r3, [r7, #58]	@ 0x3a
    		turnVal = returnScaler * (1000-currentPos);
 8002360:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002362:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8002366:	b29a      	uxth	r2, r3
 8002368:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800236a:	fb12 f303 	smulbb	r3, r2, r3
 800236e:	b29b      	uxth	r3, r3
 8002370:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8002372:	e0e8      	b.n	8002546 <TaskChassis+0x2ba>
    	} else if (currentPos > 7140) {
 8002374:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002376:	f641 32e4 	movw	r2, #7140	@ 0x1be4
 800237a:	4293      	cmp	r3, r2
 800237c:	d925      	bls.n	80023ca <TaskChassis+0x13e>
    		setMotorRPM(Bus1, M2006, 5, returnScaler * (7140-currentPos), YPVoltageRPM);
 800237e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002380:	f5c3 53df 	rsb	r3, r3, #7136	@ 0x1be0
 8002384:	3304      	adds	r3, #4
 8002386:	b29a      	uxth	r2, r3
 8002388:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800238a:	fb12 f303 	smulbb	r3, r2, r3
 800238e:	b29b      	uxth	r3, r3
 8002390:	b21b      	sxth	r3, r3
 8002392:	edd7 6a05 	vldr	s13, [r7, #20]
 8002396:	ed97 7a06 	vldr	s14, [r7, #24]
 800239a:	edd7 7a07 	vldr	s15, [r7, #28]
 800239e:	eeb0 0a66 	vmov.f32	s0, s13
 80023a2:	eef0 0a47 	vmov.f32	s1, s14
 80023a6:	eeb0 1a67 	vmov.f32	s2, s15
 80023aa:	2205      	movs	r2, #5
 80023ac:	2102      	movs	r1, #2
 80023ae:	2001      	movs	r0, #1
 80023b0:	f7fe fee6 	bl	8001180 <setMotorRPM>
    		turnVal = returnScaler * (7140-currentPos);
 80023b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80023b6:	f5c3 53df 	rsb	r3, r3, #7136	@ 0x1be0
 80023ba:	3304      	adds	r3, #4
 80023bc:	b29a      	uxth	r2, r3
 80023be:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80023c0:	fb12 f303 	smulbb	r3, r2, r3
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80023c8:	e0bd      	b.n	8002546 <TaskChassis+0x2ba>
    	} else {
    		turnVal = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    		if (incrementer == 1) {
 80023ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	f040 80a5 	bne.w	8002522 <TaskChassis+0x296>
    			int16_t lowDelta = currentPos-(incrementLow*614)-1000;
 80023d8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80023da:	461a      	mov	r2, r3
 80023dc:	0092      	lsls	r2, r2, #2
 80023de:	441a      	add	r2, r3
 80023e0:	0212      	lsls	r2, r2, #8
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	0092      	lsls	r2, r2, #2
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	0111      	lsls	r1, r2, #4
 80023ee:	461a      	mov	r2, r3
 80023f0:	460b      	mov	r3, r1
 80023f2:	4413      	add	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80023fa:	4413      	add	r3, r2
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002402:	b29b      	uxth	r3, r3
 8002404:	847b      	strh	r3, [r7, #34]	@ 0x22
    			int16_t highDelta = (incrementHigh*614) - currentPos+1000;
 8002406:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002408:	461a      	mov	r2, r3
 800240a:	00d2      	lsls	r2, r2, #3
 800240c:	441a      	add	r2, r3
 800240e:	4611      	mov	r1, r2
 8002410:	0108      	lsls	r0, r1, #4
 8002412:	4611      	mov	r1, r2
 8002414:	4602      	mov	r2, r0
 8002416:	440a      	add	r2, r1
 8002418:	0052      	lsls	r2, r2, #1
 800241a:	4413      	add	r3, r2
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	b29b      	uxth	r3, r3
 8002426:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800242a:	b29b      	uxth	r3, r3
 800242c:	843b      	strh	r3, [r7, #32]
    			usart_printf("LI: %d, HI: %d\r\n", lowDelta, highDelta);
 800242e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002432:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002436:	4619      	mov	r1, r3
 8002438:	4858      	ldr	r0, [pc, #352]	@ (800259c <TaskChassis+0x310>)
 800243a:	f7fe ff43 	bl	80012c4 <usart_printf>
    			if (lowDelta < highDelta) {
 800243e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8002442:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002446:	429a      	cmp	r2, r3
 8002448:	da35      	bge.n	80024b6 <TaskChassis+0x22a>
    				int32_t rpmCalc = (int32_t)(scalerValThing*(float)(lowDelta));
 800244a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800244e:	ee07 3a90 	vmov	s15, r3
 8002452:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002456:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800245a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002462:	ee17 3a90 	vmov	r3, s15
 8002466:	647b      	str	r3, [r7, #68]	@ 0x44
    				if (rpmCalc > maxAmp) {
 8002468:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800246c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800246e:	429a      	cmp	r2, r3
 8002470:	dd03      	ble.n	800247a <TaskChassis+0x1ee>
    					rpmCalc = maxAmp;
 8002472:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002476:	647b      	str	r3, [r7, #68]	@ 0x44
 8002478:	e009      	b.n	800248e <TaskChassis+0x202>
    				} else if (rpmCalc < -1* maxAmp) {
 800247a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800247e:	425b      	negs	r3, r3
 8002480:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002482:	429a      	cmp	r2, r3
 8002484:	da03      	bge.n	800248e <TaskChassis+0x202>
    					rpmCalc = -1*maxAmp;
 8002486:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800248a:	425b      	negs	r3, r3
 800248c:	647b      	str	r3, [r7, #68]	@ 0x44
    				}
    				// usart_printf("Larger: CurrentPos: %d | IncrementVal: %d | ReturnScalerVal: %d\r\n", currentPos, rpmCalc, turnVal);
    				// CAN_setMotorCtrlVal(Bus1, M3508, 5, rpmCalc);
    				setMotorRPM(Bus1, M2006, 5, rpmCalc, YPVoltageRPM);
 800248e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002490:	b21b      	sxth	r3, r3
 8002492:	edd7 6a05 	vldr	s13, [r7, #20]
 8002496:	ed97 7a06 	vldr	s14, [r7, #24]
 800249a:	edd7 7a07 	vldr	s15, [r7, #28]
 800249e:	eeb0 0a66 	vmov.f32	s0, s13
 80024a2:	eef0 0a47 	vmov.f32	s1, s14
 80024a6:	eeb0 1a67 	vmov.f32	s2, s15
 80024aa:	2205      	movs	r2, #5
 80024ac:	2102      	movs	r1, #2
 80024ae:	2001      	movs	r0, #1
 80024b0:	f7fe fe66 	bl	8001180 <setMotorRPM>
 80024b4:	e047      	b.n	8002546 <TaskChassis+0x2ba>
    			} else {
    				int32_t rpmCalc = (int32_t)(scalerValThing*(float)(highDelta));
 80024b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024c2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80024c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ce:	ee17 3a90 	vmov	r3, s15
 80024d2:	643b      	str	r3, [r7, #64]	@ 0x40
    				if (rpmCalc > maxAmp) {
 80024d4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80024d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024da:	429a      	cmp	r2, r3
 80024dc:	dd03      	ble.n	80024e6 <TaskChassis+0x25a>
    					rpmCalc = maxAmp;
 80024de:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80024e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80024e4:	e009      	b.n	80024fa <TaskChassis+0x26e>
    				} else if (rpmCalc < -1* maxAmp) {
 80024e6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80024ea:	425b      	negs	r3, r3
 80024ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024ee:	429a      	cmp	r2, r3
 80024f0:	da03      	bge.n	80024fa <TaskChassis+0x26e>
    					rpmCalc = -1*maxAmp;
 80024f2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80024f6:	425b      	negs	r3, r3
 80024f8:	643b      	str	r3, [r7, #64]	@ 0x40
    				}
    				// usart_printf("Smaller: CurrentPos: %d | IncrementVal: %d | ReturnScalerVal: %d\r\n", currentPos, rpmCalc, turnVal);
    				// CAN_setMotorCtrlVal(Bus1, M3508, 5, rpmCalc);
    				setMotorRPM(Bus1, M2006, 5, rpmCalc, YPVoltageRPM);
 80024fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024fc:	b21b      	sxth	r3, r3
 80024fe:	edd7 6a05 	vldr	s13, [r7, #20]
 8002502:	ed97 7a06 	vldr	s14, [r7, #24]
 8002506:	edd7 7a07 	vldr	s15, [r7, #28]
 800250a:	eeb0 0a66 	vmov.f32	s0, s13
 800250e:	eef0 0a47 	vmov.f32	s1, s14
 8002512:	eeb0 1a67 	vmov.f32	s2, s15
 8002516:	2205      	movs	r2, #5
 8002518:	2102      	movs	r1, #2
 800251a:	2001      	movs	r0, #1
 800251c:	f7fe fe30 	bl	8001180 <setMotorRPM>
 8002520:	e011      	b.n	8002546 <TaskChassis+0x2ba>
    			}
    		} else {
    			setMotorRPM(Bus1, M2006, 5, 0, YPVoltageRPM);
 8002522:	edd7 6a05 	vldr	s13, [r7, #20]
 8002526:	ed97 7a06 	vldr	s14, [r7, #24]
 800252a:	edd7 7a07 	vldr	s15, [r7, #28]
 800252e:	eeb0 0a66 	vmov.f32	s0, s13
 8002532:	eef0 0a47 	vmov.f32	s1, s14
 8002536:	eeb0 1a67 	vmov.f32	s2, s15
 800253a:	2300      	movs	r3, #0
 800253c:	2205      	movs	r2, #5
 800253e:	2102      	movs	r1, #2
 8002540:	2001      	movs	r0, #1
 8002542:	f7fe fe1d 	bl	8001180 <setMotorRPM>
    		CAN_setMotorCtrlVal(Bus1, M3508, 1, 1600);
    	} else {
    		CAN_setMotorCtrlVal(Bus1, M3508, 1, 0);
    	}
    	*/
    	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0) {
 8002546:	2101      	movs	r1, #1
 8002548:	4815      	ldr	r0, [pc, #84]	@ (80025a0 <TaskChassis+0x314>)
 800254a:	f003 f9a1 	bl	8005890 <HAL_GPIO_ReadPin>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d107      	bne.n	8002564 <TaskChassis+0x2d8>
    		CAN_setMotorCtrlVal(Bus1, M3508, 1, 1600*5);
 8002554:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002558:	2201      	movs	r2, #1
 800255a:	2101      	movs	r1, #1
 800255c:	2001      	movs	r0, #1
 800255e:	f7fe faad 	bl	8000abc <CAN_setMotorCtrlVal>
 8002562:	e005      	b.n	8002570 <TaskChassis+0x2e4>
    	} else {
    		CAN_setMotorCtrlVal(Bus1, M3508, 1, 0);
 8002564:	2300      	movs	r3, #0
 8002566:	2201      	movs	r2, #1
 8002568:	2101      	movs	r1, #1
 800256a:	2001      	movs	r0, #1
 800256c:	f7fe faa6 	bl	8000abc <CAN_setMotorCtrlVal>
        setMotorRPM(Bus1, M3508, 1, -1*speed, yawPresetVoltageRPM);
        setMotorRPM(Bus1, M3508, 2, speed, yawPresetVoltageRPM);
        setMotorRPM(Bus1, M3508, 3, speed, yawPresetVoltageRPM);
        setMotorRPM(Bus1, M3508, 4, -1*speed, CyawPresetVoltageRPM);
        */
		PWMTimerStarter();
 8002570:	f000 f9fa 	bl	8002968 <PWMTimerStarter>
		RCkeysRefresh();
 8002574:	f000 fcc8 	bl	8002f08 <RCkeysRefresh>
        osDelay(10);
 8002578:	200a      	movs	r0, #10
 800257a:	f007 fa07 	bl	800998c <osDelay>
    for(;;) {
 800257e:	e6a8      	b.n	80022d2 <TaskChassis+0x46>
 8002580:	2000087c 	.word	0x2000087c
 8002584:	20000834 	.word	0x20000834
 8002588:	200007ec 	.word	0x200007ec
 800258c:	200007a4 	.word	0x200007a4
 8002590:	41200000 	.word	0x41200000
 8002594:	d578e97d 	.word	0xd578e97d
 8002598:	3d4ccccd 	.word	0x3d4ccccd
 800259c:	0800d128 	.word	0x0800d128
 80025a0:	40020000 	.word	0x40020000

080025a4 <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
	// JoulesBuffer = 60;
  /* Infinite loop */
	for(;;)
	{
		osDelay(5);
 80025ac:	2005      	movs	r0, #5
 80025ae:	f007 f9ed 	bl	800998c <osDelay>
 80025b2:	e7fb      	b.n	80025ac <TaskTurret+0x8>

080025b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b8:	b672      	cpsid	i
}
 80025ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <Error_Handler+0x8>

080025c0 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6178      	str	r0, [r7, #20]
 80025c8:	460b      	mov	r3, r1
 80025ca:	60fa      	str	r2, [r7, #12]
 80025cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80025d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80025d4:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d042      	beq.n	8002662 <PID_init+0xa2>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d03f      	beq.n	8002662 <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	7cfa      	ldrb	r2, [r7, #19]
 80025e6:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3304      	adds	r3, #4
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	3308      	adds	r3, #8
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	639a      	str	r2, [r3, #56]	@ 0x38
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	621a      	str	r2, [r3, #32]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	6a1a      	ldr	r2, [r3, #32]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	625a      	str	r2, [r3, #36]	@ 0x24
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	641a      	str	r2, [r3, #64]	@ 0x40
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002660:	e000      	b.n	8002664 <PID_init+0xa4>
        return;
 8002662:	bf00      	nop
}
 8002664:	371c      	adds	r7, #28
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	ed87 0a02 	vstr	s0, [r7, #8]
 800267a:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <PID_calc+0x1c>
    {
        return 0.0f;
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	e130      	b.n	80028ec <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 80026a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80026aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80026ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f040 8095 	bne.w	80027ec <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80026ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80026ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	ed93 7a03 	vldr	s14, [r3, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800272a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002740:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002748:	dd04      	ble.n	8002754 <PID_calc+0xe6>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	629a      	str	r2, [r3, #40]	@ 0x28
 8002752:	e014      	b.n	800277e <PID_calc+0x110>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002760:	eef1 7a67 	vneg.f32	s15, s15
 8002764:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276c:	d507      	bpl.n	800277e <PID_calc+0x110>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	edd3 7a05 	vldr	s15, [r3, #20]
 8002774:	eef1 7a67 	vneg.f32	s15, s15
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800278a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	ed93 7a08 	vldr	s14, [r3, #32]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80027aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b2:	dd04      	ble.n	80027be <PID_calc+0x150>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	621a      	str	r2, [r3, #32]
 80027bc:	e094      	b.n	80028e8 <PID_calc+0x27a>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	ed93 7a08 	vldr	s14, [r3, #32]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80027ca:	eef1 7a67 	vneg.f32	s15, s15
 80027ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d6:	f140 8087 	bpl.w	80028e8 <PID_calc+0x27a>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80027e0:	eef1 7a67 	vneg.f32	s15, s15
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	edc3 7a08 	vstr	s15, [r3, #32]
 80027ea:	e07d      	b.n	80028e8 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d179      	bne.n	80028e8 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002806:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800280a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	ed93 7a02 	vldr	s14, [r3, #8]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002846:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800284a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	ed93 7a03 	vldr	s14, [r3, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800286a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	ed93 7a08 	vldr	s14, [r3, #32]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002886:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002890:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	ed93 7a08 	vldr	s14, [r3, #32]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80028aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b2:	dd04      	ble.n	80028be <PID_calc+0x250>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	621a      	str	r2, [r3, #32]
 80028bc:	e014      	b.n	80028e8 <PID_calc+0x27a>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	ed93 7a08 	vldr	s14, [r3, #32]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80028ca:	eef1 7a67 	vneg.f32	s15, s15
 80028ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d6:	d507      	bpl.n	80028e8 <PID_calc+0x27a>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	edd3 7a04 	vldr	s15, [r3, #16]
 80028de:	eef1 7a67 	vneg.f32	s15, s15
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
}
 80028ec:	ee07 3a90 	vmov	s15, r3
 80028f0:	eeb0 0a67 	vmov.f32	s0, s15
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 800290e:	4a12      	ldr	r2, [pc, #72]	@ (8002958 <PWMInit+0x58>)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 8002914:	4a11      	ldr	r2, [pc, #68]	@ (800295c <PWMInit+0x5c>)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 800291a:	4a11      	ldr	r2, [pc, #68]	@ (8002960 <PWMInit+0x60>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 8002920:	4a10      	ldr	r2, [pc, #64]	@ (8002964 <PWMInit+0x64>)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 8002926:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <PWMInit+0x58>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f004 fdac 	bl	8007488 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 8002930:	4b0a      	ldr	r3, [pc, #40]	@ (800295c <PWMInit+0x5c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f004 fda7 	bl	8007488 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 800293a:	4b09      	ldr	r3, [pc, #36]	@ (8002960 <PWMInit+0x60>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f004 fda2 	bl	8007488 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 8002944:	4b07      	ldr	r3, [pc, #28]	@ (8002964 <PWMInit+0x64>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f004 fd9d 	bl	8007488 <HAL_TIM_Base_Start>
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000bcc 	.word	0x20000bcc
 800295c:	20000bd0 	.word	0x20000bd0
 8002960:	20000bd4 	.word	0x20000bd4
 8002964:	20000bd8 	.word	0x20000bd8

08002968 <PWMTimerStarter>:
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}

void PWMTimerStarter() {
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 800296e:	2300      	movs	r3, #0
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	e0f1      	b.n	8002b58 <PWMTimerStarter+0x1f0>
		switch (i) {
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b0a      	cmp	r3, #10
 8002978:	f200 80eb 	bhi.w	8002b52 <PWMTimerStarter+0x1ea>
 800297c:	a201      	add	r2, pc, #4	@ (adr r2, 8002984 <PWMTimerStarter+0x1c>)
 800297e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002982:	bf00      	nop
 8002984:	080029b1 	.word	0x080029b1
 8002988:	080029d7 	.word	0x080029d7
 800298c:	080029fd 	.word	0x080029fd
 8002990:	08002a23 	.word	0x08002a23
 8002994:	08002a49 	.word	0x08002a49
 8002998:	08002a6f 	.word	0x08002a6f
 800299c:	08002a95 	.word	0x08002a95
 80029a0:	08002abb 	.word	0x08002abb
 80029a4:	08002ae1 	.word	0x08002ae1
 80029a8:	08002b07 	.word	0x08002b07
 80029ac:	08002b2d 	.word	0x08002b2d
		case 0:
			if (whichPWMisOn[0] == 1) {
 80029b0:	4b6e      	ldr	r3, [pc, #440]	@ (8002b6c <PWMTimerStarter+0x204>)
 80029b2:	f993 3000 	ldrsb.w	r3, [r3]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d106      	bne.n	80029c8 <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 80029ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002b70 <PWMTimerStarter+0x208>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2100      	movs	r1, #0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f004 fe19 	bl	80075f8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 80029c6:	e0c4      	b.n	8002b52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 80029c8:	4b69      	ldr	r3, [pc, #420]	@ (8002b70 <PWMTimerStarter+0x208>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2100      	movs	r1, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	f004 feda 	bl	8007788 <HAL_TIM_PWM_Stop>
			break;
 80029d4:	e0bd      	b.n	8002b52 <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 80029d6:	4b65      	ldr	r3, [pc, #404]	@ (8002b6c <PWMTimerStarter+0x204>)
 80029d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d106      	bne.n	80029ee <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 80029e0:	4b63      	ldr	r3, [pc, #396]	@ (8002b70 <PWMTimerStarter+0x208>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2104      	movs	r1, #4
 80029e6:	4618      	mov	r0, r3
 80029e8:	f004 fe06 	bl	80075f8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 80029ec:	e0b1      	b.n	8002b52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 80029ee:	4b60      	ldr	r3, [pc, #384]	@ (8002b70 <PWMTimerStarter+0x208>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2104      	movs	r1, #4
 80029f4:	4618      	mov	r0, r3
 80029f6:	f004 fec7 	bl	8007788 <HAL_TIM_PWM_Stop>
			break;
 80029fa:	e0aa      	b.n	8002b52 <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 80029fc:	4b5b      	ldr	r3, [pc, #364]	@ (8002b6c <PWMTimerStarter+0x204>)
 80029fe:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d106      	bne.n	8002a14 <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 8002a06:	4b5a      	ldr	r3, [pc, #360]	@ (8002b70 <PWMTimerStarter+0x208>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2108      	movs	r1, #8
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f004 fdf3 	bl	80075f8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 8002a12:	e09e      	b.n	8002b52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 8002a14:	4b56      	ldr	r3, [pc, #344]	@ (8002b70 <PWMTimerStarter+0x208>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2108      	movs	r1, #8
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 feb4 	bl	8007788 <HAL_TIM_PWM_Stop>
			break;
 8002a20:	e097      	b.n	8002b52 <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 8002a22:	4b52      	ldr	r3, [pc, #328]	@ (8002b6c <PWMTimerStarter+0x204>)
 8002a24:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d106      	bne.n	8002a3a <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 8002a2c:	4b50      	ldr	r3, [pc, #320]	@ (8002b70 <PWMTimerStarter+0x208>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	210c      	movs	r1, #12
 8002a32:	4618      	mov	r0, r3
 8002a34:	f004 fde0 	bl	80075f8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 8002a38:	e08b      	b.n	8002b52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 8002a3a:	4b4d      	ldr	r3, [pc, #308]	@ (8002b70 <PWMTimerStarter+0x208>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	210c      	movs	r1, #12
 8002a40:	4618      	mov	r0, r3
 8002a42:	f004 fea1 	bl	8007788 <HAL_TIM_PWM_Stop>
			break;
 8002a46:	e084      	b.n	8002b52 <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 8002a48:	4b48      	ldr	r3, [pc, #288]	@ (8002b6c <PWMTimerStarter+0x204>)
 8002a4a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d106      	bne.n	8002a60 <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 8002a52:	4b48      	ldr	r3, [pc, #288]	@ (8002b74 <PWMTimerStarter+0x20c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f004 fdcd 	bl	80075f8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 8002a5e:	e078      	b.n	8002b52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 8002a60:	4b44      	ldr	r3, [pc, #272]	@ (8002b74 <PWMTimerStarter+0x20c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2100      	movs	r1, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f004 fe8e 	bl	8007788 <HAL_TIM_PWM_Stop>
			break;
 8002a6c:	e071      	b.n	8002b52 <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 8002a6e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b6c <PWMTimerStarter+0x204>)
 8002a70:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d106      	bne.n	8002a86 <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 8002a78:	4b3e      	ldr	r3, [pc, #248]	@ (8002b74 <PWMTimerStarter+0x20c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2104      	movs	r1, #4
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f004 fdba 	bl	80075f8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 8002a84:	e065      	b.n	8002b52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 8002a86:	4b3b      	ldr	r3, [pc, #236]	@ (8002b74 <PWMTimerStarter+0x20c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2104      	movs	r1, #4
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f004 fe7b 	bl	8007788 <HAL_TIM_PWM_Stop>
			break;
 8002a92:	e05e      	b.n	8002b52 <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 8002a94:	4b35      	ldr	r3, [pc, #212]	@ (8002b6c <PWMTimerStarter+0x204>)
 8002a96:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d106      	bne.n	8002aac <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 8002a9e:	4b35      	ldr	r3, [pc, #212]	@ (8002b74 <PWMTimerStarter+0x20c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2108      	movs	r1, #8
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f004 fda7 	bl	80075f8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 8002aaa:	e052      	b.n	8002b52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 8002aac:	4b31      	ldr	r3, [pc, #196]	@ (8002b74 <PWMTimerStarter+0x20c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2108      	movs	r1, #8
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f004 fe68 	bl	8007788 <HAL_TIM_PWM_Stop>
			break;
 8002ab8:	e04b      	b.n	8002b52 <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 8002aba:	4b2c      	ldr	r3, [pc, #176]	@ (8002b6c <PWMTimerStarter+0x204>)
 8002abc:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d106      	bne.n	8002ad2 <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 8002ac4:	4b2c      	ldr	r3, [pc, #176]	@ (8002b78 <PWMTimerStarter+0x210>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f004 fd94 	bl	80075f8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 8002ad0:	e03f      	b.n	8002b52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 8002ad2:	4b29      	ldr	r3, [pc, #164]	@ (8002b78 <PWMTimerStarter+0x210>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f004 fe55 	bl	8007788 <HAL_TIM_PWM_Stop>
			break;
 8002ade:	e038      	b.n	8002b52 <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 8002ae0:	4b22      	ldr	r3, [pc, #136]	@ (8002b6c <PWMTimerStarter+0x204>)
 8002ae2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d106      	bne.n	8002af8 <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 8002aea:	4b23      	ldr	r3, [pc, #140]	@ (8002b78 <PWMTimerStarter+0x210>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2104      	movs	r1, #4
 8002af0:	4618      	mov	r0, r3
 8002af2:	f004 fd81 	bl	80075f8 <HAL_TIM_PWM_Start>

			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
				// usart_printf("beanis\r\n");
			}
			break;
 8002af6:	e02c      	b.n	8002b52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 8002af8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b78 <PWMTimerStarter+0x210>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2104      	movs	r1, #4
 8002afe:	4618      	mov	r0, r3
 8002b00:	f004 fe42 	bl	8007788 <HAL_TIM_PWM_Stop>
			break;
 8002b04:	e025      	b.n	8002b52 <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 8002b06:	4b19      	ldr	r3, [pc, #100]	@ (8002b6c <PWMTimerStarter+0x204>)
 8002b08:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d106      	bne.n	8002b1e <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 8002b10:	4b19      	ldr	r3, [pc, #100]	@ (8002b78 <PWMTimerStarter+0x210>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2108      	movs	r1, #8
 8002b16:	4618      	mov	r0, r3
 8002b18:	f004 fd6e 	bl	80075f8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 8002b1c:	e019      	b.n	8002b52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 8002b1e:	4b16      	ldr	r3, [pc, #88]	@ (8002b78 <PWMTimerStarter+0x210>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2108      	movs	r1, #8
 8002b24:	4618      	mov	r0, r3
 8002b26:	f004 fe2f 	bl	8007788 <HAL_TIM_PWM_Stop>
			break;
 8002b2a:	e012      	b.n	8002b52 <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b6c <PWMTimerStarter+0x204>)
 8002b2e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d106      	bne.n	8002b44 <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 8002b36:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <PWMTimerStarter+0x214>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2108      	movs	r1, #8
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f004 fd5b 	bl	80075f8 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 8002b42:	e005      	b.n	8002b50 <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 8002b44:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <PWMTimerStarter+0x214>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2108      	movs	r1, #8
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f004 fe1c 	bl	8007788 <HAL_TIM_PWM_Stop>
			break;
 8002b50:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3301      	adds	r3, #1
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b0a      	cmp	r3, #10
 8002b5c:	f77f af0a 	ble.w	8002974 <PWMTimerStarter+0xc>
		}
	}
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000bdc 	.word	0x20000bdc
 8002b70:	20000bcc 	.word	0x20000bcc
 8002b74:	20000bd8 	.word	0x20000bd8
 8002b78:	20000bd4 	.word	0x20000bd4
 8002b7c:	20000bd0 	.word	0x20000bd0

08002b80 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 8002b84:	2224      	movs	r2, #36	@ 0x24
 8002b86:	4903      	ldr	r1, [pc, #12]	@ (8002b94 <remote_control_init+0x14>)
 8002b88:	4803      	ldr	r0, [pc, #12]	@ (8002b98 <remote_control_init+0x18>)
 8002b8a:	f7fe fc17 	bl	80013bc <RC_init>
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000c24 	.word	0x20000c24
 8002b98:	20000c00 	.word	0x20000c00

08002b9c <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 8002ba0:	4b02      	ldr	r3, [pc, #8]	@ (8002bac <get_remote_control_point+0x10>)
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	20000be8 	.word	0x20000be8

08002bb0 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 8002bb6:	4b44      	ldr	r3, [pc, #272]	@ (8002cc8 <USART3_IRQHandler+0x118>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00b      	beq.n	8002bdc <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	607b      	str	r3, [r7, #4]
 8002bc8:	4b3f      	ldr	r3, [pc, #252]	@ (8002cc8 <USART3_IRQHandler+0x118>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	4b3d      	ldr	r3, [pc, #244]	@ (8002cc8 <USART3_IRQHandler+0x118>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	607b      	str	r3, [r7, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 8002bda:	e070      	b.n	8002cbe <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8002bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8002ccc <USART3_IRQHandler+0x11c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d06a      	beq.n	8002cbe <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8002be8:	2300      	movs	r3, #0
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	4b36      	ldr	r3, [pc, #216]	@ (8002cc8 <USART3_IRQHandler+0x118>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	4b34      	ldr	r3, [pc, #208]	@ (8002cc8 <USART3_IRQHandler+0x118>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8002bfe:	4b34      	ldr	r3, [pc, #208]	@ (8002cd0 <USART3_IRQHandler+0x120>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d12d      	bne.n	8002c68 <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8002c0c:	4b30      	ldr	r3, [pc, #192]	@ (8002cd0 <USART3_IRQHandler+0x120>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4b2f      	ldr	r3, [pc, #188]	@ (8002cd0 <USART3_IRQHandler+0x120>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8002c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002cd0 <USART3_IRQHandler+0x120>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd4 <USART3_IRQHandler+0x124>)
 8002c2c:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8002c2e:	4b28      	ldr	r3, [pc, #160]	@ (8002cd0 <USART3_IRQHandler+0x120>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2224      	movs	r2, #36	@ 0x24
 8002c34:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 8002c36:	4b26      	ldr	r3, [pc, #152]	@ (8002cd0 <USART3_IRQHandler+0x120>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b24      	ldr	r3, [pc, #144]	@ (8002cd0 <USART3_IRQHandler+0x120>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8002c44:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8002c46:	4b22      	ldr	r3, [pc, #136]	@ (8002cd0 <USART3_IRQHandler+0x120>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b20      	ldr	r3, [pc, #128]	@ (8002cd0 <USART3_IRQHandler+0x120>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0201 	orr.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 8002c56:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd4 <USART3_IRQHandler+0x124>)
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	2b12      	cmp	r3, #18
 8002c5c:	d12f      	bne.n	8002cbe <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8002c5e:	491e      	ldr	r1, [pc, #120]	@ (8002cd8 <USART3_IRQHandler+0x128>)
 8002c60:	481e      	ldr	r0, [pc, #120]	@ (8002cdc <USART3_IRQHandler+0x12c>)
 8002c62:	f000 f841 	bl	8002ce8 <sbus_to_rc>
}
 8002c66:	e02a      	b.n	8002cbe <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8002c68:	4b19      	ldr	r3, [pc, #100]	@ (8002cd0 <USART3_IRQHandler+0x120>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4b18      	ldr	r3, [pc, #96]	@ (8002cd0 <USART3_IRQHandler+0x120>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0201 	bic.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8002c78:	4b15      	ldr	r3, [pc, #84]	@ (8002cd0 <USART3_IRQHandler+0x120>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	4b13      	ldr	r3, [pc, #76]	@ (8002cd4 <USART3_IRQHandler+0x124>)
 8002c88:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8002c8a:	4b11      	ldr	r3, [pc, #68]	@ (8002cd0 <USART3_IRQHandler+0x120>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2224      	movs	r2, #36	@ 0x24
 8002c90:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 8002c92:	4b13      	ldr	r3, [pc, #76]	@ (8002ce0 <USART3_IRQHandler+0x130>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a12      	ldr	r2, [pc, #72]	@ (8002ce0 <USART3_IRQHandler+0x130>)
 8002c98:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002c9c:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8002c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd0 <USART3_IRQHandler+0x120>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd0 <USART3_IRQHandler+0x120>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 8002cae:	4b09      	ldr	r3, [pc, #36]	@ (8002cd4 <USART3_IRQHandler+0x124>)
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	2b12      	cmp	r3, #18
 8002cb4:	d103      	bne.n	8002cbe <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 8002cb6:	4908      	ldr	r1, [pc, #32]	@ (8002cd8 <USART3_IRQHandler+0x128>)
 8002cb8:	480a      	ldr	r0, [pc, #40]	@ (8002ce4 <USART3_IRQHandler+0x134>)
 8002cba:	f000 f815 	bl	8002ce8 <sbus_to_rc>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000950 	.word	0x20000950
 8002ccc:	40004800 	.word	0x40004800
 8002cd0:	20000a98 	.word	0x20000a98
 8002cd4:	20000c48 	.word	0x20000c48
 8002cd8:	20000be8 	.word	0x20000be8
 8002cdc:	20000c00 	.word	0x20000c00
 8002ce0:	40026028 	.word	0x40026028
 8002ce4:	20000c24 	.word	0x20000c24

08002ce8 <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8101 	beq.w	8002efc <sbus_to_rc+0x214>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80fd 	beq.w	8002efc <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	b21a      	sxth	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	021b      	lsls	r3, r3, #8
 8002d14:	b21b      	sxth	r3, r3
 8002d16:	4313      	orrs	r3, r2
 8002d18:	b21b      	sxth	r3, r3
 8002d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d1e:	b21a      	sxth	r2, r3
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3301      	adds	r3, #1
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	08db      	lsrs	r3, r3, #3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	b21a      	sxth	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3302      	adds	r3, #2
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	015b      	lsls	r3, r3, #5
 8002d3c:	b21b      	sxth	r3, r3
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	b21b      	sxth	r3, r3
 8002d42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d46:	b21a      	sxth	r2, r3
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3302      	adds	r3, #2
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	b21a      	sxth	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3303      	adds	r3, #3
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	b21b      	sxth	r3, r3
 8002d66:	4313      	orrs	r3, r2
 8002d68:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8002d74:	b21b      	sxth	r3, r3
 8002d76:	4313      	orrs	r3, r2
 8002d78:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8002d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d7e:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3304      	adds	r3, #4
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	b21a      	sxth	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3305      	adds	r3, #5
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	01db      	lsls	r3, r3, #7
 8002d9c:	b21b      	sxth	r3, r3
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	b21b      	sxth	r3, r3
 8002da2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002da6:	b21a      	sxth	r2, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3305      	adds	r3, #5
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3305      	adds	r3, #5
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	109b      	asrs	r3, r3, #2
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3306      	adds	r3, #6
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	b21a      	sxth	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3307      	adds	r3, #7
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	021b      	lsls	r3, r3, #8
 8002df0:	b21b      	sxth	r3, r3
 8002df2:	4313      	orrs	r3, r2
 8002df4:	b21a      	sxth	r2, r3
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3308      	adds	r3, #8
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	b21a      	sxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3309      	adds	r3, #9
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	021b      	lsls	r3, r3, #8
 8002e0e:	b21b      	sxth	r3, r3
 8002e10:	4313      	orrs	r3, r2
 8002e12:	b21a      	sxth	r2, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	330a      	adds	r3, #10
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	b21a      	sxth	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	330b      	adds	r3, #11
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	b21b      	sxth	r3, r3
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	b21a      	sxth	r2, r3
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	330c      	adds	r3, #12
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	330d      	adds	r3, #13
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	330e      	adds	r3, #14
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	b21a      	sxth	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	330f      	adds	r3, #15
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	b21b      	sxth	r3, r3
 8002e64:	4313      	orrs	r3, r2
 8002e66:	b21b      	sxth	r3, r3
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3310      	adds	r3, #16
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	b21a      	sxth	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3311      	adds	r3, #17
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	b21b      	sxth	r3, r3
 8002e84:	4313      	orrs	r3, r2
 8002e86:	b21a      	sxth	r2, r3
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e92:	b21b      	sxth	r3, r3
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	b21a      	sxth	r2, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ea8:	b21b      	sxth	r3, r3
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	b21a      	sxth	r2, r3
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ebe:	b21b      	sxth	r3, r3
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	b21a      	sxth	r2, r3
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002ed4:	b21b      	sxth	r3, r3
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	b21a      	sxth	r2, r3
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002eea:	b21b      	sxth	r3, r3
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	b21a      	sxth	r2, r3
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	811a      	strh	r2, [r3, #8]
 8002efa:	e000      	b.n	8002efe <sbus_to_rc+0x216>
        return;
 8002efc:	bf00      	nop
}
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <RCkeysRefresh>:
	} else {
		return 0;
	}
}

void RCkeysRefresh(void) {//temporary until uart fixed
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
	uint16_t key = rc_ptr->key.v;
 8002f0e:	4b85      	ldr	r3, [pc, #532]	@ (8003124 <RCkeysRefresh+0x21c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	7d1a      	ldrb	r2, [r3, #20]
 8002f14:	7d5b      	ldrb	r3, [r3, #21]
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	80fb      	strh	r3, [r7, #6]
	if(key > 32767){
 8002f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	da07      	bge.n	8002f34 <RCkeysRefresh+0x2c>
		pc_control.b = 1;
 8002f24:	4b80      	ldr	r3, [pc, #512]	@ (8003128 <RCkeysRefresh+0x220>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	76da      	strb	r2, [r3, #27]
		key= key - 32768;
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8002f30:	80fb      	strh	r3, [r7, #6]
 8002f32:	e002      	b.n	8002f3a <RCkeysRefresh+0x32>
	}else{
		pc_control.b = 0;
 8002f34:	4b7c      	ldr	r3, [pc, #496]	@ (8003128 <RCkeysRefresh+0x220>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	76da      	strb	r2, [r3, #27]
	}
	if(key>16383){
 8002f3a:	88fb      	ldrh	r3, [r7, #6]
 8002f3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f40:	d307      	bcc.n	8002f52 <RCkeysRefresh+0x4a>
		pc_control.v = 1;
 8002f42:	4b79      	ldr	r3, [pc, #484]	@ (8003128 <RCkeysRefresh+0x220>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	769a      	strb	r2, [r3, #26]
		key= key - 16384;
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8002f4e:	80fb      	strh	r3, [r7, #6]
 8002f50:	e002      	b.n	8002f58 <RCkeysRefresh+0x50>
	}else{
		pc_control.v = 0;
 8002f52:	4b75      	ldr	r3, [pc, #468]	@ (8003128 <RCkeysRefresh+0x220>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	769a      	strb	r2, [r3, #26]
	}
	if(key>8191){
 8002f58:	88fb      	ldrh	r3, [r7, #6]
 8002f5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f5e:	d307      	bcc.n	8002f70 <RCkeysRefresh+0x68>
		pc_control.c = 1;
 8002f60:	4b71      	ldr	r3, [pc, #452]	@ (8003128 <RCkeysRefresh+0x220>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	765a      	strb	r2, [r3, #25]
		key= key - 8192;
 8002f66:	88fb      	ldrh	r3, [r7, #6]
 8002f68:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8002f6c:	80fb      	strh	r3, [r7, #6]
 8002f6e:	e002      	b.n	8002f76 <RCkeysRefresh+0x6e>
	}else{
		pc_control.c = 0;
 8002f70:	4b6d      	ldr	r3, [pc, #436]	@ (8003128 <RCkeysRefresh+0x220>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	765a      	strb	r2, [r3, #25]
	}
	if(key>4095){
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f7c:	d307      	bcc.n	8002f8e <RCkeysRefresh+0x86>
		pc_control.x = 1;
 8002f7e:	4b6a      	ldr	r3, [pc, #424]	@ (8003128 <RCkeysRefresh+0x220>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	761a      	strb	r2, [r3, #24]
		key= key - 4096;
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8002f8a:	80fb      	strh	r3, [r7, #6]
 8002f8c:	e002      	b.n	8002f94 <RCkeysRefresh+0x8c>
	}else{
		pc_control.x = 0;
 8002f8e:	4b66      	ldr	r3, [pc, #408]	@ (8003128 <RCkeysRefresh+0x220>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	761a      	strb	r2, [r3, #24]
	}
	if(key>2047){
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f9a:	d307      	bcc.n	8002fac <RCkeysRefresh+0xa4>
		pc_control.z = 1;
 8002f9c:	4b62      	ldr	r3, [pc, #392]	@ (8003128 <RCkeysRefresh+0x220>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	75da      	strb	r2, [r3, #23]
		key= key - 2048;
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8002fa8:	80fb      	strh	r3, [r7, #6]
 8002faa:	e002      	b.n	8002fb2 <RCkeysRefresh+0xaa>
	}else{
		pc_control.z = 0;
 8002fac:	4b5e      	ldr	r3, [pc, #376]	@ (8003128 <RCkeysRefresh+0x220>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	75da      	strb	r2, [r3, #23]
	}
	if(key>1023){
 8002fb2:	88fb      	ldrh	r3, [r7, #6]
 8002fb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb8:	d307      	bcc.n	8002fca <RCkeysRefresh+0xc2>
		pc_control.g = 1;
 8002fba:	4b5b      	ldr	r3, [pc, #364]	@ (8003128 <RCkeysRefresh+0x220>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	759a      	strb	r2, [r3, #22]
		key= key - 1024;
 8002fc0:	88fb      	ldrh	r3, [r7, #6]
 8002fc2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002fc6:	80fb      	strh	r3, [r7, #6]
 8002fc8:	e002      	b.n	8002fd0 <RCkeysRefresh+0xc8>
	}else{
		pc_control.g = 0;
 8002fca:	4b57      	ldr	r3, [pc, #348]	@ (8003128 <RCkeysRefresh+0x220>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	759a      	strb	r2, [r3, #22]
	}
	if(key>511){
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fd6:	d307      	bcc.n	8002fe8 <RCkeysRefresh+0xe0>
		pc_control.f = 1;
 8002fd8:	4b53      	ldr	r3, [pc, #332]	@ (8003128 <RCkeysRefresh+0x220>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	755a      	strb	r2, [r3, #21]
		key= key - 512;
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8002fe4:	80fb      	strh	r3, [r7, #6]
 8002fe6:	e002      	b.n	8002fee <RCkeysRefresh+0xe6>
	}else{
		pc_control.f = 0;
 8002fe8:	4b4f      	ldr	r3, [pc, #316]	@ (8003128 <RCkeysRefresh+0x220>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	755a      	strb	r2, [r3, #21]
	}
	if(key > 255){
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	2bff      	cmp	r3, #255	@ 0xff
 8002ff2:	d907      	bls.n	8003004 <RCkeysRefresh+0xfc>
		pc_control.r = 1;
 8002ff4:	4b4c      	ldr	r3, [pc, #304]	@ (8003128 <RCkeysRefresh+0x220>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	751a      	strb	r2, [r3, #20]
		key = key - 256;
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003000:	80fb      	strh	r3, [r7, #6]
 8003002:	e002      	b.n	800300a <RCkeysRefresh+0x102>
	}else{
		pc_control.r = 0;
 8003004:	4b48      	ldr	r3, [pc, #288]	@ (8003128 <RCkeysRefresh+0x220>)
 8003006:	2200      	movs	r2, #0
 8003008:	751a      	strb	r2, [r3, #20]
	}


	if(key > 127){
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	2b7f      	cmp	r3, #127	@ 0x7f
 800300e:	d906      	bls.n	800301e <RCkeysRefresh+0x116>
		pc_control.e = 1;
 8003010:	4b45      	ldr	r3, [pc, #276]	@ (8003128 <RCkeysRefresh+0x220>)
 8003012:	2201      	movs	r2, #1
 8003014:	74da      	strb	r2, [r3, #19]
		key = key - 128;
 8003016:	88fb      	ldrh	r3, [r7, #6]
 8003018:	3b80      	subs	r3, #128	@ 0x80
 800301a:	80fb      	strh	r3, [r7, #6]
 800301c:	e002      	b.n	8003024 <RCkeysRefresh+0x11c>
	}else{
		pc_control.e = 0;
 800301e:	4b42      	ldr	r3, [pc, #264]	@ (8003128 <RCkeysRefresh+0x220>)
 8003020:	2200      	movs	r2, #0
 8003022:	74da      	strb	r2, [r3, #19]

	}
	if(key>63){
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	2b3f      	cmp	r3, #63	@ 0x3f
 8003028:	d906      	bls.n	8003038 <RCkeysRefresh+0x130>
		pc_control.q = 1;
 800302a:	4b3f      	ldr	r3, [pc, #252]	@ (8003128 <RCkeysRefresh+0x220>)
 800302c:	2201      	movs	r2, #1
 800302e:	749a      	strb	r2, [r3, #18]
		key= key - 64;
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	3b40      	subs	r3, #64	@ 0x40
 8003034:	80fb      	strh	r3, [r7, #6]
 8003036:	e002      	b.n	800303e <RCkeysRefresh+0x136>
	}else{
		pc_control.q = 0;
 8003038:	4b3b      	ldr	r3, [pc, #236]	@ (8003128 <RCkeysRefresh+0x220>)
 800303a:	2200      	movs	r2, #0
 800303c:	749a      	strb	r2, [r3, #18]
	}
	if(key>31){
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	2b1f      	cmp	r3, #31
 8003042:	d906      	bls.n	8003052 <RCkeysRefresh+0x14a>
		pc_control.ctrl = 1;
 8003044:	4b38      	ldr	r3, [pc, #224]	@ (8003128 <RCkeysRefresh+0x220>)
 8003046:	2201      	movs	r2, #1
 8003048:	745a      	strb	r2, [r3, #17]
		key =key - 32;
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	3b20      	subs	r3, #32
 800304e:	80fb      	strh	r3, [r7, #6]
 8003050:	e002      	b.n	8003058 <RCkeysRefresh+0x150>
	}else{
		pc_control.ctrl = 0;
 8003052:	4b35      	ldr	r3, [pc, #212]	@ (8003128 <RCkeysRefresh+0x220>)
 8003054:	2200      	movs	r2, #0
 8003056:	745a      	strb	r2, [r3, #17]
	}
	if(key>15){
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	2b0f      	cmp	r3, #15
 800305c:	d906      	bls.n	800306c <RCkeysRefresh+0x164>
		pc_control.shift = 1;
 800305e:	4b32      	ldr	r3, [pc, #200]	@ (8003128 <RCkeysRefresh+0x220>)
 8003060:	2201      	movs	r2, #1
 8003062:	741a      	strb	r2, [r3, #16]
		key= key - 16;
 8003064:	88fb      	ldrh	r3, [r7, #6]
 8003066:	3b10      	subs	r3, #16
 8003068:	80fb      	strh	r3, [r7, #6]
 800306a:	e002      	b.n	8003072 <RCkeysRefresh+0x16a>
	}else{
		pc_control.shift = 0;
 800306c:	4b2e      	ldr	r3, [pc, #184]	@ (8003128 <RCkeysRefresh+0x220>)
 800306e:	2200      	movs	r2, #0
 8003070:	741a      	strb	r2, [r3, #16]
	}
	if(key>7){
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	2b07      	cmp	r3, #7
 8003076:	d906      	bls.n	8003086 <RCkeysRefresh+0x17e>
		pc_control.d = 1;
 8003078:	4b2b      	ldr	r3, [pc, #172]	@ (8003128 <RCkeysRefresh+0x220>)
 800307a:	2201      	movs	r2, #1
 800307c:	73da      	strb	r2, [r3, #15]
		key= key - 8;
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	3b08      	subs	r3, #8
 8003082:	80fb      	strh	r3, [r7, #6]
 8003084:	e002      	b.n	800308c <RCkeysRefresh+0x184>
	}else{
		pc_control.d = 0;
 8003086:	4b28      	ldr	r3, [pc, #160]	@ (8003128 <RCkeysRefresh+0x220>)
 8003088:	2200      	movs	r2, #0
 800308a:	73da      	strb	r2, [r3, #15]
	}
	if(key>3){
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	2b03      	cmp	r3, #3
 8003090:	d906      	bls.n	80030a0 <RCkeysRefresh+0x198>
		pc_control.a = 1;
 8003092:	4b25      	ldr	r3, [pc, #148]	@ (8003128 <RCkeysRefresh+0x220>)
 8003094:	2201      	movs	r2, #1
 8003096:	739a      	strb	r2, [r3, #14]
		key= key - 4;
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	3b04      	subs	r3, #4
 800309c:	80fb      	strh	r3, [r7, #6]
 800309e:	e002      	b.n	80030a6 <RCkeysRefresh+0x19e>
	}else{
		pc_control.a = 0;
 80030a0:	4b21      	ldr	r3, [pc, #132]	@ (8003128 <RCkeysRefresh+0x220>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	739a      	strb	r2, [r3, #14]
	}
	if(key>1){
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d906      	bls.n	80030ba <RCkeysRefresh+0x1b2>
		pc_control.s = 1;
 80030ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003128 <RCkeysRefresh+0x220>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	735a      	strb	r2, [r3, #13]
		key= key - 2;
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	3b02      	subs	r3, #2
 80030b6:	80fb      	strh	r3, [r7, #6]
 80030b8:	e002      	b.n	80030c0 <RCkeysRefresh+0x1b8>
	}else{
		pc_control.s = 0;
 80030ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003128 <RCkeysRefresh+0x220>)
 80030bc:	2200      	movs	r2, #0
 80030be:	735a      	strb	r2, [r3, #13]
	}
	if(key > 0){
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <RCkeysRefresh+0x1c6>
		pc_control.w = 1;
 80030c6:	4b18      	ldr	r3, [pc, #96]	@ (8003128 <RCkeysRefresh+0x220>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	731a      	strb	r2, [r3, #12]
 80030cc:	e002      	b.n	80030d4 <RCkeysRefresh+0x1cc>
	}else{
		pc_control.w = 0;
 80030ce:	4b16      	ldr	r3, [pc, #88]	@ (8003128 <RCkeysRefresh+0x220>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	731a      	strb	r2, [r3, #12]
	}

	pc_control.mouse_x = rc_ptr->mouse.x;
 80030d4:	4b13      	ldr	r3, [pc, #76]	@ (8003124 <RCkeysRefresh+0x21c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80030dc:	b21a      	sxth	r2, r3
 80030de:	4b12      	ldr	r3, [pc, #72]	@ (8003128 <RCkeysRefresh+0x220>)
 80030e0:	801a      	strh	r2, [r3, #0]
	pc_control.mouse_y = rc_ptr->mouse.y;
 80030e2:	4b10      	ldr	r3, [pc, #64]	@ (8003124 <RCkeysRefresh+0x21c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80030ea:	b21a      	sxth	r2, r3
 80030ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003128 <RCkeysRefresh+0x220>)
 80030ee:	805a      	strh	r2, [r3, #2]
	pc_control.mouse_z = rc_ptr->mouse.z;
 80030f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003124 <RCkeysRefresh+0x21c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80030f8:	b21a      	sxth	r2, r3
 80030fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003128 <RCkeysRefresh+0x220>)
 80030fc:	809a      	strh	r2, [r3, #4]

	pc_control.left_button_down = rc_ptr->mouse.press_l;
 80030fe:	4b09      	ldr	r3, [pc, #36]	@ (8003124 <RCkeysRefresh+0x21c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	7c9b      	ldrb	r3, [r3, #18]
 8003104:	b25a      	sxtb	r2, r3
 8003106:	4b08      	ldr	r3, [pc, #32]	@ (8003128 <RCkeysRefresh+0x220>)
 8003108:	719a      	strb	r2, [r3, #6]
	pc_control.right_button_down = rc_ptr->mouse.press_r;
 800310a:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <RCkeysRefresh+0x21c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	7cdb      	ldrb	r3, [r3, #19]
 8003110:	b25a      	sxtb	r2, r3
 8003112:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <RCkeysRefresh+0x220>)
 8003114:	71da      	strb	r2, [r3, #7]
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000018 	.word	0x20000018
 8003128:	20000524 	.word	0x20000524

0800312c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	607b      	str	r3, [r7, #4]
 8003136:	4b12      	ldr	r3, [pc, #72]	@ (8003180 <HAL_MspInit+0x54>)
 8003138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313a:	4a11      	ldr	r2, [pc, #68]	@ (8003180 <HAL_MspInit+0x54>)
 800313c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003140:	6453      	str	r3, [r2, #68]	@ 0x44
 8003142:	4b0f      	ldr	r3, [pc, #60]	@ (8003180 <HAL_MspInit+0x54>)
 8003144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800314a:	607b      	str	r3, [r7, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	603b      	str	r3, [r7, #0]
 8003152:	4b0b      	ldr	r3, [pc, #44]	@ (8003180 <HAL_MspInit+0x54>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	4a0a      	ldr	r2, [pc, #40]	@ (8003180 <HAL_MspInit+0x54>)
 8003158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800315c:	6413      	str	r3, [r2, #64]	@ 0x40
 800315e:	4b08      	ldr	r3, [pc, #32]	@ (8003180 <HAL_MspInit+0x54>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800316a:	2200      	movs	r2, #0
 800316c:	210f      	movs	r1, #15
 800316e:	f06f 0001 	mvn.w	r0, #1
 8003172:	f001 fdb8 	bl	8004ce6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800

08003184 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08c      	sub	sp, #48	@ 0x30
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	f107 031c 	add.w	r3, r7, #28
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a4a      	ldr	r2, [pc, #296]	@ (80032cc <HAL_CAN_MspInit+0x148>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d13d      	bne.n	8003222 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80031a6:	4b4a      	ldr	r3, [pc, #296]	@ (80032d0 <HAL_CAN_MspInit+0x14c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3301      	adds	r3, #1
 80031ac:	4a48      	ldr	r2, [pc, #288]	@ (80032d0 <HAL_CAN_MspInit+0x14c>)
 80031ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80031b0:	4b47      	ldr	r3, [pc, #284]	@ (80032d0 <HAL_CAN_MspInit+0x14c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d10d      	bne.n	80031d4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80031b8:	2300      	movs	r3, #0
 80031ba:	61bb      	str	r3, [r7, #24]
 80031bc:	4b45      	ldr	r3, [pc, #276]	@ (80032d4 <HAL_CAN_MspInit+0x150>)
 80031be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c0:	4a44      	ldr	r2, [pc, #272]	@ (80032d4 <HAL_CAN_MspInit+0x150>)
 80031c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80031c8:	4b42      	ldr	r3, [pc, #264]	@ (80032d4 <HAL_CAN_MspInit+0x150>)
 80031ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	4b3e      	ldr	r3, [pc, #248]	@ (80032d4 <HAL_CAN_MspInit+0x150>)
 80031da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031dc:	4a3d      	ldr	r2, [pc, #244]	@ (80032d4 <HAL_CAN_MspInit+0x150>)
 80031de:	f043 0308 	orr.w	r3, r3, #8
 80031e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80031e4:	4b3b      	ldr	r3, [pc, #236]	@ (80032d4 <HAL_CAN_MspInit+0x150>)
 80031e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031f0:	2303      	movs	r3, #3
 80031f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f4:	2302      	movs	r3, #2
 80031f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031fc:	2303      	movs	r3, #3
 80031fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003200:	2309      	movs	r3, #9
 8003202:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003204:	f107 031c 	add.w	r3, r7, #28
 8003208:	4619      	mov	r1, r3
 800320a:	4833      	ldr	r0, [pc, #204]	@ (80032d8 <HAL_CAN_MspInit+0x154>)
 800320c:	f002 f9a4 	bl	8005558 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8003210:	2200      	movs	r2, #0
 8003212:	2105      	movs	r1, #5
 8003214:	2014      	movs	r0, #20
 8003216:	f001 fd66 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800321a:	2014      	movs	r0, #20
 800321c:	f001 fd7f 	bl	8004d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003220:	e04f      	b.n	80032c2 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a2d      	ldr	r2, [pc, #180]	@ (80032dc <HAL_CAN_MspInit+0x158>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d14a      	bne.n	80032c2 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800322c:	2300      	movs	r3, #0
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	4b28      	ldr	r3, [pc, #160]	@ (80032d4 <HAL_CAN_MspInit+0x150>)
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	4a27      	ldr	r2, [pc, #156]	@ (80032d4 <HAL_CAN_MspInit+0x150>)
 8003236:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800323a:	6413      	str	r3, [r2, #64]	@ 0x40
 800323c:	4b25      	ldr	r3, [pc, #148]	@ (80032d4 <HAL_CAN_MspInit+0x150>)
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003248:	4b21      	ldr	r3, [pc, #132]	@ (80032d0 <HAL_CAN_MspInit+0x14c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3301      	adds	r3, #1
 800324e:	4a20      	ldr	r2, [pc, #128]	@ (80032d0 <HAL_CAN_MspInit+0x14c>)
 8003250:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003252:	4b1f      	ldr	r3, [pc, #124]	@ (80032d0 <HAL_CAN_MspInit+0x14c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d10d      	bne.n	8003276 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	4b1d      	ldr	r3, [pc, #116]	@ (80032d4 <HAL_CAN_MspInit+0x150>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	4a1c      	ldr	r2, [pc, #112]	@ (80032d4 <HAL_CAN_MspInit+0x150>)
 8003264:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003268:	6413      	str	r3, [r2, #64]	@ 0x40
 800326a:	4b1a      	ldr	r3, [pc, #104]	@ (80032d4 <HAL_CAN_MspInit+0x150>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	4b16      	ldr	r3, [pc, #88]	@ (80032d4 <HAL_CAN_MspInit+0x150>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	4a15      	ldr	r2, [pc, #84]	@ (80032d4 <HAL_CAN_MspInit+0x150>)
 8003280:	f043 0302 	orr.w	r3, r3, #2
 8003284:	6313      	str	r3, [r2, #48]	@ 0x30
 8003286:	4b13      	ldr	r3, [pc, #76]	@ (80032d4 <HAL_CAN_MspInit+0x150>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003292:	2360      	movs	r3, #96	@ 0x60
 8003294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003296:	2302      	movs	r3, #2
 8003298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329e:	2303      	movs	r3, #3
 80032a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80032a2:	2309      	movs	r3, #9
 80032a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a6:	f107 031c 	add.w	r3, r7, #28
 80032aa:	4619      	mov	r1, r3
 80032ac:	480c      	ldr	r0, [pc, #48]	@ (80032e0 <HAL_CAN_MspInit+0x15c>)
 80032ae:	f002 f953 	bl	8005558 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80032b2:	2200      	movs	r2, #0
 80032b4:	2105      	movs	r1, #5
 80032b6:	2040      	movs	r0, #64	@ 0x40
 80032b8:	f001 fd15 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80032bc:	2040      	movs	r0, #64	@ 0x40
 80032be:	f001 fd2e 	bl	8004d1e <HAL_NVIC_EnableIRQ>
}
 80032c2:	bf00      	nop
 80032c4:	3730      	adds	r7, #48	@ 0x30
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40006400 	.word	0x40006400
 80032d0:	20000c4c 	.word	0x20000c4c
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40020c00 	.word	0x40020c00
 80032dc:	40006800 	.word	0x40006800
 80032e0:	40020400 	.word	0x40020400

080032e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08a      	sub	sp, #40	@ 0x28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ec:	f107 0314 	add.w	r3, r7, #20
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a29      	ldr	r2, [pc, #164]	@ (80033a8 <HAL_I2C_MspInit+0xc4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d14b      	bne.n	800339e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	4b28      	ldr	r3, [pc, #160]	@ (80033ac <HAL_I2C_MspInit+0xc8>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330e:	4a27      	ldr	r2, [pc, #156]	@ (80033ac <HAL_I2C_MspInit+0xc8>)
 8003310:	f043 0304 	orr.w	r3, r3, #4
 8003314:	6313      	str	r3, [r2, #48]	@ 0x30
 8003316:	4b25      	ldr	r3, [pc, #148]	@ (80033ac <HAL_I2C_MspInit+0xc8>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	4b21      	ldr	r3, [pc, #132]	@ (80033ac <HAL_I2C_MspInit+0xc8>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332a:	4a20      	ldr	r2, [pc, #128]	@ (80033ac <HAL_I2C_MspInit+0xc8>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6313      	str	r3, [r2, #48]	@ 0x30
 8003332:	4b1e      	ldr	r3, [pc, #120]	@ (80033ac <HAL_I2C_MspInit+0xc8>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800333e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003344:	2312      	movs	r3, #18
 8003346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334c:	2303      	movs	r3, #3
 800334e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003350:	2304      	movs	r3, #4
 8003352:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003354:	f107 0314 	add.w	r3, r7, #20
 8003358:	4619      	mov	r1, r3
 800335a:	4815      	ldr	r0, [pc, #84]	@ (80033b0 <HAL_I2C_MspInit+0xcc>)
 800335c:	f002 f8fc 	bl	8005558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003360:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003366:	2312      	movs	r3, #18
 8003368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800336e:	2303      	movs	r3, #3
 8003370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003372:	2304      	movs	r3, #4
 8003374:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	4619      	mov	r1, r3
 800337c:	480d      	ldr	r0, [pc, #52]	@ (80033b4 <HAL_I2C_MspInit+0xd0>)
 800337e:	f002 f8eb 	bl	8005558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	4b09      	ldr	r3, [pc, #36]	@ (80033ac <HAL_I2C_MspInit+0xc8>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	4a08      	ldr	r2, [pc, #32]	@ (80033ac <HAL_I2C_MspInit+0xc8>)
 800338c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003390:	6413      	str	r3, [r2, #64]	@ 0x40
 8003392:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <HAL_I2C_MspInit+0xc8>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800339e:	bf00      	nop
 80033a0:	3728      	adds	r7, #40	@ 0x28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40005c00 	.word	0x40005c00
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40020800 	.word	0x40020800
 80033b4:	40020000 	.word	0x40020000

080033b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	@ 0x28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	f107 0314 	add.w	r3, r7, #20
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a28      	ldr	r2, [pc, #160]	@ (8003478 <HAL_SPI_MspInit+0xc0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d149      	bne.n	800346e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	4b27      	ldr	r3, [pc, #156]	@ (800347c <HAL_SPI_MspInit+0xc4>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e2:	4a26      	ldr	r2, [pc, #152]	@ (800347c <HAL_SPI_MspInit+0xc4>)
 80033e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80033e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80033ea:	4b24      	ldr	r3, [pc, #144]	@ (800347c <HAL_SPI_MspInit+0xc4>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b20      	ldr	r3, [pc, #128]	@ (800347c <HAL_SPI_MspInit+0xc4>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	4a1f      	ldr	r2, [pc, #124]	@ (800347c <HAL_SPI_MspInit+0xc4>)
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	6313      	str	r3, [r2, #48]	@ 0x30
 8003406:	4b1d      	ldr	r3, [pc, #116]	@ (800347c <HAL_SPI_MspInit+0xc4>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	4b19      	ldr	r3, [pc, #100]	@ (800347c <HAL_SPI_MspInit+0xc4>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341a:	4a18      	ldr	r2, [pc, #96]	@ (800347c <HAL_SPI_MspInit+0xc4>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6313      	str	r3, [r2, #48]	@ 0x30
 8003422:	4b16      	ldr	r3, [pc, #88]	@ (800347c <HAL_SPI_MspInit+0xc4>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800342e:	2318      	movs	r3, #24
 8003430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003432:	2302      	movs	r3, #2
 8003434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343a:	2303      	movs	r3, #3
 800343c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800343e:	2305      	movs	r3, #5
 8003440:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003442:	f107 0314 	add.w	r3, r7, #20
 8003446:	4619      	mov	r1, r3
 8003448:	480d      	ldr	r0, [pc, #52]	@ (8003480 <HAL_SPI_MspInit+0xc8>)
 800344a:	f002 f885 	bl	8005558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800344e:	2380      	movs	r3, #128	@ 0x80
 8003450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003452:	2302      	movs	r3, #2
 8003454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345a:	2303      	movs	r3, #3
 800345c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800345e:	2305      	movs	r3, #5
 8003460:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003462:	f107 0314 	add.w	r3, r7, #20
 8003466:	4619      	mov	r1, r3
 8003468:	4806      	ldr	r0, [pc, #24]	@ (8003484 <HAL_SPI_MspInit+0xcc>)
 800346a:	f002 f875 	bl	8005558 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800346e:	bf00      	nop
 8003470:	3728      	adds	r7, #40	@ 0x28
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40013000 	.word	0x40013000
 800347c:	40023800 	.word	0x40023800
 8003480:	40020400 	.word	0x40020400
 8003484:	40020000 	.word	0x40020000

08003488 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1f      	ldr	r2, [pc, #124]	@ (8003514 <HAL_TIM_PWM_MspInit+0x8c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d10e      	bne.n	80034b8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	4b1e      	ldr	r3, [pc, #120]	@ (8003518 <HAL_TIM_PWM_MspInit+0x90>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003518 <HAL_TIM_PWM_MspInit+0x90>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003518 <HAL_TIM_PWM_MspInit+0x90>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80034b6:	e026      	b.n	8003506 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a17      	ldr	r2, [pc, #92]	@ (800351c <HAL_TIM_PWM_MspInit+0x94>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d10e      	bne.n	80034e0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	4b14      	ldr	r3, [pc, #80]	@ (8003518 <HAL_TIM_PWM_MspInit+0x90>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	4a13      	ldr	r2, [pc, #76]	@ (8003518 <HAL_TIM_PWM_MspInit+0x90>)
 80034cc:	f043 0308 	orr.w	r3, r3, #8
 80034d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034d2:	4b11      	ldr	r3, [pc, #68]	@ (8003518 <HAL_TIM_PWM_MspInit+0x90>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	693b      	ldr	r3, [r7, #16]
}
 80034de:	e012      	b.n	8003506 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003520 <HAL_TIM_PWM_MspInit+0x98>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d10d      	bne.n	8003506 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003518 <HAL_TIM_PWM_MspInit+0x90>)
 80034f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f2:	4a09      	ldr	r2, [pc, #36]	@ (8003518 <HAL_TIM_PWM_MspInit+0x90>)
 80034f4:	f043 0302 	orr.w	r3, r3, #2
 80034f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034fa:	4b07      	ldr	r3, [pc, #28]	@ (8003518 <HAL_TIM_PWM_MspInit+0x90>)
 80034fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
}
 8003506:	bf00      	nop
 8003508:	371c      	adds	r7, #28
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40010000 	.word	0x40010000
 8003518:	40023800 	.word	0x40023800
 800351c:	40000c00 	.word	0x40000c00
 8003520:	40010400 	.word	0x40010400

08003524 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a15      	ldr	r2, [pc, #84]	@ (8003588 <HAL_TIM_Base_MspInit+0x64>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d10e      	bne.n	8003554 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	4b14      	ldr	r3, [pc, #80]	@ (800358c <HAL_TIM_Base_MspInit+0x68>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353e:	4a13      	ldr	r2, [pc, #76]	@ (800358c <HAL_TIM_Base_MspInit+0x68>)
 8003540:	f043 0304 	orr.w	r3, r3, #4
 8003544:	6413      	str	r3, [r2, #64]	@ 0x40
 8003546:	4b11      	ldr	r3, [pc, #68]	@ (800358c <HAL_TIM_Base_MspInit+0x68>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003552:	e012      	b.n	800357a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a0d      	ldr	r2, [pc, #52]	@ (8003590 <HAL_TIM_Base_MspInit+0x6c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d10d      	bne.n	800357a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <HAL_TIM_Base_MspInit+0x68>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003566:	4a09      	ldr	r2, [pc, #36]	@ (800358c <HAL_TIM_Base_MspInit+0x68>)
 8003568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800356c:	6453      	str	r3, [r2, #68]	@ 0x44
 800356e:	4b07      	ldr	r3, [pc, #28]	@ (800358c <HAL_TIM_Base_MspInit+0x68>)
 8003570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	68bb      	ldr	r3, [r7, #8]
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40000800 	.word	0x40000800
 800358c:	40023800 	.word	0x40023800
 8003590:	40014400 	.word	0x40014400

08003594 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08e      	sub	sp, #56	@ 0x38
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a6a      	ldr	r2, [pc, #424]	@ (800375c <HAL_TIM_MspPostInit+0x1c8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d11f      	bne.n	80035f6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	623b      	str	r3, [r7, #32]
 80035ba:	4b69      	ldr	r3, [pc, #420]	@ (8003760 <HAL_TIM_MspPostInit+0x1cc>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035be:	4a68      	ldr	r2, [pc, #416]	@ (8003760 <HAL_TIM_MspPostInit+0x1cc>)
 80035c0:	f043 0310 	orr.w	r3, r3, #16
 80035c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035c6:	4b66      	ldr	r3, [pc, #408]	@ (8003760 <HAL_TIM_MspPostInit+0x1cc>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	623b      	str	r3, [r7, #32]
 80035d0:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 80035d2:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80035d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d8:	2302      	movs	r3, #2
 80035da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e0:	2300      	movs	r3, #0
 80035e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035e4:	2301      	movs	r3, #1
 80035e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035ec:	4619      	mov	r1, r3
 80035ee:	485d      	ldr	r0, [pc, #372]	@ (8003764 <HAL_TIM_MspPostInit+0x1d0>)
 80035f0:	f001 ffb2 	bl	8005558 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80035f4:	e0ae      	b.n	8003754 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003768 <HAL_TIM_MspPostInit+0x1d4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d11f      	bne.n	8003640 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003600:	2300      	movs	r3, #0
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	4b56      	ldr	r3, [pc, #344]	@ (8003760 <HAL_TIM_MspPostInit+0x1cc>)
 8003606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003608:	4a55      	ldr	r2, [pc, #340]	@ (8003760 <HAL_TIM_MspPostInit+0x1cc>)
 800360a:	f043 0308 	orr.w	r3, r3, #8
 800360e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003610:	4b53      	ldr	r3, [pc, #332]	@ (8003760 <HAL_TIM_MspPostInit+0x1cc>)
 8003612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	61fb      	str	r3, [r7, #28]
 800361a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800361c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003620:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003622:	2302      	movs	r3, #2
 8003624:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003626:	2300      	movs	r3, #0
 8003628:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362a:	2300      	movs	r3, #0
 800362c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800362e:	2302      	movs	r3, #2
 8003630:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003632:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003636:	4619      	mov	r1, r3
 8003638:	484c      	ldr	r0, [pc, #304]	@ (800376c <HAL_TIM_MspPostInit+0x1d8>)
 800363a:	f001 ff8d 	bl	8005558 <HAL_GPIO_Init>
}
 800363e:	e089      	b.n	8003754 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a4a      	ldr	r2, [pc, #296]	@ (8003770 <HAL_TIM_MspPostInit+0x1dc>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d11f      	bne.n	800368a <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	4b44      	ldr	r3, [pc, #272]	@ (8003760 <HAL_TIM_MspPostInit+0x1cc>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003652:	4a43      	ldr	r2, [pc, #268]	@ (8003760 <HAL_TIM_MspPostInit+0x1cc>)
 8003654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003658:	6313      	str	r3, [r2, #48]	@ 0x30
 800365a:	4b41      	ldr	r3, [pc, #260]	@ (8003760 <HAL_TIM_MspPostInit+0x1cc>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003662:	61bb      	str	r3, [r7, #24]
 8003664:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8003666:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800366a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366c:	2302      	movs	r3, #2
 800366e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003670:	2300      	movs	r3, #0
 8003672:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003674:	2300      	movs	r3, #0
 8003676:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003678:	2302      	movs	r3, #2
 800367a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800367c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003680:	4619      	mov	r1, r3
 8003682:	483c      	ldr	r0, [pc, #240]	@ (8003774 <HAL_TIM_MspPostInit+0x1e0>)
 8003684:	f001 ff68 	bl	8005558 <HAL_GPIO_Init>
}
 8003688:	e064      	b.n	8003754 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a3a      	ldr	r2, [pc, #232]	@ (8003778 <HAL_TIM_MspPostInit+0x1e4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d13c      	bne.n	800370e <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	4b31      	ldr	r3, [pc, #196]	@ (8003760 <HAL_TIM_MspPostInit+0x1cc>)
 800369a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369c:	4a30      	ldr	r2, [pc, #192]	@ (8003760 <HAL_TIM_MspPostInit+0x1cc>)
 800369e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80036a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003760 <HAL_TIM_MspPostInit+0x1cc>)
 80036a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036b0:	2300      	movs	r3, #0
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003760 <HAL_TIM_MspPostInit+0x1cc>)
 80036b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b8:	4a29      	ldr	r2, [pc, #164]	@ (8003760 <HAL_TIM_MspPostInit+0x1cc>)
 80036ba:	f043 0304 	orr.w	r3, r3, #4
 80036be:	6313      	str	r3, [r2, #48]	@ 0x30
 80036c0:	4b27      	ldr	r3, [pc, #156]	@ (8003760 <HAL_TIM_MspPostInit+0x1cc>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80036cc:	23c0      	movs	r3, #192	@ 0xc0
 80036ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d0:	2302      	movs	r3, #2
 80036d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d8:	2300      	movs	r3, #0
 80036da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80036dc:	2303      	movs	r3, #3
 80036de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80036e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036e4:	4619      	mov	r1, r3
 80036e6:	4825      	ldr	r0, [pc, #148]	@ (800377c <HAL_TIM_MspPostInit+0x1e8>)
 80036e8:	f001 ff36 	bl	8005558 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80036ec:	2340      	movs	r3, #64	@ 0x40
 80036ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f0:	2302      	movs	r3, #2
 80036f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f8:	2300      	movs	r3, #0
 80036fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80036fc:	2303      	movs	r3, #3
 80036fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003700:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003704:	4619      	mov	r1, r3
 8003706:	481e      	ldr	r0, [pc, #120]	@ (8003780 <HAL_TIM_MspPostInit+0x1ec>)
 8003708:	f001 ff26 	bl	8005558 <HAL_GPIO_Init>
}
 800370c:	e022      	b.n	8003754 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1c      	ldr	r2, [pc, #112]	@ (8003784 <HAL_TIM_MspPostInit+0x1f0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d11d      	bne.n	8003754 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	4b10      	ldr	r3, [pc, #64]	@ (8003760 <HAL_TIM_MspPostInit+0x1cc>)
 800371e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003720:	4a0f      	ldr	r2, [pc, #60]	@ (8003760 <HAL_TIM_MspPostInit+0x1cc>)
 8003722:	f043 0320 	orr.w	r3, r3, #32
 8003726:	6313      	str	r3, [r2, #48]	@ 0x30
 8003728:	4b0d      	ldr	r3, [pc, #52]	@ (8003760 <HAL_TIM_MspPostInit+0x1cc>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003734:	2340      	movs	r3, #64	@ 0x40
 8003736:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003738:	2302      	movs	r3, #2
 800373a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800373c:	2301      	movs	r3, #1
 800373e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003740:	2302      	movs	r3, #2
 8003742:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003744:	2303      	movs	r3, #3
 8003746:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003748:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800374c:	4619      	mov	r1, r3
 800374e:	480e      	ldr	r0, [pc, #56]	@ (8003788 <HAL_TIM_MspPostInit+0x1f4>)
 8003750:	f001 ff02 	bl	8005558 <HAL_GPIO_Init>
}
 8003754:	bf00      	nop
 8003756:	3738      	adds	r7, #56	@ 0x38
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40010000 	.word	0x40010000
 8003760:	40023800 	.word	0x40023800
 8003764:	40021000 	.word	0x40021000
 8003768:	40000800 	.word	0x40000800
 800376c:	40020c00 	.word	0x40020c00
 8003770:	40000c00 	.word	0x40000c00
 8003774:	40021c00 	.word	0x40021c00
 8003778:	40010400 	.word	0x40010400
 800377c:	40022000 	.word	0x40022000
 8003780:	40020800 	.word	0x40020800
 8003784:	40014400 	.word	0x40014400
 8003788:	40021400 	.word	0x40021400

0800378c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08e      	sub	sp, #56	@ 0x38
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	60da      	str	r2, [r3, #12]
 80037a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a90      	ldr	r2, [pc, #576]	@ (80039ec <HAL_UART_MspInit+0x260>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	f040 80b2 	bne.w	8003914 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037b0:	2300      	movs	r3, #0
 80037b2:	623b      	str	r3, [r7, #32]
 80037b4:	4b8e      	ldr	r3, [pc, #568]	@ (80039f0 <HAL_UART_MspInit+0x264>)
 80037b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b8:	4a8d      	ldr	r2, [pc, #564]	@ (80039f0 <HAL_UART_MspInit+0x264>)
 80037ba:	f043 0310 	orr.w	r3, r3, #16
 80037be:	6453      	str	r3, [r2, #68]	@ 0x44
 80037c0:	4b8b      	ldr	r3, [pc, #556]	@ (80039f0 <HAL_UART_MspInit+0x264>)
 80037c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	623b      	str	r3, [r7, #32]
 80037ca:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037cc:	2300      	movs	r3, #0
 80037ce:	61fb      	str	r3, [r7, #28]
 80037d0:	4b87      	ldr	r3, [pc, #540]	@ (80039f0 <HAL_UART_MspInit+0x264>)
 80037d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d4:	4a86      	ldr	r2, [pc, #536]	@ (80039f0 <HAL_UART_MspInit+0x264>)
 80037d6:	f043 0302 	orr.w	r3, r3, #2
 80037da:	6313      	str	r3, [r2, #48]	@ 0x30
 80037dc:	4b84      	ldr	r3, [pc, #528]	@ (80039f0 <HAL_UART_MspInit+0x264>)
 80037de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e8:	2300      	movs	r3, #0
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	4b80      	ldr	r3, [pc, #512]	@ (80039f0 <HAL_UART_MspInit+0x264>)
 80037ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f0:	4a7f      	ldr	r2, [pc, #508]	@ (80039f0 <HAL_UART_MspInit+0x264>)
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80037f8:	4b7d      	ldr	r3, [pc, #500]	@ (80039f0 <HAL_UART_MspInit+0x264>)
 80037fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003804:	2380      	movs	r3, #128	@ 0x80
 8003806:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003808:	2302      	movs	r3, #2
 800380a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380c:	2300      	movs	r3, #0
 800380e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003810:	2303      	movs	r3, #3
 8003812:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003814:	2307      	movs	r3, #7
 8003816:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800381c:	4619      	mov	r1, r3
 800381e:	4875      	ldr	r0, [pc, #468]	@ (80039f4 <HAL_UART_MspInit+0x268>)
 8003820:	f001 fe9a 	bl	8005558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003824:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003828:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382a:	2302      	movs	r3, #2
 800382c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382e:	2300      	movs	r3, #0
 8003830:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003832:	2303      	movs	r3, #3
 8003834:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003836:	2307      	movs	r3, #7
 8003838:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800383e:	4619      	mov	r1, r3
 8003840:	486d      	ldr	r0, [pc, #436]	@ (80039f8 <HAL_UART_MspInit+0x26c>)
 8003842:	f001 fe89 	bl	8005558 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003846:	4b6d      	ldr	r3, [pc, #436]	@ (80039fc <HAL_UART_MspInit+0x270>)
 8003848:	4a6d      	ldr	r2, [pc, #436]	@ (8003a00 <HAL_UART_MspInit+0x274>)
 800384a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800384c:	4b6b      	ldr	r3, [pc, #428]	@ (80039fc <HAL_UART_MspInit+0x270>)
 800384e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003852:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003854:	4b69      	ldr	r3, [pc, #420]	@ (80039fc <HAL_UART_MspInit+0x270>)
 8003856:	2240      	movs	r2, #64	@ 0x40
 8003858:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800385a:	4b68      	ldr	r3, [pc, #416]	@ (80039fc <HAL_UART_MspInit+0x270>)
 800385c:	2200      	movs	r2, #0
 800385e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003860:	4b66      	ldr	r3, [pc, #408]	@ (80039fc <HAL_UART_MspInit+0x270>)
 8003862:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003866:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003868:	4b64      	ldr	r3, [pc, #400]	@ (80039fc <HAL_UART_MspInit+0x270>)
 800386a:	2200      	movs	r2, #0
 800386c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800386e:	4b63      	ldr	r3, [pc, #396]	@ (80039fc <HAL_UART_MspInit+0x270>)
 8003870:	2200      	movs	r2, #0
 8003872:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003874:	4b61      	ldr	r3, [pc, #388]	@ (80039fc <HAL_UART_MspInit+0x270>)
 8003876:	2200      	movs	r2, #0
 8003878:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800387a:	4b60      	ldr	r3, [pc, #384]	@ (80039fc <HAL_UART_MspInit+0x270>)
 800387c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003880:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003882:	4b5e      	ldr	r3, [pc, #376]	@ (80039fc <HAL_UART_MspInit+0x270>)
 8003884:	2200      	movs	r2, #0
 8003886:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003888:	485c      	ldr	r0, [pc, #368]	@ (80039fc <HAL_UART_MspInit+0x270>)
 800388a:	f001 fa63 	bl	8004d54 <HAL_DMA_Init>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003894:	f7fe fe8e 	bl	80025b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a58      	ldr	r2, [pc, #352]	@ (80039fc <HAL_UART_MspInit+0x270>)
 800389c:	635a      	str	r2, [r3, #52]	@ 0x34
 800389e:	4a57      	ldr	r2, [pc, #348]	@ (80039fc <HAL_UART_MspInit+0x270>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80038a4:	4b57      	ldr	r3, [pc, #348]	@ (8003a04 <HAL_UART_MspInit+0x278>)
 80038a6:	4a58      	ldr	r2, [pc, #352]	@ (8003a08 <HAL_UART_MspInit+0x27c>)
 80038a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80038aa:	4b56      	ldr	r3, [pc, #344]	@ (8003a04 <HAL_UART_MspInit+0x278>)
 80038ac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80038b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038b2:	4b54      	ldr	r3, [pc, #336]	@ (8003a04 <HAL_UART_MspInit+0x278>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038b8:	4b52      	ldr	r3, [pc, #328]	@ (8003a04 <HAL_UART_MspInit+0x278>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038be:	4b51      	ldr	r3, [pc, #324]	@ (8003a04 <HAL_UART_MspInit+0x278>)
 80038c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038c4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038c6:	4b4f      	ldr	r3, [pc, #316]	@ (8003a04 <HAL_UART_MspInit+0x278>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003a04 <HAL_UART_MspInit+0x278>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80038d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003a04 <HAL_UART_MspInit+0x278>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80038d8:	4b4a      	ldr	r3, [pc, #296]	@ (8003a04 <HAL_UART_MspInit+0x278>)
 80038da:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80038de:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038e0:	4b48      	ldr	r3, [pc, #288]	@ (8003a04 <HAL_UART_MspInit+0x278>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80038e6:	4847      	ldr	r0, [pc, #284]	@ (8003a04 <HAL_UART_MspInit+0x278>)
 80038e8:	f001 fa34 	bl	8004d54 <HAL_DMA_Init>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80038f2:	f7fe fe5f 	bl	80025b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a42      	ldr	r2, [pc, #264]	@ (8003a04 <HAL_UART_MspInit+0x278>)
 80038fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80038fc:	4a41      	ldr	r2, [pc, #260]	@ (8003a04 <HAL_UART_MspInit+0x278>)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003902:	2200      	movs	r2, #0
 8003904:	2105      	movs	r1, #5
 8003906:	2025      	movs	r0, #37	@ 0x25
 8003908:	f001 f9ed 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800390c:	2025      	movs	r0, #37	@ 0x25
 800390e:	f001 fa06 	bl	8004d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003912:	e11c      	b.n	8003b4e <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a3c      	ldr	r2, [pc, #240]	@ (8003a0c <HAL_UART_MspInit+0x280>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d17e      	bne.n	8003a1c <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	4b33      	ldr	r3, [pc, #204]	@ (80039f0 <HAL_UART_MspInit+0x264>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	4a32      	ldr	r2, [pc, #200]	@ (80039f0 <HAL_UART_MspInit+0x264>)
 8003928:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800392c:	6413      	str	r3, [r2, #64]	@ 0x40
 800392e:	4b30      	ldr	r3, [pc, #192]	@ (80039f0 <HAL_UART_MspInit+0x264>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003932:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	4b2c      	ldr	r3, [pc, #176]	@ (80039f0 <HAL_UART_MspInit+0x264>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003942:	4a2b      	ldr	r2, [pc, #172]	@ (80039f0 <HAL_UART_MspInit+0x264>)
 8003944:	f043 0304 	orr.w	r3, r3, #4
 8003948:	6313      	str	r3, [r2, #48]	@ 0x30
 800394a:	4b29      	ldr	r3, [pc, #164]	@ (80039f0 <HAL_UART_MspInit+0x264>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8003956:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800395a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395c:	2302      	movs	r3, #2
 800395e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	2300      	movs	r3, #0
 8003962:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003964:	2303      	movs	r3, #3
 8003966:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003968:	2307      	movs	r3, #7
 800396a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800396c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003970:	4619      	mov	r1, r3
 8003972:	4827      	ldr	r0, [pc, #156]	@ (8003a10 <HAL_UART_MspInit+0x284>)
 8003974:	f001 fdf0 	bl	8005558 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003978:	4b26      	ldr	r3, [pc, #152]	@ (8003a14 <HAL_UART_MspInit+0x288>)
 800397a:	4a27      	ldr	r2, [pc, #156]	@ (8003a18 <HAL_UART_MspInit+0x28c>)
 800397c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800397e:	4b25      	ldr	r3, [pc, #148]	@ (8003a14 <HAL_UART_MspInit+0x288>)
 8003980:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003984:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003986:	4b23      	ldr	r3, [pc, #140]	@ (8003a14 <HAL_UART_MspInit+0x288>)
 8003988:	2200      	movs	r2, #0
 800398a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800398c:	4b21      	ldr	r3, [pc, #132]	@ (8003a14 <HAL_UART_MspInit+0x288>)
 800398e:	2200      	movs	r2, #0
 8003990:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003992:	4b20      	ldr	r3, [pc, #128]	@ (8003a14 <HAL_UART_MspInit+0x288>)
 8003994:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003998:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800399a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a14 <HAL_UART_MspInit+0x288>)
 800399c:	2200      	movs	r2, #0
 800399e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003a14 <HAL_UART_MspInit+0x288>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80039a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a14 <HAL_UART_MspInit+0x288>)
 80039a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039ac:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80039ae:	4b19      	ldr	r3, [pc, #100]	@ (8003a14 <HAL_UART_MspInit+0x288>)
 80039b0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80039b4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039b6:	4b17      	ldr	r3, [pc, #92]	@ (8003a14 <HAL_UART_MspInit+0x288>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80039bc:	4815      	ldr	r0, [pc, #84]	@ (8003a14 <HAL_UART_MspInit+0x288>)
 80039be:	f001 f9c9 	bl	8004d54 <HAL_DMA_Init>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_UART_MspInit+0x240>
      Error_Handler();
 80039c8:	f7fe fdf4 	bl	80025b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a11      	ldr	r2, [pc, #68]	@ (8003a14 <HAL_UART_MspInit+0x288>)
 80039d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80039d2:	4a10      	ldr	r2, [pc, #64]	@ (8003a14 <HAL_UART_MspInit+0x288>)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80039d8:	2200      	movs	r2, #0
 80039da:	2105      	movs	r1, #5
 80039dc:	2027      	movs	r0, #39	@ 0x27
 80039de:	f001 f982 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80039e2:	2027      	movs	r0, #39	@ 0x27
 80039e4:	f001 f99b 	bl	8004d1e <HAL_NVIC_EnableIRQ>
}
 80039e8:	e0b1      	b.n	8003b4e <HAL_UART_MspInit+0x3c2>
 80039ea:	bf00      	nop
 80039ec:	40011000 	.word	0x40011000
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40020400 	.word	0x40020400
 80039f8:	40020000 	.word	0x40020000
 80039fc:	200009d8 	.word	0x200009d8
 8003a00:	400264b8 	.word	0x400264b8
 8003a04:	20000a38 	.word	0x20000a38
 8003a08:	40026440 	.word	0x40026440
 8003a0c:	40004800 	.word	0x40004800
 8003a10:	40020800 	.word	0x40020800
 8003a14:	20000a98 	.word	0x20000a98
 8003a18:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a4d      	ldr	r2, [pc, #308]	@ (8003b58 <HAL_UART_MspInit+0x3cc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	f040 8093 	bne.w	8003b4e <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8003b5c <HAL_UART_MspInit+0x3d0>)
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a30:	4a4a      	ldr	r2, [pc, #296]	@ (8003b5c <HAL_UART_MspInit+0x3d0>)
 8003a32:	f043 0320 	orr.w	r3, r3, #32
 8003a36:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a38:	4b48      	ldr	r3, [pc, #288]	@ (8003b5c <HAL_UART_MspInit+0x3d0>)
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a44:	2300      	movs	r3, #0
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	4b44      	ldr	r3, [pc, #272]	@ (8003b5c <HAL_UART_MspInit+0x3d0>)
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4c:	4a43      	ldr	r2, [pc, #268]	@ (8003b5c <HAL_UART_MspInit+0x3d0>)
 8003a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a52:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a54:	4b41      	ldr	r3, [pc, #260]	@ (8003b5c <HAL_UART_MspInit+0x3d0>)
 8003a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8003a60:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8003a64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a66:	2302      	movs	r3, #2
 8003a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a72:	2308      	movs	r3, #8
 8003a74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4838      	ldr	r0, [pc, #224]	@ (8003b60 <HAL_UART_MspInit+0x3d4>)
 8003a7e:	f001 fd6b 	bl	8005558 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003a82:	4b38      	ldr	r3, [pc, #224]	@ (8003b64 <HAL_UART_MspInit+0x3d8>)
 8003a84:	4a38      	ldr	r2, [pc, #224]	@ (8003b68 <HAL_UART_MspInit+0x3dc>)
 8003a86:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003a88:	4b36      	ldr	r3, [pc, #216]	@ (8003b64 <HAL_UART_MspInit+0x3d8>)
 8003a8a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003a8e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a90:	4b34      	ldr	r3, [pc, #208]	@ (8003b64 <HAL_UART_MspInit+0x3d8>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a96:	4b33      	ldr	r3, [pc, #204]	@ (8003b64 <HAL_UART_MspInit+0x3d8>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a9c:	4b31      	ldr	r3, [pc, #196]	@ (8003b64 <HAL_UART_MspInit+0x3d8>)
 8003a9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003aa2:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8003b64 <HAL_UART_MspInit+0x3d8>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003aaa:	4b2e      	ldr	r3, [pc, #184]	@ (8003b64 <HAL_UART_MspInit+0x3d8>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8003b64 <HAL_UART_MspInit+0x3d8>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8003b64 <HAL_UART_MspInit+0x3d8>)
 8003ab8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003abc:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003abe:	4b29      	ldr	r3, [pc, #164]	@ (8003b64 <HAL_UART_MspInit+0x3d8>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003ac4:	4827      	ldr	r0, [pc, #156]	@ (8003b64 <HAL_UART_MspInit+0x3d8>)
 8003ac6:	f001 f945 	bl	8004d54 <HAL_DMA_Init>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8003ad0:	f7fe fd70 	bl	80025b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a23      	ldr	r2, [pc, #140]	@ (8003b64 <HAL_UART_MspInit+0x3d8>)
 8003ad8:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ada:	4a22      	ldr	r2, [pc, #136]	@ (8003b64 <HAL_UART_MspInit+0x3d8>)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003ae0:	4b22      	ldr	r3, [pc, #136]	@ (8003b6c <HAL_UART_MspInit+0x3e0>)
 8003ae2:	4a23      	ldr	r2, [pc, #140]	@ (8003b70 <HAL_UART_MspInit+0x3e4>)
 8003ae4:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003ae6:	4b21      	ldr	r3, [pc, #132]	@ (8003b6c <HAL_UART_MspInit+0x3e0>)
 8003ae8:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003aec:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003aee:	4b1f      	ldr	r3, [pc, #124]	@ (8003b6c <HAL_UART_MspInit+0x3e0>)
 8003af0:	2240      	movs	r2, #64	@ 0x40
 8003af2:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003af4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b6c <HAL_UART_MspInit+0x3e0>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003afa:	4b1c      	ldr	r3, [pc, #112]	@ (8003b6c <HAL_UART_MspInit+0x3e0>)
 8003afc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b00:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b02:	4b1a      	ldr	r3, [pc, #104]	@ (8003b6c <HAL_UART_MspInit+0x3e0>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b08:	4b18      	ldr	r3, [pc, #96]	@ (8003b6c <HAL_UART_MspInit+0x3e0>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003b0e:	4b17      	ldr	r3, [pc, #92]	@ (8003b6c <HAL_UART_MspInit+0x3e0>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003b14:	4b15      	ldr	r3, [pc, #84]	@ (8003b6c <HAL_UART_MspInit+0x3e0>)
 8003b16:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003b1a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b1c:	4b13      	ldr	r3, [pc, #76]	@ (8003b6c <HAL_UART_MspInit+0x3e0>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003b22:	4812      	ldr	r0, [pc, #72]	@ (8003b6c <HAL_UART_MspInit+0x3e0>)
 8003b24:	f001 f916 	bl	8004d54 <HAL_DMA_Init>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8003b2e:	f7fe fd41 	bl	80025b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a0d      	ldr	r2, [pc, #52]	@ (8003b6c <HAL_UART_MspInit+0x3e0>)
 8003b36:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b38:	4a0c      	ldr	r2, [pc, #48]	@ (8003b6c <HAL_UART_MspInit+0x3e0>)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2105      	movs	r1, #5
 8003b42:	2047      	movs	r0, #71	@ 0x47
 8003b44:	f001 f8cf 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003b48:	2047      	movs	r0, #71	@ 0x47
 8003b4a:	f001 f8e8 	bl	8004d1e <HAL_NVIC_EnableIRQ>
}
 8003b4e:	bf00      	nop
 8003b50:	3738      	adds	r7, #56	@ 0x38
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40011400 	.word	0x40011400
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	40021800 	.word	0x40021800
 8003b64:	20000af8 	.word	0x20000af8
 8003b68:	40026428 	.word	0x40026428
 8003b6c:	20000b58 	.word	0x20000b58
 8003b70:	400264a0 	.word	0x400264a0

08003b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003b78:	f003 f926 	bl	8006dc8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b7c:	bf00      	nop
 8003b7e:	e7fd      	b.n	8003b7c <NMI_Handler+0x8>

08003b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b84:	bf00      	nop
 8003b86:	e7fd      	b.n	8003b84 <HardFault_Handler+0x4>

08003b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b8c:	bf00      	nop
 8003b8e:	e7fd      	b.n	8003b8c <MemManage_Handler+0x4>

08003b90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b94:	bf00      	nop
 8003b96:	e7fd      	b.n	8003b94 <BusFault_Handler+0x4>

08003b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b9c:	bf00      	nop
 8003b9e:	e7fd      	b.n	8003b9c <UsageFault_Handler+0x4>

08003ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bb2:	f000 f93b 	bl	8003e2c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003bb6:	f007 fc39 	bl	800b42c <xTaskGetSchedulerState>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d001      	beq.n	8003bc4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003bc0:	f008 fb12 	bl	800c1e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bc4:	bf00      	nop
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003bcc:	2008      	movs	r0, #8
 8003bce:	f001 fe91 	bl	80058f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 8003bd2:	4802      	ldr	r0, [pc, #8]	@ (8003bdc <EXTI3_IRQHandler+0x14>)
 8003bd4:	f7fd fcec 	bl	80015b0 <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8003bd8:	bf00      	nop
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	2000069c 	.word	0x2000069c

08003be0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 8003be4:	2010      	movs	r0, #16
 8003be6:	f001 fe85 	bl	80058f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003bf4:	4802      	ldr	r0, [pc, #8]	@ (8003c00 <DMA1_Stream1_IRQHandler+0x10>)
 8003bf6:	f001 fa45 	bl	8005084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003bfa:	bf00      	nop
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000a98 	.word	0x20000a98

08003c04 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c08:	4802      	ldr	r0, [pc, #8]	@ (8003c14 <CAN1_RX0_IRQHandler+0x10>)
 8003c0a:	f000 fd62 	bl	80046d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	200006a8 	.word	0x200006a8

08003c18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c1c:	4802      	ldr	r0, [pc, #8]	@ (8003c28 <USART1_IRQHandler+0x10>)
 8003c1e:	f004 fcbd 	bl	800859c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	2000090c 	.word	0x2000090c

08003c2c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003c30:	4802      	ldr	r0, [pc, #8]	@ (8003c3c <DMA2_Stream1_IRQHandler+0x10>)
 8003c32:	f001 fa27 	bl	8005084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000af8 	.word	0x20000af8

08003c40 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003c44:	4802      	ldr	r0, [pc, #8]	@ (8003c50 <DMA2_Stream2_IRQHandler+0x10>)
 8003c46:	f001 fa1d 	bl	8005084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000a38 	.word	0x20000a38

08003c54 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003c58:	4802      	ldr	r0, [pc, #8]	@ (8003c64 <CAN2_RX0_IRQHandler+0x10>)
 8003c5a:	f000 fd3a 	bl	80046d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8003c5e:	bf00      	nop
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	200006d0 	.word	0x200006d0

08003c68 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003c6c:	4802      	ldr	r0, [pc, #8]	@ (8003c78 <DMA2_Stream6_IRQHandler+0x10>)
 8003c6e:	f001 fa09 	bl	8005084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000b58 	.word	0x20000b58

08003c7c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003c80:	4802      	ldr	r0, [pc, #8]	@ (8003c8c <DMA2_Stream7_IRQHandler+0x10>)
 8003c82:	f001 f9ff 	bl	8005084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003c86:	bf00      	nop
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	200009d8 	.word	0x200009d8

08003c90 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003c94:	4802      	ldr	r0, [pc, #8]	@ (8003ca0 <USART6_IRQHandler+0x10>)
 8003c96:	f004 fc81 	bl	800859c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000994 	.word	0x20000994

08003ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cac:	4a14      	ldr	r2, [pc, #80]	@ (8003d00 <_sbrk+0x5c>)
 8003cae:	4b15      	ldr	r3, [pc, #84]	@ (8003d04 <_sbrk+0x60>)
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cb8:	4b13      	ldr	r3, [pc, #76]	@ (8003d08 <_sbrk+0x64>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d102      	bne.n	8003cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cc0:	4b11      	ldr	r3, [pc, #68]	@ (8003d08 <_sbrk+0x64>)
 8003cc2:	4a12      	ldr	r2, [pc, #72]	@ (8003d0c <_sbrk+0x68>)
 8003cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cc6:	4b10      	ldr	r3, [pc, #64]	@ (8003d08 <_sbrk+0x64>)
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4413      	add	r3, r2
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d207      	bcs.n	8003ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cd4:	f008 fd86 	bl	800c7e4 <__errno>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	220c      	movs	r2, #12
 8003cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ce2:	e009      	b.n	8003cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ce4:	4b08      	ldr	r3, [pc, #32]	@ (8003d08 <_sbrk+0x64>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cea:	4b07      	ldr	r3, [pc, #28]	@ (8003d08 <_sbrk+0x64>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	4a05      	ldr	r2, [pc, #20]	@ (8003d08 <_sbrk+0x64>)
 8003cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20020000 	.word	0x20020000
 8003d04:	00000400 	.word	0x00000400
 8003d08:	20000c50 	.word	0x20000c50
 8003d0c:	20005788 	.word	0x20005788

08003d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d14:	4b06      	ldr	r3, [pc, #24]	@ (8003d30 <SystemInit+0x20>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1a:	4a05      	ldr	r2, [pc, #20]	@ (8003d30 <SystemInit+0x20>)
 8003d1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d24:	bf00      	nop
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	e000ed00 	.word	0xe000ed00

08003d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d38:	480d      	ldr	r0, [pc, #52]	@ (8003d70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d3a:	490e      	ldr	r1, [pc, #56]	@ (8003d74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d3c:	4a0e      	ldr	r2, [pc, #56]	@ (8003d78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d40:	e002      	b.n	8003d48 <LoopCopyDataInit>

08003d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d46:	3304      	adds	r3, #4

08003d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d4c:	d3f9      	bcc.n	8003d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d4e:	4a0b      	ldr	r2, [pc, #44]	@ (8003d7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d50:	4c0b      	ldr	r4, [pc, #44]	@ (8003d80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d54:	e001      	b.n	8003d5a <LoopFillZerobss>

08003d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d58:	3204      	adds	r2, #4

08003d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d5c:	d3fb      	bcc.n	8003d56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d5e:	f7ff ffd7 	bl	8003d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d62:	f008 fd45 	bl	800c7f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d66:	f7fd fc91 	bl	800168c <main>
  bx  lr    
 8003d6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d74:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003d78:	0800d254 	.word	0x0800d254
  ldr r2, =_sbss
 8003d7c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003d80:	20005788 	.word	0x20005788

08003d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d84:	e7fe      	b.n	8003d84 <ADC_IRQHandler>
	...

08003d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003dc8 <HAL_Init+0x40>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a0d      	ldr	r2, [pc, #52]	@ (8003dc8 <HAL_Init+0x40>)
 8003d92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d98:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <HAL_Init+0x40>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8003dc8 <HAL_Init+0x40>)
 8003d9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003da4:	4b08      	ldr	r3, [pc, #32]	@ (8003dc8 <HAL_Init+0x40>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a07      	ldr	r2, [pc, #28]	@ (8003dc8 <HAL_Init+0x40>)
 8003daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003db0:	2003      	movs	r0, #3
 8003db2:	f000 ff8d 	bl	8004cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003db6:	200f      	movs	r0, #15
 8003db8:	f000 f808 	bl	8003dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dbc:	f7ff f9b6 	bl	800312c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40023c00 	.word	0x40023c00

08003dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dd4:	4b12      	ldr	r3, [pc, #72]	@ (8003e20 <HAL_InitTick+0x54>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	4b12      	ldr	r3, [pc, #72]	@ (8003e24 <HAL_InitTick+0x58>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 ffa5 	bl	8004d3a <HAL_SYSTICK_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e00e      	b.n	8003e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b0f      	cmp	r3, #15
 8003dfe:	d80a      	bhi.n	8003e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e00:	2200      	movs	r2, #0
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e08:	f000 ff6d 	bl	8004ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e0c:	4a06      	ldr	r2, [pc, #24]	@ (8003e28 <HAL_InitTick+0x5c>)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	e000      	b.n	8003e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	2000001c 	.word	0x2000001c
 8003e24:	20000024 	.word	0x20000024
 8003e28:	20000020 	.word	0x20000020

08003e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e30:	4b06      	ldr	r3, [pc, #24]	@ (8003e4c <HAL_IncTick+0x20>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <HAL_IncTick+0x24>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	4a04      	ldr	r2, [pc, #16]	@ (8003e50 <HAL_IncTick+0x24>)
 8003e3e:	6013      	str	r3, [r2, #0]
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	20000024 	.word	0x20000024
 8003e50:	20000c54 	.word	0x20000c54

08003e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return uwTick;
 8003e58:	4b03      	ldr	r3, [pc, #12]	@ (8003e68 <HAL_GetTick+0x14>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	20000c54 	.word	0x20000c54

08003e6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e0ed      	b.n	800405a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d102      	bne.n	8003e90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff f97a 	bl	8003184 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ea0:	f7ff ffd8 	bl	8003e54 <HAL_GetTick>
 8003ea4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ea6:	e012      	b.n	8003ece <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ea8:	f7ff ffd4 	bl	8003e54 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b0a      	cmp	r3, #10
 8003eb4:	d90b      	bls.n	8003ece <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2205      	movs	r2, #5
 8003ec6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e0c5      	b.n	800405a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0e5      	beq.n	8003ea8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0202 	bic.w	r2, r2, #2
 8003eea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eec:	f7ff ffb2 	bl	8003e54 <HAL_GetTick>
 8003ef0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ef2:	e012      	b.n	8003f1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ef4:	f7ff ffae 	bl	8003e54 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b0a      	cmp	r3, #10
 8003f00:	d90b      	bls.n	8003f1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2205      	movs	r2, #5
 8003f12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e09f      	b.n	800405a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e5      	bne.n	8003ef4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	7e1b      	ldrb	r3, [r3, #24]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d108      	bne.n	8003f42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	e007      	b.n	8003f52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	7e5b      	ldrb	r3, [r3, #25]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d108      	bne.n	8003f6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e007      	b.n	8003f7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	7e9b      	ldrb	r3, [r3, #26]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d108      	bne.n	8003f96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0220 	orr.w	r2, r2, #32
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	e007      	b.n	8003fa6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0220 	bic.w	r2, r2, #32
 8003fa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	7edb      	ldrb	r3, [r3, #27]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d108      	bne.n	8003fc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0210 	bic.w	r2, r2, #16
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	e007      	b.n	8003fd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0210 	orr.w	r2, r2, #16
 8003fce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	7f1b      	ldrb	r3, [r3, #28]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d108      	bne.n	8003fea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0208 	orr.w	r2, r2, #8
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	e007      	b.n	8003ffa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0208 	bic.w	r2, r2, #8
 8003ff8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	7f5b      	ldrb	r3, [r3, #29]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d108      	bne.n	8004014 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0204 	orr.w	r2, r2, #4
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e007      	b.n	8004024 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0204 	bic.w	r2, r2, #4
 8004022:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	ea42 0103 	orr.w	r1, r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	1e5a      	subs	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3020 	ldrb.w	r3, [r3, #32]
 800407a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800407c:	7cfb      	ldrb	r3, [r7, #19]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d003      	beq.n	800408a <HAL_CAN_ConfigFilter+0x26>
 8004082:	7cfb      	ldrb	r3, [r7, #19]
 8004084:	2b02      	cmp	r3, #2
 8004086:	f040 80be 	bne.w	8004206 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800408a:	4b65      	ldr	r3, [pc, #404]	@ (8004220 <HAL_CAN_ConfigFilter+0x1bc>)
 800408c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004094:	f043 0201 	orr.w	r2, r3, #1
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80040a4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	431a      	orrs	r2, r3
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f003 031f 	and.w	r3, r3, #31
 80040ca:	2201      	movs	r2, #1
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	43db      	mvns	r3, r3
 80040dc:	401a      	ands	r2, r3
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d123      	bne.n	8004134 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	43db      	mvns	r3, r3
 80040f6:	401a      	ands	r2, r3
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800410e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	3248      	adds	r2, #72	@ 0x48
 8004114:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004128:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800412a:	6979      	ldr	r1, [r7, #20]
 800412c:	3348      	adds	r3, #72	@ 0x48
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	440b      	add	r3, r1
 8004132:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d122      	bne.n	8004182 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	431a      	orrs	r2, r3
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800415c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	3248      	adds	r2, #72	@ 0x48
 8004162:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004176:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004178:	6979      	ldr	r1, [r7, #20]
 800417a:	3348      	adds	r3, #72	@ 0x48
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	440b      	add	r3, r1
 8004180:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	43db      	mvns	r3, r3
 8004194:	401a      	ands	r2, r3
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800419c:	e007      	b.n	80041ae <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	43db      	mvns	r3, r3
 80041c0:	401a      	ands	r2, r3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80041c8:	e007      	b.n	80041da <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d107      	bne.n	80041f2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80041f8:	f023 0201 	bic.w	r2, r3, #1
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	e006      	b.n	8004214 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
  }
}
 8004214:	4618      	mov	r0, r3
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	40006400 	.word	0x40006400

08004224 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b01      	cmp	r3, #1
 8004236:	d12e      	bne.n	8004296 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0201 	bic.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004250:	f7ff fe00 	bl	8003e54 <HAL_GetTick>
 8004254:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004256:	e012      	b.n	800427e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004258:	f7ff fdfc 	bl	8003e54 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b0a      	cmp	r3, #10
 8004264:	d90b      	bls.n	800427e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2205      	movs	r2, #5
 8004276:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e012      	b.n	80042a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1e5      	bne.n	8004258 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e006      	b.n	80042a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
  }
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b089      	sub	sp, #36	@ 0x24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80042ca:	7ffb      	ldrb	r3, [r7, #31]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d003      	beq.n	80042d8 <HAL_CAN_AddTxMessage+0x2c>
 80042d0:	7ffb      	ldrb	r3, [r7, #31]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	f040 80b8 	bne.w	8004448 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10a      	bne.n	80042f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d105      	bne.n	80042f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 80a0 	beq.w	8004438 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	0e1b      	lsrs	r3, r3, #24
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d907      	bls.n	8004318 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e09e      	b.n	8004456 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004318:	2201      	movs	r2, #1
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	409a      	lsls	r2, r3
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10d      	bne.n	8004346 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004334:	68f9      	ldr	r1, [r7, #12]
 8004336:	6809      	ldr	r1, [r1, #0]
 8004338:	431a      	orrs	r2, r3
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	3318      	adds	r3, #24
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	440b      	add	r3, r1
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	e00f      	b.n	8004366 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004350:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004356:	68f9      	ldr	r1, [r7, #12]
 8004358:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800435a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	3318      	adds	r3, #24
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	440b      	add	r3, r1
 8004364:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6819      	ldr	r1, [r3, #0]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	3318      	adds	r3, #24
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	440b      	add	r3, r1
 8004376:	3304      	adds	r3, #4
 8004378:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	7d1b      	ldrb	r3, [r3, #20]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d111      	bne.n	80043a6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	3318      	adds	r3, #24
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	4413      	add	r3, r2
 800438e:	3304      	adds	r3, #4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	6811      	ldr	r1, [r2, #0]
 8004396:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	3318      	adds	r3, #24
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	440b      	add	r3, r1
 80043a2:	3304      	adds	r3, #4
 80043a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3307      	adds	r3, #7
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	061a      	lsls	r2, r3, #24
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3306      	adds	r3, #6
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3305      	adds	r3, #5
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	021b      	lsls	r3, r3, #8
 80043c0:	4313      	orrs	r3, r2
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	3204      	adds	r2, #4
 80043c6:	7812      	ldrb	r2, [r2, #0]
 80043c8:	4610      	mov	r0, r2
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	6811      	ldr	r1, [r2, #0]
 80043ce:	ea43 0200 	orr.w	r2, r3, r0
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	440b      	add	r3, r1
 80043d8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80043dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3303      	adds	r3, #3
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	061a      	lsls	r2, r3, #24
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	3302      	adds	r3, #2
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	041b      	lsls	r3, r3, #16
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3301      	adds	r3, #1
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	4313      	orrs	r3, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	7812      	ldrb	r2, [r2, #0]
 80043fe:	4610      	mov	r0, r2
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	6811      	ldr	r1, [r2, #0]
 8004404:	ea43 0200 	orr.w	r2, r3, r0
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	440b      	add	r3, r1
 800440e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004412:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	3318      	adds	r3, #24
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	4413      	add	r3, r2
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	6811      	ldr	r1, [r2, #0]
 8004426:	f043 0201 	orr.w	r2, r3, #1
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	3318      	adds	r3, #24
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	440b      	add	r3, r1
 8004432:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	e00e      	b.n	8004456 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e006      	b.n	8004456 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
  }
}
 8004456:	4618      	mov	r0, r3
 8004458:	3724      	adds	r7, #36	@ 0x24
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004462:	b480      	push	{r7}
 8004464:	b087      	sub	sp, #28
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
 800446e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004476:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004478:	7dfb      	ldrb	r3, [r7, #23]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d003      	beq.n	8004486 <HAL_CAN_GetRxMessage+0x24>
 800447e:	7dfb      	ldrb	r3, [r7, #23]
 8004480:	2b02      	cmp	r3, #2
 8004482:	f040 80f3 	bne.w	800466c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10e      	bne.n	80044aa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d116      	bne.n	80044c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e0e7      	b.n	800467a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d107      	bne.n	80044c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044bc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0d8      	b.n	800467a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	331b      	adds	r3, #27
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	4413      	add	r3, r2
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0204 	and.w	r2, r3, #4
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10c      	bne.n	8004500 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	331b      	adds	r3, #27
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	4413      	add	r3, r2
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	0d5b      	lsrs	r3, r3, #21
 80044f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	e00b      	b.n	8004518 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	331b      	adds	r3, #27
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	4413      	add	r3, r2
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	08db      	lsrs	r3, r3, #3
 8004510:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	331b      	adds	r3, #27
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	4413      	add	r3, r2
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0202 	and.w	r2, r3, #2
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	331b      	adds	r3, #27
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	4413      	add	r3, r2
 800453a:	3304      	adds	r3, #4
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 020f 	and.w	r2, r3, #15
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	331b      	adds	r3, #27
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	4413      	add	r3, r2
 8004552:	3304      	adds	r3, #4
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	0a1b      	lsrs	r3, r3, #8
 8004558:	b2da      	uxtb	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	331b      	adds	r3, #27
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	4413      	add	r3, r2
 800456a:	3304      	adds	r3, #4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	0c1b      	lsrs	r3, r3, #16
 8004570:	b29a      	uxth	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	4413      	add	r3, r2
 8004580:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	b2da      	uxtb	r2, r3
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	4413      	add	r3, r2
 8004596:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	0a1a      	lsrs	r2, r3, #8
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	3301      	adds	r3, #1
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	0c1a      	lsrs	r2, r3, #16
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	3302      	adds	r3, #2
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	0e1a      	lsrs	r2, r3, #24
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	3303      	adds	r3, #3
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	3304      	adds	r3, #4
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	0a1a      	lsrs	r2, r3, #8
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	3305      	adds	r3, #5
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	4413      	add	r3, r2
 8004616:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	0c1a      	lsrs	r2, r3, #16
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	3306      	adds	r3, #6
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	4413      	add	r3, r2
 8004630:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	0e1a      	lsrs	r2, r3, #24
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	3307      	adds	r3, #7
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d108      	bne.n	8004658 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0220 	orr.w	r2, r2, #32
 8004654:	60da      	str	r2, [r3, #12]
 8004656:	e007      	b.n	8004668 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0220 	orr.w	r2, r2, #32
 8004666:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	e006      	b.n	800467a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004670:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
  }
}
 800467a:	4618      	mov	r0, r3
 800467c:	371c      	adds	r7, #28
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004686:	b480      	push	{r7}
 8004688:	b085      	sub	sp, #20
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004696:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d002      	beq.n	80046a4 <HAL_CAN_ActivateNotification+0x1e>
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d109      	bne.n	80046b8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6959      	ldr	r1, [r3, #20]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e006      	b.n	80046c6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
  }
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b08a      	sub	sp, #40	@ 0x28
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80046da:	2300      	movs	r3, #0
 80046dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d07c      	beq.n	8004812 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d023      	beq.n	800476a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2201      	movs	r2, #1
 8004728:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f983 	bl	8004a40 <HAL_CAN_TxMailbox0CompleteCallback>
 800473a:	e016      	b.n	800476a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	d004      	beq.n	8004750 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800474c:	627b      	str	r3, [r7, #36]	@ 0x24
 800474e:	e00c      	b.n	800476a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d004      	beq.n	8004764 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004760:	627b      	str	r3, [r7, #36]	@ 0x24
 8004762:	e002      	b.n	800476a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f989 	bl	8004a7c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d024      	beq.n	80047be <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800477c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f963 	bl	8004a54 <HAL_CAN_TxMailbox1CompleteCallback>
 800478e:	e016      	b.n	80047be <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004796:	2b00      	cmp	r3, #0
 8004798:	d004      	beq.n	80047a4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80047a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80047a2:	e00c      	b.n	80047be <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d004      	beq.n	80047b8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047b6:	e002      	b.n	80047be <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f969 	bl	8004a90 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d024      	beq.n	8004812 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80047d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f943 	bl	8004a68 <HAL_CAN_TxMailbox2CompleteCallback>
 80047e2:	e016      	b.n	8004812 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d004      	beq.n	80047f8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f6:	e00c      	b.n	8004812 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d004      	beq.n	800480c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004808:	627b      	str	r3, [r7, #36]	@ 0x24
 800480a:	e002      	b.n	8004812 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f949 	bl	8004aa4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00c      	beq.n	8004836 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800482c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2210      	movs	r2, #16
 8004834:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00b      	beq.n	8004858 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d006      	beq.n	8004858 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2208      	movs	r2, #8
 8004850:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f930 	bl	8004ab8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7fb fffb 	bl	800086c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00c      	beq.n	800489a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b00      	cmp	r3, #0
 8004888:	d007      	beq.n	800489a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2210      	movs	r2, #16
 8004898:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00b      	beq.n	80048bc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d006      	beq.n	80048bc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2208      	movs	r2, #8
 80048b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f912 	bl	8004ae0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	f003 0310 	and.w	r3, r3, #16
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f8f9 	bl	8004acc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00b      	beq.n	80048fc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d006      	beq.n	80048fc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2210      	movs	r2, #16
 80048f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f8fc 	bl	8004af4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00b      	beq.n	800491e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	f003 0308 	and.w	r3, r3, #8
 800490c:	2b00      	cmp	r3, #0
 800490e:	d006      	beq.n	800491e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2208      	movs	r2, #8
 8004916:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f8f5 	bl	8004b08 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d07b      	beq.n	8004a20 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	d072      	beq.n	8004a18 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	f043 0302 	orr.w	r3, r3, #2
 8004968:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	f043 0304 	orr.w	r3, r3, #4
 8004984:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800498c:	2b00      	cmp	r3, #0
 800498e:	d043      	beq.n	8004a18 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004996:	2b00      	cmp	r3, #0
 8004998:	d03e      	beq.n	8004a18 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049a0:	2b60      	cmp	r3, #96	@ 0x60
 80049a2:	d02b      	beq.n	80049fc <HAL_CAN_IRQHandler+0x32a>
 80049a4:	2b60      	cmp	r3, #96	@ 0x60
 80049a6:	d82e      	bhi.n	8004a06 <HAL_CAN_IRQHandler+0x334>
 80049a8:	2b50      	cmp	r3, #80	@ 0x50
 80049aa:	d022      	beq.n	80049f2 <HAL_CAN_IRQHandler+0x320>
 80049ac:	2b50      	cmp	r3, #80	@ 0x50
 80049ae:	d82a      	bhi.n	8004a06 <HAL_CAN_IRQHandler+0x334>
 80049b0:	2b40      	cmp	r3, #64	@ 0x40
 80049b2:	d019      	beq.n	80049e8 <HAL_CAN_IRQHandler+0x316>
 80049b4:	2b40      	cmp	r3, #64	@ 0x40
 80049b6:	d826      	bhi.n	8004a06 <HAL_CAN_IRQHandler+0x334>
 80049b8:	2b30      	cmp	r3, #48	@ 0x30
 80049ba:	d010      	beq.n	80049de <HAL_CAN_IRQHandler+0x30c>
 80049bc:	2b30      	cmp	r3, #48	@ 0x30
 80049be:	d822      	bhi.n	8004a06 <HAL_CAN_IRQHandler+0x334>
 80049c0:	2b10      	cmp	r3, #16
 80049c2:	d002      	beq.n	80049ca <HAL_CAN_IRQHandler+0x2f8>
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d005      	beq.n	80049d4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80049c8:	e01d      	b.n	8004a06 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	f043 0308 	orr.w	r3, r3, #8
 80049d0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80049d2:	e019      	b.n	8004a08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d6:	f043 0310 	orr.w	r3, r3, #16
 80049da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80049dc:	e014      	b.n	8004a08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	f043 0320 	orr.w	r3, r3, #32
 80049e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80049e6:	e00f      	b.n	8004a08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80049e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80049f0:	e00a      	b.n	8004a08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80049fa:	e005      	b.n	8004a08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80049fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a02:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004a04:	e000      	b.n	8004a08 <HAL_CAN_IRQHandler+0x336>
            break;
 8004a06:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004a16:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d008      	beq.n	8004a38 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f872 	bl	8004b1c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004a38:	bf00      	nop
 8004a3a:	3728      	adds	r7, #40	@ 0x28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b40:	4b0c      	ldr	r3, [pc, #48]	@ (8004b74 <__NVIC_SetPriorityGrouping+0x44>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b62:	4a04      	ldr	r2, [pc, #16]	@ (8004b74 <__NVIC_SetPriorityGrouping+0x44>)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	60d3      	str	r3, [r2, #12]
}
 8004b68:	bf00      	nop
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	e000ed00 	.word	0xe000ed00

08004b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b7c:	4b04      	ldr	r3, [pc, #16]	@ (8004b90 <__NVIC_GetPriorityGrouping+0x18>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	0a1b      	lsrs	r3, r3, #8
 8004b82:	f003 0307 	and.w	r3, r3, #7
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	e000ed00 	.word	0xe000ed00

08004b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	db0b      	blt.n	8004bbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	f003 021f 	and.w	r2, r3, #31
 8004bac:	4907      	ldr	r1, [pc, #28]	@ (8004bcc <__NVIC_EnableIRQ+0x38>)
 8004bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	e000e100 	.word	0xe000e100

08004bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	6039      	str	r1, [r7, #0]
 8004bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	db0a      	blt.n	8004bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	490c      	ldr	r1, [pc, #48]	@ (8004c1c <__NVIC_SetPriority+0x4c>)
 8004bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bee:	0112      	lsls	r2, r2, #4
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bf8:	e00a      	b.n	8004c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	4908      	ldr	r1, [pc, #32]	@ (8004c20 <__NVIC_SetPriority+0x50>)
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	3b04      	subs	r3, #4
 8004c08:	0112      	lsls	r2, r2, #4
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	761a      	strb	r2, [r3, #24]
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	e000e100 	.word	0xe000e100
 8004c20:	e000ed00 	.word	0xe000ed00

08004c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b089      	sub	sp, #36	@ 0x24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f1c3 0307 	rsb	r3, r3, #7
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	bf28      	it	cs
 8004c42:	2304      	movcs	r3, #4
 8004c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	2b06      	cmp	r3, #6
 8004c4c:	d902      	bls.n	8004c54 <NVIC_EncodePriority+0x30>
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	3b03      	subs	r3, #3
 8004c52:	e000      	b.n	8004c56 <NVIC_EncodePriority+0x32>
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	43da      	mvns	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	401a      	ands	r2, r3
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	fa01 f303 	lsl.w	r3, r1, r3
 8004c76:	43d9      	mvns	r1, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c7c:	4313      	orrs	r3, r2
         );
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3724      	adds	r7, #36	@ 0x24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c9c:	d301      	bcc.n	8004ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e00f      	b.n	8004cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8004ccc <SysTick_Config+0x40>)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004caa:	210f      	movs	r1, #15
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004cb0:	f7ff ff8e 	bl	8004bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cb4:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <SysTick_Config+0x40>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cba:	4b04      	ldr	r3, [pc, #16]	@ (8004ccc <SysTick_Config+0x40>)
 8004cbc:	2207      	movs	r2, #7
 8004cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	e000e010 	.word	0xe000e010

08004cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff ff29 	bl	8004b30 <__NVIC_SetPriorityGrouping>
}
 8004cde:	bf00      	nop
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b086      	sub	sp, #24
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	4603      	mov	r3, r0
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cf8:	f7ff ff3e 	bl	8004b78 <__NVIC_GetPriorityGrouping>
 8004cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	6978      	ldr	r0, [r7, #20]
 8004d04:	f7ff ff8e 	bl	8004c24 <NVIC_EncodePriority>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff ff5d 	bl	8004bd0 <__NVIC_SetPriority>
}
 8004d16:	bf00      	nop
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	4603      	mov	r3, r0
 8004d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff ff31 	bl	8004b94 <__NVIC_EnableIRQ>
}
 8004d32:	bf00      	nop
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff ffa2 	bl	8004c8c <SysTick_Config>
 8004d48:	4603      	mov	r3, r0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d60:	f7ff f878 	bl	8003e54 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e099      	b.n	8004ea4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0201 	bic.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d90:	e00f      	b.n	8004db2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d92:	f7ff f85f 	bl	8003e54 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b05      	cmp	r3, #5
 8004d9e:	d908      	bls.n	8004db2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2203      	movs	r2, #3
 8004daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e078      	b.n	8004ea4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e8      	bne.n	8004d92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	4b38      	ldr	r3, [pc, #224]	@ (8004eac <HAL_DMA_Init+0x158>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d107      	bne.n	8004e1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e14:	4313      	orrs	r3, r2
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f023 0307 	bic.w	r3, r3, #7
 8004e32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d117      	bne.n	8004e76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00e      	beq.n	8004e76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fb01 	bl	8005460 <DMA_CheckFifoParam>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d008      	beq.n	8004e76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2240      	movs	r2, #64	@ 0x40
 8004e68:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004e72:	2301      	movs	r3, #1
 8004e74:	e016      	b.n	8004ea4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fab8 	bl	80053f4 <DMA_CalcBaseAndBitshift>
 8004e84:	4603      	mov	r3, r0
 8004e86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e8c:	223f      	movs	r2, #63	@ 0x3f
 8004e8e:	409a      	lsls	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	f010803f 	.word	0xf010803f

08004eb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d101      	bne.n	8004ed6 <HAL_DMA_Start_IT+0x26>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e040      	b.n	8004f58 <HAL_DMA_Start_IT+0xa8>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d12f      	bne.n	8004f4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2202      	movs	r2, #2
 8004eee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 fa4a 	bl	8005398 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f08:	223f      	movs	r2, #63	@ 0x3f
 8004f0a:	409a      	lsls	r2, r3
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0216 	orr.w	r2, r2, #22
 8004f1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0208 	orr.w	r2, r2, #8
 8004f36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	e005      	b.n	8004f56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f52:	2302      	movs	r3, #2
 8004f54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f6e:	f7fe ff71 	bl	8003e54 <HAL_GetTick>
 8004f72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d008      	beq.n	8004f92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2280      	movs	r2, #128	@ 0x80
 8004f84:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e052      	b.n	8005038 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0216 	bic.w	r2, r2, #22
 8004fa0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695a      	ldr	r2, [r3, #20]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fb0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d103      	bne.n	8004fc2 <HAL_DMA_Abort+0x62>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d007      	beq.n	8004fd2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0208 	bic.w	r2, r2, #8
 8004fd0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0201 	bic.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fe2:	e013      	b.n	800500c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fe4:	f7fe ff36 	bl	8003e54 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b05      	cmp	r3, #5
 8004ff0:	d90c      	bls.n	800500c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e015      	b.n	8005038 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1e4      	bne.n	8004fe4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501e:	223f      	movs	r2, #63	@ 0x3f
 8005020:	409a      	lsls	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d004      	beq.n	800505e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2280      	movs	r2, #128	@ 0x80
 8005058:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e00c      	b.n	8005078 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2205      	movs	r2, #5
 8005062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0201 	bic.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005090:	4b8e      	ldr	r3, [pc, #568]	@ (80052cc <HAL_DMA_IRQHandler+0x248>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a8e      	ldr	r2, [pc, #568]	@ (80052d0 <HAL_DMA_IRQHandler+0x24c>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	0a9b      	lsrs	r3, r3, #10
 800509c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ae:	2208      	movs	r2, #8
 80050b0:	409a      	lsls	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4013      	ands	r3, r2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d01a      	beq.n	80050f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d013      	beq.n	80050f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0204 	bic.w	r2, r2, #4
 80050d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050dc:	2208      	movs	r2, #8
 80050de:	409a      	lsls	r2, r3
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e8:	f043 0201 	orr.w	r2, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f4:	2201      	movs	r2, #1
 80050f6:	409a      	lsls	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d012      	beq.n	8005126 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00b      	beq.n	8005126 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005112:	2201      	movs	r2, #1
 8005114:	409a      	lsls	r2, r3
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800511e:	f043 0202 	orr.w	r2, r3, #2
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800512a:	2204      	movs	r2, #4
 800512c:	409a      	lsls	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4013      	ands	r3, r2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d012      	beq.n	800515c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00b      	beq.n	800515c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005148:	2204      	movs	r2, #4
 800514a:	409a      	lsls	r2, r3
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005154:	f043 0204 	orr.w	r2, r3, #4
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005160:	2210      	movs	r2, #16
 8005162:	409a      	lsls	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4013      	ands	r3, r2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d043      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d03c      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800517e:	2210      	movs	r2, #16
 8005180:	409a      	lsls	r2, r3
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d018      	beq.n	80051c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d108      	bne.n	80051b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d024      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	4798      	blx	r3
 80051b2:	e01f      	b.n	80051f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01b      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	4798      	blx	r3
 80051c4:	e016      	b.n	80051f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d107      	bne.n	80051e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0208 	bic.w	r2, r2, #8
 80051e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f8:	2220      	movs	r2, #32
 80051fa:	409a      	lsls	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4013      	ands	r3, r2
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 808f 	beq.w	8005324 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 8087 	beq.w	8005324 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800521a:	2220      	movs	r2, #32
 800521c:	409a      	lsls	r2, r3
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b05      	cmp	r3, #5
 800522c:	d136      	bne.n	800529c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0216 	bic.w	r2, r2, #22
 800523c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695a      	ldr	r2, [r3, #20]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800524c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	d103      	bne.n	800525e <HAL_DMA_IRQHandler+0x1da>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800525a:	2b00      	cmp	r3, #0
 800525c:	d007      	beq.n	800526e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0208 	bic.w	r2, r2, #8
 800526c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005272:	223f      	movs	r2, #63	@ 0x3f
 8005274:	409a      	lsls	r2, r3
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800528e:	2b00      	cmp	r3, #0
 8005290:	d07e      	beq.n	8005390 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	4798      	blx	r3
        }
        return;
 800529a:	e079      	b.n	8005390 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d01d      	beq.n	80052e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10d      	bne.n	80052d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d031      	beq.n	8005324 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	4798      	blx	r3
 80052c8:	e02c      	b.n	8005324 <HAL_DMA_IRQHandler+0x2a0>
 80052ca:	bf00      	nop
 80052cc:	2000001c 	.word	0x2000001c
 80052d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d023      	beq.n	8005324 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	4798      	blx	r3
 80052e4:	e01e      	b.n	8005324 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10f      	bne.n	8005314 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0210 	bic.w	r2, r2, #16
 8005302:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005328:	2b00      	cmp	r3, #0
 800532a:	d032      	beq.n	8005392 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d022      	beq.n	800537e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2205      	movs	r2, #5
 800533c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0201 	bic.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	3301      	adds	r3, #1
 8005354:	60bb      	str	r3, [r7, #8]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	429a      	cmp	r2, r3
 800535a:	d307      	bcc.n	800536c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1f2      	bne.n	8005350 <HAL_DMA_IRQHandler+0x2cc>
 800536a:	e000      	b.n	800536e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800536c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005382:	2b00      	cmp	r3, #0
 8005384:	d005      	beq.n	8005392 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	4798      	blx	r3
 800538e:	e000      	b.n	8005392 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005390:	bf00      	nop
    }
  }
}
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80053b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	2b40      	cmp	r3, #64	@ 0x40
 80053c4:	d108      	bne.n	80053d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80053d6:	e007      	b.n	80053e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	60da      	str	r2, [r3, #12]
}
 80053e8:	bf00      	nop
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	b2db      	uxtb	r3, r3
 8005402:	3b10      	subs	r3, #16
 8005404:	4a14      	ldr	r2, [pc, #80]	@ (8005458 <DMA_CalcBaseAndBitshift+0x64>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	091b      	lsrs	r3, r3, #4
 800540c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800540e:	4a13      	ldr	r2, [pc, #76]	@ (800545c <DMA_CalcBaseAndBitshift+0x68>)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4413      	add	r3, r2
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b03      	cmp	r3, #3
 8005420:	d909      	bls.n	8005436 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800542a:	f023 0303 	bic.w	r3, r3, #3
 800542e:	1d1a      	adds	r2, r3, #4
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	659a      	str	r2, [r3, #88]	@ 0x58
 8005434:	e007      	b.n	8005446 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800543e:	f023 0303 	bic.w	r3, r3, #3
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	aaaaaaab 	.word	0xaaaaaaab
 800545c:	0800d208 	.word	0x0800d208

08005460 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005468:	2300      	movs	r3, #0
 800546a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005470:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d11f      	bne.n	80054ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b03      	cmp	r3, #3
 800547e:	d856      	bhi.n	800552e <DMA_CheckFifoParam+0xce>
 8005480:	a201      	add	r2, pc, #4	@ (adr r2, 8005488 <DMA_CheckFifoParam+0x28>)
 8005482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005486:	bf00      	nop
 8005488:	08005499 	.word	0x08005499
 800548c:	080054ab 	.word	0x080054ab
 8005490:	08005499 	.word	0x08005499
 8005494:	0800552f 	.word	0x0800552f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d046      	beq.n	8005532 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054a8:	e043      	b.n	8005532 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80054b2:	d140      	bne.n	8005536 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054b8:	e03d      	b.n	8005536 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054c2:	d121      	bne.n	8005508 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d837      	bhi.n	800553a <DMA_CheckFifoParam+0xda>
 80054ca:	a201      	add	r2, pc, #4	@ (adr r2, 80054d0 <DMA_CheckFifoParam+0x70>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	080054e1 	.word	0x080054e1
 80054d4:	080054e7 	.word	0x080054e7
 80054d8:	080054e1 	.word	0x080054e1
 80054dc:	080054f9 	.word	0x080054f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	73fb      	strb	r3, [r7, #15]
      break;
 80054e4:	e030      	b.n	8005548 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d025      	beq.n	800553e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054f6:	e022      	b.n	800553e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005500:	d11f      	bne.n	8005542 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005506:	e01c      	b.n	8005542 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d903      	bls.n	8005516 <DMA_CheckFifoParam+0xb6>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b03      	cmp	r3, #3
 8005512:	d003      	beq.n	800551c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005514:	e018      	b.n	8005548 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	73fb      	strb	r3, [r7, #15]
      break;
 800551a:	e015      	b.n	8005548 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005520:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00e      	beq.n	8005546 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
      break;
 800552c:	e00b      	b.n	8005546 <DMA_CheckFifoParam+0xe6>
      break;
 800552e:	bf00      	nop
 8005530:	e00a      	b.n	8005548 <DMA_CheckFifoParam+0xe8>
      break;
 8005532:	bf00      	nop
 8005534:	e008      	b.n	8005548 <DMA_CheckFifoParam+0xe8>
      break;
 8005536:	bf00      	nop
 8005538:	e006      	b.n	8005548 <DMA_CheckFifoParam+0xe8>
      break;
 800553a:	bf00      	nop
 800553c:	e004      	b.n	8005548 <DMA_CheckFifoParam+0xe8>
      break;
 800553e:	bf00      	nop
 8005540:	e002      	b.n	8005548 <DMA_CheckFifoParam+0xe8>
      break;   
 8005542:	bf00      	nop
 8005544:	e000      	b.n	8005548 <DMA_CheckFifoParam+0xe8>
      break;
 8005546:	bf00      	nop
    }
  } 
  
  return status; 
 8005548:	7bfb      	ldrb	r3, [r7, #15]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop

08005558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005558:	b480      	push	{r7}
 800555a:	b089      	sub	sp, #36	@ 0x24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005562:	2300      	movs	r3, #0
 8005564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005566:	2300      	movs	r3, #0
 8005568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800556a:	2300      	movs	r3, #0
 800556c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800556e:	2300      	movs	r3, #0
 8005570:	61fb      	str	r3, [r7, #28]
 8005572:	e16b      	b.n	800584c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005574:	2201      	movs	r2, #1
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	4013      	ands	r3, r2
 8005586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	429a      	cmp	r2, r3
 800558e:	f040 815a 	bne.w	8005846 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	2b01      	cmp	r3, #1
 800559c:	d005      	beq.n	80055aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d130      	bne.n	800560c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	2203      	movs	r2, #3
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	43db      	mvns	r3, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4013      	ands	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055e0:	2201      	movs	r2, #1
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	43db      	mvns	r3, r3
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	4013      	ands	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	091b      	lsrs	r3, r3, #4
 80055f6:	f003 0201 	and.w	r2, r3, #1
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	4313      	orrs	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	2b03      	cmp	r3, #3
 8005616:	d017      	beq.n	8005648 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	2203      	movs	r2, #3
 8005624:	fa02 f303 	lsl.w	r3, r2, r3
 8005628:	43db      	mvns	r3, r3
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	4013      	ands	r3, r2
 800562e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	4313      	orrs	r3, r2
 8005640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f003 0303 	and.w	r3, r3, #3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d123      	bne.n	800569c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	08da      	lsrs	r2, r3, #3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3208      	adds	r2, #8
 800565c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	220f      	movs	r2, #15
 800566c:	fa02 f303 	lsl.w	r3, r2, r3
 8005670:	43db      	mvns	r3, r3
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	4013      	ands	r3, r2
 8005676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	4313      	orrs	r3, r2
 800568c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	08da      	lsrs	r2, r3, #3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3208      	adds	r2, #8
 8005696:	69b9      	ldr	r1, [r7, #24]
 8005698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	2203      	movs	r2, #3
 80056a8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ac:	43db      	mvns	r3, r3
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	4013      	ands	r3, r2
 80056b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f003 0203 	and.w	r2, r3, #3
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 80b4 	beq.w	8005846 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056de:	2300      	movs	r3, #0
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	4b60      	ldr	r3, [pc, #384]	@ (8005864 <HAL_GPIO_Init+0x30c>)
 80056e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e6:	4a5f      	ldr	r2, [pc, #380]	@ (8005864 <HAL_GPIO_Init+0x30c>)
 80056e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80056ee:	4b5d      	ldr	r3, [pc, #372]	@ (8005864 <HAL_GPIO_Init+0x30c>)
 80056f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056fa:	4a5b      	ldr	r2, [pc, #364]	@ (8005868 <HAL_GPIO_Init+0x310>)
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	089b      	lsrs	r3, r3, #2
 8005700:	3302      	adds	r3, #2
 8005702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	f003 0303 	and.w	r3, r3, #3
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	220f      	movs	r2, #15
 8005712:	fa02 f303 	lsl.w	r3, r2, r3
 8005716:	43db      	mvns	r3, r3
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	4013      	ands	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a52      	ldr	r2, [pc, #328]	@ (800586c <HAL_GPIO_Init+0x314>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d02b      	beq.n	800577e <HAL_GPIO_Init+0x226>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a51      	ldr	r2, [pc, #324]	@ (8005870 <HAL_GPIO_Init+0x318>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d025      	beq.n	800577a <HAL_GPIO_Init+0x222>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a50      	ldr	r2, [pc, #320]	@ (8005874 <HAL_GPIO_Init+0x31c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d01f      	beq.n	8005776 <HAL_GPIO_Init+0x21e>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a4f      	ldr	r2, [pc, #316]	@ (8005878 <HAL_GPIO_Init+0x320>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d019      	beq.n	8005772 <HAL_GPIO_Init+0x21a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a4e      	ldr	r2, [pc, #312]	@ (800587c <HAL_GPIO_Init+0x324>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d013      	beq.n	800576e <HAL_GPIO_Init+0x216>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a4d      	ldr	r2, [pc, #308]	@ (8005880 <HAL_GPIO_Init+0x328>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00d      	beq.n	800576a <HAL_GPIO_Init+0x212>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a4c      	ldr	r2, [pc, #304]	@ (8005884 <HAL_GPIO_Init+0x32c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d007      	beq.n	8005766 <HAL_GPIO_Init+0x20e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a4b      	ldr	r2, [pc, #300]	@ (8005888 <HAL_GPIO_Init+0x330>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d101      	bne.n	8005762 <HAL_GPIO_Init+0x20a>
 800575e:	2307      	movs	r3, #7
 8005760:	e00e      	b.n	8005780 <HAL_GPIO_Init+0x228>
 8005762:	2308      	movs	r3, #8
 8005764:	e00c      	b.n	8005780 <HAL_GPIO_Init+0x228>
 8005766:	2306      	movs	r3, #6
 8005768:	e00a      	b.n	8005780 <HAL_GPIO_Init+0x228>
 800576a:	2305      	movs	r3, #5
 800576c:	e008      	b.n	8005780 <HAL_GPIO_Init+0x228>
 800576e:	2304      	movs	r3, #4
 8005770:	e006      	b.n	8005780 <HAL_GPIO_Init+0x228>
 8005772:	2303      	movs	r3, #3
 8005774:	e004      	b.n	8005780 <HAL_GPIO_Init+0x228>
 8005776:	2302      	movs	r3, #2
 8005778:	e002      	b.n	8005780 <HAL_GPIO_Init+0x228>
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <HAL_GPIO_Init+0x228>
 800577e:	2300      	movs	r3, #0
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	f002 0203 	and.w	r2, r2, #3
 8005786:	0092      	lsls	r2, r2, #2
 8005788:	4093      	lsls	r3, r2
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4313      	orrs	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005790:	4935      	ldr	r1, [pc, #212]	@ (8005868 <HAL_GPIO_Init+0x310>)
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	089b      	lsrs	r3, r3, #2
 8005796:	3302      	adds	r3, #2
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800579e:	4b3b      	ldr	r3, [pc, #236]	@ (800588c <HAL_GPIO_Init+0x334>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	43db      	mvns	r3, r3
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	4013      	ands	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057c2:	4a32      	ldr	r2, [pc, #200]	@ (800588c <HAL_GPIO_Init+0x334>)
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057c8:	4b30      	ldr	r3, [pc, #192]	@ (800588c <HAL_GPIO_Init+0x334>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	43db      	mvns	r3, r3
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	4013      	ands	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057ec:	4a27      	ldr	r2, [pc, #156]	@ (800588c <HAL_GPIO_Init+0x334>)
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80057f2:	4b26      	ldr	r3, [pc, #152]	@ (800588c <HAL_GPIO_Init+0x334>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	43db      	mvns	r3, r3
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	4013      	ands	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4313      	orrs	r3, r2
 8005814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005816:	4a1d      	ldr	r2, [pc, #116]	@ (800588c <HAL_GPIO_Init+0x334>)
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800581c:	4b1b      	ldr	r3, [pc, #108]	@ (800588c <HAL_GPIO_Init+0x334>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	43db      	mvns	r3, r3
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	4013      	ands	r3, r2
 800582a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005840:	4a12      	ldr	r2, [pc, #72]	@ (800588c <HAL_GPIO_Init+0x334>)
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	3301      	adds	r3, #1
 800584a:	61fb      	str	r3, [r7, #28]
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	2b0f      	cmp	r3, #15
 8005850:	f67f ae90 	bls.w	8005574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop
 8005858:	3724      	adds	r7, #36	@ 0x24
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40023800 	.word	0x40023800
 8005868:	40013800 	.word	0x40013800
 800586c:	40020000 	.word	0x40020000
 8005870:	40020400 	.word	0x40020400
 8005874:	40020800 	.word	0x40020800
 8005878:	40020c00 	.word	0x40020c00
 800587c:	40021000 	.word	0x40021000
 8005880:	40021400 	.word	0x40021400
 8005884:	40021800 	.word	0x40021800
 8005888:	40021c00 	.word	0x40021c00
 800588c:	40013c00 	.word	0x40013c00

08005890 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	887b      	ldrh	r3, [r7, #2]
 80058a2:	4013      	ands	r3, r2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058a8:	2301      	movs	r3, #1
 80058aa:	73fb      	strb	r3, [r7, #15]
 80058ac:	e001      	b.n	80058b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058ae:	2300      	movs	r3, #0
 80058b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	807b      	strh	r3, [r7, #2]
 80058cc:	4613      	mov	r3, r2
 80058ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058d0:	787b      	ldrb	r3, [r7, #1]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058d6:	887a      	ldrh	r2, [r7, #2]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058dc:	e003      	b.n	80058e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058de:	887b      	ldrh	r3, [r7, #2]
 80058e0:	041a      	lsls	r2, r3, #16
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	619a      	str	r2, [r3, #24]
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
	...

080058f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	4603      	mov	r3, r0
 80058fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80058fe:	4b08      	ldr	r3, [pc, #32]	@ (8005920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005900:	695a      	ldr	r2, [r3, #20]
 8005902:	88fb      	ldrh	r3, [r7, #6]
 8005904:	4013      	ands	r3, r2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d006      	beq.n	8005918 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800590a:	4a05      	ldr	r2, [pc, #20]	@ (8005920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800590c:	88fb      	ldrh	r3, [r7, #6]
 800590e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005910:	88fb      	ldrh	r3, [r7, #6]
 8005912:	4618      	mov	r0, r3
 8005914:	f7fb fe18 	bl	8001548 <HAL_GPIO_EXTI_Callback>
  }
}
 8005918:	bf00      	nop
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	40013c00 	.word	0x40013c00

08005924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e12b      	b.n	8005b8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d106      	bne.n	8005950 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7fd fcca 	bl	80032e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2224      	movs	r2, #36	@ 0x24
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0201 	bic.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005976:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005986:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005988:	f001 f9f6 	bl	8006d78 <HAL_RCC_GetPCLK1Freq>
 800598c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	4a81      	ldr	r2, [pc, #516]	@ (8005b98 <HAL_I2C_Init+0x274>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d807      	bhi.n	80059a8 <HAL_I2C_Init+0x84>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4a80      	ldr	r2, [pc, #512]	@ (8005b9c <HAL_I2C_Init+0x278>)
 800599c:	4293      	cmp	r3, r2
 800599e:	bf94      	ite	ls
 80059a0:	2301      	movls	r3, #1
 80059a2:	2300      	movhi	r3, #0
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	e006      	b.n	80059b6 <HAL_I2C_Init+0x92>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4a7d      	ldr	r2, [pc, #500]	@ (8005ba0 <HAL_I2C_Init+0x27c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	bf94      	ite	ls
 80059b0:	2301      	movls	r3, #1
 80059b2:	2300      	movhi	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e0e7      	b.n	8005b8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4a78      	ldr	r2, [pc, #480]	@ (8005ba4 <HAL_I2C_Init+0x280>)
 80059c2:	fba2 2303 	umull	r2, r3, r2, r3
 80059c6:	0c9b      	lsrs	r3, r3, #18
 80059c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	430a      	orrs	r2, r1
 80059dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	4a6a      	ldr	r2, [pc, #424]	@ (8005b98 <HAL_I2C_Init+0x274>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d802      	bhi.n	80059f8 <HAL_I2C_Init+0xd4>
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	3301      	adds	r3, #1
 80059f6:	e009      	b.n	8005a0c <HAL_I2C_Init+0xe8>
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80059fe:	fb02 f303 	mul.w	r3, r2, r3
 8005a02:	4a69      	ldr	r2, [pc, #420]	@ (8005ba8 <HAL_I2C_Init+0x284>)
 8005a04:	fba2 2303 	umull	r2, r3, r2, r3
 8005a08:	099b      	lsrs	r3, r3, #6
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	430b      	orrs	r3, r1
 8005a12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005a1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	495c      	ldr	r1, [pc, #368]	@ (8005b98 <HAL_I2C_Init+0x274>)
 8005a28:	428b      	cmp	r3, r1
 8005a2a:	d819      	bhi.n	8005a60 <HAL_I2C_Init+0x13c>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	1e59      	subs	r1, r3, #1
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a3a:	1c59      	adds	r1, r3, #1
 8005a3c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005a40:	400b      	ands	r3, r1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <HAL_I2C_Init+0x138>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1e59      	subs	r1, r3, #1
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a54:	3301      	adds	r3, #1
 8005a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a5a:	e051      	b.n	8005b00 <HAL_I2C_Init+0x1dc>
 8005a5c:	2304      	movs	r3, #4
 8005a5e:	e04f      	b.n	8005b00 <HAL_I2C_Init+0x1dc>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d111      	bne.n	8005a8c <HAL_I2C_Init+0x168>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	1e58      	subs	r0, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6859      	ldr	r1, [r3, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	440b      	add	r3, r1
 8005a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	bf0c      	ite	eq
 8005a84:	2301      	moveq	r3, #1
 8005a86:	2300      	movne	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	e012      	b.n	8005ab2 <HAL_I2C_Init+0x18e>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	1e58      	subs	r0, r3, #1
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6859      	ldr	r1, [r3, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	0099      	lsls	r1, r3, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	bf0c      	ite	eq
 8005aac:	2301      	moveq	r3, #1
 8005aae:	2300      	movne	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <HAL_I2C_Init+0x196>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e022      	b.n	8005b00 <HAL_I2C_Init+0x1dc>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10e      	bne.n	8005ae0 <HAL_I2C_Init+0x1bc>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	1e58      	subs	r0, r3, #1
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6859      	ldr	r1, [r3, #4]
 8005aca:	460b      	mov	r3, r1
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	440b      	add	r3, r1
 8005ad0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ada:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ade:	e00f      	b.n	8005b00 <HAL_I2C_Init+0x1dc>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	1e58      	subs	r0, r3, #1
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6859      	ldr	r1, [r3, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	440b      	add	r3, r1
 8005aee:	0099      	lsls	r1, r3, #2
 8005af0:	440b      	add	r3, r1
 8005af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005af6:	3301      	adds	r3, #1
 8005af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005afc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b00:	6879      	ldr	r1, [r7, #4]
 8005b02:	6809      	ldr	r1, [r1, #0]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69da      	ldr	r2, [r3, #28]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005b2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6911      	ldr	r1, [r2, #16]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	68d2      	ldr	r2, [r2, #12]
 8005b3a:	4311      	orrs	r1, r2
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6812      	ldr	r2, [r2, #0]
 8005b40:	430b      	orrs	r3, r1
 8005b42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695a      	ldr	r2, [r3, #20]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0201 	orr.w	r2, r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	000186a0 	.word	0x000186a0
 8005b9c:	001e847f 	.word	0x001e847f
 8005ba0:	003d08ff 	.word	0x003d08ff
 8005ba4:	431bde83 	.word	0x431bde83
 8005ba8:	10624dd3 	.word	0x10624dd3

08005bac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b08c      	sub	sp, #48	@ 0x30
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	4608      	mov	r0, r1
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	461a      	mov	r2, r3
 8005bba:	4603      	mov	r3, r0
 8005bbc:	817b      	strh	r3, [r7, #10]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	813b      	strh	r3, [r7, #8]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bc6:	f7fe f945 	bl	8003e54 <HAL_GetTick>
 8005bca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	f040 8208 	bne.w	8005fea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	2319      	movs	r3, #25
 8005be0:	2201      	movs	r2, #1
 8005be2:	497b      	ldr	r1, [pc, #492]	@ (8005dd0 <HAL_I2C_Mem_Read+0x224>)
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 faef 	bl	80061c8 <I2C_WaitOnFlagUntilTimeout>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e1fb      	b.n	8005fec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <HAL_I2C_Mem_Read+0x56>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e1f4      	b.n	8005fec <HAL_I2C_Mem_Read+0x440>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d007      	beq.n	8005c28 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0201 	orr.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2222      	movs	r2, #34	@ 0x22
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2240      	movs	r2, #64	@ 0x40
 8005c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005c58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4a5b      	ldr	r2, [pc, #364]	@ (8005dd4 <HAL_I2C_Mem_Read+0x228>)
 8005c68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c6a:	88f8      	ldrh	r0, [r7, #6]
 8005c6c:	893a      	ldrh	r2, [r7, #8]
 8005c6e:	8979      	ldrh	r1, [r7, #10]
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	9301      	str	r3, [sp, #4]
 8005c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	4603      	mov	r3, r0
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 f9bc 	bl	8005ff8 <I2C_RequestMemoryRead>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e1b0      	b.n	8005fec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d113      	bne.n	8005cba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c92:	2300      	movs	r3, #0
 8005c94:	623b      	str	r3, [r7, #32]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	623b      	str	r3, [r7, #32]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	623b      	str	r3, [r7, #32]
 8005ca6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	e184      	b.n	8005fc4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d11b      	bne.n	8005cfa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61fb      	str	r3, [r7, #28]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	61fb      	str	r3, [r7, #28]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	61fb      	str	r3, [r7, #28]
 8005ce6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	e164      	b.n	8005fc4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d11b      	bne.n	8005d3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d22:	2300      	movs	r3, #0
 8005d24:	61bb      	str	r3, [r7, #24]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	61bb      	str	r3, [r7, #24]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	61bb      	str	r3, [r7, #24]
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	e144      	b.n	8005fc4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	617b      	str	r3, [r7, #20]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	617b      	str	r3, [r7, #20]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005d50:	e138      	b.n	8005fc4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	f200 80f1 	bhi.w	8005f3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d123      	bne.n	8005dac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 fb44 	bl	80063f6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e139      	b.n	8005fec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	691a      	ldr	r2, [r3, #16]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005daa:	e10b      	b.n	8005fc4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d14e      	bne.n	8005e52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dba:	2200      	movs	r2, #0
 8005dbc:	4906      	ldr	r1, [pc, #24]	@ (8005dd8 <HAL_I2C_Mem_Read+0x22c>)
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 fa02 	bl	80061c8 <I2C_WaitOnFlagUntilTimeout>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d008      	beq.n	8005ddc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e10e      	b.n	8005fec <HAL_I2C_Mem_Read+0x440>
 8005dce:	bf00      	nop
 8005dd0:	00100002 	.word	0x00100002
 8005dd4:	ffff0000 	.word	0xffff0000
 8005dd8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	691a      	ldr	r2, [r3, #16]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e50:	e0b8      	b.n	8005fc4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e58:	2200      	movs	r2, #0
 8005e5a:	4966      	ldr	r1, [pc, #408]	@ (8005ff4 <HAL_I2C_Mem_Read+0x448>)
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f9b3 	bl	80061c8 <I2C_WaitOnFlagUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e0bf      	b.n	8005fec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691a      	ldr	r2, [r3, #16]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	494f      	ldr	r1, [pc, #316]	@ (8005ff4 <HAL_I2C_Mem_Read+0x448>)
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 f985 	bl	80061c8 <I2C_WaitOnFlagUntilTimeout>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e091      	b.n	8005fec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ed6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691a      	ldr	r2, [r3, #16]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	691a      	ldr	r2, [r3, #16]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	3b01      	subs	r3, #1
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f3c:	e042      	b.n	8005fc4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f40:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 fa57 	bl	80063f6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e04c      	b.n	8005fec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	691a      	ldr	r2, [r3, #16]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	f003 0304 	and.w	r3, r3, #4
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	d118      	bne.n	8005fc4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f47f aec2 	bne.w	8005d52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	e000      	b.n	8005fec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005fea:	2302      	movs	r3, #2
  }
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3728      	adds	r7, #40	@ 0x28
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	00010004 	.word	0x00010004

08005ff8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b088      	sub	sp, #32
 8005ffc:	af02      	add	r7, sp, #8
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	4608      	mov	r0, r1
 8006002:	4611      	mov	r1, r2
 8006004:	461a      	mov	r2, r3
 8006006:	4603      	mov	r3, r0
 8006008:	817b      	strh	r3, [r7, #10]
 800600a:	460b      	mov	r3, r1
 800600c:	813b      	strh	r3, [r7, #8]
 800600e:	4613      	mov	r3, r2
 8006010:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006020:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006030:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	2200      	movs	r2, #0
 800603a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 f8c2 	bl	80061c8 <I2C_WaitOnFlagUntilTimeout>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00d      	beq.n	8006066 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006058:	d103      	bne.n	8006062 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006060:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e0aa      	b.n	80061bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006066:	897b      	ldrh	r3, [r7, #10]
 8006068:	b2db      	uxtb	r3, r3
 800606a:	461a      	mov	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006074:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006078:	6a3a      	ldr	r2, [r7, #32]
 800607a:	4952      	ldr	r1, [pc, #328]	@ (80061c4 <I2C_RequestMemoryRead+0x1cc>)
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 f8fa 	bl	8006276 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e097      	b.n	80061bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800608c:	2300      	movs	r3, #0
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	617b      	str	r3, [r7, #20]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060a4:	6a39      	ldr	r1, [r7, #32]
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 f964 	bl	8006374 <I2C_WaitOnTXEFlagUntilTimeout>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00d      	beq.n	80060ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d107      	bne.n	80060ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e076      	b.n	80061bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060ce:	88fb      	ldrh	r3, [r7, #6]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d105      	bne.n	80060e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060d4:	893b      	ldrh	r3, [r7, #8]
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	611a      	str	r2, [r3, #16]
 80060de:	e021      	b.n	8006124 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060e0:	893b      	ldrh	r3, [r7, #8]
 80060e2:	0a1b      	lsrs	r3, r3, #8
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060f0:	6a39      	ldr	r1, [r7, #32]
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 f93e 	bl	8006374 <I2C_WaitOnTXEFlagUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00d      	beq.n	800611a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006102:	2b04      	cmp	r3, #4
 8006104:	d107      	bne.n	8006116 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006114:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e050      	b.n	80061bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800611a:	893b      	ldrh	r3, [r7, #8]
 800611c:	b2da      	uxtb	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006126:	6a39      	ldr	r1, [r7, #32]
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 f923 	bl	8006374 <I2C_WaitOnTXEFlagUntilTimeout>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00d      	beq.n	8006150 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006138:	2b04      	cmp	r3, #4
 800613a:	d107      	bne.n	800614c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800614a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e035      	b.n	80061bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800615e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	2200      	movs	r2, #0
 8006168:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 f82b 	bl	80061c8 <I2C_WaitOnFlagUntilTimeout>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00d      	beq.n	8006194 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006186:	d103      	bne.n	8006190 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800618e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e013      	b.n	80061bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006194:	897b      	ldrh	r3, [r7, #10]
 8006196:	b2db      	uxtb	r3, r3
 8006198:	f043 0301 	orr.w	r3, r3, #1
 800619c:	b2da      	uxtb	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a6:	6a3a      	ldr	r2, [r7, #32]
 80061a8:	4906      	ldr	r1, [pc, #24]	@ (80061c4 <I2C_RequestMemoryRead+0x1cc>)
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 f863 	bl	8006276 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	00010002 	.word	0x00010002

080061c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	603b      	str	r3, [r7, #0]
 80061d4:	4613      	mov	r3, r2
 80061d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061d8:	e025      	b.n	8006226 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061e0:	d021      	beq.n	8006226 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e2:	f7fd fe37 	bl	8003e54 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d302      	bcc.n	80061f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d116      	bne.n	8006226 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2220      	movs	r2, #32
 8006202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006212:	f043 0220 	orr.w	r2, r3, #32
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e023      	b.n	800626e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	0c1b      	lsrs	r3, r3, #16
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b01      	cmp	r3, #1
 800622e:	d10d      	bne.n	800624c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	43da      	mvns	r2, r3
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	4013      	ands	r3, r2
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	bf0c      	ite	eq
 8006242:	2301      	moveq	r3, #1
 8006244:	2300      	movne	r3, #0
 8006246:	b2db      	uxtb	r3, r3
 8006248:	461a      	mov	r2, r3
 800624a:	e00c      	b.n	8006266 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	43da      	mvns	r2, r3
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4013      	ands	r3, r2
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	bf0c      	ite	eq
 800625e:	2301      	moveq	r3, #1
 8006260:	2300      	movne	r3, #0
 8006262:	b2db      	uxtb	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	429a      	cmp	r2, r3
 800626a:	d0b6      	beq.n	80061da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	607a      	str	r2, [r7, #4]
 8006282:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006284:	e051      	b.n	800632a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006294:	d123      	bne.n	80062de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80062ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2220      	movs	r2, #32
 80062ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ca:	f043 0204 	orr.w	r2, r3, #4
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e046      	b.n	800636c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062e4:	d021      	beq.n	800632a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e6:	f7fd fdb5 	bl	8003e54 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d302      	bcc.n	80062fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d116      	bne.n	800632a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2220      	movs	r2, #32
 8006306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006316:	f043 0220 	orr.w	r2, r3, #32
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e020      	b.n	800636c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	0c1b      	lsrs	r3, r3, #16
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b01      	cmp	r3, #1
 8006332:	d10c      	bne.n	800634e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	43da      	mvns	r2, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	4013      	ands	r3, r2
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	bf14      	ite	ne
 8006346:	2301      	movne	r3, #1
 8006348:	2300      	moveq	r3, #0
 800634a:	b2db      	uxtb	r3, r3
 800634c:	e00b      	b.n	8006366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	43da      	mvns	r2, r3
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	4013      	ands	r3, r2
 800635a:	b29b      	uxth	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	bf14      	ite	ne
 8006360:	2301      	movne	r3, #1
 8006362:	2300      	moveq	r3, #0
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d18d      	bne.n	8006286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006380:	e02d      	b.n	80063de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f88d 	bl	80064a2 <I2C_IsAcknowledgeFailed>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e02d      	b.n	80063ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006398:	d021      	beq.n	80063de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800639a:	f7fd fd5b 	bl	8003e54 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d302      	bcc.n	80063b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d116      	bne.n	80063de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ca:	f043 0220 	orr.w	r2, r3, #32
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e007      	b.n	80063ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063e8:	2b80      	cmp	r3, #128	@ 0x80
 80063ea:	d1ca      	bne.n	8006382 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	60b9      	str	r1, [r7, #8]
 8006400:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006402:	e042      	b.n	800648a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	f003 0310 	and.w	r3, r3, #16
 800640e:	2b10      	cmp	r3, #16
 8006410:	d119      	bne.n	8006446 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f06f 0210 	mvn.w	r2, #16
 800641a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2220      	movs	r2, #32
 8006426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e029      	b.n	800649a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006446:	f7fd fd05 	bl	8003e54 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	429a      	cmp	r2, r3
 8006454:	d302      	bcc.n	800645c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d116      	bne.n	800648a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2220      	movs	r2, #32
 8006466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006476:	f043 0220 	orr.w	r2, r3, #32
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e007      	b.n	800649a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006494:	2b40      	cmp	r3, #64	@ 0x40
 8006496:	d1b5      	bne.n	8006404 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064b8:	d11b      	bne.n	80064f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064de:	f043 0204 	orr.w	r2, r3, #4
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e000      	b.n	80064f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e267      	b.n	80069e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d075      	beq.n	800660a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800651e:	4b88      	ldr	r3, [pc, #544]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f003 030c 	and.w	r3, r3, #12
 8006526:	2b04      	cmp	r3, #4
 8006528:	d00c      	beq.n	8006544 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800652a:	4b85      	ldr	r3, [pc, #532]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006532:	2b08      	cmp	r3, #8
 8006534:	d112      	bne.n	800655c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006536:	4b82      	ldr	r3, [pc, #520]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800653e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006542:	d10b      	bne.n	800655c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006544:	4b7e      	ldr	r3, [pc, #504]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d05b      	beq.n	8006608 <HAL_RCC_OscConfig+0x108>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d157      	bne.n	8006608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e242      	b.n	80069e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006564:	d106      	bne.n	8006574 <HAL_RCC_OscConfig+0x74>
 8006566:	4b76      	ldr	r3, [pc, #472]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a75      	ldr	r2, [pc, #468]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 800656c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	e01d      	b.n	80065b0 <HAL_RCC_OscConfig+0xb0>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800657c:	d10c      	bne.n	8006598 <HAL_RCC_OscConfig+0x98>
 800657e:	4b70      	ldr	r3, [pc, #448]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a6f      	ldr	r2, [pc, #444]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 8006584:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	4b6d      	ldr	r3, [pc, #436]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a6c      	ldr	r2, [pc, #432]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 8006590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	e00b      	b.n	80065b0 <HAL_RCC_OscConfig+0xb0>
 8006598:	4b69      	ldr	r3, [pc, #420]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a68      	ldr	r2, [pc, #416]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 800659e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	4b66      	ldr	r3, [pc, #408]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a65      	ldr	r2, [pc, #404]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 80065aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d013      	beq.n	80065e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b8:	f7fd fc4c 	bl	8003e54 <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065c0:	f7fd fc48 	bl	8003e54 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b64      	cmp	r3, #100	@ 0x64
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e207      	b.n	80069e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065d2:	4b5b      	ldr	r3, [pc, #364]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0f0      	beq.n	80065c0 <HAL_RCC_OscConfig+0xc0>
 80065de:	e014      	b.n	800660a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e0:	f7fd fc38 	bl	8003e54 <HAL_GetTick>
 80065e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065e8:	f7fd fc34 	bl	8003e54 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b64      	cmp	r3, #100	@ 0x64
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e1f3      	b.n	80069e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065fa:	4b51      	ldr	r3, [pc, #324]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1f0      	bne.n	80065e8 <HAL_RCC_OscConfig+0xe8>
 8006606:	e000      	b.n	800660a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d063      	beq.n	80066de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006616:	4b4a      	ldr	r3, [pc, #296]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f003 030c 	and.w	r3, r3, #12
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00b      	beq.n	800663a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006622:	4b47      	ldr	r3, [pc, #284]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800662a:	2b08      	cmp	r3, #8
 800662c:	d11c      	bne.n	8006668 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800662e:	4b44      	ldr	r3, [pc, #272]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d116      	bne.n	8006668 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800663a:	4b41      	ldr	r3, [pc, #260]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d005      	beq.n	8006652 <HAL_RCC_OscConfig+0x152>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d001      	beq.n	8006652 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e1c7      	b.n	80069e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006652:	4b3b      	ldr	r3, [pc, #236]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	4937      	ldr	r1, [pc, #220]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 8006662:	4313      	orrs	r3, r2
 8006664:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006666:	e03a      	b.n	80066de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d020      	beq.n	80066b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006670:	4b34      	ldr	r3, [pc, #208]	@ (8006744 <HAL_RCC_OscConfig+0x244>)
 8006672:	2201      	movs	r2, #1
 8006674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006676:	f7fd fbed 	bl	8003e54 <HAL_GetTick>
 800667a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800667c:	e008      	b.n	8006690 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800667e:	f7fd fbe9 	bl	8003e54 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e1a8      	b.n	80069e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006690:	4b2b      	ldr	r3, [pc, #172]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0f0      	beq.n	800667e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800669c:	4b28      	ldr	r3, [pc, #160]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	00db      	lsls	r3, r3, #3
 80066aa:	4925      	ldr	r1, [pc, #148]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	600b      	str	r3, [r1, #0]
 80066b0:	e015      	b.n	80066de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066b2:	4b24      	ldr	r3, [pc, #144]	@ (8006744 <HAL_RCC_OscConfig+0x244>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b8:	f7fd fbcc 	bl	8003e54 <HAL_GetTick>
 80066bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066be:	e008      	b.n	80066d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066c0:	f7fd fbc8 	bl	8003e54 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e187      	b.n	80069e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1f0      	bne.n	80066c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0308 	and.w	r3, r3, #8
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d036      	beq.n	8006758 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d016      	beq.n	8006720 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066f2:	4b15      	ldr	r3, [pc, #84]	@ (8006748 <HAL_RCC_OscConfig+0x248>)
 80066f4:	2201      	movs	r2, #1
 80066f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f8:	f7fd fbac 	bl	8003e54 <HAL_GetTick>
 80066fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066fe:	e008      	b.n	8006712 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006700:	f7fd fba8 	bl	8003e54 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e167      	b.n	80069e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006712:	4b0b      	ldr	r3, [pc, #44]	@ (8006740 <HAL_RCC_OscConfig+0x240>)
 8006714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0f0      	beq.n	8006700 <HAL_RCC_OscConfig+0x200>
 800671e:	e01b      	b.n	8006758 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006720:	4b09      	ldr	r3, [pc, #36]	@ (8006748 <HAL_RCC_OscConfig+0x248>)
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006726:	f7fd fb95 	bl	8003e54 <HAL_GetTick>
 800672a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800672c:	e00e      	b.n	800674c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800672e:	f7fd fb91 	bl	8003e54 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b02      	cmp	r3, #2
 800673a:	d907      	bls.n	800674c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e150      	b.n	80069e2 <HAL_RCC_OscConfig+0x4e2>
 8006740:	40023800 	.word	0x40023800
 8006744:	42470000 	.word	0x42470000
 8006748:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800674c:	4b88      	ldr	r3, [pc, #544]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 800674e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1ea      	bne.n	800672e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 8097 	beq.w	8006894 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006766:	2300      	movs	r3, #0
 8006768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800676a:	4b81      	ldr	r3, [pc, #516]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 800676c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10f      	bne.n	8006796 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006776:	2300      	movs	r3, #0
 8006778:	60bb      	str	r3, [r7, #8]
 800677a:	4b7d      	ldr	r3, [pc, #500]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 800677c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677e:	4a7c      	ldr	r2, [pc, #496]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 8006780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006784:	6413      	str	r3, [r2, #64]	@ 0x40
 8006786:	4b7a      	ldr	r3, [pc, #488]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 8006788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800678e:	60bb      	str	r3, [r7, #8]
 8006790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006792:	2301      	movs	r3, #1
 8006794:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006796:	4b77      	ldr	r3, [pc, #476]	@ (8006974 <HAL_RCC_OscConfig+0x474>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d118      	bne.n	80067d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067a2:	4b74      	ldr	r3, [pc, #464]	@ (8006974 <HAL_RCC_OscConfig+0x474>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a73      	ldr	r2, [pc, #460]	@ (8006974 <HAL_RCC_OscConfig+0x474>)
 80067a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067ae:	f7fd fb51 	bl	8003e54 <HAL_GetTick>
 80067b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b4:	e008      	b.n	80067c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067b6:	f7fd fb4d 	bl	8003e54 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d901      	bls.n	80067c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e10c      	b.n	80069e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067c8:	4b6a      	ldr	r3, [pc, #424]	@ (8006974 <HAL_RCC_OscConfig+0x474>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d0f0      	beq.n	80067b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d106      	bne.n	80067ea <HAL_RCC_OscConfig+0x2ea>
 80067dc:	4b64      	ldr	r3, [pc, #400]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 80067de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e0:	4a63      	ldr	r2, [pc, #396]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 80067e2:	f043 0301 	orr.w	r3, r3, #1
 80067e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80067e8:	e01c      	b.n	8006824 <HAL_RCC_OscConfig+0x324>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	2b05      	cmp	r3, #5
 80067f0:	d10c      	bne.n	800680c <HAL_RCC_OscConfig+0x30c>
 80067f2:	4b5f      	ldr	r3, [pc, #380]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 80067f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067f6:	4a5e      	ldr	r2, [pc, #376]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 80067f8:	f043 0304 	orr.w	r3, r3, #4
 80067fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80067fe:	4b5c      	ldr	r3, [pc, #368]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 8006800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006802:	4a5b      	ldr	r2, [pc, #364]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 8006804:	f043 0301 	orr.w	r3, r3, #1
 8006808:	6713      	str	r3, [r2, #112]	@ 0x70
 800680a:	e00b      	b.n	8006824 <HAL_RCC_OscConfig+0x324>
 800680c:	4b58      	ldr	r3, [pc, #352]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 800680e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006810:	4a57      	ldr	r2, [pc, #348]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 8006812:	f023 0301 	bic.w	r3, r3, #1
 8006816:	6713      	str	r3, [r2, #112]	@ 0x70
 8006818:	4b55      	ldr	r3, [pc, #340]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 800681a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800681c:	4a54      	ldr	r2, [pc, #336]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 800681e:	f023 0304 	bic.w	r3, r3, #4
 8006822:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d015      	beq.n	8006858 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800682c:	f7fd fb12 	bl	8003e54 <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006832:	e00a      	b.n	800684a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006834:	f7fd fb0e 	bl	8003e54 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006842:	4293      	cmp	r3, r2
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e0cb      	b.n	80069e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800684a:	4b49      	ldr	r3, [pc, #292]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 800684c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d0ee      	beq.n	8006834 <HAL_RCC_OscConfig+0x334>
 8006856:	e014      	b.n	8006882 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006858:	f7fd fafc 	bl	8003e54 <HAL_GetTick>
 800685c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800685e:	e00a      	b.n	8006876 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006860:	f7fd faf8 	bl	8003e54 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800686e:	4293      	cmp	r3, r2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e0b5      	b.n	80069e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006876:	4b3e      	ldr	r3, [pc, #248]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 8006878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1ee      	bne.n	8006860 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006882:	7dfb      	ldrb	r3, [r7, #23]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d105      	bne.n	8006894 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006888:	4b39      	ldr	r3, [pc, #228]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 800688a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688c:	4a38      	ldr	r2, [pc, #224]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 800688e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006892:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 80a1 	beq.w	80069e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800689e:	4b34      	ldr	r3, [pc, #208]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f003 030c 	and.w	r3, r3, #12
 80068a6:	2b08      	cmp	r3, #8
 80068a8:	d05c      	beq.n	8006964 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d141      	bne.n	8006936 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068b2:	4b31      	ldr	r3, [pc, #196]	@ (8006978 <HAL_RCC_OscConfig+0x478>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b8:	f7fd facc 	bl	8003e54 <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068c0:	f7fd fac8 	bl	8003e54 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e087      	b.n	80069e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068d2:	4b27      	ldr	r3, [pc, #156]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1f0      	bne.n	80068c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	69da      	ldr	r2, [r3, #28]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	431a      	orrs	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ec:	019b      	lsls	r3, r3, #6
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f4:	085b      	lsrs	r3, r3, #1
 80068f6:	3b01      	subs	r3, #1
 80068f8:	041b      	lsls	r3, r3, #16
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006900:	061b      	lsls	r3, r3, #24
 8006902:	491b      	ldr	r1, [pc, #108]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 8006904:	4313      	orrs	r3, r2
 8006906:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006908:	4b1b      	ldr	r3, [pc, #108]	@ (8006978 <HAL_RCC_OscConfig+0x478>)
 800690a:	2201      	movs	r2, #1
 800690c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800690e:	f7fd faa1 	bl	8003e54 <HAL_GetTick>
 8006912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006914:	e008      	b.n	8006928 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006916:	f7fd fa9d 	bl	8003e54 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d901      	bls.n	8006928 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e05c      	b.n	80069e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006928:	4b11      	ldr	r3, [pc, #68]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0f0      	beq.n	8006916 <HAL_RCC_OscConfig+0x416>
 8006934:	e054      	b.n	80069e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006936:	4b10      	ldr	r3, [pc, #64]	@ (8006978 <HAL_RCC_OscConfig+0x478>)
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800693c:	f7fd fa8a 	bl	8003e54 <HAL_GetTick>
 8006940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006942:	e008      	b.n	8006956 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006944:	f7fd fa86 	bl	8003e54 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b02      	cmp	r3, #2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e045      	b.n	80069e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006956:	4b06      	ldr	r3, [pc, #24]	@ (8006970 <HAL_RCC_OscConfig+0x470>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1f0      	bne.n	8006944 <HAL_RCC_OscConfig+0x444>
 8006962:	e03d      	b.n	80069e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d107      	bne.n	800697c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e038      	b.n	80069e2 <HAL_RCC_OscConfig+0x4e2>
 8006970:	40023800 	.word	0x40023800
 8006974:	40007000 	.word	0x40007000
 8006978:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800697c:	4b1b      	ldr	r3, [pc, #108]	@ (80069ec <HAL_RCC_OscConfig+0x4ec>)
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d028      	beq.n	80069dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006994:	429a      	cmp	r2, r3
 8006996:	d121      	bne.n	80069dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d11a      	bne.n	80069dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80069ac:	4013      	ands	r3, r2
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80069b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d111      	bne.n	80069dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	3b01      	subs	r3, #1
 80069c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d107      	bne.n	80069dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069d8:	429a      	cmp	r2, r3
 80069da:	d001      	beq.n	80069e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e000      	b.n	80069e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	40023800 	.word	0x40023800

080069f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e0cc      	b.n	8006b9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a04:	4b68      	ldr	r3, [pc, #416]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0307 	and.w	r3, r3, #7
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d90c      	bls.n	8006a2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a12:	4b65      	ldr	r3, [pc, #404]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	b2d2      	uxtb	r2, r2
 8006a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a1a:	4b63      	ldr	r3, [pc, #396]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d001      	beq.n	8006a2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e0b8      	b.n	8006b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d020      	beq.n	8006a7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d005      	beq.n	8006a50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a44:	4b59      	ldr	r3, [pc, #356]	@ (8006bac <HAL_RCC_ClockConfig+0x1bc>)
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	4a58      	ldr	r2, [pc, #352]	@ (8006bac <HAL_RCC_ClockConfig+0x1bc>)
 8006a4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006a4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0308 	and.w	r3, r3, #8
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d005      	beq.n	8006a68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a5c:	4b53      	ldr	r3, [pc, #332]	@ (8006bac <HAL_RCC_ClockConfig+0x1bc>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	4a52      	ldr	r2, [pc, #328]	@ (8006bac <HAL_RCC_ClockConfig+0x1bc>)
 8006a62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006a66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a68:	4b50      	ldr	r3, [pc, #320]	@ (8006bac <HAL_RCC_ClockConfig+0x1bc>)
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	494d      	ldr	r1, [pc, #308]	@ (8006bac <HAL_RCC_ClockConfig+0x1bc>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d044      	beq.n	8006b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d107      	bne.n	8006a9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a8e:	4b47      	ldr	r3, [pc, #284]	@ (8006bac <HAL_RCC_ClockConfig+0x1bc>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d119      	bne.n	8006ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e07f      	b.n	8006b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d003      	beq.n	8006aae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aaa:	2b03      	cmp	r3, #3
 8006aac:	d107      	bne.n	8006abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aae:	4b3f      	ldr	r3, [pc, #252]	@ (8006bac <HAL_RCC_ClockConfig+0x1bc>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d109      	bne.n	8006ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e06f      	b.n	8006b9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006abe:	4b3b      	ldr	r3, [pc, #236]	@ (8006bac <HAL_RCC_ClockConfig+0x1bc>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e067      	b.n	8006b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ace:	4b37      	ldr	r3, [pc, #220]	@ (8006bac <HAL_RCC_ClockConfig+0x1bc>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f023 0203 	bic.w	r2, r3, #3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	4934      	ldr	r1, [pc, #208]	@ (8006bac <HAL_RCC_ClockConfig+0x1bc>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ae0:	f7fd f9b8 	bl	8003e54 <HAL_GetTick>
 8006ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ae6:	e00a      	b.n	8006afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ae8:	f7fd f9b4 	bl	8003e54 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d901      	bls.n	8006afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e04f      	b.n	8006b9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006afe:	4b2b      	ldr	r3, [pc, #172]	@ (8006bac <HAL_RCC_ClockConfig+0x1bc>)
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 020c 	and.w	r2, r3, #12
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d1eb      	bne.n	8006ae8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b10:	4b25      	ldr	r3, [pc, #148]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0307 	and.w	r3, r3, #7
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d20c      	bcs.n	8006b38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b1e:	4b22      	ldr	r3, [pc, #136]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	b2d2      	uxtb	r2, r2
 8006b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b26:	4b20      	ldr	r3, [pc, #128]	@ (8006ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0307 	and.w	r3, r3, #7
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d001      	beq.n	8006b38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e032      	b.n	8006b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d008      	beq.n	8006b56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b44:	4b19      	ldr	r3, [pc, #100]	@ (8006bac <HAL_RCC_ClockConfig+0x1bc>)
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	4916      	ldr	r1, [pc, #88]	@ (8006bac <HAL_RCC_ClockConfig+0x1bc>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0308 	and.w	r3, r3, #8
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d009      	beq.n	8006b76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b62:	4b12      	ldr	r3, [pc, #72]	@ (8006bac <HAL_RCC_ClockConfig+0x1bc>)
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	490e      	ldr	r1, [pc, #56]	@ (8006bac <HAL_RCC_ClockConfig+0x1bc>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b76:	f000 f82d 	bl	8006bd4 <HAL_RCC_GetSysClockFreq>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8006bac <HAL_RCC_ClockConfig+0x1bc>)
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	091b      	lsrs	r3, r3, #4
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	490a      	ldr	r1, [pc, #40]	@ (8006bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8006b88:	5ccb      	ldrb	r3, [r1, r3]
 8006b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b8e:	4a09      	ldr	r2, [pc, #36]	@ (8006bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b92:	4b09      	ldr	r3, [pc, #36]	@ (8006bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fd f918 	bl	8003dcc <HAL_InitTick>

  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	40023c00 	.word	0x40023c00
 8006bac:	40023800 	.word	0x40023800
 8006bb0:	0800d1f0 	.word	0x0800d1f0
 8006bb4:	2000001c 	.word	0x2000001c
 8006bb8:	20000020 	.word	0x20000020

08006bbc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006bc0:	4b03      	ldr	r3, [pc, #12]	@ (8006bd0 <HAL_RCC_EnableCSS+0x14>)
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]
}
 8006bc6:	bf00      	nop
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	4247004c 	.word	0x4247004c

08006bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bd8:	b090      	sub	sp, #64	@ 0x40
 8006bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be0:	2300      	movs	r3, #0
 8006be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006be4:	2300      	movs	r3, #0
 8006be6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bec:	4b59      	ldr	r3, [pc, #356]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f003 030c 	and.w	r3, r3, #12
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d00d      	beq.n	8006c14 <HAL_RCC_GetSysClockFreq+0x40>
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	f200 80a1 	bhi.w	8006d40 <HAL_RCC_GetSysClockFreq+0x16c>
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d002      	beq.n	8006c08 <HAL_RCC_GetSysClockFreq+0x34>
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d003      	beq.n	8006c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8006c06:	e09b      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c08:	4b53      	ldr	r3, [pc, #332]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x184>)
 8006c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006c0c:	e09b      	b.n	8006d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c0e:	4b53      	ldr	r3, [pc, #332]	@ (8006d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8006c10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c12:	e098      	b.n	8006d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c14:	4b4f      	ldr	r3, [pc, #316]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c1e:	4b4d      	ldr	r3, [pc, #308]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d028      	beq.n	8006c7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	099b      	lsrs	r3, r3, #6
 8006c30:	2200      	movs	r2, #0
 8006c32:	623b      	str	r3, [r7, #32]
 8006c34:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	4b47      	ldr	r3, [pc, #284]	@ (8006d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8006c40:	fb03 f201 	mul.w	r2, r3, r1
 8006c44:	2300      	movs	r3, #0
 8006c46:	fb00 f303 	mul.w	r3, r0, r3
 8006c4a:	4413      	add	r3, r2
 8006c4c:	4a43      	ldr	r2, [pc, #268]	@ (8006d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8006c4e:	fba0 1202 	umull	r1, r2, r0, r2
 8006c52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c54:	460a      	mov	r2, r1
 8006c56:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006c58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c5a:	4413      	add	r3, r2
 8006c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c60:	2200      	movs	r2, #0
 8006c62:	61bb      	str	r3, [r7, #24]
 8006c64:	61fa      	str	r2, [r7, #28]
 8006c66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006c6e:	f7f9 fb07 	bl	8000280 <__aeabi_uldivmod>
 8006c72:	4602      	mov	r2, r0
 8006c74:	460b      	mov	r3, r1
 8006c76:	4613      	mov	r3, r2
 8006c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c7a:	e053      	b.n	8006d24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c7c:	4b35      	ldr	r3, [pc, #212]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	099b      	lsrs	r3, r3, #6
 8006c82:	2200      	movs	r2, #0
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	617a      	str	r2, [r7, #20]
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006c8e:	f04f 0b00 	mov.w	fp, #0
 8006c92:	4652      	mov	r2, sl
 8006c94:	465b      	mov	r3, fp
 8006c96:	f04f 0000 	mov.w	r0, #0
 8006c9a:	f04f 0100 	mov.w	r1, #0
 8006c9e:	0159      	lsls	r1, r3, #5
 8006ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ca4:	0150      	lsls	r0, r2, #5
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	ebb2 080a 	subs.w	r8, r2, sl
 8006cae:	eb63 090b 	sbc.w	r9, r3, fp
 8006cb2:	f04f 0200 	mov.w	r2, #0
 8006cb6:	f04f 0300 	mov.w	r3, #0
 8006cba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006cbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006cc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006cc6:	ebb2 0408 	subs.w	r4, r2, r8
 8006cca:	eb63 0509 	sbc.w	r5, r3, r9
 8006cce:	f04f 0200 	mov.w	r2, #0
 8006cd2:	f04f 0300 	mov.w	r3, #0
 8006cd6:	00eb      	lsls	r3, r5, #3
 8006cd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cdc:	00e2      	lsls	r2, r4, #3
 8006cde:	4614      	mov	r4, r2
 8006ce0:	461d      	mov	r5, r3
 8006ce2:	eb14 030a 	adds.w	r3, r4, sl
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	eb45 030b 	adc.w	r3, r5, fp
 8006cec:	607b      	str	r3, [r7, #4]
 8006cee:	f04f 0200 	mov.w	r2, #0
 8006cf2:	f04f 0300 	mov.w	r3, #0
 8006cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	028b      	lsls	r3, r1, #10
 8006cfe:	4621      	mov	r1, r4
 8006d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d04:	4621      	mov	r1, r4
 8006d06:	028a      	lsls	r2, r1, #10
 8006d08:	4610      	mov	r0, r2
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d0e:	2200      	movs	r2, #0
 8006d10:	60bb      	str	r3, [r7, #8]
 8006d12:	60fa      	str	r2, [r7, #12]
 8006d14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d18:	f7f9 fab2 	bl	8000280 <__aeabi_uldivmod>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4613      	mov	r3, r2
 8006d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d24:	4b0b      	ldr	r3, [pc, #44]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	0c1b      	lsrs	r3, r3, #16
 8006d2a:	f003 0303 	and.w	r3, r3, #3
 8006d2e:	3301      	adds	r3, #1
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006d34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d3e:	e002      	b.n	8006d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d40:	4b05      	ldr	r3, [pc, #20]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x184>)
 8006d42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3740      	adds	r7, #64	@ 0x40
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d52:	bf00      	nop
 8006d54:	40023800 	.word	0x40023800
 8006d58:	00f42400 	.word	0x00f42400
 8006d5c:	00b71b00 	.word	0x00b71b00

08006d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d64:	4b03      	ldr	r3, [pc, #12]	@ (8006d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d66:	681b      	ldr	r3, [r3, #0]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	2000001c 	.word	0x2000001c

08006d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d7c:	f7ff fff0 	bl	8006d60 <HAL_RCC_GetHCLKFreq>
 8006d80:	4602      	mov	r2, r0
 8006d82:	4b05      	ldr	r3, [pc, #20]	@ (8006d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	0a9b      	lsrs	r3, r3, #10
 8006d88:	f003 0307 	and.w	r3, r3, #7
 8006d8c:	4903      	ldr	r1, [pc, #12]	@ (8006d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d8e:	5ccb      	ldrb	r3, [r1, r3]
 8006d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	40023800 	.word	0x40023800
 8006d9c:	0800d200 	.word	0x0800d200

08006da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006da4:	f7ff ffdc 	bl	8006d60 <HAL_RCC_GetHCLKFreq>
 8006da8:	4602      	mov	r2, r0
 8006daa:	4b05      	ldr	r3, [pc, #20]	@ (8006dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	0b5b      	lsrs	r3, r3, #13
 8006db0:	f003 0307 	and.w	r3, r3, #7
 8006db4:	4903      	ldr	r1, [pc, #12]	@ (8006dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006db6:	5ccb      	ldrb	r3, [r1, r3]
 8006db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	40023800 	.word	0x40023800
 8006dc4:	0800d200 	.word	0x0800d200

08006dc8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006dcc:	4b06      	ldr	r3, [pc, #24]	@ (8006de8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dd4:	2b80      	cmp	r3, #128	@ 0x80
 8006dd6:	d104      	bne.n	8006de2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006dd8:	f000 f80a 	bl	8006df0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006ddc:	4b03      	ldr	r3, [pc, #12]	@ (8006dec <HAL_RCC_NMI_IRQHandler+0x24>)
 8006dde:	2280      	movs	r2, #128	@ 0x80
 8006de0:	701a      	strb	r2, [r3, #0]
  }
}
 8006de2:	bf00      	nop
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	40023800 	.word	0x40023800
 8006dec:	4002380e 	.word	0x4002380e

08006df0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006df0:	b480      	push	{r7}
 8006df2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b082      	sub	sp, #8
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e07b      	b.n	8006f08 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d108      	bne.n	8006e2a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e20:	d009      	beq.n	8006e36 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	61da      	str	r2, [r3, #28]
 8006e28:	e005      	b.n	8006e36 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d106      	bne.n	8006e56 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7fc fab1 	bl	80033b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2202      	movs	r2, #2
 8006e5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e6c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	431a      	orrs	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	69db      	ldr	r3, [r3, #28]
 8006eac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eba:	ea42 0103 	orr.w	r1, r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	0c1b      	lsrs	r3, r3, #16
 8006ed4:	f003 0104 	and.w	r1, r3, #4
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006edc:	f003 0210 	and.w	r2, r3, #16
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	69da      	ldr	r2, [r3, #28]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ef6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b08c      	sub	sp, #48	@ 0x30
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d101      	bne.n	8006f36 <HAL_SPI_TransmitReceive+0x26>
 8006f32:	2302      	movs	r3, #2
 8006f34:	e18a      	b.n	800724c <HAL_SPI_TransmitReceive+0x33c>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f3e:	f7fc ff89 	bl	8003e54 <HAL_GetTick>
 8006f42:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006f54:	887b      	ldrh	r3, [r7, #2]
 8006f56:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d00f      	beq.n	8006f80 <HAL_SPI_TransmitReceive+0x70>
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f66:	d107      	bne.n	8006f78 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d103      	bne.n	8006f78 <HAL_SPI_TransmitReceive+0x68>
 8006f70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f74:	2b04      	cmp	r3, #4
 8006f76:	d003      	beq.n	8006f80 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006f78:	2302      	movs	r3, #2
 8006f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006f7e:	e15b      	b.n	8007238 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d005      	beq.n	8006f92 <HAL_SPI_TransmitReceive+0x82>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <HAL_SPI_TransmitReceive+0x82>
 8006f8c:	887b      	ldrh	r3, [r7, #2]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d103      	bne.n	8006f9a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006f98:	e14e      	b.n	8007238 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	d003      	beq.n	8006fae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2205      	movs	r2, #5
 8006faa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	887a      	ldrh	r2, [r7, #2]
 8006fbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	887a      	ldrh	r2, [r7, #2]
 8006fc4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	887a      	ldrh	r2, [r7, #2]
 8006fd0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	887a      	ldrh	r2, [r7, #2]
 8006fd6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fee:	2b40      	cmp	r3, #64	@ 0x40
 8006ff0:	d007      	beq.n	8007002 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007000:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800700a:	d178      	bne.n	80070fe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <HAL_SPI_TransmitReceive+0x10a>
 8007014:	8b7b      	ldrh	r3, [r7, #26]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d166      	bne.n	80070e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701e:	881a      	ldrh	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800702a:	1c9a      	adds	r2, r3, #2
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007034:	b29b      	uxth	r3, r3
 8007036:	3b01      	subs	r3, #1
 8007038:	b29a      	uxth	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800703e:	e053      	b.n	80070e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b02      	cmp	r3, #2
 800704c:	d11b      	bne.n	8007086 <HAL_SPI_TransmitReceive+0x176>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007052:	b29b      	uxth	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	d016      	beq.n	8007086 <HAL_SPI_TransmitReceive+0x176>
 8007058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705a:	2b01      	cmp	r3, #1
 800705c:	d113      	bne.n	8007086 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007062:	881a      	ldrh	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706e:	1c9a      	adds	r2, r3, #2
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007078:	b29b      	uxth	r3, r3
 800707a:	3b01      	subs	r3, #1
 800707c:	b29a      	uxth	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007082:	2300      	movs	r3, #0
 8007084:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	2b01      	cmp	r3, #1
 8007092:	d119      	bne.n	80070c8 <HAL_SPI_TransmitReceive+0x1b8>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007098:	b29b      	uxth	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d014      	beq.n	80070c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a8:	b292      	uxth	r2, r2
 80070aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b0:	1c9a      	adds	r2, r3, #2
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070c4:	2301      	movs	r3, #1
 80070c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80070c8:	f7fc fec4 	bl	8003e54 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d807      	bhi.n	80070e8 <HAL_SPI_TransmitReceive+0x1d8>
 80070d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070de:	d003      	beq.n	80070e8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80070e6:	e0a7      	b.n	8007238 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1a6      	bne.n	8007040 <HAL_SPI_TransmitReceive+0x130>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1a1      	bne.n	8007040 <HAL_SPI_TransmitReceive+0x130>
 80070fc:	e07c      	b.n	80071f8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <HAL_SPI_TransmitReceive+0x1fc>
 8007106:	8b7b      	ldrh	r3, [r7, #26]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d16b      	bne.n	80071e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	330c      	adds	r3, #12
 8007116:	7812      	ldrb	r2, [r2, #0]
 8007118:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29a      	uxth	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007132:	e057      	b.n	80071e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b02      	cmp	r3, #2
 8007140:	d11c      	bne.n	800717c <HAL_SPI_TransmitReceive+0x26c>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007146:	b29b      	uxth	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	d017      	beq.n	800717c <HAL_SPI_TransmitReceive+0x26c>
 800714c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714e:	2b01      	cmp	r3, #1
 8007150:	d114      	bne.n	800717c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	330c      	adds	r3, #12
 800715c:	7812      	ldrb	r2, [r2, #0]
 800715e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800716e:	b29b      	uxth	r3, r3
 8007170:	3b01      	subs	r3, #1
 8007172:	b29a      	uxth	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b01      	cmp	r3, #1
 8007188:	d119      	bne.n	80071be <HAL_SPI_TransmitReceive+0x2ae>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800718e:	b29b      	uxth	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d014      	beq.n	80071be <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	3b01      	subs	r3, #1
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071ba:	2301      	movs	r3, #1
 80071bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80071be:	f7fc fe49 	bl	8003e54 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d803      	bhi.n	80071d6 <HAL_SPI_TransmitReceive+0x2c6>
 80071ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071d4:	d102      	bne.n	80071dc <HAL_SPI_TransmitReceive+0x2cc>
 80071d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d103      	bne.n	80071e4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80071e2:	e029      	b.n	8007238 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1a2      	bne.n	8007134 <HAL_SPI_TransmitReceive+0x224>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d19d      	bne.n	8007134 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 f8b1 	bl	8007364 <SPI_EndRxTxTransaction>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d006      	beq.n	8007216 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2220      	movs	r2, #32
 8007212:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007214:	e010      	b.n	8007238 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10b      	bne.n	8007236 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800721e:	2300      	movs	r3, #0
 8007220:	617b      	str	r3, [r7, #20]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	617b      	str	r3, [r7, #20]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	617b      	str	r3, [r7, #20]
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	e000      	b.n	8007238 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007236:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007248:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800724c:	4618      	mov	r0, r3
 800724e:	3730      	adds	r7, #48	@ 0x30
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b088      	sub	sp, #32
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	603b      	str	r3, [r7, #0]
 8007260:	4613      	mov	r3, r2
 8007262:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007264:	f7fc fdf6 	bl	8003e54 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726c:	1a9b      	subs	r3, r3, r2
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	4413      	add	r3, r2
 8007272:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007274:	f7fc fdee 	bl	8003e54 <HAL_GetTick>
 8007278:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800727a:	4b39      	ldr	r3, [pc, #228]	@ (8007360 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	015b      	lsls	r3, r3, #5
 8007280:	0d1b      	lsrs	r3, r3, #20
 8007282:	69fa      	ldr	r2, [r7, #28]
 8007284:	fb02 f303 	mul.w	r3, r2, r3
 8007288:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800728a:	e054      	b.n	8007336 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007292:	d050      	beq.n	8007336 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007294:	f7fc fdde 	bl	8003e54 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	69fa      	ldr	r2, [r7, #28]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d902      	bls.n	80072aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d13d      	bne.n	8007326 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80072b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072c2:	d111      	bne.n	80072e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072cc:	d004      	beq.n	80072d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072d6:	d107      	bne.n	80072e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072f0:	d10f      	bne.n	8007312 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007310:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e017      	b.n	8007356 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	3b01      	subs	r3, #1
 8007334:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	4013      	ands	r3, r2
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	429a      	cmp	r2, r3
 8007344:	bf0c      	ite	eq
 8007346:	2301      	moveq	r3, #1
 8007348:	2300      	movne	r3, #0
 800734a:	b2db      	uxtb	r3, r3
 800734c:	461a      	mov	r2, r3
 800734e:	79fb      	ldrb	r3, [r7, #7]
 8007350:	429a      	cmp	r2, r3
 8007352:	d19b      	bne.n	800728c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3720      	adds	r7, #32
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	2000001c 	.word	0x2000001c

08007364 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	af02      	add	r7, sp, #8
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007370:	4b1b      	ldr	r3, [pc, #108]	@ (80073e0 <SPI_EndRxTxTransaction+0x7c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a1b      	ldr	r2, [pc, #108]	@ (80073e4 <SPI_EndRxTxTransaction+0x80>)
 8007376:	fba2 2303 	umull	r2, r3, r2, r3
 800737a:	0d5b      	lsrs	r3, r3, #21
 800737c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007380:	fb02 f303 	mul.w	r3, r2, r3
 8007384:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800738e:	d112      	bne.n	80073b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2200      	movs	r2, #0
 8007398:	2180      	movs	r1, #128	@ 0x80
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f7ff ff5a 	bl	8007254 <SPI_WaitFlagStateUntilTimeout>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d016      	beq.n	80073d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073aa:	f043 0220 	orr.w	r2, r3, #32
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e00f      	b.n	80073d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00a      	beq.n	80073d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	3b01      	subs	r3, #1
 80073c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073cc:	2b80      	cmp	r3, #128	@ 0x80
 80073ce:	d0f2      	beq.n	80073b6 <SPI_EndRxTxTransaction+0x52>
 80073d0:	e000      	b.n	80073d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80073d2:	bf00      	nop
  }

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	2000001c 	.word	0x2000001c
 80073e4:	165e9f81 	.word	0x165e9f81

080073e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e041      	b.n	800747e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d106      	bne.n	8007414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7fc f888 	bl	8003524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2202      	movs	r2, #2
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3304      	adds	r3, #4
 8007424:	4619      	mov	r1, r3
 8007426:	4610      	mov	r0, r2
 8007428:	f000 fba8 	bl	8007b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b01      	cmp	r3, #1
 800749a:	d001      	beq.n	80074a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e046      	b.n	800752e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a23      	ldr	r2, [pc, #140]	@ (800753c <HAL_TIM_Base_Start+0xb4>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d022      	beq.n	80074f8 <HAL_TIM_Base_Start+0x70>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074ba:	d01d      	beq.n	80074f8 <HAL_TIM_Base_Start+0x70>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a1f      	ldr	r2, [pc, #124]	@ (8007540 <HAL_TIM_Base_Start+0xb8>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d018      	beq.n	80074f8 <HAL_TIM_Base_Start+0x70>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007544 <HAL_TIM_Base_Start+0xbc>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d013      	beq.n	80074f8 <HAL_TIM_Base_Start+0x70>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007548 <HAL_TIM_Base_Start+0xc0>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d00e      	beq.n	80074f8 <HAL_TIM_Base_Start+0x70>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a1b      	ldr	r2, [pc, #108]	@ (800754c <HAL_TIM_Base_Start+0xc4>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d009      	beq.n	80074f8 <HAL_TIM_Base_Start+0x70>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a19      	ldr	r2, [pc, #100]	@ (8007550 <HAL_TIM_Base_Start+0xc8>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d004      	beq.n	80074f8 <HAL_TIM_Base_Start+0x70>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a18      	ldr	r2, [pc, #96]	@ (8007554 <HAL_TIM_Base_Start+0xcc>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d111      	bne.n	800751c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f003 0307 	and.w	r3, r3, #7
 8007502:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b06      	cmp	r3, #6
 8007508:	d010      	beq.n	800752c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f042 0201 	orr.w	r2, r2, #1
 8007518:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800751a:	e007      	b.n	800752c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f042 0201 	orr.w	r2, r2, #1
 800752a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	40010000 	.word	0x40010000
 8007540:	40000400 	.word	0x40000400
 8007544:	40000800 	.word	0x40000800
 8007548:	40000c00 	.word	0x40000c00
 800754c:	40010400 	.word	0x40010400
 8007550:	40014000 	.word	0x40014000
 8007554:	40001800 	.word	0x40001800

08007558 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e041      	b.n	80075ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d106      	bne.n	8007584 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7fb ff82 	bl	8003488 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3304      	adds	r3, #4
 8007594:	4619      	mov	r1, r3
 8007596:	4610      	mov	r0, r2
 8007598:	f000 faf0 	bl	8007b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d109      	bne.n	800761c <HAL_TIM_PWM_Start+0x24>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b01      	cmp	r3, #1
 8007612:	bf14      	ite	ne
 8007614:	2301      	movne	r3, #1
 8007616:	2300      	moveq	r3, #0
 8007618:	b2db      	uxtb	r3, r3
 800761a:	e022      	b.n	8007662 <HAL_TIM_PWM_Start+0x6a>
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	2b04      	cmp	r3, #4
 8007620:	d109      	bne.n	8007636 <HAL_TIM_PWM_Start+0x3e>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b01      	cmp	r3, #1
 800762c:	bf14      	ite	ne
 800762e:	2301      	movne	r3, #1
 8007630:	2300      	moveq	r3, #0
 8007632:	b2db      	uxtb	r3, r3
 8007634:	e015      	b.n	8007662 <HAL_TIM_PWM_Start+0x6a>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b08      	cmp	r3, #8
 800763a:	d109      	bne.n	8007650 <HAL_TIM_PWM_Start+0x58>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b01      	cmp	r3, #1
 8007646:	bf14      	ite	ne
 8007648:	2301      	movne	r3, #1
 800764a:	2300      	moveq	r3, #0
 800764c:	b2db      	uxtb	r3, r3
 800764e:	e008      	b.n	8007662 <HAL_TIM_PWM_Start+0x6a>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b01      	cmp	r3, #1
 800765a:	bf14      	ite	ne
 800765c:	2301      	movne	r3, #1
 800765e:	2300      	moveq	r3, #0
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e07c      	b.n	8007764 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d104      	bne.n	800767a <HAL_TIM_PWM_Start+0x82>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007678:	e013      	b.n	80076a2 <HAL_TIM_PWM_Start+0xaa>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2b04      	cmp	r3, #4
 800767e:	d104      	bne.n	800768a <HAL_TIM_PWM_Start+0x92>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007688:	e00b      	b.n	80076a2 <HAL_TIM_PWM_Start+0xaa>
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b08      	cmp	r3, #8
 800768e:	d104      	bne.n	800769a <HAL_TIM_PWM_Start+0xa2>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007698:	e003      	b.n	80076a2 <HAL_TIM_PWM_Start+0xaa>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2202      	movs	r2, #2
 800769e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2201      	movs	r2, #1
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fd50 	bl	8008150 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a2d      	ldr	r2, [pc, #180]	@ (800776c <HAL_TIM_PWM_Start+0x174>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d004      	beq.n	80076c4 <HAL_TIM_PWM_Start+0xcc>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a2c      	ldr	r2, [pc, #176]	@ (8007770 <HAL_TIM_PWM_Start+0x178>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d101      	bne.n	80076c8 <HAL_TIM_PWM_Start+0xd0>
 80076c4:	2301      	movs	r3, #1
 80076c6:	e000      	b.n	80076ca <HAL_TIM_PWM_Start+0xd2>
 80076c8:	2300      	movs	r3, #0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d007      	beq.n	80076de <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a22      	ldr	r2, [pc, #136]	@ (800776c <HAL_TIM_PWM_Start+0x174>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d022      	beq.n	800772e <HAL_TIM_PWM_Start+0x136>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076f0:	d01d      	beq.n	800772e <HAL_TIM_PWM_Start+0x136>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a1f      	ldr	r2, [pc, #124]	@ (8007774 <HAL_TIM_PWM_Start+0x17c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d018      	beq.n	800772e <HAL_TIM_PWM_Start+0x136>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a1d      	ldr	r2, [pc, #116]	@ (8007778 <HAL_TIM_PWM_Start+0x180>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d013      	beq.n	800772e <HAL_TIM_PWM_Start+0x136>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a1c      	ldr	r2, [pc, #112]	@ (800777c <HAL_TIM_PWM_Start+0x184>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d00e      	beq.n	800772e <HAL_TIM_PWM_Start+0x136>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a16      	ldr	r2, [pc, #88]	@ (8007770 <HAL_TIM_PWM_Start+0x178>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d009      	beq.n	800772e <HAL_TIM_PWM_Start+0x136>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a18      	ldr	r2, [pc, #96]	@ (8007780 <HAL_TIM_PWM_Start+0x188>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d004      	beq.n	800772e <HAL_TIM_PWM_Start+0x136>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a16      	ldr	r2, [pc, #88]	@ (8007784 <HAL_TIM_PWM_Start+0x18c>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d111      	bne.n	8007752 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f003 0307 	and.w	r3, r3, #7
 8007738:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2b06      	cmp	r3, #6
 800773e:	d010      	beq.n	8007762 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f042 0201 	orr.w	r2, r2, #1
 800774e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007750:	e007      	b.n	8007762 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f042 0201 	orr.w	r2, r2, #1
 8007760:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	40010000 	.word	0x40010000
 8007770:	40010400 	.word	0x40010400
 8007774:	40000400 	.word	0x40000400
 8007778:	40000800 	.word	0x40000800
 800777c:	40000c00 	.word	0x40000c00
 8007780:	40014000 	.word	0x40014000
 8007784:	40001800 	.word	0x40001800

08007788 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2200      	movs	r2, #0
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	4618      	mov	r0, r3
 800779c:	f000 fcd8 	bl	8008150 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a2e      	ldr	r2, [pc, #184]	@ (8007860 <HAL_TIM_PWM_Stop+0xd8>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d004      	beq.n	80077b4 <HAL_TIM_PWM_Stop+0x2c>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a2d      	ldr	r2, [pc, #180]	@ (8007864 <HAL_TIM_PWM_Stop+0xdc>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d101      	bne.n	80077b8 <HAL_TIM_PWM_Stop+0x30>
 80077b4:	2301      	movs	r3, #1
 80077b6:	e000      	b.n	80077ba <HAL_TIM_PWM_Stop+0x32>
 80077b8:	2300      	movs	r3, #0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d017      	beq.n	80077ee <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	6a1a      	ldr	r2, [r3, #32]
 80077c4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80077c8:	4013      	ands	r3, r2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10f      	bne.n	80077ee <HAL_TIM_PWM_Stop+0x66>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	6a1a      	ldr	r2, [r3, #32]
 80077d4:	f240 4344 	movw	r3, #1092	@ 0x444
 80077d8:	4013      	ands	r3, r2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d107      	bne.n	80077ee <HAL_TIM_PWM_Stop+0x66>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6a1a      	ldr	r2, [r3, #32]
 80077f4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80077f8:	4013      	ands	r3, r2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10f      	bne.n	800781e <HAL_TIM_PWM_Stop+0x96>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6a1a      	ldr	r2, [r3, #32]
 8007804:	f240 4344 	movw	r3, #1092	@ 0x444
 8007808:	4013      	ands	r3, r2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d107      	bne.n	800781e <HAL_TIM_PWM_Stop+0x96>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 0201 	bic.w	r2, r2, #1
 800781c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d104      	bne.n	800782e <HAL_TIM_PWM_Stop+0xa6>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800782c:	e013      	b.n	8007856 <HAL_TIM_PWM_Stop+0xce>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b04      	cmp	r3, #4
 8007832:	d104      	bne.n	800783e <HAL_TIM_PWM_Stop+0xb6>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800783c:	e00b      	b.n	8007856 <HAL_TIM_PWM_Stop+0xce>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b08      	cmp	r3, #8
 8007842:	d104      	bne.n	800784e <HAL_TIM_PWM_Stop+0xc6>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800784c:	e003      	b.n	8007856 <HAL_TIM_PWM_Stop+0xce>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	40010000 	.word	0x40010000
 8007864:	40010400 	.word	0x40010400

08007868 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007874:	2300      	movs	r3, #0
 8007876:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800787e:	2b01      	cmp	r3, #1
 8007880:	d101      	bne.n	8007886 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007882:	2302      	movs	r3, #2
 8007884:	e0ae      	b.n	80079e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b0c      	cmp	r3, #12
 8007892:	f200 809f 	bhi.w	80079d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007896:	a201      	add	r2, pc, #4	@ (adr r2, 800789c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789c:	080078d1 	.word	0x080078d1
 80078a0:	080079d5 	.word	0x080079d5
 80078a4:	080079d5 	.word	0x080079d5
 80078a8:	080079d5 	.word	0x080079d5
 80078ac:	08007911 	.word	0x08007911
 80078b0:	080079d5 	.word	0x080079d5
 80078b4:	080079d5 	.word	0x080079d5
 80078b8:	080079d5 	.word	0x080079d5
 80078bc:	08007953 	.word	0x08007953
 80078c0:	080079d5 	.word	0x080079d5
 80078c4:	080079d5 	.word	0x080079d5
 80078c8:	080079d5 	.word	0x080079d5
 80078cc:	08007993 	.word	0x08007993
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68b9      	ldr	r1, [r7, #8]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 f9f0 	bl	8007cbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	699a      	ldr	r2, [r3, #24]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f042 0208 	orr.w	r2, r2, #8
 80078ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	699a      	ldr	r2, [r3, #24]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 0204 	bic.w	r2, r2, #4
 80078fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6999      	ldr	r1, [r3, #24]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	691a      	ldr	r2, [r3, #16]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	430a      	orrs	r2, r1
 800790c:	619a      	str	r2, [r3, #24]
      break;
 800790e:	e064      	b.n	80079da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68b9      	ldr	r1, [r7, #8]
 8007916:	4618      	mov	r0, r3
 8007918:	f000 fa40 	bl	8007d9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	699a      	ldr	r2, [r3, #24]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800792a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	699a      	ldr	r2, [r3, #24]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800793a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6999      	ldr	r1, [r3, #24]
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	021a      	lsls	r2, r3, #8
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	619a      	str	r2, [r3, #24]
      break;
 8007950:	e043      	b.n	80079da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68b9      	ldr	r1, [r7, #8]
 8007958:	4618      	mov	r0, r3
 800795a:	f000 fa95 	bl	8007e88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	69da      	ldr	r2, [r3, #28]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f042 0208 	orr.w	r2, r2, #8
 800796c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69da      	ldr	r2, [r3, #28]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f022 0204 	bic.w	r2, r2, #4
 800797c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	69d9      	ldr	r1, [r3, #28]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	691a      	ldr	r2, [r3, #16]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	430a      	orrs	r2, r1
 800798e:	61da      	str	r2, [r3, #28]
      break;
 8007990:	e023      	b.n	80079da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68b9      	ldr	r1, [r7, #8]
 8007998:	4618      	mov	r0, r3
 800799a:	f000 fae9 	bl	8007f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	69da      	ldr	r2, [r3, #28]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	69da      	ldr	r2, [r3, #28]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69d9      	ldr	r1, [r3, #28]
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	021a      	lsls	r2, r3, #8
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	430a      	orrs	r2, r1
 80079d0:	61da      	str	r2, [r3, #28]
      break;
 80079d2:	e002      	b.n	80079da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	75fb      	strb	r3, [r7, #23]
      break;
 80079d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d101      	bne.n	8007a08 <HAL_TIM_ConfigClockSource+0x1c>
 8007a04:	2302      	movs	r3, #2
 8007a06:	e0b4      	b.n	8007b72 <HAL_TIM_ConfigClockSource+0x186>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a40:	d03e      	beq.n	8007ac0 <HAL_TIM_ConfigClockSource+0xd4>
 8007a42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a46:	f200 8087 	bhi.w	8007b58 <HAL_TIM_ConfigClockSource+0x16c>
 8007a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a4e:	f000 8086 	beq.w	8007b5e <HAL_TIM_ConfigClockSource+0x172>
 8007a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a56:	d87f      	bhi.n	8007b58 <HAL_TIM_ConfigClockSource+0x16c>
 8007a58:	2b70      	cmp	r3, #112	@ 0x70
 8007a5a:	d01a      	beq.n	8007a92 <HAL_TIM_ConfigClockSource+0xa6>
 8007a5c:	2b70      	cmp	r3, #112	@ 0x70
 8007a5e:	d87b      	bhi.n	8007b58 <HAL_TIM_ConfigClockSource+0x16c>
 8007a60:	2b60      	cmp	r3, #96	@ 0x60
 8007a62:	d050      	beq.n	8007b06 <HAL_TIM_ConfigClockSource+0x11a>
 8007a64:	2b60      	cmp	r3, #96	@ 0x60
 8007a66:	d877      	bhi.n	8007b58 <HAL_TIM_ConfigClockSource+0x16c>
 8007a68:	2b50      	cmp	r3, #80	@ 0x50
 8007a6a:	d03c      	beq.n	8007ae6 <HAL_TIM_ConfigClockSource+0xfa>
 8007a6c:	2b50      	cmp	r3, #80	@ 0x50
 8007a6e:	d873      	bhi.n	8007b58 <HAL_TIM_ConfigClockSource+0x16c>
 8007a70:	2b40      	cmp	r3, #64	@ 0x40
 8007a72:	d058      	beq.n	8007b26 <HAL_TIM_ConfigClockSource+0x13a>
 8007a74:	2b40      	cmp	r3, #64	@ 0x40
 8007a76:	d86f      	bhi.n	8007b58 <HAL_TIM_ConfigClockSource+0x16c>
 8007a78:	2b30      	cmp	r3, #48	@ 0x30
 8007a7a:	d064      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x15a>
 8007a7c:	2b30      	cmp	r3, #48	@ 0x30
 8007a7e:	d86b      	bhi.n	8007b58 <HAL_TIM_ConfigClockSource+0x16c>
 8007a80:	2b20      	cmp	r3, #32
 8007a82:	d060      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x15a>
 8007a84:	2b20      	cmp	r3, #32
 8007a86:	d867      	bhi.n	8007b58 <HAL_TIM_ConfigClockSource+0x16c>
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d05c      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x15a>
 8007a8c:	2b10      	cmp	r3, #16
 8007a8e:	d05a      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0x15a>
 8007a90:	e062      	b.n	8007b58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6818      	ldr	r0, [r3, #0]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	6899      	ldr	r1, [r3, #8]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	685a      	ldr	r2, [r3, #4]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	f000 fb35 	bl	8008110 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ab4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	609a      	str	r2, [r3, #8]
      break;
 8007abe:	e04f      	b.n	8007b60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6818      	ldr	r0, [r3, #0]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	6899      	ldr	r1, [r3, #8]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	f000 fb1e 	bl	8008110 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689a      	ldr	r2, [r3, #8]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ae2:	609a      	str	r2, [r3, #8]
      break;
 8007ae4:	e03c      	b.n	8007b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6818      	ldr	r0, [r3, #0]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	6859      	ldr	r1, [r3, #4]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	461a      	mov	r2, r3
 8007af4:	f000 fa92 	bl	800801c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2150      	movs	r1, #80	@ 0x50
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 faeb 	bl	80080da <TIM_ITRx_SetConfig>
      break;
 8007b04:	e02c      	b.n	8007b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6818      	ldr	r0, [r3, #0]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	6859      	ldr	r1, [r3, #4]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	461a      	mov	r2, r3
 8007b14:	f000 fab1 	bl	800807a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2160      	movs	r1, #96	@ 0x60
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 fadb 	bl	80080da <TIM_ITRx_SetConfig>
      break;
 8007b24:	e01c      	b.n	8007b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6818      	ldr	r0, [r3, #0]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	6859      	ldr	r1, [r3, #4]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	461a      	mov	r2, r3
 8007b34:	f000 fa72 	bl	800801c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2140      	movs	r1, #64	@ 0x40
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 facb 	bl	80080da <TIM_ITRx_SetConfig>
      break;
 8007b44:	e00c      	b.n	8007b60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	4610      	mov	r0, r2
 8007b52:	f000 fac2 	bl	80080da <TIM_ITRx_SetConfig>
      break;
 8007b56:	e003      	b.n	8007b60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b5c:	e000      	b.n	8007b60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a40      	ldr	r2, [pc, #256]	@ (8007c90 <TIM_Base_SetConfig+0x114>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d013      	beq.n	8007bbc <TIM_Base_SetConfig+0x40>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b9a:	d00f      	beq.n	8007bbc <TIM_Base_SetConfig+0x40>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a3d      	ldr	r2, [pc, #244]	@ (8007c94 <TIM_Base_SetConfig+0x118>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00b      	beq.n	8007bbc <TIM_Base_SetConfig+0x40>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a3c      	ldr	r2, [pc, #240]	@ (8007c98 <TIM_Base_SetConfig+0x11c>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d007      	beq.n	8007bbc <TIM_Base_SetConfig+0x40>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a3b      	ldr	r2, [pc, #236]	@ (8007c9c <TIM_Base_SetConfig+0x120>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d003      	beq.n	8007bbc <TIM_Base_SetConfig+0x40>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a3a      	ldr	r2, [pc, #232]	@ (8007ca0 <TIM_Base_SetConfig+0x124>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d108      	bne.n	8007bce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a2f      	ldr	r2, [pc, #188]	@ (8007c90 <TIM_Base_SetConfig+0x114>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d02b      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bdc:	d027      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a2c      	ldr	r2, [pc, #176]	@ (8007c94 <TIM_Base_SetConfig+0x118>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d023      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a2b      	ldr	r2, [pc, #172]	@ (8007c98 <TIM_Base_SetConfig+0x11c>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d01f      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8007c9c <TIM_Base_SetConfig+0x120>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d01b      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a29      	ldr	r2, [pc, #164]	@ (8007ca0 <TIM_Base_SetConfig+0x124>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d017      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a28      	ldr	r2, [pc, #160]	@ (8007ca4 <TIM_Base_SetConfig+0x128>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d013      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a27      	ldr	r2, [pc, #156]	@ (8007ca8 <TIM_Base_SetConfig+0x12c>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00f      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a26      	ldr	r2, [pc, #152]	@ (8007cac <TIM_Base_SetConfig+0x130>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d00b      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a25      	ldr	r2, [pc, #148]	@ (8007cb0 <TIM_Base_SetConfig+0x134>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d007      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a24      	ldr	r2, [pc, #144]	@ (8007cb4 <TIM_Base_SetConfig+0x138>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d003      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a23      	ldr	r2, [pc, #140]	@ (8007cb8 <TIM_Base_SetConfig+0x13c>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d108      	bne.n	8007c40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	689a      	ldr	r2, [r3, #8]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a0a      	ldr	r2, [pc, #40]	@ (8007c90 <TIM_Base_SetConfig+0x114>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d003      	beq.n	8007c74 <TIM_Base_SetConfig+0xf8>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8007ca0 <TIM_Base_SetConfig+0x124>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d103      	bne.n	8007c7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	691a      	ldr	r2, [r3, #16]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	615a      	str	r2, [r3, #20]
}
 8007c82:	bf00      	nop
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	40010000 	.word	0x40010000
 8007c94:	40000400 	.word	0x40000400
 8007c98:	40000800 	.word	0x40000800
 8007c9c:	40000c00 	.word	0x40000c00
 8007ca0:	40010400 	.word	0x40010400
 8007ca4:	40014000 	.word	0x40014000
 8007ca8:	40014400 	.word	0x40014400
 8007cac:	40014800 	.word	0x40014800
 8007cb0:	40001800 	.word	0x40001800
 8007cb4:	40001c00 	.word	0x40001c00
 8007cb8:	40002000 	.word	0x40002000

08007cbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	f023 0201 	bic.w	r2, r3, #1
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f023 0303 	bic.w	r3, r3, #3
 8007cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f023 0302 	bic.w	r3, r3, #2
 8007d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a20      	ldr	r2, [pc, #128]	@ (8007d94 <TIM_OC1_SetConfig+0xd8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d003      	beq.n	8007d20 <TIM_OC1_SetConfig+0x64>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8007d98 <TIM_OC1_SetConfig+0xdc>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d10c      	bne.n	8007d3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f023 0308 	bic.w	r3, r3, #8
 8007d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f023 0304 	bic.w	r3, r3, #4
 8007d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a15      	ldr	r2, [pc, #84]	@ (8007d94 <TIM_OC1_SetConfig+0xd8>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d003      	beq.n	8007d4a <TIM_OC1_SetConfig+0x8e>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a14      	ldr	r2, [pc, #80]	@ (8007d98 <TIM_OC1_SetConfig+0xdc>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d111      	bne.n	8007d6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	621a      	str	r2, [r3, #32]
}
 8007d88:	bf00      	nop
 8007d8a:	371c      	adds	r7, #28
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	40010000 	.word	0x40010000
 8007d98:	40010400 	.word	0x40010400

08007d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	f023 0210 	bic.w	r2, r3, #16
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	021b      	lsls	r3, r3, #8
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f023 0320 	bic.w	r3, r3, #32
 8007de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	011b      	lsls	r3, r3, #4
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a22      	ldr	r2, [pc, #136]	@ (8007e80 <TIM_OC2_SetConfig+0xe4>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d003      	beq.n	8007e04 <TIM_OC2_SetConfig+0x68>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a21      	ldr	r2, [pc, #132]	@ (8007e84 <TIM_OC2_SetConfig+0xe8>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d10d      	bne.n	8007e20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	011b      	lsls	r3, r3, #4
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a17      	ldr	r2, [pc, #92]	@ (8007e80 <TIM_OC2_SetConfig+0xe4>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d003      	beq.n	8007e30 <TIM_OC2_SetConfig+0x94>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a16      	ldr	r2, [pc, #88]	@ (8007e84 <TIM_OC2_SetConfig+0xe8>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d113      	bne.n	8007e58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	621a      	str	r2, [r3, #32]
}
 8007e72:	bf00      	nop
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	40010000 	.word	0x40010000
 8007e84:	40010400 	.word	0x40010400

08007e88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b087      	sub	sp, #28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f023 0303 	bic.w	r3, r3, #3
 8007ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	021b      	lsls	r3, r3, #8
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a21      	ldr	r2, [pc, #132]	@ (8007f68 <TIM_OC3_SetConfig+0xe0>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d003      	beq.n	8007eee <TIM_OC3_SetConfig+0x66>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a20      	ldr	r2, [pc, #128]	@ (8007f6c <TIM_OC3_SetConfig+0xe4>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d10d      	bne.n	8007f0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	021b      	lsls	r3, r3, #8
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a16      	ldr	r2, [pc, #88]	@ (8007f68 <TIM_OC3_SetConfig+0xe0>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d003      	beq.n	8007f1a <TIM_OC3_SetConfig+0x92>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a15      	ldr	r2, [pc, #84]	@ (8007f6c <TIM_OC3_SetConfig+0xe4>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d113      	bne.n	8007f42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	011b      	lsls	r3, r3, #4
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	011b      	lsls	r3, r3, #4
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	621a      	str	r2, [r3, #32]
}
 8007f5c:	bf00      	nop
 8007f5e:	371c      	adds	r7, #28
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	40010000 	.word	0x40010000
 8007f6c:	40010400 	.word	0x40010400

08007f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	021b      	lsls	r3, r3, #8
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	031b      	lsls	r3, r3, #12
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a12      	ldr	r2, [pc, #72]	@ (8008014 <TIM_OC4_SetConfig+0xa4>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d003      	beq.n	8007fd8 <TIM_OC4_SetConfig+0x68>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a11      	ldr	r2, [pc, #68]	@ (8008018 <TIM_OC4_SetConfig+0xa8>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d109      	bne.n	8007fec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	019b      	lsls	r3, r3, #6
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	621a      	str	r2, [r3, #32]
}
 8008006:	bf00      	nop
 8008008:	371c      	adds	r7, #28
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	40010000 	.word	0x40010000
 8008018:	40010400 	.word	0x40010400

0800801c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800801c:	b480      	push	{r7}
 800801e:	b087      	sub	sp, #28
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6a1b      	ldr	r3, [r3, #32]
 800802c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	f023 0201 	bic.w	r2, r3, #1
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	4313      	orrs	r3, r2
 8008050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f023 030a 	bic.w	r3, r3, #10
 8008058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	4313      	orrs	r3, r2
 8008060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	621a      	str	r2, [r3, #32]
}
 800806e:	bf00      	nop
 8008070:	371c      	adds	r7, #28
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800807a:	b480      	push	{r7}
 800807c:	b087      	sub	sp, #28
 800807e:	af00      	add	r7, sp, #0
 8008080:	60f8      	str	r0, [r7, #12]
 8008082:	60b9      	str	r1, [r7, #8]
 8008084:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	f023 0210 	bic.w	r2, r3, #16
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80080a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	031b      	lsls	r3, r3, #12
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80080b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	011b      	lsls	r3, r3, #4
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	4313      	orrs	r3, r2
 80080c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	621a      	str	r2, [r3, #32]
}
 80080ce:	bf00      	nop
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080da:	b480      	push	{r7}
 80080dc:	b085      	sub	sp, #20
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	f043 0307 	orr.w	r3, r3, #7
 80080fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	609a      	str	r2, [r3, #8]
}
 8008104:	bf00      	nop
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008110:	b480      	push	{r7}
 8008112:	b087      	sub	sp, #28
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
 800811c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800812a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	021a      	lsls	r2, r3, #8
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	431a      	orrs	r2, r3
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	4313      	orrs	r3, r2
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	4313      	orrs	r3, r2
 800813c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	609a      	str	r2, [r3, #8]
}
 8008144:	bf00      	nop
 8008146:	371c      	adds	r7, #28
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008150:	b480      	push	{r7}
 8008152:	b087      	sub	sp, #28
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f003 031f 	and.w	r3, r3, #31
 8008162:	2201      	movs	r2, #1
 8008164:	fa02 f303 	lsl.w	r3, r2, r3
 8008168:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6a1a      	ldr	r2, [r3, #32]
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	43db      	mvns	r3, r3
 8008172:	401a      	ands	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6a1a      	ldr	r2, [r3, #32]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f003 031f 	and.w	r3, r3, #31
 8008182:	6879      	ldr	r1, [r7, #4]
 8008184:	fa01 f303 	lsl.w	r3, r1, r3
 8008188:	431a      	orrs	r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	621a      	str	r2, [r3, #32]
}
 800818e:	bf00      	nop
 8008190:	371c      	adds	r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
	...

0800819c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d101      	bne.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081b0:	2302      	movs	r3, #2
 80081b2:	e05a      	b.n	800826a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2202      	movs	r2, #2
 80081c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a21      	ldr	r2, [pc, #132]	@ (8008278 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d022      	beq.n	800823e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008200:	d01d      	beq.n	800823e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a1d      	ldr	r2, [pc, #116]	@ (800827c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d018      	beq.n	800823e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a1b      	ldr	r2, [pc, #108]	@ (8008280 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d013      	beq.n	800823e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a1a      	ldr	r2, [pc, #104]	@ (8008284 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d00e      	beq.n	800823e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a18      	ldr	r2, [pc, #96]	@ (8008288 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d009      	beq.n	800823e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a17      	ldr	r2, [pc, #92]	@ (800828c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d004      	beq.n	800823e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a15      	ldr	r2, [pc, #84]	@ (8008290 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d10c      	bne.n	8008258 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008244:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	4313      	orrs	r3, r2
 800824e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	40010000 	.word	0x40010000
 800827c:	40000400 	.word	0x40000400
 8008280:	40000800 	.word	0x40000800
 8008284:	40000c00 	.word	0x40000c00
 8008288:	40010400 	.word	0x40010400
 800828c:	40014000 	.word	0x40014000
 8008290:	40001800 	.word	0x40001800

08008294 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800829e:	2300      	movs	r3, #0
 80082a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d101      	bne.n	80082b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80082ac:	2302      	movs	r3, #2
 80082ae:	e03d      	b.n	800832c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	4313      	orrs	r3, r2
 80082e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	4313      	orrs	r3, r2
 800830a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	69db      	ldr	r3, [r3, #28]
 8008316:	4313      	orrs	r3, r2
 8008318:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e03f      	b.n	80083ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d106      	bne.n	8008364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7fb fa14 	bl	800378c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2224      	movs	r2, #36	@ 0x24
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68da      	ldr	r2, [r3, #12]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800837a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 ff81 	bl	8009284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	691a      	ldr	r2, [r3, #16]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	695a      	ldr	r2, [r3, #20]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2220      	movs	r2, #32
 80083bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2220      	movs	r2, #32
 80083c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08c      	sub	sp, #48	@ 0x30
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	4613      	mov	r3, r2
 80083e0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b20      	cmp	r3, #32
 80083ec:	d165      	bne.n	80084ba <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <HAL_UART_Transmit_DMA+0x26>
 80083f4:	88fb      	ldrh	r3, [r7, #6]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e05e      	b.n	80084bc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <HAL_UART_Transmit_DMA+0x38>
 8008408:	2302      	movs	r3, #2
 800840a:	e057      	b.n	80084bc <HAL_UART_Transmit_DMA+0xe8>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	88fa      	ldrh	r2, [r7, #6]
 800841e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	88fa      	ldrh	r2, [r7, #6]
 8008424:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2221      	movs	r2, #33	@ 0x21
 8008430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008438:	4a22      	ldr	r2, [pc, #136]	@ (80084c4 <HAL_UART_Transmit_DMA+0xf0>)
 800843a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008440:	4a21      	ldr	r2, [pc, #132]	@ (80084c8 <HAL_UART_Transmit_DMA+0xf4>)
 8008442:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008448:	4a20      	ldr	r2, [pc, #128]	@ (80084cc <HAL_UART_Transmit_DMA+0xf8>)
 800844a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008450:	2200      	movs	r2, #0
 8008452:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008454:	f107 0308 	add.w	r3, r7, #8
 8008458:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800845e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008460:	6819      	ldr	r1, [r3, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3304      	adds	r3, #4
 8008468:	461a      	mov	r2, r3
 800846a:	88fb      	ldrh	r3, [r7, #6]
 800846c:	f7fc fd20 	bl	8004eb0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008478:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3314      	adds	r3, #20
 8008488:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	e853 3f00 	ldrex	r3, [r3]
 8008490:	617b      	str	r3, [r7, #20]
   return(result);
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008498:	62bb      	str	r3, [r7, #40]	@ 0x28
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3314      	adds	r3, #20
 80084a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80084a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80084a4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a6:	6a39      	ldr	r1, [r7, #32]
 80084a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084aa:	e841 2300 	strex	r3, r2, [r1]
 80084ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1e5      	bne.n	8008482 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	e000      	b.n	80084bc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80084ba:	2302      	movs	r3, #2
  }
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3730      	adds	r7, #48	@ 0x30
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	08008b1d 	.word	0x08008b1d
 80084c8:	08008bb7 	.word	0x08008bb7
 80084cc:	08008d2f 	.word	0x08008d2f

080084d0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b08c      	sub	sp, #48	@ 0x30
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	4613      	mov	r3, r2
 80084dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b20      	cmp	r3, #32
 80084e8:	d152      	bne.n	8008590 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80084f0:	88fb      	ldrh	r3, [r7, #6]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e04b      	b.n	8008592 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008500:	2b01      	cmp	r3, #1
 8008502:	d101      	bne.n	8008508 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8008504:	2302      	movs	r3, #2
 8008506:	e044      	b.n	8008592 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2201      	movs	r2, #1
 8008514:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008516:	88fb      	ldrh	r3, [r7, #6]
 8008518:	461a      	mov	r2, r3
 800851a:	68b9      	ldr	r1, [r7, #8]
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 fc51 	bl	8008dc4 <UART_Start_Receive_DMA>
 8008522:	4603      	mov	r3, r0
 8008524:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008528:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800852c:	2b00      	cmp	r3, #0
 800852e:	d12c      	bne.n	800858a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008534:	2b01      	cmp	r3, #1
 8008536:	d125      	bne.n	8008584 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008538:	2300      	movs	r3, #0
 800853a:	613b      	str	r3, [r7, #16]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	613b      	str	r3, [r7, #16]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	613b      	str	r3, [r7, #16]
 800854c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	330c      	adds	r3, #12
 8008554:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	e853 3f00 	ldrex	r3, [r3]
 800855c:	617b      	str	r3, [r7, #20]
   return(result);
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f043 0310 	orr.w	r3, r3, #16
 8008564:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	330c      	adds	r3, #12
 800856c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800856e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008572:	6a39      	ldr	r1, [r7, #32]
 8008574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008576:	e841 2300 	strex	r3, r2, [r1]
 800857a:	61fb      	str	r3, [r7, #28]
   return(result);
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1e5      	bne.n	800854e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8008582:	e002      	b.n	800858a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800858a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800858e:	e000      	b.n	8008592 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8008590:	2302      	movs	r3, #2
  }
}
 8008592:	4618      	mov	r0, r3
 8008594:	3730      	adds	r7, #48	@ 0x30
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
	...

0800859c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b0ba      	sub	sp, #232	@ 0xe8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085d2:	f003 030f 	and.w	r3, r3, #15
 80085d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80085da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10f      	bne.n	8008602 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085e6:	f003 0320 	and.w	r3, r3, #32
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d009      	beq.n	8008602 <HAL_UART_IRQHandler+0x66>
 80085ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085f2:	f003 0320 	and.w	r3, r3, #32
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fd87 	bl	800910e <UART_Receive_IT>
      return;
 8008600:	e256      	b.n	8008ab0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 80de 	beq.w	80087c8 <HAL_UART_IRQHandler+0x22c>
 800860c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008610:	f003 0301 	and.w	r3, r3, #1
 8008614:	2b00      	cmp	r3, #0
 8008616:	d106      	bne.n	8008626 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800861c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 80d1 	beq.w	80087c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00b      	beq.n	800864a <HAL_UART_IRQHandler+0xae>
 8008632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800863a:	2b00      	cmp	r3, #0
 800863c:	d005      	beq.n	800864a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008642:	f043 0201 	orr.w	r2, r3, #1
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800864a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800864e:	f003 0304 	and.w	r3, r3, #4
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00b      	beq.n	800866e <HAL_UART_IRQHandler+0xd2>
 8008656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	2b00      	cmp	r3, #0
 8008660:	d005      	beq.n	800866e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008666:	f043 0202 	orr.w	r2, r3, #2
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800866e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00b      	beq.n	8008692 <HAL_UART_IRQHandler+0xf6>
 800867a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	2b00      	cmp	r3, #0
 8008684:	d005      	beq.n	8008692 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800868a:	f043 0204 	orr.w	r2, r3, #4
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008696:	f003 0308 	and.w	r3, r3, #8
 800869a:	2b00      	cmp	r3, #0
 800869c:	d011      	beq.n	80086c2 <HAL_UART_IRQHandler+0x126>
 800869e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086a2:	f003 0320 	and.w	r3, r3, #32
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d105      	bne.n	80086b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80086aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d005      	beq.n	80086c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ba:	f043 0208 	orr.w	r2, r3, #8
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f000 81ed 	beq.w	8008aa6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086d0:	f003 0320 	and.w	r3, r3, #32
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d008      	beq.n	80086ea <HAL_UART_IRQHandler+0x14e>
 80086d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086dc:	f003 0320 	and.w	r3, r3, #32
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fd12 	bl	800910e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f4:	2b40      	cmp	r3, #64	@ 0x40
 80086f6:	bf0c      	ite	eq
 80086f8:	2301      	moveq	r3, #1
 80086fa:	2300      	movne	r3, #0
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008706:	f003 0308 	and.w	r3, r3, #8
 800870a:	2b00      	cmp	r3, #0
 800870c:	d103      	bne.n	8008716 <HAL_UART_IRQHandler+0x17a>
 800870e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008712:	2b00      	cmp	r3, #0
 8008714:	d04f      	beq.n	80087b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fc1a 	bl	8008f50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008726:	2b40      	cmp	r3, #64	@ 0x40
 8008728:	d141      	bne.n	80087ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	3314      	adds	r3, #20
 8008730:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008734:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008738:	e853 3f00 	ldrex	r3, [r3]
 800873c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008740:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008744:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008748:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3314      	adds	r3, #20
 8008752:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008756:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800875a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008762:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800876e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1d9      	bne.n	800872a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800877a:	2b00      	cmp	r3, #0
 800877c:	d013      	beq.n	80087a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008782:	4a7d      	ldr	r2, [pc, #500]	@ (8008978 <HAL_UART_IRQHandler+0x3dc>)
 8008784:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878a:	4618      	mov	r0, r3
 800878c:	f7fc fc58 	bl	8005040 <HAL_DMA_Abort_IT>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d016      	beq.n	80087c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800879a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80087a0:	4610      	mov	r0, r2
 80087a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a4:	e00e      	b.n	80087c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f9ae 	bl	8008b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ac:	e00a      	b.n	80087c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f9aa 	bl	8008b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b4:	e006      	b.n	80087c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f9a6 	bl	8008b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80087c2:	e170      	b.n	8008aa6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c4:	bf00      	nop
    return;
 80087c6:	e16e      	b.n	8008aa6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	f040 814a 	bne.w	8008a66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80087d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087d6:	f003 0310 	and.w	r3, r3, #16
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 8143 	beq.w	8008a66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80087e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087e4:	f003 0310 	and.w	r3, r3, #16
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f000 813c 	beq.w	8008a66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087ee:	2300      	movs	r3, #0
 80087f0:	60bb      	str	r3, [r7, #8]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	60bb      	str	r3, [r7, #8]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	60bb      	str	r3, [r7, #8]
 8008802:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800880e:	2b40      	cmp	r3, #64	@ 0x40
 8008810:	f040 80b4 	bne.w	800897c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008820:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 8140 	beq.w	8008aaa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800882e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008832:	429a      	cmp	r2, r3
 8008834:	f080 8139 	bcs.w	8008aaa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800883e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008844:	69db      	ldr	r3, [r3, #28]
 8008846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800884a:	f000 8088 	beq.w	800895e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	330c      	adds	r3, #12
 8008854:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008858:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800885c:	e853 3f00 	ldrex	r3, [r3]
 8008860:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008864:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008868:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800886c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	330c      	adds	r3, #12
 8008876:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800887a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800887e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008882:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008886:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800888a:	e841 2300 	strex	r3, r2, [r1]
 800888e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008892:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1d9      	bne.n	800884e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3314      	adds	r3, #20
 80088a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80088a4:	e853 3f00 	ldrex	r3, [r3]
 80088a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80088aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80088ac:	f023 0301 	bic.w	r3, r3, #1
 80088b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3314      	adds	r3, #20
 80088ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80088be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80088c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80088c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80088ca:	e841 2300 	strex	r3, r2, [r1]
 80088ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80088d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1e1      	bne.n	800889a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3314      	adds	r3, #20
 80088dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80088e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3314      	adds	r3, #20
 80088f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80088fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80088fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008900:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008902:	e841 2300 	strex	r3, r2, [r1]
 8008906:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008908:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1e3      	bne.n	80088d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2220      	movs	r2, #32
 8008912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	330c      	adds	r3, #12
 8008922:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008926:	e853 3f00 	ldrex	r3, [r3]
 800892a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800892c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800892e:	f023 0310 	bic.w	r3, r3, #16
 8008932:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	330c      	adds	r3, #12
 800893c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008940:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008942:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008944:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008946:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008948:	e841 2300 	strex	r3, r2, [r1]
 800894c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800894e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e3      	bne.n	800891c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008958:	4618      	mov	r0, r3
 800895a:	f7fc fb01 	bl	8004f60 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008966:	b29b      	uxth	r3, r3
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	b29b      	uxth	r3, r3
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7f8 fcce 	bl	8001310 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008974:	e099      	b.n	8008aaa <HAL_UART_IRQHandler+0x50e>
 8008976:	bf00      	nop
 8008978:	08009017 	.word	0x08009017
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008984:	b29b      	uxth	r3, r3
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008990:	b29b      	uxth	r3, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 808b 	beq.w	8008aae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 8086 	beq.w	8008aae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	330c      	adds	r3, #12
 80089a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ac:	e853 3f00 	ldrex	r3, [r3]
 80089b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	330c      	adds	r3, #12
 80089c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80089c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80089c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1e3      	bne.n	80089a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	3314      	adds	r3, #20
 80089e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e4:	e853 3f00 	ldrex	r3, [r3]
 80089e8:	623b      	str	r3, [r7, #32]
   return(result);
 80089ea:	6a3b      	ldr	r3, [r7, #32]
 80089ec:	f023 0301 	bic.w	r3, r3, #1
 80089f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	3314      	adds	r3, #20
 80089fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80089fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a06:	e841 2300 	strex	r3, r2, [r1]
 8008a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1e3      	bne.n	80089da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2220      	movs	r2, #32
 8008a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	330c      	adds	r3, #12
 8008a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	e853 3f00 	ldrex	r3, [r3]
 8008a2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f023 0310 	bic.w	r3, r3, #16
 8008a36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	330c      	adds	r3, #12
 8008a40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008a44:	61fa      	str	r2, [r7, #28]
 8008a46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a48:	69b9      	ldr	r1, [r7, #24]
 8008a4a:	69fa      	ldr	r2, [r7, #28]
 8008a4c:	e841 2300 	strex	r3, r2, [r1]
 8008a50:	617b      	str	r3, [r7, #20]
   return(result);
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1e3      	bne.n	8008a20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7f8 fc56 	bl	8001310 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a64:	e023      	b.n	8008aae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d009      	beq.n	8008a86 <HAL_UART_IRQHandler+0x4ea>
 8008a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d003      	beq.n	8008a86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 fadd 	bl	800903e <UART_Transmit_IT>
    return;
 8008a84:	e014      	b.n	8008ab0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00e      	beq.n	8008ab0 <HAL_UART_IRQHandler+0x514>
 8008a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d008      	beq.n	8008ab0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fb1d 	bl	80090de <UART_EndTransmit_IT>
    return;
 8008aa4:	e004      	b.n	8008ab0 <HAL_UART_IRQHandler+0x514>
    return;
 8008aa6:	bf00      	nop
 8008aa8:	e002      	b.n	8008ab0 <HAL_UART_IRQHandler+0x514>
      return;
 8008aaa:	bf00      	nop
 8008aac:	e000      	b.n	8008ab0 <HAL_UART_IRQHandler+0x514>
      return;
 8008aae:	bf00      	nop
  }
}
 8008ab0:	37e8      	adds	r7, #232	@ 0xe8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop

08008ab8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b090      	sub	sp, #64	@ 0x40
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d137      	bne.n	8008ba8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3314      	adds	r3, #20
 8008b44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	623b      	str	r3, [r7, #32]
   return(result);
 8008b4e:	6a3b      	ldr	r3, [r7, #32]
 8008b50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3314      	adds	r3, #20
 8008b5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b66:	e841 2300 	strex	r3, r2, [r1]
 8008b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1e5      	bne.n	8008b3e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	330c      	adds	r3, #12
 8008b78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	e853 3f00 	ldrex	r3, [r3]
 8008b80:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b88:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	330c      	adds	r3, #12
 8008b90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b92:	61fa      	str	r2, [r7, #28]
 8008b94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	69b9      	ldr	r1, [r7, #24]
 8008b98:	69fa      	ldr	r2, [r7, #28]
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	617b      	str	r3, [r7, #20]
   return(result);
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e5      	bne.n	8008b72 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ba6:	e002      	b.n	8008bae <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008ba8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008baa:	f7ff ff85 	bl	8008ab8 <HAL_UART_TxCpltCallback>
}
 8008bae:	bf00      	nop
 8008bb0:	3740      	adds	r7, #64	@ 0x40
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b084      	sub	sp, #16
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bc2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f7ff ff81 	bl	8008acc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bca:	bf00      	nop
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b09c      	sub	sp, #112	@ 0x70
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bde:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d172      	bne.n	8008cd4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008bee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	330c      	adds	r3, #12
 8008bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bfe:	e853 3f00 	ldrex	r3, [r3]
 8008c02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	330c      	adds	r3, #12
 8008c12:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008c14:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008c16:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c1c:	e841 2300 	strex	r3, r2, [r1]
 8008c20:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1e5      	bne.n	8008bf4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3314      	adds	r3, #20
 8008c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c32:	e853 3f00 	ldrex	r3, [r3]
 8008c36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c3a:	f023 0301 	bic.w	r3, r3, #1
 8008c3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3314      	adds	r3, #20
 8008c46:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008c48:	647a      	str	r2, [r7, #68]	@ 0x44
 8008c4a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c50:	e841 2300 	strex	r3, r2, [r1]
 8008c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e5      	bne.n	8008c28 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3314      	adds	r3, #20
 8008c62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c66:	e853 3f00 	ldrex	r3, [r3]
 8008c6a:	623b      	str	r3, [r7, #32]
   return(result);
 8008c6c:	6a3b      	ldr	r3, [r7, #32]
 8008c6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c72:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3314      	adds	r3, #20
 8008c7a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008c7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c84:	e841 2300 	strex	r3, r2, [r1]
 8008c88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1e5      	bne.n	8008c5c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c92:	2220      	movs	r2, #32
 8008c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d119      	bne.n	8008cd4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	330c      	adds	r3, #12
 8008ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	e853 3f00 	ldrex	r3, [r3]
 8008cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f023 0310 	bic.w	r3, r3, #16
 8008cb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	330c      	adds	r3, #12
 8008cbe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008cc0:	61fa      	str	r2, [r7, #28]
 8008cc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc4:	69b9      	ldr	r1, [r7, #24]
 8008cc6:	69fa      	ldr	r2, [r7, #28]
 8008cc8:	e841 2300 	strex	r3, r2, [r1]
 8008ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1e5      	bne.n	8008ca0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d106      	bne.n	8008cea <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cde:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008ce4:	f7f8 fb14 	bl	8001310 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ce8:	e002      	b.n	8008cf0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008cea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008cec:	f7ff fef8 	bl	8008ae0 <HAL_UART_RxCpltCallback>
}
 8008cf0:	bf00      	nop
 8008cf2:	3770      	adds	r7, #112	@ 0x70
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d04:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d108      	bne.n	8008d20 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008d12:	085b      	lsrs	r3, r3, #1
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	4619      	mov	r1, r3
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f7f8 faf9 	bl	8001310 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d1e:	e002      	b.n	8008d26 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f7ff fee7 	bl	8008af4 <HAL_UART_RxHalfCpltCallback>
}
 8008d26:	bf00      	nop
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008d36:	2300      	movs	r3, #0
 8008d38:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d3e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d4a:	2b80      	cmp	r3, #128	@ 0x80
 8008d4c:	bf0c      	ite	eq
 8008d4e:	2301      	moveq	r3, #1
 8008d50:	2300      	movne	r3, #0
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b21      	cmp	r3, #33	@ 0x21
 8008d60:	d108      	bne.n	8008d74 <UART_DMAError+0x46>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d005      	beq.n	8008d74 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008d6e:	68b8      	ldr	r0, [r7, #8]
 8008d70:	f000 f8c6 	bl	8008f00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d7e:	2b40      	cmp	r3, #64	@ 0x40
 8008d80:	bf0c      	ite	eq
 8008d82:	2301      	moveq	r3, #1
 8008d84:	2300      	movne	r3, #0
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b22      	cmp	r3, #34	@ 0x22
 8008d94:	d108      	bne.n	8008da8 <UART_DMAError+0x7a>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d005      	beq.n	8008da8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008da2:	68b8      	ldr	r0, [r7, #8]
 8008da4:	f000 f8d4 	bl	8008f50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dac:	f043 0210 	orr.w	r2, r3, #16
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008db4:	68b8      	ldr	r0, [r7, #8]
 8008db6:	f7ff fea7 	bl	8008b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dba:	bf00      	nop
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b098      	sub	sp, #96	@ 0x60
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	88fa      	ldrh	r2, [r7, #6]
 8008ddc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2222      	movs	r2, #34	@ 0x22
 8008de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df0:	4a40      	ldr	r2, [pc, #256]	@ (8008ef4 <UART_Start_Receive_DMA+0x130>)
 8008df2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df8:	4a3f      	ldr	r2, [pc, #252]	@ (8008ef8 <UART_Start_Receive_DMA+0x134>)
 8008dfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e00:	4a3e      	ldr	r2, [pc, #248]	@ (8008efc <UART_Start_Receive_DMA+0x138>)
 8008e02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e08:	2200      	movs	r2, #0
 8008e0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008e0c:	f107 0308 	add.w	r3, r7, #8
 8008e10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	88fb      	ldrh	r3, [r7, #6]
 8008e24:	f7fc f844 	bl	8004eb0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008e28:	2300      	movs	r3, #0
 8008e2a:	613b      	str	r3, [r7, #16]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	613b      	str	r3, [r7, #16]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	613b      	str	r3, [r7, #16]
 8008e3c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d019      	beq.n	8008e82 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	330c      	adds	r3, #12
 8008e54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e58:	e853 3f00 	ldrex	r3, [r3]
 8008e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	330c      	adds	r3, #12
 8008e6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e6e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008e70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e72:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008e74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e76:	e841 2300 	strex	r3, r2, [r1]
 8008e7a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1e5      	bne.n	8008e4e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3314      	adds	r3, #20
 8008e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e8c:	e853 3f00 	ldrex	r3, [r3]
 8008e90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e94:	f043 0301 	orr.w	r3, r3, #1
 8008e98:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	3314      	adds	r3, #20
 8008ea0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008ea2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008ea4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008ea8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008eaa:	e841 2300 	strex	r3, r2, [r1]
 8008eae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1e5      	bne.n	8008e82 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3314      	adds	r3, #20
 8008ebc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	e853 3f00 	ldrex	r3, [r3]
 8008ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ecc:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	3314      	adds	r3, #20
 8008ed4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ed6:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ed8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eda:	6a39      	ldr	r1, [r7, #32]
 8008edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ede:	e841 2300 	strex	r3, r2, [r1]
 8008ee2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1e5      	bne.n	8008eb6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3760      	adds	r7, #96	@ 0x60
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	08008bd3 	.word	0x08008bd3
 8008ef8:	08008cf9 	.word	0x08008cf9
 8008efc:	08008d2f 	.word	0x08008d2f

08008f00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b089      	sub	sp, #36	@ 0x24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	330c      	adds	r3, #12
 8008f0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	e853 3f00 	ldrex	r3, [r3]
 8008f16:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008f1e:	61fb      	str	r3, [r7, #28]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	330c      	adds	r3, #12
 8008f26:	69fa      	ldr	r2, [r7, #28]
 8008f28:	61ba      	str	r2, [r7, #24]
 8008f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2c:	6979      	ldr	r1, [r7, #20]
 8008f2e:	69ba      	ldr	r2, [r7, #24]
 8008f30:	e841 2300 	strex	r3, r2, [r1]
 8008f34:	613b      	str	r3, [r7, #16]
   return(result);
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e5      	bne.n	8008f08 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2220      	movs	r2, #32
 8008f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8008f44:	bf00      	nop
 8008f46:	3724      	adds	r7, #36	@ 0x24
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b095      	sub	sp, #84	@ 0x54
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	330c      	adds	r3, #12
 8008f5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f62:	e853 3f00 	ldrex	r3, [r3]
 8008f66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	330c      	adds	r3, #12
 8008f76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008f78:	643a      	str	r2, [r7, #64]	@ 0x40
 8008f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f80:	e841 2300 	strex	r3, r2, [r1]
 8008f84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1e5      	bne.n	8008f58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3314      	adds	r3, #20
 8008f92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	e853 3f00 	ldrex	r3, [r3]
 8008f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	f023 0301 	bic.w	r3, r3, #1
 8008fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	3314      	adds	r3, #20
 8008faa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008fae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fb4:	e841 2300 	strex	r3, r2, [r1]
 8008fb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1e5      	bne.n	8008f8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d119      	bne.n	8008ffc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	330c      	adds	r3, #12
 8008fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	e853 3f00 	ldrex	r3, [r3]
 8008fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	f023 0310 	bic.w	r3, r3, #16
 8008fde:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	330c      	adds	r3, #12
 8008fe6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fe8:	61ba      	str	r2, [r7, #24]
 8008fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fec:	6979      	ldr	r1, [r7, #20]
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	e841 2300 	strex	r3, r2, [r1]
 8008ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1e5      	bne.n	8008fc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2220      	movs	r2, #32
 8009000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800900a:	bf00      	nop
 800900c:	3754      	adds	r7, #84	@ 0x54
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009022:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f7ff fd69 	bl	8008b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009036:	bf00      	nop
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800903e:	b480      	push	{r7}
 8009040:	b085      	sub	sp, #20
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b21      	cmp	r3, #33	@ 0x21
 8009050:	d13e      	bne.n	80090d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800905a:	d114      	bne.n	8009086 <UART_Transmit_IT+0x48>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d110      	bne.n	8009086 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	461a      	mov	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009078:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	1c9a      	adds	r2, r3, #2
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	621a      	str	r2, [r3, #32]
 8009084:	e008      	b.n	8009098 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	1c59      	adds	r1, r3, #1
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	6211      	str	r1, [r2, #32]
 8009090:	781a      	ldrb	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800909c:	b29b      	uxth	r3, r3
 800909e:	3b01      	subs	r3, #1
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	4619      	mov	r1, r3
 80090a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10f      	bne.n	80090cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68da      	ldr	r2, [r3, #12]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80090ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68da      	ldr	r2, [r3, #12]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80090cc:	2300      	movs	r3, #0
 80090ce:	e000      	b.n	80090d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80090d0:	2302      	movs	r3, #2
  }
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3714      	adds	r7, #20
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr

080090de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b082      	sub	sp, #8
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68da      	ldr	r2, [r3, #12]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2220      	movs	r2, #32
 80090fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7ff fcda 	bl	8008ab8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b08c      	sub	sp, #48	@ 0x30
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b22      	cmp	r3, #34	@ 0x22
 8009120:	f040 80ab 	bne.w	800927a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800912c:	d117      	bne.n	800915e <UART_Receive_IT+0x50>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d113      	bne.n	800915e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009136:	2300      	movs	r3, #0
 8009138:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800913e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	b29b      	uxth	r3, r3
 8009148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800914c:	b29a      	uxth	r2, r3
 800914e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009150:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009156:	1c9a      	adds	r2, r3, #2
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	629a      	str	r2, [r3, #40]	@ 0x28
 800915c:	e026      	b.n	80091ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009162:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009164:	2300      	movs	r3, #0
 8009166:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009170:	d007      	beq.n	8009182 <UART_Receive_IT+0x74>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10a      	bne.n	8009190 <UART_Receive_IT+0x82>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d106      	bne.n	8009190 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	b2da      	uxtb	r2, r3
 800918a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800918c:	701a      	strb	r2, [r3, #0]
 800918e:	e008      	b.n	80091a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	b2db      	uxtb	r3, r3
 8009198:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800919c:	b2da      	uxtb	r2, r3
 800919e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a6:	1c5a      	adds	r2, r3, #1
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	3b01      	subs	r3, #1
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	4619      	mov	r1, r3
 80091ba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d15a      	bne.n	8009276 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f022 0220 	bic.w	r2, r2, #32
 80091ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68da      	ldr	r2, [r3, #12]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80091de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	695a      	ldr	r2, [r3, #20]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f022 0201 	bic.w	r2, r2, #1
 80091ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2220      	movs	r2, #32
 80091f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d135      	bne.n	800926c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	330c      	adds	r3, #12
 800920c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	e853 3f00 	ldrex	r3, [r3]
 8009214:	613b      	str	r3, [r7, #16]
   return(result);
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	f023 0310 	bic.w	r3, r3, #16
 800921c:	627b      	str	r3, [r7, #36]	@ 0x24
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	330c      	adds	r3, #12
 8009224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009226:	623a      	str	r2, [r7, #32]
 8009228:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922a:	69f9      	ldr	r1, [r7, #28]
 800922c:	6a3a      	ldr	r2, [r7, #32]
 800922e:	e841 2300 	strex	r3, r2, [r1]
 8009232:	61bb      	str	r3, [r7, #24]
   return(result);
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1e5      	bne.n	8009206 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f003 0310 	and.w	r3, r3, #16
 8009244:	2b10      	cmp	r3, #16
 8009246:	d10a      	bne.n	800925e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009248:	2300      	movs	r3, #0
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	60fb      	str	r3, [r7, #12]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	60fb      	str	r3, [r7, #12]
 800925c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009262:	4619      	mov	r1, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7f8 f853 	bl	8001310 <HAL_UARTEx_RxEventCallback>
 800926a:	e002      	b.n	8009272 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7ff fc37 	bl	8008ae0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	e002      	b.n	800927c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	e000      	b.n	800927c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800927a:	2302      	movs	r3, #2
  }
}
 800927c:	4618      	mov	r0, r3
 800927e:	3730      	adds	r7, #48	@ 0x30
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009288:	b0c0      	sub	sp, #256	@ 0x100
 800928a:	af00      	add	r7, sp, #0
 800928c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800929c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092a0:	68d9      	ldr	r1, [r3, #12]
 80092a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	ea40 0301 	orr.w	r3, r0, r1
 80092ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80092ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092b2:	689a      	ldr	r2, [r3, #8]
 80092b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	431a      	orrs	r2, r3
 80092bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	431a      	orrs	r2, r3
 80092c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80092d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80092dc:	f021 010c 	bic.w	r1, r1, #12
 80092e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80092ea:	430b      	orrs	r3, r1
 80092ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80092ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	695b      	ldr	r3, [r3, #20]
 80092f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80092fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092fe:	6999      	ldr	r1, [r3, #24]
 8009300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	ea40 0301 	orr.w	r3, r0, r1
 800930a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800930c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	4b8f      	ldr	r3, [pc, #572]	@ (8009550 <UART_SetConfig+0x2cc>)
 8009314:	429a      	cmp	r2, r3
 8009316:	d005      	beq.n	8009324 <UART_SetConfig+0xa0>
 8009318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	4b8d      	ldr	r3, [pc, #564]	@ (8009554 <UART_SetConfig+0x2d0>)
 8009320:	429a      	cmp	r2, r3
 8009322:	d104      	bne.n	800932e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009324:	f7fd fd3c 	bl	8006da0 <HAL_RCC_GetPCLK2Freq>
 8009328:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800932c:	e003      	b.n	8009336 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800932e:	f7fd fd23 	bl	8006d78 <HAL_RCC_GetPCLK1Freq>
 8009332:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800933a:	69db      	ldr	r3, [r3, #28]
 800933c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009340:	f040 810c 	bne.w	800955c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009348:	2200      	movs	r2, #0
 800934a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800934e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009352:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009356:	4622      	mov	r2, r4
 8009358:	462b      	mov	r3, r5
 800935a:	1891      	adds	r1, r2, r2
 800935c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800935e:	415b      	adcs	r3, r3
 8009360:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009362:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009366:	4621      	mov	r1, r4
 8009368:	eb12 0801 	adds.w	r8, r2, r1
 800936c:	4629      	mov	r1, r5
 800936e:	eb43 0901 	adc.w	r9, r3, r1
 8009372:	f04f 0200 	mov.w	r2, #0
 8009376:	f04f 0300 	mov.w	r3, #0
 800937a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800937e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009386:	4690      	mov	r8, r2
 8009388:	4699      	mov	r9, r3
 800938a:	4623      	mov	r3, r4
 800938c:	eb18 0303 	adds.w	r3, r8, r3
 8009390:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009394:	462b      	mov	r3, r5
 8009396:	eb49 0303 	adc.w	r3, r9, r3
 800939a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800939e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80093aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80093ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80093b2:	460b      	mov	r3, r1
 80093b4:	18db      	adds	r3, r3, r3
 80093b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80093b8:	4613      	mov	r3, r2
 80093ba:	eb42 0303 	adc.w	r3, r2, r3
 80093be:	657b      	str	r3, [r7, #84]	@ 0x54
 80093c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80093c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80093c8:	f7f6 ff5a 	bl	8000280 <__aeabi_uldivmod>
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	4b61      	ldr	r3, [pc, #388]	@ (8009558 <UART_SetConfig+0x2d4>)
 80093d2:	fba3 2302 	umull	r2, r3, r3, r2
 80093d6:	095b      	lsrs	r3, r3, #5
 80093d8:	011c      	lsls	r4, r3, #4
 80093da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093de:	2200      	movs	r2, #0
 80093e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80093e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80093ec:	4642      	mov	r2, r8
 80093ee:	464b      	mov	r3, r9
 80093f0:	1891      	adds	r1, r2, r2
 80093f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80093f4:	415b      	adcs	r3, r3
 80093f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80093fc:	4641      	mov	r1, r8
 80093fe:	eb12 0a01 	adds.w	sl, r2, r1
 8009402:	4649      	mov	r1, r9
 8009404:	eb43 0b01 	adc.w	fp, r3, r1
 8009408:	f04f 0200 	mov.w	r2, #0
 800940c:	f04f 0300 	mov.w	r3, #0
 8009410:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009414:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800941c:	4692      	mov	sl, r2
 800941e:	469b      	mov	fp, r3
 8009420:	4643      	mov	r3, r8
 8009422:	eb1a 0303 	adds.w	r3, sl, r3
 8009426:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800942a:	464b      	mov	r3, r9
 800942c:	eb4b 0303 	adc.w	r3, fp, r3
 8009430:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009440:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009444:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009448:	460b      	mov	r3, r1
 800944a:	18db      	adds	r3, r3, r3
 800944c:	643b      	str	r3, [r7, #64]	@ 0x40
 800944e:	4613      	mov	r3, r2
 8009450:	eb42 0303 	adc.w	r3, r2, r3
 8009454:	647b      	str	r3, [r7, #68]	@ 0x44
 8009456:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800945a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800945e:	f7f6 ff0f 	bl	8000280 <__aeabi_uldivmod>
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	4611      	mov	r1, r2
 8009468:	4b3b      	ldr	r3, [pc, #236]	@ (8009558 <UART_SetConfig+0x2d4>)
 800946a:	fba3 2301 	umull	r2, r3, r3, r1
 800946e:	095b      	lsrs	r3, r3, #5
 8009470:	2264      	movs	r2, #100	@ 0x64
 8009472:	fb02 f303 	mul.w	r3, r2, r3
 8009476:	1acb      	subs	r3, r1, r3
 8009478:	00db      	lsls	r3, r3, #3
 800947a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800947e:	4b36      	ldr	r3, [pc, #216]	@ (8009558 <UART_SetConfig+0x2d4>)
 8009480:	fba3 2302 	umull	r2, r3, r3, r2
 8009484:	095b      	lsrs	r3, r3, #5
 8009486:	005b      	lsls	r3, r3, #1
 8009488:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800948c:	441c      	add	r4, r3
 800948e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009492:	2200      	movs	r2, #0
 8009494:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009498:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800949c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80094a0:	4642      	mov	r2, r8
 80094a2:	464b      	mov	r3, r9
 80094a4:	1891      	adds	r1, r2, r2
 80094a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80094a8:	415b      	adcs	r3, r3
 80094aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80094b0:	4641      	mov	r1, r8
 80094b2:	1851      	adds	r1, r2, r1
 80094b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80094b6:	4649      	mov	r1, r9
 80094b8:	414b      	adcs	r3, r1
 80094ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80094bc:	f04f 0200 	mov.w	r2, #0
 80094c0:	f04f 0300 	mov.w	r3, #0
 80094c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80094c8:	4659      	mov	r1, fp
 80094ca:	00cb      	lsls	r3, r1, #3
 80094cc:	4651      	mov	r1, sl
 80094ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094d2:	4651      	mov	r1, sl
 80094d4:	00ca      	lsls	r2, r1, #3
 80094d6:	4610      	mov	r0, r2
 80094d8:	4619      	mov	r1, r3
 80094da:	4603      	mov	r3, r0
 80094dc:	4642      	mov	r2, r8
 80094de:	189b      	adds	r3, r3, r2
 80094e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80094e4:	464b      	mov	r3, r9
 80094e6:	460a      	mov	r2, r1
 80094e8:	eb42 0303 	adc.w	r3, r2, r3
 80094ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80094f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80094fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009500:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009504:	460b      	mov	r3, r1
 8009506:	18db      	adds	r3, r3, r3
 8009508:	62bb      	str	r3, [r7, #40]	@ 0x28
 800950a:	4613      	mov	r3, r2
 800950c:	eb42 0303 	adc.w	r3, r2, r3
 8009510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009516:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800951a:	f7f6 feb1 	bl	8000280 <__aeabi_uldivmod>
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	4b0d      	ldr	r3, [pc, #52]	@ (8009558 <UART_SetConfig+0x2d4>)
 8009524:	fba3 1302 	umull	r1, r3, r3, r2
 8009528:	095b      	lsrs	r3, r3, #5
 800952a:	2164      	movs	r1, #100	@ 0x64
 800952c:	fb01 f303 	mul.w	r3, r1, r3
 8009530:	1ad3      	subs	r3, r2, r3
 8009532:	00db      	lsls	r3, r3, #3
 8009534:	3332      	adds	r3, #50	@ 0x32
 8009536:	4a08      	ldr	r2, [pc, #32]	@ (8009558 <UART_SetConfig+0x2d4>)
 8009538:	fba2 2303 	umull	r2, r3, r2, r3
 800953c:	095b      	lsrs	r3, r3, #5
 800953e:	f003 0207 	and.w	r2, r3, #7
 8009542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4422      	add	r2, r4
 800954a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800954c:	e106      	b.n	800975c <UART_SetConfig+0x4d8>
 800954e:	bf00      	nop
 8009550:	40011000 	.word	0x40011000
 8009554:	40011400 	.word	0x40011400
 8009558:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800955c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009560:	2200      	movs	r2, #0
 8009562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009566:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800956a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800956e:	4642      	mov	r2, r8
 8009570:	464b      	mov	r3, r9
 8009572:	1891      	adds	r1, r2, r2
 8009574:	6239      	str	r1, [r7, #32]
 8009576:	415b      	adcs	r3, r3
 8009578:	627b      	str	r3, [r7, #36]	@ 0x24
 800957a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800957e:	4641      	mov	r1, r8
 8009580:	1854      	adds	r4, r2, r1
 8009582:	4649      	mov	r1, r9
 8009584:	eb43 0501 	adc.w	r5, r3, r1
 8009588:	f04f 0200 	mov.w	r2, #0
 800958c:	f04f 0300 	mov.w	r3, #0
 8009590:	00eb      	lsls	r3, r5, #3
 8009592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009596:	00e2      	lsls	r2, r4, #3
 8009598:	4614      	mov	r4, r2
 800959a:	461d      	mov	r5, r3
 800959c:	4643      	mov	r3, r8
 800959e:	18e3      	adds	r3, r4, r3
 80095a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80095a4:	464b      	mov	r3, r9
 80095a6:	eb45 0303 	adc.w	r3, r5, r3
 80095aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80095ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80095ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80095be:	f04f 0200 	mov.w	r2, #0
 80095c2:	f04f 0300 	mov.w	r3, #0
 80095c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80095ca:	4629      	mov	r1, r5
 80095cc:	008b      	lsls	r3, r1, #2
 80095ce:	4621      	mov	r1, r4
 80095d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095d4:	4621      	mov	r1, r4
 80095d6:	008a      	lsls	r2, r1, #2
 80095d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80095dc:	f7f6 fe50 	bl	8000280 <__aeabi_uldivmod>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4b60      	ldr	r3, [pc, #384]	@ (8009768 <UART_SetConfig+0x4e4>)
 80095e6:	fba3 2302 	umull	r2, r3, r3, r2
 80095ea:	095b      	lsrs	r3, r3, #5
 80095ec:	011c      	lsls	r4, r3, #4
 80095ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095f2:	2200      	movs	r2, #0
 80095f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80095f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80095fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009600:	4642      	mov	r2, r8
 8009602:	464b      	mov	r3, r9
 8009604:	1891      	adds	r1, r2, r2
 8009606:	61b9      	str	r1, [r7, #24]
 8009608:	415b      	adcs	r3, r3
 800960a:	61fb      	str	r3, [r7, #28]
 800960c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009610:	4641      	mov	r1, r8
 8009612:	1851      	adds	r1, r2, r1
 8009614:	6139      	str	r1, [r7, #16]
 8009616:	4649      	mov	r1, r9
 8009618:	414b      	adcs	r3, r1
 800961a:	617b      	str	r3, [r7, #20]
 800961c:	f04f 0200 	mov.w	r2, #0
 8009620:	f04f 0300 	mov.w	r3, #0
 8009624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009628:	4659      	mov	r1, fp
 800962a:	00cb      	lsls	r3, r1, #3
 800962c:	4651      	mov	r1, sl
 800962e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009632:	4651      	mov	r1, sl
 8009634:	00ca      	lsls	r2, r1, #3
 8009636:	4610      	mov	r0, r2
 8009638:	4619      	mov	r1, r3
 800963a:	4603      	mov	r3, r0
 800963c:	4642      	mov	r2, r8
 800963e:	189b      	adds	r3, r3, r2
 8009640:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009644:	464b      	mov	r3, r9
 8009646:	460a      	mov	r2, r1
 8009648:	eb42 0303 	adc.w	r3, r2, r3
 800964c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	67bb      	str	r3, [r7, #120]	@ 0x78
 800965a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800965c:	f04f 0200 	mov.w	r2, #0
 8009660:	f04f 0300 	mov.w	r3, #0
 8009664:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009668:	4649      	mov	r1, r9
 800966a:	008b      	lsls	r3, r1, #2
 800966c:	4641      	mov	r1, r8
 800966e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009672:	4641      	mov	r1, r8
 8009674:	008a      	lsls	r2, r1, #2
 8009676:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800967a:	f7f6 fe01 	bl	8000280 <__aeabi_uldivmod>
 800967e:	4602      	mov	r2, r0
 8009680:	460b      	mov	r3, r1
 8009682:	4611      	mov	r1, r2
 8009684:	4b38      	ldr	r3, [pc, #224]	@ (8009768 <UART_SetConfig+0x4e4>)
 8009686:	fba3 2301 	umull	r2, r3, r3, r1
 800968a:	095b      	lsrs	r3, r3, #5
 800968c:	2264      	movs	r2, #100	@ 0x64
 800968e:	fb02 f303 	mul.w	r3, r2, r3
 8009692:	1acb      	subs	r3, r1, r3
 8009694:	011b      	lsls	r3, r3, #4
 8009696:	3332      	adds	r3, #50	@ 0x32
 8009698:	4a33      	ldr	r2, [pc, #204]	@ (8009768 <UART_SetConfig+0x4e4>)
 800969a:	fba2 2303 	umull	r2, r3, r2, r3
 800969e:	095b      	lsrs	r3, r3, #5
 80096a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80096a4:	441c      	add	r4, r3
 80096a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096aa:	2200      	movs	r2, #0
 80096ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80096ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80096b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80096b4:	4642      	mov	r2, r8
 80096b6:	464b      	mov	r3, r9
 80096b8:	1891      	adds	r1, r2, r2
 80096ba:	60b9      	str	r1, [r7, #8]
 80096bc:	415b      	adcs	r3, r3
 80096be:	60fb      	str	r3, [r7, #12]
 80096c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096c4:	4641      	mov	r1, r8
 80096c6:	1851      	adds	r1, r2, r1
 80096c8:	6039      	str	r1, [r7, #0]
 80096ca:	4649      	mov	r1, r9
 80096cc:	414b      	adcs	r3, r1
 80096ce:	607b      	str	r3, [r7, #4]
 80096d0:	f04f 0200 	mov.w	r2, #0
 80096d4:	f04f 0300 	mov.w	r3, #0
 80096d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80096dc:	4659      	mov	r1, fp
 80096de:	00cb      	lsls	r3, r1, #3
 80096e0:	4651      	mov	r1, sl
 80096e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096e6:	4651      	mov	r1, sl
 80096e8:	00ca      	lsls	r2, r1, #3
 80096ea:	4610      	mov	r0, r2
 80096ec:	4619      	mov	r1, r3
 80096ee:	4603      	mov	r3, r0
 80096f0:	4642      	mov	r2, r8
 80096f2:	189b      	adds	r3, r3, r2
 80096f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80096f6:	464b      	mov	r3, r9
 80096f8:	460a      	mov	r2, r1
 80096fa:	eb42 0303 	adc.w	r3, r2, r3
 80096fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	663b      	str	r3, [r7, #96]	@ 0x60
 800970a:	667a      	str	r2, [r7, #100]	@ 0x64
 800970c:	f04f 0200 	mov.w	r2, #0
 8009710:	f04f 0300 	mov.w	r3, #0
 8009714:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009718:	4649      	mov	r1, r9
 800971a:	008b      	lsls	r3, r1, #2
 800971c:	4641      	mov	r1, r8
 800971e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009722:	4641      	mov	r1, r8
 8009724:	008a      	lsls	r2, r1, #2
 8009726:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800972a:	f7f6 fda9 	bl	8000280 <__aeabi_uldivmod>
 800972e:	4602      	mov	r2, r0
 8009730:	460b      	mov	r3, r1
 8009732:	4b0d      	ldr	r3, [pc, #52]	@ (8009768 <UART_SetConfig+0x4e4>)
 8009734:	fba3 1302 	umull	r1, r3, r3, r2
 8009738:	095b      	lsrs	r3, r3, #5
 800973a:	2164      	movs	r1, #100	@ 0x64
 800973c:	fb01 f303 	mul.w	r3, r1, r3
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	011b      	lsls	r3, r3, #4
 8009744:	3332      	adds	r3, #50	@ 0x32
 8009746:	4a08      	ldr	r2, [pc, #32]	@ (8009768 <UART_SetConfig+0x4e4>)
 8009748:	fba2 2303 	umull	r2, r3, r2, r3
 800974c:	095b      	lsrs	r3, r3, #5
 800974e:	f003 020f 	and.w	r2, r3, #15
 8009752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4422      	add	r2, r4
 800975a:	609a      	str	r2, [r3, #8]
}
 800975c:	bf00      	nop
 800975e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009762:	46bd      	mov	sp, r7
 8009764:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009768:	51eb851f 	.word	0x51eb851f

0800976c <__NVIC_SetPriority>:
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	4603      	mov	r3, r0
 8009774:	6039      	str	r1, [r7, #0]
 8009776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800977c:	2b00      	cmp	r3, #0
 800977e:	db0a      	blt.n	8009796 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	b2da      	uxtb	r2, r3
 8009784:	490c      	ldr	r1, [pc, #48]	@ (80097b8 <__NVIC_SetPriority+0x4c>)
 8009786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800978a:	0112      	lsls	r2, r2, #4
 800978c:	b2d2      	uxtb	r2, r2
 800978e:	440b      	add	r3, r1
 8009790:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009794:	e00a      	b.n	80097ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	b2da      	uxtb	r2, r3
 800979a:	4908      	ldr	r1, [pc, #32]	@ (80097bc <__NVIC_SetPriority+0x50>)
 800979c:	79fb      	ldrb	r3, [r7, #7]
 800979e:	f003 030f 	and.w	r3, r3, #15
 80097a2:	3b04      	subs	r3, #4
 80097a4:	0112      	lsls	r2, r2, #4
 80097a6:	b2d2      	uxtb	r2, r2
 80097a8:	440b      	add	r3, r1
 80097aa:	761a      	strb	r2, [r3, #24]
}
 80097ac:	bf00      	nop
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr
 80097b8:	e000e100 	.word	0xe000e100
 80097bc:	e000ed00 	.word	0xe000ed00

080097c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80097c4:	2100      	movs	r1, #0
 80097c6:	f06f 0004 	mvn.w	r0, #4
 80097ca:	f7ff ffcf 	bl	800976c <__NVIC_SetPriority>
#endif
}
 80097ce:	bf00      	nop
 80097d0:	bd80      	pop	{r7, pc}
	...

080097d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097da:	f3ef 8305 	mrs	r3, IPSR
 80097de:	603b      	str	r3, [r7, #0]
  return(result);
 80097e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d003      	beq.n	80097ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80097e6:	f06f 0305 	mvn.w	r3, #5
 80097ea:	607b      	str	r3, [r7, #4]
 80097ec:	e00c      	b.n	8009808 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80097ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009818 <osKernelInitialize+0x44>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d105      	bne.n	8009802 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80097f6:	4b08      	ldr	r3, [pc, #32]	@ (8009818 <osKernelInitialize+0x44>)
 80097f8:	2201      	movs	r2, #1
 80097fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	607b      	str	r3, [r7, #4]
 8009800:	e002      	b.n	8009808 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009802:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009806:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009808:	687b      	ldr	r3, [r7, #4]
}
 800980a:	4618      	mov	r0, r3
 800980c:	370c      	adds	r7, #12
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	20000c58 	.word	0x20000c58

0800981c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009822:	f3ef 8305 	mrs	r3, IPSR
 8009826:	603b      	str	r3, [r7, #0]
  return(result);
 8009828:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800982a:	2b00      	cmp	r3, #0
 800982c:	d003      	beq.n	8009836 <osKernelStart+0x1a>
    stat = osErrorISR;
 800982e:	f06f 0305 	mvn.w	r3, #5
 8009832:	607b      	str	r3, [r7, #4]
 8009834:	e010      	b.n	8009858 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009836:	4b0b      	ldr	r3, [pc, #44]	@ (8009864 <osKernelStart+0x48>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d109      	bne.n	8009852 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800983e:	f7ff ffbf 	bl	80097c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009842:	4b08      	ldr	r3, [pc, #32]	@ (8009864 <osKernelStart+0x48>)
 8009844:	2202      	movs	r2, #2
 8009846:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009848:	f001 f892 	bl	800a970 <vTaskStartScheduler>
      stat = osOK;
 800984c:	2300      	movs	r3, #0
 800984e:	607b      	str	r3, [r7, #4]
 8009850:	e002      	b.n	8009858 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009852:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009856:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009858:	687b      	ldr	r3, [r7, #4]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	20000c58 	.word	0x20000c58

08009868 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009868:	b580      	push	{r7, lr}
 800986a:	b08e      	sub	sp, #56	@ 0x38
 800986c:	af04      	add	r7, sp, #16
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009874:	2300      	movs	r3, #0
 8009876:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009878:	f3ef 8305 	mrs	r3, IPSR
 800987c:	617b      	str	r3, [r7, #20]
  return(result);
 800987e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009880:	2b00      	cmp	r3, #0
 8009882:	d17e      	bne.n	8009982 <osThreadNew+0x11a>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d07b      	beq.n	8009982 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800988a:	2380      	movs	r3, #128	@ 0x80
 800988c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800988e:	2318      	movs	r3, #24
 8009890:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009892:	2300      	movs	r3, #0
 8009894:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009896:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800989a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d045      	beq.n	800992e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d002      	beq.n	80098b0 <osThreadNew+0x48>
        name = attr->name;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d002      	beq.n	80098be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d008      	beq.n	80098d6 <osThreadNew+0x6e>
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	2b38      	cmp	r3, #56	@ 0x38
 80098c8:	d805      	bhi.n	80098d6 <osThreadNew+0x6e>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	f003 0301 	and.w	r3, r3, #1
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d001      	beq.n	80098da <osThreadNew+0x72>
        return (NULL);
 80098d6:	2300      	movs	r3, #0
 80098d8:	e054      	b.n	8009984 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	695b      	ldr	r3, [r3, #20]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d003      	beq.n	80098ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	089b      	lsrs	r3, r3, #2
 80098e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00e      	beq.n	8009910 <osThreadNew+0xa8>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	2ba7      	cmp	r3, #167	@ 0xa7
 80098f8:	d90a      	bls.n	8009910 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d006      	beq.n	8009910 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d002      	beq.n	8009910 <osThreadNew+0xa8>
        mem = 1;
 800990a:	2301      	movs	r3, #1
 800990c:	61bb      	str	r3, [r7, #24]
 800990e:	e010      	b.n	8009932 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10c      	bne.n	8009932 <osThreadNew+0xca>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d108      	bne.n	8009932 <osThreadNew+0xca>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d104      	bne.n	8009932 <osThreadNew+0xca>
          mem = 0;
 8009928:	2300      	movs	r3, #0
 800992a:	61bb      	str	r3, [r7, #24]
 800992c:	e001      	b.n	8009932 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d110      	bne.n	800995a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009940:	9202      	str	r2, [sp, #8]
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	6a3a      	ldr	r2, [r7, #32]
 800994c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f000 fe1a 	bl	800a588 <xTaskCreateStatic>
 8009954:	4603      	mov	r3, r0
 8009956:	613b      	str	r3, [r7, #16]
 8009958:	e013      	b.n	8009982 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d110      	bne.n	8009982 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	b29a      	uxth	r2, r3
 8009964:	f107 0310 	add.w	r3, r7, #16
 8009968:	9301      	str	r3, [sp, #4]
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 fe68 	bl	800a648 <xTaskCreate>
 8009978:	4603      	mov	r3, r0
 800997a:	2b01      	cmp	r3, #1
 800997c:	d001      	beq.n	8009982 <osThreadNew+0x11a>
            hTask = NULL;
 800997e:	2300      	movs	r3, #0
 8009980:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009982:	693b      	ldr	r3, [r7, #16]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3728      	adds	r7, #40	@ 0x28
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009994:	f3ef 8305 	mrs	r3, IPSR
 8009998:	60bb      	str	r3, [r7, #8]
  return(result);
 800999a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800999c:	2b00      	cmp	r3, #0
 800999e:	d003      	beq.n	80099a8 <osDelay+0x1c>
    stat = osErrorISR;
 80099a0:	f06f 0305 	mvn.w	r3, #5
 80099a4:	60fb      	str	r3, [r7, #12]
 80099a6:	e007      	b.n	80099b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d002      	beq.n	80099b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 ffa6 	bl	800a904 <vTaskDelay>
    }
  }

  return (stat);
 80099b8:	68fb      	ldr	r3, [r7, #12]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
	...

080099c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4a07      	ldr	r2, [pc, #28]	@ (80099f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80099d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	4a06      	ldr	r2, [pc, #24]	@ (80099f4 <vApplicationGetIdleTaskMemory+0x30>)
 80099da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2280      	movs	r2, #128	@ 0x80
 80099e0:	601a      	str	r2, [r3, #0]
}
 80099e2:	bf00      	nop
 80099e4:	3714      	adds	r7, #20
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	20000c5c 	.word	0x20000c5c
 80099f4:	20000d04 	.word	0x20000d04

080099f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4a07      	ldr	r2, [pc, #28]	@ (8009a24 <vApplicationGetTimerTaskMemory+0x2c>)
 8009a08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	4a06      	ldr	r2, [pc, #24]	@ (8009a28 <vApplicationGetTimerTaskMemory+0x30>)
 8009a0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a16:	601a      	str	r2, [r3, #0]
}
 8009a18:	bf00      	nop
 8009a1a:	3714      	adds	r7, #20
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	20000f04 	.word	0x20000f04
 8009a28:	20000fac 	.word	0x20000fac

08009a2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f103 0208 	add.w	r2, r3, #8
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f103 0208 	add.w	r2, r3, #8
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f103 0208 	add.w	r2, r3, #8
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a7a:	bf00      	nop
 8009a7c:	370c      	adds	r7, #12
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr

08009a86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a86:	b480      	push	{r7}
 8009a88:	b085      	sub	sp, #20
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
 8009a8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	689a      	ldr	r2, [r3, #8]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	683a      	ldr	r2, [r7, #0]
 8009aaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	1c5a      	adds	r2, r3, #1
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	601a      	str	r2, [r3, #0]
}
 8009ac2:	bf00      	nop
 8009ac4:	3714      	adds	r7, #20
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ace:	b480      	push	{r7}
 8009ad0:	b085      	sub	sp, #20
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
 8009ad6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ae4:	d103      	bne.n	8009aee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	60fb      	str	r3, [r7, #12]
 8009aec:	e00c      	b.n	8009b08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	3308      	adds	r3, #8
 8009af2:	60fb      	str	r3, [r7, #12]
 8009af4:	e002      	b.n	8009afc <vListInsert+0x2e>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d2f6      	bcs.n	8009af6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	683a      	ldr	r2, [r7, #0]
 8009b22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	1c5a      	adds	r2, r3, #1
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	601a      	str	r2, [r3, #0]
}
 8009b34:	bf00      	nop
 8009b36:	3714      	adds	r7, #20
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	6892      	ldr	r2, [r2, #8]
 8009b56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	6852      	ldr	r2, [r2, #4]
 8009b60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d103      	bne.n	8009b74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	689a      	ldr	r2, [r3, #8]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	1e5a      	subs	r2, r3, #1
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3714      	adds	r7, #20
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10b      	bne.n	8009bc0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bac:	f383 8811 	msr	BASEPRI, r3
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009bba:	bf00      	nop
 8009bbc:	bf00      	nop
 8009bbe:	e7fd      	b.n	8009bbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009bc0:	f002 fa82 	bl	800c0c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bcc:	68f9      	ldr	r1, [r7, #12]
 8009bce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009bd0:	fb01 f303 	mul.w	r3, r1, r3
 8009bd4:	441a      	add	r2, r3
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	68f9      	ldr	r1, [r7, #12]
 8009bf4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009bf6:	fb01 f303 	mul.w	r3, r1, r3
 8009bfa:	441a      	add	r2, r3
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	22ff      	movs	r2, #255	@ 0xff
 8009c04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	22ff      	movs	r2, #255	@ 0xff
 8009c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d114      	bne.n	8009c40 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d01a      	beq.n	8009c54 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	3310      	adds	r3, #16
 8009c22:	4618      	mov	r0, r3
 8009c24:	f001 fa3c 	bl	800b0a0 <xTaskRemoveFromEventList>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d012      	beq.n	8009c54 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c64 <xQueueGenericReset+0xd0>)
 8009c30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c34:	601a      	str	r2, [r3, #0]
 8009c36:	f3bf 8f4f 	dsb	sy
 8009c3a:	f3bf 8f6f 	isb	sy
 8009c3e:	e009      	b.n	8009c54 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	3310      	adds	r3, #16
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7ff fef1 	bl	8009a2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	3324      	adds	r3, #36	@ 0x24
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7ff feec 	bl	8009a2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c54:	f002 fa6a 	bl	800c12c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c58:	2301      	movs	r3, #1
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	e000ed04 	.word	0xe000ed04

08009c68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b08e      	sub	sp, #56	@ 0x38
 8009c6c:	af02      	add	r7, sp, #8
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
 8009c74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10b      	bne.n	8009c94 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009c8e:	bf00      	nop
 8009c90:	bf00      	nop
 8009c92:	e7fd      	b.n	8009c90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d10b      	bne.n	8009cb2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c9e:	f383 8811 	msr	BASEPRI, r3
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009cac:	bf00      	nop
 8009cae:	bf00      	nop
 8009cb0:	e7fd      	b.n	8009cae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <xQueueGenericCreateStatic+0x56>
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d001      	beq.n	8009cc2 <xQueueGenericCreateStatic+0x5a>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e000      	b.n	8009cc4 <xQueueGenericCreateStatic+0x5c>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d10b      	bne.n	8009ce0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ccc:	f383 8811 	msr	BASEPRI, r3
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	623b      	str	r3, [r7, #32]
}
 8009cda:	bf00      	nop
 8009cdc:	bf00      	nop
 8009cde:	e7fd      	b.n	8009cdc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d102      	bne.n	8009cec <xQueueGenericCreateStatic+0x84>
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d101      	bne.n	8009cf0 <xQueueGenericCreateStatic+0x88>
 8009cec:	2301      	movs	r3, #1
 8009cee:	e000      	b.n	8009cf2 <xQueueGenericCreateStatic+0x8a>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10b      	bne.n	8009d0e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cfa:	f383 8811 	msr	BASEPRI, r3
 8009cfe:	f3bf 8f6f 	isb	sy
 8009d02:	f3bf 8f4f 	dsb	sy
 8009d06:	61fb      	str	r3, [r7, #28]
}
 8009d08:	bf00      	nop
 8009d0a:	bf00      	nop
 8009d0c:	e7fd      	b.n	8009d0a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d0e:	2350      	movs	r3, #80	@ 0x50
 8009d10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2b50      	cmp	r3, #80	@ 0x50
 8009d16:	d00b      	beq.n	8009d30 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	61bb      	str	r3, [r7, #24]
}
 8009d2a:	bf00      	nop
 8009d2c:	bf00      	nop
 8009d2e:	e7fd      	b.n	8009d2c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d30:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00d      	beq.n	8009d58 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d44:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	68b9      	ldr	r1, [r7, #8]
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f000 f805 	bl	8009d62 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3730      	adds	r7, #48	@ 0x30
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b084      	sub	sp, #16
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	60f8      	str	r0, [r7, #12]
 8009d6a:	60b9      	str	r1, [r7, #8]
 8009d6c:	607a      	str	r2, [r7, #4]
 8009d6e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d103      	bne.n	8009d7e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	69ba      	ldr	r2, [r7, #24]
 8009d7a:	601a      	str	r2, [r3, #0]
 8009d7c:	e002      	b.n	8009d84 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d90:	2101      	movs	r1, #1
 8009d92:	69b8      	ldr	r0, [r7, #24]
 8009d94:	f7ff fefe 	bl	8009b94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	78fa      	ldrb	r2, [r7, #3]
 8009d9c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009da0:	bf00      	nop
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b08e      	sub	sp, #56	@ 0x38
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	607a      	str	r2, [r7, #4]
 8009db4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009db6:	2300      	movs	r3, #0
 8009db8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10b      	bne.n	8009ddc <xQueueGenericSend+0x34>
	__asm volatile
 8009dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009dd6:	bf00      	nop
 8009dd8:	bf00      	nop
 8009dda:	e7fd      	b.n	8009dd8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d103      	bne.n	8009dea <xQueueGenericSend+0x42>
 8009de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d101      	bne.n	8009dee <xQueueGenericSend+0x46>
 8009dea:	2301      	movs	r3, #1
 8009dec:	e000      	b.n	8009df0 <xQueueGenericSend+0x48>
 8009dee:	2300      	movs	r3, #0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10b      	bne.n	8009e0c <xQueueGenericSend+0x64>
	__asm volatile
 8009df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df8:	f383 8811 	msr	BASEPRI, r3
 8009dfc:	f3bf 8f6f 	isb	sy
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e06:	bf00      	nop
 8009e08:	bf00      	nop
 8009e0a:	e7fd      	b.n	8009e08 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d103      	bne.n	8009e1a <xQueueGenericSend+0x72>
 8009e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d101      	bne.n	8009e1e <xQueueGenericSend+0x76>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e000      	b.n	8009e20 <xQueueGenericSend+0x78>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10b      	bne.n	8009e3c <xQueueGenericSend+0x94>
	__asm volatile
 8009e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	623b      	str	r3, [r7, #32]
}
 8009e36:	bf00      	nop
 8009e38:	bf00      	nop
 8009e3a:	e7fd      	b.n	8009e38 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e3c:	f001 faf6 	bl	800b42c <xTaskGetSchedulerState>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d102      	bne.n	8009e4c <xQueueGenericSend+0xa4>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d101      	bne.n	8009e50 <xQueueGenericSend+0xa8>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e000      	b.n	8009e52 <xQueueGenericSend+0xaa>
 8009e50:	2300      	movs	r3, #0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d10b      	bne.n	8009e6e <xQueueGenericSend+0xc6>
	__asm volatile
 8009e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e5a:	f383 8811 	msr	BASEPRI, r3
 8009e5e:	f3bf 8f6f 	isb	sy
 8009e62:	f3bf 8f4f 	dsb	sy
 8009e66:	61fb      	str	r3, [r7, #28]
}
 8009e68:	bf00      	nop
 8009e6a:	bf00      	nop
 8009e6c:	e7fd      	b.n	8009e6a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e6e:	f002 f92b 	bl	800c0c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d302      	bcc.n	8009e84 <xQueueGenericSend+0xdc>
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d129      	bne.n	8009ed8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e84:	683a      	ldr	r2, [r7, #0]
 8009e86:	68b9      	ldr	r1, [r7, #8]
 8009e88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e8a:	f000 fa0f 	bl	800a2ac <prvCopyDataToQueue>
 8009e8e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d010      	beq.n	8009eba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9a:	3324      	adds	r3, #36	@ 0x24
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f001 f8ff 	bl	800b0a0 <xTaskRemoveFromEventList>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d013      	beq.n	8009ed0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ea8:	4b3f      	ldr	r3, [pc, #252]	@ (8009fa8 <xQueueGenericSend+0x200>)
 8009eaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009eae:	601a      	str	r2, [r3, #0]
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	e00a      	b.n	8009ed0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d007      	beq.n	8009ed0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ec0:	4b39      	ldr	r3, [pc, #228]	@ (8009fa8 <xQueueGenericSend+0x200>)
 8009ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ec6:	601a      	str	r2, [r3, #0]
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ed0:	f002 f92c 	bl	800c12c <vPortExitCritical>
				return pdPASS;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e063      	b.n	8009fa0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d103      	bne.n	8009ee6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ede:	f002 f925 	bl	800c12c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	e05c      	b.n	8009fa0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d106      	bne.n	8009efa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009eec:	f107 0314 	add.w	r3, r7, #20
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f001 f939 	bl	800b168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009efa:	f002 f917 	bl	800c12c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009efe:	f000 fda7 	bl	800aa50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f02:	f002 f8e1 	bl	800c0c8 <vPortEnterCritical>
 8009f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f0c:	b25b      	sxtb	r3, r3
 8009f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f12:	d103      	bne.n	8009f1c <xQueueGenericSend+0x174>
 8009f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f22:	b25b      	sxtb	r3, r3
 8009f24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f28:	d103      	bne.n	8009f32 <xQueueGenericSend+0x18a>
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f32:	f002 f8fb 	bl	800c12c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f36:	1d3a      	adds	r2, r7, #4
 8009f38:	f107 0314 	add.w	r3, r7, #20
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f001 f928 	bl	800b194 <xTaskCheckForTimeOut>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d124      	bne.n	8009f94 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f4c:	f000 faa6 	bl	800a49c <prvIsQueueFull>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d018      	beq.n	8009f88 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f58:	3310      	adds	r3, #16
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	4611      	mov	r1, r2
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f001 f84c 	bl	800affc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f66:	f000 fa31 	bl	800a3cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f6a:	f000 fd7f 	bl	800aa6c <xTaskResumeAll>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f47f af7c 	bne.w	8009e6e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009f76:	4b0c      	ldr	r3, [pc, #48]	@ (8009fa8 <xQueueGenericSend+0x200>)
 8009f78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f7c:	601a      	str	r2, [r3, #0]
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	e772      	b.n	8009e6e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f8a:	f000 fa1f 	bl	800a3cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f8e:	f000 fd6d 	bl	800aa6c <xTaskResumeAll>
 8009f92:	e76c      	b.n	8009e6e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f96:	f000 fa19 	bl	800a3cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f9a:	f000 fd67 	bl	800aa6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3738      	adds	r7, #56	@ 0x38
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	e000ed04 	.word	0xe000ed04

08009fac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b090      	sub	sp, #64	@ 0x40
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
 8009fb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10b      	bne.n	8009fdc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009fd6:	bf00      	nop
 8009fd8:	bf00      	nop
 8009fda:	e7fd      	b.n	8009fd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d103      	bne.n	8009fea <xQueueGenericSendFromISR+0x3e>
 8009fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d101      	bne.n	8009fee <xQueueGenericSendFromISR+0x42>
 8009fea:	2301      	movs	r3, #1
 8009fec:	e000      	b.n	8009ff0 <xQueueGenericSendFromISR+0x44>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d10b      	bne.n	800a00c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff8:	f383 8811 	msr	BASEPRI, r3
 8009ffc:	f3bf 8f6f 	isb	sy
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a006:	bf00      	nop
 800a008:	bf00      	nop
 800a00a:	e7fd      	b.n	800a008 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d103      	bne.n	800a01a <xQueueGenericSendFromISR+0x6e>
 800a012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a016:	2b01      	cmp	r3, #1
 800a018:	d101      	bne.n	800a01e <xQueueGenericSendFromISR+0x72>
 800a01a:	2301      	movs	r3, #1
 800a01c:	e000      	b.n	800a020 <xQueueGenericSendFromISR+0x74>
 800a01e:	2300      	movs	r3, #0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10b      	bne.n	800a03c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	623b      	str	r3, [r7, #32]
}
 800a036:	bf00      	nop
 800a038:	bf00      	nop
 800a03a:	e7fd      	b.n	800a038 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a03c:	f002 f924 	bl	800c288 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a040:	f3ef 8211 	mrs	r2, BASEPRI
 800a044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	61fa      	str	r2, [r7, #28]
 800a056:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a058:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a05a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a05c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a05e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a064:	429a      	cmp	r2, r3
 800a066:	d302      	bcc.n	800a06e <xQueueGenericSendFromISR+0xc2>
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d12f      	bne.n	800a0ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a070:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a074:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a07c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	68b9      	ldr	r1, [r7, #8]
 800a082:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a084:	f000 f912 	bl	800a2ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a088:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a08c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a090:	d112      	bne.n	800a0b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a096:	2b00      	cmp	r3, #0
 800a098:	d016      	beq.n	800a0c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09c:	3324      	adds	r3, #36	@ 0x24
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 fffe 	bl	800b0a0 <xTaskRemoveFromEventList>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00e      	beq.n	800a0c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00b      	beq.n	800a0c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	e007      	b.n	800a0c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a0b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a0bc:	3301      	adds	r3, #1
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	b25a      	sxtb	r2, r3
 800a0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a0cc:	e001      	b.n	800a0d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a0dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3740      	adds	r7, #64	@ 0x40
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b08c      	sub	sp, #48	@ 0x30
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10b      	bne.n	800a11a <xQueueReceive+0x32>
	__asm volatile
 800a102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	623b      	str	r3, [r7, #32]
}
 800a114:	bf00      	nop
 800a116:	bf00      	nop
 800a118:	e7fd      	b.n	800a116 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d103      	bne.n	800a128 <xQueueReceive+0x40>
 800a120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <xQueueReceive+0x44>
 800a128:	2301      	movs	r3, #1
 800a12a:	e000      	b.n	800a12e <xQueueReceive+0x46>
 800a12c:	2300      	movs	r3, #0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10b      	bne.n	800a14a <xQueueReceive+0x62>
	__asm volatile
 800a132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a136:	f383 8811 	msr	BASEPRI, r3
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	61fb      	str	r3, [r7, #28]
}
 800a144:	bf00      	nop
 800a146:	bf00      	nop
 800a148:	e7fd      	b.n	800a146 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a14a:	f001 f96f 	bl	800b42c <xTaskGetSchedulerState>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d102      	bne.n	800a15a <xQueueReceive+0x72>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <xQueueReceive+0x76>
 800a15a:	2301      	movs	r3, #1
 800a15c:	e000      	b.n	800a160 <xQueueReceive+0x78>
 800a15e:	2300      	movs	r3, #0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10b      	bne.n	800a17c <xQueueReceive+0x94>
	__asm volatile
 800a164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	61bb      	str	r3, [r7, #24]
}
 800a176:	bf00      	nop
 800a178:	bf00      	nop
 800a17a:	e7fd      	b.n	800a178 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a17c:	f001 ffa4 	bl	800c0c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a184:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d01f      	beq.n	800a1cc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a18c:	68b9      	ldr	r1, [r7, #8]
 800a18e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a190:	f000 f8f6 	bl	800a380 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a196:	1e5a      	subs	r2, r3, #1
 800a198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d00f      	beq.n	800a1c4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a6:	3310      	adds	r3, #16
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f000 ff79 	bl	800b0a0 <xTaskRemoveFromEventList>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d007      	beq.n	800a1c4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a1b4:	4b3c      	ldr	r3, [pc, #240]	@ (800a2a8 <xQueueReceive+0x1c0>)
 800a1b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1ba:	601a      	str	r2, [r3, #0]
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a1c4:	f001 ffb2 	bl	800c12c <vPortExitCritical>
				return pdPASS;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e069      	b.n	800a2a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d103      	bne.n	800a1da <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1d2:	f001 ffab 	bl	800c12c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	e062      	b.n	800a2a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d106      	bne.n	800a1ee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1e0:	f107 0310 	add.w	r3, r7, #16
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f000 ffbf 	bl	800b168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1ee:	f001 ff9d 	bl	800c12c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1f2:	f000 fc2d 	bl	800aa50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1f6:	f001 ff67 	bl	800c0c8 <vPortEnterCritical>
 800a1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a200:	b25b      	sxtb	r3, r3
 800a202:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a206:	d103      	bne.n	800a210 <xQueueReceive+0x128>
 800a208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a20a:	2200      	movs	r2, #0
 800a20c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a212:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a216:	b25b      	sxtb	r3, r3
 800a218:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a21c:	d103      	bne.n	800a226 <xQueueReceive+0x13e>
 800a21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a220:	2200      	movs	r2, #0
 800a222:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a226:	f001 ff81 	bl	800c12c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a22a:	1d3a      	adds	r2, r7, #4
 800a22c:	f107 0310 	add.w	r3, r7, #16
 800a230:	4611      	mov	r1, r2
 800a232:	4618      	mov	r0, r3
 800a234:	f000 ffae 	bl	800b194 <xTaskCheckForTimeOut>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d123      	bne.n	800a286 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a23e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a240:	f000 f916 	bl	800a470 <prvIsQueueEmpty>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d017      	beq.n	800a27a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24c:	3324      	adds	r3, #36	@ 0x24
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	4611      	mov	r1, r2
 800a252:	4618      	mov	r0, r3
 800a254:	f000 fed2 	bl	800affc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a25a:	f000 f8b7 	bl	800a3cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a25e:	f000 fc05 	bl	800aa6c <xTaskResumeAll>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d189      	bne.n	800a17c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a268:	4b0f      	ldr	r3, [pc, #60]	@ (800a2a8 <xQueueReceive+0x1c0>)
 800a26a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a26e:	601a      	str	r2, [r3, #0]
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	e780      	b.n	800a17c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a27a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a27c:	f000 f8a6 	bl	800a3cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a280:	f000 fbf4 	bl	800aa6c <xTaskResumeAll>
 800a284:	e77a      	b.n	800a17c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a286:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a288:	f000 f8a0 	bl	800a3cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a28c:	f000 fbee 	bl	800aa6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a290:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a292:	f000 f8ed 	bl	800a470 <prvIsQueueEmpty>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f43f af6f 	beq.w	800a17c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a29e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3730      	adds	r7, #48	@ 0x30
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	e000ed04 	.word	0xe000ed04

0800a2ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10d      	bne.n	800a2e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d14d      	bne.n	800a36e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f001 f8c6 	bl	800b468 <xTaskPriorityDisinherit>
 800a2dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	609a      	str	r2, [r3, #8]
 800a2e4:	e043      	b.n	800a36e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d119      	bne.n	800a320 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6858      	ldr	r0, [r3, #4]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	68b9      	ldr	r1, [r7, #8]
 800a2f8:	f002 faa0 	bl	800c83c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	685a      	ldr	r2, [r3, #4]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a304:	441a      	add	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	429a      	cmp	r2, r3
 800a314:	d32b      	bcc.n	800a36e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	605a      	str	r2, [r3, #4]
 800a31e:	e026      	b.n	800a36e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	68d8      	ldr	r0, [r3, #12]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a328:	461a      	mov	r2, r3
 800a32a:	68b9      	ldr	r1, [r7, #8]
 800a32c:	f002 fa86 	bl	800c83c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	68da      	ldr	r2, [r3, #12]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a338:	425b      	negs	r3, r3
 800a33a:	441a      	add	r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	68da      	ldr	r2, [r3, #12]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d207      	bcs.n	800a35c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	689a      	ldr	r2, [r3, #8]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a354:	425b      	negs	r3, r3
 800a356:	441a      	add	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d105      	bne.n	800a36e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d002      	beq.n	800a36e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	1c5a      	adds	r2, r3, #1
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a376:	697b      	ldr	r3, [r7, #20]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3718      	adds	r7, #24
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d018      	beq.n	800a3c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68da      	ldr	r2, [r3, #12]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a39a:	441a      	add	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	68da      	ldr	r2, [r3, #12]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d303      	bcc.n	800a3b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	68d9      	ldr	r1, [r3, #12]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3bc:	461a      	mov	r2, r3
 800a3be:	6838      	ldr	r0, [r7, #0]
 800a3c0:	f002 fa3c 	bl	800c83c <memcpy>
	}
}
 800a3c4:	bf00      	nop
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a3d4:	f001 fe78 	bl	800c0c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3e0:	e011      	b.n	800a406 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d012      	beq.n	800a410 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3324      	adds	r3, #36	@ 0x24
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f000 fe56 	bl	800b0a0 <xTaskRemoveFromEventList>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a3fa:	f000 ff2f 	bl	800b25c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a3fe:	7bfb      	ldrb	r3, [r7, #15]
 800a400:	3b01      	subs	r3, #1
 800a402:	b2db      	uxtb	r3, r3
 800a404:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	dce9      	bgt.n	800a3e2 <prvUnlockQueue+0x16>
 800a40e:	e000      	b.n	800a412 <prvUnlockQueue+0x46>
					break;
 800a410:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	22ff      	movs	r2, #255	@ 0xff
 800a416:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a41a:	f001 fe87 	bl	800c12c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a41e:	f001 fe53 	bl	800c0c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a428:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a42a:	e011      	b.n	800a450 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d012      	beq.n	800a45a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	3310      	adds	r3, #16
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 fe31 	bl	800b0a0 <xTaskRemoveFromEventList>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a444:	f000 ff0a 	bl	800b25c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a448:	7bbb      	ldrb	r3, [r7, #14]
 800a44a:	3b01      	subs	r3, #1
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a454:	2b00      	cmp	r3, #0
 800a456:	dce9      	bgt.n	800a42c <prvUnlockQueue+0x60>
 800a458:	e000      	b.n	800a45c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a45a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	22ff      	movs	r2, #255	@ 0xff
 800a460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a464:	f001 fe62 	bl	800c12c <vPortExitCritical>
}
 800a468:	bf00      	nop
 800a46a:	3710      	adds	r7, #16
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a478:	f001 fe26 	bl	800c0c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a480:	2b00      	cmp	r3, #0
 800a482:	d102      	bne.n	800a48a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a484:	2301      	movs	r3, #1
 800a486:	60fb      	str	r3, [r7, #12]
 800a488:	e001      	b.n	800a48e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a48a:	2300      	movs	r3, #0
 800a48c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a48e:	f001 fe4d 	bl	800c12c <vPortExitCritical>

	return xReturn;
 800a492:	68fb      	ldr	r3, [r7, #12]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4a4:	f001 fe10 	bl	800c0c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d102      	bne.n	800a4ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	60fb      	str	r3, [r7, #12]
 800a4b8:	e001      	b.n	800a4be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4be:	f001 fe35 	bl	800c12c <vPortExitCritical>

	return xReturn;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	60fb      	str	r3, [r7, #12]
 800a4da:	e014      	b.n	800a506 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a4dc:	4a0f      	ldr	r2, [pc, #60]	@ (800a51c <vQueueAddToRegistry+0x50>)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10b      	bne.n	800a500 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a4e8:	490c      	ldr	r1, [pc, #48]	@ (800a51c <vQueueAddToRegistry+0x50>)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	683a      	ldr	r2, [r7, #0]
 800a4ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a4f2:	4a0a      	ldr	r2, [pc, #40]	@ (800a51c <vQueueAddToRegistry+0x50>)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	00db      	lsls	r3, r3, #3
 800a4f8:	4413      	add	r3, r2
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a4fe:	e006      	b.n	800a50e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	3301      	adds	r3, #1
 800a504:	60fb      	str	r3, [r7, #12]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2b07      	cmp	r3, #7
 800a50a:	d9e7      	bls.n	800a4dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a50c:	bf00      	nop
 800a50e:	bf00      	nop
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	200013ac 	.word	0x200013ac

0800a520 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a530:	f001 fdca 	bl	800c0c8 <vPortEnterCritical>
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a53a:	b25b      	sxtb	r3, r3
 800a53c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a540:	d103      	bne.n	800a54a <vQueueWaitForMessageRestricted+0x2a>
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a550:	b25b      	sxtb	r3, r3
 800a552:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a556:	d103      	bne.n	800a560 <vQueueWaitForMessageRestricted+0x40>
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a560:	f001 fde4 	bl	800c12c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d106      	bne.n	800a57a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	3324      	adds	r3, #36	@ 0x24
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	68b9      	ldr	r1, [r7, #8]
 800a574:	4618      	mov	r0, r3
 800a576:	f000 fd67 	bl	800b048 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a57a:	6978      	ldr	r0, [r7, #20]
 800a57c:	f7ff ff26 	bl	800a3cc <prvUnlockQueue>
	}
 800a580:	bf00      	nop
 800a582:	3718      	adds	r7, #24
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b08e      	sub	sp, #56	@ 0x38
 800a58c:	af04      	add	r7, sp, #16
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
 800a594:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10b      	bne.n	800a5b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	623b      	str	r3, [r7, #32]
}
 800a5ae:	bf00      	nop
 800a5b0:	bf00      	nop
 800a5b2:	e7fd      	b.n	800a5b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d10b      	bne.n	800a5d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5be:	f383 8811 	msr	BASEPRI, r3
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	f3bf 8f4f 	dsb	sy
 800a5ca:	61fb      	str	r3, [r7, #28]
}
 800a5cc:	bf00      	nop
 800a5ce:	bf00      	nop
 800a5d0:	e7fd      	b.n	800a5ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a5d2:	23a8      	movs	r3, #168	@ 0xa8
 800a5d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	2ba8      	cmp	r3, #168	@ 0xa8
 800a5da:	d00b      	beq.n	800a5f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	61bb      	str	r3, [r7, #24]
}
 800a5ee:	bf00      	nop
 800a5f0:	bf00      	nop
 800a5f2:	e7fd      	b.n	800a5f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a5f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d01e      	beq.n	800a63a <xTaskCreateStatic+0xb2>
 800a5fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d01b      	beq.n	800a63a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a604:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a608:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a60a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60e:	2202      	movs	r2, #2
 800a610:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a614:	2300      	movs	r3, #0
 800a616:	9303      	str	r3, [sp, #12]
 800a618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61a:	9302      	str	r3, [sp, #8]
 800a61c:	f107 0314 	add.w	r3, r7, #20
 800a620:	9301      	str	r3, [sp, #4]
 800a622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	68b9      	ldr	r1, [r7, #8]
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f000 f851 	bl	800a6d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a632:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a634:	f000 f8f6 	bl	800a824 <prvAddNewTaskToReadyList>
 800a638:	e001      	b.n	800a63e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a63a:	2300      	movs	r3, #0
 800a63c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a63e:	697b      	ldr	r3, [r7, #20]
	}
 800a640:	4618      	mov	r0, r3
 800a642:	3728      	adds	r7, #40	@ 0x28
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b08c      	sub	sp, #48	@ 0x30
 800a64c:	af04      	add	r7, sp, #16
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	603b      	str	r3, [r7, #0]
 800a654:	4613      	mov	r3, r2
 800a656:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a658:	88fb      	ldrh	r3, [r7, #6]
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	4618      	mov	r0, r3
 800a65e:	f001 fe55 	bl	800c30c <pvPortMalloc>
 800a662:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00e      	beq.n	800a688 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a66a:	20a8      	movs	r0, #168	@ 0xa8
 800a66c:	f001 fe4e 	bl	800c30c <pvPortMalloc>
 800a670:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d003      	beq.n	800a680 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	697a      	ldr	r2, [r7, #20]
 800a67c:	631a      	str	r2, [r3, #48]	@ 0x30
 800a67e:	e005      	b.n	800a68c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a680:	6978      	ldr	r0, [r7, #20]
 800a682:	f001 ff11 	bl	800c4a8 <vPortFree>
 800a686:	e001      	b.n	800a68c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a688:	2300      	movs	r3, #0
 800a68a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d017      	beq.n	800a6c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	2200      	movs	r2, #0
 800a696:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a69a:	88fa      	ldrh	r2, [r7, #6]
 800a69c:	2300      	movs	r3, #0
 800a69e:	9303      	str	r3, [sp, #12]
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	9302      	str	r3, [sp, #8]
 800a6a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6a6:	9301      	str	r3, [sp, #4]
 800a6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	68b9      	ldr	r1, [r7, #8]
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f000 f80f 	bl	800a6d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6b6:	69f8      	ldr	r0, [r7, #28]
 800a6b8:	f000 f8b4 	bl	800a824 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	61bb      	str	r3, [r7, #24]
 800a6c0:	e002      	b.n	800a6c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a6c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a6c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a6c8:	69bb      	ldr	r3, [r7, #24]
	}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3720      	adds	r7, #32
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
	...

0800a6d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b088      	sub	sp, #32
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	607a      	str	r2, [r7, #4]
 800a6e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	21a5      	movs	r1, #165	@ 0xa5
 800a6ee:	f002 f81b 	bl	800c728 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4413      	add	r3, r2
 800a702:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	f023 0307 	bic.w	r3, r3, #7
 800a70a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	f003 0307 	and.w	r3, r3, #7
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00b      	beq.n	800a72e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a71a:	f383 8811 	msr	BASEPRI, r3
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	617b      	str	r3, [r7, #20]
}
 800a728:	bf00      	nop
 800a72a:	bf00      	nop
 800a72c:	e7fd      	b.n	800a72a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d01f      	beq.n	800a774 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a734:	2300      	movs	r3, #0
 800a736:	61fb      	str	r3, [r7, #28]
 800a738:	e012      	b.n	800a760 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	4413      	add	r3, r2
 800a740:	7819      	ldrb	r1, [r3, #0]
 800a742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	4413      	add	r3, r2
 800a748:	3334      	adds	r3, #52	@ 0x34
 800a74a:	460a      	mov	r2, r1
 800a74c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	4413      	add	r3, r2
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d006      	beq.n	800a768 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	3301      	adds	r3, #1
 800a75e:	61fb      	str	r3, [r7, #28]
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	2b0f      	cmp	r3, #15
 800a764:	d9e9      	bls.n	800a73a <prvInitialiseNewTask+0x66>
 800a766:	e000      	b.n	800a76a <prvInitialiseNewTask+0x96>
			{
				break;
 800a768:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a772:	e003      	b.n	800a77c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a776:	2200      	movs	r2, #0
 800a778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77e:	2b37      	cmp	r3, #55	@ 0x37
 800a780:	d901      	bls.n	800a786 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a782:	2337      	movs	r3, #55	@ 0x37
 800a784:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a788:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a78a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a790:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a794:	2200      	movs	r2, #0
 800a796:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79a:	3304      	adds	r3, #4
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7ff f965 	bl	8009a6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a4:	3318      	adds	r3, #24
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7ff f960 	bl	8009a6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7c0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d4:	3354      	adds	r3, #84	@ 0x54
 800a7d6:	224c      	movs	r2, #76	@ 0x4c
 800a7d8:	2100      	movs	r1, #0
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f001 ffa4 	bl	800c728 <memset>
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e2:	4a0d      	ldr	r2, [pc, #52]	@ (800a818 <prvInitialiseNewTask+0x144>)
 800a7e4:	659a      	str	r2, [r3, #88]	@ 0x58
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e8:	4a0c      	ldr	r2, [pc, #48]	@ (800a81c <prvInitialiseNewTask+0x148>)
 800a7ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ee:	4a0c      	ldr	r2, [pc, #48]	@ (800a820 <prvInitialiseNewTask+0x14c>)
 800a7f0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	68f9      	ldr	r1, [r7, #12]
 800a7f6:	69b8      	ldr	r0, [r7, #24]
 800a7f8:	f001 fb36 	bl	800be68 <pxPortInitialiseStack>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a800:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a804:	2b00      	cmp	r3, #0
 800a806:	d002      	beq.n	800a80e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a80a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a80c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a80e:	bf00      	nop
 800a810:	3720      	adds	r7, #32
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	20005640 	.word	0x20005640
 800a81c:	200056a8 	.word	0x200056a8
 800a820:	20005710 	.word	0x20005710

0800a824 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a82c:	f001 fc4c 	bl	800c0c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a830:	4b2d      	ldr	r3, [pc, #180]	@ (800a8e8 <prvAddNewTaskToReadyList+0xc4>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	3301      	adds	r3, #1
 800a836:	4a2c      	ldr	r2, [pc, #176]	@ (800a8e8 <prvAddNewTaskToReadyList+0xc4>)
 800a838:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a83a:	4b2c      	ldr	r3, [pc, #176]	@ (800a8ec <prvAddNewTaskToReadyList+0xc8>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d109      	bne.n	800a856 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a842:	4a2a      	ldr	r2, [pc, #168]	@ (800a8ec <prvAddNewTaskToReadyList+0xc8>)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a848:	4b27      	ldr	r3, [pc, #156]	@ (800a8e8 <prvAddNewTaskToReadyList+0xc4>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d110      	bne.n	800a872 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a850:	f000 fd28 	bl	800b2a4 <prvInitialiseTaskLists>
 800a854:	e00d      	b.n	800a872 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a856:	4b26      	ldr	r3, [pc, #152]	@ (800a8f0 <prvAddNewTaskToReadyList+0xcc>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d109      	bne.n	800a872 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a85e:	4b23      	ldr	r3, [pc, #140]	@ (800a8ec <prvAddNewTaskToReadyList+0xc8>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a868:	429a      	cmp	r2, r3
 800a86a:	d802      	bhi.n	800a872 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a86c:	4a1f      	ldr	r2, [pc, #124]	@ (800a8ec <prvAddNewTaskToReadyList+0xc8>)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a872:	4b20      	ldr	r3, [pc, #128]	@ (800a8f4 <prvAddNewTaskToReadyList+0xd0>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	3301      	adds	r3, #1
 800a878:	4a1e      	ldr	r2, [pc, #120]	@ (800a8f4 <prvAddNewTaskToReadyList+0xd0>)
 800a87a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a87c:	4b1d      	ldr	r3, [pc, #116]	@ (800a8f4 <prvAddNewTaskToReadyList+0xd0>)
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a888:	4b1b      	ldr	r3, [pc, #108]	@ (800a8f8 <prvAddNewTaskToReadyList+0xd4>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d903      	bls.n	800a898 <prvAddNewTaskToReadyList+0x74>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a894:	4a18      	ldr	r2, [pc, #96]	@ (800a8f8 <prvAddNewTaskToReadyList+0xd4>)
 800a896:	6013      	str	r3, [r2, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a89c:	4613      	mov	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	4a15      	ldr	r2, [pc, #84]	@ (800a8fc <prvAddNewTaskToReadyList+0xd8>)
 800a8a6:	441a      	add	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3304      	adds	r3, #4
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	4610      	mov	r0, r2
 800a8b0:	f7ff f8e9 	bl	8009a86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a8b4:	f001 fc3a 	bl	800c12c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a8b8:	4b0d      	ldr	r3, [pc, #52]	@ (800a8f0 <prvAddNewTaskToReadyList+0xcc>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00e      	beq.n	800a8de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a8c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a8ec <prvAddNewTaskToReadyList+0xc8>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d207      	bcs.n	800a8de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a8ce:	4b0c      	ldr	r3, [pc, #48]	@ (800a900 <prvAddNewTaskToReadyList+0xdc>)
 800a8d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8d4:	601a      	str	r2, [r3, #0]
 800a8d6:	f3bf 8f4f 	dsb	sy
 800a8da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8de:	bf00      	nop
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	200018c0 	.word	0x200018c0
 800a8ec:	200013ec 	.word	0x200013ec
 800a8f0:	200018cc 	.word	0x200018cc
 800a8f4:	200018dc 	.word	0x200018dc
 800a8f8:	200018c8 	.word	0x200018c8
 800a8fc:	200013f0 	.word	0x200013f0
 800a900:	e000ed04 	.word	0xe000ed04

0800a904 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a90c:	2300      	movs	r3, #0
 800a90e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d018      	beq.n	800a948 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a916:	4b14      	ldr	r3, [pc, #80]	@ (800a968 <vTaskDelay+0x64>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00b      	beq.n	800a936 <vTaskDelay+0x32>
	__asm volatile
 800a91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	60bb      	str	r3, [r7, #8]
}
 800a930:	bf00      	nop
 800a932:	bf00      	nop
 800a934:	e7fd      	b.n	800a932 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a936:	f000 f88b 	bl	800aa50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a93a:	2100      	movs	r1, #0
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 fee5 	bl	800b70c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a942:	f000 f893 	bl	800aa6c <xTaskResumeAll>
 800a946:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d107      	bne.n	800a95e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a94e:	4b07      	ldr	r3, [pc, #28]	@ (800a96c <vTaskDelay+0x68>)
 800a950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a954:	601a      	str	r2, [r3, #0]
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a95e:	bf00      	nop
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	200018e8 	.word	0x200018e8
 800a96c:	e000ed04 	.word	0xe000ed04

0800a970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b08a      	sub	sp, #40	@ 0x28
 800a974:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a976:	2300      	movs	r3, #0
 800a978:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a97a:	2300      	movs	r3, #0
 800a97c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a97e:	463a      	mov	r2, r7
 800a980:	1d39      	adds	r1, r7, #4
 800a982:	f107 0308 	add.w	r3, r7, #8
 800a986:	4618      	mov	r0, r3
 800a988:	f7ff f81c 	bl	80099c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a98c:	6839      	ldr	r1, [r7, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	9202      	str	r2, [sp, #8]
 800a994:	9301      	str	r3, [sp, #4]
 800a996:	2300      	movs	r3, #0
 800a998:	9300      	str	r3, [sp, #0]
 800a99a:	2300      	movs	r3, #0
 800a99c:	460a      	mov	r2, r1
 800a99e:	4924      	ldr	r1, [pc, #144]	@ (800aa30 <vTaskStartScheduler+0xc0>)
 800a9a0:	4824      	ldr	r0, [pc, #144]	@ (800aa34 <vTaskStartScheduler+0xc4>)
 800a9a2:	f7ff fdf1 	bl	800a588 <xTaskCreateStatic>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	4a23      	ldr	r2, [pc, #140]	@ (800aa38 <vTaskStartScheduler+0xc8>)
 800a9aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a9ac:	4b22      	ldr	r3, [pc, #136]	@ (800aa38 <vTaskStartScheduler+0xc8>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d002      	beq.n	800a9ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	617b      	str	r3, [r7, #20]
 800a9b8:	e001      	b.n	800a9be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d102      	bne.n	800a9ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a9c4:	f000 fef6 	bl	800b7b4 <xTimerCreateTimerTask>
 800a9c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d11b      	bne.n	800aa08 <vTaskStartScheduler+0x98>
	__asm volatile
 800a9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d4:	f383 8811 	msr	BASEPRI, r3
 800a9d8:	f3bf 8f6f 	isb	sy
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	613b      	str	r3, [r7, #16]
}
 800a9e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9e4:	4b15      	ldr	r3, [pc, #84]	@ (800aa3c <vTaskStartScheduler+0xcc>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	3354      	adds	r3, #84	@ 0x54
 800a9ea:	4a15      	ldr	r2, [pc, #84]	@ (800aa40 <vTaskStartScheduler+0xd0>)
 800a9ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a9ee:	4b15      	ldr	r3, [pc, #84]	@ (800aa44 <vTaskStartScheduler+0xd4>)
 800a9f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a9f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a9f6:	4b14      	ldr	r3, [pc, #80]	@ (800aa48 <vTaskStartScheduler+0xd8>)
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a9fc:	4b13      	ldr	r3, [pc, #76]	@ (800aa4c <vTaskStartScheduler+0xdc>)
 800a9fe:	2200      	movs	r2, #0
 800aa00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa02:	f001 fabd 	bl	800bf80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa06:	e00f      	b.n	800aa28 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa0e:	d10b      	bne.n	800aa28 <vTaskStartScheduler+0xb8>
	__asm volatile
 800aa10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa14:	f383 8811 	msr	BASEPRI, r3
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	60fb      	str	r3, [r7, #12]
}
 800aa22:	bf00      	nop
 800aa24:	bf00      	nop
 800aa26:	e7fd      	b.n	800aa24 <vTaskStartScheduler+0xb4>
}
 800aa28:	bf00      	nop
 800aa2a:	3718      	adds	r7, #24
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	0800d13c 	.word	0x0800d13c
 800aa34:	0800b275 	.word	0x0800b275
 800aa38:	200018e4 	.word	0x200018e4
 800aa3c:	200013ec 	.word	0x200013ec
 800aa40:	2000002c 	.word	0x2000002c
 800aa44:	200018e0 	.word	0x200018e0
 800aa48:	200018cc 	.word	0x200018cc
 800aa4c:	200018c4 	.word	0x200018c4

0800aa50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa50:	b480      	push	{r7}
 800aa52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aa54:	4b04      	ldr	r3, [pc, #16]	@ (800aa68 <vTaskSuspendAll+0x18>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	4a03      	ldr	r2, [pc, #12]	@ (800aa68 <vTaskSuspendAll+0x18>)
 800aa5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aa5e:	bf00      	nop
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr
 800aa68:	200018e8 	.word	0x200018e8

0800aa6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa72:	2300      	movs	r3, #0
 800aa74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa76:	2300      	movs	r3, #0
 800aa78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa7a:	4b42      	ldr	r3, [pc, #264]	@ (800ab84 <xTaskResumeAll+0x118>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10b      	bne.n	800aa9a <xTaskResumeAll+0x2e>
	__asm volatile
 800aa82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	603b      	str	r3, [r7, #0]
}
 800aa94:	bf00      	nop
 800aa96:	bf00      	nop
 800aa98:	e7fd      	b.n	800aa96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aa9a:	f001 fb15 	bl	800c0c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa9e:	4b39      	ldr	r3, [pc, #228]	@ (800ab84 <xTaskResumeAll+0x118>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	4a37      	ldr	r2, [pc, #220]	@ (800ab84 <xTaskResumeAll+0x118>)
 800aaa6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aaa8:	4b36      	ldr	r3, [pc, #216]	@ (800ab84 <xTaskResumeAll+0x118>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d162      	bne.n	800ab76 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aab0:	4b35      	ldr	r3, [pc, #212]	@ (800ab88 <xTaskResumeAll+0x11c>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d05e      	beq.n	800ab76 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aab8:	e02f      	b.n	800ab1a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaba:	4b34      	ldr	r3, [pc, #208]	@ (800ab8c <xTaskResumeAll+0x120>)
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	3318      	adds	r3, #24
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7ff f83a 	bl	8009b40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	3304      	adds	r3, #4
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7ff f835 	bl	8009b40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aada:	4b2d      	ldr	r3, [pc, #180]	@ (800ab90 <xTaskResumeAll+0x124>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d903      	bls.n	800aaea <xTaskResumeAll+0x7e>
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aae6:	4a2a      	ldr	r2, [pc, #168]	@ (800ab90 <xTaskResumeAll+0x124>)
 800aae8:	6013      	str	r3, [r2, #0]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaee:	4613      	mov	r3, r2
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	4413      	add	r3, r2
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	4a27      	ldr	r2, [pc, #156]	@ (800ab94 <xTaskResumeAll+0x128>)
 800aaf8:	441a      	add	r2, r3
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	3304      	adds	r3, #4
 800aafe:	4619      	mov	r1, r3
 800ab00:	4610      	mov	r0, r2
 800ab02:	f7fe ffc0 	bl	8009a86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab0a:	4b23      	ldr	r3, [pc, #140]	@ (800ab98 <xTaskResumeAll+0x12c>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d302      	bcc.n	800ab1a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ab14:	4b21      	ldr	r3, [pc, #132]	@ (800ab9c <xTaskResumeAll+0x130>)
 800ab16:	2201      	movs	r2, #1
 800ab18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab1a:	4b1c      	ldr	r3, [pc, #112]	@ (800ab8c <xTaskResumeAll+0x120>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1cb      	bne.n	800aaba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d001      	beq.n	800ab2c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab28:	f000 fc60 	bl	800b3ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ab2c:	4b1c      	ldr	r3, [pc, #112]	@ (800aba0 <xTaskResumeAll+0x134>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d010      	beq.n	800ab5a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab38:	f000 f940 	bl	800adbc <xTaskIncrementTick>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d002      	beq.n	800ab48 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ab42:	4b16      	ldr	r3, [pc, #88]	@ (800ab9c <xTaskResumeAll+0x130>)
 800ab44:	2201      	movs	r2, #1
 800ab46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1f1      	bne.n	800ab38 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ab54:	4b12      	ldr	r3, [pc, #72]	@ (800aba0 <xTaskResumeAll+0x134>)
 800ab56:	2200      	movs	r2, #0
 800ab58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab5a:	4b10      	ldr	r3, [pc, #64]	@ (800ab9c <xTaskResumeAll+0x130>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d009      	beq.n	800ab76 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab62:	2301      	movs	r3, #1
 800ab64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab66:	4b0f      	ldr	r3, [pc, #60]	@ (800aba4 <xTaskResumeAll+0x138>)
 800ab68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab6c:	601a      	str	r2, [r3, #0]
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab76:	f001 fad9 	bl	800c12c <vPortExitCritical>

	return xAlreadyYielded;
 800ab7a:	68bb      	ldr	r3, [r7, #8]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	200018e8 	.word	0x200018e8
 800ab88:	200018c0 	.word	0x200018c0
 800ab8c:	20001880 	.word	0x20001880
 800ab90:	200018c8 	.word	0x200018c8
 800ab94:	200013f0 	.word	0x200013f0
 800ab98:	200013ec 	.word	0x200013ec
 800ab9c:	200018d4 	.word	0x200018d4
 800aba0:	200018d0 	.word	0x200018d0
 800aba4:	e000ed04 	.word	0xe000ed04

0800aba8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800abae:	4b05      	ldr	r3, [pc, #20]	@ (800abc4 <xTaskGetTickCount+0x1c>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800abb4:	687b      	ldr	r3, [r7, #4]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	200018c4 	.word	0x200018c4

0800abc8 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d102      	bne.n	800abdc <pcTaskGetName+0x14>
 800abd6:	4b0e      	ldr	r3, [pc, #56]	@ (800ac10 <pcTaskGetName+0x48>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	e000      	b.n	800abde <pcTaskGetName+0x16>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d10b      	bne.n	800abfe <pcTaskGetName+0x36>
	__asm volatile
 800abe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abea:	f383 8811 	msr	BASEPRI, r3
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	60bb      	str	r3, [r7, #8]
}
 800abf8:	bf00      	nop
 800abfa:	bf00      	nop
 800abfc:	e7fd      	b.n	800abfa <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	3334      	adds	r3, #52	@ 0x34
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3714      	adds	r7, #20
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	200013ec 	.word	0x200013ec

0800ac14 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800ac14:	b480      	push	{r7}
 800ac16:	b08b      	sub	sp, #44	@ 0x2c
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d05b      	beq.n	800ace2 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	61bb      	str	r3, [r7, #24]
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	685a      	ldr	r2, [r3, #4]
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	605a      	str	r2, [r3, #4]
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	3308      	adds	r3, #8
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d104      	bne.n	800ac4e <prvSearchForNameWithinSingleList+0x3a>
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	685a      	ldr	r2, [r3, #4]
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	605a      	str	r2, [r3, #4]
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	613b      	str	r3, [r7, #16]
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	685a      	ldr	r2, [r3, #4]
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	605a      	str	r2, [r3, #4]
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	685a      	ldr	r2, [r3, #4]
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	3308      	adds	r3, #8
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d104      	bne.n	800ac7a <prvSearchForNameWithinSingleList+0x66>
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	685a      	ldr	r2, [r3, #4]
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	605a      	str	r2, [r3, #4]
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800ac82:	2300      	movs	r3, #0
 800ac84:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac86:	2300      	movs	r3, #0
 800ac88:	623b      	str	r3, [r7, #32]
 800ac8a:	e01c      	b.n	800acc6 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	6a3b      	ldr	r3, [r7, #32]
 800ac90:	4413      	add	r3, r2
 800ac92:	3334      	adds	r3, #52	@ 0x34
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800ac98:	683a      	ldr	r2, [r7, #0]
 800ac9a:	6a3b      	ldr	r3, [r7, #32]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	7afa      	ldrb	r2, [r7, #11]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d002      	beq.n	800acac <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800aca6:	2301      	movs	r3, #1
 800aca8:	61fb      	str	r3, [r7, #28]
 800acaa:	e006      	b.n	800acba <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800acac:	7afb      	ldrb	r3, [r7, #11]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d103      	bne.n	800acba <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800acb6:	2301      	movs	r3, #1
 800acb8:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800acba:	69fb      	ldr	r3, [r7, #28]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d106      	bne.n	800acce <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800acc0:	6a3b      	ldr	r3, [r7, #32]
 800acc2:	3301      	adds	r3, #1
 800acc4:	623b      	str	r3, [r7, #32]
 800acc6:	6a3b      	ldr	r3, [r7, #32]
 800acc8:	2b0f      	cmp	r3, #15
 800acca:	d9df      	bls.n	800ac8c <prvSearchForNameWithinSingleList+0x78>
 800accc:	e000      	b.n	800acd0 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800acce:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800acd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d104      	bne.n	800ace0 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d1bb      	bne.n	800ac56 <prvSearchForNameWithinSingleList+0x42>
 800acde:	e000      	b.n	800ace2 <prvSearchForNameWithinSingleList+0xce>
					break;
 800ace0:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800ace2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800ace4:	4618      	mov	r0, r3
 800ace6:	372c      	adds	r7, #44	@ 0x2c
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b086      	sub	sp, #24
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800acf8:	2338      	movs	r3, #56	@ 0x38
 800acfa:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7f5 fa67 	bl	80001d0 <strlen>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b0f      	cmp	r3, #15
 800ad06:	d90b      	bls.n	800ad20 <xTaskGetHandle+0x30>
	__asm volatile
 800ad08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad0c:	f383 8811 	msr	BASEPRI, r3
 800ad10:	f3bf 8f6f 	isb	sy
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	60fb      	str	r3, [r7, #12]
}
 800ad1a:	bf00      	nop
 800ad1c:	bf00      	nop
 800ad1e:	e7fd      	b.n	800ad1c <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800ad20:	f7ff fe96 	bl	800aa50 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	3b01      	subs	r3, #1
 800ad28:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800ad2a:	697a      	ldr	r2, [r7, #20]
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	4413      	add	r3, r2
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	4a1c      	ldr	r2, [pc, #112]	@ (800ada8 <xTaskGetHandle+0xb8>)
 800ad36:	4413      	add	r3, r2
 800ad38:	6879      	ldr	r1, [r7, #4]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7ff ff6a 	bl	800ac14 <prvSearchForNameWithinSingleList>
 800ad40:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d103      	bne.n	800ad50 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1ea      	bne.n	800ad24 <xTaskGetHandle+0x34>
 800ad4e:	e000      	b.n	800ad52 <xTaskGetHandle+0x62>
					break;
 800ad50:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d106      	bne.n	800ad66 <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800ad58:	4b14      	ldr	r3, [pc, #80]	@ (800adac <xTaskGetHandle+0xbc>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	6879      	ldr	r1, [r7, #4]
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7ff ff58 	bl	800ac14 <prvSearchForNameWithinSingleList>
 800ad64:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d106      	bne.n	800ad7a <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800ad6c:	4b10      	ldr	r3, [pc, #64]	@ (800adb0 <xTaskGetHandle+0xc0>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	6879      	ldr	r1, [r7, #4]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7ff ff4e 	bl	800ac14 <prvSearchForNameWithinSingleList>
 800ad78:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d104      	bne.n	800ad8a <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800ad80:	6879      	ldr	r1, [r7, #4]
 800ad82:	480c      	ldr	r0, [pc, #48]	@ (800adb4 <xTaskGetHandle+0xc4>)
 800ad84:	f7ff ff46 	bl	800ac14 <prvSearchForNameWithinSingleList>
 800ad88:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d104      	bne.n	800ad9a <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800ad90:	6879      	ldr	r1, [r7, #4]
 800ad92:	4809      	ldr	r0, [pc, #36]	@ (800adb8 <xTaskGetHandle+0xc8>)
 800ad94:	f7ff ff3e 	bl	800ac14 <prvSearchForNameWithinSingleList>
 800ad98:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800ad9a:	f7ff fe67 	bl	800aa6c <xTaskResumeAll>

		return pxTCB;
 800ad9e:	693b      	ldr	r3, [r7, #16]
	}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3718      	adds	r7, #24
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	200013f0 	.word	0x200013f0
 800adac:	20001878 	.word	0x20001878
 800adb0:	2000187c 	.word	0x2000187c
 800adb4:	200018ac 	.word	0x200018ac
 800adb8:	20001894 	.word	0x20001894

0800adbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b086      	sub	sp, #24
 800adc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800adc2:	2300      	movs	r3, #0
 800adc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adc6:	4b4f      	ldr	r3, [pc, #316]	@ (800af04 <xTaskIncrementTick+0x148>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f040 8090 	bne.w	800aef0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800add0:	4b4d      	ldr	r3, [pc, #308]	@ (800af08 <xTaskIncrementTick+0x14c>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3301      	adds	r3, #1
 800add6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800add8:	4a4b      	ldr	r2, [pc, #300]	@ (800af08 <xTaskIncrementTick+0x14c>)
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d121      	bne.n	800ae28 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ade4:	4b49      	ldr	r3, [pc, #292]	@ (800af0c <xTaskIncrementTick+0x150>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00b      	beq.n	800ae06 <xTaskIncrementTick+0x4a>
	__asm volatile
 800adee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	603b      	str	r3, [r7, #0]
}
 800ae00:	bf00      	nop
 800ae02:	bf00      	nop
 800ae04:	e7fd      	b.n	800ae02 <xTaskIncrementTick+0x46>
 800ae06:	4b41      	ldr	r3, [pc, #260]	@ (800af0c <xTaskIncrementTick+0x150>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	60fb      	str	r3, [r7, #12]
 800ae0c:	4b40      	ldr	r3, [pc, #256]	@ (800af10 <xTaskIncrementTick+0x154>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a3e      	ldr	r2, [pc, #248]	@ (800af0c <xTaskIncrementTick+0x150>)
 800ae12:	6013      	str	r3, [r2, #0]
 800ae14:	4a3e      	ldr	r2, [pc, #248]	@ (800af10 <xTaskIncrementTick+0x154>)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6013      	str	r3, [r2, #0]
 800ae1a:	4b3e      	ldr	r3, [pc, #248]	@ (800af14 <xTaskIncrementTick+0x158>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	4a3c      	ldr	r2, [pc, #240]	@ (800af14 <xTaskIncrementTick+0x158>)
 800ae22:	6013      	str	r3, [r2, #0]
 800ae24:	f000 fae2 	bl	800b3ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae28:	4b3b      	ldr	r3, [pc, #236]	@ (800af18 <xTaskIncrementTick+0x15c>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	693a      	ldr	r2, [r7, #16]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d349      	bcc.n	800aec6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae32:	4b36      	ldr	r3, [pc, #216]	@ (800af0c <xTaskIncrementTick+0x150>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d104      	bne.n	800ae46 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae3c:	4b36      	ldr	r3, [pc, #216]	@ (800af18 <xTaskIncrementTick+0x15c>)
 800ae3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae42:	601a      	str	r2, [r3, #0]
					break;
 800ae44:	e03f      	b.n	800aec6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae46:	4b31      	ldr	r3, [pc, #196]	@ (800af0c <xTaskIncrementTick+0x150>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae56:	693a      	ldr	r2, [r7, #16]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d203      	bcs.n	800ae66 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ae5e:	4a2e      	ldr	r2, [pc, #184]	@ (800af18 <xTaskIncrementTick+0x15c>)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae64:	e02f      	b.n	800aec6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	3304      	adds	r3, #4
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fe fe68 	bl	8009b40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d004      	beq.n	800ae82 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	3318      	adds	r3, #24
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7fe fe5f 	bl	8009b40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae86:	4b25      	ldr	r3, [pc, #148]	@ (800af1c <xTaskIncrementTick+0x160>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d903      	bls.n	800ae96 <xTaskIncrementTick+0xda>
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae92:	4a22      	ldr	r2, [pc, #136]	@ (800af1c <xTaskIncrementTick+0x160>)
 800ae94:	6013      	str	r3, [r2, #0]
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	4413      	add	r3, r2
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	4a1f      	ldr	r2, [pc, #124]	@ (800af20 <xTaskIncrementTick+0x164>)
 800aea4:	441a      	add	r2, r3
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	3304      	adds	r3, #4
 800aeaa:	4619      	mov	r1, r3
 800aeac:	4610      	mov	r0, r2
 800aeae:	f7fe fdea 	bl	8009a86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeb6:	4b1b      	ldr	r3, [pc, #108]	@ (800af24 <xTaskIncrementTick+0x168>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d3b8      	bcc.n	800ae32 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800aec0:	2301      	movs	r3, #1
 800aec2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aec4:	e7b5      	b.n	800ae32 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aec6:	4b17      	ldr	r3, [pc, #92]	@ (800af24 <xTaskIncrementTick+0x168>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aecc:	4914      	ldr	r1, [pc, #80]	@ (800af20 <xTaskIncrementTick+0x164>)
 800aece:	4613      	mov	r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	4413      	add	r3, r2
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	440b      	add	r3, r1
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d901      	bls.n	800aee2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800aede:	2301      	movs	r3, #1
 800aee0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aee2:	4b11      	ldr	r3, [pc, #68]	@ (800af28 <xTaskIncrementTick+0x16c>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d007      	beq.n	800aefa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800aeea:	2301      	movs	r3, #1
 800aeec:	617b      	str	r3, [r7, #20]
 800aeee:	e004      	b.n	800aefa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aef0:	4b0e      	ldr	r3, [pc, #56]	@ (800af2c <xTaskIncrementTick+0x170>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	3301      	adds	r3, #1
 800aef6:	4a0d      	ldr	r2, [pc, #52]	@ (800af2c <xTaskIncrementTick+0x170>)
 800aef8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aefa:	697b      	ldr	r3, [r7, #20]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3718      	adds	r7, #24
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	200018e8 	.word	0x200018e8
 800af08:	200018c4 	.word	0x200018c4
 800af0c:	20001878 	.word	0x20001878
 800af10:	2000187c 	.word	0x2000187c
 800af14:	200018d8 	.word	0x200018d8
 800af18:	200018e0 	.word	0x200018e0
 800af1c:	200018c8 	.word	0x200018c8
 800af20:	200013f0 	.word	0x200013f0
 800af24:	200013ec 	.word	0x200013ec
 800af28:	200018d4 	.word	0x200018d4
 800af2c:	200018d0 	.word	0x200018d0

0800af30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800af36:	4b2b      	ldr	r3, [pc, #172]	@ (800afe4 <vTaskSwitchContext+0xb4>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d003      	beq.n	800af46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800af3e:	4b2a      	ldr	r3, [pc, #168]	@ (800afe8 <vTaskSwitchContext+0xb8>)
 800af40:	2201      	movs	r2, #1
 800af42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800af44:	e047      	b.n	800afd6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800af46:	4b28      	ldr	r3, [pc, #160]	@ (800afe8 <vTaskSwitchContext+0xb8>)
 800af48:	2200      	movs	r2, #0
 800af4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af4c:	4b27      	ldr	r3, [pc, #156]	@ (800afec <vTaskSwitchContext+0xbc>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	60fb      	str	r3, [r7, #12]
 800af52:	e011      	b.n	800af78 <vTaskSwitchContext+0x48>
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d10b      	bne.n	800af72 <vTaskSwitchContext+0x42>
	__asm volatile
 800af5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af5e:	f383 8811 	msr	BASEPRI, r3
 800af62:	f3bf 8f6f 	isb	sy
 800af66:	f3bf 8f4f 	dsb	sy
 800af6a:	607b      	str	r3, [r7, #4]
}
 800af6c:	bf00      	nop
 800af6e:	bf00      	nop
 800af70:	e7fd      	b.n	800af6e <vTaskSwitchContext+0x3e>
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	3b01      	subs	r3, #1
 800af76:	60fb      	str	r3, [r7, #12]
 800af78:	491d      	ldr	r1, [pc, #116]	@ (800aff0 <vTaskSwitchContext+0xc0>)
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	4613      	mov	r3, r2
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	4413      	add	r3, r2
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	440b      	add	r3, r1
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d0e3      	beq.n	800af54 <vTaskSwitchContext+0x24>
 800af8c:	68fa      	ldr	r2, [r7, #12]
 800af8e:	4613      	mov	r3, r2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	4413      	add	r3, r2
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	4a16      	ldr	r2, [pc, #88]	@ (800aff0 <vTaskSwitchContext+0xc0>)
 800af98:	4413      	add	r3, r2
 800af9a:	60bb      	str	r3, [r7, #8]
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	685a      	ldr	r2, [r3, #4]
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	605a      	str	r2, [r3, #4]
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	685a      	ldr	r2, [r3, #4]
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	3308      	adds	r3, #8
 800afae:	429a      	cmp	r2, r3
 800afb0:	d104      	bne.n	800afbc <vTaskSwitchContext+0x8c>
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	685a      	ldr	r2, [r3, #4]
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	605a      	str	r2, [r3, #4]
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	4a0c      	ldr	r2, [pc, #48]	@ (800aff4 <vTaskSwitchContext+0xc4>)
 800afc4:	6013      	str	r3, [r2, #0]
 800afc6:	4a09      	ldr	r2, [pc, #36]	@ (800afec <vTaskSwitchContext+0xbc>)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800afcc:	4b09      	ldr	r3, [pc, #36]	@ (800aff4 <vTaskSwitchContext+0xc4>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	3354      	adds	r3, #84	@ 0x54
 800afd2:	4a09      	ldr	r2, [pc, #36]	@ (800aff8 <vTaskSwitchContext+0xc8>)
 800afd4:	6013      	str	r3, [r2, #0]
}
 800afd6:	bf00      	nop
 800afd8:	3714      	adds	r7, #20
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	200018e8 	.word	0x200018e8
 800afe8:	200018d4 	.word	0x200018d4
 800afec:	200018c8 	.word	0x200018c8
 800aff0:	200013f0 	.word	0x200013f0
 800aff4:	200013ec 	.word	0x200013ec
 800aff8:	2000002c 	.word	0x2000002c

0800affc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d10b      	bne.n	800b024 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b00c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b010:	f383 8811 	msr	BASEPRI, r3
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	60fb      	str	r3, [r7, #12]
}
 800b01e:	bf00      	nop
 800b020:	bf00      	nop
 800b022:	e7fd      	b.n	800b020 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b024:	4b07      	ldr	r3, [pc, #28]	@ (800b044 <vTaskPlaceOnEventList+0x48>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	3318      	adds	r3, #24
 800b02a:	4619      	mov	r1, r3
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f7fe fd4e 	bl	8009ace <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b032:	2101      	movs	r1, #1
 800b034:	6838      	ldr	r0, [r7, #0]
 800b036:	f000 fb69 	bl	800b70c <prvAddCurrentTaskToDelayedList>
}
 800b03a:	bf00      	nop
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	200013ec 	.word	0x200013ec

0800b048 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d10b      	bne.n	800b072 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05e:	f383 8811 	msr	BASEPRI, r3
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	617b      	str	r3, [r7, #20]
}
 800b06c:	bf00      	nop
 800b06e:	bf00      	nop
 800b070:	e7fd      	b.n	800b06e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b072:	4b0a      	ldr	r3, [pc, #40]	@ (800b09c <vTaskPlaceOnEventListRestricted+0x54>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	3318      	adds	r3, #24
 800b078:	4619      	mov	r1, r3
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f7fe fd03 	bl	8009a86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d002      	beq.n	800b08c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b086:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b08a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b08c:	6879      	ldr	r1, [r7, #4]
 800b08e:	68b8      	ldr	r0, [r7, #8]
 800b090:	f000 fb3c 	bl	800b70c <prvAddCurrentTaskToDelayedList>
	}
 800b094:	bf00      	nop
 800b096:	3718      	adds	r7, #24
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	200013ec 	.word	0x200013ec

0800b0a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d10b      	bne.n	800b0ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ba:	f383 8811 	msr	BASEPRI, r3
 800b0be:	f3bf 8f6f 	isb	sy
 800b0c2:	f3bf 8f4f 	dsb	sy
 800b0c6:	60fb      	str	r3, [r7, #12]
}
 800b0c8:	bf00      	nop
 800b0ca:	bf00      	nop
 800b0cc:	e7fd      	b.n	800b0ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	3318      	adds	r3, #24
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7fe fd34 	bl	8009b40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0d8:	4b1d      	ldr	r3, [pc, #116]	@ (800b150 <xTaskRemoveFromEventList+0xb0>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d11d      	bne.n	800b11c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	3304      	adds	r3, #4
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7fe fd2b 	bl	8009b40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0ee:	4b19      	ldr	r3, [pc, #100]	@ (800b154 <xTaskRemoveFromEventList+0xb4>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d903      	bls.n	800b0fe <xTaskRemoveFromEventList+0x5e>
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0fa:	4a16      	ldr	r2, [pc, #88]	@ (800b154 <xTaskRemoveFromEventList+0xb4>)
 800b0fc:	6013      	str	r3, [r2, #0]
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b102:	4613      	mov	r3, r2
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4413      	add	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4a13      	ldr	r2, [pc, #76]	@ (800b158 <xTaskRemoveFromEventList+0xb8>)
 800b10c:	441a      	add	r2, r3
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	3304      	adds	r3, #4
 800b112:	4619      	mov	r1, r3
 800b114:	4610      	mov	r0, r2
 800b116:	f7fe fcb6 	bl	8009a86 <vListInsertEnd>
 800b11a:	e005      	b.n	800b128 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	3318      	adds	r3, #24
 800b120:	4619      	mov	r1, r3
 800b122:	480e      	ldr	r0, [pc, #56]	@ (800b15c <xTaskRemoveFromEventList+0xbc>)
 800b124:	f7fe fcaf 	bl	8009a86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b12c:	4b0c      	ldr	r3, [pc, #48]	@ (800b160 <xTaskRemoveFromEventList+0xc0>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b132:	429a      	cmp	r2, r3
 800b134:	d905      	bls.n	800b142 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b136:	2301      	movs	r3, #1
 800b138:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b13a:	4b0a      	ldr	r3, [pc, #40]	@ (800b164 <xTaskRemoveFromEventList+0xc4>)
 800b13c:	2201      	movs	r2, #1
 800b13e:	601a      	str	r2, [r3, #0]
 800b140:	e001      	b.n	800b146 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b142:	2300      	movs	r3, #0
 800b144:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b146:	697b      	ldr	r3, [r7, #20]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3718      	adds	r7, #24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	200018e8 	.word	0x200018e8
 800b154:	200018c8 	.word	0x200018c8
 800b158:	200013f0 	.word	0x200013f0
 800b15c:	20001880 	.word	0x20001880
 800b160:	200013ec 	.word	0x200013ec
 800b164:	200018d4 	.word	0x200018d4

0800b168 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b170:	4b06      	ldr	r3, [pc, #24]	@ (800b18c <vTaskInternalSetTimeOutState+0x24>)
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b178:	4b05      	ldr	r3, [pc, #20]	@ (800b190 <vTaskInternalSetTimeOutState+0x28>)
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	605a      	str	r2, [r3, #4]
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	200018d8 	.word	0x200018d8
 800b190:	200018c4 	.word	0x200018c4

0800b194 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b088      	sub	sp, #32
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10b      	bne.n	800b1bc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	613b      	str	r3, [r7, #16]
}
 800b1b6:	bf00      	nop
 800b1b8:	bf00      	nop
 800b1ba:	e7fd      	b.n	800b1b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d10b      	bne.n	800b1da <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	60fb      	str	r3, [r7, #12]
}
 800b1d4:	bf00      	nop
 800b1d6:	bf00      	nop
 800b1d8:	e7fd      	b.n	800b1d6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b1da:	f000 ff75 	bl	800c0c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b1de:	4b1d      	ldr	r3, [pc, #116]	@ (800b254 <xTaskCheckForTimeOut+0xc0>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	69ba      	ldr	r2, [r7, #24]
 800b1ea:	1ad3      	subs	r3, r2, r3
 800b1ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1f6:	d102      	bne.n	800b1fe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	61fb      	str	r3, [r7, #28]
 800b1fc:	e023      	b.n	800b246 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	4b15      	ldr	r3, [pc, #84]	@ (800b258 <xTaskCheckForTimeOut+0xc4>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	429a      	cmp	r2, r3
 800b208:	d007      	beq.n	800b21a <xTaskCheckForTimeOut+0x86>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	69ba      	ldr	r2, [r7, #24]
 800b210:	429a      	cmp	r2, r3
 800b212:	d302      	bcc.n	800b21a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b214:	2301      	movs	r3, #1
 800b216:	61fb      	str	r3, [r7, #28]
 800b218:	e015      	b.n	800b246 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	697a      	ldr	r2, [r7, #20]
 800b220:	429a      	cmp	r2, r3
 800b222:	d20b      	bcs.n	800b23c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	1ad2      	subs	r2, r2, r3
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f7ff ff99 	bl	800b168 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b236:	2300      	movs	r3, #0
 800b238:	61fb      	str	r3, [r7, #28]
 800b23a:	e004      	b.n	800b246 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	2200      	movs	r2, #0
 800b240:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b242:	2301      	movs	r3, #1
 800b244:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b246:	f000 ff71 	bl	800c12c <vPortExitCritical>

	return xReturn;
 800b24a:	69fb      	ldr	r3, [r7, #28]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3720      	adds	r7, #32
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	200018c4 	.word	0x200018c4
 800b258:	200018d8 	.word	0x200018d8

0800b25c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b25c:	b480      	push	{r7}
 800b25e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b260:	4b03      	ldr	r3, [pc, #12]	@ (800b270 <vTaskMissedYield+0x14>)
 800b262:	2201      	movs	r2, #1
 800b264:	601a      	str	r2, [r3, #0]
}
 800b266:	bf00      	nop
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr
 800b270:	200018d4 	.word	0x200018d4

0800b274 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b27c:	f000 f852 	bl	800b324 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b280:	4b06      	ldr	r3, [pc, #24]	@ (800b29c <prvIdleTask+0x28>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d9f9      	bls.n	800b27c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b288:	4b05      	ldr	r3, [pc, #20]	@ (800b2a0 <prvIdleTask+0x2c>)
 800b28a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b28e:	601a      	str	r2, [r3, #0]
 800b290:	f3bf 8f4f 	dsb	sy
 800b294:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b298:	e7f0      	b.n	800b27c <prvIdleTask+0x8>
 800b29a:	bf00      	nop
 800b29c:	200013f0 	.word	0x200013f0
 800b2a0:	e000ed04 	.word	0xe000ed04

0800b2a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	607b      	str	r3, [r7, #4]
 800b2ae:	e00c      	b.n	800b2ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	4413      	add	r3, r2
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	4a12      	ldr	r2, [pc, #72]	@ (800b304 <prvInitialiseTaskLists+0x60>)
 800b2bc:	4413      	add	r3, r2
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7fe fbb4 	bl	8009a2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	607b      	str	r3, [r7, #4]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2b37      	cmp	r3, #55	@ 0x37
 800b2ce:	d9ef      	bls.n	800b2b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b2d0:	480d      	ldr	r0, [pc, #52]	@ (800b308 <prvInitialiseTaskLists+0x64>)
 800b2d2:	f7fe fbab 	bl	8009a2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b2d6:	480d      	ldr	r0, [pc, #52]	@ (800b30c <prvInitialiseTaskLists+0x68>)
 800b2d8:	f7fe fba8 	bl	8009a2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b2dc:	480c      	ldr	r0, [pc, #48]	@ (800b310 <prvInitialiseTaskLists+0x6c>)
 800b2de:	f7fe fba5 	bl	8009a2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b2e2:	480c      	ldr	r0, [pc, #48]	@ (800b314 <prvInitialiseTaskLists+0x70>)
 800b2e4:	f7fe fba2 	bl	8009a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b2e8:	480b      	ldr	r0, [pc, #44]	@ (800b318 <prvInitialiseTaskLists+0x74>)
 800b2ea:	f7fe fb9f 	bl	8009a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b2ee:	4b0b      	ldr	r3, [pc, #44]	@ (800b31c <prvInitialiseTaskLists+0x78>)
 800b2f0:	4a05      	ldr	r2, [pc, #20]	@ (800b308 <prvInitialiseTaskLists+0x64>)
 800b2f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b2f4:	4b0a      	ldr	r3, [pc, #40]	@ (800b320 <prvInitialiseTaskLists+0x7c>)
 800b2f6:	4a05      	ldr	r2, [pc, #20]	@ (800b30c <prvInitialiseTaskLists+0x68>)
 800b2f8:	601a      	str	r2, [r3, #0]
}
 800b2fa:	bf00      	nop
 800b2fc:	3708      	adds	r7, #8
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	200013f0 	.word	0x200013f0
 800b308:	20001850 	.word	0x20001850
 800b30c:	20001864 	.word	0x20001864
 800b310:	20001880 	.word	0x20001880
 800b314:	20001894 	.word	0x20001894
 800b318:	200018ac 	.word	0x200018ac
 800b31c:	20001878 	.word	0x20001878
 800b320:	2000187c 	.word	0x2000187c

0800b324 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b32a:	e019      	b.n	800b360 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b32c:	f000 fecc 	bl	800c0c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b330:	4b10      	ldr	r3, [pc, #64]	@ (800b374 <prvCheckTasksWaitingTermination+0x50>)
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	3304      	adds	r3, #4
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7fe fbff 	bl	8009b40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b342:	4b0d      	ldr	r3, [pc, #52]	@ (800b378 <prvCheckTasksWaitingTermination+0x54>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	3b01      	subs	r3, #1
 800b348:	4a0b      	ldr	r2, [pc, #44]	@ (800b378 <prvCheckTasksWaitingTermination+0x54>)
 800b34a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b34c:	4b0b      	ldr	r3, [pc, #44]	@ (800b37c <prvCheckTasksWaitingTermination+0x58>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	3b01      	subs	r3, #1
 800b352:	4a0a      	ldr	r2, [pc, #40]	@ (800b37c <prvCheckTasksWaitingTermination+0x58>)
 800b354:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b356:	f000 fee9 	bl	800c12c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 f810 	bl	800b380 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b360:	4b06      	ldr	r3, [pc, #24]	@ (800b37c <prvCheckTasksWaitingTermination+0x58>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1e1      	bne.n	800b32c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b368:	bf00      	nop
 800b36a:	bf00      	nop
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	20001894 	.word	0x20001894
 800b378:	200018c0 	.word	0x200018c0
 800b37c:	200018a8 	.word	0x200018a8

0800b380 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	3354      	adds	r3, #84	@ 0x54
 800b38c:	4618      	mov	r0, r3
 800b38e:	f001 f9d3 	bl	800c738 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d108      	bne.n	800b3ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f001 f881 	bl	800c4a8 <vPortFree>
				vPortFree( pxTCB );
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f001 f87e 	bl	800c4a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b3ac:	e019      	b.n	800b3e2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d103      	bne.n	800b3c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f001 f875 	bl	800c4a8 <vPortFree>
	}
 800b3be:	e010      	b.n	800b3e2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b3c6:	2b02      	cmp	r3, #2
 800b3c8:	d00b      	beq.n	800b3e2 <prvDeleteTCB+0x62>
	__asm volatile
 800b3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	60fb      	str	r3, [r7, #12]
}
 800b3dc:	bf00      	nop
 800b3de:	bf00      	nop
 800b3e0:	e7fd      	b.n	800b3de <prvDeleteTCB+0x5e>
	}
 800b3e2:	bf00      	nop
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
	...

0800b3ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3f2:	4b0c      	ldr	r3, [pc, #48]	@ (800b424 <prvResetNextTaskUnblockTime+0x38>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d104      	bne.n	800b406 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b3fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b428 <prvResetNextTaskUnblockTime+0x3c>)
 800b3fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b402:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b404:	e008      	b.n	800b418 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b406:	4b07      	ldr	r3, [pc, #28]	@ (800b424 <prvResetNextTaskUnblockTime+0x38>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	4a04      	ldr	r2, [pc, #16]	@ (800b428 <prvResetNextTaskUnblockTime+0x3c>)
 800b416:	6013      	str	r3, [r2, #0]
}
 800b418:	bf00      	nop
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr
 800b424:	20001878 	.word	0x20001878
 800b428:	200018e0 	.word	0x200018e0

0800b42c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b432:	4b0b      	ldr	r3, [pc, #44]	@ (800b460 <xTaskGetSchedulerState+0x34>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d102      	bne.n	800b440 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b43a:	2301      	movs	r3, #1
 800b43c:	607b      	str	r3, [r7, #4]
 800b43e:	e008      	b.n	800b452 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b440:	4b08      	ldr	r3, [pc, #32]	@ (800b464 <xTaskGetSchedulerState+0x38>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d102      	bne.n	800b44e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b448:	2302      	movs	r3, #2
 800b44a:	607b      	str	r3, [r7, #4]
 800b44c:	e001      	b.n	800b452 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b44e:	2300      	movs	r3, #0
 800b450:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b452:	687b      	ldr	r3, [r7, #4]
	}
 800b454:	4618      	mov	r0, r3
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr
 800b460:	200018cc 	.word	0x200018cc
 800b464:	200018e8 	.word	0x200018e8

0800b468 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b474:	2300      	movs	r3, #0
 800b476:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d058      	beq.n	800b530 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b47e:	4b2f      	ldr	r3, [pc, #188]	@ (800b53c <xTaskPriorityDisinherit+0xd4>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	693a      	ldr	r2, [r7, #16]
 800b484:	429a      	cmp	r2, r3
 800b486:	d00b      	beq.n	800b4a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b48c:	f383 8811 	msr	BASEPRI, r3
 800b490:	f3bf 8f6f 	isb	sy
 800b494:	f3bf 8f4f 	dsb	sy
 800b498:	60fb      	str	r3, [r7, #12]
}
 800b49a:	bf00      	nop
 800b49c:	bf00      	nop
 800b49e:	e7fd      	b.n	800b49c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10b      	bne.n	800b4c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b4a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ac:	f383 8811 	msr	BASEPRI, r3
 800b4b0:	f3bf 8f6f 	isb	sy
 800b4b4:	f3bf 8f4f 	dsb	sy
 800b4b8:	60bb      	str	r3, [r7, #8]
}
 800b4ba:	bf00      	nop
 800b4bc:	bf00      	nop
 800b4be:	e7fd      	b.n	800b4bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4c4:	1e5a      	subs	r2, r3, #1
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d02c      	beq.n	800b530 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d128      	bne.n	800b530 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7fe fb2c 	bl	8009b40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b500:	4b0f      	ldr	r3, [pc, #60]	@ (800b540 <xTaskPriorityDisinherit+0xd8>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	429a      	cmp	r2, r3
 800b506:	d903      	bls.n	800b510 <xTaskPriorityDisinherit+0xa8>
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b50c:	4a0c      	ldr	r2, [pc, #48]	@ (800b540 <xTaskPriorityDisinherit+0xd8>)
 800b50e:	6013      	str	r3, [r2, #0]
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b514:	4613      	mov	r3, r2
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	4413      	add	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	4a09      	ldr	r2, [pc, #36]	@ (800b544 <xTaskPriorityDisinherit+0xdc>)
 800b51e:	441a      	add	r2, r3
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	3304      	adds	r3, #4
 800b524:	4619      	mov	r1, r3
 800b526:	4610      	mov	r0, r2
 800b528:	f7fe faad 	bl	8009a86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b52c:	2301      	movs	r3, #1
 800b52e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b530:	697b      	ldr	r3, [r7, #20]
	}
 800b532:	4618      	mov	r0, r3
 800b534:	3718      	adds	r7, #24
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	200013ec 	.word	0x200013ec
 800b540:	200018c8 	.word	0x200018c8
 800b544:	200013f0 	.word	0x200013f0

0800b548 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800b552:	f000 fdb9 	bl	800c0c8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800b556:	4b20      	ldr	r3, [pc, #128]	@ (800b5d8 <ulTaskNotifyTake+0x90>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d113      	bne.n	800b58a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b562:	4b1d      	ldr	r3, [pc, #116]	@ (800b5d8 <ulTaskNotifyTake+0x90>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2201      	movs	r2, #1
 800b568:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d00b      	beq.n	800b58a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b572:	2101      	movs	r1, #1
 800b574:	6838      	ldr	r0, [r7, #0]
 800b576:	f000 f8c9 	bl	800b70c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b57a:	4b18      	ldr	r3, [pc, #96]	@ (800b5dc <ulTaskNotifyTake+0x94>)
 800b57c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b580:	601a      	str	r2, [r3, #0]
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b58a:	f000 fdcf 	bl	800c12c <vPortExitCritical>

		taskENTER_CRITICAL();
 800b58e:	f000 fd9b 	bl	800c0c8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800b592:	4b11      	ldr	r3, [pc, #68]	@ (800b5d8 <ulTaskNotifyTake+0x90>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b59a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00e      	beq.n	800b5c0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d005      	beq.n	800b5b4 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800b5a8:	4b0b      	ldr	r3, [pc, #44]	@ (800b5d8 <ulTaskNotifyTake+0x90>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800b5b2:	e005      	b.n	800b5c0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800b5b4:	4b08      	ldr	r3, [pc, #32]	@ (800b5d8 <ulTaskNotifyTake+0x90>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	3a01      	subs	r2, #1
 800b5bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b5c0:	4b05      	ldr	r3, [pc, #20]	@ (800b5d8 <ulTaskNotifyTake+0x90>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800b5ca:	f000 fdaf 	bl	800c12c <vPortExitCritical>

		return ulReturn;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
	}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	200013ec 	.word	0x200013ec
 800b5dc:	e000ed04 	.word	0xe000ed04

0800b5e0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b08a      	sub	sp, #40	@ 0x28
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10b      	bne.n	800b608 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800b5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	61bb      	str	r3, [r7, #24]
}
 800b602:	bf00      	nop
 800b604:	bf00      	nop
 800b606:	e7fd      	b.n	800b604 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b608:	f000 fe3e 	bl	800c288 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800b610:	f3ef 8211 	mrs	r2, BASEPRI
 800b614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b618:	f383 8811 	msr	BASEPRI, r3
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	617a      	str	r2, [r7, #20]
 800b626:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b628:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b62a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b632:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b636:	2202      	movs	r2, #2
 800b638:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800b63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b642:	1c5a      	adds	r2, r3, #1
 800b644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b646:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b64a:	7ffb      	ldrb	r3, [r7, #31]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d147      	bne.n	800b6e0 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b654:	2b00      	cmp	r3, #0
 800b656:	d00b      	beq.n	800b670 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800b658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b65c:	f383 8811 	msr	BASEPRI, r3
 800b660:	f3bf 8f6f 	isb	sy
 800b664:	f3bf 8f4f 	dsb	sy
 800b668:	60fb      	str	r3, [r7, #12]
}
 800b66a:	bf00      	nop
 800b66c:	bf00      	nop
 800b66e:	e7fd      	b.n	800b66c <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b670:	4b20      	ldr	r3, [pc, #128]	@ (800b6f4 <vTaskNotifyGiveFromISR+0x114>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d11d      	bne.n	800b6b4 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67a:	3304      	adds	r3, #4
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7fe fa5f 	bl	8009b40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b686:	4b1c      	ldr	r3, [pc, #112]	@ (800b6f8 <vTaskNotifyGiveFromISR+0x118>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d903      	bls.n	800b696 <vTaskNotifyGiveFromISR+0xb6>
 800b68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b692:	4a19      	ldr	r2, [pc, #100]	@ (800b6f8 <vTaskNotifyGiveFromISR+0x118>)
 800b694:	6013      	str	r3, [r2, #0]
 800b696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b69a:	4613      	mov	r3, r2
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	4413      	add	r3, r2
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	4a16      	ldr	r2, [pc, #88]	@ (800b6fc <vTaskNotifyGiveFromISR+0x11c>)
 800b6a4:	441a      	add	r2, r3
 800b6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a8:	3304      	adds	r3, #4
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	4610      	mov	r0, r2
 800b6ae:	f7fe f9ea 	bl	8009a86 <vListInsertEnd>
 800b6b2:	e005      	b.n	800b6c0 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b6:	3318      	adds	r3, #24
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	4811      	ldr	r0, [pc, #68]	@ (800b700 <vTaskNotifyGiveFromISR+0x120>)
 800b6bc:	f7fe f9e3 	bl	8009a86 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6c4:	4b0f      	ldr	r3, [pc, #60]	@ (800b704 <vTaskNotifyGiveFromISR+0x124>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d908      	bls.n	800b6e0 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d002      	beq.n	800b6da <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b6da:	4b0b      	ldr	r3, [pc, #44]	@ (800b708 <vTaskNotifyGiveFromISR+0x128>)
 800b6dc:	2201      	movs	r2, #1
 800b6de:	601a      	str	r2, [r3, #0]
 800b6e0:	6a3b      	ldr	r3, [r7, #32]
 800b6e2:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	f383 8811 	msr	BASEPRI, r3
}
 800b6ea:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800b6ec:	bf00      	nop
 800b6ee:	3728      	adds	r7, #40	@ 0x28
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	200018e8 	.word	0x200018e8
 800b6f8:	200018c8 	.word	0x200018c8
 800b6fc:	200013f0 	.word	0x200013f0
 800b700:	20001880 	.word	0x20001880
 800b704:	200013ec 	.word	0x200013ec
 800b708:	200018d4 	.word	0x200018d4

0800b70c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b716:	4b21      	ldr	r3, [pc, #132]	@ (800b79c <prvAddCurrentTaskToDelayedList+0x90>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b71c:	4b20      	ldr	r3, [pc, #128]	@ (800b7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	3304      	adds	r3, #4
 800b722:	4618      	mov	r0, r3
 800b724:	f7fe fa0c 	bl	8009b40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b72e:	d10a      	bne.n	800b746 <prvAddCurrentTaskToDelayedList+0x3a>
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d007      	beq.n	800b746 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b736:	4b1a      	ldr	r3, [pc, #104]	@ (800b7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	3304      	adds	r3, #4
 800b73c:	4619      	mov	r1, r3
 800b73e:	4819      	ldr	r0, [pc, #100]	@ (800b7a4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b740:	f7fe f9a1 	bl	8009a86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b744:	e026      	b.n	800b794 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	4413      	add	r3, r2
 800b74c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b74e:	4b14      	ldr	r3, [pc, #80]	@ (800b7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	68ba      	ldr	r2, [r7, #8]
 800b754:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b756:	68ba      	ldr	r2, [r7, #8]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d209      	bcs.n	800b772 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b75e:	4b12      	ldr	r3, [pc, #72]	@ (800b7a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	4b0f      	ldr	r3, [pc, #60]	@ (800b7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	3304      	adds	r3, #4
 800b768:	4619      	mov	r1, r3
 800b76a:	4610      	mov	r0, r2
 800b76c:	f7fe f9af 	bl	8009ace <vListInsert>
}
 800b770:	e010      	b.n	800b794 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b772:	4b0e      	ldr	r3, [pc, #56]	@ (800b7ac <prvAddCurrentTaskToDelayedList+0xa0>)
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	4b0a      	ldr	r3, [pc, #40]	@ (800b7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	3304      	adds	r3, #4
 800b77c:	4619      	mov	r1, r3
 800b77e:	4610      	mov	r0, r2
 800b780:	f7fe f9a5 	bl	8009ace <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b784:	4b0a      	ldr	r3, [pc, #40]	@ (800b7b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d202      	bcs.n	800b794 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b78e:	4a08      	ldr	r2, [pc, #32]	@ (800b7b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	6013      	str	r3, [r2, #0]
}
 800b794:	bf00      	nop
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	200018c4 	.word	0x200018c4
 800b7a0:	200013ec 	.word	0x200013ec
 800b7a4:	200018ac 	.word	0x200018ac
 800b7a8:	2000187c 	.word	0x2000187c
 800b7ac:	20001878 	.word	0x20001878
 800b7b0:	200018e0 	.word	0x200018e0

0800b7b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b08a      	sub	sp, #40	@ 0x28
 800b7b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b7be:	f000 fb13 	bl	800bde8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b7c2:	4b1d      	ldr	r3, [pc, #116]	@ (800b838 <xTimerCreateTimerTask+0x84>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d021      	beq.n	800b80e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b7d2:	1d3a      	adds	r2, r7, #4
 800b7d4:	f107 0108 	add.w	r1, r7, #8
 800b7d8:	f107 030c 	add.w	r3, r7, #12
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7fe f90b 	bl	80099f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b7e2:	6879      	ldr	r1, [r7, #4]
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	9202      	str	r2, [sp, #8]
 800b7ea:	9301      	str	r3, [sp, #4]
 800b7ec:	2302      	movs	r3, #2
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	460a      	mov	r2, r1
 800b7f4:	4911      	ldr	r1, [pc, #68]	@ (800b83c <xTimerCreateTimerTask+0x88>)
 800b7f6:	4812      	ldr	r0, [pc, #72]	@ (800b840 <xTimerCreateTimerTask+0x8c>)
 800b7f8:	f7fe fec6 	bl	800a588 <xTaskCreateStatic>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	4a11      	ldr	r2, [pc, #68]	@ (800b844 <xTimerCreateTimerTask+0x90>)
 800b800:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b802:	4b10      	ldr	r3, [pc, #64]	@ (800b844 <xTimerCreateTimerTask+0x90>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d001      	beq.n	800b80e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b80a:	2301      	movs	r3, #1
 800b80c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d10b      	bne.n	800b82c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b818:	f383 8811 	msr	BASEPRI, r3
 800b81c:	f3bf 8f6f 	isb	sy
 800b820:	f3bf 8f4f 	dsb	sy
 800b824:	613b      	str	r3, [r7, #16]
}
 800b826:	bf00      	nop
 800b828:	bf00      	nop
 800b82a:	e7fd      	b.n	800b828 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b82c:	697b      	ldr	r3, [r7, #20]
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3718      	adds	r7, #24
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	2000191c 	.word	0x2000191c
 800b83c:	0800d144 	.word	0x0800d144
 800b840:	0800b981 	.word	0x0800b981
 800b844:	20001920 	.word	0x20001920

0800b848 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b08a      	sub	sp, #40	@ 0x28
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	607a      	str	r2, [r7, #4]
 800b854:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b856:	2300      	movs	r3, #0
 800b858:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d10b      	bne.n	800b878 <xTimerGenericCommand+0x30>
	__asm volatile
 800b860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b864:	f383 8811 	msr	BASEPRI, r3
 800b868:	f3bf 8f6f 	isb	sy
 800b86c:	f3bf 8f4f 	dsb	sy
 800b870:	623b      	str	r3, [r7, #32]
}
 800b872:	bf00      	nop
 800b874:	bf00      	nop
 800b876:	e7fd      	b.n	800b874 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b878:	4b19      	ldr	r3, [pc, #100]	@ (800b8e0 <xTimerGenericCommand+0x98>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d02a      	beq.n	800b8d6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	2b05      	cmp	r3, #5
 800b890:	dc18      	bgt.n	800b8c4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b892:	f7ff fdcb 	bl	800b42c <xTaskGetSchedulerState>
 800b896:	4603      	mov	r3, r0
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d109      	bne.n	800b8b0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b89c:	4b10      	ldr	r3, [pc, #64]	@ (800b8e0 <xTimerGenericCommand+0x98>)
 800b89e:	6818      	ldr	r0, [r3, #0]
 800b8a0:	f107 0110 	add.w	r1, r7, #16
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8a8:	f7fe fa7e 	bl	8009da8 <xQueueGenericSend>
 800b8ac:	6278      	str	r0, [r7, #36]	@ 0x24
 800b8ae:	e012      	b.n	800b8d6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b8b0:	4b0b      	ldr	r3, [pc, #44]	@ (800b8e0 <xTimerGenericCommand+0x98>)
 800b8b2:	6818      	ldr	r0, [r3, #0]
 800b8b4:	f107 0110 	add.w	r1, r7, #16
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f7fe fa74 	bl	8009da8 <xQueueGenericSend>
 800b8c0:	6278      	str	r0, [r7, #36]	@ 0x24
 800b8c2:	e008      	b.n	800b8d6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b8c4:	4b06      	ldr	r3, [pc, #24]	@ (800b8e0 <xTimerGenericCommand+0x98>)
 800b8c6:	6818      	ldr	r0, [r3, #0]
 800b8c8:	f107 0110 	add.w	r1, r7, #16
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	f7fe fb6c 	bl	8009fac <xQueueGenericSendFromISR>
 800b8d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3728      	adds	r7, #40	@ 0x28
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	2000191c 	.word	0x2000191c

0800b8e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b088      	sub	sp, #32
 800b8e8:	af02      	add	r7, sp, #8
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8ee:	4b23      	ldr	r3, [pc, #140]	@ (800b97c <prvProcessExpiredTimer+0x98>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	3304      	adds	r3, #4
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7fe f91f 	bl	8009b40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b908:	f003 0304 	and.w	r3, r3, #4
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d023      	beq.n	800b958 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	699a      	ldr	r2, [r3, #24]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	18d1      	adds	r1, r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	683a      	ldr	r2, [r7, #0]
 800b91c:	6978      	ldr	r0, [r7, #20]
 800b91e:	f000 f8d5 	bl	800bacc <prvInsertTimerInActiveList>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d020      	beq.n	800b96a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b928:	2300      	movs	r3, #0
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	2300      	movs	r3, #0
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	2100      	movs	r1, #0
 800b932:	6978      	ldr	r0, [r7, #20]
 800b934:	f7ff ff88 	bl	800b848 <xTimerGenericCommand>
 800b938:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d114      	bne.n	800b96a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	60fb      	str	r3, [r7, #12]
}
 800b952:	bf00      	nop
 800b954:	bf00      	nop
 800b956:	e7fd      	b.n	800b954 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b95e:	f023 0301 	bic.w	r3, r3, #1
 800b962:	b2da      	uxtb	r2, r3
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	6a1b      	ldr	r3, [r3, #32]
 800b96e:	6978      	ldr	r0, [r7, #20]
 800b970:	4798      	blx	r3
}
 800b972:	bf00      	nop
 800b974:	3718      	adds	r7, #24
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	20001914 	.word	0x20001914

0800b980 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b988:	f107 0308 	add.w	r3, r7, #8
 800b98c:	4618      	mov	r0, r3
 800b98e:	f000 f859 	bl	800ba44 <prvGetNextExpireTime>
 800b992:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	4619      	mov	r1, r3
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	f000 f805 	bl	800b9a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b99e:	f000 f8d7 	bl	800bb50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b9a2:	bf00      	nop
 800b9a4:	e7f0      	b.n	800b988 <prvTimerTask+0x8>
	...

0800b9a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b9b2:	f7ff f84d 	bl	800aa50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9b6:	f107 0308 	add.w	r3, r7, #8
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f000 f866 	bl	800ba8c <prvSampleTimeNow>
 800b9c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d130      	bne.n	800ba2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10a      	bne.n	800b9e4 <prvProcessTimerOrBlockTask+0x3c>
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d806      	bhi.n	800b9e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b9d6:	f7ff f849 	bl	800aa6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b9da:	68f9      	ldr	r1, [r7, #12]
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f7ff ff81 	bl	800b8e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b9e2:	e024      	b.n	800ba2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d008      	beq.n	800b9fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b9ea:	4b13      	ldr	r3, [pc, #76]	@ (800ba38 <prvProcessTimerOrBlockTask+0x90>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d101      	bne.n	800b9f8 <prvProcessTimerOrBlockTask+0x50>
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e000      	b.n	800b9fa <prvProcessTimerOrBlockTask+0x52>
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b9fc:	4b0f      	ldr	r3, [pc, #60]	@ (800ba3c <prvProcessTimerOrBlockTask+0x94>)
 800b9fe:	6818      	ldr	r0, [r3, #0]
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	1ad3      	subs	r3, r2, r3
 800ba06:	683a      	ldr	r2, [r7, #0]
 800ba08:	4619      	mov	r1, r3
 800ba0a:	f7fe fd89 	bl	800a520 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ba0e:	f7ff f82d 	bl	800aa6c <xTaskResumeAll>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d10a      	bne.n	800ba2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ba18:	4b09      	ldr	r3, [pc, #36]	@ (800ba40 <prvProcessTimerOrBlockTask+0x98>)
 800ba1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba1e:	601a      	str	r2, [r3, #0]
 800ba20:	f3bf 8f4f 	dsb	sy
 800ba24:	f3bf 8f6f 	isb	sy
}
 800ba28:	e001      	b.n	800ba2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ba2a:	f7ff f81f 	bl	800aa6c <xTaskResumeAll>
}
 800ba2e:	bf00      	nop
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	20001918 	.word	0x20001918
 800ba3c:	2000191c 	.word	0x2000191c
 800ba40:	e000ed04 	.word	0xe000ed04

0800ba44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ba4c:	4b0e      	ldr	r3, [pc, #56]	@ (800ba88 <prvGetNextExpireTime+0x44>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d101      	bne.n	800ba5a <prvGetNextExpireTime+0x16>
 800ba56:	2201      	movs	r2, #1
 800ba58:	e000      	b.n	800ba5c <prvGetNextExpireTime+0x18>
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d105      	bne.n	800ba74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba68:	4b07      	ldr	r3, [pc, #28]	@ (800ba88 <prvGetNextExpireTime+0x44>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	60fb      	str	r3, [r7, #12]
 800ba72:	e001      	b.n	800ba78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ba74:	2300      	movs	r3, #0
 800ba76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ba78:	68fb      	ldr	r3, [r7, #12]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3714      	adds	r7, #20
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	20001914 	.word	0x20001914

0800ba8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ba94:	f7ff f888 	bl	800aba8 <xTaskGetTickCount>
 800ba98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ba9a:	4b0b      	ldr	r3, [pc, #44]	@ (800bac8 <prvSampleTimeNow+0x3c>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d205      	bcs.n	800bab0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800baa4:	f000 f93a 	bl	800bd1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	601a      	str	r2, [r3, #0]
 800baae:	e002      	b.n	800bab6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bab6:	4a04      	ldr	r2, [pc, #16]	@ (800bac8 <prvSampleTimeNow+0x3c>)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800babc:	68fb      	ldr	r3, [r7, #12]
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	20001924 	.word	0x20001924

0800bacc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b086      	sub	sp, #24
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]
 800bad8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bada:	2300      	movs	r3, #0
 800badc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	68ba      	ldr	r2, [r7, #8]
 800bae2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800baea:	68ba      	ldr	r2, [r7, #8]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d812      	bhi.n	800bb18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	1ad2      	subs	r2, r2, r3
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	699b      	ldr	r3, [r3, #24]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d302      	bcc.n	800bb06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bb00:	2301      	movs	r3, #1
 800bb02:	617b      	str	r3, [r7, #20]
 800bb04:	e01b      	b.n	800bb3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bb06:	4b10      	ldr	r3, [pc, #64]	@ (800bb48 <prvInsertTimerInActiveList+0x7c>)
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	3304      	adds	r3, #4
 800bb0e:	4619      	mov	r1, r3
 800bb10:	4610      	mov	r0, r2
 800bb12:	f7fd ffdc 	bl	8009ace <vListInsert>
 800bb16:	e012      	b.n	800bb3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d206      	bcs.n	800bb2e <prvInsertTimerInActiveList+0x62>
 800bb20:	68ba      	ldr	r2, [r7, #8]
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d302      	bcc.n	800bb2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	617b      	str	r3, [r7, #20]
 800bb2c:	e007      	b.n	800bb3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb2e:	4b07      	ldr	r3, [pc, #28]	@ (800bb4c <prvInsertTimerInActiveList+0x80>)
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	3304      	adds	r3, #4
 800bb36:	4619      	mov	r1, r3
 800bb38:	4610      	mov	r0, r2
 800bb3a:	f7fd ffc8 	bl	8009ace <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bb3e:	697b      	ldr	r3, [r7, #20]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3718      	adds	r7, #24
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	20001918 	.word	0x20001918
 800bb4c:	20001914 	.word	0x20001914

0800bb50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b08e      	sub	sp, #56	@ 0x38
 800bb54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb56:	e0ce      	b.n	800bcf6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	da19      	bge.n	800bb92 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bb5e:	1d3b      	adds	r3, r7, #4
 800bb60:	3304      	adds	r3, #4
 800bb62:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bb64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d10b      	bne.n	800bb82 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	61fb      	str	r3, [r7, #28]
}
 800bb7c:	bf00      	nop
 800bb7e:	bf00      	nop
 800bb80:	e7fd      	b.n	800bb7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bb82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb88:	6850      	ldr	r0, [r2, #4]
 800bb8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb8c:	6892      	ldr	r2, [r2, #8]
 800bb8e:	4611      	mov	r1, r2
 800bb90:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f2c0 80ae 	blt.w	800bcf6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba0:	695b      	ldr	r3, [r3, #20]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d004      	beq.n	800bbb0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba8:	3304      	adds	r3, #4
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7fd ffc8 	bl	8009b40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbb0:	463b      	mov	r3, r7
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7ff ff6a 	bl	800ba8c <prvSampleTimeNow>
 800bbb8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2b09      	cmp	r3, #9
 800bbbe:	f200 8097 	bhi.w	800bcf0 <prvProcessReceivedCommands+0x1a0>
 800bbc2:	a201      	add	r2, pc, #4	@ (adr r2, 800bbc8 <prvProcessReceivedCommands+0x78>)
 800bbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc8:	0800bbf1 	.word	0x0800bbf1
 800bbcc:	0800bbf1 	.word	0x0800bbf1
 800bbd0:	0800bbf1 	.word	0x0800bbf1
 800bbd4:	0800bc67 	.word	0x0800bc67
 800bbd8:	0800bc7b 	.word	0x0800bc7b
 800bbdc:	0800bcc7 	.word	0x0800bcc7
 800bbe0:	0800bbf1 	.word	0x0800bbf1
 800bbe4:	0800bbf1 	.word	0x0800bbf1
 800bbe8:	0800bc67 	.word	0x0800bc67
 800bbec:	0800bc7b 	.word	0x0800bc7b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bbf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbf2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbf6:	f043 0301 	orr.w	r3, r3, #1
 800bbfa:	b2da      	uxtb	r2, r3
 800bbfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbfe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc02:	68ba      	ldr	r2, [r7, #8]
 800bc04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc06:	699b      	ldr	r3, [r3, #24]
 800bc08:	18d1      	adds	r1, r2, r3
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc10:	f7ff ff5c 	bl	800bacc <prvInsertTimerInActiveList>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d06c      	beq.n	800bcf4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc1c:	6a1b      	ldr	r3, [r3, #32]
 800bc1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc28:	f003 0304 	and.w	r3, r3, #4
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d061      	beq.n	800bcf4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc34:	699b      	ldr	r3, [r3, #24]
 800bc36:	441a      	add	r2, r3
 800bc38:	2300      	movs	r3, #0
 800bc3a:	9300      	str	r3, [sp, #0]
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	2100      	movs	r1, #0
 800bc40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc42:	f7ff fe01 	bl	800b848 <xTimerGenericCommand>
 800bc46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bc48:	6a3b      	ldr	r3, [r7, #32]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d152      	bne.n	800bcf4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bc4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc52:	f383 8811 	msr	BASEPRI, r3
 800bc56:	f3bf 8f6f 	isb	sy
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	61bb      	str	r3, [r7, #24]
}
 800bc60:	bf00      	nop
 800bc62:	bf00      	nop
 800bc64:	e7fd      	b.n	800bc62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc6c:	f023 0301 	bic.w	r3, r3, #1
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bc78:	e03d      	b.n	800bcf6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc80:	f043 0301 	orr.w	r3, r3, #1
 800bc84:	b2da      	uxtb	r2, r3
 800bc86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bc8c:	68ba      	ldr	r2, [r7, #8]
 800bc8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc90:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bc92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc94:	699b      	ldr	r3, [r3, #24]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10b      	bne.n	800bcb2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bc9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc9e:	f383 8811 	msr	BASEPRI, r3
 800bca2:	f3bf 8f6f 	isb	sy
 800bca6:	f3bf 8f4f 	dsb	sy
 800bcaa:	617b      	str	r3, [r7, #20]
}
 800bcac:	bf00      	nop
 800bcae:	bf00      	nop
 800bcb0:	e7fd      	b.n	800bcae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bcb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcb4:	699a      	ldr	r2, [r3, #24]
 800bcb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb8:	18d1      	adds	r1, r2, r3
 800bcba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bcc0:	f7ff ff04 	bl	800bacc <prvInsertTimerInActiveList>
					break;
 800bcc4:	e017      	b.n	800bcf6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bcc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bccc:	f003 0302 	and.w	r3, r3, #2
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d103      	bne.n	800bcdc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bcd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bcd6:	f000 fbe7 	bl	800c4a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bcda:	e00c      	b.n	800bcf6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bce2:	f023 0301 	bic.w	r3, r3, #1
 800bce6:	b2da      	uxtb	r2, r3
 800bce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bcee:	e002      	b.n	800bcf6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bcf0:	bf00      	nop
 800bcf2:	e000      	b.n	800bcf6 <prvProcessReceivedCommands+0x1a6>
					break;
 800bcf4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bcf6:	4b08      	ldr	r3, [pc, #32]	@ (800bd18 <prvProcessReceivedCommands+0x1c8>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	1d39      	adds	r1, r7, #4
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7fe f9f2 	bl	800a0e8 <xQueueReceive>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	f47f af26 	bne.w	800bb58 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bd0c:	bf00      	nop
 800bd0e:	bf00      	nop
 800bd10:	3730      	adds	r7, #48	@ 0x30
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	2000191c 	.word	0x2000191c

0800bd1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b088      	sub	sp, #32
 800bd20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd22:	e049      	b.n	800bdb8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd24:	4b2e      	ldr	r3, [pc, #184]	@ (800bde0 <prvSwitchTimerLists+0xc4>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd2e:	4b2c      	ldr	r3, [pc, #176]	@ (800bde0 <prvSwitchTimerLists+0xc4>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	68db      	ldr	r3, [r3, #12]
 800bd36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	3304      	adds	r3, #4
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7fd feff 	bl	8009b40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	6a1b      	ldr	r3, [r3, #32]
 800bd46:	68f8      	ldr	r0, [r7, #12]
 800bd48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd50:	f003 0304 	and.w	r3, r3, #4
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d02f      	beq.n	800bdb8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	699b      	ldr	r3, [r3, #24]
 800bd5c:	693a      	ldr	r2, [r7, #16]
 800bd5e:	4413      	add	r3, r2
 800bd60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bd62:	68ba      	ldr	r2, [r7, #8]
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d90e      	bls.n	800bd88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	68ba      	ldr	r2, [r7, #8]
 800bd6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd76:	4b1a      	ldr	r3, [pc, #104]	@ (800bde0 <prvSwitchTimerLists+0xc4>)
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	4619      	mov	r1, r3
 800bd80:	4610      	mov	r0, r2
 800bd82:	f7fd fea4 	bl	8009ace <vListInsert>
 800bd86:	e017      	b.n	800bdb8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd88:	2300      	movs	r3, #0
 800bd8a:	9300      	str	r3, [sp, #0]
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	693a      	ldr	r2, [r7, #16]
 800bd90:	2100      	movs	r1, #0
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	f7ff fd58 	bl	800b848 <xTimerGenericCommand>
 800bd98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d10b      	bne.n	800bdb8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bda0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	603b      	str	r3, [r7, #0]
}
 800bdb2:	bf00      	nop
 800bdb4:	bf00      	nop
 800bdb6:	e7fd      	b.n	800bdb4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bdb8:	4b09      	ldr	r3, [pc, #36]	@ (800bde0 <prvSwitchTimerLists+0xc4>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1b0      	bne.n	800bd24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bdc2:	4b07      	ldr	r3, [pc, #28]	@ (800bde0 <prvSwitchTimerLists+0xc4>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bdc8:	4b06      	ldr	r3, [pc, #24]	@ (800bde4 <prvSwitchTimerLists+0xc8>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a04      	ldr	r2, [pc, #16]	@ (800bde0 <prvSwitchTimerLists+0xc4>)
 800bdce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bdd0:	4a04      	ldr	r2, [pc, #16]	@ (800bde4 <prvSwitchTimerLists+0xc8>)
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	6013      	str	r3, [r2, #0]
}
 800bdd6:	bf00      	nop
 800bdd8:	3718      	adds	r7, #24
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	20001914 	.word	0x20001914
 800bde4:	20001918 	.word	0x20001918

0800bde8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bdee:	f000 f96b 	bl	800c0c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bdf2:	4b15      	ldr	r3, [pc, #84]	@ (800be48 <prvCheckForValidListAndQueue+0x60>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d120      	bne.n	800be3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bdfa:	4814      	ldr	r0, [pc, #80]	@ (800be4c <prvCheckForValidListAndQueue+0x64>)
 800bdfc:	f7fd fe16 	bl	8009a2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800be00:	4813      	ldr	r0, [pc, #76]	@ (800be50 <prvCheckForValidListAndQueue+0x68>)
 800be02:	f7fd fe13 	bl	8009a2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800be06:	4b13      	ldr	r3, [pc, #76]	@ (800be54 <prvCheckForValidListAndQueue+0x6c>)
 800be08:	4a10      	ldr	r2, [pc, #64]	@ (800be4c <prvCheckForValidListAndQueue+0x64>)
 800be0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800be0c:	4b12      	ldr	r3, [pc, #72]	@ (800be58 <prvCheckForValidListAndQueue+0x70>)
 800be0e:	4a10      	ldr	r2, [pc, #64]	@ (800be50 <prvCheckForValidListAndQueue+0x68>)
 800be10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be12:	2300      	movs	r3, #0
 800be14:	9300      	str	r3, [sp, #0]
 800be16:	4b11      	ldr	r3, [pc, #68]	@ (800be5c <prvCheckForValidListAndQueue+0x74>)
 800be18:	4a11      	ldr	r2, [pc, #68]	@ (800be60 <prvCheckForValidListAndQueue+0x78>)
 800be1a:	2110      	movs	r1, #16
 800be1c:	200a      	movs	r0, #10
 800be1e:	f7fd ff23 	bl	8009c68 <xQueueGenericCreateStatic>
 800be22:	4603      	mov	r3, r0
 800be24:	4a08      	ldr	r2, [pc, #32]	@ (800be48 <prvCheckForValidListAndQueue+0x60>)
 800be26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800be28:	4b07      	ldr	r3, [pc, #28]	@ (800be48 <prvCheckForValidListAndQueue+0x60>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d005      	beq.n	800be3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800be30:	4b05      	ldr	r3, [pc, #20]	@ (800be48 <prvCheckForValidListAndQueue+0x60>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	490b      	ldr	r1, [pc, #44]	@ (800be64 <prvCheckForValidListAndQueue+0x7c>)
 800be36:	4618      	mov	r0, r3
 800be38:	f7fe fb48 	bl	800a4cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be3c:	f000 f976 	bl	800c12c <vPortExitCritical>
}
 800be40:	bf00      	nop
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	2000191c 	.word	0x2000191c
 800be4c:	200018ec 	.word	0x200018ec
 800be50:	20001900 	.word	0x20001900
 800be54:	20001914 	.word	0x20001914
 800be58:	20001918 	.word	0x20001918
 800be5c:	200019c8 	.word	0x200019c8
 800be60:	20001928 	.word	0x20001928
 800be64:	0800d14c 	.word	0x0800d14c

0800be68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be68:	b480      	push	{r7}
 800be6a:	b085      	sub	sp, #20
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	3b04      	subs	r3, #4
 800be78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800be80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	3b04      	subs	r3, #4
 800be86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	f023 0201 	bic.w	r2, r3, #1
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	3b04      	subs	r3, #4
 800be96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be98:	4a0c      	ldr	r2, [pc, #48]	@ (800becc <pxPortInitialiseStack+0x64>)
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	3b14      	subs	r3, #20
 800bea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	3b04      	subs	r3, #4
 800beae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f06f 0202 	mvn.w	r2, #2
 800beb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	3b20      	subs	r3, #32
 800bebc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bebe:	68fb      	ldr	r3, [r7, #12]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3714      	adds	r7, #20
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr
 800becc:	0800bed1 	.word	0x0800bed1

0800bed0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bed0:	b480      	push	{r7}
 800bed2:	b085      	sub	sp, #20
 800bed4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800beda:	4b13      	ldr	r3, [pc, #76]	@ (800bf28 <prvTaskExitError+0x58>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bee2:	d00b      	beq.n	800befc <prvTaskExitError+0x2c>
	__asm volatile
 800bee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee8:	f383 8811 	msr	BASEPRI, r3
 800beec:	f3bf 8f6f 	isb	sy
 800bef0:	f3bf 8f4f 	dsb	sy
 800bef4:	60fb      	str	r3, [r7, #12]
}
 800bef6:	bf00      	nop
 800bef8:	bf00      	nop
 800befa:	e7fd      	b.n	800bef8 <prvTaskExitError+0x28>
	__asm volatile
 800befc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf00:	f383 8811 	msr	BASEPRI, r3
 800bf04:	f3bf 8f6f 	isb	sy
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	60bb      	str	r3, [r7, #8]
}
 800bf0e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf10:	bf00      	nop
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d0fc      	beq.n	800bf12 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf18:	bf00      	nop
 800bf1a:	bf00      	nop
 800bf1c:	3714      	adds	r7, #20
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr
 800bf26:	bf00      	nop
 800bf28:	20000028 	.word	0x20000028
 800bf2c:	00000000 	.word	0x00000000

0800bf30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf30:	4b07      	ldr	r3, [pc, #28]	@ (800bf50 <pxCurrentTCBConst2>)
 800bf32:	6819      	ldr	r1, [r3, #0]
 800bf34:	6808      	ldr	r0, [r1, #0]
 800bf36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf3a:	f380 8809 	msr	PSP, r0
 800bf3e:	f3bf 8f6f 	isb	sy
 800bf42:	f04f 0000 	mov.w	r0, #0
 800bf46:	f380 8811 	msr	BASEPRI, r0
 800bf4a:	4770      	bx	lr
 800bf4c:	f3af 8000 	nop.w

0800bf50 <pxCurrentTCBConst2>:
 800bf50:	200013ec 	.word	0x200013ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf54:	bf00      	nop
 800bf56:	bf00      	nop

0800bf58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf58:	4808      	ldr	r0, [pc, #32]	@ (800bf7c <prvPortStartFirstTask+0x24>)
 800bf5a:	6800      	ldr	r0, [r0, #0]
 800bf5c:	6800      	ldr	r0, [r0, #0]
 800bf5e:	f380 8808 	msr	MSP, r0
 800bf62:	f04f 0000 	mov.w	r0, #0
 800bf66:	f380 8814 	msr	CONTROL, r0
 800bf6a:	b662      	cpsie	i
 800bf6c:	b661      	cpsie	f
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	f3bf 8f6f 	isb	sy
 800bf76:	df00      	svc	0
 800bf78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf7a:	bf00      	nop
 800bf7c:	e000ed08 	.word	0xe000ed08

0800bf80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bf86:	4b47      	ldr	r3, [pc, #284]	@ (800c0a4 <xPortStartScheduler+0x124>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a47      	ldr	r2, [pc, #284]	@ (800c0a8 <xPortStartScheduler+0x128>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d10b      	bne.n	800bfa8 <xPortStartScheduler+0x28>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	613b      	str	r3, [r7, #16]
}
 800bfa2:	bf00      	nop
 800bfa4:	bf00      	nop
 800bfa6:	e7fd      	b.n	800bfa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bfa8:	4b3e      	ldr	r3, [pc, #248]	@ (800c0a4 <xPortStartScheduler+0x124>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a3f      	ldr	r2, [pc, #252]	@ (800c0ac <xPortStartScheduler+0x12c>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d10b      	bne.n	800bfca <xPortStartScheduler+0x4a>
	__asm volatile
 800bfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb6:	f383 8811 	msr	BASEPRI, r3
 800bfba:	f3bf 8f6f 	isb	sy
 800bfbe:	f3bf 8f4f 	dsb	sy
 800bfc2:	60fb      	str	r3, [r7, #12]
}
 800bfc4:	bf00      	nop
 800bfc6:	bf00      	nop
 800bfc8:	e7fd      	b.n	800bfc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bfca:	4b39      	ldr	r3, [pc, #228]	@ (800c0b0 <xPortStartScheduler+0x130>)
 800bfcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	b2db      	uxtb	r3, r3
 800bfd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	22ff      	movs	r2, #255	@ 0xff
 800bfda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	b2db      	uxtb	r3, r3
 800bfe2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bfe4:	78fb      	ldrb	r3, [r7, #3]
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bfec:	b2da      	uxtb	r2, r3
 800bfee:	4b31      	ldr	r3, [pc, #196]	@ (800c0b4 <xPortStartScheduler+0x134>)
 800bff0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bff2:	4b31      	ldr	r3, [pc, #196]	@ (800c0b8 <xPortStartScheduler+0x138>)
 800bff4:	2207      	movs	r2, #7
 800bff6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bff8:	e009      	b.n	800c00e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bffa:	4b2f      	ldr	r3, [pc, #188]	@ (800c0b8 <xPortStartScheduler+0x138>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	3b01      	subs	r3, #1
 800c000:	4a2d      	ldr	r2, [pc, #180]	@ (800c0b8 <xPortStartScheduler+0x138>)
 800c002:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c004:	78fb      	ldrb	r3, [r7, #3]
 800c006:	b2db      	uxtb	r3, r3
 800c008:	005b      	lsls	r3, r3, #1
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c00e:	78fb      	ldrb	r3, [r7, #3]
 800c010:	b2db      	uxtb	r3, r3
 800c012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c016:	2b80      	cmp	r3, #128	@ 0x80
 800c018:	d0ef      	beq.n	800bffa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c01a:	4b27      	ldr	r3, [pc, #156]	@ (800c0b8 <xPortStartScheduler+0x138>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f1c3 0307 	rsb	r3, r3, #7
 800c022:	2b04      	cmp	r3, #4
 800c024:	d00b      	beq.n	800c03e <xPortStartScheduler+0xbe>
	__asm volatile
 800c026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c02a:	f383 8811 	msr	BASEPRI, r3
 800c02e:	f3bf 8f6f 	isb	sy
 800c032:	f3bf 8f4f 	dsb	sy
 800c036:	60bb      	str	r3, [r7, #8]
}
 800c038:	bf00      	nop
 800c03a:	bf00      	nop
 800c03c:	e7fd      	b.n	800c03a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c03e:	4b1e      	ldr	r3, [pc, #120]	@ (800c0b8 <xPortStartScheduler+0x138>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	021b      	lsls	r3, r3, #8
 800c044:	4a1c      	ldr	r2, [pc, #112]	@ (800c0b8 <xPortStartScheduler+0x138>)
 800c046:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c048:	4b1b      	ldr	r3, [pc, #108]	@ (800c0b8 <xPortStartScheduler+0x138>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c050:	4a19      	ldr	r2, [pc, #100]	@ (800c0b8 <xPortStartScheduler+0x138>)
 800c052:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	b2da      	uxtb	r2, r3
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c05c:	4b17      	ldr	r3, [pc, #92]	@ (800c0bc <xPortStartScheduler+0x13c>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a16      	ldr	r2, [pc, #88]	@ (800c0bc <xPortStartScheduler+0x13c>)
 800c062:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c066:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c068:	4b14      	ldr	r3, [pc, #80]	@ (800c0bc <xPortStartScheduler+0x13c>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4a13      	ldr	r2, [pc, #76]	@ (800c0bc <xPortStartScheduler+0x13c>)
 800c06e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c072:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c074:	f000 f8da 	bl	800c22c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c078:	4b11      	ldr	r3, [pc, #68]	@ (800c0c0 <xPortStartScheduler+0x140>)
 800c07a:	2200      	movs	r2, #0
 800c07c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c07e:	f000 f8f9 	bl	800c274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c082:	4b10      	ldr	r3, [pc, #64]	@ (800c0c4 <xPortStartScheduler+0x144>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a0f      	ldr	r2, [pc, #60]	@ (800c0c4 <xPortStartScheduler+0x144>)
 800c088:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c08c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c08e:	f7ff ff63 	bl	800bf58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c092:	f7fe ff4d 	bl	800af30 <vTaskSwitchContext>
	prvTaskExitError();
 800c096:	f7ff ff1b 	bl	800bed0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3718      	adds	r7, #24
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	e000ed00 	.word	0xe000ed00
 800c0a8:	410fc271 	.word	0x410fc271
 800c0ac:	410fc270 	.word	0x410fc270
 800c0b0:	e000e400 	.word	0xe000e400
 800c0b4:	20001a18 	.word	0x20001a18
 800c0b8:	20001a1c 	.word	0x20001a1c
 800c0bc:	e000ed20 	.word	0xe000ed20
 800c0c0:	20000028 	.word	0x20000028
 800c0c4:	e000ef34 	.word	0xe000ef34

0800c0c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d2:	f383 8811 	msr	BASEPRI, r3
 800c0d6:	f3bf 8f6f 	isb	sy
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	607b      	str	r3, [r7, #4]
}
 800c0e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c0e2:	4b10      	ldr	r3, [pc, #64]	@ (800c124 <vPortEnterCritical+0x5c>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	4a0e      	ldr	r2, [pc, #56]	@ (800c124 <vPortEnterCritical+0x5c>)
 800c0ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c0ec:	4b0d      	ldr	r3, [pc, #52]	@ (800c124 <vPortEnterCritical+0x5c>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d110      	bne.n	800c116 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c0f4:	4b0c      	ldr	r3, [pc, #48]	@ (800c128 <vPortEnterCritical+0x60>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00b      	beq.n	800c116 <vPortEnterCritical+0x4e>
	__asm volatile
 800c0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c102:	f383 8811 	msr	BASEPRI, r3
 800c106:	f3bf 8f6f 	isb	sy
 800c10a:	f3bf 8f4f 	dsb	sy
 800c10e:	603b      	str	r3, [r7, #0]
}
 800c110:	bf00      	nop
 800c112:	bf00      	nop
 800c114:	e7fd      	b.n	800c112 <vPortEnterCritical+0x4a>
	}
}
 800c116:	bf00      	nop
 800c118:	370c      	adds	r7, #12
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	20000028 	.word	0x20000028
 800c128:	e000ed04 	.word	0xe000ed04

0800c12c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c132:	4b12      	ldr	r3, [pc, #72]	@ (800c17c <vPortExitCritical+0x50>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d10b      	bne.n	800c152 <vPortExitCritical+0x26>
	__asm volatile
 800c13a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c13e:	f383 8811 	msr	BASEPRI, r3
 800c142:	f3bf 8f6f 	isb	sy
 800c146:	f3bf 8f4f 	dsb	sy
 800c14a:	607b      	str	r3, [r7, #4]
}
 800c14c:	bf00      	nop
 800c14e:	bf00      	nop
 800c150:	e7fd      	b.n	800c14e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c152:	4b0a      	ldr	r3, [pc, #40]	@ (800c17c <vPortExitCritical+0x50>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	3b01      	subs	r3, #1
 800c158:	4a08      	ldr	r2, [pc, #32]	@ (800c17c <vPortExitCritical+0x50>)
 800c15a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c15c:	4b07      	ldr	r3, [pc, #28]	@ (800c17c <vPortExitCritical+0x50>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d105      	bne.n	800c170 <vPortExitCritical+0x44>
 800c164:	2300      	movs	r3, #0
 800c166:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	f383 8811 	msr	BASEPRI, r3
}
 800c16e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c170:	bf00      	nop
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr
 800c17c:	20000028 	.word	0x20000028

0800c180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c180:	f3ef 8009 	mrs	r0, PSP
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	4b15      	ldr	r3, [pc, #84]	@ (800c1e0 <pxCurrentTCBConst>)
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	f01e 0f10 	tst.w	lr, #16
 800c190:	bf08      	it	eq
 800c192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19a:	6010      	str	r0, [r2, #0]
 800c19c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c1a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c1a4:	f380 8811 	msr	BASEPRI, r0
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	f3bf 8f6f 	isb	sy
 800c1b0:	f7fe febe 	bl	800af30 <vTaskSwitchContext>
 800c1b4:	f04f 0000 	mov.w	r0, #0
 800c1b8:	f380 8811 	msr	BASEPRI, r0
 800c1bc:	bc09      	pop	{r0, r3}
 800c1be:	6819      	ldr	r1, [r3, #0]
 800c1c0:	6808      	ldr	r0, [r1, #0]
 800c1c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c6:	f01e 0f10 	tst.w	lr, #16
 800c1ca:	bf08      	it	eq
 800c1cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c1d0:	f380 8809 	msr	PSP, r0
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	4770      	bx	lr
 800c1da:	bf00      	nop
 800c1dc:	f3af 8000 	nop.w

0800c1e0 <pxCurrentTCBConst>:
 800c1e0:	200013ec 	.word	0x200013ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c1e4:	bf00      	nop
 800c1e6:	bf00      	nop

0800c1e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f2:	f383 8811 	msr	BASEPRI, r3
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	607b      	str	r3, [r7, #4]
}
 800c200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c202:	f7fe fddb 	bl	800adbc <xTaskIncrementTick>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d003      	beq.n	800c214 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c20c:	4b06      	ldr	r3, [pc, #24]	@ (800c228 <xPortSysTickHandler+0x40>)
 800c20e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c212:	601a      	str	r2, [r3, #0]
 800c214:	2300      	movs	r3, #0
 800c216:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	f383 8811 	msr	BASEPRI, r3
}
 800c21e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c220:	bf00      	nop
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	e000ed04 	.word	0xe000ed04

0800c22c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c22c:	b480      	push	{r7}
 800c22e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c230:	4b0b      	ldr	r3, [pc, #44]	@ (800c260 <vPortSetupTimerInterrupt+0x34>)
 800c232:	2200      	movs	r2, #0
 800c234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c236:	4b0b      	ldr	r3, [pc, #44]	@ (800c264 <vPortSetupTimerInterrupt+0x38>)
 800c238:	2200      	movs	r2, #0
 800c23a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c23c:	4b0a      	ldr	r3, [pc, #40]	@ (800c268 <vPortSetupTimerInterrupt+0x3c>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a0a      	ldr	r2, [pc, #40]	@ (800c26c <vPortSetupTimerInterrupt+0x40>)
 800c242:	fba2 2303 	umull	r2, r3, r2, r3
 800c246:	099b      	lsrs	r3, r3, #6
 800c248:	4a09      	ldr	r2, [pc, #36]	@ (800c270 <vPortSetupTimerInterrupt+0x44>)
 800c24a:	3b01      	subs	r3, #1
 800c24c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c24e:	4b04      	ldr	r3, [pc, #16]	@ (800c260 <vPortSetupTimerInterrupt+0x34>)
 800c250:	2207      	movs	r2, #7
 800c252:	601a      	str	r2, [r3, #0]
}
 800c254:	bf00      	nop
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr
 800c25e:	bf00      	nop
 800c260:	e000e010 	.word	0xe000e010
 800c264:	e000e018 	.word	0xe000e018
 800c268:	2000001c 	.word	0x2000001c
 800c26c:	10624dd3 	.word	0x10624dd3
 800c270:	e000e014 	.word	0xe000e014

0800c274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c274:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c284 <vPortEnableVFP+0x10>
 800c278:	6801      	ldr	r1, [r0, #0]
 800c27a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c27e:	6001      	str	r1, [r0, #0]
 800c280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c282:	bf00      	nop
 800c284:	e000ed88 	.word	0xe000ed88

0800c288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c28e:	f3ef 8305 	mrs	r3, IPSR
 800c292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2b0f      	cmp	r3, #15
 800c298:	d915      	bls.n	800c2c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c29a:	4a18      	ldr	r2, [pc, #96]	@ (800c2fc <vPortValidateInterruptPriority+0x74>)
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	4413      	add	r3, r2
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c2a4:	4b16      	ldr	r3, [pc, #88]	@ (800c300 <vPortValidateInterruptPriority+0x78>)
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	7afa      	ldrb	r2, [r7, #11]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d20b      	bcs.n	800c2c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2b2:	f383 8811 	msr	BASEPRI, r3
 800c2b6:	f3bf 8f6f 	isb	sy
 800c2ba:	f3bf 8f4f 	dsb	sy
 800c2be:	607b      	str	r3, [r7, #4]
}
 800c2c0:	bf00      	nop
 800c2c2:	bf00      	nop
 800c2c4:	e7fd      	b.n	800c2c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c2c6:	4b0f      	ldr	r3, [pc, #60]	@ (800c304 <vPortValidateInterruptPriority+0x7c>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c2ce:	4b0e      	ldr	r3, [pc, #56]	@ (800c308 <vPortValidateInterruptPriority+0x80>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d90b      	bls.n	800c2ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2da:	f383 8811 	msr	BASEPRI, r3
 800c2de:	f3bf 8f6f 	isb	sy
 800c2e2:	f3bf 8f4f 	dsb	sy
 800c2e6:	603b      	str	r3, [r7, #0]
}
 800c2e8:	bf00      	nop
 800c2ea:	bf00      	nop
 800c2ec:	e7fd      	b.n	800c2ea <vPortValidateInterruptPriority+0x62>
	}
 800c2ee:	bf00      	nop
 800c2f0:	3714      	adds	r7, #20
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f8:	4770      	bx	lr
 800c2fa:	bf00      	nop
 800c2fc:	e000e3f0 	.word	0xe000e3f0
 800c300:	20001a18 	.word	0x20001a18
 800c304:	e000ed0c 	.word	0xe000ed0c
 800c308:	20001a1c 	.word	0x20001a1c

0800c30c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b08a      	sub	sp, #40	@ 0x28
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c314:	2300      	movs	r3, #0
 800c316:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c318:	f7fe fb9a 	bl	800aa50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c31c:	4b5c      	ldr	r3, [pc, #368]	@ (800c490 <pvPortMalloc+0x184>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d101      	bne.n	800c328 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c324:	f000 f924 	bl	800c570 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c328:	4b5a      	ldr	r3, [pc, #360]	@ (800c494 <pvPortMalloc+0x188>)
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	4013      	ands	r3, r2
 800c330:	2b00      	cmp	r3, #0
 800c332:	f040 8095 	bne.w	800c460 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d01e      	beq.n	800c37a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c33c:	2208      	movs	r2, #8
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4413      	add	r3, r2
 800c342:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f003 0307 	and.w	r3, r3, #7
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d015      	beq.n	800c37a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f023 0307 	bic.w	r3, r3, #7
 800c354:	3308      	adds	r3, #8
 800c356:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f003 0307 	and.w	r3, r3, #7
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d00b      	beq.n	800c37a <pvPortMalloc+0x6e>
	__asm volatile
 800c362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c366:	f383 8811 	msr	BASEPRI, r3
 800c36a:	f3bf 8f6f 	isb	sy
 800c36e:	f3bf 8f4f 	dsb	sy
 800c372:	617b      	str	r3, [r7, #20]
}
 800c374:	bf00      	nop
 800c376:	bf00      	nop
 800c378:	e7fd      	b.n	800c376 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d06f      	beq.n	800c460 <pvPortMalloc+0x154>
 800c380:	4b45      	ldr	r3, [pc, #276]	@ (800c498 <pvPortMalloc+0x18c>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	429a      	cmp	r2, r3
 800c388:	d86a      	bhi.n	800c460 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c38a:	4b44      	ldr	r3, [pc, #272]	@ (800c49c <pvPortMalloc+0x190>)
 800c38c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c38e:	4b43      	ldr	r3, [pc, #268]	@ (800c49c <pvPortMalloc+0x190>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c394:	e004      	b.n	800c3a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c398:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d903      	bls.n	800c3b2 <pvPortMalloc+0xa6>
 800c3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d1f1      	bne.n	800c396 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c3b2:	4b37      	ldr	r3, [pc, #220]	@ (800c490 <pvPortMalloc+0x184>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d051      	beq.n	800c460 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c3bc:	6a3b      	ldr	r3, [r7, #32]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	2208      	movs	r2, #8
 800c3c2:	4413      	add	r3, r2
 800c3c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	6a3b      	ldr	r3, [r7, #32]
 800c3cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d0:	685a      	ldr	r2, [r3, #4]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	1ad2      	subs	r2, r2, r3
 800c3d6:	2308      	movs	r3, #8
 800c3d8:	005b      	lsls	r3, r3, #1
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d920      	bls.n	800c420 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c3de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	4413      	add	r3, r2
 800c3e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	f003 0307 	and.w	r3, r3, #7
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00b      	beq.n	800c408 <pvPortMalloc+0xfc>
	__asm volatile
 800c3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f4:	f383 8811 	msr	BASEPRI, r3
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	613b      	str	r3, [r7, #16]
}
 800c402:	bf00      	nop
 800c404:	bf00      	nop
 800c406:	e7fd      	b.n	800c404 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40a:	685a      	ldr	r2, [r3, #4]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	1ad2      	subs	r2, r2, r3
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c41a:	69b8      	ldr	r0, [r7, #24]
 800c41c:	f000 f90a 	bl	800c634 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c420:	4b1d      	ldr	r3, [pc, #116]	@ (800c498 <pvPortMalloc+0x18c>)
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	4a1b      	ldr	r2, [pc, #108]	@ (800c498 <pvPortMalloc+0x18c>)
 800c42c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c42e:	4b1a      	ldr	r3, [pc, #104]	@ (800c498 <pvPortMalloc+0x18c>)
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	4b1b      	ldr	r3, [pc, #108]	@ (800c4a0 <pvPortMalloc+0x194>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	429a      	cmp	r2, r3
 800c438:	d203      	bcs.n	800c442 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c43a:	4b17      	ldr	r3, [pc, #92]	@ (800c498 <pvPortMalloc+0x18c>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a18      	ldr	r2, [pc, #96]	@ (800c4a0 <pvPortMalloc+0x194>)
 800c440:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c444:	685a      	ldr	r2, [r3, #4]
 800c446:	4b13      	ldr	r3, [pc, #76]	@ (800c494 <pvPortMalloc+0x188>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	431a      	orrs	r2, r3
 800c44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c44e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c452:	2200      	movs	r2, #0
 800c454:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c456:	4b13      	ldr	r3, [pc, #76]	@ (800c4a4 <pvPortMalloc+0x198>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	3301      	adds	r3, #1
 800c45c:	4a11      	ldr	r2, [pc, #68]	@ (800c4a4 <pvPortMalloc+0x198>)
 800c45e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c460:	f7fe fb04 	bl	800aa6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c464:	69fb      	ldr	r3, [r7, #28]
 800c466:	f003 0307 	and.w	r3, r3, #7
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d00b      	beq.n	800c486 <pvPortMalloc+0x17a>
	__asm volatile
 800c46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	60fb      	str	r3, [r7, #12]
}
 800c480:	bf00      	nop
 800c482:	bf00      	nop
 800c484:	e7fd      	b.n	800c482 <pvPortMalloc+0x176>
	return pvReturn;
 800c486:	69fb      	ldr	r3, [r7, #28]
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3728      	adds	r7, #40	@ 0x28
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	20005628 	.word	0x20005628
 800c494:	2000563c 	.word	0x2000563c
 800c498:	2000562c 	.word	0x2000562c
 800c49c:	20005620 	.word	0x20005620
 800c4a0:	20005630 	.word	0x20005630
 800c4a4:	20005634 	.word	0x20005634

0800c4a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b086      	sub	sp, #24
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d04f      	beq.n	800c55a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c4ba:	2308      	movs	r3, #8
 800c4bc:	425b      	negs	r3, r3
 800c4be:	697a      	ldr	r2, [r7, #20]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	685a      	ldr	r2, [r3, #4]
 800c4cc:	4b25      	ldr	r3, [pc, #148]	@ (800c564 <vPortFree+0xbc>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4013      	ands	r3, r2
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d10b      	bne.n	800c4ee <vPortFree+0x46>
	__asm volatile
 800c4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4da:	f383 8811 	msr	BASEPRI, r3
 800c4de:	f3bf 8f6f 	isb	sy
 800c4e2:	f3bf 8f4f 	dsb	sy
 800c4e6:	60fb      	str	r3, [r7, #12]
}
 800c4e8:	bf00      	nop
 800c4ea:	bf00      	nop
 800c4ec:	e7fd      	b.n	800c4ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d00b      	beq.n	800c50e <vPortFree+0x66>
	__asm volatile
 800c4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4fa:	f383 8811 	msr	BASEPRI, r3
 800c4fe:	f3bf 8f6f 	isb	sy
 800c502:	f3bf 8f4f 	dsb	sy
 800c506:	60bb      	str	r3, [r7, #8]
}
 800c508:	bf00      	nop
 800c50a:	bf00      	nop
 800c50c:	e7fd      	b.n	800c50a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	685a      	ldr	r2, [r3, #4]
 800c512:	4b14      	ldr	r3, [pc, #80]	@ (800c564 <vPortFree+0xbc>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4013      	ands	r3, r2
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d01e      	beq.n	800c55a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d11a      	bne.n	800c55a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	685a      	ldr	r2, [r3, #4]
 800c528:	4b0e      	ldr	r3, [pc, #56]	@ (800c564 <vPortFree+0xbc>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	43db      	mvns	r3, r3
 800c52e:	401a      	ands	r2, r3
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c534:	f7fe fa8c 	bl	800aa50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	685a      	ldr	r2, [r3, #4]
 800c53c:	4b0a      	ldr	r3, [pc, #40]	@ (800c568 <vPortFree+0xc0>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4413      	add	r3, r2
 800c542:	4a09      	ldr	r2, [pc, #36]	@ (800c568 <vPortFree+0xc0>)
 800c544:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c546:	6938      	ldr	r0, [r7, #16]
 800c548:	f000 f874 	bl	800c634 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c54c:	4b07      	ldr	r3, [pc, #28]	@ (800c56c <vPortFree+0xc4>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	3301      	adds	r3, #1
 800c552:	4a06      	ldr	r2, [pc, #24]	@ (800c56c <vPortFree+0xc4>)
 800c554:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c556:	f7fe fa89 	bl	800aa6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c55a:	bf00      	nop
 800c55c:	3718      	adds	r7, #24
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	2000563c 	.word	0x2000563c
 800c568:	2000562c 	.word	0x2000562c
 800c56c:	20005638 	.word	0x20005638

0800c570 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c570:	b480      	push	{r7}
 800c572:	b085      	sub	sp, #20
 800c574:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c576:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c57a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c57c:	4b27      	ldr	r3, [pc, #156]	@ (800c61c <prvHeapInit+0xac>)
 800c57e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f003 0307 	and.w	r3, r3, #7
 800c586:	2b00      	cmp	r3, #0
 800c588:	d00c      	beq.n	800c5a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	3307      	adds	r3, #7
 800c58e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f023 0307 	bic.w	r3, r3, #7
 800c596:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c598:	68ba      	ldr	r2, [r7, #8]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	1ad3      	subs	r3, r2, r3
 800c59e:	4a1f      	ldr	r2, [pc, #124]	@ (800c61c <prvHeapInit+0xac>)
 800c5a0:	4413      	add	r3, r2
 800c5a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c5a8:	4a1d      	ldr	r2, [pc, #116]	@ (800c620 <prvHeapInit+0xb0>)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c5ae:	4b1c      	ldr	r3, [pc, #112]	@ (800c620 <prvHeapInit+0xb0>)
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	68ba      	ldr	r2, [r7, #8]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c5bc:	2208      	movs	r2, #8
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	1a9b      	subs	r3, r3, r2
 800c5c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f023 0307 	bic.w	r3, r3, #7
 800c5ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	4a15      	ldr	r2, [pc, #84]	@ (800c624 <prvHeapInit+0xb4>)
 800c5d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c5d2:	4b14      	ldr	r3, [pc, #80]	@ (800c624 <prvHeapInit+0xb4>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c5da:	4b12      	ldr	r3, [pc, #72]	@ (800c624 <prvHeapInit+0xb4>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	1ad2      	subs	r2, r2, r3
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c5f0:	4b0c      	ldr	r3, [pc, #48]	@ (800c624 <prvHeapInit+0xb4>)
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	4a0a      	ldr	r2, [pc, #40]	@ (800c628 <prvHeapInit+0xb8>)
 800c5fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	4a09      	ldr	r2, [pc, #36]	@ (800c62c <prvHeapInit+0xbc>)
 800c606:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c608:	4b09      	ldr	r3, [pc, #36]	@ (800c630 <prvHeapInit+0xc0>)
 800c60a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c60e:	601a      	str	r2, [r3, #0]
}
 800c610:	bf00      	nop
 800c612:	3714      	adds	r7, #20
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr
 800c61c:	20001a20 	.word	0x20001a20
 800c620:	20005620 	.word	0x20005620
 800c624:	20005628 	.word	0x20005628
 800c628:	20005630 	.word	0x20005630
 800c62c:	2000562c 	.word	0x2000562c
 800c630:	2000563c 	.word	0x2000563c

0800c634 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c634:	b480      	push	{r7}
 800c636:	b085      	sub	sp, #20
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c63c:	4b28      	ldr	r3, [pc, #160]	@ (800c6e0 <prvInsertBlockIntoFreeList+0xac>)
 800c63e:	60fb      	str	r3, [r7, #12]
 800c640:	e002      	b.n	800c648 <prvInsertBlockIntoFreeList+0x14>
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	60fb      	str	r3, [r7, #12]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d8f7      	bhi.n	800c642 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	68ba      	ldr	r2, [r7, #8]
 800c65c:	4413      	add	r3, r2
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	429a      	cmp	r2, r3
 800c662:	d108      	bne.n	800c676 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	685a      	ldr	r2, [r3, #4]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	441a      	add	r2, r3
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	68ba      	ldr	r2, [r7, #8]
 800c680:	441a      	add	r2, r3
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	429a      	cmp	r2, r3
 800c688:	d118      	bne.n	800c6bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	4b15      	ldr	r3, [pc, #84]	@ (800c6e4 <prvInsertBlockIntoFreeList+0xb0>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	429a      	cmp	r2, r3
 800c694:	d00d      	beq.n	800c6b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	685a      	ldr	r2, [r3, #4]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	441a      	add	r2, r3
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	601a      	str	r2, [r3, #0]
 800c6b0:	e008      	b.n	800c6c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c6b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c6e4 <prvInsertBlockIntoFreeList+0xb0>)
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	601a      	str	r2, [r3, #0]
 800c6ba:	e003      	b.n	800c6c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681a      	ldr	r2, [r3, #0]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d002      	beq.n	800c6d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6d2:	bf00      	nop
 800c6d4:	3714      	adds	r7, #20
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	20005620 	.word	0x20005620
 800c6e4:	20005628 	.word	0x20005628

0800c6e8 <_vsiprintf_r>:
 800c6e8:	b500      	push	{lr}
 800c6ea:	b09b      	sub	sp, #108	@ 0x6c
 800c6ec:	9100      	str	r1, [sp, #0]
 800c6ee:	9104      	str	r1, [sp, #16]
 800c6f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c6f4:	9105      	str	r1, [sp, #20]
 800c6f6:	9102      	str	r1, [sp, #8]
 800c6f8:	4905      	ldr	r1, [pc, #20]	@ (800c710 <_vsiprintf_r+0x28>)
 800c6fa:	9103      	str	r1, [sp, #12]
 800c6fc:	4669      	mov	r1, sp
 800c6fe:	f000 f951 	bl	800c9a4 <_svfiprintf_r>
 800c702:	9b00      	ldr	r3, [sp, #0]
 800c704:	2200      	movs	r2, #0
 800c706:	701a      	strb	r2, [r3, #0]
 800c708:	b01b      	add	sp, #108	@ 0x6c
 800c70a:	f85d fb04 	ldr.w	pc, [sp], #4
 800c70e:	bf00      	nop
 800c710:	ffff0208 	.word	0xffff0208

0800c714 <vsiprintf>:
 800c714:	4613      	mov	r3, r2
 800c716:	460a      	mov	r2, r1
 800c718:	4601      	mov	r1, r0
 800c71a:	4802      	ldr	r0, [pc, #8]	@ (800c724 <vsiprintf+0x10>)
 800c71c:	6800      	ldr	r0, [r0, #0]
 800c71e:	f7ff bfe3 	b.w	800c6e8 <_vsiprintf_r>
 800c722:	bf00      	nop
 800c724:	2000002c 	.word	0x2000002c

0800c728 <memset>:
 800c728:	4402      	add	r2, r0
 800c72a:	4603      	mov	r3, r0
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d100      	bne.n	800c732 <memset+0xa>
 800c730:	4770      	bx	lr
 800c732:	f803 1b01 	strb.w	r1, [r3], #1
 800c736:	e7f9      	b.n	800c72c <memset+0x4>

0800c738 <_reclaim_reent>:
 800c738:	4b29      	ldr	r3, [pc, #164]	@ (800c7e0 <_reclaim_reent+0xa8>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4283      	cmp	r3, r0
 800c73e:	b570      	push	{r4, r5, r6, lr}
 800c740:	4604      	mov	r4, r0
 800c742:	d04b      	beq.n	800c7dc <_reclaim_reent+0xa4>
 800c744:	69c3      	ldr	r3, [r0, #28]
 800c746:	b1ab      	cbz	r3, 800c774 <_reclaim_reent+0x3c>
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	b16b      	cbz	r3, 800c768 <_reclaim_reent+0x30>
 800c74c:	2500      	movs	r5, #0
 800c74e:	69e3      	ldr	r3, [r4, #28]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	5959      	ldr	r1, [r3, r5]
 800c754:	2900      	cmp	r1, #0
 800c756:	d13b      	bne.n	800c7d0 <_reclaim_reent+0x98>
 800c758:	3504      	adds	r5, #4
 800c75a:	2d80      	cmp	r5, #128	@ 0x80
 800c75c:	d1f7      	bne.n	800c74e <_reclaim_reent+0x16>
 800c75e:	69e3      	ldr	r3, [r4, #28]
 800c760:	4620      	mov	r0, r4
 800c762:	68d9      	ldr	r1, [r3, #12]
 800c764:	f000 f878 	bl	800c858 <_free_r>
 800c768:	69e3      	ldr	r3, [r4, #28]
 800c76a:	6819      	ldr	r1, [r3, #0]
 800c76c:	b111      	cbz	r1, 800c774 <_reclaim_reent+0x3c>
 800c76e:	4620      	mov	r0, r4
 800c770:	f000 f872 	bl	800c858 <_free_r>
 800c774:	6961      	ldr	r1, [r4, #20]
 800c776:	b111      	cbz	r1, 800c77e <_reclaim_reent+0x46>
 800c778:	4620      	mov	r0, r4
 800c77a:	f000 f86d 	bl	800c858 <_free_r>
 800c77e:	69e1      	ldr	r1, [r4, #28]
 800c780:	b111      	cbz	r1, 800c788 <_reclaim_reent+0x50>
 800c782:	4620      	mov	r0, r4
 800c784:	f000 f868 	bl	800c858 <_free_r>
 800c788:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c78a:	b111      	cbz	r1, 800c792 <_reclaim_reent+0x5a>
 800c78c:	4620      	mov	r0, r4
 800c78e:	f000 f863 	bl	800c858 <_free_r>
 800c792:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c794:	b111      	cbz	r1, 800c79c <_reclaim_reent+0x64>
 800c796:	4620      	mov	r0, r4
 800c798:	f000 f85e 	bl	800c858 <_free_r>
 800c79c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c79e:	b111      	cbz	r1, 800c7a6 <_reclaim_reent+0x6e>
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	f000 f859 	bl	800c858 <_free_r>
 800c7a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c7a8:	b111      	cbz	r1, 800c7b0 <_reclaim_reent+0x78>
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f000 f854 	bl	800c858 <_free_r>
 800c7b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c7b2:	b111      	cbz	r1, 800c7ba <_reclaim_reent+0x82>
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	f000 f84f 	bl	800c858 <_free_r>
 800c7ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c7bc:	b111      	cbz	r1, 800c7c4 <_reclaim_reent+0x8c>
 800c7be:	4620      	mov	r0, r4
 800c7c0:	f000 f84a 	bl	800c858 <_free_r>
 800c7c4:	6a23      	ldr	r3, [r4, #32]
 800c7c6:	b14b      	cbz	r3, 800c7dc <_reclaim_reent+0xa4>
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c7ce:	4718      	bx	r3
 800c7d0:	680e      	ldr	r6, [r1, #0]
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f000 f840 	bl	800c858 <_free_r>
 800c7d8:	4631      	mov	r1, r6
 800c7da:	e7bb      	b.n	800c754 <_reclaim_reent+0x1c>
 800c7dc:	bd70      	pop	{r4, r5, r6, pc}
 800c7de:	bf00      	nop
 800c7e0:	2000002c 	.word	0x2000002c

0800c7e4 <__errno>:
 800c7e4:	4b01      	ldr	r3, [pc, #4]	@ (800c7ec <__errno+0x8>)
 800c7e6:	6818      	ldr	r0, [r3, #0]
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop
 800c7ec:	2000002c 	.word	0x2000002c

0800c7f0 <__libc_init_array>:
 800c7f0:	b570      	push	{r4, r5, r6, lr}
 800c7f2:	4d0d      	ldr	r5, [pc, #52]	@ (800c828 <__libc_init_array+0x38>)
 800c7f4:	4c0d      	ldr	r4, [pc, #52]	@ (800c82c <__libc_init_array+0x3c>)
 800c7f6:	1b64      	subs	r4, r4, r5
 800c7f8:	10a4      	asrs	r4, r4, #2
 800c7fa:	2600      	movs	r6, #0
 800c7fc:	42a6      	cmp	r6, r4
 800c7fe:	d109      	bne.n	800c814 <__libc_init_array+0x24>
 800c800:	4d0b      	ldr	r5, [pc, #44]	@ (800c830 <__libc_init_array+0x40>)
 800c802:	4c0c      	ldr	r4, [pc, #48]	@ (800c834 <__libc_init_array+0x44>)
 800c804:	f000 fc66 	bl	800d0d4 <_init>
 800c808:	1b64      	subs	r4, r4, r5
 800c80a:	10a4      	asrs	r4, r4, #2
 800c80c:	2600      	movs	r6, #0
 800c80e:	42a6      	cmp	r6, r4
 800c810:	d105      	bne.n	800c81e <__libc_init_array+0x2e>
 800c812:	bd70      	pop	{r4, r5, r6, pc}
 800c814:	f855 3b04 	ldr.w	r3, [r5], #4
 800c818:	4798      	blx	r3
 800c81a:	3601      	adds	r6, #1
 800c81c:	e7ee      	b.n	800c7fc <__libc_init_array+0xc>
 800c81e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c822:	4798      	blx	r3
 800c824:	3601      	adds	r6, #1
 800c826:	e7f2      	b.n	800c80e <__libc_init_array+0x1e>
 800c828:	0800d24c 	.word	0x0800d24c
 800c82c:	0800d24c 	.word	0x0800d24c
 800c830:	0800d24c 	.word	0x0800d24c
 800c834:	0800d250 	.word	0x0800d250

0800c838 <__retarget_lock_acquire_recursive>:
 800c838:	4770      	bx	lr

0800c83a <__retarget_lock_release_recursive>:
 800c83a:	4770      	bx	lr

0800c83c <memcpy>:
 800c83c:	440a      	add	r2, r1
 800c83e:	4291      	cmp	r1, r2
 800c840:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c844:	d100      	bne.n	800c848 <memcpy+0xc>
 800c846:	4770      	bx	lr
 800c848:	b510      	push	{r4, lr}
 800c84a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c84e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c852:	4291      	cmp	r1, r2
 800c854:	d1f9      	bne.n	800c84a <memcpy+0xe>
 800c856:	bd10      	pop	{r4, pc}

0800c858 <_free_r>:
 800c858:	b538      	push	{r3, r4, r5, lr}
 800c85a:	4605      	mov	r5, r0
 800c85c:	2900      	cmp	r1, #0
 800c85e:	d041      	beq.n	800c8e4 <_free_r+0x8c>
 800c860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c864:	1f0c      	subs	r4, r1, #4
 800c866:	2b00      	cmp	r3, #0
 800c868:	bfb8      	it	lt
 800c86a:	18e4      	addlt	r4, r4, r3
 800c86c:	f000 fbc6 	bl	800cffc <__malloc_lock>
 800c870:	4a1d      	ldr	r2, [pc, #116]	@ (800c8e8 <_free_r+0x90>)
 800c872:	6813      	ldr	r3, [r2, #0]
 800c874:	b933      	cbnz	r3, 800c884 <_free_r+0x2c>
 800c876:	6063      	str	r3, [r4, #4]
 800c878:	6014      	str	r4, [r2, #0]
 800c87a:	4628      	mov	r0, r5
 800c87c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c880:	f000 bbc2 	b.w	800d008 <__malloc_unlock>
 800c884:	42a3      	cmp	r3, r4
 800c886:	d908      	bls.n	800c89a <_free_r+0x42>
 800c888:	6820      	ldr	r0, [r4, #0]
 800c88a:	1821      	adds	r1, r4, r0
 800c88c:	428b      	cmp	r3, r1
 800c88e:	bf01      	itttt	eq
 800c890:	6819      	ldreq	r1, [r3, #0]
 800c892:	685b      	ldreq	r3, [r3, #4]
 800c894:	1809      	addeq	r1, r1, r0
 800c896:	6021      	streq	r1, [r4, #0]
 800c898:	e7ed      	b.n	800c876 <_free_r+0x1e>
 800c89a:	461a      	mov	r2, r3
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	b10b      	cbz	r3, 800c8a4 <_free_r+0x4c>
 800c8a0:	42a3      	cmp	r3, r4
 800c8a2:	d9fa      	bls.n	800c89a <_free_r+0x42>
 800c8a4:	6811      	ldr	r1, [r2, #0]
 800c8a6:	1850      	adds	r0, r2, r1
 800c8a8:	42a0      	cmp	r0, r4
 800c8aa:	d10b      	bne.n	800c8c4 <_free_r+0x6c>
 800c8ac:	6820      	ldr	r0, [r4, #0]
 800c8ae:	4401      	add	r1, r0
 800c8b0:	1850      	adds	r0, r2, r1
 800c8b2:	4283      	cmp	r3, r0
 800c8b4:	6011      	str	r1, [r2, #0]
 800c8b6:	d1e0      	bne.n	800c87a <_free_r+0x22>
 800c8b8:	6818      	ldr	r0, [r3, #0]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	6053      	str	r3, [r2, #4]
 800c8be:	4408      	add	r0, r1
 800c8c0:	6010      	str	r0, [r2, #0]
 800c8c2:	e7da      	b.n	800c87a <_free_r+0x22>
 800c8c4:	d902      	bls.n	800c8cc <_free_r+0x74>
 800c8c6:	230c      	movs	r3, #12
 800c8c8:	602b      	str	r3, [r5, #0]
 800c8ca:	e7d6      	b.n	800c87a <_free_r+0x22>
 800c8cc:	6820      	ldr	r0, [r4, #0]
 800c8ce:	1821      	adds	r1, r4, r0
 800c8d0:	428b      	cmp	r3, r1
 800c8d2:	bf04      	itt	eq
 800c8d4:	6819      	ldreq	r1, [r3, #0]
 800c8d6:	685b      	ldreq	r3, [r3, #4]
 800c8d8:	6063      	str	r3, [r4, #4]
 800c8da:	bf04      	itt	eq
 800c8dc:	1809      	addeq	r1, r1, r0
 800c8de:	6021      	streq	r1, [r4, #0]
 800c8e0:	6054      	str	r4, [r2, #4]
 800c8e2:	e7ca      	b.n	800c87a <_free_r+0x22>
 800c8e4:	bd38      	pop	{r3, r4, r5, pc}
 800c8e6:	bf00      	nop
 800c8e8:	20005784 	.word	0x20005784

0800c8ec <__ssputs_r>:
 800c8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f0:	688e      	ldr	r6, [r1, #8]
 800c8f2:	461f      	mov	r7, r3
 800c8f4:	42be      	cmp	r6, r7
 800c8f6:	680b      	ldr	r3, [r1, #0]
 800c8f8:	4682      	mov	sl, r0
 800c8fa:	460c      	mov	r4, r1
 800c8fc:	4690      	mov	r8, r2
 800c8fe:	d82d      	bhi.n	800c95c <__ssputs_r+0x70>
 800c900:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c904:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c908:	d026      	beq.n	800c958 <__ssputs_r+0x6c>
 800c90a:	6965      	ldr	r5, [r4, #20]
 800c90c:	6909      	ldr	r1, [r1, #16]
 800c90e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c912:	eba3 0901 	sub.w	r9, r3, r1
 800c916:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c91a:	1c7b      	adds	r3, r7, #1
 800c91c:	444b      	add	r3, r9
 800c91e:	106d      	asrs	r5, r5, #1
 800c920:	429d      	cmp	r5, r3
 800c922:	bf38      	it	cc
 800c924:	461d      	movcc	r5, r3
 800c926:	0553      	lsls	r3, r2, #21
 800c928:	d527      	bpl.n	800c97a <__ssputs_r+0x8e>
 800c92a:	4629      	mov	r1, r5
 800c92c:	f000 f958 	bl	800cbe0 <_malloc_r>
 800c930:	4606      	mov	r6, r0
 800c932:	b360      	cbz	r0, 800c98e <__ssputs_r+0xa2>
 800c934:	6921      	ldr	r1, [r4, #16]
 800c936:	464a      	mov	r2, r9
 800c938:	f7ff ff80 	bl	800c83c <memcpy>
 800c93c:	89a3      	ldrh	r3, [r4, #12]
 800c93e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c946:	81a3      	strh	r3, [r4, #12]
 800c948:	6126      	str	r6, [r4, #16]
 800c94a:	6165      	str	r5, [r4, #20]
 800c94c:	444e      	add	r6, r9
 800c94e:	eba5 0509 	sub.w	r5, r5, r9
 800c952:	6026      	str	r6, [r4, #0]
 800c954:	60a5      	str	r5, [r4, #8]
 800c956:	463e      	mov	r6, r7
 800c958:	42be      	cmp	r6, r7
 800c95a:	d900      	bls.n	800c95e <__ssputs_r+0x72>
 800c95c:	463e      	mov	r6, r7
 800c95e:	6820      	ldr	r0, [r4, #0]
 800c960:	4632      	mov	r2, r6
 800c962:	4641      	mov	r1, r8
 800c964:	f000 fb84 	bl	800d070 <memmove>
 800c968:	68a3      	ldr	r3, [r4, #8]
 800c96a:	1b9b      	subs	r3, r3, r6
 800c96c:	60a3      	str	r3, [r4, #8]
 800c96e:	6823      	ldr	r3, [r4, #0]
 800c970:	4433      	add	r3, r6
 800c972:	6023      	str	r3, [r4, #0]
 800c974:	2000      	movs	r0, #0
 800c976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c97a:	462a      	mov	r2, r5
 800c97c:	f000 fb4a 	bl	800d014 <_realloc_r>
 800c980:	4606      	mov	r6, r0
 800c982:	2800      	cmp	r0, #0
 800c984:	d1e0      	bne.n	800c948 <__ssputs_r+0x5c>
 800c986:	6921      	ldr	r1, [r4, #16]
 800c988:	4650      	mov	r0, sl
 800c98a:	f7ff ff65 	bl	800c858 <_free_r>
 800c98e:	230c      	movs	r3, #12
 800c990:	f8ca 3000 	str.w	r3, [sl]
 800c994:	89a3      	ldrh	r3, [r4, #12]
 800c996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c99a:	81a3      	strh	r3, [r4, #12]
 800c99c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9a0:	e7e9      	b.n	800c976 <__ssputs_r+0x8a>
	...

0800c9a4 <_svfiprintf_r>:
 800c9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a8:	4698      	mov	r8, r3
 800c9aa:	898b      	ldrh	r3, [r1, #12]
 800c9ac:	061b      	lsls	r3, r3, #24
 800c9ae:	b09d      	sub	sp, #116	@ 0x74
 800c9b0:	4607      	mov	r7, r0
 800c9b2:	460d      	mov	r5, r1
 800c9b4:	4614      	mov	r4, r2
 800c9b6:	d510      	bpl.n	800c9da <_svfiprintf_r+0x36>
 800c9b8:	690b      	ldr	r3, [r1, #16]
 800c9ba:	b973      	cbnz	r3, 800c9da <_svfiprintf_r+0x36>
 800c9bc:	2140      	movs	r1, #64	@ 0x40
 800c9be:	f000 f90f 	bl	800cbe0 <_malloc_r>
 800c9c2:	6028      	str	r0, [r5, #0]
 800c9c4:	6128      	str	r0, [r5, #16]
 800c9c6:	b930      	cbnz	r0, 800c9d6 <_svfiprintf_r+0x32>
 800c9c8:	230c      	movs	r3, #12
 800c9ca:	603b      	str	r3, [r7, #0]
 800c9cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9d0:	b01d      	add	sp, #116	@ 0x74
 800c9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d6:	2340      	movs	r3, #64	@ 0x40
 800c9d8:	616b      	str	r3, [r5, #20]
 800c9da:	2300      	movs	r3, #0
 800c9dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9de:	2320      	movs	r3, #32
 800c9e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9e8:	2330      	movs	r3, #48	@ 0x30
 800c9ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cb88 <_svfiprintf_r+0x1e4>
 800c9ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c9f2:	f04f 0901 	mov.w	r9, #1
 800c9f6:	4623      	mov	r3, r4
 800c9f8:	469a      	mov	sl, r3
 800c9fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9fe:	b10a      	cbz	r2, 800ca04 <_svfiprintf_r+0x60>
 800ca00:	2a25      	cmp	r2, #37	@ 0x25
 800ca02:	d1f9      	bne.n	800c9f8 <_svfiprintf_r+0x54>
 800ca04:	ebba 0b04 	subs.w	fp, sl, r4
 800ca08:	d00b      	beq.n	800ca22 <_svfiprintf_r+0x7e>
 800ca0a:	465b      	mov	r3, fp
 800ca0c:	4622      	mov	r2, r4
 800ca0e:	4629      	mov	r1, r5
 800ca10:	4638      	mov	r0, r7
 800ca12:	f7ff ff6b 	bl	800c8ec <__ssputs_r>
 800ca16:	3001      	adds	r0, #1
 800ca18:	f000 80a7 	beq.w	800cb6a <_svfiprintf_r+0x1c6>
 800ca1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca1e:	445a      	add	r2, fp
 800ca20:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca22:	f89a 3000 	ldrb.w	r3, [sl]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	f000 809f 	beq.w	800cb6a <_svfiprintf_r+0x1c6>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca36:	f10a 0a01 	add.w	sl, sl, #1
 800ca3a:	9304      	str	r3, [sp, #16]
 800ca3c:	9307      	str	r3, [sp, #28]
 800ca3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca42:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca44:	4654      	mov	r4, sl
 800ca46:	2205      	movs	r2, #5
 800ca48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca4c:	484e      	ldr	r0, [pc, #312]	@ (800cb88 <_svfiprintf_r+0x1e4>)
 800ca4e:	f7f3 fbc7 	bl	80001e0 <memchr>
 800ca52:	9a04      	ldr	r2, [sp, #16]
 800ca54:	b9d8      	cbnz	r0, 800ca8e <_svfiprintf_r+0xea>
 800ca56:	06d0      	lsls	r0, r2, #27
 800ca58:	bf44      	itt	mi
 800ca5a:	2320      	movmi	r3, #32
 800ca5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca60:	0711      	lsls	r1, r2, #28
 800ca62:	bf44      	itt	mi
 800ca64:	232b      	movmi	r3, #43	@ 0x2b
 800ca66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca70:	d015      	beq.n	800ca9e <_svfiprintf_r+0xfa>
 800ca72:	9a07      	ldr	r2, [sp, #28]
 800ca74:	4654      	mov	r4, sl
 800ca76:	2000      	movs	r0, #0
 800ca78:	f04f 0c0a 	mov.w	ip, #10
 800ca7c:	4621      	mov	r1, r4
 800ca7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca82:	3b30      	subs	r3, #48	@ 0x30
 800ca84:	2b09      	cmp	r3, #9
 800ca86:	d94b      	bls.n	800cb20 <_svfiprintf_r+0x17c>
 800ca88:	b1b0      	cbz	r0, 800cab8 <_svfiprintf_r+0x114>
 800ca8a:	9207      	str	r2, [sp, #28]
 800ca8c:	e014      	b.n	800cab8 <_svfiprintf_r+0x114>
 800ca8e:	eba0 0308 	sub.w	r3, r0, r8
 800ca92:	fa09 f303 	lsl.w	r3, r9, r3
 800ca96:	4313      	orrs	r3, r2
 800ca98:	9304      	str	r3, [sp, #16]
 800ca9a:	46a2      	mov	sl, r4
 800ca9c:	e7d2      	b.n	800ca44 <_svfiprintf_r+0xa0>
 800ca9e:	9b03      	ldr	r3, [sp, #12]
 800caa0:	1d19      	adds	r1, r3, #4
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	9103      	str	r1, [sp, #12]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	bfbb      	ittet	lt
 800caaa:	425b      	neglt	r3, r3
 800caac:	f042 0202 	orrlt.w	r2, r2, #2
 800cab0:	9307      	strge	r3, [sp, #28]
 800cab2:	9307      	strlt	r3, [sp, #28]
 800cab4:	bfb8      	it	lt
 800cab6:	9204      	strlt	r2, [sp, #16]
 800cab8:	7823      	ldrb	r3, [r4, #0]
 800caba:	2b2e      	cmp	r3, #46	@ 0x2e
 800cabc:	d10a      	bne.n	800cad4 <_svfiprintf_r+0x130>
 800cabe:	7863      	ldrb	r3, [r4, #1]
 800cac0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cac2:	d132      	bne.n	800cb2a <_svfiprintf_r+0x186>
 800cac4:	9b03      	ldr	r3, [sp, #12]
 800cac6:	1d1a      	adds	r2, r3, #4
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	9203      	str	r2, [sp, #12]
 800cacc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cad0:	3402      	adds	r4, #2
 800cad2:	9305      	str	r3, [sp, #20]
 800cad4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cb98 <_svfiprintf_r+0x1f4>
 800cad8:	7821      	ldrb	r1, [r4, #0]
 800cada:	2203      	movs	r2, #3
 800cadc:	4650      	mov	r0, sl
 800cade:	f7f3 fb7f 	bl	80001e0 <memchr>
 800cae2:	b138      	cbz	r0, 800caf4 <_svfiprintf_r+0x150>
 800cae4:	9b04      	ldr	r3, [sp, #16]
 800cae6:	eba0 000a 	sub.w	r0, r0, sl
 800caea:	2240      	movs	r2, #64	@ 0x40
 800caec:	4082      	lsls	r2, r0
 800caee:	4313      	orrs	r3, r2
 800caf0:	3401      	adds	r4, #1
 800caf2:	9304      	str	r3, [sp, #16]
 800caf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caf8:	4824      	ldr	r0, [pc, #144]	@ (800cb8c <_svfiprintf_r+0x1e8>)
 800cafa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cafe:	2206      	movs	r2, #6
 800cb00:	f7f3 fb6e 	bl	80001e0 <memchr>
 800cb04:	2800      	cmp	r0, #0
 800cb06:	d036      	beq.n	800cb76 <_svfiprintf_r+0x1d2>
 800cb08:	4b21      	ldr	r3, [pc, #132]	@ (800cb90 <_svfiprintf_r+0x1ec>)
 800cb0a:	bb1b      	cbnz	r3, 800cb54 <_svfiprintf_r+0x1b0>
 800cb0c:	9b03      	ldr	r3, [sp, #12]
 800cb0e:	3307      	adds	r3, #7
 800cb10:	f023 0307 	bic.w	r3, r3, #7
 800cb14:	3308      	adds	r3, #8
 800cb16:	9303      	str	r3, [sp, #12]
 800cb18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb1a:	4433      	add	r3, r6
 800cb1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb1e:	e76a      	b.n	800c9f6 <_svfiprintf_r+0x52>
 800cb20:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb24:	460c      	mov	r4, r1
 800cb26:	2001      	movs	r0, #1
 800cb28:	e7a8      	b.n	800ca7c <_svfiprintf_r+0xd8>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	3401      	adds	r4, #1
 800cb2e:	9305      	str	r3, [sp, #20]
 800cb30:	4619      	mov	r1, r3
 800cb32:	f04f 0c0a 	mov.w	ip, #10
 800cb36:	4620      	mov	r0, r4
 800cb38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb3c:	3a30      	subs	r2, #48	@ 0x30
 800cb3e:	2a09      	cmp	r2, #9
 800cb40:	d903      	bls.n	800cb4a <_svfiprintf_r+0x1a6>
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d0c6      	beq.n	800cad4 <_svfiprintf_r+0x130>
 800cb46:	9105      	str	r1, [sp, #20]
 800cb48:	e7c4      	b.n	800cad4 <_svfiprintf_r+0x130>
 800cb4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb4e:	4604      	mov	r4, r0
 800cb50:	2301      	movs	r3, #1
 800cb52:	e7f0      	b.n	800cb36 <_svfiprintf_r+0x192>
 800cb54:	ab03      	add	r3, sp, #12
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	462a      	mov	r2, r5
 800cb5a:	4b0e      	ldr	r3, [pc, #56]	@ (800cb94 <_svfiprintf_r+0x1f0>)
 800cb5c:	a904      	add	r1, sp, #16
 800cb5e:	4638      	mov	r0, r7
 800cb60:	f3af 8000 	nop.w
 800cb64:	1c42      	adds	r2, r0, #1
 800cb66:	4606      	mov	r6, r0
 800cb68:	d1d6      	bne.n	800cb18 <_svfiprintf_r+0x174>
 800cb6a:	89ab      	ldrh	r3, [r5, #12]
 800cb6c:	065b      	lsls	r3, r3, #25
 800cb6e:	f53f af2d 	bmi.w	800c9cc <_svfiprintf_r+0x28>
 800cb72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb74:	e72c      	b.n	800c9d0 <_svfiprintf_r+0x2c>
 800cb76:	ab03      	add	r3, sp, #12
 800cb78:	9300      	str	r3, [sp, #0]
 800cb7a:	462a      	mov	r2, r5
 800cb7c:	4b05      	ldr	r3, [pc, #20]	@ (800cb94 <_svfiprintf_r+0x1f0>)
 800cb7e:	a904      	add	r1, sp, #16
 800cb80:	4638      	mov	r0, r7
 800cb82:	f000 f91b 	bl	800cdbc <_printf_i>
 800cb86:	e7ed      	b.n	800cb64 <_svfiprintf_r+0x1c0>
 800cb88:	0800d210 	.word	0x0800d210
 800cb8c:	0800d21a 	.word	0x0800d21a
 800cb90:	00000000 	.word	0x00000000
 800cb94:	0800c8ed 	.word	0x0800c8ed
 800cb98:	0800d216 	.word	0x0800d216

0800cb9c <sbrk_aligned>:
 800cb9c:	b570      	push	{r4, r5, r6, lr}
 800cb9e:	4e0f      	ldr	r6, [pc, #60]	@ (800cbdc <sbrk_aligned+0x40>)
 800cba0:	460c      	mov	r4, r1
 800cba2:	6831      	ldr	r1, [r6, #0]
 800cba4:	4605      	mov	r5, r0
 800cba6:	b911      	cbnz	r1, 800cbae <sbrk_aligned+0x12>
 800cba8:	f000 fa7c 	bl	800d0a4 <_sbrk_r>
 800cbac:	6030      	str	r0, [r6, #0]
 800cbae:	4621      	mov	r1, r4
 800cbb0:	4628      	mov	r0, r5
 800cbb2:	f000 fa77 	bl	800d0a4 <_sbrk_r>
 800cbb6:	1c43      	adds	r3, r0, #1
 800cbb8:	d103      	bne.n	800cbc2 <sbrk_aligned+0x26>
 800cbba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	bd70      	pop	{r4, r5, r6, pc}
 800cbc2:	1cc4      	adds	r4, r0, #3
 800cbc4:	f024 0403 	bic.w	r4, r4, #3
 800cbc8:	42a0      	cmp	r0, r4
 800cbca:	d0f8      	beq.n	800cbbe <sbrk_aligned+0x22>
 800cbcc:	1a21      	subs	r1, r4, r0
 800cbce:	4628      	mov	r0, r5
 800cbd0:	f000 fa68 	bl	800d0a4 <_sbrk_r>
 800cbd4:	3001      	adds	r0, #1
 800cbd6:	d1f2      	bne.n	800cbbe <sbrk_aligned+0x22>
 800cbd8:	e7ef      	b.n	800cbba <sbrk_aligned+0x1e>
 800cbda:	bf00      	nop
 800cbdc:	20005780 	.word	0x20005780

0800cbe0 <_malloc_r>:
 800cbe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbe4:	1ccd      	adds	r5, r1, #3
 800cbe6:	f025 0503 	bic.w	r5, r5, #3
 800cbea:	3508      	adds	r5, #8
 800cbec:	2d0c      	cmp	r5, #12
 800cbee:	bf38      	it	cc
 800cbf0:	250c      	movcc	r5, #12
 800cbf2:	2d00      	cmp	r5, #0
 800cbf4:	4606      	mov	r6, r0
 800cbf6:	db01      	blt.n	800cbfc <_malloc_r+0x1c>
 800cbf8:	42a9      	cmp	r1, r5
 800cbfa:	d904      	bls.n	800cc06 <_malloc_r+0x26>
 800cbfc:	230c      	movs	r3, #12
 800cbfe:	6033      	str	r3, [r6, #0]
 800cc00:	2000      	movs	r0, #0
 800cc02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ccdc <_malloc_r+0xfc>
 800cc0a:	f000 f9f7 	bl	800cffc <__malloc_lock>
 800cc0e:	f8d8 3000 	ldr.w	r3, [r8]
 800cc12:	461c      	mov	r4, r3
 800cc14:	bb44      	cbnz	r4, 800cc68 <_malloc_r+0x88>
 800cc16:	4629      	mov	r1, r5
 800cc18:	4630      	mov	r0, r6
 800cc1a:	f7ff ffbf 	bl	800cb9c <sbrk_aligned>
 800cc1e:	1c43      	adds	r3, r0, #1
 800cc20:	4604      	mov	r4, r0
 800cc22:	d158      	bne.n	800ccd6 <_malloc_r+0xf6>
 800cc24:	f8d8 4000 	ldr.w	r4, [r8]
 800cc28:	4627      	mov	r7, r4
 800cc2a:	2f00      	cmp	r7, #0
 800cc2c:	d143      	bne.n	800ccb6 <_malloc_r+0xd6>
 800cc2e:	2c00      	cmp	r4, #0
 800cc30:	d04b      	beq.n	800ccca <_malloc_r+0xea>
 800cc32:	6823      	ldr	r3, [r4, #0]
 800cc34:	4639      	mov	r1, r7
 800cc36:	4630      	mov	r0, r6
 800cc38:	eb04 0903 	add.w	r9, r4, r3
 800cc3c:	f000 fa32 	bl	800d0a4 <_sbrk_r>
 800cc40:	4581      	cmp	r9, r0
 800cc42:	d142      	bne.n	800ccca <_malloc_r+0xea>
 800cc44:	6821      	ldr	r1, [r4, #0]
 800cc46:	1a6d      	subs	r5, r5, r1
 800cc48:	4629      	mov	r1, r5
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	f7ff ffa6 	bl	800cb9c <sbrk_aligned>
 800cc50:	3001      	adds	r0, #1
 800cc52:	d03a      	beq.n	800ccca <_malloc_r+0xea>
 800cc54:	6823      	ldr	r3, [r4, #0]
 800cc56:	442b      	add	r3, r5
 800cc58:	6023      	str	r3, [r4, #0]
 800cc5a:	f8d8 3000 	ldr.w	r3, [r8]
 800cc5e:	685a      	ldr	r2, [r3, #4]
 800cc60:	bb62      	cbnz	r2, 800ccbc <_malloc_r+0xdc>
 800cc62:	f8c8 7000 	str.w	r7, [r8]
 800cc66:	e00f      	b.n	800cc88 <_malloc_r+0xa8>
 800cc68:	6822      	ldr	r2, [r4, #0]
 800cc6a:	1b52      	subs	r2, r2, r5
 800cc6c:	d420      	bmi.n	800ccb0 <_malloc_r+0xd0>
 800cc6e:	2a0b      	cmp	r2, #11
 800cc70:	d917      	bls.n	800cca2 <_malloc_r+0xc2>
 800cc72:	1961      	adds	r1, r4, r5
 800cc74:	42a3      	cmp	r3, r4
 800cc76:	6025      	str	r5, [r4, #0]
 800cc78:	bf18      	it	ne
 800cc7a:	6059      	strne	r1, [r3, #4]
 800cc7c:	6863      	ldr	r3, [r4, #4]
 800cc7e:	bf08      	it	eq
 800cc80:	f8c8 1000 	streq.w	r1, [r8]
 800cc84:	5162      	str	r2, [r4, r5]
 800cc86:	604b      	str	r3, [r1, #4]
 800cc88:	4630      	mov	r0, r6
 800cc8a:	f000 f9bd 	bl	800d008 <__malloc_unlock>
 800cc8e:	f104 000b 	add.w	r0, r4, #11
 800cc92:	1d23      	adds	r3, r4, #4
 800cc94:	f020 0007 	bic.w	r0, r0, #7
 800cc98:	1ac2      	subs	r2, r0, r3
 800cc9a:	bf1c      	itt	ne
 800cc9c:	1a1b      	subne	r3, r3, r0
 800cc9e:	50a3      	strne	r3, [r4, r2]
 800cca0:	e7af      	b.n	800cc02 <_malloc_r+0x22>
 800cca2:	6862      	ldr	r2, [r4, #4]
 800cca4:	42a3      	cmp	r3, r4
 800cca6:	bf0c      	ite	eq
 800cca8:	f8c8 2000 	streq.w	r2, [r8]
 800ccac:	605a      	strne	r2, [r3, #4]
 800ccae:	e7eb      	b.n	800cc88 <_malloc_r+0xa8>
 800ccb0:	4623      	mov	r3, r4
 800ccb2:	6864      	ldr	r4, [r4, #4]
 800ccb4:	e7ae      	b.n	800cc14 <_malloc_r+0x34>
 800ccb6:	463c      	mov	r4, r7
 800ccb8:	687f      	ldr	r7, [r7, #4]
 800ccba:	e7b6      	b.n	800cc2a <_malloc_r+0x4a>
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	42a3      	cmp	r3, r4
 800ccc2:	d1fb      	bne.n	800ccbc <_malloc_r+0xdc>
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	6053      	str	r3, [r2, #4]
 800ccc8:	e7de      	b.n	800cc88 <_malloc_r+0xa8>
 800ccca:	230c      	movs	r3, #12
 800cccc:	6033      	str	r3, [r6, #0]
 800ccce:	4630      	mov	r0, r6
 800ccd0:	f000 f99a 	bl	800d008 <__malloc_unlock>
 800ccd4:	e794      	b.n	800cc00 <_malloc_r+0x20>
 800ccd6:	6005      	str	r5, [r0, #0]
 800ccd8:	e7d6      	b.n	800cc88 <_malloc_r+0xa8>
 800ccda:	bf00      	nop
 800ccdc:	20005784 	.word	0x20005784

0800cce0 <_printf_common>:
 800cce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cce4:	4616      	mov	r6, r2
 800cce6:	4698      	mov	r8, r3
 800cce8:	688a      	ldr	r2, [r1, #8]
 800ccea:	690b      	ldr	r3, [r1, #16]
 800ccec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	bfb8      	it	lt
 800ccf4:	4613      	movlt	r3, r2
 800ccf6:	6033      	str	r3, [r6, #0]
 800ccf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ccfc:	4607      	mov	r7, r0
 800ccfe:	460c      	mov	r4, r1
 800cd00:	b10a      	cbz	r2, 800cd06 <_printf_common+0x26>
 800cd02:	3301      	adds	r3, #1
 800cd04:	6033      	str	r3, [r6, #0]
 800cd06:	6823      	ldr	r3, [r4, #0]
 800cd08:	0699      	lsls	r1, r3, #26
 800cd0a:	bf42      	ittt	mi
 800cd0c:	6833      	ldrmi	r3, [r6, #0]
 800cd0e:	3302      	addmi	r3, #2
 800cd10:	6033      	strmi	r3, [r6, #0]
 800cd12:	6825      	ldr	r5, [r4, #0]
 800cd14:	f015 0506 	ands.w	r5, r5, #6
 800cd18:	d106      	bne.n	800cd28 <_printf_common+0x48>
 800cd1a:	f104 0a19 	add.w	sl, r4, #25
 800cd1e:	68e3      	ldr	r3, [r4, #12]
 800cd20:	6832      	ldr	r2, [r6, #0]
 800cd22:	1a9b      	subs	r3, r3, r2
 800cd24:	42ab      	cmp	r3, r5
 800cd26:	dc26      	bgt.n	800cd76 <_printf_common+0x96>
 800cd28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cd2c:	6822      	ldr	r2, [r4, #0]
 800cd2e:	3b00      	subs	r3, #0
 800cd30:	bf18      	it	ne
 800cd32:	2301      	movne	r3, #1
 800cd34:	0692      	lsls	r2, r2, #26
 800cd36:	d42b      	bmi.n	800cd90 <_printf_common+0xb0>
 800cd38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cd3c:	4641      	mov	r1, r8
 800cd3e:	4638      	mov	r0, r7
 800cd40:	47c8      	blx	r9
 800cd42:	3001      	adds	r0, #1
 800cd44:	d01e      	beq.n	800cd84 <_printf_common+0xa4>
 800cd46:	6823      	ldr	r3, [r4, #0]
 800cd48:	6922      	ldr	r2, [r4, #16]
 800cd4a:	f003 0306 	and.w	r3, r3, #6
 800cd4e:	2b04      	cmp	r3, #4
 800cd50:	bf02      	ittt	eq
 800cd52:	68e5      	ldreq	r5, [r4, #12]
 800cd54:	6833      	ldreq	r3, [r6, #0]
 800cd56:	1aed      	subeq	r5, r5, r3
 800cd58:	68a3      	ldr	r3, [r4, #8]
 800cd5a:	bf0c      	ite	eq
 800cd5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd60:	2500      	movne	r5, #0
 800cd62:	4293      	cmp	r3, r2
 800cd64:	bfc4      	itt	gt
 800cd66:	1a9b      	subgt	r3, r3, r2
 800cd68:	18ed      	addgt	r5, r5, r3
 800cd6a:	2600      	movs	r6, #0
 800cd6c:	341a      	adds	r4, #26
 800cd6e:	42b5      	cmp	r5, r6
 800cd70:	d11a      	bne.n	800cda8 <_printf_common+0xc8>
 800cd72:	2000      	movs	r0, #0
 800cd74:	e008      	b.n	800cd88 <_printf_common+0xa8>
 800cd76:	2301      	movs	r3, #1
 800cd78:	4652      	mov	r2, sl
 800cd7a:	4641      	mov	r1, r8
 800cd7c:	4638      	mov	r0, r7
 800cd7e:	47c8      	blx	r9
 800cd80:	3001      	adds	r0, #1
 800cd82:	d103      	bne.n	800cd8c <_printf_common+0xac>
 800cd84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd8c:	3501      	adds	r5, #1
 800cd8e:	e7c6      	b.n	800cd1e <_printf_common+0x3e>
 800cd90:	18e1      	adds	r1, r4, r3
 800cd92:	1c5a      	adds	r2, r3, #1
 800cd94:	2030      	movs	r0, #48	@ 0x30
 800cd96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cd9a:	4422      	add	r2, r4
 800cd9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cda0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cda4:	3302      	adds	r3, #2
 800cda6:	e7c7      	b.n	800cd38 <_printf_common+0x58>
 800cda8:	2301      	movs	r3, #1
 800cdaa:	4622      	mov	r2, r4
 800cdac:	4641      	mov	r1, r8
 800cdae:	4638      	mov	r0, r7
 800cdb0:	47c8      	blx	r9
 800cdb2:	3001      	adds	r0, #1
 800cdb4:	d0e6      	beq.n	800cd84 <_printf_common+0xa4>
 800cdb6:	3601      	adds	r6, #1
 800cdb8:	e7d9      	b.n	800cd6e <_printf_common+0x8e>
	...

0800cdbc <_printf_i>:
 800cdbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdc0:	7e0f      	ldrb	r7, [r1, #24]
 800cdc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cdc4:	2f78      	cmp	r7, #120	@ 0x78
 800cdc6:	4691      	mov	r9, r2
 800cdc8:	4680      	mov	r8, r0
 800cdca:	460c      	mov	r4, r1
 800cdcc:	469a      	mov	sl, r3
 800cdce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cdd2:	d807      	bhi.n	800cde4 <_printf_i+0x28>
 800cdd4:	2f62      	cmp	r7, #98	@ 0x62
 800cdd6:	d80a      	bhi.n	800cdee <_printf_i+0x32>
 800cdd8:	2f00      	cmp	r7, #0
 800cdda:	f000 80d2 	beq.w	800cf82 <_printf_i+0x1c6>
 800cdde:	2f58      	cmp	r7, #88	@ 0x58
 800cde0:	f000 80b9 	beq.w	800cf56 <_printf_i+0x19a>
 800cde4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cde8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cdec:	e03a      	b.n	800ce64 <_printf_i+0xa8>
 800cdee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cdf2:	2b15      	cmp	r3, #21
 800cdf4:	d8f6      	bhi.n	800cde4 <_printf_i+0x28>
 800cdf6:	a101      	add	r1, pc, #4	@ (adr r1, 800cdfc <_printf_i+0x40>)
 800cdf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdfc:	0800ce55 	.word	0x0800ce55
 800ce00:	0800ce69 	.word	0x0800ce69
 800ce04:	0800cde5 	.word	0x0800cde5
 800ce08:	0800cde5 	.word	0x0800cde5
 800ce0c:	0800cde5 	.word	0x0800cde5
 800ce10:	0800cde5 	.word	0x0800cde5
 800ce14:	0800ce69 	.word	0x0800ce69
 800ce18:	0800cde5 	.word	0x0800cde5
 800ce1c:	0800cde5 	.word	0x0800cde5
 800ce20:	0800cde5 	.word	0x0800cde5
 800ce24:	0800cde5 	.word	0x0800cde5
 800ce28:	0800cf69 	.word	0x0800cf69
 800ce2c:	0800ce93 	.word	0x0800ce93
 800ce30:	0800cf23 	.word	0x0800cf23
 800ce34:	0800cde5 	.word	0x0800cde5
 800ce38:	0800cde5 	.word	0x0800cde5
 800ce3c:	0800cf8b 	.word	0x0800cf8b
 800ce40:	0800cde5 	.word	0x0800cde5
 800ce44:	0800ce93 	.word	0x0800ce93
 800ce48:	0800cde5 	.word	0x0800cde5
 800ce4c:	0800cde5 	.word	0x0800cde5
 800ce50:	0800cf2b 	.word	0x0800cf2b
 800ce54:	6833      	ldr	r3, [r6, #0]
 800ce56:	1d1a      	adds	r2, r3, #4
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	6032      	str	r2, [r6, #0]
 800ce5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ce64:	2301      	movs	r3, #1
 800ce66:	e09d      	b.n	800cfa4 <_printf_i+0x1e8>
 800ce68:	6833      	ldr	r3, [r6, #0]
 800ce6a:	6820      	ldr	r0, [r4, #0]
 800ce6c:	1d19      	adds	r1, r3, #4
 800ce6e:	6031      	str	r1, [r6, #0]
 800ce70:	0606      	lsls	r6, r0, #24
 800ce72:	d501      	bpl.n	800ce78 <_printf_i+0xbc>
 800ce74:	681d      	ldr	r5, [r3, #0]
 800ce76:	e003      	b.n	800ce80 <_printf_i+0xc4>
 800ce78:	0645      	lsls	r5, r0, #25
 800ce7a:	d5fb      	bpl.n	800ce74 <_printf_i+0xb8>
 800ce7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ce80:	2d00      	cmp	r5, #0
 800ce82:	da03      	bge.n	800ce8c <_printf_i+0xd0>
 800ce84:	232d      	movs	r3, #45	@ 0x2d
 800ce86:	426d      	negs	r5, r5
 800ce88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce8c:	4859      	ldr	r0, [pc, #356]	@ (800cff4 <_printf_i+0x238>)
 800ce8e:	230a      	movs	r3, #10
 800ce90:	e011      	b.n	800ceb6 <_printf_i+0xfa>
 800ce92:	6821      	ldr	r1, [r4, #0]
 800ce94:	6833      	ldr	r3, [r6, #0]
 800ce96:	0608      	lsls	r0, r1, #24
 800ce98:	f853 5b04 	ldr.w	r5, [r3], #4
 800ce9c:	d402      	bmi.n	800cea4 <_printf_i+0xe8>
 800ce9e:	0649      	lsls	r1, r1, #25
 800cea0:	bf48      	it	mi
 800cea2:	b2ad      	uxthmi	r5, r5
 800cea4:	2f6f      	cmp	r7, #111	@ 0x6f
 800cea6:	4853      	ldr	r0, [pc, #332]	@ (800cff4 <_printf_i+0x238>)
 800cea8:	6033      	str	r3, [r6, #0]
 800ceaa:	bf14      	ite	ne
 800ceac:	230a      	movne	r3, #10
 800ceae:	2308      	moveq	r3, #8
 800ceb0:	2100      	movs	r1, #0
 800ceb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ceb6:	6866      	ldr	r6, [r4, #4]
 800ceb8:	60a6      	str	r6, [r4, #8]
 800ceba:	2e00      	cmp	r6, #0
 800cebc:	bfa2      	ittt	ge
 800cebe:	6821      	ldrge	r1, [r4, #0]
 800cec0:	f021 0104 	bicge.w	r1, r1, #4
 800cec4:	6021      	strge	r1, [r4, #0]
 800cec6:	b90d      	cbnz	r5, 800cecc <_printf_i+0x110>
 800cec8:	2e00      	cmp	r6, #0
 800ceca:	d04b      	beq.n	800cf64 <_printf_i+0x1a8>
 800cecc:	4616      	mov	r6, r2
 800cece:	fbb5 f1f3 	udiv	r1, r5, r3
 800ced2:	fb03 5711 	mls	r7, r3, r1, r5
 800ced6:	5dc7      	ldrb	r7, [r0, r7]
 800ced8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cedc:	462f      	mov	r7, r5
 800cede:	42bb      	cmp	r3, r7
 800cee0:	460d      	mov	r5, r1
 800cee2:	d9f4      	bls.n	800cece <_printf_i+0x112>
 800cee4:	2b08      	cmp	r3, #8
 800cee6:	d10b      	bne.n	800cf00 <_printf_i+0x144>
 800cee8:	6823      	ldr	r3, [r4, #0]
 800ceea:	07df      	lsls	r7, r3, #31
 800ceec:	d508      	bpl.n	800cf00 <_printf_i+0x144>
 800ceee:	6923      	ldr	r3, [r4, #16]
 800cef0:	6861      	ldr	r1, [r4, #4]
 800cef2:	4299      	cmp	r1, r3
 800cef4:	bfde      	ittt	le
 800cef6:	2330      	movle	r3, #48	@ 0x30
 800cef8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cefc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800cf00:	1b92      	subs	r2, r2, r6
 800cf02:	6122      	str	r2, [r4, #16]
 800cf04:	f8cd a000 	str.w	sl, [sp]
 800cf08:	464b      	mov	r3, r9
 800cf0a:	aa03      	add	r2, sp, #12
 800cf0c:	4621      	mov	r1, r4
 800cf0e:	4640      	mov	r0, r8
 800cf10:	f7ff fee6 	bl	800cce0 <_printf_common>
 800cf14:	3001      	adds	r0, #1
 800cf16:	d14a      	bne.n	800cfae <_printf_i+0x1f2>
 800cf18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf1c:	b004      	add	sp, #16
 800cf1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf22:	6823      	ldr	r3, [r4, #0]
 800cf24:	f043 0320 	orr.w	r3, r3, #32
 800cf28:	6023      	str	r3, [r4, #0]
 800cf2a:	4833      	ldr	r0, [pc, #204]	@ (800cff8 <_printf_i+0x23c>)
 800cf2c:	2778      	movs	r7, #120	@ 0x78
 800cf2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cf32:	6823      	ldr	r3, [r4, #0]
 800cf34:	6831      	ldr	r1, [r6, #0]
 800cf36:	061f      	lsls	r7, r3, #24
 800cf38:	f851 5b04 	ldr.w	r5, [r1], #4
 800cf3c:	d402      	bmi.n	800cf44 <_printf_i+0x188>
 800cf3e:	065f      	lsls	r7, r3, #25
 800cf40:	bf48      	it	mi
 800cf42:	b2ad      	uxthmi	r5, r5
 800cf44:	6031      	str	r1, [r6, #0]
 800cf46:	07d9      	lsls	r1, r3, #31
 800cf48:	bf44      	itt	mi
 800cf4a:	f043 0320 	orrmi.w	r3, r3, #32
 800cf4e:	6023      	strmi	r3, [r4, #0]
 800cf50:	b11d      	cbz	r5, 800cf5a <_printf_i+0x19e>
 800cf52:	2310      	movs	r3, #16
 800cf54:	e7ac      	b.n	800ceb0 <_printf_i+0xf4>
 800cf56:	4827      	ldr	r0, [pc, #156]	@ (800cff4 <_printf_i+0x238>)
 800cf58:	e7e9      	b.n	800cf2e <_printf_i+0x172>
 800cf5a:	6823      	ldr	r3, [r4, #0]
 800cf5c:	f023 0320 	bic.w	r3, r3, #32
 800cf60:	6023      	str	r3, [r4, #0]
 800cf62:	e7f6      	b.n	800cf52 <_printf_i+0x196>
 800cf64:	4616      	mov	r6, r2
 800cf66:	e7bd      	b.n	800cee4 <_printf_i+0x128>
 800cf68:	6833      	ldr	r3, [r6, #0]
 800cf6a:	6825      	ldr	r5, [r4, #0]
 800cf6c:	6961      	ldr	r1, [r4, #20]
 800cf6e:	1d18      	adds	r0, r3, #4
 800cf70:	6030      	str	r0, [r6, #0]
 800cf72:	062e      	lsls	r6, r5, #24
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	d501      	bpl.n	800cf7c <_printf_i+0x1c0>
 800cf78:	6019      	str	r1, [r3, #0]
 800cf7a:	e002      	b.n	800cf82 <_printf_i+0x1c6>
 800cf7c:	0668      	lsls	r0, r5, #25
 800cf7e:	d5fb      	bpl.n	800cf78 <_printf_i+0x1bc>
 800cf80:	8019      	strh	r1, [r3, #0]
 800cf82:	2300      	movs	r3, #0
 800cf84:	6123      	str	r3, [r4, #16]
 800cf86:	4616      	mov	r6, r2
 800cf88:	e7bc      	b.n	800cf04 <_printf_i+0x148>
 800cf8a:	6833      	ldr	r3, [r6, #0]
 800cf8c:	1d1a      	adds	r2, r3, #4
 800cf8e:	6032      	str	r2, [r6, #0]
 800cf90:	681e      	ldr	r6, [r3, #0]
 800cf92:	6862      	ldr	r2, [r4, #4]
 800cf94:	2100      	movs	r1, #0
 800cf96:	4630      	mov	r0, r6
 800cf98:	f7f3 f922 	bl	80001e0 <memchr>
 800cf9c:	b108      	cbz	r0, 800cfa2 <_printf_i+0x1e6>
 800cf9e:	1b80      	subs	r0, r0, r6
 800cfa0:	6060      	str	r0, [r4, #4]
 800cfa2:	6863      	ldr	r3, [r4, #4]
 800cfa4:	6123      	str	r3, [r4, #16]
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cfac:	e7aa      	b.n	800cf04 <_printf_i+0x148>
 800cfae:	6923      	ldr	r3, [r4, #16]
 800cfb0:	4632      	mov	r2, r6
 800cfb2:	4649      	mov	r1, r9
 800cfb4:	4640      	mov	r0, r8
 800cfb6:	47d0      	blx	sl
 800cfb8:	3001      	adds	r0, #1
 800cfba:	d0ad      	beq.n	800cf18 <_printf_i+0x15c>
 800cfbc:	6823      	ldr	r3, [r4, #0]
 800cfbe:	079b      	lsls	r3, r3, #30
 800cfc0:	d413      	bmi.n	800cfea <_printf_i+0x22e>
 800cfc2:	68e0      	ldr	r0, [r4, #12]
 800cfc4:	9b03      	ldr	r3, [sp, #12]
 800cfc6:	4298      	cmp	r0, r3
 800cfc8:	bfb8      	it	lt
 800cfca:	4618      	movlt	r0, r3
 800cfcc:	e7a6      	b.n	800cf1c <_printf_i+0x160>
 800cfce:	2301      	movs	r3, #1
 800cfd0:	4632      	mov	r2, r6
 800cfd2:	4649      	mov	r1, r9
 800cfd4:	4640      	mov	r0, r8
 800cfd6:	47d0      	blx	sl
 800cfd8:	3001      	adds	r0, #1
 800cfda:	d09d      	beq.n	800cf18 <_printf_i+0x15c>
 800cfdc:	3501      	adds	r5, #1
 800cfde:	68e3      	ldr	r3, [r4, #12]
 800cfe0:	9903      	ldr	r1, [sp, #12]
 800cfe2:	1a5b      	subs	r3, r3, r1
 800cfe4:	42ab      	cmp	r3, r5
 800cfe6:	dcf2      	bgt.n	800cfce <_printf_i+0x212>
 800cfe8:	e7eb      	b.n	800cfc2 <_printf_i+0x206>
 800cfea:	2500      	movs	r5, #0
 800cfec:	f104 0619 	add.w	r6, r4, #25
 800cff0:	e7f5      	b.n	800cfde <_printf_i+0x222>
 800cff2:	bf00      	nop
 800cff4:	0800d221 	.word	0x0800d221
 800cff8:	0800d232 	.word	0x0800d232

0800cffc <__malloc_lock>:
 800cffc:	4801      	ldr	r0, [pc, #4]	@ (800d004 <__malloc_lock+0x8>)
 800cffe:	f7ff bc1b 	b.w	800c838 <__retarget_lock_acquire_recursive>
 800d002:	bf00      	nop
 800d004:	2000577c 	.word	0x2000577c

0800d008 <__malloc_unlock>:
 800d008:	4801      	ldr	r0, [pc, #4]	@ (800d010 <__malloc_unlock+0x8>)
 800d00a:	f7ff bc16 	b.w	800c83a <__retarget_lock_release_recursive>
 800d00e:	bf00      	nop
 800d010:	2000577c 	.word	0x2000577c

0800d014 <_realloc_r>:
 800d014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d018:	4680      	mov	r8, r0
 800d01a:	4615      	mov	r5, r2
 800d01c:	460c      	mov	r4, r1
 800d01e:	b921      	cbnz	r1, 800d02a <_realloc_r+0x16>
 800d020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d024:	4611      	mov	r1, r2
 800d026:	f7ff bddb 	b.w	800cbe0 <_malloc_r>
 800d02a:	b92a      	cbnz	r2, 800d038 <_realloc_r+0x24>
 800d02c:	f7ff fc14 	bl	800c858 <_free_r>
 800d030:	2400      	movs	r4, #0
 800d032:	4620      	mov	r0, r4
 800d034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d038:	f000 f844 	bl	800d0c4 <_malloc_usable_size_r>
 800d03c:	4285      	cmp	r5, r0
 800d03e:	4606      	mov	r6, r0
 800d040:	d802      	bhi.n	800d048 <_realloc_r+0x34>
 800d042:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d046:	d8f4      	bhi.n	800d032 <_realloc_r+0x1e>
 800d048:	4629      	mov	r1, r5
 800d04a:	4640      	mov	r0, r8
 800d04c:	f7ff fdc8 	bl	800cbe0 <_malloc_r>
 800d050:	4607      	mov	r7, r0
 800d052:	2800      	cmp	r0, #0
 800d054:	d0ec      	beq.n	800d030 <_realloc_r+0x1c>
 800d056:	42b5      	cmp	r5, r6
 800d058:	462a      	mov	r2, r5
 800d05a:	4621      	mov	r1, r4
 800d05c:	bf28      	it	cs
 800d05e:	4632      	movcs	r2, r6
 800d060:	f7ff fbec 	bl	800c83c <memcpy>
 800d064:	4621      	mov	r1, r4
 800d066:	4640      	mov	r0, r8
 800d068:	f7ff fbf6 	bl	800c858 <_free_r>
 800d06c:	463c      	mov	r4, r7
 800d06e:	e7e0      	b.n	800d032 <_realloc_r+0x1e>

0800d070 <memmove>:
 800d070:	4288      	cmp	r0, r1
 800d072:	b510      	push	{r4, lr}
 800d074:	eb01 0402 	add.w	r4, r1, r2
 800d078:	d902      	bls.n	800d080 <memmove+0x10>
 800d07a:	4284      	cmp	r4, r0
 800d07c:	4623      	mov	r3, r4
 800d07e:	d807      	bhi.n	800d090 <memmove+0x20>
 800d080:	1e43      	subs	r3, r0, #1
 800d082:	42a1      	cmp	r1, r4
 800d084:	d008      	beq.n	800d098 <memmove+0x28>
 800d086:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d08a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d08e:	e7f8      	b.n	800d082 <memmove+0x12>
 800d090:	4402      	add	r2, r0
 800d092:	4601      	mov	r1, r0
 800d094:	428a      	cmp	r2, r1
 800d096:	d100      	bne.n	800d09a <memmove+0x2a>
 800d098:	bd10      	pop	{r4, pc}
 800d09a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d09e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0a2:	e7f7      	b.n	800d094 <memmove+0x24>

0800d0a4 <_sbrk_r>:
 800d0a4:	b538      	push	{r3, r4, r5, lr}
 800d0a6:	4d06      	ldr	r5, [pc, #24]	@ (800d0c0 <_sbrk_r+0x1c>)
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	4608      	mov	r0, r1
 800d0ae:	602b      	str	r3, [r5, #0]
 800d0b0:	f7f6 fdf8 	bl	8003ca4 <_sbrk>
 800d0b4:	1c43      	adds	r3, r0, #1
 800d0b6:	d102      	bne.n	800d0be <_sbrk_r+0x1a>
 800d0b8:	682b      	ldr	r3, [r5, #0]
 800d0ba:	b103      	cbz	r3, 800d0be <_sbrk_r+0x1a>
 800d0bc:	6023      	str	r3, [r4, #0]
 800d0be:	bd38      	pop	{r3, r4, r5, pc}
 800d0c0:	20005778 	.word	0x20005778

0800d0c4 <_malloc_usable_size_r>:
 800d0c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0c8:	1f18      	subs	r0, r3, #4
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	bfbc      	itt	lt
 800d0ce:	580b      	ldrlt	r3, [r1, r0]
 800d0d0:	18c0      	addlt	r0, r0, r3
 800d0d2:	4770      	bx	lr

0800d0d4 <_init>:
 800d0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0d6:	bf00      	nop
 800d0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0da:	bc08      	pop	{r3}
 800d0dc:	469e      	mov	lr, r3
 800d0de:	4770      	bx	lr

0800d0e0 <_fini>:
 800d0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0e2:	bf00      	nop
 800d0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0e6:	bc08      	pop	{r3}
 800d0e8:	469e      	mov	lr, r3
 800d0ea:	4770      	bx	lr
