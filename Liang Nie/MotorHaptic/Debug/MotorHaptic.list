
MotorHaptic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800da4c  0800da4c  0000ea4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dba4  0800dba4  0000f07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dba4  0800dba4  0000eba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbac  0800dbac  0000f07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbac  0800dbac  0000ebac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dbb0  0800dbb0  0000ebb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800dbb4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f07c  2**0
                  CONTENTS
 10 .bss          0000582c  2000007c  2000007c  0000f07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200058a8  200058a8  0000f07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000258b1  00000000  00000000  0000f0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000548d  00000000  00000000  0003495d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ec8  00000000  00000000  00039df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001812  00000000  00000000  0003bcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261e3  00000000  00000000  0003d4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025c59  00000000  00000000  000636ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0f5f  00000000  00000000  00089306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016a265  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000086dc  00000000  00000000  0016a2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00172984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800da34 	.word	0x0800da34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800da34 	.word	0x0800da34

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000d60:	4b04      	ldr	r3, [pc, #16]	@ (8000d74 <BMI088_ACCEL_NS_L+0x18>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a04      	ldr	r2, [pc, #16]	@ (8000d78 <BMI088_ACCEL_NS_L+0x1c>)
 8000d66:	8811      	ldrh	r1, [r2, #0]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f005 fa5a 	bl	8006224 <HAL_GPIO_WritePin>
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000004 	.word	0x20000004

08000d7c <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8000d80:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <BMI088_ACCEL_NS_H+0x18>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a04      	ldr	r2, [pc, #16]	@ (8000d98 <BMI088_ACCEL_NS_H+0x1c>)
 8000d86:	8811      	ldrh	r1, [r2, #0]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f005 fa4a 	bl	8006224 <HAL_GPIO_WritePin>
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000004 	.word	0x20000004

08000d9c <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8000da0:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <BMI088_GYRO_NS_L+0x18>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <BMI088_GYRO_NS_L+0x1c>)
 8000da6:	8811      	ldrh	r1, [r2, #0]
 8000da8:	2200      	movs	r2, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f005 fa3a 	bl	8006224 <HAL_GPIO_WritePin>
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000008 	.word	0x20000008
 8000db8:	2000000c 	.word	0x2000000c

08000dbc <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8000dc0:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <BMI088_GYRO_NS_H+0x18>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <BMI088_GYRO_NS_H+0x1c>)
 8000dc6:	8811      	ldrh	r1, [r2, #0]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f005 fa2a 	bl	8006224 <HAL_GPIO_WritePin>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	2000000c 	.word	0x2000000c

08000ddc <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af02      	add	r7, sp, #8
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 8000de6:	f107 020f 	add.w	r2, r7, #15
 8000dea:	1df9      	adds	r1, r7, #7
 8000dec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2301      	movs	r3, #1
 8000df4:	4803      	ldr	r0, [pc, #12]	@ (8000e04 <BMI088_read_write_byte+0x28>)
 8000df6:	f006 fd3d 	bl	8007874 <HAL_SPI_TransmitReceive>
    return rx_data;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	2000074c 	.word	0x2000074c

08000e08 <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 8000e0c:	4a05      	ldr	r2, [pc, #20]	@ (8000e24 <IMU_get_temp+0x1c>)
 8000e0e:	4906      	ldr	r1, [pc, #24]	@ (8000e28 <IMU_get_temp+0x20>)
 8000e10:	4806      	ldr	r0, [pc, #24]	@ (8000e2c <IMU_get_temp+0x24>)
 8000e12:	f000 f80d 	bl	8000e30 <BMI088_read>
	return temp;
 8000e16:	4b03      	ldr	r3, [pc, #12]	@ (8000e24 <IMU_get_temp+0x1c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	ee07 3a90 	vmov	s15, r3
}
 8000e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200000b0 	.word	0x200000b0
 8000e28:	200000a4 	.word	0x200000a4
 8000e2c:	20000098 	.word	0x20000098

08000e30 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 8000e3c:	4a70      	ldr	r2, [pc, #448]	@ (8001000 <BMI088_read+0x1d0>)
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e46:	6018      	str	r0, [r3, #0]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	8019      	strh	r1, [r3, #0]
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	0c0a      	lsrs	r2, r1, #16
 8000e50:	701a      	strb	r2, [r3, #0]
 8000e52:	2300      	movs	r3, #0
 8000e54:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 8000e56:	f7ff ff81 	bl	8000d5c <BMI088_ACCEL_NS_L>
 8000e5a:	2092      	movs	r0, #146	@ 0x92
 8000e5c:	f7ff ffbe 	bl	8000ddc <BMI088_read_write_byte>
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2206      	movs	r2, #6
 8000e66:	4619      	mov	r1, r3
 8000e68:	2012      	movs	r0, #18
 8000e6a:	f000 f8cf 	bl	800100c <BMI088_read_muli_reg>
 8000e6e:	f7ff ff85 	bl	8000d7c <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 8000e72:	7d7b      	ldrb	r3, [r7, #21]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	b21a      	sxth	r2, r3
 8000e78:	7d3b      	ldrb	r3, [r7, #20]
 8000e7a:	b21b      	sxth	r3, r3
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000e80:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e84:	ee07 3a90 	vmov	s15, r3
 8000e88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e8c:	4b5d      	ldr	r3, [pc, #372]	@ (8001004 <BMI088_read+0x1d4>)
 8000e8e:	edd3 7a00 	vldr	s15, [r3]
 8000e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000e9c:	7dfb      	ldrb	r3, [r7, #23]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	7dbb      	ldrb	r3, [r7, #22]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000eaa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000eae:	ee07 3a90 	vmov	s15, r3
 8000eb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eb6:	4b53      	ldr	r3, [pc, #332]	@ (8001004 <BMI088_read+0x1d4>)
 8000eb8:	edd3 7a00 	vldr	s15, [r3]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec4:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8000ec8:	7e7b      	ldrb	r3, [r7, #25]
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	7e3b      	ldrb	r3, [r7, #24]
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000ed6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ee2:	4b48      	ldr	r3, [pc, #288]	@ (8001004 <BMI088_read+0x1d4>)
 8000ee4:	edd3 7a00 	vldr	s15, [r3]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	3308      	adds	r3, #8
 8000eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ef0:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 8000ef4:	f7ff ff52 	bl	8000d9c <BMI088_GYRO_NS_L>
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2208      	movs	r2, #8
 8000efe:	4619      	mov	r1, r3
 8000f00:	2000      	movs	r0, #0
 8000f02:	f000 f883 	bl	800100c <BMI088_read_muli_reg>
 8000f06:	f7ff ff59 	bl	8000dbc <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 8000f0a:	7d3b      	ldrb	r3, [r7, #20]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d140      	bne.n	8000f92 <BMI088_read+0x162>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000f10:	7dfb      	ldrb	r3, [r7, #23]
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	b21a      	sxth	r2, r3
 8000f16:	7dbb      	ldrb	r3, [r7, #22]
 8000f18:	b21b      	sxth	r3, r3
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000f1e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f22:	ee07 3a90 	vmov	s15, r3
 8000f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f2a:	4b37      	ldr	r3, [pc, #220]	@ (8001008 <BMI088_read+0x1d8>)
 8000f2c:	edd3 7a00 	vldr	s15, [r3]
 8000f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8000f3a:	7e7b      	ldrb	r3, [r7, #25]
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	7e3b      	ldrb	r3, [r7, #24]
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000f48:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f4c:	ee07 3a90 	vmov	s15, r3
 8000f50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f54:	4b2c      	ldr	r3, [pc, #176]	@ (8001008 <BMI088_read+0x1d8>)
 8000f56:	edd3 7a00 	vldr	s15, [r3]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f62:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 8000f66:	7efb      	ldrb	r3, [r7, #27]
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	b21a      	sxth	r2, r3
 8000f6c:	7ebb      	ldrb	r3, [r7, #26]
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	4313      	orrs	r3, r2
 8000f72:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000f74:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f78:	ee07 3a90 	vmov	s15, r3
 8000f7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f80:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <BMI088_read+0x1d8>)
 8000f82:	edd3 7a00 	vldr	s15, [r3]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	3308      	adds	r3, #8
 8000f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f8e:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 8000f92:	f7ff fee3 	bl	8000d5c <BMI088_ACCEL_NS_L>
 8000f96:	20a2      	movs	r0, #162	@ 0xa2
 8000f98:	f7ff ff20 	bl	8000ddc <BMI088_read_write_byte>
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	2022      	movs	r0, #34	@ 0x22
 8000fa6:	f000 f831 	bl	800100c <BMI088_read_muli_reg>
 8000faa:	f7ff fee7 	bl	8000d7c <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 8000fae:	7d3b      	ldrb	r3, [r7, #20]
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	b21a      	sxth	r2, r3
 8000fb4:	7d7b      	ldrb	r3, [r7, #21]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 8000fc0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fc8:	db04      	blt.n	8000fd4 <BMI088_read+0x1a4>
    {
        bmi088_raw_temp -= 2048;
 8000fca:	8bfb      	ldrh	r3, [r7, #30]
 8000fcc:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8000fd4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe0:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8000fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe8:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8000fec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	edc3 7a00 	vstr	s15, [r3]
}
 8000ff6:	bf00      	nop
 8000ff8:	3720      	adds	r7, #32
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	0800da4c 	.word	0x0800da4c
 8001004:	20000010 	.word	0x20000010
 8001008:	20000014 	.word	0x20000014

0800100c <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
 8001018:	4613      	mov	r3, r2
 800101a:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fed9 	bl	8000ddc <BMI088_read_write_byte>

    while (len != 0)
 800102a:	e00c      	b.n	8001046 <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 800102c:	2055      	movs	r0, #85	@ 0x55
 800102e:	f7ff fed5 	bl	8000ddc <BMI088_read_write_byte>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	701a      	strb	r2, [r3, #0]
        buf++;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	603b      	str	r3, [r7, #0]
        len--;
 8001040:	79bb      	ldrb	r3, [r7, #6]
 8001042:	3b01      	subs	r3, #1
 8001044:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1ef      	bne.n	800102c <BMI088_read_muli_reg+0x20>
    }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_CAN_RxFifo0MsgPendingCallback>:


extern robot_status_t robot_status;
extern power_heat_data_t power_heat_data;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b08c      	sub	sp, #48	@ 0x30
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	f107 0210 	add.w	r2, r7, #16
 8001068:	2100      	movs	r1, #0
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f003 fec3 	bl	8004df6 <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001076:	d813      	bhi.n	80010a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 8001078:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800107c:	f240 809c 	bls.w	80011b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 8001080:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8001084:	2b03      	cmp	r3, #3
 8001086:	f200 8097 	bhi.w	80011b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 800108a:	a201      	add	r2, pc, #4	@ (adr r2, 8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	08001195 	.word	0x08001195
 8001094:	080011a7 	.word	0x080011a7
 8001098:	080011b9 	.word	0x080011b9
 800109c:	080011b9 	.word	0x080011b9
 80010a0:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 80010a4:	2b0a      	cmp	r3, #10
 80010a6:	f200 8087 	bhi.w	80011b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
            uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (hcan == &hcan1) {
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a44      	ldr	r2, [pc, #272]	@ (80011c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d131      	bne.n	8001120 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
                //memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
                //memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
                get_motor_feedback(&motorFeedback[0][i], rx_data);
 80010bc:	7a3b      	ldrb	r3, [r7, #8]
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	7a7b      	ldrb	r3, [r7, #9]
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010ce:	b291      	uxth	r1, r2
 80010d0:	4a3e      	ldr	r2, [pc, #248]	@ (80011cc <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80010d2:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 80010d6:	7abb      	ldrb	r3, [r7, #10]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b219      	sxth	r1, r3
 80010dc:	7afb      	ldrb	r3, [r7, #11]
 80010de:	b21a      	sxth	r2, r3
 80010e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010e4:	430a      	orrs	r2, r1
 80010e6:	b211      	sxth	r1, r2
 80010e8:	4a38      	ldr	r2, [pc, #224]	@ (80011cc <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4413      	add	r3, r2
 80010ee:	460a      	mov	r2, r1
 80010f0:	805a      	strh	r2, [r3, #2]
 80010f2:	7b3b      	ldrb	r3, [r7, #12]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b219      	sxth	r1, r3
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001100:	430a      	orrs	r2, r1
 8001102:	b211      	sxth	r1, r2
 8001104:	4a31      	ldr	r2, [pc, #196]	@ (80011cc <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4413      	add	r3, r2
 800110a:	460a      	mov	r2, r1
 800110c:	809a      	strh	r2, [r3, #4]
 800110e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001112:	7bb9      	ldrb	r1, [r7, #14]
 8001114:	4a2d      	ldr	r2, [pc, #180]	@ (80011cc <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	4413      	add	r3, r2
 800111a:	460a      	mov	r2, r1
 800111c:	719a      	strb	r2, [r3, #6]
            } else if (hcan == &hcan2) {
                //memcpy(&motorFeedback[1][i], &rx_data[0], 8);
                get_motor_feedback(&motorFeedback[1][i], rx_data);
                //usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
            }
            break;
 800111e:	e04d      	b.n	80011bc <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
            } else if (hcan == &hcan2) {
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a2b      	ldr	r2, [pc, #172]	@ (80011d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d149      	bne.n	80011bc <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
                get_motor_feedback(&motorFeedback[1][i], rx_data);
 8001128:	7a3b      	ldrb	r3, [r7, #8]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	b21a      	sxth	r2, r3
 800112e:	7a7b      	ldrb	r3, [r7, #9]
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	b21a      	sxth	r2, r3
 8001136:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800113a:	b291      	uxth	r1, r2
 800113c:	4a23      	ldr	r2, [pc, #140]	@ (80011cc <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800113e:	330b      	adds	r3, #11
 8001140:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8001144:	7abb      	ldrb	r3, [r7, #10]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b219      	sxth	r1, r3
 800114a:	7afb      	ldrb	r3, [r7, #11]
 800114c:	b21a      	sxth	r2, r3
 800114e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001152:	430a      	orrs	r2, r1
 8001154:	b211      	sxth	r1, r2
 8001156:	4a1d      	ldr	r2, [pc, #116]	@ (80011cc <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001158:	330b      	adds	r3, #11
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	4413      	add	r3, r2
 800115e:	460a      	mov	r2, r1
 8001160:	805a      	strh	r2, [r3, #2]
 8001162:	7b3b      	ldrb	r3, [r7, #12]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b219      	sxth	r1, r3
 8001168:	7b7b      	ldrb	r3, [r7, #13]
 800116a:	b21a      	sxth	r2, r3
 800116c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001170:	430a      	orrs	r2, r1
 8001172:	b211      	sxth	r1, r2
 8001174:	4a15      	ldr	r2, [pc, #84]	@ (80011cc <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001176:	330b      	adds	r3, #11
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	4413      	add	r3, r2
 800117c:	460a      	mov	r2, r1
 800117e:	809a      	strh	r2, [r3, #4]
 8001180:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001184:	7bb9      	ldrb	r1, [r7, #14]
 8001186:	4a11      	ldr	r2, [pc, #68]	@ (80011cc <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001188:	330b      	adds	r3, #11
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4413      	add	r3, r2
 800118e:	460a      	mov	r2, r1
 8001190:	719a      	strb	r2, [r3, #6]
            break;
 8001192:	e013      	b.n	80011bc <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
        }
        case CAN_POWER_ID: {

            memcpy(&power_heat_data, &rx_data, 8);
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8001196:	461a      	mov	r2, r3
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011a0:	e882 0003 	stmia.w	r2, {r0, r1}
            break;
 80011a4:	e00b      	b.n	80011be <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
        }
        case CAN_HEAT_ID: {
            memcpy((&power_heat_data.buffer_energy), &rx_data, 8);
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80011a8:	3308      	adds	r3, #8
 80011aa:	f107 0208 	add.w	r2, r7, #8
 80011ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011b2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80011b6:	e002      	b.n	80011be <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
            //memcpy((&robot_status.shooter_barrel_heat_limit), &rx_data, 6);
            break;
        }

        default: {
            break;
 80011b8:	bf00      	nop
 80011ba:	e000      	b.n	80011be <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
            break;
 80011bc:	bf00      	nop
        }
    }
}
 80011be:	bf00      	nop
 80011c0:	3730      	adds	r7, #48	@ 0x30
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200006a8 	.word	0x200006a8
 80011cc:	20000104 	.word	0x20000104
 80011d0:	200006d0 	.word	0x200006d0
 80011d4:	20000514 	.word	0x20000514

080011d8 <CAN_DriveMotor>:
		HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
	} else {      // do nothing
	}
}

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4604      	mov	r4, r0
 80011e0:	4608      	mov	r0, r1
 80011e2:	4611      	mov	r1, r2
 80011e4:	461a      	mov	r2, r3
 80011e6:	4623      	mov	r3, r4
 80011e8:	71fb      	strb	r3, [r7, #7]
 80011ea:	4603      	mov	r3, r0
 80011ec:	80bb      	strh	r3, [r7, #4]
 80011ee:	460b      	mov	r3, r1
 80011f0:	807b      	strh	r3, [r7, #2]
 80011f2:	4613      	mov	r3, r2
 80011f4:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    MotorTransmitHeader.StdId = headerID;
 80011f6:	88bb      	ldrh	r3, [r7, #4]
 80011f8:	4a27      	ldr	r2, [pc, #156]	@ (8001298 <CAN_DriveMotor+0xc0>)
 80011fa:	6013      	str	r3, [r2, #0]
    MotorTransmitHeader.IDE = CAN_ID_STD;
 80011fc:	4b26      	ldr	r3, [pc, #152]	@ (8001298 <CAN_DriveMotor+0xc0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
    MotorTransmitHeader.RTR = CAN_RTR_DATA;
 8001202:	4b25      	ldr	r3, [pc, #148]	@ (8001298 <CAN_DriveMotor+0xc0>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
    MotorTransmitHeader.DLC = 0x08;
 8001208:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <CAN_DriveMotor+0xc0>)
 800120a:	2208      	movs	r2, #8
 800120c:	611a      	str	r2, [r3, #16]
    //memcpy(&CAN_MotorSendBuffer[0], &m1, 2);
    //memcpy(&CAN_MotorSendBuffer[2], &m2, 2);
    //memcpy(&CAN_MotorSendBuffer[4], &m3, 2);
    //memcpy(&CAN_MotorSendBuffer[6], &m4, 2);     // first 8 bits and last 8 bits of each int16_t is flipped, kms
    CAN_MotorSendBuffer[0] = m1 >> 8;
 800120e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001212:	121b      	asrs	r3, r3, #8
 8001214:	b21b      	sxth	r3, r3
 8001216:	b2da      	uxtb	r2, r3
 8001218:	4b20      	ldr	r3, [pc, #128]	@ (800129c <CAN_DriveMotor+0xc4>)
 800121a:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 800121c:	887b      	ldrh	r3, [r7, #2]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <CAN_DriveMotor+0xc4>)
 8001222:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 8001224:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001228:	121b      	asrs	r3, r3, #8
 800122a:	b21b      	sxth	r3, r3
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <CAN_DriveMotor+0xc4>)
 8001230:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 8001232:	883b      	ldrh	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b19      	ldr	r3, [pc, #100]	@ (800129c <CAN_DriveMotor+0xc4>)
 8001238:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 800123a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800123e:	121b      	asrs	r3, r3, #8
 8001240:	b21b      	sxth	r3, r3
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b15      	ldr	r3, [pc, #84]	@ (800129c <CAN_DriveMotor+0xc4>)
 8001246:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 8001248:	8c3b      	ldrh	r3, [r7, #32]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b13      	ldr	r3, [pc, #76]	@ (800129c <CAN_DriveMotor+0xc4>)
 800124e:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 8001250:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001254:	121b      	asrs	r3, r3, #8
 8001256:	b21b      	sxth	r3, r3
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b10      	ldr	r3, [pc, #64]	@ (800129c <CAN_DriveMotor+0xc4>)
 800125c:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 800125e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <CAN_DriveMotor+0xc4>)
 8001264:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d107      	bne.n	800127c <CAN_DriveMotor+0xa4>
    	HAL_CAN_AddTxMessage(&CAN_1, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <CAN_DriveMotor+0xc4>)
 8001272:	4909      	ldr	r1, [pc, #36]	@ (8001298 <CAN_DriveMotor+0xc0>)
 8001274:	480a      	ldr	r0, [pc, #40]	@ (80012a0 <CAN_DriveMotor+0xc8>)
 8001276:	f003 fce3 	bl	8004c40 <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
    } else {      // do nothing
    }
}
 800127a:	e009      	b.n	8001290 <CAN_DriveMotor+0xb8>
    } else if (bus == 2) {
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d106      	bne.n	8001290 <CAN_DriveMotor+0xb8>
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	4a05      	ldr	r2, [pc, #20]	@ (800129c <CAN_DriveMotor+0xc4>)
 8001288:	4903      	ldr	r1, [pc, #12]	@ (8001298 <CAN_DriveMotor+0xc0>)
 800128a:	4806      	ldr	r0, [pc, #24]	@ (80012a4 <CAN_DriveMotor+0xcc>)
 800128c:	f003 fcd8 	bl	8004c40 <HAL_CAN_AddTxMessage>
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	bd90      	pop	{r4, r7, pc}
 8001298:	200000b4 	.word	0x200000b4
 800129c:	200000cc 	.word	0x200000cc
 80012a0:	200006a8 	.word	0x200006a8
 80012a4:	200006d0 	.word	0x200006d0

080012a8 <CAN_setMotorCtrlVal>:
	}
}


// Max Power *
void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	4604      	mov	r4, r0
 80012b0:	4608      	mov	r0, r1
 80012b2:	4611      	mov	r1, r2
 80012b4:	461a      	mov	r2, r3
 80012b6:	4623      	mov	r3, r4
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	4603      	mov	r3, r0
 80012bc:	71bb      	strb	r3, [r7, #6]
 80012be:	460b      	mov	r3, r1
 80012c0:	717b      	strb	r3, [r7, #5]
 80012c2:	4613      	mov	r3, r2
 80012c4:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 80012c6:	79bb      	ldrb	r3, [r7, #6]
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	f000 8142 	beq.w	8001552 <CAN_setMotorCtrlVal+0x2aa>
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	f300 81e1 	bgt.w	8001696 <CAN_setMotorCtrlVal+0x3ee>
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	dc02      	bgt.n	80012de <CAN_setMotorCtrlVal+0x36>
 80012d8:	2b00      	cmp	r3, #0
 80012da:	dc04      	bgt.n	80012e6 <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 80012dc:	e1db      	b.n	8001696 <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 80012de:	2b03      	cmp	r3, #3
 80012e0:	f000 8097 	beq.w	8001412 <CAN_setMotorCtrlVal+0x16a>
}
 80012e4:	e1d7      	b.n	8001696 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 80012e6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	dc02      	bgt.n	80012f4 <CAN_setMotorCtrlVal+0x4c>
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	dc05      	bgt.n	80012fe <CAN_setMotorCtrlVal+0x56>
					break;
 80012f2:	e08c      	b.n	800140e <CAN_setMotorCtrlVal+0x166>
 80012f4:	3b05      	subs	r3, #5
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	f200 8089 	bhi.w	800140e <CAN_setMotorCtrlVal+0x166>
 80012fc:	e042      	b.n	8001384 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	1e5a      	subs	r2, r3, #1
 8001302:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001306:	1e59      	subs	r1, r3, #1
 8001308:	48bd      	ldr	r0, [pc, #756]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	440b      	add	r3, r1
 8001314:	887a      	ldrh	r2, [r7, #2]
 8001316:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	1e5a      	subs	r2, r3, #1
 800131e:	49b8      	ldr	r1, [pc, #736]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 8001320:	4613      	mov	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4413      	add	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	440b      	add	r3, r1
 800132a:	f9b3 4000 	ldrsh.w	r4, [r3]
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	1e5a      	subs	r2, r3, #1
 8001332:	49b3      	ldr	r1, [pc, #716]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 8001334:	4613      	mov	r3, r2
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4413      	add	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	440b      	add	r3, r1
 800133e:	3302      	adds	r3, #2
 8001340:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	1e5a      	subs	r2, r3, #1
 8001348:	49ad      	ldr	r1, [pc, #692]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	440b      	add	r3, r1
 8001354:	3304      	adds	r3, #4
 8001356:	f9b3 1000 	ldrsh.w	r1, [r3]
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	1e5a      	subs	r2, r3, #1
 800135e:	48a8      	ldr	r0, [pc, #672]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 8001360:	4613      	mov	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4413      	add	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4403      	add	r3, r0
 800136a:	3306      	adds	r3, #6
 800136c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001370:	79f8      	ldrb	r0, [r7, #7]
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	9100      	str	r1, [sp, #0]
 8001376:	462b      	mov	r3, r5
 8001378:	4622      	mov	r2, r4
 800137a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800137e:	f7ff ff2b 	bl	80011d8 <CAN_DriveMotor>
					break;
 8001382:	e045      	b.n	8001410 <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	1e5a      	subs	r2, r3, #1
 8001388:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800138c:	1f59      	subs	r1, r3, #5
 800138e:	489c      	ldr	r0, [pc, #624]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	3304      	adds	r3, #4
 800139c:	887a      	ldrh	r2, [r7, #2]
 800139e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	1e5a      	subs	r2, r3, #1
 80013a6:	4996      	ldr	r1, [pc, #600]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	440b      	add	r3, r1
 80013b2:	3308      	adds	r3, #8
 80013b4:	f9b3 4000 	ldrsh.w	r4, [r3]
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	1e5a      	subs	r2, r3, #1
 80013bc:	4990      	ldr	r1, [pc, #576]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 80013be:	4613      	mov	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	440b      	add	r3, r1
 80013c8:	330a      	adds	r3, #10
 80013ca:	f9b3 5000 	ldrsh.w	r5, [r3]
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	1e5a      	subs	r2, r3, #1
 80013d2:	498b      	ldr	r1, [pc, #556]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	440b      	add	r3, r1
 80013de:	330c      	adds	r3, #12
 80013e0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	1e5a      	subs	r2, r3, #1
 80013e8:	4885      	ldr	r0, [pc, #532]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4403      	add	r3, r0
 80013f4:	330e      	adds	r3, #14
 80013f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fa:	79f8      	ldrb	r0, [r7, #7]
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	9100      	str	r1, [sp, #0]
 8001400:	462b      	mov	r3, r5
 8001402:	4622      	mov	r2, r4
 8001404:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001408:	f7ff fee6 	bl	80011d8 <CAN_DriveMotor>
					break;
 800140c:	e000      	b.n	8001410 <CAN_setMotorCtrlVal+0x168>
					break;
 800140e:	bf00      	nop
			break;
 8001410:	e141      	b.n	8001696 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001412:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001416:	2b08      	cmp	r3, #8
 8001418:	f000 8097 	beq.w	800154a <CAN_setMotorCtrlVal+0x2a2>
 800141c:	2b08      	cmp	r3, #8
 800141e:	f300 8096 	bgt.w	800154e <CAN_setMotorCtrlVal+0x2a6>
 8001422:	2b04      	cmp	r3, #4
 8001424:	dc02      	bgt.n	800142c <CAN_setMotorCtrlVal+0x184>
 8001426:	2b00      	cmp	r3, #0
 8001428:	dc05      	bgt.n	8001436 <CAN_setMotorCtrlVal+0x18e>
					break;
 800142a:	e090      	b.n	800154e <CAN_setMotorCtrlVal+0x2a6>
 800142c:	3b05      	subs	r3, #5
 800142e:	2b02      	cmp	r3, #2
 8001430:	f200 808d 	bhi.w	800154e <CAN_setMotorCtrlVal+0x2a6>
 8001434:	e044      	b.n	80014c0 <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	1e5a      	subs	r2, r3, #1
 800143a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800143e:	1e59      	subs	r1, r3, #1
 8001440:	486f      	ldr	r0, [pc, #444]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	3304      	adds	r3, #4
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	1e5a      	subs	r2, r3, #1
 8001458:	4969      	ldr	r1, [pc, #420]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	440b      	add	r3, r1
 8001464:	3308      	adds	r3, #8
 8001466:	f9b3 4000 	ldrsh.w	r4, [r3]
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	1e5a      	subs	r2, r3, #1
 800146e:	4964      	ldr	r1, [pc, #400]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	440b      	add	r3, r1
 800147a:	330a      	adds	r3, #10
 800147c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	1e5a      	subs	r2, r3, #1
 8001484:	495e      	ldr	r1, [pc, #376]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	330c      	adds	r3, #12
 8001492:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	1e5a      	subs	r2, r3, #1
 800149a:	4859      	ldr	r0, [pc, #356]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4403      	add	r3, r0
 80014a6:	330e      	adds	r3, #14
 80014a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ac:	79f8      	ldrb	r0, [r7, #7]
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	9100      	str	r1, [sp, #0]
 80014b2:	462b      	mov	r3, r5
 80014b4:	4622      	mov	r2, r4
 80014b6:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80014ba:	f7ff fe8d 	bl	80011d8 <CAN_DriveMotor>
					break;
 80014be:	e047      	b.n	8001550 <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	1e5a      	subs	r2, r3, #1
 80014c4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80014c8:	1f59      	subs	r1, r3, #5
 80014ca:	484d      	ldr	r0, [pc, #308]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	3308      	adds	r3, #8
 80014d8:	887a      	ldrh	r2, [r7, #2]
 80014da:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	1e5a      	subs	r2, r3, #1
 80014e2:	4947      	ldr	r1, [pc, #284]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	440b      	add	r3, r1
 80014ee:	3310      	adds	r3, #16
 80014f0:	f9b3 4000 	ldrsh.w	r4, [r3]
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	1e5a      	subs	r2, r3, #1
 80014f8:	4941      	ldr	r1, [pc, #260]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	440b      	add	r3, r1
 8001504:	3312      	adds	r3, #18
 8001506:	f9b3 5000 	ldrsh.w	r5, [r3]
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	1e5a      	subs	r2, r3, #1
 800150e:	493c      	ldr	r1, [pc, #240]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	440b      	add	r3, r1
 800151a:	3314      	adds	r3, #20
 800151c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	1e5a      	subs	r2, r3, #1
 8001524:	4836      	ldr	r0, [pc, #216]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4403      	add	r3, r0
 8001530:	3316      	adds	r3, #22
 8001532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001536:	79f8      	ldrb	r0, [r7, #7]
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	9100      	str	r1, [sp, #0]
 800153c:	462b      	mov	r3, r5
 800153e:	4622      	mov	r2, r4
 8001540:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8001544:	f7ff fe48 	bl	80011d8 <CAN_DriveMotor>
					break;
 8001548:	e002      	b.n	8001550 <CAN_setMotorCtrlVal+0x2a8>
					break;
 800154a:	bf00      	nop
 800154c:	e0a3      	b.n	8001696 <CAN_setMotorCtrlVal+0x3ee>
					break;
 800154e:	bf00      	nop
			break;
 8001550:	e0a1      	b.n	8001696 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001552:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001556:	2b08      	cmp	r3, #8
 8001558:	f000 8099 	beq.w	800168e <CAN_setMotorCtrlVal+0x3e6>
 800155c:	2b08      	cmp	r3, #8
 800155e:	f300 8098 	bgt.w	8001692 <CAN_setMotorCtrlVal+0x3ea>
 8001562:	2b04      	cmp	r3, #4
 8001564:	dc02      	bgt.n	800156c <CAN_setMotorCtrlVal+0x2c4>
 8001566:	2b00      	cmp	r3, #0
 8001568:	dc05      	bgt.n	8001576 <CAN_setMotorCtrlVal+0x2ce>
					break;
 800156a:	e092      	b.n	8001692 <CAN_setMotorCtrlVal+0x3ea>
 800156c:	3b05      	subs	r3, #5
 800156e:	2b02      	cmp	r3, #2
 8001570:	f200 808f 	bhi.w	8001692 <CAN_setMotorCtrlVal+0x3ea>
 8001574:	e046      	b.n	8001604 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	1e5a      	subs	r2, r3, #1
 800157a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800157e:	1e59      	subs	r1, r3, #1
 8001580:	481f      	ldr	r0, [pc, #124]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	440b      	add	r3, r1
 800158c:	3304      	adds	r3, #4
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	1e5a      	subs	r2, r3, #1
 8001598:	4919      	ldr	r1, [pc, #100]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	440b      	add	r3, r1
 80015a4:	3308      	adds	r3, #8
 80015a6:	f9b3 4000 	ldrsh.w	r4, [r3]
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	1e5a      	subs	r2, r3, #1
 80015ae:	4914      	ldr	r1, [pc, #80]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 80015b0:	4613      	mov	r3, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	440b      	add	r3, r1
 80015ba:	330a      	adds	r3, #10
 80015bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	1e5a      	subs	r2, r3, #1
 80015c4:	490e      	ldr	r1, [pc, #56]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	440b      	add	r3, r1
 80015d0:	330c      	adds	r3, #12
 80015d2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	1e5a      	subs	r2, r3, #1
 80015da:	4809      	ldr	r0, [pc, #36]	@ (8001600 <CAN_setMotorCtrlVal+0x358>)
 80015dc:	4613      	mov	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4403      	add	r3, r0
 80015e6:	330e      	adds	r3, #14
 80015e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ec:	79f8      	ldrb	r0, [r7, #7]
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	9100      	str	r1, [sp, #0]
 80015f2:	462b      	mov	r3, r5
 80015f4:	4622      	mov	r2, r4
 80015f6:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 80015fa:	f7ff fded 	bl	80011d8 <CAN_DriveMotor>
					break;
 80015fe:	e049      	b.n	8001694 <CAN_setMotorCtrlVal+0x3ec>
 8001600:	200000d4 	.word	0x200000d4
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	1e5a      	subs	r2, r3, #1
 8001608:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800160c:	1f59      	subs	r1, r3, #5
 800160e:	4824      	ldr	r0, [pc, #144]	@ (80016a0 <CAN_setMotorCtrlVal+0x3f8>)
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3308      	adds	r3, #8
 800161c:	887a      	ldrh	r2, [r7, #2]
 800161e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	1e5a      	subs	r2, r3, #1
 8001626:	491e      	ldr	r1, [pc, #120]	@ (80016a0 <CAN_setMotorCtrlVal+0x3f8>)
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	440b      	add	r3, r1
 8001632:	3310      	adds	r3, #16
 8001634:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	1e5a      	subs	r2, r3, #1
 800163c:	4918      	ldr	r1, [pc, #96]	@ (80016a0 <CAN_setMotorCtrlVal+0x3f8>)
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	3312      	adds	r3, #18
 800164a:	f9b3 5000 	ldrsh.w	r5, [r3]
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	1e5a      	subs	r2, r3, #1
 8001652:	4913      	ldr	r1, [pc, #76]	@ (80016a0 <CAN_setMotorCtrlVal+0x3f8>)
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	440b      	add	r3, r1
 800165e:	3314      	adds	r3, #20
 8001660:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	1e5a      	subs	r2, r3, #1
 8001668:	480d      	ldr	r0, [pc, #52]	@ (80016a0 <CAN_setMotorCtrlVal+0x3f8>)
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4403      	add	r3, r0
 8001674:	3316      	adds	r3, #22
 8001676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167a:	79f8      	ldrb	r0, [r7, #7]
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	9100      	str	r1, [sp, #0]
 8001680:	462b      	mov	r3, r5
 8001682:	4622      	mov	r2, r4
 8001684:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8001688:	f7ff fda6 	bl	80011d8 <CAN_DriveMotor>
					break;
 800168c:	e002      	b.n	8001694 <CAN_setMotorCtrlVal+0x3ec>
					break;
 800168e:	bf00      	nop
 8001690:	e000      	b.n	8001694 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8001692:	bf00      	nop
			break;
 8001694:	bf00      	nop
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bdb0      	pop	{r4, r5, r7, pc}
 800169e:	bf00      	nop
 80016a0:	200000d4 	.word	0x200000d4

080016a4 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b08b      	sub	sp, #44	@ 0x2c
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4604      	mov	r4, r0
 80016ac:	4608      	mov	r0, r1
 80016ae:	4611      	mov	r1, r2
 80016b0:	461a      	mov	r2, r3
 80016b2:	eef0 6a40 	vmov.f32	s13, s0
 80016b6:	eeb0 7a60 	vmov.f32	s14, s1
 80016ba:	eef0 7a41 	vmov.f32	s15, s2
 80016be:	4623      	mov	r3, r4
 80016c0:	75fb      	strb	r3, [r7, #23]
 80016c2:	4603      	mov	r3, r0
 80016c4:	75bb      	strb	r3, [r7, #22]
 80016c6:	460b      	mov	r3, r1
 80016c8:	757b      	strb	r3, [r7, #21]
 80016ca:	4613      	mov	r3, r2
 80016cc:	827b      	strh	r3, [r7, #18]
 80016ce:	edc7 6a01 	vstr	s13, [r7, #4]
 80016d2:	ed87 7a02 	vstr	s14, [r7, #8]
 80016d6:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 80016de:	7dfb      	ldrb	r3, [r7, #23]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 80016e4:	7dbb      	ldrb	r3, [r7, #22]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	dc02      	bgt.n	80016f0 <calcRPM_PID+0x4c>
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	dc04      	bgt.n	80016f8 <calcRPM_PID+0x54>
 80016ee:	e00d      	b.n	800170c <calcRPM_PID+0x68>
 80016f0:	3b03      	subs	r3, #3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d80a      	bhi.n	800170c <calcRPM_PID+0x68>
 80016f6:	e004      	b.n	8001702 <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 80016f8:	7d7b      	ldrb	r3, [r7, #21]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001700:	e009      	b.n	8001716 <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 8001702:	7d7b      	ldrb	r3, [r7, #21]
 8001704:	3303      	adds	r3, #3
 8001706:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800170a:	e004      	b.n	8001716 <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 800170c:	7d7b      	ldrb	r3, [r7, #21]
 800170e:	3b01      	subs	r3, #1
 8001710:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001714:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 8001716:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800171a:	7ffa      	ldrb	r2, [r7, #31]
 800171c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001720:	4c70      	ldr	r4, [pc, #448]	@ (80018e4 <calcRPM_PID+0x240>)
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	4403      	add	r3, r0
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4423      	add	r3, r4
 8001732:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001736:	7ffa      	ldrb	r2, [r7, #31]
 8001738:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800173c:	1ac9      	subs	r1, r1, r3
 800173e:	4c6a      	ldr	r4, [pc, #424]	@ (80018e8 <calcRPM_PID+0x244>)
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	4403      	add	r3, r0
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	4423      	add	r3, r4
 8001750:	3304      	adds	r3, #4
 8001752:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8001754:	7ffa      	ldrb	r2, [r7, #31]
 8001756:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800175a:	4863      	ldr	r0, [pc, #396]	@ (80018e8 <calcRPM_PID+0x244>)
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	440b      	add	r3, r1
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	4403      	add	r3, r0
 800176c:	3308      	adds	r3, #8
 800176e:	6819      	ldr	r1, [r3, #0]
 8001770:	7ffa      	ldrb	r2, [r7, #31]
 8001772:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001776:	4c5c      	ldr	r4, [pc, #368]	@ (80018e8 <calcRPM_PID+0x244>)
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	4403      	add	r3, r0
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	4423      	add	r3, r4
 8001788:	3304      	adds	r3, #4
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	7ffa      	ldrb	r2, [r7, #31]
 800178e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001792:	4419      	add	r1, r3
 8001794:	4c54      	ldr	r4, [pc, #336]	@ (80018e8 <calcRPM_PID+0x244>)
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	4403      	add	r3, r0
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	4423      	add	r3, r4
 80017a6:	3308      	adds	r3, #8
 80017a8:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 80017aa:	7ffa      	ldrb	r2, [r7, #31]
 80017ac:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80017b0:	484d      	ldr	r0, [pc, #308]	@ (80018e8 <calcRPM_PID+0x244>)
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	440b      	add	r3, r1
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	4403      	add	r3, r0
 80017c2:	6819      	ldr	r1, [r3, #0]
 80017c4:	7ffa      	ldrb	r2, [r7, #31]
 80017c6:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80017ca:	4c46      	ldr	r4, [pc, #280]	@ (80018e4 <calcRPM_PID+0x240>)
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	4403      	add	r3, r0
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4423      	add	r3, r4
 80017dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017e0:	7ffa      	ldrb	r2, [r7, #31]
 80017e2:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80017e6:	1ac9      	subs	r1, r1, r3
 80017e8:	4c3f      	ldr	r4, [pc, #252]	@ (80018e8 <calcRPM_PID+0x244>)
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	4403      	add	r3, r0
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	4423      	add	r3, r4
 80017fa:	330c      	adds	r3, #12
 80017fc:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 80017fe:	7ffa      	ldrb	r2, [r7, #31]
 8001800:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001804:	4837      	ldr	r0, [pc, #220]	@ (80018e4 <calcRPM_PID+0x240>)
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	440b      	add	r3, r1
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4403      	add	r3, r0
 8001816:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800181a:	7ffa      	ldrb	r2, [r7, #31]
 800181c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001820:	461c      	mov	r4, r3
 8001822:	4831      	ldr	r0, [pc, #196]	@ (80018e8 <calcRPM_PID+0x244>)
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	440b      	add	r3, r1
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4403      	add	r3, r0
 8001834:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8001836:	ed97 7a01 	vldr	s14, [r7, #4]
 800183a:	7ffa      	ldrb	r2, [r7, #31]
 800183c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001840:	4829      	ldr	r0, [pc, #164]	@ (80018e8 <calcRPM_PID+0x244>)
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	440b      	add	r3, r1
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	4403      	add	r3, r0
 8001852:	3304      	adds	r3, #4
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	ee07 3a90 	vmov	s15, r3
 800185a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001862:	edd7 6a02 	vldr	s13, [r7, #8]
 8001866:	7ffa      	ldrb	r2, [r7, #31]
 8001868:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800186c:	481e      	ldr	r0, [pc, #120]	@ (80018e8 <calcRPM_PID+0x244>)
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	440b      	add	r3, r1
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	4403      	add	r3, r0
 800187e:	3308      	adds	r3, #8
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	ee07 3a90 	vmov	s15, r3
 8001886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800188a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001892:	edd7 6a03 	vldr	s13, [r7, #12]
 8001896:	7ffa      	ldrb	r2, [r7, #31]
 8001898:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800189c:	4812      	ldr	r0, [pc, #72]	@ (80018e8 <calcRPM_PID+0x244>)
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	440b      	add	r3, r1
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	4403      	add	r3, r0
 80018ae:	330c      	adds	r3, #12
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c6:	ee17 3a90 	vmov	r3, s15
 80018ca:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 80018cc:	7dbb      	ldrb	r3, [r7, #22]
 80018ce:	6a39      	ldr	r1, [r7, #32]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 f80b 	bl	80018ec <applyCtrlLimit>
 80018d6:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 80018d8:	6a3b      	ldr	r3, [r7, #32]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	372c      	adds	r7, #44	@ 0x2c
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd90      	pop	{r4, r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000104 	.word	0x20000104
 80018e8:	200001b4 	.word	0x200001b4

080018ec <applyCtrlLimit>:
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
}

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d009      	beq.n	8001912 <applyCtrlLimit+0x26>
 80018fe:	2b04      	cmp	r3, #4
 8001900:	dc29      	bgt.n	8001956 <applyCtrlLimit+0x6a>
 8001902:	2b02      	cmp	r3, #2
 8001904:	dc02      	bgt.n	800190c <applyCtrlLimit+0x20>
 8001906:	2b00      	cmp	r3, #0
 8001908:	dc03      	bgt.n	8001912 <applyCtrlLimit+0x26>
 800190a:	e024      	b.n	8001956 <applyCtrlLimit+0x6a>
 800190c:	2b03      	cmp	r3, #3
 800190e:	d00f      	beq.n	8001930 <applyCtrlLimit+0x44>
 8001910:	e021      	b.n	8001956 <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001918:	dd03      	ble.n	8001922 <applyCtrlLimit+0x36>
				val = 16384;
 800191a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800191e:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 8001920:	e016      	b.n	8001950 <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8001928:	da12      	bge.n	8001950 <applyCtrlLimit+0x64>
				val = -16384;
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <applyCtrlLimit+0x78>)
 800192c:	603b      	str	r3, [r7, #0]
			break;
 800192e:	e00f      	b.n	8001950 <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001936:	4293      	cmp	r3, r2
 8001938:	dd03      	ble.n	8001942 <applyCtrlLimit+0x56>
				val = 25000;
 800193a:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800193e:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 8001940:	e008      	b.n	8001954 <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	4a08      	ldr	r2, [pc, #32]	@ (8001968 <applyCtrlLimit+0x7c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	da04      	bge.n	8001954 <applyCtrlLimit+0x68>
				val = -25000;
 800194a:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <applyCtrlLimit+0x7c>)
 800194c:	603b      	str	r3, [r7, #0]
			break;
 800194e:	e001      	b.n	8001954 <applyCtrlLimit+0x68>
			break;
 8001950:	bf00      	nop
 8001952:	e000      	b.n	8001956 <applyCtrlLimit+0x6a>
			break;
 8001954:	bf00      	nop
		}
	}
	return val;
 8001956:	683b      	ldr	r3, [r7, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	ffffc000 	.word	0xffffc000
 8001968:	ffff9e58 	.word	0xffff9e58

0800196c <setMotorRPM>:

void setMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 800196c:	b590      	push	{r4, r7, lr}
 800196e:	b087      	sub	sp, #28
 8001970:	af00      	add	r7, sp, #0
 8001972:	4604      	mov	r4, r0
 8001974:	4608      	mov	r0, r1
 8001976:	4611      	mov	r1, r2
 8001978:	461a      	mov	r2, r3
 800197a:	eef0 6a40 	vmov.f32	s13, s0
 800197e:	eeb0 7a60 	vmov.f32	s14, s1
 8001982:	eef0 7a41 	vmov.f32	s15, s2
 8001986:	4623      	mov	r3, r4
 8001988:	75fb      	strb	r3, [r7, #23]
 800198a:	4603      	mov	r3, r0
 800198c:	75bb      	strb	r3, [r7, #22]
 800198e:	460b      	mov	r3, r1
 8001990:	757b      	strb	r3, [r7, #21]
 8001992:	4613      	mov	r3, r2
 8001994:	827b      	strh	r3, [r7, #18]
 8001996:	edc7 6a01 	vstr	s13, [r7, #4]
 800199a:	ed87 7a02 	vstr	s14, [r7, #8]
 800199e:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcRPM_PID(bus, motorType, motorID, RPMtarget, preset));
 80019a2:	edd7 6a01 	vldr	s13, [r7, #4]
 80019a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80019aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80019ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019b2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80019b6:	7db9      	ldrb	r1, [r7, #22]
 80019b8:	7df8      	ldrb	r0, [r7, #23]
 80019ba:	eeb0 0a66 	vmov.f32	s0, s13
 80019be:	eef0 0a47 	vmov.f32	s1, s14
 80019c2:	eeb0 1a67 	vmov.f32	s2, s15
 80019c6:	f7ff fe6d 	bl	80016a4 <calcRPM_PID>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80019d2:	7db9      	ldrb	r1, [r7, #22]
 80019d4:	7df8      	ldrb	r0, [r7, #23]
 80019d6:	f7ff fc67 	bl	80012a8 <CAN_setMotorCtrlVal>
}
 80019da:	bf00      	nop
 80019dc:	371c      	adds	r7, #28
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd90      	pop	{r4, r7, pc}
	...

080019e4 <getRotorPosition>:

void setMotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcPosition_PID(bus, motorType, motorID, positionTarget, preset));
}

uint16_t getRotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
 80019ee:	460b      	mov	r3, r1
 80019f0:	71bb      	strb	r3, [r7, #6]
 80019f2:	4613      	mov	r3, r2
 80019f4:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 80019f6:	79bb      	ldrb	r3, [r7, #6]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	dc02      	bgt.n	8001a02 <getRotorPosition+0x1e>
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	dc04      	bgt.n	8001a0a <getRotorPosition+0x26>
 8001a00:	e034      	b.n	8001a6c <getRotorPosition+0x88>
 8001a02:	3b03      	subs	r3, #3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d831      	bhi.n	8001a6c <getRotorPosition+0x88>
 8001a08:	e016      	b.n	8001a38 <getRotorPosition+0x54>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 8001a0a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	dd29      	ble.n	8001a66 <getRotorPosition+0x82>
 8001a12:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	dc25      	bgt.n	8001a66 <getRotorPosition+0x82>
				return motorFeedback[bus - 1][motorID - 1].rotor_position;
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	1e5a      	subs	r2, r3, #1
 8001a1e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a22:	1e59      	subs	r1, r3, #1
 8001a24:	4815      	ldr	r0, [pc, #84]	@ (8001a7c <getRotorPosition+0x98>)
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	440b      	add	r3, r1
 8001a32:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001a36:	e01b      	b.n	8001a70 <getRotorPosition+0x8c>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8001a38:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	dd14      	ble.n	8001a6a <getRotorPosition+0x86>
 8001a40:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a44:	2b07      	cmp	r3, #7
 8001a46:	dc10      	bgt.n	8001a6a <getRotorPosition+0x86>
				return motorFeedback[bus - 1][motorID + 3].rotor_position;
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	1e5a      	subs	r2, r3, #1
 8001a4c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a50:	1cd9      	adds	r1, r3, #3
 8001a52:	480a      	ldr	r0, [pc, #40]	@ (8001a7c <getRotorPosition+0x98>)
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	440b      	add	r3, r1
 8001a60:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001a64:	e004      	b.n	8001a70 <getRotorPosition+0x8c>
			break;
 8001a66:	bf00      	nop
 8001a68:	e000      	b.n	8001a6c <getRotorPosition+0x88>
			}
			break;
 8001a6a:	bf00      	nop
		}
	}
	return -1;
 8001a6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	20000104 	.word	0x20000104

08001a80 <usart_Init>:
pc_control_t pc_control;
custom_client_data_t custom_client_data;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 8001a84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a88:	4905      	ldr	r1, [pc, #20]	@ (8001aa0 <usart_Init+0x20>)
 8001a8a:	4806      	ldr	r0, [pc, #24]	@ (8001aa4 <usart_Init+0x24>)
 8001a8c:	f007 f9d2 	bl	8008e34 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8001a90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a94:	4904      	ldr	r1, [pc, #16]	@ (8001aa8 <usart_Init+0x28>)
 8001a96:	4805      	ldr	r0, [pc, #20]	@ (8001aac <usart_Init+0x2c>)
 8001a98:	f007 f9cc 	bl	8008e34 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000314 	.word	0x20000314
 8001aa4:	20000a2c 	.word	0x20000a2c
 8001aa8:	20000414 	.word	0x20000414
 8001aac:	20000ab4 	.word	0x20000ab4

08001ab0 <usart_printf>:

void usart_printf(const char *fmt,...) {
 8001ab0:	b40f      	push	{r0, r1, r2, r3}
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	4a0c      	ldr	r2, [pc, #48]	@ (8001aec <usart_printf+0x3c>)
 8001abc:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 8001abe:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <usart_printf+0x3c>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68b9      	ldr	r1, [r7, #8]
 8001ac4:	480a      	ldr	r0, [pc, #40]	@ (8001af0 <usart_printf+0x40>)
 8001ac6:	f00b fad5 	bl	800d074 <vsiprintf>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <usart_printf+0x44>)
 8001ad0:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 8001ad2:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <usart_printf+0x44>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4905      	ldr	r1, [pc, #20]	@ (8001af0 <usart_printf+0x40>)
 8001ada:	4807      	ldr	r0, [pc, #28]	@ (8001af8 <usart_printf+0x48>)
 8001adc:	f007 f92c 	bl	8008d38 <HAL_UART_Transmit_DMA>
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ae8:	b004      	add	sp, #16
 8001aea:	4770      	bx	lr
 8001aec:	20000540 	.word	0x20000540
 8001af0:	20000544 	.word	0x20000544
 8001af4:	20000644 	.word	0x20000644
 8001af8:	20000a2c 	.word	0x20000a2c

08001afc <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
			}

	}
	*/

}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	@ 0x28
 8001b18:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8001b22:	2301      	movs	r3, #1
 8001b24:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 8001b26:	2300      	movs	r3, #0
 8001b28:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8001b3e:	463b      	mov	r3, r7
 8001b40:	4619      	mov	r1, r3
 8001b42:	480f      	ldr	r0, [pc, #60]	@ (8001b80 <can_filter_init+0x6c>)
 8001b44:	f002 ff58 	bl	80049f8 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8001b48:	480d      	ldr	r0, [pc, #52]	@ (8001b80 <can_filter_init+0x6c>)
 8001b4a:	f003 f835 	bl	8004bb8 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001b4e:	2102      	movs	r1, #2
 8001b50:	480b      	ldr	r0, [pc, #44]	@ (8001b80 <can_filter_init+0x6c>)
 8001b52:	f003 fa62 	bl	800501a <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 8001b56:	230e      	movs	r3, #14
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 8001b5a:	230e      	movs	r3, #14
 8001b5c:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 8001b5e:	463b      	mov	r3, r7
 8001b60:	4619      	mov	r1, r3
 8001b62:	4808      	ldr	r0, [pc, #32]	@ (8001b84 <can_filter_init+0x70>)
 8001b64:	f002 ff48 	bl	80049f8 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 8001b68:	4806      	ldr	r0, [pc, #24]	@ (8001b84 <can_filter_init+0x70>)
 8001b6a:	f003 f825 	bl	8004bb8 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001b6e:	2102      	movs	r1, #2
 8001b70:	4804      	ldr	r0, [pc, #16]	@ (8001b84 <can_filter_init+0x70>)
 8001b72:	f003 fa52 	bl	800501a <HAL_CAN_ActivateNotification>
}
 8001b76:	bf00      	nop
 8001b78:	3728      	adds	r7, #40	@ 0x28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200006a8 	.word	0x200006a8
 8001b84:	200006d0 	.word	0x200006d0

08001b88 <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 8001b92:	4a04      	ldr	r2, [pc, #16]	@ (8001ba4 <imu_pwm_set+0x1c>)
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	6353      	str	r3, [r2, #52]	@ 0x34

}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	40014400 	.word	0x40014400

08001ba8 <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 8001bb6:	4b27      	ldr	r3, [pc, #156]	@ (8001c54 <RC_init+0xac>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	4b25      	ldr	r3, [pc, #148]	@ (8001c54 <RC_init+0xac>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001bc4:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 8001bc6:	4b23      	ldr	r3, [pc, #140]	@ (8001c54 <RC_init+0xac>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	4b21      	ldr	r3, [pc, #132]	@ (8001c54 <RC_init+0xac>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0210 	orr.w	r2, r2, #16
 8001bd4:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 8001bd6:	4b20      	ldr	r3, [pc, #128]	@ (8001c58 <RC_init+0xb0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c58 <RC_init+0xb0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0201 	bic.w	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8001be6:	e007      	b.n	8001bf8 <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8001be8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c58 <RC_init+0xb0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4b1a      	ldr	r3, [pc, #104]	@ (8001c58 <RC_init+0xb0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0201 	bic.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8001bf8:	4b17      	ldr	r3, [pc, #92]	@ (8001c58 <RC_init+0xb0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 8001c06:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <RC_init+0xb0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a14      	ldr	r2, [pc, #80]	@ (8001c5c <RC_init+0xb4>)
 8001c0c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 8001c0e:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <RC_init+0xb0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <RC_init+0xb0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <RC_init+0xb0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	88fa      	ldrh	r2, [r7, #6]
 8001c24:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8001c26:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <RC_init+0xb0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <RC_init+0xb0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001c34:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 8001c36:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <RC_init+0xb0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <RC_init+0xb0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0201 	orr.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000a70 	.word	0x20000a70
 8001c58:	20000bb8 	.word	0x20000bb8
 8001c5c:	40004804 	.word	0x40004804

08001c60 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
    osDelay(500);
 8001c68:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c6c:	f008 fb40 	bl	800a2f0 <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 8001c70:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001d14 <imu_temp_control_task+0xb4>
 8001c74:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001d18 <imu_temp_control_task+0xb8>
 8001c78:	4a28      	ldr	r2, [pc, #160]	@ (8001d1c <imu_temp_control_task+0xbc>)
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4828      	ldr	r0, [pc, #160]	@ (8001d20 <imu_temp_control_task+0xc0>)
 8001c7e:	f001 f8b3 	bl	8002de8 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c82:	4b28      	ldr	r3, [pc, #160]	@ (8001d24 <imu_temp_control_task+0xc4>)
 8001c84:	2210      	movs	r2, #16
 8001c86:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c88:	4826      	ldr	r0, [pc, #152]	@ (8001d24 <imu_temp_control_task+0xc4>)
 8001c8a:	f005 fd6a 	bl	8007762 <HAL_SPI_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <imu_temp_control_task+0x38>
    {
        Error_Handler();
 8001c94:	f001 f8a2 	bl	8002ddc <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f009 fc47 	bl	800b52c <pcTaskGetName>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f009 fcd7 	bl	800b654 <xTaskGetHandle>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8001d28 <imu_temp_control_task+0xc8>)
 8001caa:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 8001cac:	4b1f      	ldr	r3, [pc, #124]	@ (8001d2c <imu_temp_control_task+0xcc>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 8001cb2:	bf00      	nop
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f00a f8f7 	bl	800beac <ulTaskNotifyTake>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d1f7      	bne.n	8001cb4 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8001cc4:	f7ff f8a0 	bl	8000e08 <IMU_get_temp>
 8001cc8:	eef0 7a40 	vmov.f32	s15, s0
 8001ccc:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8001d30 <imu_temp_control_task+0xd0>
 8001cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd4:	4812      	ldr	r0, [pc, #72]	@ (8001d20 <imu_temp_control_task+0xc0>)
 8001cd6:	f001 f8de 	bl	8002e96 <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 8001cda:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <imu_temp_control_task+0xc0>)
 8001cdc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ce0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce8:	d503      	bpl.n	8001cf2 <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 8001cea:	4b0d      	ldr	r3, [pc, #52]	@ (8001d20 <imu_temp_control_task+0xc0>)
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <imu_temp_control_task+0xc0>)
 8001cf4:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cfc:	ee17 3a90 	vmov	r3, s15
 8001d00:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8001d02:	89fb      	ldrh	r3, [r7, #14]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff3f 	bl	8001b88 <imu_pwm_set>
        osDelay(5);
 8001d0a:	2005      	movs	r0, #5
 8001d0c:	f008 faf0 	bl	800a2f0 <osDelay>
    {
 8001d10:	e7cf      	b.n	8001cb2 <imu_temp_control_task+0x52>
 8001d12:	bf00      	nop
 8001d14:	45898000 	.word	0x45898000
 8001d18:	458ca000 	.word	0x458ca000
 8001d1c:	0800dab4 	.word	0x0800dab4
 8001d20:	20000650 	.word	0x20000650
 8001d24:	2000074c 	.word	0x2000074c
 8001d28:	20000648 	.word	0x20000648
 8001d2c:	2000064c 	.word	0x2000064c
 8001d30:	42200000 	.word	0x42200000

08001d34 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 8001d3e:	4b12      	ldr	r3, [pc, #72]	@ (8001d88 <HAL_GPIO_EXTI_Callback+0x54>)
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	88fa      	ldrh	r2, [r7, #6]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d11b      	bne.n	8001d80 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8001d48:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <HAL_GPIO_EXTI_Callback+0x58>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d016      	beq.n	8001d80 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d52:	f00a f81d 	bl	800bd90 <xTaskGetSchedulerState>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d011      	beq.n	8001d80 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	490c      	ldr	r1, [pc, #48]	@ (8001d94 <HAL_GPIO_EXTI_Callback+0x60>)
 8001d62:	4618      	mov	r0, r3
 8001d64:	f00a f8ee 	bl	800bf44 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001d68:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <HAL_GPIO_EXTI_Callback+0x60>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d007      	beq.n	8001d80 <HAL_GPIO_EXTI_Callback+0x4c>
 8001d70:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <HAL_GPIO_EXTI_Callback+0x64>)
 8001d72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	f3bf 8f4f 	dsb	sy
 8001d7c:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2000000e 	.word	0x2000000e
 8001d8c:	2000064c 	.word	0x2000064c
 8001d90:	20000648 	.word	0x20000648
 8001d94:	20000698 	.word	0x20000698
 8001d98:	e000ed04 	.word	0xe000ed04

08001d9c <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 8001da8:	f107 0308 	add.w	r3, r7, #8
 8001dac:	2206      	movs	r2, #6
 8001dae:	4619      	mov	r1, r3
 8001db0:	2003      	movs	r0, #3
 8001db2:	f000 f845 	bl	8001e40 <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 8001db6:	7a7b      	ldrb	r3, [r7, #9]
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	b21a      	sxth	r2, r3
 8001dbc:	7a3b      	ldrb	r3, [r7, #8]
 8001dbe:	b21b      	sxth	r3, r3
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 8001dc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dc8:	ee07 3a90 	vmov	s15, r3
 8001dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001e3c <ist8310_read_mag+0xa0>
 8001dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 8001dde:	7afb      	ldrb	r3, [r7, #11]
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	b21a      	sxth	r2, r3
 8001de4:	7abb      	ldrb	r3, [r7, #10]
 8001de6:	b21b      	sxth	r3, r3
 8001de8:	4313      	orrs	r3, r2
 8001dea:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 8001dec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001df0:	ee07 3a90 	vmov	s15, r3
 8001df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001e3c <ist8310_read_mag+0xa0>
 8001e00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e04:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 8001e08:	7b7b      	ldrb	r3, [r7, #13]
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	b21a      	sxth	r2, r3
 8001e0e:	7b3b      	ldrb	r3, [r7, #12]
 8001e10:	b21b      	sxth	r3, r3
 8001e12:	4313      	orrs	r3, r2
 8001e14:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 8001e16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3308      	adds	r3, #8
 8001e26:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001e3c <ist8310_read_mag+0xa0>
 8001e2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e2e:	edc3 7a00 	vstr	s15, [r3]
}
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	3e99999a 	.word	0x3e99999a

08001e40 <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af04      	add	r7, sp, #16
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	71fb      	strb	r3, [r7, #7]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	79bb      	ldrb	r3, [r7, #6]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	210a      	movs	r1, #10
 8001e5a:	9102      	str	r1, [sp, #8]
 8001e5c:	9301      	str	r3, [sp, #4]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	2301      	movs	r3, #1
 8001e64:	211c      	movs	r1, #28
 8001e66:	4803      	ldr	r0, [pc, #12]	@ (8001e74 <ist8310_IIC_read_muli_reg+0x34>)
 8001e68:	f004 fb52 	bl	8006510 <HAL_I2C_Mem_Read>
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	200006f8 	.word	0x200006f8

08001e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e7c:	f002 fc4e 	bl	800471c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e80:	f000 f868 	bl	8001f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e84:	f000 fd02 	bl	800288c <MX_GPIO_Init>
  MX_DMA_Init();
 8001e88:	f000 fc9a 	bl	80027c0 <MX_DMA_Init>
  MX_CAN1_Init();
 8001e8c:	f000 f8ce 	bl	800202c <MX_CAN1_Init>
  MX_CAN2_Init();
 8001e90:	f000 f902 	bl	8002098 <MX_CAN2_Init>
  MX_SPI1_Init();
 8001e94:	f000 f964 	bl	8002160 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001e98:	f000 fa40 	bl	800231c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001e9c:	f000 fc10 	bl	80026c0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001ea0:	f000 fc64 	bl	800276c <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8001ea4:	f000 f992 	bl	80021cc <MX_TIM1_Init>
  MX_TIM8_Init();
 8001ea8:	f000 fb20 	bl	80024ec <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8001eac:	f000 fc32 	bl	8002714 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8001eb0:	f000 fbb8 	bl	8002624 <MX_TIM10_Init>
  MX_I2C3_Init();
 8001eb4:	f000 f926 	bl	8002104 <MX_I2C3_Init>
  MX_TIM5_Init();
 8001eb8:	f000 faa8 	bl	800240c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8001ebc:	f7ff fe2a 	bl	8001b14 <can_filter_init>
  remote_control_init();
 8001ec0:	f001 fa72 	bl	80033a8 <remote_control_init>
  usart_Init();
 8001ec4:	f7ff fddc 	bl	8001a80 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 8001ec8:	f001 fa7c 	bl	80033c4 <get_remote_control_point>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4a14      	ldr	r2, [pc, #80]	@ (8001f20 <main+0xa8>)
 8001ed0:	6013      	str	r3, [r2, #0]
  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ed2:	f008 f931 	bl	800a138 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 8001ed6:	4a13      	ldr	r2, [pc, #76]	@ (8001f24 <main+0xac>)
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4813      	ldr	r0, [pc, #76]	@ (8001f28 <main+0xb0>)
 8001edc:	f008 f976 	bl	800a1cc <osThreadNew>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4a12      	ldr	r2, [pc, #72]	@ (8001f2c <main+0xb4>)
 8001ee4:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 8001ee6:	4a12      	ldr	r2, [pc, #72]	@ (8001f30 <main+0xb8>)
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4812      	ldr	r0, [pc, #72]	@ (8001f34 <main+0xbc>)
 8001eec:	f008 f96e 	bl	800a1cc <osThreadNew>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4a11      	ldr	r2, [pc, #68]	@ (8001f38 <main+0xc0>)
 8001ef4:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8001ef6:	4a11      	ldr	r2, [pc, #68]	@ (8001f3c <main+0xc4>)
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4811      	ldr	r0, [pc, #68]	@ (8001f40 <main+0xc8>)
 8001efc:	f008 f966 	bl	800a1cc <osThreadNew>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4a10      	ldr	r2, [pc, #64]	@ (8001f44 <main+0xcc>)
 8001f04:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 8001f06:	4a10      	ldr	r2, [pc, #64]	@ (8001f48 <main+0xd0>)
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4810      	ldr	r0, [pc, #64]	@ (8001f4c <main+0xd4>)
 8001f0c:	f008 f95e 	bl	800a1cc <osThreadNew>
 8001f10:	4603      	mov	r3, r0
 8001f12:	4a0f      	ldr	r2, [pc, #60]	@ (8001f50 <main+0xd8>)
 8001f14:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001f16:	f008 f933 	bl	800a180 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f1a:	bf00      	nop
 8001f1c:	e7fd      	b.n	8001f1a <main+0xa2>
 8001f1e:	bf00      	nop
 8001f20:	20000ce8 	.word	0x20000ce8
 8001f24:	0800dac0 	.word	0x0800dac0
 8001f28:	08002a81 	.word	0x08002a81
 8001f2c:	20000cd8 	.word	0x20000cd8
 8001f30:	0800dae4 	.word	0x0800dae4
 8001f34:	08002a91 	.word	0x08002a91
 8001f38:	20000cdc 	.word	0x20000cdc
 8001f3c:	0800db08 	.word	0x0800db08
 8001f40:	08001c61 	.word	0x08001c61
 8001f44:	20000ce0 	.word	0x20000ce0
 8001f48:	0800db2c 	.word	0x0800db2c
 8001f4c:	08002dcd 	.word	0x08002dcd
 8001f50:	20000ce4 	.word	0x20000ce4

08001f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b094      	sub	sp, #80	@ 0x50
 8001f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f5a:	f107 0320 	add.w	r3, r7, #32
 8001f5e:	2230      	movs	r2, #48	@ 0x30
 8001f60:	2100      	movs	r1, #0
 8001f62:	4618      	mov	r0, r3
 8001f64:	f00b f890 	bl	800d088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	4b29      	ldr	r3, [pc, #164]	@ (8002024 <SystemClock_Config+0xd0>)
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	4a28      	ldr	r2, [pc, #160]	@ (8002024 <SystemClock_Config+0xd0>)
 8001f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f86:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f88:	4b26      	ldr	r3, [pc, #152]	@ (8002024 <SystemClock_Config+0xd0>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f94:	2300      	movs	r3, #0
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	4b23      	ldr	r3, [pc, #140]	@ (8002028 <SystemClock_Config+0xd4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a22      	ldr	r2, [pc, #136]	@ (8002028 <SystemClock_Config+0xd4>)
 8001f9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b20      	ldr	r3, [pc, #128]	@ (8002028 <SystemClock_Config+0xd4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fbe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001fc4:	2306      	movs	r3, #6
 8001fc6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001fc8:	23a8      	movs	r3, #168	@ 0xa8
 8001fca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fd4:	f107 0320 	add.w	r3, r7, #32
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f004 ff43 	bl	8006e64 <HAL_RCC_OscConfig>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fe4:	f000 fefa 	bl	8002ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fe8:	230f      	movs	r3, #15
 8001fea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fec:	2302      	movs	r3, #2
 8001fee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ff4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ff8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ffa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ffe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002000:	f107 030c 	add.w	r3, r7, #12
 8002004:	2105      	movs	r1, #5
 8002006:	4618      	mov	r0, r3
 8002008:	f005 f9a4 	bl	8007354 <HAL_RCC_ClockConfig>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002012:	f000 fee3 	bl	8002ddc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002016:	f005 fa83 	bl	8007520 <HAL_RCC_EnableCSS>
}
 800201a:	bf00      	nop
 800201c:	3750      	adds	r7, #80	@ 0x50
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	40007000 	.word	0x40007000

0800202c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002030:	4b17      	ldr	r3, [pc, #92]	@ (8002090 <MX_CAN1_Init+0x64>)
 8002032:	4a18      	ldr	r2, [pc, #96]	@ (8002094 <MX_CAN1_Init+0x68>)
 8002034:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8002036:	4b16      	ldr	r3, [pc, #88]	@ (8002090 <MX_CAN1_Init+0x64>)
 8002038:	2203      	movs	r2, #3
 800203a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800203c:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <MX_CAN1_Init+0x64>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002042:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <MX_CAN1_Init+0x64>)
 8002044:	2200      	movs	r2, #0
 8002046:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8002048:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <MX_CAN1_Init+0x64>)
 800204a:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 800204e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002050:	4b0f      	ldr	r3, [pc, #60]	@ (8002090 <MX_CAN1_Init+0x64>)
 8002052:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002056:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002058:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <MX_CAN1_Init+0x64>)
 800205a:	2200      	movs	r2, #0
 800205c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800205e:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <MX_CAN1_Init+0x64>)
 8002060:	2200      	movs	r2, #0
 8002062:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002064:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <MX_CAN1_Init+0x64>)
 8002066:	2200      	movs	r2, #0
 8002068:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800206a:	4b09      	ldr	r3, [pc, #36]	@ (8002090 <MX_CAN1_Init+0x64>)
 800206c:	2200      	movs	r2, #0
 800206e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002070:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <MX_CAN1_Init+0x64>)
 8002072:	2200      	movs	r2, #0
 8002074:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002076:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <MX_CAN1_Init+0x64>)
 8002078:	2200      	movs	r2, #0
 800207a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800207c:	4804      	ldr	r0, [pc, #16]	@ (8002090 <MX_CAN1_Init+0x64>)
 800207e:	f002 fbbf 	bl	8004800 <HAL_CAN_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002088:	f000 fea8 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	200006a8 	.word	0x200006a8
 8002094:	40006400 	.word	0x40006400

08002098 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800209c:	4b17      	ldr	r3, [pc, #92]	@ (80020fc <MX_CAN2_Init+0x64>)
 800209e:	4a18      	ldr	r2, [pc, #96]	@ (8002100 <MX_CAN2_Init+0x68>)
 80020a0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 80020a2:	4b16      	ldr	r3, [pc, #88]	@ (80020fc <MX_CAN2_Init+0x64>)
 80020a4:	2203      	movs	r2, #3
 80020a6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80020a8:	4b14      	ldr	r3, [pc, #80]	@ (80020fc <MX_CAN2_Init+0x64>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80020ae:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <MX_CAN2_Init+0x64>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 80020b4:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <MX_CAN2_Init+0x64>)
 80020b6:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80020ba:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80020bc:	4b0f      	ldr	r3, [pc, #60]	@ (80020fc <MX_CAN2_Init+0x64>)
 80020be:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80020c2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80020c4:	4b0d      	ldr	r3, [pc, #52]	@ (80020fc <MX_CAN2_Init+0x64>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80020ca:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <MX_CAN2_Init+0x64>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80020d0:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <MX_CAN2_Init+0x64>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80020d6:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <MX_CAN2_Init+0x64>)
 80020d8:	2200      	movs	r2, #0
 80020da:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80020dc:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <MX_CAN2_Init+0x64>)
 80020de:	2200      	movs	r2, #0
 80020e0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80020e2:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <MX_CAN2_Init+0x64>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80020e8:	4804      	ldr	r0, [pc, #16]	@ (80020fc <MX_CAN2_Init+0x64>)
 80020ea:	f002 fb89 	bl	8004800 <HAL_CAN_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80020f4:	f000 fe72 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	200006d0 	.word	0x200006d0
 8002100:	40006800 	.word	0x40006800

08002104 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002108:	4b12      	ldr	r3, [pc, #72]	@ (8002154 <MX_I2C3_Init+0x50>)
 800210a:	4a13      	ldr	r2, [pc, #76]	@ (8002158 <MX_I2C3_Init+0x54>)
 800210c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800210e:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <MX_I2C3_Init+0x50>)
 8002110:	4a12      	ldr	r2, [pc, #72]	@ (800215c <MX_I2C3_Init+0x58>)
 8002112:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002114:	4b0f      	ldr	r3, [pc, #60]	@ (8002154 <MX_I2C3_Init+0x50>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800211a:	4b0e      	ldr	r3, [pc, #56]	@ (8002154 <MX_I2C3_Init+0x50>)
 800211c:	2200      	movs	r2, #0
 800211e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002120:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <MX_I2C3_Init+0x50>)
 8002122:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002126:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002128:	4b0a      	ldr	r3, [pc, #40]	@ (8002154 <MX_I2C3_Init+0x50>)
 800212a:	2200      	movs	r2, #0
 800212c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800212e:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <MX_I2C3_Init+0x50>)
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002134:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <MX_I2C3_Init+0x50>)
 8002136:	2200      	movs	r2, #0
 8002138:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800213a:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <MX_I2C3_Init+0x50>)
 800213c:	2200      	movs	r2, #0
 800213e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002140:	4804      	ldr	r0, [pc, #16]	@ (8002154 <MX_I2C3_Init+0x50>)
 8002142:	f004 f8a1 	bl	8006288 <HAL_I2C_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800214c:	f000 fe46 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	200006f8 	.word	0x200006f8
 8002158:	40005c00 	.word	0x40005c00
 800215c:	00061a80 	.word	0x00061a80

08002160 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002164:	4b17      	ldr	r3, [pc, #92]	@ (80021c4 <MX_SPI1_Init+0x64>)
 8002166:	4a18      	ldr	r2, [pc, #96]	@ (80021c8 <MX_SPI1_Init+0x68>)
 8002168:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800216a:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <MX_SPI1_Init+0x64>)
 800216c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002170:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002172:	4b14      	ldr	r3, [pc, #80]	@ (80021c4 <MX_SPI1_Init+0x64>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002178:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <MX_SPI1_Init+0x64>)
 800217a:	2200      	movs	r2, #0
 800217c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800217e:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <MX_SPI1_Init+0x64>)
 8002180:	2202      	movs	r2, #2
 8002182:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002184:	4b0f      	ldr	r3, [pc, #60]	@ (80021c4 <MX_SPI1_Init+0x64>)
 8002186:	2201      	movs	r2, #1
 8002188:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800218a:	4b0e      	ldr	r3, [pc, #56]	@ (80021c4 <MX_SPI1_Init+0x64>)
 800218c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002190:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002192:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <MX_SPI1_Init+0x64>)
 8002194:	2238      	movs	r2, #56	@ 0x38
 8002196:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002198:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <MX_SPI1_Init+0x64>)
 800219a:	2200      	movs	r2, #0
 800219c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800219e:	4b09      	ldr	r3, [pc, #36]	@ (80021c4 <MX_SPI1_Init+0x64>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021a4:	4b07      	ldr	r3, [pc, #28]	@ (80021c4 <MX_SPI1_Init+0x64>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021aa:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <MX_SPI1_Init+0x64>)
 80021ac:	220a      	movs	r2, #10
 80021ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021b0:	4804      	ldr	r0, [pc, #16]	@ (80021c4 <MX_SPI1_Init+0x64>)
 80021b2:	f005 fad6 	bl	8007762 <HAL_SPI_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80021bc:	f000 fe0e 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	2000074c 	.word	0x2000074c
 80021c8:	40013000 	.word	0x40013000

080021cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b092      	sub	sp, #72	@ 0x48
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
 80021ec:	615a      	str	r2, [r3, #20]
 80021ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	2220      	movs	r2, #32
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f00a ff46 	bl	800d088 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021fc:	4b45      	ldr	r3, [pc, #276]	@ (8002314 <MX_TIM1_Init+0x148>)
 80021fe:	4a46      	ldr	r2, [pc, #280]	@ (8002318 <MX_TIM1_Init+0x14c>)
 8002200:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8002202:	4b44      	ldr	r3, [pc, #272]	@ (8002314 <MX_TIM1_Init+0x148>)
 8002204:	2253      	movs	r2, #83	@ 0x53
 8002206:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002208:	4b42      	ldr	r3, [pc, #264]	@ (8002314 <MX_TIM1_Init+0x148>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800220e:	4b41      	ldr	r3, [pc, #260]	@ (8002314 <MX_TIM1_Init+0x148>)
 8002210:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002214:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002216:	4b3f      	ldr	r3, [pc, #252]	@ (8002314 <MX_TIM1_Init+0x148>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800221c:	4b3d      	ldr	r3, [pc, #244]	@ (8002314 <MX_TIM1_Init+0x148>)
 800221e:	2200      	movs	r2, #0
 8002220:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002222:	4b3c      	ldr	r3, [pc, #240]	@ (8002314 <MX_TIM1_Init+0x148>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002228:	483a      	ldr	r0, [pc, #232]	@ (8002314 <MX_TIM1_Init+0x148>)
 800222a:	f005 fe47 	bl	8007ebc <HAL_TIM_PWM_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002234:	f000 fdd2 	bl	8002ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002238:	2300      	movs	r3, #0
 800223a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002240:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002244:	4619      	mov	r1, r3
 8002246:	4833      	ldr	r0, [pc, #204]	@ (8002314 <MX_TIM1_Init+0x148>)
 8002248:	f006 fc5a 	bl	8008b00 <HAL_TIMEx_MasterConfigSynchronization>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002252:	f000 fdc3 	bl	8002ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002256:	2360      	movs	r3, #96	@ 0x60
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800225e:	2300      	movs	r3, #0
 8002260:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002262:	2300      	movs	r3, #0
 8002264:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002266:	2300      	movs	r3, #0
 8002268:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002276:	2200      	movs	r2, #0
 8002278:	4619      	mov	r1, r3
 800227a:	4826      	ldr	r0, [pc, #152]	@ (8002314 <MX_TIM1_Init+0x148>)
 800227c:	f005 ffa6 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002286:	f000 fda9 	bl	8002ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800228a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800228e:	2204      	movs	r2, #4
 8002290:	4619      	mov	r1, r3
 8002292:	4820      	ldr	r0, [pc, #128]	@ (8002314 <MX_TIM1_Init+0x148>)
 8002294:	f005 ff9a 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800229e:	f000 fd9d 	bl	8002ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022a6:	2208      	movs	r2, #8
 80022a8:	4619      	mov	r1, r3
 80022aa:	481a      	ldr	r0, [pc, #104]	@ (8002314 <MX_TIM1_Init+0x148>)
 80022ac:	f005 ff8e 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80022b6:	f000 fd91 	bl	8002ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022be:	220c      	movs	r2, #12
 80022c0:	4619      	mov	r1, r3
 80022c2:	4814      	ldr	r0, [pc, #80]	@ (8002314 <MX_TIM1_Init+0x148>)
 80022c4:	f005 ff82 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80022ce:	f000 fd85 	bl	8002ddc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022ec:	2300      	movs	r3, #0
 80022ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	4619      	mov	r1, r3
 80022f4:	4807      	ldr	r0, [pc, #28]	@ (8002314 <MX_TIM1_Init+0x148>)
 80022f6:	f006 fc7f 	bl	8008bf8 <HAL_TIMEx_ConfigBreakDeadTime>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8002300:	f000 fd6c 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002304:	4803      	ldr	r0, [pc, #12]	@ (8002314 <MX_TIM1_Init+0x148>)
 8002306:	f001 fdf1 	bl	8003eec <HAL_TIM_MspPostInit>

}
 800230a:	bf00      	nop
 800230c:	3748      	adds	r7, #72	@ 0x48
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200007a4 	.word	0x200007a4
 8002318:	40010000 	.word	0x40010000

0800231c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08e      	sub	sp, #56	@ 0x38
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002322:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002330:	f107 0320 	add.w	r3, r7, #32
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
 8002348:	615a      	str	r2, [r3, #20]
 800234a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800234c:	4b2d      	ldr	r3, [pc, #180]	@ (8002404 <MX_TIM4_Init+0xe8>)
 800234e:	4a2e      	ldr	r2, [pc, #184]	@ (8002408 <MX_TIM4_Init+0xec>)
 8002350:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002352:	4b2c      	ldr	r3, [pc, #176]	@ (8002404 <MX_TIM4_Init+0xe8>)
 8002354:	2253      	movs	r2, #83	@ 0x53
 8002356:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002358:	4b2a      	ldr	r3, [pc, #168]	@ (8002404 <MX_TIM4_Init+0xe8>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 800235e:	4b29      	ldr	r3, [pc, #164]	@ (8002404 <MX_TIM4_Init+0xe8>)
 8002360:	f245 2207 	movw	r2, #20999	@ 0x5207
 8002364:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002366:	4b27      	ldr	r3, [pc, #156]	@ (8002404 <MX_TIM4_Init+0xe8>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800236c:	4b25      	ldr	r3, [pc, #148]	@ (8002404 <MX_TIM4_Init+0xe8>)
 800236e:	2280      	movs	r2, #128	@ 0x80
 8002370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002372:	4824      	ldr	r0, [pc, #144]	@ (8002404 <MX_TIM4_Init+0xe8>)
 8002374:	f005 fcea 	bl	8007d4c <HAL_TIM_Base_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800237e:	f000 fd2d 	bl	8002ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002382:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002386:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002388:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800238c:	4619      	mov	r1, r3
 800238e:	481d      	ldr	r0, [pc, #116]	@ (8002404 <MX_TIM4_Init+0xe8>)
 8002390:	f005 ffde 	bl	8008350 <HAL_TIM_ConfigClockSource>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800239a:	f000 fd1f 	bl	8002ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800239e:	4819      	ldr	r0, [pc, #100]	@ (8002404 <MX_TIM4_Init+0xe8>)
 80023a0:	f005 fd8c 	bl	8007ebc <HAL_TIM_PWM_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80023aa:	f000 fd17 	bl	8002ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023b6:	f107 0320 	add.w	r3, r7, #32
 80023ba:	4619      	mov	r1, r3
 80023bc:	4811      	ldr	r0, [pc, #68]	@ (8002404 <MX_TIM4_Init+0xe8>)
 80023be:	f006 fb9f 	bl	8008b00 <HAL_TIMEx_MasterConfigSynchronization>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80023c8:	f000 fd08 	bl	8002ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023cc:	2360      	movs	r3, #96	@ 0x60
 80023ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 80023d0:	f642 1303 	movw	r3, #10499	@ 0x2903
 80023d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	2208      	movs	r2, #8
 80023e2:	4619      	mov	r1, r3
 80023e4:	4807      	ldr	r0, [pc, #28]	@ (8002404 <MX_TIM4_Init+0xe8>)
 80023e6:	f005 fef1 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80023f0:	f000 fcf4 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80023f4:	4803      	ldr	r0, [pc, #12]	@ (8002404 <MX_TIM4_Init+0xe8>)
 80023f6:	f001 fd79 	bl	8003eec <HAL_TIM_MspPostInit>

}
 80023fa:	bf00      	nop
 80023fc:	3738      	adds	r7, #56	@ 0x38
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200007ec 	.word	0x200007ec
 8002408:	40000800 	.word	0x40000800

0800240c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	@ 0x28
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002412:	f107 0320 	add.w	r3, r7, #32
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	60da      	str	r2, [r3, #12]
 8002428:	611a      	str	r2, [r3, #16]
 800242a:	615a      	str	r2, [r3, #20]
 800242c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800242e:	4b2d      	ldr	r3, [pc, #180]	@ (80024e4 <MX_TIM5_Init+0xd8>)
 8002430:	4a2d      	ldr	r2, [pc, #180]	@ (80024e8 <MX_TIM5_Init+0xdc>)
 8002432:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002434:	4b2b      	ldr	r3, [pc, #172]	@ (80024e4 <MX_TIM5_Init+0xd8>)
 8002436:	2253      	movs	r2, #83	@ 0x53
 8002438:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243a:	4b2a      	ldr	r3, [pc, #168]	@ (80024e4 <MX_TIM5_Init+0xd8>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8002440:	4b28      	ldr	r3, [pc, #160]	@ (80024e4 <MX_TIM5_Init+0xd8>)
 8002442:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002446:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002448:	4b26      	ldr	r3, [pc, #152]	@ (80024e4 <MX_TIM5_Init+0xd8>)
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800244e:	4b25      	ldr	r3, [pc, #148]	@ (80024e4 <MX_TIM5_Init+0xd8>)
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002454:	4823      	ldr	r0, [pc, #140]	@ (80024e4 <MX_TIM5_Init+0xd8>)
 8002456:	f005 fd31 	bl	8007ebc <HAL_TIM_PWM_Init>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002460:	f000 fcbc 	bl	8002ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800246c:	f107 0320 	add.w	r3, r7, #32
 8002470:	4619      	mov	r1, r3
 8002472:	481c      	ldr	r0, [pc, #112]	@ (80024e4 <MX_TIM5_Init+0xd8>)
 8002474:	f006 fb44 	bl	8008b00 <HAL_TIMEx_MasterConfigSynchronization>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800247e:	f000 fcad 	bl	8002ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002482:	2360      	movs	r3, #96	@ 0x60
 8002484:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	2200      	movs	r2, #0
 8002496:	4619      	mov	r1, r3
 8002498:	4812      	ldr	r0, [pc, #72]	@ (80024e4 <MX_TIM5_Init+0xd8>)
 800249a:	f005 fe97 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80024a4:	f000 fc9a 	bl	8002ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	2204      	movs	r2, #4
 80024ac:	4619      	mov	r1, r3
 80024ae:	480d      	ldr	r0, [pc, #52]	@ (80024e4 <MX_TIM5_Init+0xd8>)
 80024b0:	f005 fe8c 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80024ba:	f000 fc8f 	bl	8002ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	2208      	movs	r2, #8
 80024c2:	4619      	mov	r1, r3
 80024c4:	4807      	ldr	r0, [pc, #28]	@ (80024e4 <MX_TIM5_Init+0xd8>)
 80024c6:	f005 fe81 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80024d0:	f000 fc84 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80024d4:	4803      	ldr	r0, [pc, #12]	@ (80024e4 <MX_TIM5_Init+0xd8>)
 80024d6:	f001 fd09 	bl	8003eec <HAL_TIM_MspPostInit>

}
 80024da:	bf00      	nop
 80024dc:	3728      	adds	r7, #40	@ 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000834 	.word	0x20000834
 80024e8:	40000c00 	.word	0x40000c00

080024ec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b092      	sub	sp, #72	@ 0x48
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]
 800250c:	615a      	str	r2, [r3, #20]
 800250e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002510:	1d3b      	adds	r3, r7, #4
 8002512:	2220      	movs	r2, #32
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f00a fdb6 	bl	800d088 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800251c:	4b3f      	ldr	r3, [pc, #252]	@ (800261c <MX_TIM8_Init+0x130>)
 800251e:	4a40      	ldr	r2, [pc, #256]	@ (8002620 <MX_TIM8_Init+0x134>)
 8002520:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8002522:	4b3e      	ldr	r3, [pc, #248]	@ (800261c <MX_TIM8_Init+0x130>)
 8002524:	2253      	movs	r2, #83	@ 0x53
 8002526:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002528:	4b3c      	ldr	r3, [pc, #240]	@ (800261c <MX_TIM8_Init+0x130>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 800252e:	4b3b      	ldr	r3, [pc, #236]	@ (800261c <MX_TIM8_Init+0x130>)
 8002530:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002534:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002536:	4b39      	ldr	r3, [pc, #228]	@ (800261c <MX_TIM8_Init+0x130>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800253c:	4b37      	ldr	r3, [pc, #220]	@ (800261c <MX_TIM8_Init+0x130>)
 800253e:	2200      	movs	r2, #0
 8002540:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002542:	4b36      	ldr	r3, [pc, #216]	@ (800261c <MX_TIM8_Init+0x130>)
 8002544:	2280      	movs	r2, #128	@ 0x80
 8002546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002548:	4834      	ldr	r0, [pc, #208]	@ (800261c <MX_TIM8_Init+0x130>)
 800254a:	f005 fcb7 	bl	8007ebc <HAL_TIM_PWM_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002554:	f000 fc42 	bl	8002ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002558:	2300      	movs	r3, #0
 800255a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002560:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002564:	4619      	mov	r1, r3
 8002566:	482d      	ldr	r0, [pc, #180]	@ (800261c <MX_TIM8_Init+0x130>)
 8002568:	f006 faca 	bl	8008b00 <HAL_TIMEx_MasterConfigSynchronization>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002572:	f000 fc33 	bl	8002ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002576:	2360      	movs	r3, #96	@ 0x60
 8002578:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800257e:	2300      	movs	r3, #0
 8002580:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002582:	2300      	movs	r3, #0
 8002584:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002586:	2300      	movs	r3, #0
 8002588:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800258a:	2300      	movs	r3, #0
 800258c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800258e:	2300      	movs	r3, #0
 8002590:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002596:	2200      	movs	r2, #0
 8002598:	4619      	mov	r1, r3
 800259a:	4820      	ldr	r0, [pc, #128]	@ (800261c <MX_TIM8_Init+0x130>)
 800259c:	f005 fe16 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80025a6:	f000 fc19 	bl	8002ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ae:	2204      	movs	r2, #4
 80025b0:	4619      	mov	r1, r3
 80025b2:	481a      	ldr	r0, [pc, #104]	@ (800261c <MX_TIM8_Init+0x130>)
 80025b4:	f005 fe0a 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80025be:	f000 fc0d 	bl	8002ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025c6:	2208      	movs	r2, #8
 80025c8:	4619      	mov	r1, r3
 80025ca:	4814      	ldr	r0, [pc, #80]	@ (800261c <MX_TIM8_Init+0x130>)
 80025cc:	f005 fdfe 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80025d6:	f000 fc01 	bl	8002ddc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	4619      	mov	r1, r3
 80025fc:	4807      	ldr	r0, [pc, #28]	@ (800261c <MX_TIM8_Init+0x130>)
 80025fe:	f006 fafb 	bl	8008bf8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8002608:	f000 fbe8 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800260c:	4803      	ldr	r0, [pc, #12]	@ (800261c <MX_TIM8_Init+0x130>)
 800260e:	f001 fc6d 	bl	8003eec <HAL_TIM_MspPostInit>

}
 8002612:	bf00      	nop
 8002614:	3748      	adds	r7, #72	@ 0x48
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	2000087c 	.word	0x2000087c
 8002620:	40010400 	.word	0x40010400

08002624 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	611a      	str	r2, [r3, #16]
 8002638:	615a      	str	r2, [r3, #20]
 800263a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800263c:	4b1e      	ldr	r3, [pc, #120]	@ (80026b8 <MX_TIM10_Init+0x94>)
 800263e:	4a1f      	ldr	r2, [pc, #124]	@ (80026bc <MX_TIM10_Init+0x98>)
 8002640:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002642:	4b1d      	ldr	r3, [pc, #116]	@ (80026b8 <MX_TIM10_Init+0x94>)
 8002644:	2200      	movs	r2, #0
 8002646:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002648:	4b1b      	ldr	r3, [pc, #108]	@ (80026b8 <MX_TIM10_Init+0x94>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 800264e:	4b1a      	ldr	r3, [pc, #104]	@ (80026b8 <MX_TIM10_Init+0x94>)
 8002650:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002654:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002656:	4b18      	ldr	r3, [pc, #96]	@ (80026b8 <MX_TIM10_Init+0x94>)
 8002658:	2200      	movs	r2, #0
 800265a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265c:	4b16      	ldr	r3, [pc, #88]	@ (80026b8 <MX_TIM10_Init+0x94>)
 800265e:	2200      	movs	r2, #0
 8002660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002662:	4815      	ldr	r0, [pc, #84]	@ (80026b8 <MX_TIM10_Init+0x94>)
 8002664:	f005 fb72 	bl	8007d4c <HAL_TIM_Base_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800266e:	f000 fbb5 	bl	8002ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002672:	4811      	ldr	r0, [pc, #68]	@ (80026b8 <MX_TIM10_Init+0x94>)
 8002674:	f005 fc22 	bl	8007ebc <HAL_TIM_PWM_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800267e:	f000 fbad 	bl	8002ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002682:	2360      	movs	r3, #96	@ 0x60
 8002684:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	2200      	movs	r2, #0
 8002696:	4619      	mov	r1, r3
 8002698:	4807      	ldr	r0, [pc, #28]	@ (80026b8 <MX_TIM10_Init+0x94>)
 800269a:	f005 fd97 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80026a4:	f000 fb9a 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80026a8:	4803      	ldr	r0, [pc, #12]	@ (80026b8 <MX_TIM10_Init+0x94>)
 80026aa:	f001 fc1f 	bl	8003eec <HAL_TIM_MspPostInit>

}
 80026ae:	bf00      	nop
 80026b0:	3720      	adds	r7, #32
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200008c4 	.word	0x200008c4
 80026bc:	40014400 	.word	0x40014400

080026c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026c4:	4b11      	ldr	r3, [pc, #68]	@ (800270c <MX_USART1_UART_Init+0x4c>)
 80026c6:	4a12      	ldr	r2, [pc, #72]	@ (8002710 <MX_USART1_UART_Init+0x50>)
 80026c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026ca:	4b10      	ldr	r3, [pc, #64]	@ (800270c <MX_USART1_UART_Init+0x4c>)
 80026cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026d2:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <MX_USART1_UART_Init+0x4c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026d8:	4b0c      	ldr	r3, [pc, #48]	@ (800270c <MX_USART1_UART_Init+0x4c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026de:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <MX_USART1_UART_Init+0x4c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026e4:	4b09      	ldr	r3, [pc, #36]	@ (800270c <MX_USART1_UART_Init+0x4c>)
 80026e6:	220c      	movs	r2, #12
 80026e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ea:	4b08      	ldr	r3, [pc, #32]	@ (800270c <MX_USART1_UART_Init+0x4c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026f0:	4b06      	ldr	r3, [pc, #24]	@ (800270c <MX_USART1_UART_Init+0x4c>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026f6:	4805      	ldr	r0, [pc, #20]	@ (800270c <MX_USART1_UART_Init+0x4c>)
 80026f8:	f006 fad0 	bl	8008c9c <HAL_UART_Init>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002702:	f000 fb6b 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000a2c 	.word	0x20000a2c
 8002710:	40011000 	.word	0x40011000

08002714 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002718:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <MX_USART3_UART_Init+0x4c>)
 800271a:	4a12      	ldr	r2, [pc, #72]	@ (8002764 <MX_USART3_UART_Init+0x50>)
 800271c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 800271e:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <MX_USART3_UART_Init+0x4c>)
 8002720:	4a11      	ldr	r2, [pc, #68]	@ (8002768 <MX_USART3_UART_Init+0x54>)
 8002722:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002724:	4b0e      	ldr	r3, [pc, #56]	@ (8002760 <MX_USART3_UART_Init+0x4c>)
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800272a:	4b0d      	ldr	r3, [pc, #52]	@ (8002760 <MX_USART3_UART_Init+0x4c>)
 800272c:	2200      	movs	r2, #0
 800272e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8002730:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <MX_USART3_UART_Init+0x4c>)
 8002732:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002738:	4b09      	ldr	r3, [pc, #36]	@ (8002760 <MX_USART3_UART_Init+0x4c>)
 800273a:	220c      	movs	r2, #12
 800273c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800273e:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <MX_USART3_UART_Init+0x4c>)
 8002740:	2200      	movs	r2, #0
 8002742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002744:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <MX_USART3_UART_Init+0x4c>)
 8002746:	2200      	movs	r2, #0
 8002748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800274a:	4805      	ldr	r0, [pc, #20]	@ (8002760 <MX_USART3_UART_Init+0x4c>)
 800274c:	f006 faa6 	bl	8008c9c <HAL_UART_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002756:	f000 fb41 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000a70 	.word	0x20000a70
 8002764:	40004800 	.word	0x40004800
 8002768:	000186a0 	.word	0x000186a0

0800276c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002770:	4b11      	ldr	r3, [pc, #68]	@ (80027b8 <MX_USART6_UART_Init+0x4c>)
 8002772:	4a12      	ldr	r2, [pc, #72]	@ (80027bc <MX_USART6_UART_Init+0x50>)
 8002774:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002776:	4b10      	ldr	r3, [pc, #64]	@ (80027b8 <MX_USART6_UART_Init+0x4c>)
 8002778:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800277c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800277e:	4b0e      	ldr	r3, [pc, #56]	@ (80027b8 <MX_USART6_UART_Init+0x4c>)
 8002780:	2200      	movs	r2, #0
 8002782:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002784:	4b0c      	ldr	r3, [pc, #48]	@ (80027b8 <MX_USART6_UART_Init+0x4c>)
 8002786:	2200      	movs	r2, #0
 8002788:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800278a:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <MX_USART6_UART_Init+0x4c>)
 800278c:	2200      	movs	r2, #0
 800278e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002790:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <MX_USART6_UART_Init+0x4c>)
 8002792:	220c      	movs	r2, #12
 8002794:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002796:	4b08      	ldr	r3, [pc, #32]	@ (80027b8 <MX_USART6_UART_Init+0x4c>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800279c:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <MX_USART6_UART_Init+0x4c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80027a2:	4805      	ldr	r0, [pc, #20]	@ (80027b8 <MX_USART6_UART_Init+0x4c>)
 80027a4:	f006 fa7a 	bl	8008c9c <HAL_UART_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80027ae:	f000 fb15 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000ab4 	.word	0x20000ab4
 80027bc:	40011400 	.word	0x40011400

080027c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002888 <MX_DMA_Init+0xc8>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ce:	4a2e      	ldr	r2, [pc, #184]	@ (8002888 <MX_DMA_Init+0xc8>)
 80027d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002888 <MX_DMA_Init+0xc8>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	603b      	str	r3, [r7, #0]
 80027e6:	4b28      	ldr	r3, [pc, #160]	@ (8002888 <MX_DMA_Init+0xc8>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	4a27      	ldr	r2, [pc, #156]	@ (8002888 <MX_DMA_Init+0xc8>)
 80027ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f2:	4b25      	ldr	r3, [pc, #148]	@ (8002888 <MX_DMA_Init+0xc8>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2105      	movs	r1, #5
 8002802:	200c      	movs	r0, #12
 8002804:	f002 ff39 	bl	800567a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002808:	200c      	movs	r0, #12
 800280a:	f002 ff52 	bl	80056b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800280e:	2200      	movs	r2, #0
 8002810:	2105      	movs	r1, #5
 8002812:	200d      	movs	r0, #13
 8002814:	f002 ff31 	bl	800567a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002818:	200d      	movs	r0, #13
 800281a:	f002 ff4a 	bl	80056b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	2105      	movs	r1, #5
 8002822:	200f      	movs	r0, #15
 8002824:	f002 ff29 	bl	800567a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002828:	200f      	movs	r0, #15
 800282a:	f002 ff42 	bl	80056b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2105      	movs	r1, #5
 8002832:	202f      	movs	r0, #47	@ 0x2f
 8002834:	f002 ff21 	bl	800567a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002838:	202f      	movs	r0, #47	@ 0x2f
 800283a:	f002 ff3a 	bl	80056b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2105      	movs	r1, #5
 8002842:	2039      	movs	r0, #57	@ 0x39
 8002844:	f002 ff19 	bl	800567a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002848:	2039      	movs	r0, #57	@ 0x39
 800284a:	f002 ff32 	bl	80056b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2105      	movs	r1, #5
 8002852:	203a      	movs	r0, #58	@ 0x3a
 8002854:	f002 ff11 	bl	800567a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002858:	203a      	movs	r0, #58	@ 0x3a
 800285a:	f002 ff2a 	bl	80056b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	2105      	movs	r1, #5
 8002862:	2045      	movs	r0, #69	@ 0x45
 8002864:	f002 ff09 	bl	800567a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002868:	2045      	movs	r0, #69	@ 0x45
 800286a:	f002 ff22 	bl	80056b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2105      	movs	r1, #5
 8002872:	2046      	movs	r0, #70	@ 0x46
 8002874:	f002 ff01 	bl	800567a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002878:	2046      	movs	r0, #70	@ 0x46
 800287a:	f002 ff1a 	bl	80056b2 <HAL_NVIC_EnableIRQ>

}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800

0800288c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08e      	sub	sp, #56	@ 0x38
 8002890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	60da      	str	r2, [r3, #12]
 80028a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
 80028a6:	4b71      	ldr	r3, [pc, #452]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	4a70      	ldr	r2, [pc, #448]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 80028ac:	f043 0302 	orr.w	r3, r3, #2
 80028b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b2:	4b6e      	ldr	r3, [pc, #440]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	623b      	str	r3, [r7, #32]
 80028bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	4b6a      	ldr	r3, [pc, #424]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	4a69      	ldr	r2, [pc, #420]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 80028c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ce:	4b67      	ldr	r3, [pc, #412]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	4b63      	ldr	r3, [pc, #396]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	4a62      	ldr	r2, [pc, #392]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ea:	4b60      	ldr	r3, [pc, #384]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	4b5c      	ldr	r3, [pc, #368]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	4a5b      	ldr	r2, [pc, #364]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 8002900:	f043 0308 	orr.w	r3, r3, #8
 8002904:	6313      	str	r3, [r2, #48]	@ 0x30
 8002906:	4b59      	ldr	r3, [pc, #356]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	4b55      	ldr	r3, [pc, #340]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	4a54      	ldr	r2, [pc, #336]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 800291c:	f043 0304 	orr.w	r3, r3, #4
 8002920:	6313      	str	r3, [r2, #48]	@ 0x30
 8002922:	4b52      	ldr	r3, [pc, #328]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4b4e      	ldr	r3, [pc, #312]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	4a4d      	ldr	r2, [pc, #308]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 8002938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800293c:	6313      	str	r3, [r2, #48]	@ 0x30
 800293e:	4b4b      	ldr	r3, [pc, #300]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	4b47      	ldr	r3, [pc, #284]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002952:	4a46      	ldr	r2, [pc, #280]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 8002954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002958:	6313      	str	r3, [r2, #48]	@ 0x30
 800295a:	4b44      	ldr	r3, [pc, #272]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	4b40      	ldr	r3, [pc, #256]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 8002970:	f043 0320 	orr.w	r3, r3, #32
 8002974:	6313      	str	r3, [r2, #48]	@ 0x30
 8002976:	4b3d      	ldr	r3, [pc, #244]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	4b39      	ldr	r3, [pc, #228]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	4a38      	ldr	r2, [pc, #224]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 800298c:	f043 0310 	orr.w	r3, r3, #16
 8002990:	6313      	str	r3, [r2, #48]	@ 0x30
 8002992:	4b36      	ldr	r3, [pc, #216]	@ (8002a6c <MX_GPIO_Init+0x1e0>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800299e:	2200      	movs	r2, #0
 80029a0:	2140      	movs	r1, #64	@ 0x40
 80029a2:	4833      	ldr	r0, [pc, #204]	@ (8002a70 <MX_GPIO_Init+0x1e4>)
 80029a4:	f003 fc3e 	bl	8006224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80029a8:	2200      	movs	r2, #0
 80029aa:	2110      	movs	r1, #16
 80029ac:	4831      	ldr	r0, [pc, #196]	@ (8002a74 <MX_GPIO_Init+0x1e8>)
 80029ae:	f003 fc39 	bl	8006224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2101      	movs	r1, #1
 80029b6:	4830      	ldr	r0, [pc, #192]	@ (8002a78 <MX_GPIO_Init+0x1ec>)
 80029b8:	f003 fc34 	bl	8006224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029bc:	2340      	movs	r3, #64	@ 0x40
 80029be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c0:	2301      	movs	r3, #1
 80029c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c8:	2300      	movs	r3, #0
 80029ca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029d0:	4619      	mov	r1, r3
 80029d2:	4827      	ldr	r0, [pc, #156]	@ (8002a70 <MX_GPIO_Init+0x1e4>)
 80029d4:	f003 fa8a 	bl	8005eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029d8:	2308      	movs	r3, #8
 80029da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029ea:	4619      	mov	r1, r3
 80029ec:	4820      	ldr	r0, [pc, #128]	@ (8002a70 <MX_GPIO_Init+0x1e4>)
 80029ee:	f003 fa7d 	bl	8005eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029f2:	2310      	movs	r3, #16
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f6:	2301      	movs	r3, #1
 80029f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fe:	2300      	movs	r3, #0
 8002a00:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a06:	4619      	mov	r1, r3
 8002a08:	481a      	ldr	r0, [pc, #104]	@ (8002a74 <MX_GPIO_Init+0x1e8>)
 8002a0a:	f003 fa6f 	bl	8005eec <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 8002a0e:	2330      	movs	r3, #48	@ 0x30
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a20:	4619      	mov	r1, r3
 8002a22:	4816      	ldr	r0, [pc, #88]	@ (8002a7c <MX_GPIO_Init+0x1f0>)
 8002a24:	f003 fa62 	bl	8005eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a34:	2300      	movs	r3, #0
 8002a36:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	480e      	ldr	r0, [pc, #56]	@ (8002a78 <MX_GPIO_Init+0x1ec>)
 8002a40:	f003 fa54 	bl	8005eec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002a44:	2200      	movs	r2, #0
 8002a46:	2105      	movs	r1, #5
 8002a48:	2009      	movs	r0, #9
 8002a4a:	f002 fe16 	bl	800567a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002a4e:	2009      	movs	r0, #9
 8002a50:	f002 fe2f 	bl	80056b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002a54:	2200      	movs	r2, #0
 8002a56:	2105      	movs	r1, #5
 8002a58:	200a      	movs	r0, #10
 8002a5a:	f002 fe0e 	bl	800567a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002a5e:	200a      	movs	r0, #10
 8002a60:	f002 fe27 	bl	80056b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a64:	bf00      	nop
 8002a66:	3738      	adds	r7, #56	@ 0x38
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40021800 	.word	0x40021800
 8002a74:	40020000 	.word	0x40020000
 8002a78:	40020400 	.word	0x40020400
 8002a7c:	40020800 	.word	0x40020800

08002a80 <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	for(;;) {
		osDelay(5);
 8002a88:	2005      	movs	r0, #5
 8002a8a:	f007 fc31 	bl	800a2f0 <osDelay>
 8002a8e:	e7fb      	b.n	8002a88 <TaskMain+0x8>

08002a90 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b092      	sub	sp, #72	@ 0x48
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskChassis */
	PWMInit(&htim1, &htim4, &htim5, &htim8);
 8002a98:	4bc3      	ldr	r3, [pc, #780]	@ (8002da8 <TaskChassis+0x318>)
 8002a9a:	4ac4      	ldr	r2, [pc, #784]	@ (8002dac <TaskChassis+0x31c>)
 8002a9c:	49c4      	ldr	r1, [pc, #784]	@ (8002db0 <TaskChassis+0x320>)
 8002a9e:	48c5      	ldr	r0, [pc, #788]	@ (8002db4 <TaskChassis+0x324>)
 8002aa0:	f000 fb42 	bl	8003128 <PWMInit>

	PID_preset_t YPVoltageRPM = {10.0, 0.0, 0.0};
 8002aa4:	4bc4      	ldr	r3, [pc, #784]	@ (8002db8 <TaskChassis+0x328>)
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	623b      	str	r3, [r7, #32]
	PID_preset_t CMT = {10, 0.0, 0.0};
 8002ab4:	4bc0      	ldr	r3, [pc, #768]	@ (8002db8 <TaskChassis+0x328>)
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]

    int16_t clickScaler = 1;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    int16_t returnScaler = 2;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    int16_t rpmOutput = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	877b      	strh	r3, [r7, #58]	@ 0x3a
    int16_t maxAmp = 1*819.2; // 819.2 is the scaler for 1 amp
 8002ad0:	f240 3333 	movw	r3, #819	@ 0x333
 8002ad4:	873b      	strh	r3, [r7, #56]	@ 0x38
    	// usart_printf("Beans %d\r\n", getMotorRPM(Bus1, M2006, 5));




    	uint16_t currentPos = getRotorPosition(Bus1, M2006, 5);
 8002ad6:	2205      	movs	r2, #5
 8002ad8:	2102      	movs	r1, #2
 8002ada:	2001      	movs	r0, #1
 8002adc:	f7fe ff82 	bl	80019e4 <getRotorPosition>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	86fb      	strh	r3, [r7, #54]	@ 0x36
    	int16_t incrementLow = (currentPos-1000)/614;
 8002ae4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002ae6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002aea:	4ab4      	ldr	r2, [pc, #720]	@ (8002dbc <TaskChassis+0x32c>)
 8002aec:	fb82 1203 	smull	r1, r2, r2, r3
 8002af0:	441a      	add	r2, r3
 8002af2:	1252      	asrs	r2, r2, #9
 8002af4:	17db      	asrs	r3, r3, #31
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	86bb      	strh	r3, [r7, #52]	@ 0x34
    	int16_t incrementHigh = incrementLow+1;
 8002afa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002afc:	3301      	adds	r3, #1
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	867b      	strh	r3, [r7, #50]	@ 0x32
    	// usart_printf("LI: %d, HI: %d\r\n", incrementLow, incrementHigh);

    	int16_t maxAmp = 1*819.2; // 819.2 is the scaler for 1 amp
 8002b02:	f240 3333 	movw	r3, #819	@ 0x333
 8002b06:	863b      	strh	r3, [r7, #48]	@ 0x30
    	int8_t incrementer = 1;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    	int16_t turnVal = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    	rpmOutput = currentPos- 1000;
 8002b12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b14:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	877b      	strh	r3, [r7, #58]	@ 0x3a

    	float scalerValThing = 0.05;
 8002b1c:	4ba8      	ldr	r3, [pc, #672]	@ (8002dc0 <TaskChassis+0x330>)
 8002b1e:	62bb      	str	r3, [r7, #40]	@ 0x28

    	// The first 2 if statements are temporary just to test before the housing is made
    	if (currentPos < 1000) {
 8002b20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b26:	d225      	bcs.n	8002b74 <TaskChassis+0xe4>
    		setMotorRPM(Bus1, M2006, 5, returnScaler * (1000-currentPos), YPVoltageRPM);
 8002b28:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b2a:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002b32:	fb12 f303 	smulbb	r3, r2, r3
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	b21b      	sxth	r3, r3
 8002b3a:	edd7 6a06 	vldr	s13, [r7, #24]
 8002b3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b42:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b46:	eeb0 0a66 	vmov.f32	s0, s13
 8002b4a:	eef0 0a47 	vmov.f32	s1, s14
 8002b4e:	eeb0 1a67 	vmov.f32	s2, s15
 8002b52:	2205      	movs	r2, #5
 8002b54:	2102      	movs	r1, #2
 8002b56:	2001      	movs	r0, #1
 8002b58:	f7fe ff08 	bl	800196c <setMotorRPM>
    		rpmOutput = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	877b      	strh	r3, [r7, #58]	@ 0x3a
    		turnVal = returnScaler * (1000-currentPos);
 8002b60:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b62:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002b6a:	fb12 f303 	smulbb	r3, r2, r3
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8002b72:	e0e8      	b.n	8002d46 <TaskChassis+0x2b6>
    	} else if (currentPos > 7140) {
 8002b74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b76:	f641 32e4 	movw	r2, #7140	@ 0x1be4
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d925      	bls.n	8002bca <TaskChassis+0x13a>
    		setMotorRPM(Bus1, M2006, 5, returnScaler * (7140-currentPos), YPVoltageRPM);
 8002b7e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b80:	f5c3 53df 	rsb	r3, r3, #7136	@ 0x1be0
 8002b84:	3304      	adds	r3, #4
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002b8a:	fb12 f303 	smulbb	r3, r2, r3
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	b21b      	sxth	r3, r3
 8002b92:	edd7 6a06 	vldr	s13, [r7, #24]
 8002b96:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b9e:	eeb0 0a66 	vmov.f32	s0, s13
 8002ba2:	eef0 0a47 	vmov.f32	s1, s14
 8002ba6:	eeb0 1a67 	vmov.f32	s2, s15
 8002baa:	2205      	movs	r2, #5
 8002bac:	2102      	movs	r1, #2
 8002bae:	2001      	movs	r0, #1
 8002bb0:	f7fe fedc 	bl	800196c <setMotorRPM>
    		turnVal = returnScaler * (7140-currentPos);
 8002bb4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002bb6:	f5c3 53df 	rsb	r3, r3, #7136	@ 0x1be0
 8002bba:	3304      	adds	r3, #4
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002bc0:	fb12 f303 	smulbb	r3, r2, r3
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8002bc8:	e0bd      	b.n	8002d46 <TaskChassis+0x2b6>
    	} else {
    		turnVal = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    		if (incrementer == 1) {
 8002bce:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	f040 80a5 	bne.w	8002d22 <TaskChassis+0x292>
    			int16_t lowDelta = currentPos-(incrementLow*614)-1000;
 8002bd8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002bda:	461a      	mov	r2, r3
 8002bdc:	0092      	lsls	r2, r2, #2
 8002bde:	441a      	add	r2, r3
 8002be0:	0212      	lsls	r2, r2, #8
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	0092      	lsls	r2, r2, #2
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	0111      	lsls	r1, r2, #4
 8002bee:	461a      	mov	r2, r3
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002bfa:	4413      	add	r3, r2
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	84fb      	strh	r3, [r7, #38]	@ 0x26
    			int16_t highDelta = (incrementHigh*614) - currentPos+1000;
 8002c06:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002c08:	461a      	mov	r2, r3
 8002c0a:	00d2      	lsls	r2, r2, #3
 8002c0c:	441a      	add	r2, r3
 8002c0e:	4611      	mov	r1, r2
 8002c10:	0108      	lsls	r0, r1, #4
 8002c12:	4611      	mov	r1, r2
 8002c14:	4602      	mov	r2, r0
 8002c16:	440a      	add	r2, r1
 8002c18:	0052      	lsls	r2, r2, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    			usart_printf("LI: %d, HI: %d\r\n", lowDelta, highDelta);
 8002c2e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002c32:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8002c36:	4619      	mov	r1, r3
 8002c38:	4862      	ldr	r0, [pc, #392]	@ (8002dc4 <TaskChassis+0x334>)
 8002c3a:	f7fe ff39 	bl	8001ab0 <usart_printf>
    			if (lowDelta < highDelta) {
 8002c3e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8002c42:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002c46:	429a      	cmp	r2, r3
 8002c48:	da35      	bge.n	8002cb6 <TaskChassis+0x226>
    				int32_t rpmCalc = (int32_t)(scalerValThing*(float)(lowDelta));
 8002c4a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002c4e:	ee07 3a90 	vmov	s15, r3
 8002c52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c56:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c62:	ee17 3a90 	vmov	r3, s15
 8002c66:	647b      	str	r3, [r7, #68]	@ 0x44
    				if (rpmCalc > maxAmp) {
 8002c68:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002c6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	dd03      	ble.n	8002c7a <TaskChassis+0x1ea>
    					rpmCalc = maxAmp;
 8002c72:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002c76:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c78:	e009      	b.n	8002c8e <TaskChassis+0x1fe>
    				} else if (rpmCalc < -1* maxAmp) {
 8002c7a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002c7e:	425b      	negs	r3, r3
 8002c80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c82:	429a      	cmp	r2, r3
 8002c84:	da03      	bge.n	8002c8e <TaskChassis+0x1fe>
    					rpmCalc = -1*maxAmp;
 8002c86:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002c8a:	425b      	negs	r3, r3
 8002c8c:	647b      	str	r3, [r7, #68]	@ 0x44
    				}
    				// usart_printf("Larger: CurrentPos: %d | IncrementVal: %d | ReturnScalerVal: %d\r\n", currentPos, rpmCalc, turnVal);
    				// CAN_setMotorCtrlVal(Bus1, M3508, 5, rpmCalc);
    				setMotorRPM(Bus1, M2006, 5, rpmCalc, YPVoltageRPM);
 8002c8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c90:	b21b      	sxth	r3, r3
 8002c92:	edd7 6a06 	vldr	s13, [r7, #24]
 8002c96:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c9e:	eeb0 0a66 	vmov.f32	s0, s13
 8002ca2:	eef0 0a47 	vmov.f32	s1, s14
 8002ca6:	eeb0 1a67 	vmov.f32	s2, s15
 8002caa:	2205      	movs	r2, #5
 8002cac:	2102      	movs	r1, #2
 8002cae:	2001      	movs	r0, #1
 8002cb0:	f7fe fe5c 	bl	800196c <setMotorRPM>
 8002cb4:	e047      	b.n	8002d46 <TaskChassis+0x2b6>
    			} else {
    				int32_t rpmCalc = (int32_t)(scalerValThing*(float)(highDelta));
 8002cb6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002cba:	ee07 3a90 	vmov	s15, r3
 8002cbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cc2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cce:	ee17 3a90 	vmov	r3, s15
 8002cd2:	643b      	str	r3, [r7, #64]	@ 0x40
    				if (rpmCalc > maxAmp) {
 8002cd4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002cd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	dd03      	ble.n	8002ce6 <TaskChassis+0x256>
    					rpmCalc = maxAmp;
 8002cde:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002ce2:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ce4:	e009      	b.n	8002cfa <TaskChassis+0x26a>
    				} else if (rpmCalc < -1* maxAmp) {
 8002ce6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002cea:	425b      	negs	r3, r3
 8002cec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	da03      	bge.n	8002cfa <TaskChassis+0x26a>
    					rpmCalc = -1*maxAmp;
 8002cf2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002cf6:	425b      	negs	r3, r3
 8002cf8:	643b      	str	r3, [r7, #64]	@ 0x40
    				}
    				// usart_printf("Smaller: CurrentPos: %d | IncrementVal: %d | ReturnScalerVal: %d\r\n", currentPos, rpmCalc, turnVal);
    				// CAN_setMotorCtrlVal(Bus1, M3508, 5, rpmCalc);
    				setMotorRPM(Bus1, M2006, 5, rpmCalc, YPVoltageRPM);
 8002cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cfc:	b21b      	sxth	r3, r3
 8002cfe:	edd7 6a06 	vldr	s13, [r7, #24]
 8002d02:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d06:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d0a:	eeb0 0a66 	vmov.f32	s0, s13
 8002d0e:	eef0 0a47 	vmov.f32	s1, s14
 8002d12:	eeb0 1a67 	vmov.f32	s2, s15
 8002d16:	2205      	movs	r2, #5
 8002d18:	2102      	movs	r1, #2
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	f7fe fe26 	bl	800196c <setMotorRPM>
 8002d20:	e011      	b.n	8002d46 <TaskChassis+0x2b6>
    			}
    		} else {
    			setMotorRPM(Bus1, M2006, 5, 0, YPVoltageRPM);
 8002d22:	edd7 6a06 	vldr	s13, [r7, #24]
 8002d26:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d2e:	eeb0 0a66 	vmov.f32	s0, s13
 8002d32:	eef0 0a47 	vmov.f32	s1, s14
 8002d36:	eeb0 1a67 	vmov.f32	s2, s15
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	2205      	movs	r2, #5
 8002d3e:	2102      	movs	r1, #2
 8002d40:	2001      	movs	r0, #1
 8002d42:	f7fe fe13 	bl	800196c <setMotorRPM>
    			// usart_printf("Incrementer not one\r\n");
    		}

        }
    	setMotorRPM(Bus1, M3508, 1, (getRotorPosition(Bus1, M2006, 5)-1000)*1.5, CMT);
 8002d46:	2205      	movs	r2, #5
 8002d48:	2102      	movs	r1, #2
 8002d4a:	2001      	movs	r0, #1
 8002d4c:	f7fe fe4a 	bl	80019e4 <getRotorPosition>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fd fbe4 	bl	8000524 <__aeabi_i2d>
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	4b19      	ldr	r3, [pc, #100]	@ (8002dc8 <TaskChassis+0x338>)
 8002d62:	f7fd fc49 	bl	80005f8 <__aeabi_dmul>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	f7fd fe55 	bl	8000a1c <__aeabi_d2iz>
 8002d72:	4603      	mov	r3, r0
 8002d74:	b21b      	sxth	r3, r3
 8002d76:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d82:	eeb0 0a66 	vmov.f32	s0, s13
 8002d86:	eef0 0a47 	vmov.f32	s1, s14
 8002d8a:	eeb0 1a67 	vmov.f32	s2, s15
 8002d8e:	2201      	movs	r2, #1
 8002d90:	2101      	movs	r1, #1
 8002d92:	2001      	movs	r0, #1
 8002d94:	f7fe fdea 	bl	800196c <setMotorRPM>
        setMotorRPM(Bus1, M3508, 1, -1*speed, yawPresetVoltageRPM);
        setMotorRPM(Bus1, M3508, 2, speed, yawPresetVoltageRPM);
        setMotorRPM(Bus1, M3508, 3, speed, yawPresetVoltageRPM);
        setMotorRPM(Bus1, M3508, 4, -1*speed, CyawPresetVoltageRPM);
        */
		PWMTimerStarter();
 8002d98:	f000 f9fa 	bl	8003190 <PWMTimerStarter>
		RCkeysRefresh();
 8002d9c:	f000 fcc8 	bl	8003730 <RCkeysRefresh>
        osDelay(10);
 8002da0:	200a      	movs	r0, #10
 8002da2:	f007 faa5 	bl	800a2f0 <osDelay>
    for(;;) {
 8002da6:	e696      	b.n	8002ad6 <TaskChassis+0x46>
 8002da8:	2000087c 	.word	0x2000087c
 8002dac:	20000834 	.word	0x20000834
 8002db0:	200007ec 	.word	0x200007ec
 8002db4:	200007a4 	.word	0x200007a4
 8002db8:	41200000 	.word	0x41200000
 8002dbc:	d578e97d 	.word	0xd578e97d
 8002dc0:	3d4ccccd 	.word	0x3d4ccccd
 8002dc4:	0800da88 	.word	0x0800da88
 8002dc8:	3ff80000 	.word	0x3ff80000

08002dcc <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
	// JoulesBuffer = 60;
  /* Infinite loop */
	for(;;)
	{
		osDelay(5);
 8002dd4:	2005      	movs	r0, #5
 8002dd6:	f007 fa8b 	bl	800a2f0 <osDelay>
 8002dda:	e7fb      	b.n	8002dd4 <TaskTurret+0x8>

08002ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002de0:	b672      	cpsid	i
}
 8002de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002de4:	bf00      	nop
 8002de6:	e7fd      	b.n	8002de4 <Error_Handler+0x8>

08002de8 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6178      	str	r0, [r7, #20]
 8002df0:	460b      	mov	r3, r1
 8002df2:	60fa      	str	r2, [r7, #12]
 8002df4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002df8:	edc7 0a01 	vstr	s1, [r7, #4]
 8002dfc:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d042      	beq.n	8002e8a <PID_init+0xa2>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d03f      	beq.n	8002e8a <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	7cfa      	ldrb	r2, [r7, #19]
 8002e0e:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	3308      	adds	r3, #8
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	621a      	str	r2, [r3, #32]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	6a1a      	ldr	r2, [r3, #32]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	645a      	str	r2, [r3, #68]	@ 0x44
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e88:	e000      	b.n	8002e8c <PID_init+0xa4>
        return;
 8002e8a:	bf00      	nop
}
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b085      	sub	sp, #20
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002ea2:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <PID_calc+0x1c>
    {
        return 0.0f;
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e130      	b.n	8003114 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8002ece:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ed2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f040 8095 	bne.w	8003014 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002f12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f70:	dd04      	ble.n	8002f7c <PID_calc+0xe6>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	695a      	ldr	r2, [r3, #20]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f7a:	e014      	b.n	8002fa6 <PID_calc+0x110>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f88:	eef1 7a67 	vneg.f32	s15, s15
 8002f8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f94:	d507      	bpl.n	8002fa6 <PID_calc+0x110>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f9c:	eef1 7a67 	vneg.f32	s15, s15
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002fb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	ed93 7a08 	vldr	s14, [r3, #32]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	edd3 7a04 	vldr	s15, [r3, #16]
 8002fd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fda:	dd04      	ble.n	8002fe6 <PID_calc+0x150>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	621a      	str	r2, [r3, #32]
 8002fe4:	e094      	b.n	8003110 <PID_calc+0x27a>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	ed93 7a08 	vldr	s14, [r3, #32]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ff2:	eef1 7a67 	vneg.f32	s15, s15
 8002ff6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffe:	f140 8087 	bpl.w	8003110 <PID_calc+0x27a>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	edd3 7a04 	vldr	s15, [r3, #16]
 8003008:	eef1 7a67 	vneg.f32	s15, s15
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	edc3 7a08 	vstr	s15, [r3, #32]
 8003012:	e07d      	b.n	8003110 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d179      	bne.n	8003110 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800302e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800306e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003072:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800307c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	ed93 7a03 	vldr	s14, [r3, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	ed93 7a08 	vldr	s14, [r3, #32]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80030ae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80030b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	ed93 7a08 	vldr	s14, [r3, #32]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80030d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030da:	dd04      	ble.n	80030e6 <PID_calc+0x250>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	621a      	str	r2, [r3, #32]
 80030e4:	e014      	b.n	8003110 <PID_calc+0x27a>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	ed93 7a08 	vldr	s14, [r3, #32]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80030f2:	eef1 7a67 	vneg.f32	s15, s15
 80030f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030fe:	d507      	bpl.n	8003110 <PID_calc+0x27a>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	edd3 7a04 	vldr	s15, [r3, #16]
 8003106:	eef1 7a67 	vneg.f32	s15, s15
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a1b      	ldr	r3, [r3, #32]
}
 8003114:	ee07 3a90 	vmov	s15, r3
 8003118:	eeb0 0a67 	vmov.f32	s0, s15
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 8003136:	4a12      	ldr	r2, [pc, #72]	@ (8003180 <PWMInit+0x58>)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 800313c:	4a11      	ldr	r2, [pc, #68]	@ (8003184 <PWMInit+0x5c>)
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 8003142:	4a11      	ldr	r2, [pc, #68]	@ (8003188 <PWMInit+0x60>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 8003148:	4a10      	ldr	r2, [pc, #64]	@ (800318c <PWMInit+0x64>)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 800314e:	4b0c      	ldr	r3, [pc, #48]	@ (8003180 <PWMInit+0x58>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f004 fe4a 	bl	8007dec <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 8003158:	4b0a      	ldr	r3, [pc, #40]	@ (8003184 <PWMInit+0x5c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f004 fe45 	bl	8007dec <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 8003162:	4b09      	ldr	r3, [pc, #36]	@ (8003188 <PWMInit+0x60>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f004 fe40 	bl	8007dec <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 800316c:	4b07      	ldr	r3, [pc, #28]	@ (800318c <PWMInit+0x64>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f004 fe3b 	bl	8007dec <HAL_TIM_Base_Start>
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000cec 	.word	0x20000cec
 8003184:	20000cf0 	.word	0x20000cf0
 8003188:	20000cf4 	.word	0x20000cf4
 800318c:	20000cf8 	.word	0x20000cf8

08003190 <PWMTimerStarter>:
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}

void PWMTimerStarter() {
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 8003196:	2300      	movs	r3, #0
 8003198:	607b      	str	r3, [r7, #4]
 800319a:	e0f1      	b.n	8003380 <PWMTimerStarter+0x1f0>
		switch (i) {
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b0a      	cmp	r3, #10
 80031a0:	f200 80eb 	bhi.w	800337a <PWMTimerStarter+0x1ea>
 80031a4:	a201      	add	r2, pc, #4	@ (adr r2, 80031ac <PWMTimerStarter+0x1c>)
 80031a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031aa:	bf00      	nop
 80031ac:	080031d9 	.word	0x080031d9
 80031b0:	080031ff 	.word	0x080031ff
 80031b4:	08003225 	.word	0x08003225
 80031b8:	0800324b 	.word	0x0800324b
 80031bc:	08003271 	.word	0x08003271
 80031c0:	08003297 	.word	0x08003297
 80031c4:	080032bd 	.word	0x080032bd
 80031c8:	080032e3 	.word	0x080032e3
 80031cc:	08003309 	.word	0x08003309
 80031d0:	0800332f 	.word	0x0800332f
 80031d4:	08003355 	.word	0x08003355
		case 0:
			if (whichPWMisOn[0] == 1) {
 80031d8:	4b6e      	ldr	r3, [pc, #440]	@ (8003394 <PWMTimerStarter+0x204>)
 80031da:	f993 3000 	ldrsb.w	r3, [r3]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d106      	bne.n	80031f0 <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 80031e2:	4b6d      	ldr	r3, [pc, #436]	@ (8003398 <PWMTimerStarter+0x208>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f004 feb7 	bl	8007f5c <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 80031ee:	e0c4      	b.n	800337a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 80031f0:	4b69      	ldr	r3, [pc, #420]	@ (8003398 <PWMTimerStarter+0x208>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2100      	movs	r1, #0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f004 ff78 	bl	80080ec <HAL_TIM_PWM_Stop>
			break;
 80031fc:	e0bd      	b.n	800337a <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 80031fe:	4b65      	ldr	r3, [pc, #404]	@ (8003394 <PWMTimerStarter+0x204>)
 8003200:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d106      	bne.n	8003216 <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8003208:	4b63      	ldr	r3, [pc, #396]	@ (8003398 <PWMTimerStarter+0x208>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2104      	movs	r1, #4
 800320e:	4618      	mov	r0, r3
 8003210:	f004 fea4 	bl	8007f5c <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 8003214:	e0b1      	b.n	800337a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 8003216:	4b60      	ldr	r3, [pc, #384]	@ (8003398 <PWMTimerStarter+0x208>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2104      	movs	r1, #4
 800321c:	4618      	mov	r0, r3
 800321e:	f004 ff65 	bl	80080ec <HAL_TIM_PWM_Stop>
			break;
 8003222:	e0aa      	b.n	800337a <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 8003224:	4b5b      	ldr	r3, [pc, #364]	@ (8003394 <PWMTimerStarter+0x204>)
 8003226:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d106      	bne.n	800323c <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 800322e:	4b5a      	ldr	r3, [pc, #360]	@ (8003398 <PWMTimerStarter+0x208>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2108      	movs	r1, #8
 8003234:	4618      	mov	r0, r3
 8003236:	f004 fe91 	bl	8007f5c <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 800323a:	e09e      	b.n	800337a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 800323c:	4b56      	ldr	r3, [pc, #344]	@ (8003398 <PWMTimerStarter+0x208>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2108      	movs	r1, #8
 8003242:	4618      	mov	r0, r3
 8003244:	f004 ff52 	bl	80080ec <HAL_TIM_PWM_Stop>
			break;
 8003248:	e097      	b.n	800337a <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 800324a:	4b52      	ldr	r3, [pc, #328]	@ (8003394 <PWMTimerStarter+0x204>)
 800324c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d106      	bne.n	8003262 <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 8003254:	4b50      	ldr	r3, [pc, #320]	@ (8003398 <PWMTimerStarter+0x208>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	210c      	movs	r1, #12
 800325a:	4618      	mov	r0, r3
 800325c:	f004 fe7e 	bl	8007f5c <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 8003260:	e08b      	b.n	800337a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 8003262:	4b4d      	ldr	r3, [pc, #308]	@ (8003398 <PWMTimerStarter+0x208>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	210c      	movs	r1, #12
 8003268:	4618      	mov	r0, r3
 800326a:	f004 ff3f 	bl	80080ec <HAL_TIM_PWM_Stop>
			break;
 800326e:	e084      	b.n	800337a <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 8003270:	4b48      	ldr	r3, [pc, #288]	@ (8003394 <PWMTimerStarter+0x204>)
 8003272:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d106      	bne.n	8003288 <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 800327a:	4b48      	ldr	r3, [pc, #288]	@ (800339c <PWMTimerStarter+0x20c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2100      	movs	r1, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f004 fe6b 	bl	8007f5c <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 8003286:	e078      	b.n	800337a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 8003288:	4b44      	ldr	r3, [pc, #272]	@ (800339c <PWMTimerStarter+0x20c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2100      	movs	r1, #0
 800328e:	4618      	mov	r0, r3
 8003290:	f004 ff2c 	bl	80080ec <HAL_TIM_PWM_Stop>
			break;
 8003294:	e071      	b.n	800337a <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 8003296:	4b3f      	ldr	r3, [pc, #252]	@ (8003394 <PWMTimerStarter+0x204>)
 8003298:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d106      	bne.n	80032ae <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 80032a0:	4b3e      	ldr	r3, [pc, #248]	@ (800339c <PWMTimerStarter+0x20c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2104      	movs	r1, #4
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 fe58 	bl	8007f5c <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 80032ac:	e065      	b.n	800337a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 80032ae:	4b3b      	ldr	r3, [pc, #236]	@ (800339c <PWMTimerStarter+0x20c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2104      	movs	r1, #4
 80032b4:	4618      	mov	r0, r3
 80032b6:	f004 ff19 	bl	80080ec <HAL_TIM_PWM_Stop>
			break;
 80032ba:	e05e      	b.n	800337a <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 80032bc:	4b35      	ldr	r3, [pc, #212]	@ (8003394 <PWMTimerStarter+0x204>)
 80032be:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d106      	bne.n	80032d4 <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 80032c6:	4b35      	ldr	r3, [pc, #212]	@ (800339c <PWMTimerStarter+0x20c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2108      	movs	r1, #8
 80032cc:	4618      	mov	r0, r3
 80032ce:	f004 fe45 	bl	8007f5c <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 80032d2:	e052      	b.n	800337a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 80032d4:	4b31      	ldr	r3, [pc, #196]	@ (800339c <PWMTimerStarter+0x20c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2108      	movs	r1, #8
 80032da:	4618      	mov	r0, r3
 80032dc:	f004 ff06 	bl	80080ec <HAL_TIM_PWM_Stop>
			break;
 80032e0:	e04b      	b.n	800337a <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 80032e2:	4b2c      	ldr	r3, [pc, #176]	@ (8003394 <PWMTimerStarter+0x204>)
 80032e4:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d106      	bne.n	80032fa <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 80032ec:	4b2c      	ldr	r3, [pc, #176]	@ (80033a0 <PWMTimerStarter+0x210>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2100      	movs	r1, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	f004 fe32 	bl	8007f5c <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 80032f8:	e03f      	b.n	800337a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 80032fa:	4b29      	ldr	r3, [pc, #164]	@ (80033a0 <PWMTimerStarter+0x210>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f004 fef3 	bl	80080ec <HAL_TIM_PWM_Stop>
			break;
 8003306:	e038      	b.n	800337a <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 8003308:	4b22      	ldr	r3, [pc, #136]	@ (8003394 <PWMTimerStarter+0x204>)
 800330a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d106      	bne.n	8003320 <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 8003312:	4b23      	ldr	r3, [pc, #140]	@ (80033a0 <PWMTimerStarter+0x210>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2104      	movs	r1, #4
 8003318:	4618      	mov	r0, r3
 800331a:	f004 fe1f 	bl	8007f5c <HAL_TIM_PWM_Start>

			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
				// usart_printf("beanis\r\n");
			}
			break;
 800331e:	e02c      	b.n	800337a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 8003320:	4b1f      	ldr	r3, [pc, #124]	@ (80033a0 <PWMTimerStarter+0x210>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2104      	movs	r1, #4
 8003326:	4618      	mov	r0, r3
 8003328:	f004 fee0 	bl	80080ec <HAL_TIM_PWM_Stop>
			break;
 800332c:	e025      	b.n	800337a <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 800332e:	4b19      	ldr	r3, [pc, #100]	@ (8003394 <PWMTimerStarter+0x204>)
 8003330:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d106      	bne.n	8003346 <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 8003338:	4b19      	ldr	r3, [pc, #100]	@ (80033a0 <PWMTimerStarter+0x210>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2108      	movs	r1, #8
 800333e:	4618      	mov	r0, r3
 8003340:	f004 fe0c 	bl	8007f5c <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 8003344:	e019      	b.n	800337a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 8003346:	4b16      	ldr	r3, [pc, #88]	@ (80033a0 <PWMTimerStarter+0x210>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2108      	movs	r1, #8
 800334c:	4618      	mov	r0, r3
 800334e:	f004 fecd 	bl	80080ec <HAL_TIM_PWM_Stop>
			break;
 8003352:	e012      	b.n	800337a <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 8003354:	4b0f      	ldr	r3, [pc, #60]	@ (8003394 <PWMTimerStarter+0x204>)
 8003356:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d106      	bne.n	800336c <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 800335e:	4b11      	ldr	r3, [pc, #68]	@ (80033a4 <PWMTimerStarter+0x214>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2108      	movs	r1, #8
 8003364:	4618      	mov	r0, r3
 8003366:	f004 fdf9 	bl	8007f5c <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 800336a:	e005      	b.n	8003378 <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 800336c:	4b0d      	ldr	r3, [pc, #52]	@ (80033a4 <PWMTimerStarter+0x214>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2108      	movs	r1, #8
 8003372:	4618      	mov	r0, r3
 8003374:	f004 feba 	bl	80080ec <HAL_TIM_PWM_Stop>
			break;
 8003378:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3301      	adds	r3, #1
 800337e:	607b      	str	r3, [r7, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b0a      	cmp	r3, #10
 8003384:	f77f af0a 	ble.w	800319c <PWMTimerStarter+0xc>
		}
	}
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000cfc 	.word	0x20000cfc
 8003398:	20000cec 	.word	0x20000cec
 800339c:	20000cf8 	.word	0x20000cf8
 80033a0:	20000cf4 	.word	0x20000cf4
 80033a4:	20000cf0 	.word	0x20000cf0

080033a8 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 80033ac:	2224      	movs	r2, #36	@ 0x24
 80033ae:	4903      	ldr	r1, [pc, #12]	@ (80033bc <remote_control_init+0x14>)
 80033b0:	4803      	ldr	r0, [pc, #12]	@ (80033c0 <remote_control_init+0x18>)
 80033b2:	f7fe fbf9 	bl	8001ba8 <RC_init>
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000d44 	.word	0x20000d44
 80033c0:	20000d20 	.word	0x20000d20

080033c4 <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 80033c8:	4b02      	ldr	r3, [pc, #8]	@ (80033d4 <get_remote_control_point+0x10>)
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	20000d08 	.word	0x20000d08

080033d8 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 80033de:	4b44      	ldr	r3, [pc, #272]	@ (80034f0 <USART3_IRQHandler+0x118>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00b      	beq.n	8003404 <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 80033ec:	2300      	movs	r3, #0
 80033ee:	607b      	str	r3, [r7, #4]
 80033f0:	4b3f      	ldr	r3, [pc, #252]	@ (80034f0 <USART3_IRQHandler+0x118>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	607b      	str	r3, [r7, #4]
 80033f8:	4b3d      	ldr	r3, [pc, #244]	@ (80034f0 <USART3_IRQHandler+0x118>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	607b      	str	r3, [r7, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 8003402:	e070      	b.n	80034e6 <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8003404:	4b3b      	ldr	r3, [pc, #236]	@ (80034f4 <USART3_IRQHandler+0x11c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b00      	cmp	r3, #0
 800340e:	d06a      	beq.n	80034e6 <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8003410:	2300      	movs	r3, #0
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	4b36      	ldr	r3, [pc, #216]	@ (80034f0 <USART3_IRQHandler+0x118>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	4b34      	ldr	r3, [pc, #208]	@ (80034f0 <USART3_IRQHandler+0x118>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8003426:	4b34      	ldr	r3, [pc, #208]	@ (80034f8 <USART3_IRQHandler+0x120>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d12d      	bne.n	8003490 <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8003434:	4b30      	ldr	r3, [pc, #192]	@ (80034f8 <USART3_IRQHandler+0x120>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b2f      	ldr	r3, [pc, #188]	@ (80034f8 <USART3_IRQHandler+0x120>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0201 	bic.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8003444:	4b2c      	ldr	r3, [pc, #176]	@ (80034f8 <USART3_IRQHandler+0x120>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	b29b      	uxth	r3, r3
 800344c:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8003450:	b29a      	uxth	r2, r3
 8003452:	4b2a      	ldr	r3, [pc, #168]	@ (80034fc <USART3_IRQHandler+0x124>)
 8003454:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8003456:	4b28      	ldr	r3, [pc, #160]	@ (80034f8 <USART3_IRQHandler+0x120>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2224      	movs	r2, #36	@ 0x24
 800345c:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 800345e:	4b26      	ldr	r3, [pc, #152]	@ (80034f8 <USART3_IRQHandler+0x120>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4b24      	ldr	r3, [pc, #144]	@ (80034f8 <USART3_IRQHandler+0x120>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800346c:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 800346e:	4b22      	ldr	r3, [pc, #136]	@ (80034f8 <USART3_IRQHandler+0x120>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b20      	ldr	r3, [pc, #128]	@ (80034f8 <USART3_IRQHandler+0x120>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0201 	orr.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 800347e:	4b1f      	ldr	r3, [pc, #124]	@ (80034fc <USART3_IRQHandler+0x124>)
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	2b12      	cmp	r3, #18
 8003484:	d12f      	bne.n	80034e6 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8003486:	491e      	ldr	r1, [pc, #120]	@ (8003500 <USART3_IRQHandler+0x128>)
 8003488:	481e      	ldr	r0, [pc, #120]	@ (8003504 <USART3_IRQHandler+0x12c>)
 800348a:	f000 f841 	bl	8003510 <sbus_to_rc>
}
 800348e:	e02a      	b.n	80034e6 <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8003490:	4b19      	ldr	r3, [pc, #100]	@ (80034f8 <USART3_IRQHandler+0x120>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	4b18      	ldr	r3, [pc, #96]	@ (80034f8 <USART3_IRQHandler+0x120>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0201 	bic.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 80034a0:	4b15      	ldr	r3, [pc, #84]	@ (80034f8 <USART3_IRQHandler+0x120>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	4b13      	ldr	r3, [pc, #76]	@ (80034fc <USART3_IRQHandler+0x124>)
 80034b0:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 80034b2:	4b11      	ldr	r3, [pc, #68]	@ (80034f8 <USART3_IRQHandler+0x120>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2224      	movs	r2, #36	@ 0x24
 80034b8:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 80034ba:	4b13      	ldr	r3, [pc, #76]	@ (8003508 <USART3_IRQHandler+0x130>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a12      	ldr	r2, [pc, #72]	@ (8003508 <USART3_IRQHandler+0x130>)
 80034c0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80034c4:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 80034c6:	4b0c      	ldr	r3, [pc, #48]	@ (80034f8 <USART3_IRQHandler+0x120>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b0a      	ldr	r3, [pc, #40]	@ (80034f8 <USART3_IRQHandler+0x120>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 80034d6:	4b09      	ldr	r3, [pc, #36]	@ (80034fc <USART3_IRQHandler+0x124>)
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	2b12      	cmp	r3, #18
 80034dc:	d103      	bne.n	80034e6 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 80034de:	4908      	ldr	r1, [pc, #32]	@ (8003500 <USART3_IRQHandler+0x128>)
 80034e0:	480a      	ldr	r0, [pc, #40]	@ (800350c <USART3_IRQHandler+0x134>)
 80034e2:	f000 f815 	bl	8003510 <sbus_to_rc>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000a70 	.word	0x20000a70
 80034f4:	40004800 	.word	0x40004800
 80034f8:	20000bb8 	.word	0x20000bb8
 80034fc:	20000d68 	.word	0x20000d68
 8003500:	20000d08 	.word	0x20000d08
 8003504:	20000d20 	.word	0x20000d20
 8003508:	40026028 	.word	0x40026028
 800350c:	20000d44 	.word	0x20000d44

08003510 <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 8101 	beq.w	8003724 <sbus_to_rc+0x214>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80fd 	beq.w	8003724 <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	b21a      	sxth	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3301      	adds	r3, #1
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	b21b      	sxth	r3, r3
 800353e:	4313      	orrs	r3, r2
 8003540:	b21b      	sxth	r3, r3
 8003542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003546:	b21a      	sxth	r2, r3
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3301      	adds	r3, #1
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	08db      	lsrs	r3, r3, #3
 8003556:	b2db      	uxtb	r3, r3
 8003558:	b21a      	sxth	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3302      	adds	r3, #2
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	015b      	lsls	r3, r3, #5
 8003564:	b21b      	sxth	r3, r3
 8003566:	4313      	orrs	r3, r2
 8003568:	b21b      	sxth	r3, r3
 800356a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800356e:	b21a      	sxth	r2, r3
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3302      	adds	r3, #2
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	099b      	lsrs	r3, r3, #6
 800357e:	b2db      	uxtb	r3, r3
 8003580:	b21a      	sxth	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3303      	adds	r3, #3
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	b21b      	sxth	r3, r3
 800358e:	4313      	orrs	r3, r2
 8003590:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3304      	adds	r3, #4
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 800359c:	b21b      	sxth	r3, r3
 800359e:	4313      	orrs	r3, r2
 80035a0:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 80035a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035a6:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3304      	adds	r3, #4
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	085b      	lsrs	r3, r3, #1
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	b21a      	sxth	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3305      	adds	r3, #5
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	01db      	lsls	r3, r3, #7
 80035c4:	b21b      	sxth	r3, r3
 80035c6:	4313      	orrs	r3, r2
 80035c8:	b21b      	sxth	r3, r3
 80035ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035ce:	b21a      	sxth	r2, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3305      	adds	r3, #5
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	091b      	lsrs	r3, r3, #4
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3305      	adds	r3, #5
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	091b      	lsrs	r3, r3, #4
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	109b      	asrs	r3, r3, #2
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3306      	adds	r3, #6
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	b21a      	sxth	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3307      	adds	r3, #7
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	b21b      	sxth	r3, r3
 800361a:	4313      	orrs	r3, r2
 800361c:	b21a      	sxth	r2, r3
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3308      	adds	r3, #8
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	b21a      	sxth	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3309      	adds	r3, #9
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	b21b      	sxth	r3, r3
 8003638:	4313      	orrs	r3, r2
 800363a:	b21a      	sxth	r2, r3
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	330a      	adds	r3, #10
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	b2db      	uxtb	r3, r3
 8003648:	b21a      	sxth	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	330b      	adds	r3, #11
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	b21b      	sxth	r3, r3
 8003656:	4313      	orrs	r3, r2
 8003658:	b21a      	sxth	r2, r3
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	330c      	adds	r3, #12
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	b2da      	uxtb	r2, r3
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	330d      	adds	r3, #13
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	330e      	adds	r3, #14
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	b21a      	sxth	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	330f      	adds	r3, #15
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	b21b      	sxth	r3, r3
 800368c:	4313      	orrs	r3, r2
 800368e:	b21b      	sxth	r3, r3
 8003690:	b29a      	uxth	r2, r3
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3310      	adds	r3, #16
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	b21a      	sxth	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3311      	adds	r3, #17
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	b21b      	sxth	r3, r3
 80036ac:	4313      	orrs	r3, r2
 80036ae:	b21a      	sxth	r2, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ba:	b21b      	sxth	r3, r3
 80036bc:	b29b      	uxth	r3, r3
 80036be:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	b21a      	sxth	r2, r3
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80036d0:	b21b      	sxth	r3, r3
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80036d8:	b29b      	uxth	r3, r3
 80036da:	b21a      	sxth	r2, r3
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80036e6:	b21b      	sxth	r3, r3
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	b21a      	sxth	r2, r3
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80036fc:	b21b      	sxth	r3, r3
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003704:	b29b      	uxth	r3, r3
 8003706:	b21a      	sxth	r2, r3
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003712:	b21b      	sxth	r3, r3
 8003714:	b29b      	uxth	r3, r3
 8003716:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800371a:	b29b      	uxth	r3, r3
 800371c:	b21a      	sxth	r2, r3
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	811a      	strh	r2, [r3, #8]
 8003722:	e000      	b.n	8003726 <sbus_to_rc+0x216>
        return;
 8003724:	bf00      	nop
}
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <RCkeysRefresh>:
	} else {
		return 0;
	}
}

void RCkeysRefresh(void) {//temporary until uart fixed
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
	uint16_t key = rc_ptr->key.v;
 8003736:	4b85      	ldr	r3, [pc, #532]	@ (800394c <RCkeysRefresh+0x21c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	7d1a      	ldrb	r2, [r3, #20]
 800373c:	7d5b      	ldrb	r3, [r3, #21]
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	4313      	orrs	r3, r2
 8003742:	80fb      	strh	r3, [r7, #6]
	if(key > 32767){
 8003744:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003748:	2b00      	cmp	r3, #0
 800374a:	da07      	bge.n	800375c <RCkeysRefresh+0x2c>
		pc_control.b = 1;
 800374c:	4b80      	ldr	r3, [pc, #512]	@ (8003950 <RCkeysRefresh+0x220>)
 800374e:	2201      	movs	r2, #1
 8003750:	76da      	strb	r2, [r3, #27]
		key= key - 32768;
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8003758:	80fb      	strh	r3, [r7, #6]
 800375a:	e002      	b.n	8003762 <RCkeysRefresh+0x32>
	}else{
		pc_control.b = 0;
 800375c:	4b7c      	ldr	r3, [pc, #496]	@ (8003950 <RCkeysRefresh+0x220>)
 800375e:	2200      	movs	r2, #0
 8003760:	76da      	strb	r2, [r3, #27]
	}
	if(key>16383){
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003768:	d307      	bcc.n	800377a <RCkeysRefresh+0x4a>
		pc_control.v = 1;
 800376a:	4b79      	ldr	r3, [pc, #484]	@ (8003950 <RCkeysRefresh+0x220>)
 800376c:	2201      	movs	r2, #1
 800376e:	769a      	strb	r2, [r3, #26]
		key= key - 16384;
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8003776:	80fb      	strh	r3, [r7, #6]
 8003778:	e002      	b.n	8003780 <RCkeysRefresh+0x50>
	}else{
		pc_control.v = 0;
 800377a:	4b75      	ldr	r3, [pc, #468]	@ (8003950 <RCkeysRefresh+0x220>)
 800377c:	2200      	movs	r2, #0
 800377e:	769a      	strb	r2, [r3, #26]
	}
	if(key>8191){
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003786:	d307      	bcc.n	8003798 <RCkeysRefresh+0x68>
		pc_control.c = 1;
 8003788:	4b71      	ldr	r3, [pc, #452]	@ (8003950 <RCkeysRefresh+0x220>)
 800378a:	2201      	movs	r2, #1
 800378c:	765a      	strb	r2, [r3, #25]
		key= key - 8192;
 800378e:	88fb      	ldrh	r3, [r7, #6]
 8003790:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8003794:	80fb      	strh	r3, [r7, #6]
 8003796:	e002      	b.n	800379e <RCkeysRefresh+0x6e>
	}else{
		pc_control.c = 0;
 8003798:	4b6d      	ldr	r3, [pc, #436]	@ (8003950 <RCkeysRefresh+0x220>)
 800379a:	2200      	movs	r2, #0
 800379c:	765a      	strb	r2, [r3, #25]
	}
	if(key>4095){
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a4:	d307      	bcc.n	80037b6 <RCkeysRefresh+0x86>
		pc_control.x = 1;
 80037a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003950 <RCkeysRefresh+0x220>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	761a      	strb	r2, [r3, #24]
		key= key - 4096;
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80037b2:	80fb      	strh	r3, [r7, #6]
 80037b4:	e002      	b.n	80037bc <RCkeysRefresh+0x8c>
	}else{
		pc_control.x = 0;
 80037b6:	4b66      	ldr	r3, [pc, #408]	@ (8003950 <RCkeysRefresh+0x220>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	761a      	strb	r2, [r3, #24]
	}
	if(key>2047){
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037c2:	d307      	bcc.n	80037d4 <RCkeysRefresh+0xa4>
		pc_control.z = 1;
 80037c4:	4b62      	ldr	r3, [pc, #392]	@ (8003950 <RCkeysRefresh+0x220>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	75da      	strb	r2, [r3, #23]
		key= key - 2048;
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80037d0:	80fb      	strh	r3, [r7, #6]
 80037d2:	e002      	b.n	80037da <RCkeysRefresh+0xaa>
	}else{
		pc_control.z = 0;
 80037d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003950 <RCkeysRefresh+0x220>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	75da      	strb	r2, [r3, #23]
	}
	if(key>1023){
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037e0:	d307      	bcc.n	80037f2 <RCkeysRefresh+0xc2>
		pc_control.g = 1;
 80037e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003950 <RCkeysRefresh+0x220>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	759a      	strb	r2, [r3, #22]
		key= key - 1024;
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80037ee:	80fb      	strh	r3, [r7, #6]
 80037f0:	e002      	b.n	80037f8 <RCkeysRefresh+0xc8>
	}else{
		pc_control.g = 0;
 80037f2:	4b57      	ldr	r3, [pc, #348]	@ (8003950 <RCkeysRefresh+0x220>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	759a      	strb	r2, [r3, #22]
	}
	if(key>511){
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037fe:	d307      	bcc.n	8003810 <RCkeysRefresh+0xe0>
		pc_control.f = 1;
 8003800:	4b53      	ldr	r3, [pc, #332]	@ (8003950 <RCkeysRefresh+0x220>)
 8003802:	2201      	movs	r2, #1
 8003804:	755a      	strb	r2, [r3, #21]
		key= key - 512;
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800380c:	80fb      	strh	r3, [r7, #6]
 800380e:	e002      	b.n	8003816 <RCkeysRefresh+0xe6>
	}else{
		pc_control.f = 0;
 8003810:	4b4f      	ldr	r3, [pc, #316]	@ (8003950 <RCkeysRefresh+0x220>)
 8003812:	2200      	movs	r2, #0
 8003814:	755a      	strb	r2, [r3, #21]
	}
	if(key > 255){
 8003816:	88fb      	ldrh	r3, [r7, #6]
 8003818:	2bff      	cmp	r3, #255	@ 0xff
 800381a:	d907      	bls.n	800382c <RCkeysRefresh+0xfc>
		pc_control.r = 1;
 800381c:	4b4c      	ldr	r3, [pc, #304]	@ (8003950 <RCkeysRefresh+0x220>)
 800381e:	2201      	movs	r2, #1
 8003820:	751a      	strb	r2, [r3, #20]
		key = key - 256;
 8003822:	88fb      	ldrh	r3, [r7, #6]
 8003824:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003828:	80fb      	strh	r3, [r7, #6]
 800382a:	e002      	b.n	8003832 <RCkeysRefresh+0x102>
	}else{
		pc_control.r = 0;
 800382c:	4b48      	ldr	r3, [pc, #288]	@ (8003950 <RCkeysRefresh+0x220>)
 800382e:	2200      	movs	r2, #0
 8003830:	751a      	strb	r2, [r3, #20]
	}


	if(key > 127){
 8003832:	88fb      	ldrh	r3, [r7, #6]
 8003834:	2b7f      	cmp	r3, #127	@ 0x7f
 8003836:	d906      	bls.n	8003846 <RCkeysRefresh+0x116>
		pc_control.e = 1;
 8003838:	4b45      	ldr	r3, [pc, #276]	@ (8003950 <RCkeysRefresh+0x220>)
 800383a:	2201      	movs	r2, #1
 800383c:	74da      	strb	r2, [r3, #19]
		key = key - 128;
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	3b80      	subs	r3, #128	@ 0x80
 8003842:	80fb      	strh	r3, [r7, #6]
 8003844:	e002      	b.n	800384c <RCkeysRefresh+0x11c>
	}else{
		pc_control.e = 0;
 8003846:	4b42      	ldr	r3, [pc, #264]	@ (8003950 <RCkeysRefresh+0x220>)
 8003848:	2200      	movs	r2, #0
 800384a:	74da      	strb	r2, [r3, #19]

	}
	if(key>63){
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003850:	d906      	bls.n	8003860 <RCkeysRefresh+0x130>
		pc_control.q = 1;
 8003852:	4b3f      	ldr	r3, [pc, #252]	@ (8003950 <RCkeysRefresh+0x220>)
 8003854:	2201      	movs	r2, #1
 8003856:	749a      	strb	r2, [r3, #18]
		key= key - 64;
 8003858:	88fb      	ldrh	r3, [r7, #6]
 800385a:	3b40      	subs	r3, #64	@ 0x40
 800385c:	80fb      	strh	r3, [r7, #6]
 800385e:	e002      	b.n	8003866 <RCkeysRefresh+0x136>
	}else{
		pc_control.q = 0;
 8003860:	4b3b      	ldr	r3, [pc, #236]	@ (8003950 <RCkeysRefresh+0x220>)
 8003862:	2200      	movs	r2, #0
 8003864:	749a      	strb	r2, [r3, #18]
	}
	if(key>31){
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	2b1f      	cmp	r3, #31
 800386a:	d906      	bls.n	800387a <RCkeysRefresh+0x14a>
		pc_control.ctrl = 1;
 800386c:	4b38      	ldr	r3, [pc, #224]	@ (8003950 <RCkeysRefresh+0x220>)
 800386e:	2201      	movs	r2, #1
 8003870:	745a      	strb	r2, [r3, #17]
		key =key - 32;
 8003872:	88fb      	ldrh	r3, [r7, #6]
 8003874:	3b20      	subs	r3, #32
 8003876:	80fb      	strh	r3, [r7, #6]
 8003878:	e002      	b.n	8003880 <RCkeysRefresh+0x150>
	}else{
		pc_control.ctrl = 0;
 800387a:	4b35      	ldr	r3, [pc, #212]	@ (8003950 <RCkeysRefresh+0x220>)
 800387c:	2200      	movs	r2, #0
 800387e:	745a      	strb	r2, [r3, #17]
	}
	if(key>15){
 8003880:	88fb      	ldrh	r3, [r7, #6]
 8003882:	2b0f      	cmp	r3, #15
 8003884:	d906      	bls.n	8003894 <RCkeysRefresh+0x164>
		pc_control.shift = 1;
 8003886:	4b32      	ldr	r3, [pc, #200]	@ (8003950 <RCkeysRefresh+0x220>)
 8003888:	2201      	movs	r2, #1
 800388a:	741a      	strb	r2, [r3, #16]
		key= key - 16;
 800388c:	88fb      	ldrh	r3, [r7, #6]
 800388e:	3b10      	subs	r3, #16
 8003890:	80fb      	strh	r3, [r7, #6]
 8003892:	e002      	b.n	800389a <RCkeysRefresh+0x16a>
	}else{
		pc_control.shift = 0;
 8003894:	4b2e      	ldr	r3, [pc, #184]	@ (8003950 <RCkeysRefresh+0x220>)
 8003896:	2200      	movs	r2, #0
 8003898:	741a      	strb	r2, [r3, #16]
	}
	if(key>7){
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	2b07      	cmp	r3, #7
 800389e:	d906      	bls.n	80038ae <RCkeysRefresh+0x17e>
		pc_control.d = 1;
 80038a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003950 <RCkeysRefresh+0x220>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	73da      	strb	r2, [r3, #15]
		key= key - 8;
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	3b08      	subs	r3, #8
 80038aa:	80fb      	strh	r3, [r7, #6]
 80038ac:	e002      	b.n	80038b4 <RCkeysRefresh+0x184>
	}else{
		pc_control.d = 0;
 80038ae:	4b28      	ldr	r3, [pc, #160]	@ (8003950 <RCkeysRefresh+0x220>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	73da      	strb	r2, [r3, #15]
	}
	if(key>3){
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d906      	bls.n	80038c8 <RCkeysRefresh+0x198>
		pc_control.a = 1;
 80038ba:	4b25      	ldr	r3, [pc, #148]	@ (8003950 <RCkeysRefresh+0x220>)
 80038bc:	2201      	movs	r2, #1
 80038be:	739a      	strb	r2, [r3, #14]
		key= key - 4;
 80038c0:	88fb      	ldrh	r3, [r7, #6]
 80038c2:	3b04      	subs	r3, #4
 80038c4:	80fb      	strh	r3, [r7, #6]
 80038c6:	e002      	b.n	80038ce <RCkeysRefresh+0x19e>
	}else{
		pc_control.a = 0;
 80038c8:	4b21      	ldr	r3, [pc, #132]	@ (8003950 <RCkeysRefresh+0x220>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	739a      	strb	r2, [r3, #14]
	}
	if(key>1){
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d906      	bls.n	80038e2 <RCkeysRefresh+0x1b2>
		pc_control.s = 1;
 80038d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003950 <RCkeysRefresh+0x220>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	735a      	strb	r2, [r3, #13]
		key= key - 2;
 80038da:	88fb      	ldrh	r3, [r7, #6]
 80038dc:	3b02      	subs	r3, #2
 80038de:	80fb      	strh	r3, [r7, #6]
 80038e0:	e002      	b.n	80038e8 <RCkeysRefresh+0x1b8>
	}else{
		pc_control.s = 0;
 80038e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003950 <RCkeysRefresh+0x220>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	735a      	strb	r2, [r3, #13]
	}
	if(key > 0){
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <RCkeysRefresh+0x1c6>
		pc_control.w = 1;
 80038ee:	4b18      	ldr	r3, [pc, #96]	@ (8003950 <RCkeysRefresh+0x220>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	731a      	strb	r2, [r3, #12]
 80038f4:	e002      	b.n	80038fc <RCkeysRefresh+0x1cc>
	}else{
		pc_control.w = 0;
 80038f6:	4b16      	ldr	r3, [pc, #88]	@ (8003950 <RCkeysRefresh+0x220>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	731a      	strb	r2, [r3, #12]
	}

	pc_control.mouse_x = rc_ptr->mouse.x;
 80038fc:	4b13      	ldr	r3, [pc, #76]	@ (800394c <RCkeysRefresh+0x21c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003904:	b21a      	sxth	r2, r3
 8003906:	4b12      	ldr	r3, [pc, #72]	@ (8003950 <RCkeysRefresh+0x220>)
 8003908:	801a      	strh	r2, [r3, #0]
	pc_control.mouse_y = rc_ptr->mouse.y;
 800390a:	4b10      	ldr	r3, [pc, #64]	@ (800394c <RCkeysRefresh+0x21c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003912:	b21a      	sxth	r2, r3
 8003914:	4b0e      	ldr	r3, [pc, #56]	@ (8003950 <RCkeysRefresh+0x220>)
 8003916:	805a      	strh	r2, [r3, #2]
	pc_control.mouse_z = rc_ptr->mouse.z;
 8003918:	4b0c      	ldr	r3, [pc, #48]	@ (800394c <RCkeysRefresh+0x21c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003920:	b21a      	sxth	r2, r3
 8003922:	4b0b      	ldr	r3, [pc, #44]	@ (8003950 <RCkeysRefresh+0x220>)
 8003924:	809a      	strh	r2, [r3, #4]

	pc_control.left_button_down = rc_ptr->mouse.press_l;
 8003926:	4b09      	ldr	r3, [pc, #36]	@ (800394c <RCkeysRefresh+0x21c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	7c9b      	ldrb	r3, [r3, #18]
 800392c:	b25a      	sxtb	r2, r3
 800392e:	4b08      	ldr	r3, [pc, #32]	@ (8003950 <RCkeysRefresh+0x220>)
 8003930:	719a      	strb	r2, [r3, #6]
	pc_control.right_button_down = rc_ptr->mouse.press_r;
 8003932:	4b06      	ldr	r3, [pc, #24]	@ (800394c <RCkeysRefresh+0x21c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	7cdb      	ldrb	r3, [r3, #19]
 8003938:	b25a      	sxtb	r2, r3
 800393a:	4b05      	ldr	r3, [pc, #20]	@ (8003950 <RCkeysRefresh+0x220>)
 800393c:	71da      	strb	r2, [r3, #7]
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000018 	.word	0x20000018
 8003950:	20000524 	.word	0x20000524

08003954 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	607b      	str	r3, [r7, #4]
 800395e:	4b12      	ldr	r3, [pc, #72]	@ (80039a8 <HAL_MspInit+0x54>)
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	4a11      	ldr	r2, [pc, #68]	@ (80039a8 <HAL_MspInit+0x54>)
 8003964:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003968:	6453      	str	r3, [r2, #68]	@ 0x44
 800396a:	4b0f      	ldr	r3, [pc, #60]	@ (80039a8 <HAL_MspInit+0x54>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003972:	607b      	str	r3, [r7, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	603b      	str	r3, [r7, #0]
 800397a:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <HAL_MspInit+0x54>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	4a0a      	ldr	r2, [pc, #40]	@ (80039a8 <HAL_MspInit+0x54>)
 8003980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003984:	6413      	str	r3, [r2, #64]	@ 0x40
 8003986:	4b08      	ldr	r3, [pc, #32]	@ (80039a8 <HAL_MspInit+0x54>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003992:	2200      	movs	r2, #0
 8003994:	210f      	movs	r1, #15
 8003996:	f06f 0001 	mvn.w	r0, #1
 800399a:	f001 fe6e 	bl	800567a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40023800 	.word	0x40023800

080039ac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08c      	sub	sp, #48	@ 0x30
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b4:	f107 031c 	add.w	r3, r7, #28
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	609a      	str	r2, [r3, #8]
 80039c0:	60da      	str	r2, [r3, #12]
 80039c2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a4a      	ldr	r2, [pc, #296]	@ (8003af4 <HAL_CAN_MspInit+0x148>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d13d      	bne.n	8003a4a <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80039ce:	4b4a      	ldr	r3, [pc, #296]	@ (8003af8 <HAL_CAN_MspInit+0x14c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3301      	adds	r3, #1
 80039d4:	4a48      	ldr	r2, [pc, #288]	@ (8003af8 <HAL_CAN_MspInit+0x14c>)
 80039d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80039d8:	4b47      	ldr	r3, [pc, #284]	@ (8003af8 <HAL_CAN_MspInit+0x14c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d10d      	bne.n	80039fc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80039e0:	2300      	movs	r3, #0
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	4b45      	ldr	r3, [pc, #276]	@ (8003afc <HAL_CAN_MspInit+0x150>)
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	4a44      	ldr	r2, [pc, #272]	@ (8003afc <HAL_CAN_MspInit+0x150>)
 80039ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80039f0:	4b42      	ldr	r3, [pc, #264]	@ (8003afc <HAL_CAN_MspInit+0x150>)
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	4b3e      	ldr	r3, [pc, #248]	@ (8003afc <HAL_CAN_MspInit+0x150>)
 8003a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a04:	4a3d      	ldr	r2, [pc, #244]	@ (8003afc <HAL_CAN_MspInit+0x150>)
 8003a06:	f043 0308 	orr.w	r3, r3, #8
 8003a0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8003afc <HAL_CAN_MspInit+0x150>)
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a24:	2303      	movs	r3, #3
 8003a26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003a28:	2309      	movs	r3, #9
 8003a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a2c:	f107 031c 	add.w	r3, r7, #28
 8003a30:	4619      	mov	r1, r3
 8003a32:	4833      	ldr	r0, [pc, #204]	@ (8003b00 <HAL_CAN_MspInit+0x154>)
 8003a34:	f002 fa5a 	bl	8005eec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2105      	movs	r1, #5
 8003a3c:	2014      	movs	r0, #20
 8003a3e:	f001 fe1c 	bl	800567a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003a42:	2014      	movs	r0, #20
 8003a44:	f001 fe35 	bl	80056b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003a48:	e04f      	b.n	8003aea <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a2d      	ldr	r2, [pc, #180]	@ (8003b04 <HAL_CAN_MspInit+0x158>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d14a      	bne.n	8003aea <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003a54:	2300      	movs	r3, #0
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	4b28      	ldr	r3, [pc, #160]	@ (8003afc <HAL_CAN_MspInit+0x150>)
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5c:	4a27      	ldr	r2, [pc, #156]	@ (8003afc <HAL_CAN_MspInit+0x150>)
 8003a5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a62:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a64:	4b25      	ldr	r3, [pc, #148]	@ (8003afc <HAL_CAN_MspInit+0x150>)
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003a70:	4b21      	ldr	r3, [pc, #132]	@ (8003af8 <HAL_CAN_MspInit+0x14c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3301      	adds	r3, #1
 8003a76:	4a20      	ldr	r2, [pc, #128]	@ (8003af8 <HAL_CAN_MspInit+0x14c>)
 8003a78:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8003af8 <HAL_CAN_MspInit+0x14c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d10d      	bne.n	8003a9e <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	4b1d      	ldr	r3, [pc, #116]	@ (8003afc <HAL_CAN_MspInit+0x150>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003afc <HAL_CAN_MspInit+0x150>)
 8003a8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a92:	4b1a      	ldr	r3, [pc, #104]	@ (8003afc <HAL_CAN_MspInit+0x150>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	4b16      	ldr	r3, [pc, #88]	@ (8003afc <HAL_CAN_MspInit+0x150>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa6:	4a15      	ldr	r2, [pc, #84]	@ (8003afc <HAL_CAN_MspInit+0x150>)
 8003aa8:	f043 0302 	orr.w	r3, r3, #2
 8003aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aae:	4b13      	ldr	r3, [pc, #76]	@ (8003afc <HAL_CAN_MspInit+0x150>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003aba:	2360      	movs	r3, #96	@ 0x60
 8003abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003aca:	2309      	movs	r3, #9
 8003acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ace:	f107 031c 	add.w	r3, r7, #28
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	480c      	ldr	r0, [pc, #48]	@ (8003b08 <HAL_CAN_MspInit+0x15c>)
 8003ad6:	f002 fa09 	bl	8005eec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8003ada:	2200      	movs	r2, #0
 8003adc:	2105      	movs	r1, #5
 8003ade:	2040      	movs	r0, #64	@ 0x40
 8003ae0:	f001 fdcb 	bl	800567a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003ae4:	2040      	movs	r0, #64	@ 0x40
 8003ae6:	f001 fde4 	bl	80056b2 <HAL_NVIC_EnableIRQ>
}
 8003aea:	bf00      	nop
 8003aec:	3730      	adds	r7, #48	@ 0x30
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40006400 	.word	0x40006400
 8003af8:	20000d6c 	.word	0x20000d6c
 8003afc:	40023800 	.word	0x40023800
 8003b00:	40020c00 	.word	0x40020c00
 8003b04:	40006800 	.word	0x40006800
 8003b08:	40020400 	.word	0x40020400

08003b0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	@ 0x28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b14:	f107 0314 	add.w	r3, r7, #20
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	605a      	str	r2, [r3, #4]
 8003b1e:	609a      	str	r2, [r3, #8]
 8003b20:	60da      	str	r2, [r3, #12]
 8003b22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a29      	ldr	r2, [pc, #164]	@ (8003bd0 <HAL_I2C_MspInit+0xc4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d14b      	bne.n	8003bc6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	4b28      	ldr	r3, [pc, #160]	@ (8003bd4 <HAL_I2C_MspInit+0xc8>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b36:	4a27      	ldr	r2, [pc, #156]	@ (8003bd4 <HAL_I2C_MspInit+0xc8>)
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b3e:	4b25      	ldr	r3, [pc, #148]	@ (8003bd4 <HAL_I2C_MspInit+0xc8>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	4b21      	ldr	r3, [pc, #132]	@ (8003bd4 <HAL_I2C_MspInit+0xc8>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b52:	4a20      	ldr	r2, [pc, #128]	@ (8003bd4 <HAL_I2C_MspInit+0xc8>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003bd4 <HAL_I2C_MspInit+0xc8>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b6c:	2312      	movs	r3, #18
 8003b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b70:	2300      	movs	r3, #0
 8003b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b74:	2303      	movs	r3, #3
 8003b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b78:	2304      	movs	r3, #4
 8003b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b7c:	f107 0314 	add.w	r3, r7, #20
 8003b80:	4619      	mov	r1, r3
 8003b82:	4815      	ldr	r0, [pc, #84]	@ (8003bd8 <HAL_I2C_MspInit+0xcc>)
 8003b84:	f002 f9b2 	bl	8005eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003b88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b8e:	2312      	movs	r3, #18
 8003b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b96:	2303      	movs	r3, #3
 8003b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9e:	f107 0314 	add.w	r3, r7, #20
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	480d      	ldr	r0, [pc, #52]	@ (8003bdc <HAL_I2C_MspInit+0xd0>)
 8003ba6:	f002 f9a1 	bl	8005eec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	4b09      	ldr	r3, [pc, #36]	@ (8003bd4 <HAL_I2C_MspInit+0xc8>)
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	4a08      	ldr	r2, [pc, #32]	@ (8003bd4 <HAL_I2C_MspInit+0xc8>)
 8003bb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bba:	4b06      	ldr	r3, [pc, #24]	@ (8003bd4 <HAL_I2C_MspInit+0xc8>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bc2:	60bb      	str	r3, [r7, #8]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003bc6:	bf00      	nop
 8003bc8:	3728      	adds	r7, #40	@ 0x28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40005c00 	.word	0x40005c00
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	40020800 	.word	0x40020800
 8003bdc:	40020000 	.word	0x40020000

08003be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	@ 0x28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	609a      	str	r2, [r3, #8]
 8003bf4:	60da      	str	r2, [r3, #12]
 8003bf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a28      	ldr	r2, [pc, #160]	@ (8003ca0 <HAL_SPI_MspInit+0xc0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d149      	bne.n	8003c96 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	4b27      	ldr	r3, [pc, #156]	@ (8003ca4 <HAL_SPI_MspInit+0xc4>)
 8003c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0a:	4a26      	ldr	r2, [pc, #152]	@ (8003ca4 <HAL_SPI_MspInit+0xc4>)
 8003c0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c12:	4b24      	ldr	r3, [pc, #144]	@ (8003ca4 <HAL_SPI_MspInit+0xc4>)
 8003c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	4b20      	ldr	r3, [pc, #128]	@ (8003ca4 <HAL_SPI_MspInit+0xc4>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c26:	4a1f      	ldr	r2, [pc, #124]	@ (8003ca4 <HAL_SPI_MspInit+0xc4>)
 8003c28:	f043 0302 	orr.w	r3, r3, #2
 8003c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca4 <HAL_SPI_MspInit+0xc4>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	4b19      	ldr	r3, [pc, #100]	@ (8003ca4 <HAL_SPI_MspInit+0xc4>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c42:	4a18      	ldr	r2, [pc, #96]	@ (8003ca4 <HAL_SPI_MspInit+0xc4>)
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c4a:	4b16      	ldr	r3, [pc, #88]	@ (8003ca4 <HAL_SPI_MspInit+0xc4>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	60bb      	str	r3, [r7, #8]
 8003c54:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8003c56:	2318      	movs	r3, #24
 8003c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c62:	2303      	movs	r3, #3
 8003c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c66:	2305      	movs	r3, #5
 8003c68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c6a:	f107 0314 	add.w	r3, r7, #20
 8003c6e:	4619      	mov	r1, r3
 8003c70:	480d      	ldr	r0, [pc, #52]	@ (8003ca8 <HAL_SPI_MspInit+0xc8>)
 8003c72:	f002 f93b 	bl	8005eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003c76:	2380      	movs	r3, #128	@ 0x80
 8003c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c82:	2303      	movs	r3, #3
 8003c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c86:	2305      	movs	r3, #5
 8003c88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c8a:	f107 0314 	add.w	r3, r7, #20
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4806      	ldr	r0, [pc, #24]	@ (8003cac <HAL_SPI_MspInit+0xcc>)
 8003c92:	f002 f92b 	bl	8005eec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003c96:	bf00      	nop
 8003c98:	3728      	adds	r7, #40	@ 0x28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40013000 	.word	0x40013000
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	40020400 	.word	0x40020400
 8003cac:	40020000 	.word	0x40020000

08003cb0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a4e      	ldr	r2, [pc, #312]	@ (8003df8 <HAL_TIM_PWM_MspInit+0x148>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d10e      	bne.n	8003ce0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	4b4d      	ldr	r3, [pc, #308]	@ (8003dfc <HAL_TIM_PWM_MspInit+0x14c>)
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cca:	4a4c      	ldr	r2, [pc, #304]	@ (8003dfc <HAL_TIM_PWM_MspInit+0x14c>)
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cd2:	4b4a      	ldr	r3, [pc, #296]	@ (8003dfc <HAL_TIM_PWM_MspInit+0x14c>)
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003cde:	e086      	b.n	8003dee <HAL_TIM_PWM_MspInit+0x13e>
  else if(htim_pwm->Instance==TIM5)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a46      	ldr	r2, [pc, #280]	@ (8003e00 <HAL_TIM_PWM_MspInit+0x150>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d16e      	bne.n	8003dc8 <HAL_TIM_PWM_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	4b43      	ldr	r3, [pc, #268]	@ (8003dfc <HAL_TIM_PWM_MspInit+0x14c>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	4a42      	ldr	r2, [pc, #264]	@ (8003dfc <HAL_TIM_PWM_MspInit+0x14c>)
 8003cf4:	f043 0308 	orr.w	r3, r3, #8
 8003cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cfa:	4b40      	ldr	r3, [pc, #256]	@ (8003dfc <HAL_TIM_PWM_MspInit+0x14c>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	693b      	ldr	r3, [r7, #16]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8003d06:	4b3f      	ldr	r3, [pc, #252]	@ (8003e04 <HAL_TIM_PWM_MspInit+0x154>)
 8003d08:	4a3f      	ldr	r2, [pc, #252]	@ (8003e08 <HAL_TIM_PWM_MspInit+0x158>)
 8003d0a:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8003d0c:	4b3d      	ldr	r3, [pc, #244]	@ (8003e04 <HAL_TIM_PWM_MspInit+0x154>)
 8003d0e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8003d12:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d14:	4b3b      	ldr	r3, [pc, #236]	@ (8003e04 <HAL_TIM_PWM_MspInit+0x154>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d1a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e04 <HAL_TIM_PWM_MspInit+0x154>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003d20:	4b38      	ldr	r3, [pc, #224]	@ (8003e04 <HAL_TIM_PWM_MspInit+0x154>)
 8003d22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d26:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d28:	4b36      	ldr	r3, [pc, #216]	@ (8003e04 <HAL_TIM_PWM_MspInit+0x154>)
 8003d2a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d2e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d30:	4b34      	ldr	r3, [pc, #208]	@ (8003e04 <HAL_TIM_PWM_MspInit+0x154>)
 8003d32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d36:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8003d38:	4b32      	ldr	r3, [pc, #200]	@ (8003e04 <HAL_TIM_PWM_MspInit+0x154>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003d3e:	4b31      	ldr	r3, [pc, #196]	@ (8003e04 <HAL_TIM_PWM_MspInit+0x154>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d44:	4b2f      	ldr	r3, [pc, #188]	@ (8003e04 <HAL_TIM_PWM_MspInit+0x154>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8003d4a:	482e      	ldr	r0, [pc, #184]	@ (8003e04 <HAL_TIM_PWM_MspInit+0x154>)
 8003d4c:	f001 fccc 	bl	80056e8 <HAL_DMA_Init>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <HAL_TIM_PWM_MspInit+0xaa>
      Error_Handler();
 8003d56:	f7ff f841 	bl	8002ddc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a29      	ldr	r2, [pc, #164]	@ (8003e04 <HAL_TIM_PWM_MspInit+0x154>)
 8003d5e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d60:	4a28      	ldr	r2, [pc, #160]	@ (8003e04 <HAL_TIM_PWM_MspInit+0x154>)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8003d66:	4b29      	ldr	r3, [pc, #164]	@ (8003e0c <HAL_TIM_PWM_MspInit+0x15c>)
 8003d68:	4a29      	ldr	r2, [pc, #164]	@ (8003e10 <HAL_TIM_PWM_MspInit+0x160>)
 8003d6a:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8003d6c:	4b27      	ldr	r3, [pc, #156]	@ (8003e0c <HAL_TIM_PWM_MspInit+0x15c>)
 8003d6e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8003d72:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d74:	4b25      	ldr	r3, [pc, #148]	@ (8003e0c <HAL_TIM_PWM_MspInit+0x15c>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d7a:	4b24      	ldr	r3, [pc, #144]	@ (8003e0c <HAL_TIM_PWM_MspInit+0x15c>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003d80:	4b22      	ldr	r3, [pc, #136]	@ (8003e0c <HAL_TIM_PWM_MspInit+0x15c>)
 8003d82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d86:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d88:	4b20      	ldr	r3, [pc, #128]	@ (8003e0c <HAL_TIM_PWM_MspInit+0x15c>)
 8003d8a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d8e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d90:	4b1e      	ldr	r3, [pc, #120]	@ (8003e0c <HAL_TIM_PWM_MspInit+0x15c>)
 8003d92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d96:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8003d98:	4b1c      	ldr	r3, [pc, #112]	@ (8003e0c <HAL_TIM_PWM_MspInit+0x15c>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003e0c <HAL_TIM_PWM_MspInit+0x15c>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003da4:	4b19      	ldr	r3, [pc, #100]	@ (8003e0c <HAL_TIM_PWM_MspInit+0x15c>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8003daa:	4818      	ldr	r0, [pc, #96]	@ (8003e0c <HAL_TIM_PWM_MspInit+0x15c>)
 8003dac:	f001 fc9c 	bl	80056e8 <HAL_DMA_Init>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_TIM_PWM_MspInit+0x10a>
      Error_Handler();
 8003db6:	f7ff f811 	bl	8002ddc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a13      	ldr	r2, [pc, #76]	@ (8003e0c <HAL_TIM_PWM_MspInit+0x15c>)
 8003dbe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003dc0:	4a12      	ldr	r2, [pc, #72]	@ (8003e0c <HAL_TIM_PWM_MspInit+0x15c>)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003dc6:	e012      	b.n	8003dee <HAL_TIM_PWM_MspInit+0x13e>
  else if(htim_pwm->Instance==TIM8)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a11      	ldr	r2, [pc, #68]	@ (8003e14 <HAL_TIM_PWM_MspInit+0x164>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d10d      	bne.n	8003dee <HAL_TIM_PWM_MspInit+0x13e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	4b09      	ldr	r3, [pc, #36]	@ (8003dfc <HAL_TIM_PWM_MspInit+0x14c>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dda:	4a08      	ldr	r2, [pc, #32]	@ (8003dfc <HAL_TIM_PWM_MspInit+0x14c>)
 8003ddc:	f043 0302 	orr.w	r3, r3, #2
 8003de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003de2:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <HAL_TIM_PWM_MspInit+0x14c>)
 8003de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
}
 8003dee:	bf00      	nop
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	40000c00 	.word	0x40000c00
 8003e04:	2000096c 	.word	0x2000096c
 8003e08:	40026040 	.word	0x40026040
 8003e0c:	200009cc 	.word	0x200009cc
 8003e10:	40026070 	.word	0x40026070
 8003e14:	40010400 	.word	0x40010400

08003e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a2c      	ldr	r2, [pc, #176]	@ (8003ed8 <HAL_TIM_Base_MspInit+0xc0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d13e      	bne.n	8003ea8 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8003edc <HAL_TIM_Base_MspInit+0xc4>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	4a2a      	ldr	r2, [pc, #168]	@ (8003edc <HAL_TIM_Base_MspInit+0xc4>)
 8003e34:	f043 0304 	orr.w	r3, r3, #4
 8003e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e3a:	4b28      	ldr	r3, [pc, #160]	@ (8003edc <HAL_TIM_Base_MspInit+0xc4>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8003e46:	4b26      	ldr	r3, [pc, #152]	@ (8003ee0 <HAL_TIM_Base_MspInit+0xc8>)
 8003e48:	4a26      	ldr	r2, [pc, #152]	@ (8003ee4 <HAL_TIM_Base_MspInit+0xcc>)
 8003e4a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8003e4c:	4b24      	ldr	r3, [pc, #144]	@ (8003ee0 <HAL_TIM_Base_MspInit+0xc8>)
 8003e4e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003e52:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e54:	4b22      	ldr	r3, [pc, #136]	@ (8003ee0 <HAL_TIM_Base_MspInit+0xc8>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e5a:	4b21      	ldr	r3, [pc, #132]	@ (8003ee0 <HAL_TIM_Base_MspInit+0xc8>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003e60:	4b1f      	ldr	r3, [pc, #124]	@ (8003ee0 <HAL_TIM_Base_MspInit+0xc8>)
 8003e62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e66:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e68:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee0 <HAL_TIM_Base_MspInit+0xc8>)
 8003e6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e6e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e70:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee0 <HAL_TIM_Base_MspInit+0xc8>)
 8003e72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e76:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003e78:	4b19      	ldr	r3, [pc, #100]	@ (8003ee0 <HAL_TIM_Base_MspInit+0xc8>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003e7e:	4b18      	ldr	r3, [pc, #96]	@ (8003ee0 <HAL_TIM_Base_MspInit+0xc8>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e84:	4b16      	ldr	r3, [pc, #88]	@ (8003ee0 <HAL_TIM_Base_MspInit+0xc8>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8003e8a:	4815      	ldr	r0, [pc, #84]	@ (8003ee0 <HAL_TIM_Base_MspInit+0xc8>)
 8003e8c:	f001 fc2c 	bl	80056e8 <HAL_DMA_Init>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8003e96:	f7fe ffa1 	bl	8002ddc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a10      	ldr	r2, [pc, #64]	@ (8003ee0 <HAL_TIM_Base_MspInit+0xc8>)
 8003e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ea0:	4a0f      	ldr	r2, [pc, #60]	@ (8003ee0 <HAL_TIM_Base_MspInit+0xc8>)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003ea6:	e012      	b.n	8003ece <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a0e      	ldr	r2, [pc, #56]	@ (8003ee8 <HAL_TIM_Base_MspInit+0xd0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d10d      	bne.n	8003ece <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	4b09      	ldr	r3, [pc, #36]	@ (8003edc <HAL_TIM_Base_MspInit+0xc4>)
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eba:	4a08      	ldr	r2, [pc, #32]	@ (8003edc <HAL_TIM_Base_MspInit+0xc4>)
 8003ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ec2:	4b06      	ldr	r3, [pc, #24]	@ (8003edc <HAL_TIM_Base_MspInit+0xc4>)
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
}
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40000800 	.word	0x40000800
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	2000090c 	.word	0x2000090c
 8003ee4:	400260b8 	.word	0x400260b8
 8003ee8:	40014400 	.word	0x40014400

08003eec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08e      	sub	sp, #56	@ 0x38
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a6a      	ldr	r2, [pc, #424]	@ (80040b4 <HAL_TIM_MspPostInit+0x1c8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d11f      	bne.n	8003f4e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	623b      	str	r3, [r7, #32]
 8003f12:	4b69      	ldr	r3, [pc, #420]	@ (80040b8 <HAL_TIM_MspPostInit+0x1cc>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f16:	4a68      	ldr	r2, [pc, #416]	@ (80040b8 <HAL_TIM_MspPostInit+0x1cc>)
 8003f18:	f043 0310 	orr.w	r3, r3, #16
 8003f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f1e:	4b66      	ldr	r3, [pc, #408]	@ (80040b8 <HAL_TIM_MspPostInit+0x1cc>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	623b      	str	r3, [r7, #32]
 8003f28:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8003f2a:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8003f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f30:	2302      	movs	r3, #2
 8003f32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f44:	4619      	mov	r1, r3
 8003f46:	485d      	ldr	r0, [pc, #372]	@ (80040bc <HAL_TIM_MspPostInit+0x1d0>)
 8003f48:	f001 ffd0 	bl	8005eec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8003f4c:	e0ae      	b.n	80040ac <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a5b      	ldr	r2, [pc, #364]	@ (80040c0 <HAL_TIM_MspPostInit+0x1d4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d11f      	bne.n	8003f98 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	4b56      	ldr	r3, [pc, #344]	@ (80040b8 <HAL_TIM_MspPostInit+0x1cc>)
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f60:	4a55      	ldr	r2, [pc, #340]	@ (80040b8 <HAL_TIM_MspPostInit+0x1cc>)
 8003f62:	f043 0308 	orr.w	r3, r3, #8
 8003f66:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f68:	4b53      	ldr	r3, [pc, #332]	@ (80040b8 <HAL_TIM_MspPostInit+0x1cc>)
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	61fb      	str	r3, [r7, #28]
 8003f72:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003f74:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f82:	2300      	movs	r3, #0
 8003f84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003f86:	2302      	movs	r3, #2
 8003f88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f8e:	4619      	mov	r1, r3
 8003f90:	484c      	ldr	r0, [pc, #304]	@ (80040c4 <HAL_TIM_MspPostInit+0x1d8>)
 8003f92:	f001 ffab 	bl	8005eec <HAL_GPIO_Init>
}
 8003f96:	e089      	b.n	80040ac <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a4a      	ldr	r2, [pc, #296]	@ (80040c8 <HAL_TIM_MspPostInit+0x1dc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d11f      	bne.n	8003fe2 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61bb      	str	r3, [r7, #24]
 8003fa6:	4b44      	ldr	r3, [pc, #272]	@ (80040b8 <HAL_TIM_MspPostInit+0x1cc>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003faa:	4a43      	ldr	r2, [pc, #268]	@ (80040b8 <HAL_TIM_MspPostInit+0x1cc>)
 8003fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fb2:	4b41      	ldr	r3, [pc, #260]	@ (80040b8 <HAL_TIM_MspPostInit+0x1cc>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fba:	61bb      	str	r3, [r7, #24]
 8003fbc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8003fbe:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fd8:	4619      	mov	r1, r3
 8003fda:	483c      	ldr	r0, [pc, #240]	@ (80040cc <HAL_TIM_MspPostInit+0x1e0>)
 8003fdc:	f001 ff86 	bl	8005eec <HAL_GPIO_Init>
}
 8003fe0:	e064      	b.n	80040ac <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a3a      	ldr	r2, [pc, #232]	@ (80040d0 <HAL_TIM_MspPostInit+0x1e4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d13c      	bne.n	8004066 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	4b31      	ldr	r3, [pc, #196]	@ (80040b8 <HAL_TIM_MspPostInit+0x1cc>)
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff4:	4a30      	ldr	r2, [pc, #192]	@ (80040b8 <HAL_TIM_MspPostInit+0x1cc>)
 8003ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ffa:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ffc:	4b2e      	ldr	r3, [pc, #184]	@ (80040b8 <HAL_TIM_MspPostInit+0x1cc>)
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004008:	2300      	movs	r3, #0
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	4b2a      	ldr	r3, [pc, #168]	@ (80040b8 <HAL_TIM_MspPostInit+0x1cc>)
 800400e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004010:	4a29      	ldr	r2, [pc, #164]	@ (80040b8 <HAL_TIM_MspPostInit+0x1cc>)
 8004012:	f043 0304 	orr.w	r3, r3, #4
 8004016:	6313      	str	r3, [r2, #48]	@ 0x30
 8004018:	4b27      	ldr	r3, [pc, #156]	@ (80040b8 <HAL_TIM_MspPostInit+0x1cc>)
 800401a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004024:	23c0      	movs	r3, #192	@ 0xc0
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004028:	2302      	movs	r3, #2
 800402a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402c:	2300      	movs	r3, #0
 800402e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004030:	2300      	movs	r3, #0
 8004032:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004034:	2303      	movs	r3, #3
 8004036:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800403c:	4619      	mov	r1, r3
 800403e:	4825      	ldr	r0, [pc, #148]	@ (80040d4 <HAL_TIM_MspPostInit+0x1e8>)
 8004040:	f001 ff54 	bl	8005eec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004044:	2340      	movs	r3, #64	@ 0x40
 8004046:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004048:	2302      	movs	r3, #2
 800404a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404c:	2300      	movs	r3, #0
 800404e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004050:	2300      	movs	r3, #0
 8004052:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004054:	2303      	movs	r3, #3
 8004056:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004058:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800405c:	4619      	mov	r1, r3
 800405e:	481e      	ldr	r0, [pc, #120]	@ (80040d8 <HAL_TIM_MspPostInit+0x1ec>)
 8004060:	f001 ff44 	bl	8005eec <HAL_GPIO_Init>
}
 8004064:	e022      	b.n	80040ac <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1c      	ldr	r2, [pc, #112]	@ (80040dc <HAL_TIM_MspPostInit+0x1f0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d11d      	bne.n	80040ac <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	4b10      	ldr	r3, [pc, #64]	@ (80040b8 <HAL_TIM_MspPostInit+0x1cc>)
 8004076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004078:	4a0f      	ldr	r2, [pc, #60]	@ (80040b8 <HAL_TIM_MspPostInit+0x1cc>)
 800407a:	f043 0320 	orr.w	r3, r3, #32
 800407e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004080:	4b0d      	ldr	r3, [pc, #52]	@ (80040b8 <HAL_TIM_MspPostInit+0x1cc>)
 8004082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800408c:	2340      	movs	r3, #64	@ 0x40
 800408e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004090:	2302      	movs	r3, #2
 8004092:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004094:	2301      	movs	r3, #1
 8004096:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004098:	2302      	movs	r3, #2
 800409a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800409c:	2303      	movs	r3, #3
 800409e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040a4:	4619      	mov	r1, r3
 80040a6:	480e      	ldr	r0, [pc, #56]	@ (80040e0 <HAL_TIM_MspPostInit+0x1f4>)
 80040a8:	f001 ff20 	bl	8005eec <HAL_GPIO_Init>
}
 80040ac:	bf00      	nop
 80040ae:	3738      	adds	r7, #56	@ 0x38
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40010000 	.word	0x40010000
 80040b8:	40023800 	.word	0x40023800
 80040bc:	40021000 	.word	0x40021000
 80040c0:	40000800 	.word	0x40000800
 80040c4:	40020c00 	.word	0x40020c00
 80040c8:	40000c00 	.word	0x40000c00
 80040cc:	40021c00 	.word	0x40021c00
 80040d0:	40010400 	.word	0x40010400
 80040d4:	40022000 	.word	0x40022000
 80040d8:	40020800 	.word	0x40020800
 80040dc:	40014400 	.word	0x40014400
 80040e0:	40021400 	.word	0x40021400

080040e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08e      	sub	sp, #56	@ 0x38
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	605a      	str	r2, [r3, #4]
 80040f6:	609a      	str	r2, [r3, #8]
 80040f8:	60da      	str	r2, [r3, #12]
 80040fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a90      	ldr	r2, [pc, #576]	@ (8004344 <HAL_UART_MspInit+0x260>)
 8004102:	4293      	cmp	r3, r2
 8004104:	f040 80b2 	bne.w	800426c <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004108:	2300      	movs	r3, #0
 800410a:	623b      	str	r3, [r7, #32]
 800410c:	4b8e      	ldr	r3, [pc, #568]	@ (8004348 <HAL_UART_MspInit+0x264>)
 800410e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004110:	4a8d      	ldr	r2, [pc, #564]	@ (8004348 <HAL_UART_MspInit+0x264>)
 8004112:	f043 0310 	orr.w	r3, r3, #16
 8004116:	6453      	str	r3, [r2, #68]	@ 0x44
 8004118:	4b8b      	ldr	r3, [pc, #556]	@ (8004348 <HAL_UART_MspInit+0x264>)
 800411a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	623b      	str	r3, [r7, #32]
 8004122:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004124:	2300      	movs	r3, #0
 8004126:	61fb      	str	r3, [r7, #28]
 8004128:	4b87      	ldr	r3, [pc, #540]	@ (8004348 <HAL_UART_MspInit+0x264>)
 800412a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412c:	4a86      	ldr	r2, [pc, #536]	@ (8004348 <HAL_UART_MspInit+0x264>)
 800412e:	f043 0302 	orr.w	r3, r3, #2
 8004132:	6313      	str	r3, [r2, #48]	@ 0x30
 8004134:	4b84      	ldr	r3, [pc, #528]	@ (8004348 <HAL_UART_MspInit+0x264>)
 8004136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004140:	2300      	movs	r3, #0
 8004142:	61bb      	str	r3, [r7, #24]
 8004144:	4b80      	ldr	r3, [pc, #512]	@ (8004348 <HAL_UART_MspInit+0x264>)
 8004146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004148:	4a7f      	ldr	r2, [pc, #508]	@ (8004348 <HAL_UART_MspInit+0x264>)
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004150:	4b7d      	ldr	r3, [pc, #500]	@ (8004348 <HAL_UART_MspInit+0x264>)
 8004152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800415c:	2380      	movs	r3, #128	@ 0x80
 800415e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004160:	2302      	movs	r3, #2
 8004162:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004164:	2300      	movs	r3, #0
 8004166:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004168:	2303      	movs	r3, #3
 800416a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800416c:	2307      	movs	r3, #7
 800416e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004170:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004174:	4619      	mov	r1, r3
 8004176:	4875      	ldr	r0, [pc, #468]	@ (800434c <HAL_UART_MspInit+0x268>)
 8004178:	f001 feb8 	bl	8005eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800417c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004180:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004182:	2302      	movs	r3, #2
 8004184:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004186:	2300      	movs	r3, #0
 8004188:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800418a:	2303      	movs	r3, #3
 800418c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800418e:	2307      	movs	r3, #7
 8004190:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004196:	4619      	mov	r1, r3
 8004198:	486d      	ldr	r0, [pc, #436]	@ (8004350 <HAL_UART_MspInit+0x26c>)
 800419a:	f001 fea7 	bl	8005eec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800419e:	4b6d      	ldr	r3, [pc, #436]	@ (8004354 <HAL_UART_MspInit+0x270>)
 80041a0:	4a6d      	ldr	r2, [pc, #436]	@ (8004358 <HAL_UART_MspInit+0x274>)
 80041a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80041a4:	4b6b      	ldr	r3, [pc, #428]	@ (8004354 <HAL_UART_MspInit+0x270>)
 80041a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80041aa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041ac:	4b69      	ldr	r3, [pc, #420]	@ (8004354 <HAL_UART_MspInit+0x270>)
 80041ae:	2240      	movs	r2, #64	@ 0x40
 80041b0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041b2:	4b68      	ldr	r3, [pc, #416]	@ (8004354 <HAL_UART_MspInit+0x270>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041b8:	4b66      	ldr	r3, [pc, #408]	@ (8004354 <HAL_UART_MspInit+0x270>)
 80041ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041be:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041c0:	4b64      	ldr	r3, [pc, #400]	@ (8004354 <HAL_UART_MspInit+0x270>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041c6:	4b63      	ldr	r3, [pc, #396]	@ (8004354 <HAL_UART_MspInit+0x270>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80041cc:	4b61      	ldr	r3, [pc, #388]	@ (8004354 <HAL_UART_MspInit+0x270>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80041d2:	4b60      	ldr	r3, [pc, #384]	@ (8004354 <HAL_UART_MspInit+0x270>)
 80041d4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80041d8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041da:	4b5e      	ldr	r3, [pc, #376]	@ (8004354 <HAL_UART_MspInit+0x270>)
 80041dc:	2200      	movs	r2, #0
 80041de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80041e0:	485c      	ldr	r0, [pc, #368]	@ (8004354 <HAL_UART_MspInit+0x270>)
 80041e2:	f001 fa81 	bl	80056e8 <HAL_DMA_Init>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80041ec:	f7fe fdf6 	bl	8002ddc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a58      	ldr	r2, [pc, #352]	@ (8004354 <HAL_UART_MspInit+0x270>)
 80041f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80041f6:	4a57      	ldr	r2, [pc, #348]	@ (8004354 <HAL_UART_MspInit+0x270>)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80041fc:	4b57      	ldr	r3, [pc, #348]	@ (800435c <HAL_UART_MspInit+0x278>)
 80041fe:	4a58      	ldr	r2, [pc, #352]	@ (8004360 <HAL_UART_MspInit+0x27c>)
 8004200:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004202:	4b56      	ldr	r3, [pc, #344]	@ (800435c <HAL_UART_MspInit+0x278>)
 8004204:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004208:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800420a:	4b54      	ldr	r3, [pc, #336]	@ (800435c <HAL_UART_MspInit+0x278>)
 800420c:	2200      	movs	r2, #0
 800420e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004210:	4b52      	ldr	r3, [pc, #328]	@ (800435c <HAL_UART_MspInit+0x278>)
 8004212:	2200      	movs	r2, #0
 8004214:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004216:	4b51      	ldr	r3, [pc, #324]	@ (800435c <HAL_UART_MspInit+0x278>)
 8004218:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800421c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800421e:	4b4f      	ldr	r3, [pc, #316]	@ (800435c <HAL_UART_MspInit+0x278>)
 8004220:	2200      	movs	r2, #0
 8004222:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004224:	4b4d      	ldr	r3, [pc, #308]	@ (800435c <HAL_UART_MspInit+0x278>)
 8004226:	2200      	movs	r2, #0
 8004228:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800422a:	4b4c      	ldr	r3, [pc, #304]	@ (800435c <HAL_UART_MspInit+0x278>)
 800422c:	2200      	movs	r2, #0
 800422e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004230:	4b4a      	ldr	r3, [pc, #296]	@ (800435c <HAL_UART_MspInit+0x278>)
 8004232:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004236:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004238:	4b48      	ldr	r3, [pc, #288]	@ (800435c <HAL_UART_MspInit+0x278>)
 800423a:	2200      	movs	r2, #0
 800423c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800423e:	4847      	ldr	r0, [pc, #284]	@ (800435c <HAL_UART_MspInit+0x278>)
 8004240:	f001 fa52 	bl	80056e8 <HAL_DMA_Init>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 800424a:	f7fe fdc7 	bl	8002ddc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a42      	ldr	r2, [pc, #264]	@ (800435c <HAL_UART_MspInit+0x278>)
 8004252:	639a      	str	r2, [r3, #56]	@ 0x38
 8004254:	4a41      	ldr	r2, [pc, #260]	@ (800435c <HAL_UART_MspInit+0x278>)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800425a:	2200      	movs	r2, #0
 800425c:	2105      	movs	r1, #5
 800425e:	2025      	movs	r0, #37	@ 0x25
 8004260:	f001 fa0b 	bl	800567a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004264:	2025      	movs	r0, #37	@ 0x25
 8004266:	f001 fa24 	bl	80056b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800426a:	e11c      	b.n	80044a6 <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a3c      	ldr	r2, [pc, #240]	@ (8004364 <HAL_UART_MspInit+0x280>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d17e      	bne.n	8004374 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	4b33      	ldr	r3, [pc, #204]	@ (8004348 <HAL_UART_MspInit+0x264>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	4a32      	ldr	r2, [pc, #200]	@ (8004348 <HAL_UART_MspInit+0x264>)
 8004280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004284:	6413      	str	r3, [r2, #64]	@ 0x40
 8004286:	4b30      	ldr	r3, [pc, #192]	@ (8004348 <HAL_UART_MspInit+0x264>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	4b2c      	ldr	r3, [pc, #176]	@ (8004348 <HAL_UART_MspInit+0x264>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429a:	4a2b      	ldr	r2, [pc, #172]	@ (8004348 <HAL_UART_MspInit+0x264>)
 800429c:	f043 0304 	orr.w	r3, r3, #4
 80042a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042a2:	4b29      	ldr	r3, [pc, #164]	@ (8004348 <HAL_UART_MspInit+0x264>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80042ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80042b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b4:	2302      	movs	r3, #2
 80042b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042bc:	2303      	movs	r3, #3
 80042be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80042c0:	2307      	movs	r3, #7
 80042c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042c8:	4619      	mov	r1, r3
 80042ca:	4827      	ldr	r0, [pc, #156]	@ (8004368 <HAL_UART_MspInit+0x284>)
 80042cc:	f001 fe0e 	bl	8005eec <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80042d0:	4b26      	ldr	r3, [pc, #152]	@ (800436c <HAL_UART_MspInit+0x288>)
 80042d2:	4a27      	ldr	r2, [pc, #156]	@ (8004370 <HAL_UART_MspInit+0x28c>)
 80042d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80042d6:	4b25      	ldr	r3, [pc, #148]	@ (800436c <HAL_UART_MspInit+0x288>)
 80042d8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80042dc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042de:	4b23      	ldr	r3, [pc, #140]	@ (800436c <HAL_UART_MspInit+0x288>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042e4:	4b21      	ldr	r3, [pc, #132]	@ (800436c <HAL_UART_MspInit+0x288>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042ea:	4b20      	ldr	r3, [pc, #128]	@ (800436c <HAL_UART_MspInit+0x288>)
 80042ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042f0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042f2:	4b1e      	ldr	r3, [pc, #120]	@ (800436c <HAL_UART_MspInit+0x288>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042f8:	4b1c      	ldr	r3, [pc, #112]	@ (800436c <HAL_UART_MspInit+0x288>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80042fe:	4b1b      	ldr	r3, [pc, #108]	@ (800436c <HAL_UART_MspInit+0x288>)
 8004300:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004304:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004306:	4b19      	ldr	r3, [pc, #100]	@ (800436c <HAL_UART_MspInit+0x288>)
 8004308:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800430c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800430e:	4b17      	ldr	r3, [pc, #92]	@ (800436c <HAL_UART_MspInit+0x288>)
 8004310:	2200      	movs	r2, #0
 8004312:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004314:	4815      	ldr	r0, [pc, #84]	@ (800436c <HAL_UART_MspInit+0x288>)
 8004316:	f001 f9e7 	bl	80056e8 <HAL_DMA_Init>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_UART_MspInit+0x240>
      Error_Handler();
 8004320:	f7fe fd5c 	bl	8002ddc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a11      	ldr	r2, [pc, #68]	@ (800436c <HAL_UART_MspInit+0x288>)
 8004328:	639a      	str	r2, [r3, #56]	@ 0x38
 800432a:	4a10      	ldr	r2, [pc, #64]	@ (800436c <HAL_UART_MspInit+0x288>)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004330:	2200      	movs	r2, #0
 8004332:	2105      	movs	r1, #5
 8004334:	2027      	movs	r0, #39	@ 0x27
 8004336:	f001 f9a0 	bl	800567a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800433a:	2027      	movs	r0, #39	@ 0x27
 800433c:	f001 f9b9 	bl	80056b2 <HAL_NVIC_EnableIRQ>
}
 8004340:	e0b1      	b.n	80044a6 <HAL_UART_MspInit+0x3c2>
 8004342:	bf00      	nop
 8004344:	40011000 	.word	0x40011000
 8004348:	40023800 	.word	0x40023800
 800434c:	40020400 	.word	0x40020400
 8004350:	40020000 	.word	0x40020000
 8004354:	20000af8 	.word	0x20000af8
 8004358:	400264b8 	.word	0x400264b8
 800435c:	20000b58 	.word	0x20000b58
 8004360:	40026440 	.word	0x40026440
 8004364:	40004800 	.word	0x40004800
 8004368:	40020800 	.word	0x40020800
 800436c:	20000bb8 	.word	0x20000bb8
 8004370:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a4d      	ldr	r2, [pc, #308]	@ (80044b0 <HAL_UART_MspInit+0x3cc>)
 800437a:	4293      	cmp	r3, r2
 800437c:	f040 8093 	bne.w	80044a6 <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	4b4b      	ldr	r3, [pc, #300]	@ (80044b4 <HAL_UART_MspInit+0x3d0>)
 8004386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004388:	4a4a      	ldr	r2, [pc, #296]	@ (80044b4 <HAL_UART_MspInit+0x3d0>)
 800438a:	f043 0320 	orr.w	r3, r3, #32
 800438e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004390:	4b48      	ldr	r3, [pc, #288]	@ (80044b4 <HAL_UART_MspInit+0x3d0>)
 8004392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004394:	f003 0320 	and.w	r3, r3, #32
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800439c:	2300      	movs	r3, #0
 800439e:	60bb      	str	r3, [r7, #8]
 80043a0:	4b44      	ldr	r3, [pc, #272]	@ (80044b4 <HAL_UART_MspInit+0x3d0>)
 80043a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a4:	4a43      	ldr	r2, [pc, #268]	@ (80044b4 <HAL_UART_MspInit+0x3d0>)
 80043a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ac:	4b41      	ldr	r3, [pc, #260]	@ (80044b4 <HAL_UART_MspInit+0x3d0>)
 80043ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80043b8:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80043bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043be:	2302      	movs	r3, #2
 80043c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c6:	2303      	movs	r3, #3
 80043c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80043ca:	2308      	movs	r3, #8
 80043cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043d2:	4619      	mov	r1, r3
 80043d4:	4838      	ldr	r0, [pc, #224]	@ (80044b8 <HAL_UART_MspInit+0x3d4>)
 80043d6:	f001 fd89 	bl	8005eec <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80043da:	4b38      	ldr	r3, [pc, #224]	@ (80044bc <HAL_UART_MspInit+0x3d8>)
 80043dc:	4a38      	ldr	r2, [pc, #224]	@ (80044c0 <HAL_UART_MspInit+0x3dc>)
 80043de:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80043e0:	4b36      	ldr	r3, [pc, #216]	@ (80044bc <HAL_UART_MspInit+0x3d8>)
 80043e2:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80043e6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043e8:	4b34      	ldr	r3, [pc, #208]	@ (80044bc <HAL_UART_MspInit+0x3d8>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043ee:	4b33      	ldr	r3, [pc, #204]	@ (80044bc <HAL_UART_MspInit+0x3d8>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043f4:	4b31      	ldr	r3, [pc, #196]	@ (80044bc <HAL_UART_MspInit+0x3d8>)
 80043f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043fa:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043fc:	4b2f      	ldr	r3, [pc, #188]	@ (80044bc <HAL_UART_MspInit+0x3d8>)
 80043fe:	2200      	movs	r2, #0
 8004400:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004402:	4b2e      	ldr	r3, [pc, #184]	@ (80044bc <HAL_UART_MspInit+0x3d8>)
 8004404:	2200      	movs	r2, #0
 8004406:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004408:	4b2c      	ldr	r3, [pc, #176]	@ (80044bc <HAL_UART_MspInit+0x3d8>)
 800440a:	2200      	movs	r2, #0
 800440c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800440e:	4b2b      	ldr	r3, [pc, #172]	@ (80044bc <HAL_UART_MspInit+0x3d8>)
 8004410:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004414:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004416:	4b29      	ldr	r3, [pc, #164]	@ (80044bc <HAL_UART_MspInit+0x3d8>)
 8004418:	2200      	movs	r2, #0
 800441a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800441c:	4827      	ldr	r0, [pc, #156]	@ (80044bc <HAL_UART_MspInit+0x3d8>)
 800441e:	f001 f963 	bl	80056e8 <HAL_DMA_Init>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_UART_MspInit+0x348>
      Error_Handler();
 8004428:	f7fe fcd8 	bl	8002ddc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a23      	ldr	r2, [pc, #140]	@ (80044bc <HAL_UART_MspInit+0x3d8>)
 8004430:	639a      	str	r2, [r3, #56]	@ 0x38
 8004432:	4a22      	ldr	r2, [pc, #136]	@ (80044bc <HAL_UART_MspInit+0x3d8>)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004438:	4b22      	ldr	r3, [pc, #136]	@ (80044c4 <HAL_UART_MspInit+0x3e0>)
 800443a:	4a23      	ldr	r2, [pc, #140]	@ (80044c8 <HAL_UART_MspInit+0x3e4>)
 800443c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800443e:	4b21      	ldr	r3, [pc, #132]	@ (80044c4 <HAL_UART_MspInit+0x3e0>)
 8004440:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004444:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004446:	4b1f      	ldr	r3, [pc, #124]	@ (80044c4 <HAL_UART_MspInit+0x3e0>)
 8004448:	2240      	movs	r2, #64	@ 0x40
 800444a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800444c:	4b1d      	ldr	r3, [pc, #116]	@ (80044c4 <HAL_UART_MspInit+0x3e0>)
 800444e:	2200      	movs	r2, #0
 8004450:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004452:	4b1c      	ldr	r3, [pc, #112]	@ (80044c4 <HAL_UART_MspInit+0x3e0>)
 8004454:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004458:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800445a:	4b1a      	ldr	r3, [pc, #104]	@ (80044c4 <HAL_UART_MspInit+0x3e0>)
 800445c:	2200      	movs	r2, #0
 800445e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004460:	4b18      	ldr	r3, [pc, #96]	@ (80044c4 <HAL_UART_MspInit+0x3e0>)
 8004462:	2200      	movs	r2, #0
 8004464:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004466:	4b17      	ldr	r3, [pc, #92]	@ (80044c4 <HAL_UART_MspInit+0x3e0>)
 8004468:	2200      	movs	r2, #0
 800446a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800446c:	4b15      	ldr	r3, [pc, #84]	@ (80044c4 <HAL_UART_MspInit+0x3e0>)
 800446e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004472:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004474:	4b13      	ldr	r3, [pc, #76]	@ (80044c4 <HAL_UART_MspInit+0x3e0>)
 8004476:	2200      	movs	r2, #0
 8004478:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800447a:	4812      	ldr	r0, [pc, #72]	@ (80044c4 <HAL_UART_MspInit+0x3e0>)
 800447c:	f001 f934 	bl	80056e8 <HAL_DMA_Init>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8004486:	f7fe fca9 	bl	8002ddc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a0d      	ldr	r2, [pc, #52]	@ (80044c4 <HAL_UART_MspInit+0x3e0>)
 800448e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004490:	4a0c      	ldr	r2, [pc, #48]	@ (80044c4 <HAL_UART_MspInit+0x3e0>)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004496:	2200      	movs	r2, #0
 8004498:	2105      	movs	r1, #5
 800449a:	2047      	movs	r0, #71	@ 0x47
 800449c:	f001 f8ed 	bl	800567a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80044a0:	2047      	movs	r0, #71	@ 0x47
 80044a2:	f001 f906 	bl	80056b2 <HAL_NVIC_EnableIRQ>
}
 80044a6:	bf00      	nop
 80044a8:	3738      	adds	r7, #56	@ 0x38
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40011400 	.word	0x40011400
 80044b4:	40023800 	.word	0x40023800
 80044b8:	40021800 	.word	0x40021800
 80044bc:	20000c18 	.word	0x20000c18
 80044c0:	40026428 	.word	0x40026428
 80044c4:	20000c78 	.word	0x20000c78
 80044c8:	400264a0 	.word	0x400264a0

080044cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80044d0:	f003 f92c 	bl	800772c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044d4:	bf00      	nop
 80044d6:	e7fd      	b.n	80044d4 <NMI_Handler+0x8>

080044d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044dc:	bf00      	nop
 80044de:	e7fd      	b.n	80044dc <HardFault_Handler+0x4>

080044e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044e4:	bf00      	nop
 80044e6:	e7fd      	b.n	80044e4 <MemManage_Handler+0x4>

080044e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044ec:	bf00      	nop
 80044ee:	e7fd      	b.n	80044ec <BusFault_Handler+0x4>

080044f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044f4:	bf00      	nop
 80044f6:	e7fd      	b.n	80044f4 <UsageFault_Handler+0x4>

080044f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044fc:	bf00      	nop
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800450a:	f000 f959 	bl	80047c0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800450e:	f007 fc3f 	bl	800bd90 <xTaskGetSchedulerState>
 8004512:	4603      	mov	r3, r0
 8004514:	2b01      	cmp	r3, #1
 8004516:	d001      	beq.n	800451c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004518:	f008 fb16 	bl	800cb48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800451c:	bf00      	nop
 800451e:	bd80      	pop	{r7, pc}

08004520 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004524:	2008      	movs	r0, #8
 8004526:	f001 fe97 	bl	8006258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 800452a:	4802      	ldr	r0, [pc, #8]	@ (8004534 <EXTI3_IRQHandler+0x14>)
 800452c:	f7fd fc36 	bl	8001d9c <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8004530:	bf00      	nop
 8004532:	bd80      	pop	{r7, pc}
 8004534:	2000069c 	.word	0x2000069c

08004538 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 800453c:	2010      	movs	r0, #16
 800453e:	f001 fe8b 	bl	8006258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004542:	bf00      	nop
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800454c:	4802      	ldr	r0, [pc, #8]	@ (8004558 <DMA1_Stream1_IRQHandler+0x10>)
 800454e:	f001 fa63 	bl	8005a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004552:	bf00      	nop
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20000bb8 	.word	0x20000bb8

0800455c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8004560:	4802      	ldr	r0, [pc, #8]	@ (800456c <DMA1_Stream2_IRQHandler+0x10>)
 8004562:	f001 fa59 	bl	8005a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	2000096c 	.word	0x2000096c

08004570 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8004574:	4802      	ldr	r0, [pc, #8]	@ (8004580 <DMA1_Stream4_IRQHandler+0x10>)
 8004576:	f001 fa4f 	bl	8005a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800457a:	bf00      	nop
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	200009cc 	.word	0x200009cc

08004584 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004588:	4802      	ldr	r0, [pc, #8]	@ (8004594 <CAN1_RX0_IRQHandler+0x10>)
 800458a:	f000 fd6c 	bl	8005066 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800458e:	bf00      	nop
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	200006a8 	.word	0x200006a8

08004598 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800459c:	4802      	ldr	r0, [pc, #8]	@ (80045a8 <USART1_IRQHandler+0x10>)
 800459e:	f004 fcaf 	bl	8008f00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80045a2:	bf00      	nop
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000a2c 	.word	0x20000a2c

080045ac <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80045b0:	4802      	ldr	r0, [pc, #8]	@ (80045bc <DMA1_Stream7_IRQHandler+0x10>)
 80045b2:	f001 fa31 	bl	8005a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80045b6:	bf00      	nop
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	2000090c 	.word	0x2000090c

080045c0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80045c4:	4802      	ldr	r0, [pc, #8]	@ (80045d0 <DMA2_Stream1_IRQHandler+0x10>)
 80045c6:	f001 fa27 	bl	8005a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80045ca:	bf00      	nop
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20000c18 	.word	0x20000c18

080045d4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80045d8:	4802      	ldr	r0, [pc, #8]	@ (80045e4 <DMA2_Stream2_IRQHandler+0x10>)
 80045da:	f001 fa1d 	bl	8005a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80045de:	bf00      	nop
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20000b58 	.word	0x20000b58

080045e8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80045ec:	4802      	ldr	r0, [pc, #8]	@ (80045f8 <CAN2_RX0_IRQHandler+0x10>)
 80045ee:	f000 fd3a 	bl	8005066 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80045f2:	bf00      	nop
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	200006d0 	.word	0x200006d0

080045fc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8004600:	4802      	ldr	r0, [pc, #8]	@ (800460c <DMA2_Stream6_IRQHandler+0x10>)
 8004602:	f001 fa09 	bl	8005a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004606:	bf00      	nop
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20000c78 	.word	0x20000c78

08004610 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004614:	4802      	ldr	r0, [pc, #8]	@ (8004620 <DMA2_Stream7_IRQHandler+0x10>)
 8004616:	f001 f9ff 	bl	8005a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800461a:	bf00      	nop
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20000af8 	.word	0x20000af8

08004624 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004628:	4802      	ldr	r0, [pc, #8]	@ (8004634 <USART6_IRQHandler+0x10>)
 800462a:	f004 fc69 	bl	8008f00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800462e:	bf00      	nop
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20000ab4 	.word	0x20000ab4

08004638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004640:	4a14      	ldr	r2, [pc, #80]	@ (8004694 <_sbrk+0x5c>)
 8004642:	4b15      	ldr	r3, [pc, #84]	@ (8004698 <_sbrk+0x60>)
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800464c:	4b13      	ldr	r3, [pc, #76]	@ (800469c <_sbrk+0x64>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d102      	bne.n	800465a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004654:	4b11      	ldr	r3, [pc, #68]	@ (800469c <_sbrk+0x64>)
 8004656:	4a12      	ldr	r2, [pc, #72]	@ (80046a0 <_sbrk+0x68>)
 8004658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800465a:	4b10      	ldr	r3, [pc, #64]	@ (800469c <_sbrk+0x64>)
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4413      	add	r3, r2
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	429a      	cmp	r2, r3
 8004666:	d207      	bcs.n	8004678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004668:	f008 fd6c 	bl	800d144 <__errno>
 800466c:	4603      	mov	r3, r0
 800466e:	220c      	movs	r2, #12
 8004670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004672:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004676:	e009      	b.n	800468c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004678:	4b08      	ldr	r3, [pc, #32]	@ (800469c <_sbrk+0x64>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800467e:	4b07      	ldr	r3, [pc, #28]	@ (800469c <_sbrk+0x64>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4413      	add	r3, r2
 8004686:	4a05      	ldr	r2, [pc, #20]	@ (800469c <_sbrk+0x64>)
 8004688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800468a:	68fb      	ldr	r3, [r7, #12]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	20020000 	.word	0x20020000
 8004698:	00000400 	.word	0x00000400
 800469c:	20000d70 	.word	0x20000d70
 80046a0:	200058a8 	.word	0x200058a8

080046a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046a8:	4b06      	ldr	r3, [pc, #24]	@ (80046c4 <SystemInit+0x20>)
 80046aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ae:	4a05      	ldr	r2, [pc, #20]	@ (80046c4 <SystemInit+0x20>)
 80046b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80046b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046b8:	bf00      	nop
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	e000ed00 	.word	0xe000ed00

080046c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80046c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004700 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80046cc:	480d      	ldr	r0, [pc, #52]	@ (8004704 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80046ce:	490e      	ldr	r1, [pc, #56]	@ (8004708 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80046d0:	4a0e      	ldr	r2, [pc, #56]	@ (800470c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80046d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046d4:	e002      	b.n	80046dc <LoopCopyDataInit>

080046d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046da:	3304      	adds	r3, #4

080046dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046e0:	d3f9      	bcc.n	80046d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046e2:	4a0b      	ldr	r2, [pc, #44]	@ (8004710 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80046e4:	4c0b      	ldr	r4, [pc, #44]	@ (8004714 <LoopFillZerobss+0x26>)
  movs r3, #0
 80046e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046e8:	e001      	b.n	80046ee <LoopFillZerobss>

080046ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046ec:	3204      	adds	r2, #4

080046ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046f0:	d3fb      	bcc.n	80046ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80046f2:	f7ff ffd7 	bl	80046a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046f6:	f008 fd2b 	bl	800d150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046fa:	f7fd fbbd 	bl	8001e78 <main>
  bx  lr    
 80046fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004700:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004708:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800470c:	0800dbb4 	.word	0x0800dbb4
  ldr r2, =_sbss
 8004710:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8004714:	200058a8 	.word	0x200058a8

08004718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004718:	e7fe      	b.n	8004718 <ADC_IRQHandler>
	...

0800471c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004720:	4b0e      	ldr	r3, [pc, #56]	@ (800475c <HAL_Init+0x40>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a0d      	ldr	r2, [pc, #52]	@ (800475c <HAL_Init+0x40>)
 8004726:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800472a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800472c:	4b0b      	ldr	r3, [pc, #44]	@ (800475c <HAL_Init+0x40>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a0a      	ldr	r2, [pc, #40]	@ (800475c <HAL_Init+0x40>)
 8004732:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004736:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004738:	4b08      	ldr	r3, [pc, #32]	@ (800475c <HAL_Init+0x40>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a07      	ldr	r2, [pc, #28]	@ (800475c <HAL_Init+0x40>)
 800473e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004742:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004744:	2003      	movs	r0, #3
 8004746:	f000 ff8d 	bl	8005664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800474a:	200f      	movs	r0, #15
 800474c:	f000 f808 	bl	8004760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004750:	f7ff f900 	bl	8003954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40023c00 	.word	0x40023c00

08004760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004768:	4b12      	ldr	r3, [pc, #72]	@ (80047b4 <HAL_InitTick+0x54>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4b12      	ldr	r3, [pc, #72]	@ (80047b8 <HAL_InitTick+0x58>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	4619      	mov	r1, r3
 8004772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004776:	fbb3 f3f1 	udiv	r3, r3, r1
 800477a:	fbb2 f3f3 	udiv	r3, r2, r3
 800477e:	4618      	mov	r0, r3
 8004780:	f000 ffa5 	bl	80056ce <HAL_SYSTICK_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e00e      	b.n	80047ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b0f      	cmp	r3, #15
 8004792:	d80a      	bhi.n	80047aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004794:	2200      	movs	r2, #0
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800479c:	f000 ff6d 	bl	800567a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047a0:	4a06      	ldr	r2, [pc, #24]	@ (80047bc <HAL_InitTick+0x5c>)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	2000001c 	.word	0x2000001c
 80047b8:	20000024 	.word	0x20000024
 80047bc:	20000020 	.word	0x20000020

080047c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047c4:	4b06      	ldr	r3, [pc, #24]	@ (80047e0 <HAL_IncTick+0x20>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	4b06      	ldr	r3, [pc, #24]	@ (80047e4 <HAL_IncTick+0x24>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4413      	add	r3, r2
 80047d0:	4a04      	ldr	r2, [pc, #16]	@ (80047e4 <HAL_IncTick+0x24>)
 80047d2:	6013      	str	r3, [r2, #0]
}
 80047d4:	bf00      	nop
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	20000024 	.word	0x20000024
 80047e4:	20000d74 	.word	0x20000d74

080047e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  return uwTick;
 80047ec:	4b03      	ldr	r3, [pc, #12]	@ (80047fc <HAL_GetTick+0x14>)
 80047ee:	681b      	ldr	r3, [r3, #0]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20000d74 	.word	0x20000d74

08004800 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e0ed      	b.n	80049ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d102      	bne.n	8004824 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff f8c4 	bl	80039ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0201 	orr.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004834:	f7ff ffd8 	bl	80047e8 <HAL_GetTick>
 8004838:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800483a:	e012      	b.n	8004862 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800483c:	f7ff ffd4 	bl	80047e8 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b0a      	cmp	r3, #10
 8004848:	d90b      	bls.n	8004862 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2205      	movs	r2, #5
 800485a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e0c5      	b.n	80049ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0e5      	beq.n	800483c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0202 	bic.w	r2, r2, #2
 800487e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004880:	f7ff ffb2 	bl	80047e8 <HAL_GetTick>
 8004884:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004886:	e012      	b.n	80048ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004888:	f7ff ffae 	bl	80047e8 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b0a      	cmp	r3, #10
 8004894:	d90b      	bls.n	80048ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2205      	movs	r2, #5
 80048a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e09f      	b.n	80049ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e5      	bne.n	8004888 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	7e1b      	ldrb	r3, [r3, #24]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d108      	bne.n	80048d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	e007      	b.n	80048e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	7e5b      	ldrb	r3, [r3, #25]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d108      	bne.n	8004900 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e007      	b.n	8004910 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800490e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	7e9b      	ldrb	r3, [r3, #26]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d108      	bne.n	800492a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0220 	orr.w	r2, r2, #32
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	e007      	b.n	800493a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0220 	bic.w	r2, r2, #32
 8004938:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	7edb      	ldrb	r3, [r3, #27]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d108      	bne.n	8004954 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0210 	bic.w	r2, r2, #16
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	e007      	b.n	8004964 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0210 	orr.w	r2, r2, #16
 8004962:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	7f1b      	ldrb	r3, [r3, #28]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d108      	bne.n	800497e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0208 	orr.w	r2, r2, #8
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	e007      	b.n	800498e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0208 	bic.w	r2, r2, #8
 800498c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	7f5b      	ldrb	r3, [r3, #29]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d108      	bne.n	80049a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f042 0204 	orr.w	r2, r2, #4
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	e007      	b.n	80049b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0204 	bic.w	r2, r2, #4
 80049b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	ea42 0103 	orr.w	r1, r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	1e5a      	subs	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a0e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004a10:	7cfb      	ldrb	r3, [r7, #19]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d003      	beq.n	8004a1e <HAL_CAN_ConfigFilter+0x26>
 8004a16:	7cfb      	ldrb	r3, [r7, #19]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	f040 80be 	bne.w	8004b9a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004a1e:	4b65      	ldr	r3, [pc, #404]	@ (8004bb4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004a20:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004a28:	f043 0201 	orr.w	r2, r3, #1
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004a38:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f003 031f 	and.w	r3, r3, #31
 8004a5e:	2201      	movs	r2, #1
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	401a      	ands	r2, r3
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d123      	bne.n	8004ac8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	401a      	ands	r2, r3
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004aa2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	3248      	adds	r2, #72	@ 0x48
 8004aa8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004abc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004abe:	6979      	ldr	r1, [r7, #20]
 8004ac0:	3348      	adds	r3, #72	@ 0x48
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	440b      	add	r3, r1
 8004ac6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d122      	bne.n	8004b16 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004af0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	3248      	adds	r2, #72	@ 0x48
 8004af6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004b0a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004b0c:	6979      	ldr	r1, [r7, #20]
 8004b0e:	3348      	adds	r3, #72	@ 0x48
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	440b      	add	r3, r1
 8004b14:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	43db      	mvns	r3, r3
 8004b28:	401a      	ands	r2, r3
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004b30:	e007      	b.n	8004b42 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d109      	bne.n	8004b5e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	43db      	mvns	r3, r3
 8004b54:	401a      	ands	r2, r3
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004b5c:	e007      	b.n	8004b6e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d107      	bne.n	8004b86 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004b8c:	f023 0201 	bic.w	r2, r3, #1
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	e006      	b.n	8004ba8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
  }
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	40006400 	.word	0x40006400

08004bb8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d12e      	bne.n	8004c2a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0201 	bic.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004be4:	f7ff fe00 	bl	80047e8 <HAL_GetTick>
 8004be8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004bea:	e012      	b.n	8004c12 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004bec:	f7ff fdfc 	bl	80047e8 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b0a      	cmp	r3, #10
 8004bf8:	d90b      	bls.n	8004c12 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2205      	movs	r2, #5
 8004c0a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e012      	b.n	8004c38 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e5      	bne.n	8004bec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	e006      	b.n	8004c38 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
  }
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b089      	sub	sp, #36	@ 0x24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c54:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004c5e:	7ffb      	ldrb	r3, [r7, #31]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d003      	beq.n	8004c6c <HAL_CAN_AddTxMessage+0x2c>
 8004c64:	7ffb      	ldrb	r3, [r7, #31]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	f040 80b8 	bne.w	8004ddc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10a      	bne.n	8004c8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d105      	bne.n	8004c8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 80a0 	beq.w	8004dcc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	0e1b      	lsrs	r3, r3, #24
 8004c90:	f003 0303 	and.w	r3, r3, #3
 8004c94:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d907      	bls.n	8004cac <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e09e      	b.n	8004dea <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004cac:	2201      	movs	r2, #1
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	409a      	lsls	r2, r3
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10d      	bne.n	8004cda <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004cc8:	68f9      	ldr	r1, [r7, #12]
 8004cca:	6809      	ldr	r1, [r1, #0]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	3318      	adds	r3, #24
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	440b      	add	r3, r1
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	e00f      	b.n	8004cfa <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ce4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004cea:	68f9      	ldr	r1, [r7, #12]
 8004cec:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004cee:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	3318      	adds	r3, #24
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	440b      	add	r3, r1
 8004cf8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6819      	ldr	r1, [r3, #0]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	691a      	ldr	r2, [r3, #16]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	3318      	adds	r3, #24
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	440b      	add	r3, r1
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	7d1b      	ldrb	r3, [r3, #20]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d111      	bne.n	8004d3a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	3318      	adds	r3, #24
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	4413      	add	r3, r2
 8004d22:	3304      	adds	r3, #4
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	6811      	ldr	r1, [r2, #0]
 8004d2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	3318      	adds	r3, #24
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	440b      	add	r3, r1
 8004d36:	3304      	adds	r3, #4
 8004d38:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3307      	adds	r3, #7
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	061a      	lsls	r2, r3, #24
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3306      	adds	r3, #6
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	041b      	lsls	r3, r3, #16
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3305      	adds	r3, #5
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	4313      	orrs	r3, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	3204      	adds	r2, #4
 8004d5a:	7812      	ldrb	r2, [r2, #0]
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	6811      	ldr	r1, [r2, #0]
 8004d62:	ea43 0200 	orr.w	r2, r3, r0
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	440b      	add	r3, r1
 8004d6c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004d70:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	3303      	adds	r3, #3
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	061a      	lsls	r2, r3, #24
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	041b      	lsls	r3, r3, #16
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3301      	adds	r3, #1
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	021b      	lsls	r3, r3, #8
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	7812      	ldrb	r2, [r2, #0]
 8004d92:	4610      	mov	r0, r2
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	6811      	ldr	r1, [r2, #0]
 8004d98:	ea43 0200 	orr.w	r2, r3, r0
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	440b      	add	r3, r1
 8004da2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004da6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	3318      	adds	r3, #24
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	4413      	add	r3, r2
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	6811      	ldr	r1, [r2, #0]
 8004dba:	f043 0201 	orr.w	r2, r3, #1
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	3318      	adds	r3, #24
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	440b      	add	r3, r1
 8004dc6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	e00e      	b.n	8004dea <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e006      	b.n	8004dea <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
  }
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3724      	adds	r7, #36	@ 0x24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004df6:	b480      	push	{r7}
 8004df8:	b087      	sub	sp, #28
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e0a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e0c:	7dfb      	ldrb	r3, [r7, #23]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d003      	beq.n	8004e1a <HAL_CAN_GetRxMessage+0x24>
 8004e12:	7dfb      	ldrb	r3, [r7, #23]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	f040 80f3 	bne.w	8005000 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10e      	bne.n	8004e3e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d116      	bne.n	8004e5c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e32:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e0e7      	b.n	800500e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f003 0303 	and.w	r3, r3, #3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d107      	bne.n	8004e5c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e50:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0d8      	b.n	800500e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	331b      	adds	r3, #27
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	4413      	add	r3, r2
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0204 	and.w	r2, r3, #4
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10c      	bne.n	8004e94 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	331b      	adds	r3, #27
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	4413      	add	r3, r2
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	0d5b      	lsrs	r3, r3, #21
 8004e8a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	e00b      	b.n	8004eac <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	331b      	adds	r3, #27
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	4413      	add	r3, r2
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	08db      	lsrs	r3, r3, #3
 8004ea4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	331b      	adds	r3, #27
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	4413      	add	r3, r2
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0202 	and.w	r2, r3, #2
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	331b      	adds	r3, #27
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	4413      	add	r3, r2
 8004ece:	3304      	adds	r3, #4
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 020f 	and.w	r2, r3, #15
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	331b      	adds	r3, #27
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	0a1b      	lsrs	r3, r3, #8
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	331b      	adds	r3, #27
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	4413      	add	r3, r2
 8004efe:	3304      	adds	r3, #4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	0c1b      	lsrs	r3, r3, #16
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	0a1a      	lsrs	r2, r3, #8
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	3301      	adds	r3, #1
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	011b      	lsls	r3, r3, #4
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	0c1a      	lsrs	r2, r3, #16
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	3302      	adds	r3, #2
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	0e1a      	lsrs	r2, r3, #24
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	3303      	adds	r3, #3
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	3304      	adds	r3, #4
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	0a1a      	lsrs	r2, r3, #8
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	3305      	adds	r3, #5
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	0c1a      	lsrs	r2, r3, #16
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	3306      	adds	r3, #6
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	0e1a      	lsrs	r2, r3, #24
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	3307      	adds	r3, #7
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d108      	bne.n	8004fec <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0220 	orr.w	r2, r2, #32
 8004fe8:	60da      	str	r2, [r3, #12]
 8004fea:	e007      	b.n	8004ffc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0220 	orr.w	r2, r2, #32
 8004ffa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	e006      	b.n	800500e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005004:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
  }
}
 800500e:	4618      	mov	r0, r3
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 3020 	ldrb.w	r3, [r3, #32]
 800502a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d002      	beq.n	8005038 <HAL_CAN_ActivateNotification+0x1e>
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	2b02      	cmp	r3, #2
 8005036:	d109      	bne.n	800504c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6959      	ldr	r1, [r3, #20]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	e006      	b.n	800505a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
  }
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b08a      	sub	sp, #40	@ 0x28
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800506e:	2300      	movs	r3, #0
 8005070:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d07c      	beq.n	80051a6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d023      	beq.n	80050fe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2201      	movs	r2, #1
 80050bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f983 	bl	80053d4 <HAL_CAN_TxMailbox0CompleteCallback>
 80050ce:	e016      	b.n	80050fe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d004      	beq.n	80050e4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80050e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050e2:	e00c      	b.n	80050fe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d004      	beq.n	80050f8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80050f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050f6:	e002      	b.n	80050fe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f989 	bl	8005410 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005104:	2b00      	cmp	r3, #0
 8005106:	d024      	beq.n	8005152 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005110:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f963 	bl	80053e8 <HAL_CAN_TxMailbox1CompleteCallback>
 8005122:	e016      	b.n	8005152 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800512a:	2b00      	cmp	r3, #0
 800512c:	d004      	beq.n	8005138 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005134:	627b      	str	r3, [r7, #36]	@ 0x24
 8005136:	e00c      	b.n	8005152 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800513e:	2b00      	cmp	r3, #0
 8005140:	d004      	beq.n	800514c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005144:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005148:	627b      	str	r3, [r7, #36]	@ 0x24
 800514a:	e002      	b.n	8005152 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f969 	bl	8005424 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d024      	beq.n	80051a6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005164:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f943 	bl	80053fc <HAL_CAN_TxMailbox2CompleteCallback>
 8005176:	e016      	b.n	80051a6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d004      	beq.n	800518c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005184:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005188:	627b      	str	r3, [r7, #36]	@ 0x24
 800518a:	e00c      	b.n	80051a6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d004      	beq.n	80051a0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800519c:	627b      	str	r3, [r7, #36]	@ 0x24
 800519e:	e002      	b.n	80051a6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f949 	bl	8005438 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00c      	beq.n	80051ca <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f003 0310 	and.w	r3, r3, #16
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d007      	beq.n	80051ca <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051c0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2210      	movs	r2, #16
 80051c8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00b      	beq.n	80051ec <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d006      	beq.n	80051ec <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2208      	movs	r2, #8
 80051e4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f930 	bl	800544c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f003 0303 	and.w	r3, r3, #3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7fb ff27 	bl	8001058 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00c      	beq.n	800522e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b00      	cmp	r3, #0
 800521c:	d007      	beq.n	800522e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005224:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2210      	movs	r2, #16
 800522c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	f003 0320 	and.w	r3, r3, #32
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00b      	beq.n	8005250 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d006      	beq.n	8005250 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2208      	movs	r2, #8
 8005248:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f912 	bl	8005474 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	f003 0310 	and.w	r3, r3, #16
 8005256:	2b00      	cmp	r3, #0
 8005258:	d009      	beq.n	800526e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f8f9 	bl	8005460 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00b      	beq.n	8005290 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	f003 0310 	and.w	r3, r3, #16
 800527e:	2b00      	cmp	r3, #0
 8005280:	d006      	beq.n	8005290 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2210      	movs	r2, #16
 8005288:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f8fc 	bl	8005488 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00b      	beq.n	80052b2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d006      	beq.n	80052b2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2208      	movs	r2, #8
 80052aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f8f5 	bl	800549c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d07b      	beq.n	80053b4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d072      	beq.n	80053ac <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80052da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052dc:	f043 0301 	orr.w	r3, r3, #1
 80052e0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d008      	beq.n	80052fe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80052f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f8:	f043 0302 	orr.w	r3, r3, #2
 80052fc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005314:	f043 0304 	orr.w	r3, r3, #4
 8005318:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005320:	2b00      	cmp	r3, #0
 8005322:	d043      	beq.n	80053ac <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800532a:	2b00      	cmp	r3, #0
 800532c:	d03e      	beq.n	80053ac <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005334:	2b60      	cmp	r3, #96	@ 0x60
 8005336:	d02b      	beq.n	8005390 <HAL_CAN_IRQHandler+0x32a>
 8005338:	2b60      	cmp	r3, #96	@ 0x60
 800533a:	d82e      	bhi.n	800539a <HAL_CAN_IRQHandler+0x334>
 800533c:	2b50      	cmp	r3, #80	@ 0x50
 800533e:	d022      	beq.n	8005386 <HAL_CAN_IRQHandler+0x320>
 8005340:	2b50      	cmp	r3, #80	@ 0x50
 8005342:	d82a      	bhi.n	800539a <HAL_CAN_IRQHandler+0x334>
 8005344:	2b40      	cmp	r3, #64	@ 0x40
 8005346:	d019      	beq.n	800537c <HAL_CAN_IRQHandler+0x316>
 8005348:	2b40      	cmp	r3, #64	@ 0x40
 800534a:	d826      	bhi.n	800539a <HAL_CAN_IRQHandler+0x334>
 800534c:	2b30      	cmp	r3, #48	@ 0x30
 800534e:	d010      	beq.n	8005372 <HAL_CAN_IRQHandler+0x30c>
 8005350:	2b30      	cmp	r3, #48	@ 0x30
 8005352:	d822      	bhi.n	800539a <HAL_CAN_IRQHandler+0x334>
 8005354:	2b10      	cmp	r3, #16
 8005356:	d002      	beq.n	800535e <HAL_CAN_IRQHandler+0x2f8>
 8005358:	2b20      	cmp	r3, #32
 800535a:	d005      	beq.n	8005368 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800535c:	e01d      	b.n	800539a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005360:	f043 0308 	orr.w	r3, r3, #8
 8005364:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005366:	e019      	b.n	800539c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536a:	f043 0310 	orr.w	r3, r3, #16
 800536e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005370:	e014      	b.n	800539c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	f043 0320 	orr.w	r3, r3, #32
 8005378:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800537a:	e00f      	b.n	800539c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005382:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005384:	e00a      	b.n	800539c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800538c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800538e:	e005      	b.n	800539c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005396:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005398:	e000      	b.n	800539c <HAL_CAN_IRQHandler+0x336>
            break;
 800539a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80053aa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2204      	movs	r2, #4
 80053b2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80053b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d008      	beq.n	80053cc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f872 	bl	80054b0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80053cc:	bf00      	nop
 80053ce:	3728      	adds	r7, #40	@ 0x28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005508 <__NVIC_SetPriorityGrouping+0x44>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80054e0:	4013      	ands	r3, r2
 80054e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80054f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054f6:	4a04      	ldr	r2, [pc, #16]	@ (8005508 <__NVIC_SetPriorityGrouping+0x44>)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	60d3      	str	r3, [r2, #12]
}
 80054fc:	bf00      	nop
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	e000ed00 	.word	0xe000ed00

0800550c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005510:	4b04      	ldr	r3, [pc, #16]	@ (8005524 <__NVIC_GetPriorityGrouping+0x18>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	0a1b      	lsrs	r3, r3, #8
 8005516:	f003 0307 	and.w	r3, r3, #7
}
 800551a:	4618      	mov	r0, r3
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	e000ed00 	.word	0xe000ed00

08005528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	4603      	mov	r3, r0
 8005530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005536:	2b00      	cmp	r3, #0
 8005538:	db0b      	blt.n	8005552 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800553a:	79fb      	ldrb	r3, [r7, #7]
 800553c:	f003 021f 	and.w	r2, r3, #31
 8005540:	4907      	ldr	r1, [pc, #28]	@ (8005560 <__NVIC_EnableIRQ+0x38>)
 8005542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005546:	095b      	lsrs	r3, r3, #5
 8005548:	2001      	movs	r0, #1
 800554a:	fa00 f202 	lsl.w	r2, r0, r2
 800554e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	e000e100 	.word	0xe000e100

08005564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	4603      	mov	r3, r0
 800556c:	6039      	str	r1, [r7, #0]
 800556e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005574:	2b00      	cmp	r3, #0
 8005576:	db0a      	blt.n	800558e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	b2da      	uxtb	r2, r3
 800557c:	490c      	ldr	r1, [pc, #48]	@ (80055b0 <__NVIC_SetPriority+0x4c>)
 800557e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005582:	0112      	lsls	r2, r2, #4
 8005584:	b2d2      	uxtb	r2, r2
 8005586:	440b      	add	r3, r1
 8005588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800558c:	e00a      	b.n	80055a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	b2da      	uxtb	r2, r3
 8005592:	4908      	ldr	r1, [pc, #32]	@ (80055b4 <__NVIC_SetPriority+0x50>)
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	3b04      	subs	r3, #4
 800559c:	0112      	lsls	r2, r2, #4
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	440b      	add	r3, r1
 80055a2:	761a      	strb	r2, [r3, #24]
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	e000e100 	.word	0xe000e100
 80055b4:	e000ed00 	.word	0xe000ed00

080055b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b089      	sub	sp, #36	@ 0x24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f1c3 0307 	rsb	r3, r3, #7
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	bf28      	it	cs
 80055d6:	2304      	movcs	r3, #4
 80055d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	3304      	adds	r3, #4
 80055de:	2b06      	cmp	r3, #6
 80055e0:	d902      	bls.n	80055e8 <NVIC_EncodePriority+0x30>
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	3b03      	subs	r3, #3
 80055e6:	e000      	b.n	80055ea <NVIC_EncodePriority+0x32>
 80055e8:	2300      	movs	r3, #0
 80055ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	fa02 f303 	lsl.w	r3, r2, r3
 80055f6:	43da      	mvns	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	401a      	ands	r2, r3
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005600:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	fa01 f303 	lsl.w	r3, r1, r3
 800560a:	43d9      	mvns	r1, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005610:	4313      	orrs	r3, r2
         );
}
 8005612:	4618      	mov	r0, r3
 8005614:	3724      	adds	r7, #36	@ 0x24
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
	...

08005620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3b01      	subs	r3, #1
 800562c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005630:	d301      	bcc.n	8005636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005632:	2301      	movs	r3, #1
 8005634:	e00f      	b.n	8005656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005636:	4a0a      	ldr	r2, [pc, #40]	@ (8005660 <SysTick_Config+0x40>)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3b01      	subs	r3, #1
 800563c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800563e:	210f      	movs	r1, #15
 8005640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005644:	f7ff ff8e 	bl	8005564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005648:	4b05      	ldr	r3, [pc, #20]	@ (8005660 <SysTick_Config+0x40>)
 800564a:	2200      	movs	r2, #0
 800564c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800564e:	4b04      	ldr	r3, [pc, #16]	@ (8005660 <SysTick_Config+0x40>)
 8005650:	2207      	movs	r2, #7
 8005652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	e000e010 	.word	0xe000e010

08005664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff ff29 	bl	80054c4 <__NVIC_SetPriorityGrouping>
}
 8005672:	bf00      	nop
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800567a:	b580      	push	{r7, lr}
 800567c:	b086      	sub	sp, #24
 800567e:	af00      	add	r7, sp, #0
 8005680:	4603      	mov	r3, r0
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	607a      	str	r2, [r7, #4]
 8005686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800568c:	f7ff ff3e 	bl	800550c <__NVIC_GetPriorityGrouping>
 8005690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	6978      	ldr	r0, [r7, #20]
 8005698:	f7ff ff8e 	bl	80055b8 <NVIC_EncodePriority>
 800569c:	4602      	mov	r2, r0
 800569e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056a2:	4611      	mov	r1, r2
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff ff5d 	bl	8005564 <__NVIC_SetPriority>
}
 80056aa:	bf00      	nop
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b082      	sub	sp, #8
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	4603      	mov	r3, r0
 80056ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff ff31 	bl	8005528 <__NVIC_EnableIRQ>
}
 80056c6:	bf00      	nop
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7ff ffa2 	bl	8005620 <SysTick_Config>
 80056dc:	4603      	mov	r3, r0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80056f4:	f7ff f878 	bl	80047e8 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e099      	b.n	8005838 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0201 	bic.w	r2, r2, #1
 8005722:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005724:	e00f      	b.n	8005746 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005726:	f7ff f85f 	bl	80047e8 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b05      	cmp	r3, #5
 8005732:	d908      	bls.n	8005746 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2220      	movs	r2, #32
 8005738:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2203      	movs	r2, #3
 800573e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e078      	b.n	8005838 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e8      	bne.n	8005726 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4b38      	ldr	r3, [pc, #224]	@ (8005840 <HAL_DMA_Init+0x158>)
 8005760:	4013      	ands	r3, r2
 8005762:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005772:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800577e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800578a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	2b04      	cmp	r3, #4
 800579e:	d107      	bne.n	80057b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a8:	4313      	orrs	r3, r2
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f023 0307 	bic.w	r3, r3, #7
 80057c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d117      	bne.n	800580a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00e      	beq.n	800580a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fb01 	bl	8005df4 <DMA_CheckFifoParam>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d008      	beq.n	800580a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2240      	movs	r2, #64	@ 0x40
 80057fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005806:	2301      	movs	r3, #1
 8005808:	e016      	b.n	8005838 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fab8 	bl	8005d88 <DMA_CalcBaseAndBitshift>
 8005818:	4603      	mov	r3, r0
 800581a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005820:	223f      	movs	r2, #63	@ 0x3f
 8005822:	409a      	lsls	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	f010803f 	.word	0xf010803f

08005844 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
 8005850:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800585a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005862:	2b01      	cmp	r3, #1
 8005864:	d101      	bne.n	800586a <HAL_DMA_Start_IT+0x26>
 8005866:	2302      	movs	r3, #2
 8005868:	e040      	b.n	80058ec <HAL_DMA_Start_IT+0xa8>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b01      	cmp	r3, #1
 800587c:	d12f      	bne.n	80058de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2202      	movs	r2, #2
 8005882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 fa4a 	bl	8005d2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800589c:	223f      	movs	r2, #63	@ 0x3f
 800589e:	409a      	lsls	r2, r3
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0216 	orr.w	r2, r2, #22
 80058b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d007      	beq.n	80058cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0208 	orr.w	r2, r2, #8
 80058ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	e005      	b.n	80058ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80058e6:	2302      	movs	r3, #2
 80058e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80058ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005900:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005902:	f7fe ff71 	bl	80047e8 <HAL_GetTick>
 8005906:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d008      	beq.n	8005926 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2280      	movs	r2, #128	@ 0x80
 8005918:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e052      	b.n	80059cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0216 	bic.w	r2, r2, #22
 8005934:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	695a      	ldr	r2, [r3, #20]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005944:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d103      	bne.n	8005956 <HAL_DMA_Abort+0x62>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005952:	2b00      	cmp	r3, #0
 8005954:	d007      	beq.n	8005966 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0208 	bic.w	r2, r2, #8
 8005964:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0201 	bic.w	r2, r2, #1
 8005974:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005976:	e013      	b.n	80059a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005978:	f7fe ff36 	bl	80047e8 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b05      	cmp	r3, #5
 8005984:	d90c      	bls.n	80059a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2220      	movs	r2, #32
 800598a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2203      	movs	r2, #3
 8005990:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e015      	b.n	80059cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1e4      	bne.n	8005978 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b2:	223f      	movs	r2, #63	@ 0x3f
 80059b4:	409a      	lsls	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d004      	beq.n	80059f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2280      	movs	r2, #128	@ 0x80
 80059ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e00c      	b.n	8005a0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2205      	movs	r2, #5
 80059f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0201 	bic.w	r2, r2, #1
 8005a08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a24:	4b8e      	ldr	r3, [pc, #568]	@ (8005c60 <HAL_DMA_IRQHandler+0x248>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a8e      	ldr	r2, [pc, #568]	@ (8005c64 <HAL_DMA_IRQHandler+0x24c>)
 8005a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2e:	0a9b      	lsrs	r3, r3, #10
 8005a30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a42:	2208      	movs	r2, #8
 8005a44:	409a      	lsls	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d01a      	beq.n	8005a84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d013      	beq.n	8005a84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0204 	bic.w	r2, r2, #4
 8005a6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a70:	2208      	movs	r2, #8
 8005a72:	409a      	lsls	r2, r3
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a7c:	f043 0201 	orr.w	r2, r3, #1
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a88:	2201      	movs	r2, #1
 8005a8a:	409a      	lsls	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d012      	beq.n	8005aba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00b      	beq.n	8005aba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	409a      	lsls	r2, r3
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab2:	f043 0202 	orr.w	r2, r3, #2
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005abe:	2204      	movs	r2, #4
 8005ac0:	409a      	lsls	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d012      	beq.n	8005af0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00b      	beq.n	8005af0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005adc:	2204      	movs	r2, #4
 8005ade:	409a      	lsls	r2, r3
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae8:	f043 0204 	orr.w	r2, r3, #4
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005af4:	2210      	movs	r2, #16
 8005af6:	409a      	lsls	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d043      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0308 	and.w	r3, r3, #8
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d03c      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b12:	2210      	movs	r2, #16
 8005b14:	409a      	lsls	r2, r3
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d018      	beq.n	8005b5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d108      	bne.n	8005b48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d024      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	4798      	blx	r3
 8005b46:	e01f      	b.n	8005b88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01b      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	4798      	blx	r3
 8005b58:	e016      	b.n	8005b88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d107      	bne.n	8005b78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0208 	bic.w	r2, r2, #8
 8005b76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	409a      	lsls	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4013      	ands	r3, r2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 808f 	beq.w	8005cb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8087 	beq.w	8005cb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bae:	2220      	movs	r2, #32
 8005bb0:	409a      	lsls	r2, r3
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b05      	cmp	r3, #5
 8005bc0:	d136      	bne.n	8005c30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0216 	bic.w	r2, r2, #22
 8005bd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695a      	ldr	r2, [r3, #20]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005be0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d103      	bne.n	8005bf2 <HAL_DMA_IRQHandler+0x1da>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d007      	beq.n	8005c02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 0208 	bic.w	r2, r2, #8
 8005c00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c06:	223f      	movs	r2, #63	@ 0x3f
 8005c08:	409a      	lsls	r2, r3
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d07e      	beq.n	8005d24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	4798      	blx	r3
        }
        return;
 8005c2e:	e079      	b.n	8005d24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01d      	beq.n	8005c7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10d      	bne.n	8005c68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d031      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	4798      	blx	r3
 8005c5c:	e02c      	b.n	8005cb8 <HAL_DMA_IRQHandler+0x2a0>
 8005c5e:	bf00      	nop
 8005c60:	2000001c 	.word	0x2000001c
 8005c64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d023      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	4798      	blx	r3
 8005c78:	e01e      	b.n	8005cb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10f      	bne.n	8005ca8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0210 	bic.w	r2, r2, #16
 8005c96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d032      	beq.n	8005d26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d022      	beq.n	8005d12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2205      	movs	r2, #5
 8005cd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0201 	bic.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	60bb      	str	r3, [r7, #8]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d307      	bcc.n	8005d00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f2      	bne.n	8005ce4 <HAL_DMA_IRQHandler+0x2cc>
 8005cfe:	e000      	b.n	8005d02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005d00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d005      	beq.n	8005d26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	4798      	blx	r3
 8005d22:	e000      	b.n	8005d26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005d24:	bf00      	nop
    }
  }
}
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
 8005d38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005d48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	2b40      	cmp	r3, #64	@ 0x40
 8005d58:	d108      	bne.n	8005d6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005d6a:	e007      	b.n	8005d7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	60da      	str	r2, [r3, #12]
}
 8005d7c:	bf00      	nop
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	3b10      	subs	r3, #16
 8005d98:	4a14      	ldr	r2, [pc, #80]	@ (8005dec <DMA_CalcBaseAndBitshift+0x64>)
 8005d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9e:	091b      	lsrs	r3, r3, #4
 8005da0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005da2:	4a13      	ldr	r2, [pc, #76]	@ (8005df0 <DMA_CalcBaseAndBitshift+0x68>)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d909      	bls.n	8005dca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005dbe:	f023 0303 	bic.w	r3, r3, #3
 8005dc2:	1d1a      	adds	r2, r3, #4
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	659a      	str	r2, [r3, #88]	@ 0x58
 8005dc8:	e007      	b.n	8005dda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005dd2:	f023 0303 	bic.w	r3, r3, #3
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	aaaaaaab 	.word	0xaaaaaaab
 8005df0:	0800db68 	.word	0x0800db68

08005df4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d11f      	bne.n	8005e4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d856      	bhi.n	8005ec2 <DMA_CheckFifoParam+0xce>
 8005e14:	a201      	add	r2, pc, #4	@ (adr r2, 8005e1c <DMA_CheckFifoParam+0x28>)
 8005e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1a:	bf00      	nop
 8005e1c:	08005e2d 	.word	0x08005e2d
 8005e20:	08005e3f 	.word	0x08005e3f
 8005e24:	08005e2d 	.word	0x08005e2d
 8005e28:	08005ec3 	.word	0x08005ec3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d046      	beq.n	8005ec6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e3c:	e043      	b.n	8005ec6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005e46:	d140      	bne.n	8005eca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e4c:	e03d      	b.n	8005eca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e56:	d121      	bne.n	8005e9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d837      	bhi.n	8005ece <DMA_CheckFifoParam+0xda>
 8005e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e64 <DMA_CheckFifoParam+0x70>)
 8005e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e64:	08005e75 	.word	0x08005e75
 8005e68:	08005e7b 	.word	0x08005e7b
 8005e6c:	08005e75 	.word	0x08005e75
 8005e70:	08005e8d 	.word	0x08005e8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	73fb      	strb	r3, [r7, #15]
      break;
 8005e78:	e030      	b.n	8005edc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d025      	beq.n	8005ed2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e8a:	e022      	b.n	8005ed2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e90:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005e94:	d11f      	bne.n	8005ed6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e9a:	e01c      	b.n	8005ed6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d903      	bls.n	8005eaa <DMA_CheckFifoParam+0xb6>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b03      	cmp	r3, #3
 8005ea6:	d003      	beq.n	8005eb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005ea8:	e018      	b.n	8005edc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	73fb      	strb	r3, [r7, #15]
      break;
 8005eae:	e015      	b.n	8005edc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00e      	beq.n	8005eda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8005ec0:	e00b      	b.n	8005eda <DMA_CheckFifoParam+0xe6>
      break;
 8005ec2:	bf00      	nop
 8005ec4:	e00a      	b.n	8005edc <DMA_CheckFifoParam+0xe8>
      break;
 8005ec6:	bf00      	nop
 8005ec8:	e008      	b.n	8005edc <DMA_CheckFifoParam+0xe8>
      break;
 8005eca:	bf00      	nop
 8005ecc:	e006      	b.n	8005edc <DMA_CheckFifoParam+0xe8>
      break;
 8005ece:	bf00      	nop
 8005ed0:	e004      	b.n	8005edc <DMA_CheckFifoParam+0xe8>
      break;
 8005ed2:	bf00      	nop
 8005ed4:	e002      	b.n	8005edc <DMA_CheckFifoParam+0xe8>
      break;   
 8005ed6:	bf00      	nop
 8005ed8:	e000      	b.n	8005edc <DMA_CheckFifoParam+0xe8>
      break;
 8005eda:	bf00      	nop
    }
  } 
  
  return status; 
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop

08005eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b089      	sub	sp, #36	@ 0x24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f02:	2300      	movs	r3, #0
 8005f04:	61fb      	str	r3, [r7, #28]
 8005f06:	e16b      	b.n	80061e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f08:	2201      	movs	r2, #1
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	f040 815a 	bne.w	80061da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d005      	beq.n	8005f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d130      	bne.n	8005fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	2203      	movs	r2, #3
 8005f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4e:	43db      	mvns	r3, r3
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	4013      	ands	r3, r2
 8005f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f74:	2201      	movs	r2, #1
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	4013      	ands	r3, r2
 8005f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	091b      	lsrs	r3, r3, #4
 8005f8a:	f003 0201 	and.w	r2, r3, #1
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	fa02 f303 	lsl.w	r3, r2, r3
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f003 0303 	and.w	r3, r3, #3
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d017      	beq.n	8005fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	2203      	movs	r2, #3
 8005fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbc:	43db      	mvns	r3, r3
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f003 0303 	and.w	r3, r3, #3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d123      	bne.n	8006030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	08da      	lsrs	r2, r3, #3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3208      	adds	r2, #8
 8005ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	220f      	movs	r2, #15
 8006000:	fa02 f303 	lsl.w	r3, r2, r3
 8006004:	43db      	mvns	r3, r3
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	4013      	ands	r3, r2
 800600a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	691a      	ldr	r2, [r3, #16]
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	fa02 f303 	lsl.w	r3, r2, r3
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	4313      	orrs	r3, r2
 8006020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	08da      	lsrs	r2, r3, #3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3208      	adds	r2, #8
 800602a:	69b9      	ldr	r1, [r7, #24]
 800602c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	2203      	movs	r2, #3
 800603c:	fa02 f303 	lsl.w	r3, r2, r3
 8006040:	43db      	mvns	r3, r3
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	4013      	ands	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f003 0203 	and.w	r2, r3, #3
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	fa02 f303 	lsl.w	r3, r2, r3
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	4313      	orrs	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 80b4 	beq.w	80061da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	4b60      	ldr	r3, [pc, #384]	@ (80061f8 <HAL_GPIO_Init+0x30c>)
 8006078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607a:	4a5f      	ldr	r2, [pc, #380]	@ (80061f8 <HAL_GPIO_Init+0x30c>)
 800607c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006080:	6453      	str	r3, [r2, #68]	@ 0x44
 8006082:	4b5d      	ldr	r3, [pc, #372]	@ (80061f8 <HAL_GPIO_Init+0x30c>)
 8006084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800608e:	4a5b      	ldr	r2, [pc, #364]	@ (80061fc <HAL_GPIO_Init+0x310>)
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	089b      	lsrs	r3, r3, #2
 8006094:	3302      	adds	r3, #2
 8006096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800609a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	220f      	movs	r2, #15
 80060a6:	fa02 f303 	lsl.w	r3, r2, r3
 80060aa:	43db      	mvns	r3, r3
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	4013      	ands	r3, r2
 80060b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a52      	ldr	r2, [pc, #328]	@ (8006200 <HAL_GPIO_Init+0x314>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d02b      	beq.n	8006112 <HAL_GPIO_Init+0x226>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a51      	ldr	r2, [pc, #324]	@ (8006204 <HAL_GPIO_Init+0x318>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d025      	beq.n	800610e <HAL_GPIO_Init+0x222>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a50      	ldr	r2, [pc, #320]	@ (8006208 <HAL_GPIO_Init+0x31c>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d01f      	beq.n	800610a <HAL_GPIO_Init+0x21e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a4f      	ldr	r2, [pc, #316]	@ (800620c <HAL_GPIO_Init+0x320>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d019      	beq.n	8006106 <HAL_GPIO_Init+0x21a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a4e      	ldr	r2, [pc, #312]	@ (8006210 <HAL_GPIO_Init+0x324>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d013      	beq.n	8006102 <HAL_GPIO_Init+0x216>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a4d      	ldr	r2, [pc, #308]	@ (8006214 <HAL_GPIO_Init+0x328>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d00d      	beq.n	80060fe <HAL_GPIO_Init+0x212>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a4c      	ldr	r2, [pc, #304]	@ (8006218 <HAL_GPIO_Init+0x32c>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d007      	beq.n	80060fa <HAL_GPIO_Init+0x20e>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a4b      	ldr	r2, [pc, #300]	@ (800621c <HAL_GPIO_Init+0x330>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d101      	bne.n	80060f6 <HAL_GPIO_Init+0x20a>
 80060f2:	2307      	movs	r3, #7
 80060f4:	e00e      	b.n	8006114 <HAL_GPIO_Init+0x228>
 80060f6:	2308      	movs	r3, #8
 80060f8:	e00c      	b.n	8006114 <HAL_GPIO_Init+0x228>
 80060fa:	2306      	movs	r3, #6
 80060fc:	e00a      	b.n	8006114 <HAL_GPIO_Init+0x228>
 80060fe:	2305      	movs	r3, #5
 8006100:	e008      	b.n	8006114 <HAL_GPIO_Init+0x228>
 8006102:	2304      	movs	r3, #4
 8006104:	e006      	b.n	8006114 <HAL_GPIO_Init+0x228>
 8006106:	2303      	movs	r3, #3
 8006108:	e004      	b.n	8006114 <HAL_GPIO_Init+0x228>
 800610a:	2302      	movs	r3, #2
 800610c:	e002      	b.n	8006114 <HAL_GPIO_Init+0x228>
 800610e:	2301      	movs	r3, #1
 8006110:	e000      	b.n	8006114 <HAL_GPIO_Init+0x228>
 8006112:	2300      	movs	r3, #0
 8006114:	69fa      	ldr	r2, [r7, #28]
 8006116:	f002 0203 	and.w	r2, r2, #3
 800611a:	0092      	lsls	r2, r2, #2
 800611c:	4093      	lsls	r3, r2
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	4313      	orrs	r3, r2
 8006122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006124:	4935      	ldr	r1, [pc, #212]	@ (80061fc <HAL_GPIO_Init+0x310>)
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	089b      	lsrs	r3, r3, #2
 800612a:	3302      	adds	r3, #2
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006132:	4b3b      	ldr	r3, [pc, #236]	@ (8006220 <HAL_GPIO_Init+0x334>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	43db      	mvns	r3, r3
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	4013      	ands	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4313      	orrs	r3, r2
 8006154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006156:	4a32      	ldr	r2, [pc, #200]	@ (8006220 <HAL_GPIO_Init+0x334>)
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800615c:	4b30      	ldr	r3, [pc, #192]	@ (8006220 <HAL_GPIO_Init+0x334>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	43db      	mvns	r3, r3
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	4013      	ands	r3, r2
 800616a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006180:	4a27      	ldr	r2, [pc, #156]	@ (8006220 <HAL_GPIO_Init+0x334>)
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006186:	4b26      	ldr	r3, [pc, #152]	@ (8006220 <HAL_GPIO_Init+0x334>)
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	43db      	mvns	r3, r3
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	4013      	ands	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006220 <HAL_GPIO_Init+0x334>)
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006220 <HAL_GPIO_Init+0x334>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	43db      	mvns	r3, r3
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	4013      	ands	r3, r2
 80061be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061d4:	4a12      	ldr	r2, [pc, #72]	@ (8006220 <HAL_GPIO_Init+0x334>)
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	3301      	adds	r3, #1
 80061de:	61fb      	str	r3, [r7, #28]
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	2b0f      	cmp	r3, #15
 80061e4:	f67f ae90 	bls.w	8005f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80061e8:	bf00      	nop
 80061ea:	bf00      	nop
 80061ec:	3724      	adds	r7, #36	@ 0x24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40023800 	.word	0x40023800
 80061fc:	40013800 	.word	0x40013800
 8006200:	40020000 	.word	0x40020000
 8006204:	40020400 	.word	0x40020400
 8006208:	40020800 	.word	0x40020800
 800620c:	40020c00 	.word	0x40020c00
 8006210:	40021000 	.word	0x40021000
 8006214:	40021400 	.word	0x40021400
 8006218:	40021800 	.word	0x40021800
 800621c:	40021c00 	.word	0x40021c00
 8006220:	40013c00 	.word	0x40013c00

08006224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	807b      	strh	r3, [r7, #2]
 8006230:	4613      	mov	r3, r2
 8006232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006234:	787b      	ldrb	r3, [r7, #1]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800623a:	887a      	ldrh	r2, [r7, #2]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006240:	e003      	b.n	800624a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006242:	887b      	ldrh	r3, [r7, #2]
 8006244:	041a      	lsls	r2, r3, #16
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	619a      	str	r2, [r3, #24]
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
	...

08006258 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	4603      	mov	r3, r0
 8006260:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006262:	4b08      	ldr	r3, [pc, #32]	@ (8006284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006264:	695a      	ldr	r2, [r3, #20]
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	4013      	ands	r3, r2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d006      	beq.n	800627c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800626e:	4a05      	ldr	r2, [pc, #20]	@ (8006284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006270:	88fb      	ldrh	r3, [r7, #6]
 8006272:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006274:	88fb      	ldrh	r3, [r7, #6]
 8006276:	4618      	mov	r0, r3
 8006278:	f7fb fd5c 	bl	8001d34 <HAL_GPIO_EXTI_Callback>
  }
}
 800627c:	bf00      	nop
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	40013c00 	.word	0x40013c00

08006288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e12b      	b.n	80064f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d106      	bne.n	80062b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fd fc2c 	bl	8003b0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2224      	movs	r2, #36	@ 0x24
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0201 	bic.w	r2, r2, #1
 80062ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80062ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80062ec:	f001 f9f6 	bl	80076dc <HAL_RCC_GetPCLK1Freq>
 80062f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	4a81      	ldr	r2, [pc, #516]	@ (80064fc <HAL_I2C_Init+0x274>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d807      	bhi.n	800630c <HAL_I2C_Init+0x84>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4a80      	ldr	r2, [pc, #512]	@ (8006500 <HAL_I2C_Init+0x278>)
 8006300:	4293      	cmp	r3, r2
 8006302:	bf94      	ite	ls
 8006304:	2301      	movls	r3, #1
 8006306:	2300      	movhi	r3, #0
 8006308:	b2db      	uxtb	r3, r3
 800630a:	e006      	b.n	800631a <HAL_I2C_Init+0x92>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4a7d      	ldr	r2, [pc, #500]	@ (8006504 <HAL_I2C_Init+0x27c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	bf94      	ite	ls
 8006314:	2301      	movls	r3, #1
 8006316:	2300      	movhi	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e0e7      	b.n	80064f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4a78      	ldr	r2, [pc, #480]	@ (8006508 <HAL_I2C_Init+0x280>)
 8006326:	fba2 2303 	umull	r2, r3, r2, r3
 800632a:	0c9b      	lsrs	r3, r3, #18
 800632c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	430a      	orrs	r2, r1
 8006340:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	4a6a      	ldr	r2, [pc, #424]	@ (80064fc <HAL_I2C_Init+0x274>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d802      	bhi.n	800635c <HAL_I2C_Init+0xd4>
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	3301      	adds	r3, #1
 800635a:	e009      	b.n	8006370 <HAL_I2C_Init+0xe8>
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006362:	fb02 f303 	mul.w	r3, r2, r3
 8006366:	4a69      	ldr	r2, [pc, #420]	@ (800650c <HAL_I2C_Init+0x284>)
 8006368:	fba2 2303 	umull	r2, r3, r2, r3
 800636c:	099b      	lsrs	r3, r3, #6
 800636e:	3301      	adds	r3, #1
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6812      	ldr	r2, [r2, #0]
 8006374:	430b      	orrs	r3, r1
 8006376:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006382:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	495c      	ldr	r1, [pc, #368]	@ (80064fc <HAL_I2C_Init+0x274>)
 800638c:	428b      	cmp	r3, r1
 800638e:	d819      	bhi.n	80063c4 <HAL_I2C_Init+0x13c>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	1e59      	subs	r1, r3, #1
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	fbb1 f3f3 	udiv	r3, r1, r3
 800639e:	1c59      	adds	r1, r3, #1
 80063a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80063a4:	400b      	ands	r3, r1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <HAL_I2C_Init+0x138>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	1e59      	subs	r1, r3, #1
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80063b8:	3301      	adds	r3, #1
 80063ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063be:	e051      	b.n	8006464 <HAL_I2C_Init+0x1dc>
 80063c0:	2304      	movs	r3, #4
 80063c2:	e04f      	b.n	8006464 <HAL_I2C_Init+0x1dc>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d111      	bne.n	80063f0 <HAL_I2C_Init+0x168>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	1e58      	subs	r0, r3, #1
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6859      	ldr	r1, [r3, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	005b      	lsls	r3, r3, #1
 80063d8:	440b      	add	r3, r1
 80063da:	fbb0 f3f3 	udiv	r3, r0, r3
 80063de:	3301      	adds	r3, #1
 80063e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	bf0c      	ite	eq
 80063e8:	2301      	moveq	r3, #1
 80063ea:	2300      	movne	r3, #0
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	e012      	b.n	8006416 <HAL_I2C_Init+0x18e>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	1e58      	subs	r0, r3, #1
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6859      	ldr	r1, [r3, #4]
 80063f8:	460b      	mov	r3, r1
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	440b      	add	r3, r1
 80063fe:	0099      	lsls	r1, r3, #2
 8006400:	440b      	add	r3, r1
 8006402:	fbb0 f3f3 	udiv	r3, r0, r3
 8006406:	3301      	adds	r3, #1
 8006408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800640c:	2b00      	cmp	r3, #0
 800640e:	bf0c      	ite	eq
 8006410:	2301      	moveq	r3, #1
 8006412:	2300      	movne	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <HAL_I2C_Init+0x196>
 800641a:	2301      	movs	r3, #1
 800641c:	e022      	b.n	8006464 <HAL_I2C_Init+0x1dc>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10e      	bne.n	8006444 <HAL_I2C_Init+0x1bc>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	1e58      	subs	r0, r3, #1
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6859      	ldr	r1, [r3, #4]
 800642e:	460b      	mov	r3, r1
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	440b      	add	r3, r1
 8006434:	fbb0 f3f3 	udiv	r3, r0, r3
 8006438:	3301      	adds	r3, #1
 800643a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800643e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006442:	e00f      	b.n	8006464 <HAL_I2C_Init+0x1dc>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	1e58      	subs	r0, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6859      	ldr	r1, [r3, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	440b      	add	r3, r1
 8006452:	0099      	lsls	r1, r3, #2
 8006454:	440b      	add	r3, r1
 8006456:	fbb0 f3f3 	udiv	r3, r0, r3
 800645a:	3301      	adds	r3, #1
 800645c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006460:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	6809      	ldr	r1, [r1, #0]
 8006468:	4313      	orrs	r3, r2
 800646a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69da      	ldr	r2, [r3, #28]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006492:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6911      	ldr	r1, [r2, #16]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	68d2      	ldr	r2, [r2, #12]
 800649e:	4311      	orrs	r1, r2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6812      	ldr	r2, [r2, #0]
 80064a4:	430b      	orrs	r3, r1
 80064a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	695a      	ldr	r2, [r3, #20]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	431a      	orrs	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f042 0201 	orr.w	r2, r2, #1
 80064d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2220      	movs	r2, #32
 80064de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	000186a0 	.word	0x000186a0
 8006500:	001e847f 	.word	0x001e847f
 8006504:	003d08ff 	.word	0x003d08ff
 8006508:	431bde83 	.word	0x431bde83
 800650c:	10624dd3 	.word	0x10624dd3

08006510 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b08c      	sub	sp, #48	@ 0x30
 8006514:	af02      	add	r7, sp, #8
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	4608      	mov	r0, r1
 800651a:	4611      	mov	r1, r2
 800651c:	461a      	mov	r2, r3
 800651e:	4603      	mov	r3, r0
 8006520:	817b      	strh	r3, [r7, #10]
 8006522:	460b      	mov	r3, r1
 8006524:	813b      	strh	r3, [r7, #8]
 8006526:	4613      	mov	r3, r2
 8006528:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800652a:	f7fe f95d 	bl	80047e8 <HAL_GetTick>
 800652e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b20      	cmp	r3, #32
 800653a:	f040 8208 	bne.w	800694e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	2319      	movs	r3, #25
 8006544:	2201      	movs	r2, #1
 8006546:	497b      	ldr	r1, [pc, #492]	@ (8006734 <HAL_I2C_Mem_Read+0x224>)
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 faef 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006554:	2302      	movs	r3, #2
 8006556:	e1fb      	b.n	8006950 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_I2C_Mem_Read+0x56>
 8006562:	2302      	movs	r3, #2
 8006564:	e1f4      	b.n	8006950 <HAL_I2C_Mem_Read+0x440>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b01      	cmp	r3, #1
 800657a:	d007      	beq.n	800658c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0201 	orr.w	r2, r2, #1
 800658a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800659a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2222      	movs	r2, #34	@ 0x22
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2240      	movs	r2, #64	@ 0x40
 80065a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80065bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4a5b      	ldr	r2, [pc, #364]	@ (8006738 <HAL_I2C_Mem_Read+0x228>)
 80065cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065ce:	88f8      	ldrh	r0, [r7, #6]
 80065d0:	893a      	ldrh	r2, [r7, #8]
 80065d2:	8979      	ldrh	r1, [r7, #10]
 80065d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	4603      	mov	r3, r0
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 f9bc 	bl	800695c <I2C_RequestMemoryRead>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e1b0      	b.n	8006950 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d113      	bne.n	800661e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065f6:	2300      	movs	r3, #0
 80065f8:	623b      	str	r3, [r7, #32]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	623b      	str	r3, [r7, #32]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	623b      	str	r3, [r7, #32]
 800660a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	e184      	b.n	8006928 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006622:	2b01      	cmp	r3, #1
 8006624:	d11b      	bne.n	800665e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006634:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006636:	2300      	movs	r3, #0
 8006638:	61fb      	str	r3, [r7, #28]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	61fb      	str	r3, [r7, #28]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	61fb      	str	r3, [r7, #28]
 800664a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	e164      	b.n	8006928 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006662:	2b02      	cmp	r3, #2
 8006664:	d11b      	bne.n	800669e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006674:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006684:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006686:	2300      	movs	r3, #0
 8006688:	61bb      	str	r3, [r7, #24]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	61bb      	str	r3, [r7, #24]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	e144      	b.n	8006928 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	695b      	ldr	r3, [r3, #20]
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	617b      	str	r3, [r7, #20]
 80066b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80066b4:	e138      	b.n	8006928 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	f200 80f1 	bhi.w	80068a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d123      	bne.n	8006710 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 fb44 	bl	8006d5a <I2C_WaitOnRXNEFlagUntilTimeout>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e139      	b.n	8006950 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691a      	ldr	r2, [r3, #16]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006704:	b29b      	uxth	r3, r3
 8006706:	3b01      	subs	r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800670e:	e10b      	b.n	8006928 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006714:	2b02      	cmp	r3, #2
 8006716:	d14e      	bne.n	80067b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671e:	2200      	movs	r2, #0
 8006720:	4906      	ldr	r1, [pc, #24]	@ (800673c <HAL_I2C_Mem_Read+0x22c>)
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 fa02 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d008      	beq.n	8006740 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e10e      	b.n	8006950 <HAL_I2C_Mem_Read+0x440>
 8006732:	bf00      	nop
 8006734:	00100002 	.word	0x00100002
 8006738:	ffff0000 	.word	0xffff0000
 800673c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800674e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691a      	ldr	r2, [r3, #16]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800676c:	3b01      	subs	r3, #1
 800676e:	b29a      	uxth	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006778:	b29b      	uxth	r3, r3
 800677a:	3b01      	subs	r3, #1
 800677c:	b29a      	uxth	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	691a      	ldr	r2, [r3, #16]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678c:	b2d2      	uxtb	r2, r2
 800678e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800679e:	3b01      	subs	r3, #1
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80067b4:	e0b8      	b.n	8006928 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067bc:	2200      	movs	r2, #0
 80067be:	4966      	ldr	r1, [pc, #408]	@ (8006958 <HAL_I2C_Mem_Read+0x448>)
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 f9b3 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e0bf      	b.n	8006950 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691a      	ldr	r2, [r3, #16]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006808:	b29b      	uxth	r3, r3
 800680a:	3b01      	subs	r3, #1
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006818:	2200      	movs	r2, #0
 800681a:	494f      	ldr	r1, [pc, #316]	@ (8006958 <HAL_I2C_Mem_Read+0x448>)
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 f985 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e091      	b.n	8006950 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800683a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	691a      	ldr	r2, [r3, #16]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006864:	b29b      	uxth	r3, r3
 8006866:	3b01      	subs	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	691a      	ldr	r2, [r3, #16]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800688a:	3b01      	subs	r3, #1
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006896:	b29b      	uxth	r3, r3
 8006898:	3b01      	subs	r3, #1
 800689a:	b29a      	uxth	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80068a0:	e042      	b.n	8006928 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f000 fa57 	bl	8006d5a <I2C_WaitOnRXNEFlagUntilTimeout>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e04c      	b.n	8006950 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	691a      	ldr	r2, [r3, #16]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068de:	b29b      	uxth	r3, r3
 80068e0:	3b01      	subs	r3, #1
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	f003 0304 	and.w	r3, r3, #4
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d118      	bne.n	8006928 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	691a      	ldr	r2, [r3, #16]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006900:	b2d2      	uxtb	r2, r2
 8006902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006912:	3b01      	subs	r3, #1
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800691e:	b29b      	uxth	r3, r3
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800692c:	2b00      	cmp	r3, #0
 800692e:	f47f aec2 	bne.w	80066b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2220      	movs	r2, #32
 8006936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	e000      	b.n	8006950 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800694e:	2302      	movs	r3, #2
  }
}
 8006950:	4618      	mov	r0, r3
 8006952:	3728      	adds	r7, #40	@ 0x28
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	00010004 	.word	0x00010004

0800695c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af02      	add	r7, sp, #8
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	4608      	mov	r0, r1
 8006966:	4611      	mov	r1, r2
 8006968:	461a      	mov	r2, r3
 800696a:	4603      	mov	r3, r0
 800696c:	817b      	strh	r3, [r7, #10]
 800696e:	460b      	mov	r3, r1
 8006970:	813b      	strh	r3, [r7, #8]
 8006972:	4613      	mov	r3, r2
 8006974:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006984:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006994:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	2200      	movs	r2, #0
 800699e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 f8c2 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00d      	beq.n	80069ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069bc:	d103      	bne.n	80069c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e0aa      	b.n	8006b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069ca:	897b      	ldrh	r3, [r7, #10]
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	461a      	mov	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80069d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069dc:	6a3a      	ldr	r2, [r7, #32]
 80069de:	4952      	ldr	r1, [pc, #328]	@ (8006b28 <I2C_RequestMemoryRead+0x1cc>)
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f8fa 	bl	8006bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e097      	b.n	8006b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069f0:	2300      	movs	r3, #0
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a08:	6a39      	ldr	r1, [r7, #32]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f964 	bl	8006cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00d      	beq.n	8006a32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d107      	bne.n	8006a2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e076      	b.n	8006b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a32:	88fb      	ldrh	r3, [r7, #6]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d105      	bne.n	8006a44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a38:	893b      	ldrh	r3, [r7, #8]
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	611a      	str	r2, [r3, #16]
 8006a42:	e021      	b.n	8006a88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a44:	893b      	ldrh	r3, [r7, #8]
 8006a46:	0a1b      	lsrs	r3, r3, #8
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a54:	6a39      	ldr	r1, [r7, #32]
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 f93e 	bl	8006cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00d      	beq.n	8006a7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d107      	bne.n	8006a7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e050      	b.n	8006b20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a7e:	893b      	ldrh	r3, [r7, #8]
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a8a:	6a39      	ldr	r1, [r7, #32]
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f923 	bl	8006cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00d      	beq.n	8006ab4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d107      	bne.n	8006ab0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006aae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e035      	b.n	8006b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ac2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 f82b 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00d      	beq.n	8006af8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aea:	d103      	bne.n	8006af4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006af2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e013      	b.n	8006b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006af8:	897b      	ldrh	r3, [r7, #10]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	f043 0301 	orr.w	r3, r3, #1
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0a:	6a3a      	ldr	r2, [r7, #32]
 8006b0c:	4906      	ldr	r1, [pc, #24]	@ (8006b28 <I2C_RequestMemoryRead+0x1cc>)
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f000 f863 	bl	8006bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e000      	b.n	8006b20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	00010002 	.word	0x00010002

08006b2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b3c:	e025      	b.n	8006b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b44:	d021      	beq.n	8006b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b46:	f7fd fe4f 	bl	80047e8 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d302      	bcc.n	8006b5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d116      	bne.n	8006b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b76:	f043 0220 	orr.w	r2, r3, #32
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e023      	b.n	8006bd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	0c1b      	lsrs	r3, r3, #16
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d10d      	bne.n	8006bb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	43da      	mvns	r2, r3
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	bf0c      	ite	eq
 8006ba6:	2301      	moveq	r3, #1
 8006ba8:	2300      	movne	r3, #0
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	461a      	mov	r2, r3
 8006bae:	e00c      	b.n	8006bca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	43da      	mvns	r2, r3
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bf0c      	ite	eq
 8006bc2:	2301      	moveq	r3, #1
 8006bc4:	2300      	movne	r3, #0
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	461a      	mov	r2, r3
 8006bca:	79fb      	ldrb	r3, [r7, #7]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d0b6      	beq.n	8006b3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	607a      	str	r2, [r7, #4]
 8006be6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006be8:	e051      	b.n	8006c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bf8:	d123      	bne.n	8006c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2e:	f043 0204 	orr.w	r2, r3, #4
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e046      	b.n	8006cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c48:	d021      	beq.n	8006c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c4a:	f7fd fdcd 	bl	80047e8 <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d302      	bcc.n	8006c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d116      	bne.n	8006c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7a:	f043 0220 	orr.w	r2, r3, #32
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e020      	b.n	8006cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	0c1b      	lsrs	r3, r3, #16
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d10c      	bne.n	8006cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	43da      	mvns	r2, r3
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	bf14      	ite	ne
 8006caa:	2301      	movne	r3, #1
 8006cac:	2300      	moveq	r3, #0
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	e00b      	b.n	8006cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	43da      	mvns	r2, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	bf14      	ite	ne
 8006cc4:	2301      	movne	r3, #1
 8006cc6:	2300      	moveq	r3, #0
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d18d      	bne.n	8006bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ce4:	e02d      	b.n	8006d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 f88d 	bl	8006e06 <I2C_IsAcknowledgeFailed>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e02d      	b.n	8006d52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cfc:	d021      	beq.n	8006d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cfe:	f7fd fd73 	bl	80047e8 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d302      	bcc.n	8006d14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d116      	bne.n	8006d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2e:	f043 0220 	orr.w	r2, r3, #32
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e007      	b.n	8006d52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d4c:	2b80      	cmp	r3, #128	@ 0x80
 8006d4e:	d1ca      	bne.n	8006ce6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d66:	e042      	b.n	8006dee <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	f003 0310 	and.w	r3, r3, #16
 8006d72:	2b10      	cmp	r3, #16
 8006d74:	d119      	bne.n	8006daa <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f06f 0210 	mvn.w	r2, #16
 8006d7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e029      	b.n	8006dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006daa:	f7fd fd1d 	bl	80047e8 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d302      	bcc.n	8006dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d116      	bne.n	8006dee <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dda:	f043 0220 	orr.w	r2, r3, #32
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e007      	b.n	8006dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006df8:	2b40      	cmp	r3, #64	@ 0x40
 8006dfa:	d1b5      	bne.n	8006d68 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e1c:	d11b      	bne.n	8006e56 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006e26:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e42:	f043 0204 	orr.w	r2, r3, #4
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e000      	b.n	8006e58 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e267      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d075      	beq.n	8006f6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e82:	4b88      	ldr	r3, [pc, #544]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f003 030c 	and.w	r3, r3, #12
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d00c      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e8e:	4b85      	ldr	r3, [pc, #532]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e96:	2b08      	cmp	r3, #8
 8006e98:	d112      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e9a:	4b82      	ldr	r3, [pc, #520]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ea2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ea6:	d10b      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ea8:	4b7e      	ldr	r3, [pc, #504]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d05b      	beq.n	8006f6c <HAL_RCC_OscConfig+0x108>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d157      	bne.n	8006f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e242      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ec8:	d106      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x74>
 8006eca:	4b76      	ldr	r3, [pc, #472]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a75      	ldr	r2, [pc, #468]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	e01d      	b.n	8006f14 <HAL_RCC_OscConfig+0xb0>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ee0:	d10c      	bne.n	8006efc <HAL_RCC_OscConfig+0x98>
 8006ee2:	4b70      	ldr	r3, [pc, #448]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a6f      	ldr	r2, [pc, #444]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006ee8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	4b6d      	ldr	r3, [pc, #436]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a6c      	ldr	r2, [pc, #432]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	e00b      	b.n	8006f14 <HAL_RCC_OscConfig+0xb0>
 8006efc:	4b69      	ldr	r3, [pc, #420]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a68      	ldr	r2, [pc, #416]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	4b66      	ldr	r3, [pc, #408]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a65      	ldr	r2, [pc, #404]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d013      	beq.n	8006f44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f1c:	f7fd fc64 	bl	80047e8 <HAL_GetTick>
 8006f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f22:	e008      	b.n	8006f36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f24:	f7fd fc60 	bl	80047e8 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b64      	cmp	r3, #100	@ 0x64
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e207      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f36:	4b5b      	ldr	r3, [pc, #364]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0f0      	beq.n	8006f24 <HAL_RCC_OscConfig+0xc0>
 8006f42:	e014      	b.n	8006f6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f44:	f7fd fc50 	bl	80047e8 <HAL_GetTick>
 8006f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f4c:	f7fd fc4c 	bl	80047e8 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b64      	cmp	r3, #100	@ 0x64
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e1f3      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f5e:	4b51      	ldr	r3, [pc, #324]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f0      	bne.n	8006f4c <HAL_RCC_OscConfig+0xe8>
 8006f6a:	e000      	b.n	8006f6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d063      	beq.n	8007042 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f003 030c 	and.w	r3, r3, #12
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00b      	beq.n	8006f9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f86:	4b47      	ldr	r3, [pc, #284]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f8e:	2b08      	cmp	r3, #8
 8006f90:	d11c      	bne.n	8006fcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f92:	4b44      	ldr	r3, [pc, #272]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d116      	bne.n	8006fcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f9e:	4b41      	ldr	r3, [pc, #260]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d005      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x152>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d001      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e1c7      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	4937      	ldr	r1, [pc, #220]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fca:	e03a      	b.n	8007042 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d020      	beq.n	8007016 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fd4:	4b34      	ldr	r3, [pc, #208]	@ (80070a8 <HAL_RCC_OscConfig+0x244>)
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fda:	f7fd fc05 	bl	80047e8 <HAL_GetTick>
 8006fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fe2:	f7fd fc01 	bl	80047e8 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e1a8      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0f0      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007000:	4b28      	ldr	r3, [pc, #160]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	00db      	lsls	r3, r3, #3
 800700e:	4925      	ldr	r1, [pc, #148]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8007010:	4313      	orrs	r3, r2
 8007012:	600b      	str	r3, [r1, #0]
 8007014:	e015      	b.n	8007042 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007016:	4b24      	ldr	r3, [pc, #144]	@ (80070a8 <HAL_RCC_OscConfig+0x244>)
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800701c:	f7fd fbe4 	bl	80047e8 <HAL_GetTick>
 8007020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007022:	e008      	b.n	8007036 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007024:	f7fd fbe0 	bl	80047e8 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e187      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007036:	4b1b      	ldr	r3, [pc, #108]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1f0      	bne.n	8007024 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0308 	and.w	r3, r3, #8
 800704a:	2b00      	cmp	r3, #0
 800704c:	d036      	beq.n	80070bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d016      	beq.n	8007084 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007056:	4b15      	ldr	r3, [pc, #84]	@ (80070ac <HAL_RCC_OscConfig+0x248>)
 8007058:	2201      	movs	r2, #1
 800705a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800705c:	f7fd fbc4 	bl	80047e8 <HAL_GetTick>
 8007060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007062:	e008      	b.n	8007076 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007064:	f7fd fbc0 	bl	80047e8 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e167      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007076:	4b0b      	ldr	r3, [pc, #44]	@ (80070a4 <HAL_RCC_OscConfig+0x240>)
 8007078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0f0      	beq.n	8007064 <HAL_RCC_OscConfig+0x200>
 8007082:	e01b      	b.n	80070bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007084:	4b09      	ldr	r3, [pc, #36]	@ (80070ac <HAL_RCC_OscConfig+0x248>)
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800708a:	f7fd fbad 	bl	80047e8 <HAL_GetTick>
 800708e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007090:	e00e      	b.n	80070b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007092:	f7fd fba9 	bl	80047e8 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	2b02      	cmp	r3, #2
 800709e:	d907      	bls.n	80070b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e150      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
 80070a4:	40023800 	.word	0x40023800
 80070a8:	42470000 	.word	0x42470000
 80070ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070b0:	4b88      	ldr	r3, [pc, #544]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 80070b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1ea      	bne.n	8007092 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 8097 	beq.w	80071f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070ca:	2300      	movs	r3, #0
 80070cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070ce:	4b81      	ldr	r3, [pc, #516]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 80070d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10f      	bne.n	80070fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070da:	2300      	movs	r3, #0
 80070dc:	60bb      	str	r3, [r7, #8]
 80070de:	4b7d      	ldr	r3, [pc, #500]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 80070e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e2:	4a7c      	ldr	r2, [pc, #496]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 80070e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80070ea:	4b7a      	ldr	r3, [pc, #488]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 80070ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070f2:	60bb      	str	r3, [r7, #8]
 80070f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070f6:	2301      	movs	r3, #1
 80070f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070fa:	4b77      	ldr	r3, [pc, #476]	@ (80072d8 <HAL_RCC_OscConfig+0x474>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007102:	2b00      	cmp	r3, #0
 8007104:	d118      	bne.n	8007138 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007106:	4b74      	ldr	r3, [pc, #464]	@ (80072d8 <HAL_RCC_OscConfig+0x474>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a73      	ldr	r2, [pc, #460]	@ (80072d8 <HAL_RCC_OscConfig+0x474>)
 800710c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007112:	f7fd fb69 	bl	80047e8 <HAL_GetTick>
 8007116:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007118:	e008      	b.n	800712c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800711a:	f7fd fb65 	bl	80047e8 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d901      	bls.n	800712c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e10c      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800712c:	4b6a      	ldr	r3, [pc, #424]	@ (80072d8 <HAL_RCC_OscConfig+0x474>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0f0      	beq.n	800711a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d106      	bne.n	800714e <HAL_RCC_OscConfig+0x2ea>
 8007140:	4b64      	ldr	r3, [pc, #400]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007144:	4a63      	ldr	r2, [pc, #396]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007146:	f043 0301 	orr.w	r3, r3, #1
 800714a:	6713      	str	r3, [r2, #112]	@ 0x70
 800714c:	e01c      	b.n	8007188 <HAL_RCC_OscConfig+0x324>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	2b05      	cmp	r3, #5
 8007154:	d10c      	bne.n	8007170 <HAL_RCC_OscConfig+0x30c>
 8007156:	4b5f      	ldr	r3, [pc, #380]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800715a:	4a5e      	ldr	r2, [pc, #376]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 800715c:	f043 0304 	orr.w	r3, r3, #4
 8007160:	6713      	str	r3, [r2, #112]	@ 0x70
 8007162:	4b5c      	ldr	r3, [pc, #368]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007166:	4a5b      	ldr	r2, [pc, #364]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007168:	f043 0301 	orr.w	r3, r3, #1
 800716c:	6713      	str	r3, [r2, #112]	@ 0x70
 800716e:	e00b      	b.n	8007188 <HAL_RCC_OscConfig+0x324>
 8007170:	4b58      	ldr	r3, [pc, #352]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007174:	4a57      	ldr	r2, [pc, #348]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007176:	f023 0301 	bic.w	r3, r3, #1
 800717a:	6713      	str	r3, [r2, #112]	@ 0x70
 800717c:	4b55      	ldr	r3, [pc, #340]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 800717e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007180:	4a54      	ldr	r2, [pc, #336]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007182:	f023 0304 	bic.w	r3, r3, #4
 8007186:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d015      	beq.n	80071bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007190:	f7fd fb2a 	bl	80047e8 <HAL_GetTick>
 8007194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007196:	e00a      	b.n	80071ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007198:	f7fd fb26 	bl	80047e8 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d901      	bls.n	80071ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e0cb      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071ae:	4b49      	ldr	r3, [pc, #292]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 80071b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d0ee      	beq.n	8007198 <HAL_RCC_OscConfig+0x334>
 80071ba:	e014      	b.n	80071e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071bc:	f7fd fb14 	bl	80047e8 <HAL_GetTick>
 80071c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071c2:	e00a      	b.n	80071da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071c4:	f7fd fb10 	bl	80047e8 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e0b5      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071da:	4b3e      	ldr	r3, [pc, #248]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 80071dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1ee      	bne.n	80071c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d105      	bne.n	80071f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071ec:	4b39      	ldr	r3, [pc, #228]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 80071ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f0:	4a38      	ldr	r2, [pc, #224]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 80071f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 80a1 	beq.w	8007344 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007202:	4b34      	ldr	r3, [pc, #208]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f003 030c 	and.w	r3, r3, #12
 800720a:	2b08      	cmp	r3, #8
 800720c:	d05c      	beq.n	80072c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d141      	bne.n	800729a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007216:	4b31      	ldr	r3, [pc, #196]	@ (80072dc <HAL_RCC_OscConfig+0x478>)
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800721c:	f7fd fae4 	bl	80047e8 <HAL_GetTick>
 8007220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007222:	e008      	b.n	8007236 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007224:	f7fd fae0 	bl	80047e8 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	2b02      	cmp	r3, #2
 8007230:	d901      	bls.n	8007236 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e087      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007236:	4b27      	ldr	r3, [pc, #156]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1f0      	bne.n	8007224 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69da      	ldr	r2, [r3, #28]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	431a      	orrs	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007250:	019b      	lsls	r3, r3, #6
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007258:	085b      	lsrs	r3, r3, #1
 800725a:	3b01      	subs	r3, #1
 800725c:	041b      	lsls	r3, r3, #16
 800725e:	431a      	orrs	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007264:	061b      	lsls	r3, r3, #24
 8007266:	491b      	ldr	r1, [pc, #108]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007268:	4313      	orrs	r3, r2
 800726a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800726c:	4b1b      	ldr	r3, [pc, #108]	@ (80072dc <HAL_RCC_OscConfig+0x478>)
 800726e:	2201      	movs	r2, #1
 8007270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007272:	f7fd fab9 	bl	80047e8 <HAL_GetTick>
 8007276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007278:	e008      	b.n	800728c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800727a:	f7fd fab5 	bl	80047e8 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	2b02      	cmp	r3, #2
 8007286:	d901      	bls.n	800728c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e05c      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800728c:	4b11      	ldr	r3, [pc, #68]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d0f0      	beq.n	800727a <HAL_RCC_OscConfig+0x416>
 8007298:	e054      	b.n	8007344 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800729a:	4b10      	ldr	r3, [pc, #64]	@ (80072dc <HAL_RCC_OscConfig+0x478>)
 800729c:	2200      	movs	r2, #0
 800729e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072a0:	f7fd faa2 	bl	80047e8 <HAL_GetTick>
 80072a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072a6:	e008      	b.n	80072ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072a8:	f7fd fa9e 	bl	80047e8 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d901      	bls.n	80072ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e045      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072ba:	4b06      	ldr	r3, [pc, #24]	@ (80072d4 <HAL_RCC_OscConfig+0x470>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1f0      	bne.n	80072a8 <HAL_RCC_OscConfig+0x444>
 80072c6:	e03d      	b.n	8007344 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d107      	bne.n	80072e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e038      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
 80072d4:	40023800 	.word	0x40023800
 80072d8:	40007000 	.word	0x40007000
 80072dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072e0:	4b1b      	ldr	r3, [pc, #108]	@ (8007350 <HAL_RCC_OscConfig+0x4ec>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d028      	beq.n	8007340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d121      	bne.n	8007340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007306:	429a      	cmp	r2, r3
 8007308:	d11a      	bne.n	8007340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007310:	4013      	ands	r3, r2
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007318:	4293      	cmp	r3, r2
 800731a:	d111      	bne.n	8007340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007326:	085b      	lsrs	r3, r3, #1
 8007328:	3b01      	subs	r3, #1
 800732a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800732c:	429a      	cmp	r2, r3
 800732e:	d107      	bne.n	8007340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800733c:	429a      	cmp	r2, r3
 800733e:	d001      	beq.n	8007344 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e000      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	40023800 	.word	0x40023800

08007354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e0cc      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007368:	4b68      	ldr	r3, [pc, #416]	@ (800750c <HAL_RCC_ClockConfig+0x1b8>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	429a      	cmp	r2, r3
 8007374:	d90c      	bls.n	8007390 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007376:	4b65      	ldr	r3, [pc, #404]	@ (800750c <HAL_RCC_ClockConfig+0x1b8>)
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	b2d2      	uxtb	r2, r2
 800737c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800737e:	4b63      	ldr	r3, [pc, #396]	@ (800750c <HAL_RCC_ClockConfig+0x1b8>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0307 	and.w	r3, r3, #7
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	429a      	cmp	r2, r3
 800738a:	d001      	beq.n	8007390 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e0b8      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d020      	beq.n	80073de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d005      	beq.n	80073b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073a8:	4b59      	ldr	r3, [pc, #356]	@ (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	4a58      	ldr	r2, [pc, #352]	@ (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80073b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0308 	and.w	r3, r3, #8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d005      	beq.n	80073cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073c0:	4b53      	ldr	r3, [pc, #332]	@ (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	4a52      	ldr	r2, [pc, #328]	@ (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80073ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073cc:	4b50      	ldr	r3, [pc, #320]	@ (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	494d      	ldr	r1, [pc, #308]	@ (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d044      	beq.n	8007474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d107      	bne.n	8007402 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073f2:	4b47      	ldr	r3, [pc, #284]	@ (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d119      	bne.n	8007432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e07f      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	2b02      	cmp	r3, #2
 8007408:	d003      	beq.n	8007412 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800740e:	2b03      	cmp	r3, #3
 8007410:	d107      	bne.n	8007422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007412:	4b3f      	ldr	r3, [pc, #252]	@ (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d109      	bne.n	8007432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e06f      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007422:	4b3b      	ldr	r3, [pc, #236]	@ (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e067      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007432:	4b37      	ldr	r3, [pc, #220]	@ (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f023 0203 	bic.w	r2, r3, #3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	4934      	ldr	r1, [pc, #208]	@ (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 8007440:	4313      	orrs	r3, r2
 8007442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007444:	f7fd f9d0 	bl	80047e8 <HAL_GetTick>
 8007448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800744a:	e00a      	b.n	8007462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800744c:	f7fd f9cc 	bl	80047e8 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800745a:	4293      	cmp	r3, r2
 800745c:	d901      	bls.n	8007462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e04f      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007462:	4b2b      	ldr	r3, [pc, #172]	@ (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f003 020c 	and.w	r2, r3, #12
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	429a      	cmp	r2, r3
 8007472:	d1eb      	bne.n	800744c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007474:	4b25      	ldr	r3, [pc, #148]	@ (800750c <HAL_RCC_ClockConfig+0x1b8>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0307 	and.w	r3, r3, #7
 800747c:	683a      	ldr	r2, [r7, #0]
 800747e:	429a      	cmp	r2, r3
 8007480:	d20c      	bcs.n	800749c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007482:	4b22      	ldr	r3, [pc, #136]	@ (800750c <HAL_RCC_ClockConfig+0x1b8>)
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800748a:	4b20      	ldr	r3, [pc, #128]	@ (800750c <HAL_RCC_ClockConfig+0x1b8>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0307 	and.w	r3, r3, #7
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	429a      	cmp	r2, r3
 8007496:	d001      	beq.n	800749c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e032      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0304 	and.w	r3, r3, #4
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d008      	beq.n	80074ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074a8:	4b19      	ldr	r3, [pc, #100]	@ (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	4916      	ldr	r1, [pc, #88]	@ (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0308 	and.w	r3, r3, #8
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d009      	beq.n	80074da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074c6:	4b12      	ldr	r3, [pc, #72]	@ (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	00db      	lsls	r3, r3, #3
 80074d4:	490e      	ldr	r1, [pc, #56]	@ (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80074da:	f000 f82d 	bl	8007538 <HAL_RCC_GetSysClockFreq>
 80074de:	4602      	mov	r2, r0
 80074e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	091b      	lsrs	r3, r3, #4
 80074e6:	f003 030f 	and.w	r3, r3, #15
 80074ea:	490a      	ldr	r1, [pc, #40]	@ (8007514 <HAL_RCC_ClockConfig+0x1c0>)
 80074ec:	5ccb      	ldrb	r3, [r1, r3]
 80074ee:	fa22 f303 	lsr.w	r3, r2, r3
 80074f2:	4a09      	ldr	r2, [pc, #36]	@ (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 80074f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80074f6:	4b09      	ldr	r3, [pc, #36]	@ (800751c <HAL_RCC_ClockConfig+0x1c8>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fd f930 	bl	8004760 <HAL_InitTick>

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	40023c00 	.word	0x40023c00
 8007510:	40023800 	.word	0x40023800
 8007514:	0800db50 	.word	0x0800db50
 8007518:	2000001c 	.word	0x2000001c
 800751c:	20000020 	.word	0x20000020

08007520 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007520:	b480      	push	{r7}
 8007522:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007524:	4b03      	ldr	r3, [pc, #12]	@ (8007534 <HAL_RCC_EnableCSS+0x14>)
 8007526:	2201      	movs	r2, #1
 8007528:	601a      	str	r2, [r3, #0]
}
 800752a:	bf00      	nop
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	4247004c 	.word	0x4247004c

08007538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800753c:	b090      	sub	sp, #64	@ 0x40
 800753e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007540:	2300      	movs	r3, #0
 8007542:	637b      	str	r3, [r7, #52]	@ 0x34
 8007544:	2300      	movs	r3, #0
 8007546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007548:	2300      	movs	r3, #0
 800754a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007550:	4b59      	ldr	r3, [pc, #356]	@ (80076b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f003 030c 	and.w	r3, r3, #12
 8007558:	2b08      	cmp	r3, #8
 800755a:	d00d      	beq.n	8007578 <HAL_RCC_GetSysClockFreq+0x40>
 800755c:	2b08      	cmp	r3, #8
 800755e:	f200 80a1 	bhi.w	80076a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <HAL_RCC_GetSysClockFreq+0x34>
 8007566:	2b04      	cmp	r3, #4
 8007568:	d003      	beq.n	8007572 <HAL_RCC_GetSysClockFreq+0x3a>
 800756a:	e09b      	b.n	80076a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800756c:	4b53      	ldr	r3, [pc, #332]	@ (80076bc <HAL_RCC_GetSysClockFreq+0x184>)
 800756e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8007570:	e09b      	b.n	80076aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007572:	4b53      	ldr	r3, [pc, #332]	@ (80076c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007574:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007576:	e098      	b.n	80076aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007578:	4b4f      	ldr	r3, [pc, #316]	@ (80076b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007580:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007582:	4b4d      	ldr	r3, [pc, #308]	@ (80076b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d028      	beq.n	80075e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800758e:	4b4a      	ldr	r3, [pc, #296]	@ (80076b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	099b      	lsrs	r3, r3, #6
 8007594:	2200      	movs	r2, #0
 8007596:	623b      	str	r3, [r7, #32]
 8007598:	627a      	str	r2, [r7, #36]	@ 0x24
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80075a0:	2100      	movs	r1, #0
 80075a2:	4b47      	ldr	r3, [pc, #284]	@ (80076c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80075a4:	fb03 f201 	mul.w	r2, r3, r1
 80075a8:	2300      	movs	r3, #0
 80075aa:	fb00 f303 	mul.w	r3, r0, r3
 80075ae:	4413      	add	r3, r2
 80075b0:	4a43      	ldr	r2, [pc, #268]	@ (80076c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80075b2:	fba0 1202 	umull	r1, r2, r0, r2
 80075b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075b8:	460a      	mov	r2, r1
 80075ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80075bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075be:	4413      	add	r3, r2
 80075c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c4:	2200      	movs	r2, #0
 80075c6:	61bb      	str	r3, [r7, #24]
 80075c8:	61fa      	str	r2, [r7, #28]
 80075ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80075d2:	f7f9 fa4b 	bl	8000a6c <__aeabi_uldivmod>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	4613      	mov	r3, r2
 80075dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075de:	e053      	b.n	8007688 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075e0:	4b35      	ldr	r3, [pc, #212]	@ (80076b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	099b      	lsrs	r3, r3, #6
 80075e6:	2200      	movs	r2, #0
 80075e8:	613b      	str	r3, [r7, #16]
 80075ea:	617a      	str	r2, [r7, #20]
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80075f2:	f04f 0b00 	mov.w	fp, #0
 80075f6:	4652      	mov	r2, sl
 80075f8:	465b      	mov	r3, fp
 80075fa:	f04f 0000 	mov.w	r0, #0
 80075fe:	f04f 0100 	mov.w	r1, #0
 8007602:	0159      	lsls	r1, r3, #5
 8007604:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007608:	0150      	lsls	r0, r2, #5
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	ebb2 080a 	subs.w	r8, r2, sl
 8007612:	eb63 090b 	sbc.w	r9, r3, fp
 8007616:	f04f 0200 	mov.w	r2, #0
 800761a:	f04f 0300 	mov.w	r3, #0
 800761e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007622:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007626:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800762a:	ebb2 0408 	subs.w	r4, r2, r8
 800762e:	eb63 0509 	sbc.w	r5, r3, r9
 8007632:	f04f 0200 	mov.w	r2, #0
 8007636:	f04f 0300 	mov.w	r3, #0
 800763a:	00eb      	lsls	r3, r5, #3
 800763c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007640:	00e2      	lsls	r2, r4, #3
 8007642:	4614      	mov	r4, r2
 8007644:	461d      	mov	r5, r3
 8007646:	eb14 030a 	adds.w	r3, r4, sl
 800764a:	603b      	str	r3, [r7, #0]
 800764c:	eb45 030b 	adc.w	r3, r5, fp
 8007650:	607b      	str	r3, [r7, #4]
 8007652:	f04f 0200 	mov.w	r2, #0
 8007656:	f04f 0300 	mov.w	r3, #0
 800765a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800765e:	4629      	mov	r1, r5
 8007660:	028b      	lsls	r3, r1, #10
 8007662:	4621      	mov	r1, r4
 8007664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007668:	4621      	mov	r1, r4
 800766a:	028a      	lsls	r2, r1, #10
 800766c:	4610      	mov	r0, r2
 800766e:	4619      	mov	r1, r3
 8007670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007672:	2200      	movs	r2, #0
 8007674:	60bb      	str	r3, [r7, #8]
 8007676:	60fa      	str	r2, [r7, #12]
 8007678:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800767c:	f7f9 f9f6 	bl	8000a6c <__aeabi_uldivmod>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4613      	mov	r3, r2
 8007686:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007688:	4b0b      	ldr	r3, [pc, #44]	@ (80076b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	0c1b      	lsrs	r3, r3, #16
 800768e:	f003 0303 	and.w	r3, r3, #3
 8007692:	3301      	adds	r3, #1
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8007698:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800769a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769c:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80076a2:	e002      	b.n	80076aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076a4:	4b05      	ldr	r3, [pc, #20]	@ (80076bc <HAL_RCC_GetSysClockFreq+0x184>)
 80076a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80076a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3740      	adds	r7, #64	@ 0x40
 80076b0:	46bd      	mov	sp, r7
 80076b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076b6:	bf00      	nop
 80076b8:	40023800 	.word	0x40023800
 80076bc:	00f42400 	.word	0x00f42400
 80076c0:	00b71b00 	.word	0x00b71b00

080076c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076c4:	b480      	push	{r7}
 80076c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076c8:	4b03      	ldr	r3, [pc, #12]	@ (80076d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80076ca:	681b      	ldr	r3, [r3, #0]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	2000001c 	.word	0x2000001c

080076dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80076e0:	f7ff fff0 	bl	80076c4 <HAL_RCC_GetHCLKFreq>
 80076e4:	4602      	mov	r2, r0
 80076e6:	4b05      	ldr	r3, [pc, #20]	@ (80076fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	0a9b      	lsrs	r3, r3, #10
 80076ec:	f003 0307 	and.w	r3, r3, #7
 80076f0:	4903      	ldr	r1, [pc, #12]	@ (8007700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076f2:	5ccb      	ldrb	r3, [r1, r3]
 80076f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	40023800 	.word	0x40023800
 8007700:	0800db60 	.word	0x0800db60

08007704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007708:	f7ff ffdc 	bl	80076c4 <HAL_RCC_GetHCLKFreq>
 800770c:	4602      	mov	r2, r0
 800770e:	4b05      	ldr	r3, [pc, #20]	@ (8007724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	0b5b      	lsrs	r3, r3, #13
 8007714:	f003 0307 	and.w	r3, r3, #7
 8007718:	4903      	ldr	r1, [pc, #12]	@ (8007728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800771a:	5ccb      	ldrb	r3, [r1, r3]
 800771c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007720:	4618      	mov	r0, r3
 8007722:	bd80      	pop	{r7, pc}
 8007724:	40023800 	.word	0x40023800
 8007728:	0800db60 	.word	0x0800db60

0800772c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007730:	4b06      	ldr	r3, [pc, #24]	@ (800774c <HAL_RCC_NMI_IRQHandler+0x20>)
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007738:	2b80      	cmp	r3, #128	@ 0x80
 800773a:	d104      	bne.n	8007746 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800773c:	f000 f80a 	bl	8007754 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007740:	4b03      	ldr	r3, [pc, #12]	@ (8007750 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007742:	2280      	movs	r2, #128	@ 0x80
 8007744:	701a      	strb	r2, [r3, #0]
  }
}
 8007746:	bf00      	nop
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	40023800 	.word	0x40023800
 8007750:	4002380e 	.word	0x4002380e

08007754 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007754:	b480      	push	{r7}
 8007756:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8007758:	bf00      	nop
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b082      	sub	sp, #8
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e07b      	b.n	800786c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007778:	2b00      	cmp	r3, #0
 800777a:	d108      	bne.n	800778e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007784:	d009      	beq.n	800779a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	61da      	str	r2, [r3, #28]
 800778c:	e005      	b.n	800779a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d106      	bne.n	80077ba <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7fc fa13 	bl	8003be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2202      	movs	r2, #2
 80077be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	431a      	orrs	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	431a      	orrs	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800780a:	431a      	orrs	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007814:	431a      	orrs	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800781e:	ea42 0103 	orr.w	r1, r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007826:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	0c1b      	lsrs	r3, r3, #16
 8007838:	f003 0104 	and.w	r1, r3, #4
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007840:	f003 0210 	and.w	r2, r3, #16
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	69da      	ldr	r2, [r3, #28]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800785a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b08c      	sub	sp, #48	@ 0x30
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007882:	2301      	movs	r3, #1
 8007884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007892:	2b01      	cmp	r3, #1
 8007894:	d101      	bne.n	800789a <HAL_SPI_TransmitReceive+0x26>
 8007896:	2302      	movs	r3, #2
 8007898:	e18a      	b.n	8007bb0 <HAL_SPI_TransmitReceive+0x33c>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078a2:	f7fc ffa1 	bl	80047e8 <HAL_GetTick>
 80078a6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80078b8:	887b      	ldrh	r3, [r7, #2]
 80078ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d00f      	beq.n	80078e4 <HAL_SPI_TransmitReceive+0x70>
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078ca:	d107      	bne.n	80078dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d103      	bne.n	80078dc <HAL_SPI_TransmitReceive+0x68>
 80078d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80078d8:	2b04      	cmp	r3, #4
 80078da:	d003      	beq.n	80078e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80078dc:	2302      	movs	r3, #2
 80078de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80078e2:	e15b      	b.n	8007b9c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d005      	beq.n	80078f6 <HAL_SPI_TransmitReceive+0x82>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <HAL_SPI_TransmitReceive+0x82>
 80078f0:	887b      	ldrh	r3, [r7, #2]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d103      	bne.n	80078fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80078fc:	e14e      	b.n	8007b9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b04      	cmp	r3, #4
 8007908:	d003      	beq.n	8007912 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2205      	movs	r2, #5
 800790e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	887a      	ldrh	r2, [r7, #2]
 8007922:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	887a      	ldrh	r2, [r7, #2]
 8007928:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	887a      	ldrh	r2, [r7, #2]
 8007934:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	887a      	ldrh	r2, [r7, #2]
 800793a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007952:	2b40      	cmp	r3, #64	@ 0x40
 8007954:	d007      	beq.n	8007966 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007964:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800796e:	d178      	bne.n	8007a62 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <HAL_SPI_TransmitReceive+0x10a>
 8007978:	8b7b      	ldrh	r3, [r7, #26]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d166      	bne.n	8007a4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007982:	881a      	ldrh	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800798e:	1c9a      	adds	r2, r3, #2
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007998:	b29b      	uxth	r3, r3
 800799a:	3b01      	subs	r3, #1
 800799c:	b29a      	uxth	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079a2:	e053      	b.n	8007a4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f003 0302 	and.w	r3, r3, #2
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d11b      	bne.n	80079ea <HAL_SPI_TransmitReceive+0x176>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d016      	beq.n	80079ea <HAL_SPI_TransmitReceive+0x176>
 80079bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d113      	bne.n	80079ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c6:	881a      	ldrh	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d2:	1c9a      	adds	r2, r3, #2
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079dc:	b29b      	uxth	r3, r3
 80079de:	3b01      	subs	r3, #1
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079e6:	2300      	movs	r3, #0
 80079e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d119      	bne.n	8007a2c <HAL_SPI_TransmitReceive+0x1b8>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d014      	beq.n	8007a2c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68da      	ldr	r2, [r3, #12]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a0c:	b292      	uxth	r2, r2
 8007a0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a14:	1c9a      	adds	r2, r3, #2
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	3b01      	subs	r3, #1
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a2c:	f7fc fedc 	bl	80047e8 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d807      	bhi.n	8007a4c <HAL_SPI_TransmitReceive+0x1d8>
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a42:	d003      	beq.n	8007a4c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007a4a:	e0a7      	b.n	8007b9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1a6      	bne.n	80079a4 <HAL_SPI_TransmitReceive+0x130>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1a1      	bne.n	80079a4 <HAL_SPI_TransmitReceive+0x130>
 8007a60:	e07c      	b.n	8007b5c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <HAL_SPI_TransmitReceive+0x1fc>
 8007a6a:	8b7b      	ldrh	r3, [r7, #26]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d16b      	bne.n	8007b48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	330c      	adds	r3, #12
 8007a7a:	7812      	ldrb	r2, [r2, #0]
 8007a7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a82:	1c5a      	adds	r2, r3, #1
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a96:	e057      	b.n	8007b48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d11c      	bne.n	8007ae0 <HAL_SPI_TransmitReceive+0x26c>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d017      	beq.n	8007ae0 <HAL_SPI_TransmitReceive+0x26c>
 8007ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d114      	bne.n	8007ae0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	330c      	adds	r3, #12
 8007ac0:	7812      	ldrb	r2, [r2, #0]
 8007ac2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007adc:	2300      	movs	r3, #0
 8007ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d119      	bne.n	8007b22 <HAL_SPI_TransmitReceive+0x2ae>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d014      	beq.n	8007b22 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b02:	b2d2      	uxtb	r2, r2
 8007b04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	3b01      	subs	r3, #1
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b22:	f7fc fe61 	bl	80047e8 <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d803      	bhi.n	8007b3a <HAL_SPI_TransmitReceive+0x2c6>
 8007b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b38:	d102      	bne.n	8007b40 <HAL_SPI_TransmitReceive+0x2cc>
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d103      	bne.n	8007b48 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007b46:	e029      	b.n	8007b9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1a2      	bne.n	8007a98 <HAL_SPI_TransmitReceive+0x224>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d19d      	bne.n	8007a98 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b5e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 f8b1 	bl	8007cc8 <SPI_EndRxTxTransaction>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d006      	beq.n	8007b7a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2220      	movs	r2, #32
 8007b76:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007b78:	e010      	b.n	8007b9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10b      	bne.n	8007b9a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b82:	2300      	movs	r3, #0
 8007b84:	617b      	str	r3, [r7, #20]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	617b      	str	r3, [r7, #20]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	617b      	str	r3, [r7, #20]
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	e000      	b.n	8007b9c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007b9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007bac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3730      	adds	r7, #48	@ 0x30
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b088      	sub	sp, #32
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	603b      	str	r3, [r7, #0]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007bc8:	f7fc fe0e 	bl	80047e8 <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd0:	1a9b      	subs	r3, r3, r2
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007bd8:	f7fc fe06 	bl	80047e8 <HAL_GetTick>
 8007bdc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007bde:	4b39      	ldr	r3, [pc, #228]	@ (8007cc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	015b      	lsls	r3, r3, #5
 8007be4:	0d1b      	lsrs	r3, r3, #20
 8007be6:	69fa      	ldr	r2, [r7, #28]
 8007be8:	fb02 f303 	mul.w	r3, r2, r3
 8007bec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bee:	e054      	b.n	8007c9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bf6:	d050      	beq.n	8007c9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007bf8:	f7fc fdf6 	bl	80047e8 <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	69fa      	ldr	r2, [r7, #28]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d902      	bls.n	8007c0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d13d      	bne.n	8007c8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c26:	d111      	bne.n	8007c4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c30:	d004      	beq.n	8007c3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c3a:	d107      	bne.n	8007c4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c54:	d10f      	bne.n	8007c76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	e017      	b.n	8007cba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	bf0c      	ite	eq
 8007caa:	2301      	moveq	r3, #1
 8007cac:	2300      	movne	r3, #0
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d19b      	bne.n	8007bf0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3720      	adds	r7, #32
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	2000001c 	.word	0x2000001c

08007cc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b088      	sub	sp, #32
 8007ccc:	af02      	add	r7, sp, #8
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8007d44 <SPI_EndRxTxTransaction+0x7c>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8007d48 <SPI_EndRxTxTransaction+0x80>)
 8007cda:	fba2 2303 	umull	r2, r3, r2, r3
 8007cde:	0d5b      	lsrs	r3, r3, #21
 8007ce0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007ce4:	fb02 f303 	mul.w	r3, r2, r3
 8007ce8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cf2:	d112      	bne.n	8007d1a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	2180      	movs	r1, #128	@ 0x80
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f7ff ff5a 	bl	8007bb8 <SPI_WaitFlagStateUntilTimeout>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d016      	beq.n	8007d38 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d0e:	f043 0220 	orr.w	r2, r3, #32
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e00f      	b.n	8007d3a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00a      	beq.n	8007d36 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d30:	2b80      	cmp	r3, #128	@ 0x80
 8007d32:	d0f2      	beq.n	8007d1a <SPI_EndRxTxTransaction+0x52>
 8007d34:	e000      	b.n	8007d38 <SPI_EndRxTxTransaction+0x70>
        break;
 8007d36:	bf00      	nop
  }

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3718      	adds	r7, #24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	2000001c 	.word	0x2000001c
 8007d48:	165e9f81 	.word	0x165e9f81

08007d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e041      	b.n	8007de2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d106      	bne.n	8007d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7fc f850 	bl	8003e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	3304      	adds	r3, #4
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	f000 fba8 	bl	80084e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
	...

08007dec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d001      	beq.n	8007e04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e046      	b.n	8007e92 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a23      	ldr	r2, [pc, #140]	@ (8007ea0 <HAL_TIM_Base_Start+0xb4>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d022      	beq.n	8007e5c <HAL_TIM_Base_Start+0x70>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e1e:	d01d      	beq.n	8007e5c <HAL_TIM_Base_Start+0x70>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a1f      	ldr	r2, [pc, #124]	@ (8007ea4 <HAL_TIM_Base_Start+0xb8>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d018      	beq.n	8007e5c <HAL_TIM_Base_Start+0x70>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ea8 <HAL_TIM_Base_Start+0xbc>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d013      	beq.n	8007e5c <HAL_TIM_Base_Start+0x70>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a1c      	ldr	r2, [pc, #112]	@ (8007eac <HAL_TIM_Base_Start+0xc0>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d00e      	beq.n	8007e5c <HAL_TIM_Base_Start+0x70>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a1b      	ldr	r2, [pc, #108]	@ (8007eb0 <HAL_TIM_Base_Start+0xc4>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d009      	beq.n	8007e5c <HAL_TIM_Base_Start+0x70>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a19      	ldr	r2, [pc, #100]	@ (8007eb4 <HAL_TIM_Base_Start+0xc8>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d004      	beq.n	8007e5c <HAL_TIM_Base_Start+0x70>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a18      	ldr	r2, [pc, #96]	@ (8007eb8 <HAL_TIM_Base_Start+0xcc>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d111      	bne.n	8007e80 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f003 0307 	and.w	r3, r3, #7
 8007e66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b06      	cmp	r3, #6
 8007e6c:	d010      	beq.n	8007e90 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f042 0201 	orr.w	r2, r2, #1
 8007e7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e7e:	e007      	b.n	8007e90 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f042 0201 	orr.w	r2, r2, #1
 8007e8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	40010000 	.word	0x40010000
 8007ea4:	40000400 	.word	0x40000400
 8007ea8:	40000800 	.word	0x40000800
 8007eac:	40000c00 	.word	0x40000c00
 8007eb0:	40010400 	.word	0x40010400
 8007eb4:	40014000 	.word	0x40014000
 8007eb8:	40001800 	.word	0x40001800

08007ebc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e041      	b.n	8007f52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d106      	bne.n	8007ee8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7fb fee4 	bl	8003cb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3304      	adds	r3, #4
 8007ef8:	4619      	mov	r1, r3
 8007efa:	4610      	mov	r0, r2
 8007efc:	f000 faf0 	bl	80084e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
	...

08007f5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d109      	bne.n	8007f80 <HAL_TIM_PWM_Start+0x24>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	bf14      	ite	ne
 8007f78:	2301      	movne	r3, #1
 8007f7a:	2300      	moveq	r3, #0
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	e022      	b.n	8007fc6 <HAL_TIM_PWM_Start+0x6a>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2b04      	cmp	r3, #4
 8007f84:	d109      	bne.n	8007f9a <HAL_TIM_PWM_Start+0x3e>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	bf14      	ite	ne
 8007f92:	2301      	movne	r3, #1
 8007f94:	2300      	moveq	r3, #0
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	e015      	b.n	8007fc6 <HAL_TIM_PWM_Start+0x6a>
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d109      	bne.n	8007fb4 <HAL_TIM_PWM_Start+0x58>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	bf14      	ite	ne
 8007fac:	2301      	movne	r3, #1
 8007fae:	2300      	moveq	r3, #0
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	e008      	b.n	8007fc6 <HAL_TIM_PWM_Start+0x6a>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	bf14      	ite	ne
 8007fc0:	2301      	movne	r3, #1
 8007fc2:	2300      	moveq	r3, #0
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e07c      	b.n	80080c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d104      	bne.n	8007fde <HAL_TIM_PWM_Start+0x82>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fdc:	e013      	b.n	8008006 <HAL_TIM_PWM_Start+0xaa>
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	d104      	bne.n	8007fee <HAL_TIM_PWM_Start+0x92>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fec:	e00b      	b.n	8008006 <HAL_TIM_PWM_Start+0xaa>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b08      	cmp	r3, #8
 8007ff2:	d104      	bne.n	8007ffe <HAL_TIM_PWM_Start+0xa2>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ffc:	e003      	b.n	8008006 <HAL_TIM_PWM_Start+0xaa>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2202      	movs	r2, #2
 8008002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2201      	movs	r2, #1
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	4618      	mov	r0, r3
 8008010:	f000 fd50 	bl	8008ab4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a2d      	ldr	r2, [pc, #180]	@ (80080d0 <HAL_TIM_PWM_Start+0x174>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d004      	beq.n	8008028 <HAL_TIM_PWM_Start+0xcc>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a2c      	ldr	r2, [pc, #176]	@ (80080d4 <HAL_TIM_PWM_Start+0x178>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d101      	bne.n	800802c <HAL_TIM_PWM_Start+0xd0>
 8008028:	2301      	movs	r3, #1
 800802a:	e000      	b.n	800802e <HAL_TIM_PWM_Start+0xd2>
 800802c:	2300      	movs	r3, #0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d007      	beq.n	8008042 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008040:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a22      	ldr	r2, [pc, #136]	@ (80080d0 <HAL_TIM_PWM_Start+0x174>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d022      	beq.n	8008092 <HAL_TIM_PWM_Start+0x136>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008054:	d01d      	beq.n	8008092 <HAL_TIM_PWM_Start+0x136>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a1f      	ldr	r2, [pc, #124]	@ (80080d8 <HAL_TIM_PWM_Start+0x17c>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d018      	beq.n	8008092 <HAL_TIM_PWM_Start+0x136>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a1d      	ldr	r2, [pc, #116]	@ (80080dc <HAL_TIM_PWM_Start+0x180>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d013      	beq.n	8008092 <HAL_TIM_PWM_Start+0x136>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a1c      	ldr	r2, [pc, #112]	@ (80080e0 <HAL_TIM_PWM_Start+0x184>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d00e      	beq.n	8008092 <HAL_TIM_PWM_Start+0x136>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a16      	ldr	r2, [pc, #88]	@ (80080d4 <HAL_TIM_PWM_Start+0x178>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d009      	beq.n	8008092 <HAL_TIM_PWM_Start+0x136>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a18      	ldr	r2, [pc, #96]	@ (80080e4 <HAL_TIM_PWM_Start+0x188>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d004      	beq.n	8008092 <HAL_TIM_PWM_Start+0x136>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a16      	ldr	r2, [pc, #88]	@ (80080e8 <HAL_TIM_PWM_Start+0x18c>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d111      	bne.n	80080b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f003 0307 	and.w	r3, r3, #7
 800809c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2b06      	cmp	r3, #6
 80080a2:	d010      	beq.n	80080c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f042 0201 	orr.w	r2, r2, #1
 80080b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080b4:	e007      	b.n	80080c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f042 0201 	orr.w	r2, r2, #1
 80080c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	40010000 	.word	0x40010000
 80080d4:	40010400 	.word	0x40010400
 80080d8:	40000400 	.word	0x40000400
 80080dc:	40000800 	.word	0x40000800
 80080e0:	40000c00 	.word	0x40000c00
 80080e4:	40014000 	.word	0x40014000
 80080e8:	40001800 	.word	0x40001800

080080ec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2200      	movs	r2, #0
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 fcd8 	bl	8008ab4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a2e      	ldr	r2, [pc, #184]	@ (80081c4 <HAL_TIM_PWM_Stop+0xd8>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d004      	beq.n	8008118 <HAL_TIM_PWM_Stop+0x2c>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a2d      	ldr	r2, [pc, #180]	@ (80081c8 <HAL_TIM_PWM_Stop+0xdc>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d101      	bne.n	800811c <HAL_TIM_PWM_Stop+0x30>
 8008118:	2301      	movs	r3, #1
 800811a:	e000      	b.n	800811e <HAL_TIM_PWM_Stop+0x32>
 800811c:	2300      	movs	r3, #0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d017      	beq.n	8008152 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6a1a      	ldr	r2, [r3, #32]
 8008128:	f241 1311 	movw	r3, #4369	@ 0x1111
 800812c:	4013      	ands	r3, r2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10f      	bne.n	8008152 <HAL_TIM_PWM_Stop+0x66>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6a1a      	ldr	r2, [r3, #32]
 8008138:	f240 4344 	movw	r3, #1092	@ 0x444
 800813c:	4013      	ands	r3, r2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d107      	bne.n	8008152 <HAL_TIM_PWM_Stop+0x66>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008150:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	6a1a      	ldr	r2, [r3, #32]
 8008158:	f241 1311 	movw	r3, #4369	@ 0x1111
 800815c:	4013      	ands	r3, r2
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10f      	bne.n	8008182 <HAL_TIM_PWM_Stop+0x96>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6a1a      	ldr	r2, [r3, #32]
 8008168:	f240 4344 	movw	r3, #1092	@ 0x444
 800816c:	4013      	ands	r3, r2
 800816e:	2b00      	cmp	r3, #0
 8008170:	d107      	bne.n	8008182 <HAL_TIM_PWM_Stop+0x96>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f022 0201 	bic.w	r2, r2, #1
 8008180:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d104      	bne.n	8008192 <HAL_TIM_PWM_Stop+0xa6>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008190:	e013      	b.n	80081ba <HAL_TIM_PWM_Stop+0xce>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2b04      	cmp	r3, #4
 8008196:	d104      	bne.n	80081a2 <HAL_TIM_PWM_Stop+0xb6>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081a0:	e00b      	b.n	80081ba <HAL_TIM_PWM_Stop+0xce>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b08      	cmp	r3, #8
 80081a6:	d104      	bne.n	80081b2 <HAL_TIM_PWM_Stop+0xc6>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081b0:	e003      	b.n	80081ba <HAL_TIM_PWM_Stop+0xce>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	40010000 	.word	0x40010000
 80081c8:	40010400 	.word	0x40010400

080081cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d101      	bne.n	80081ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80081e6:	2302      	movs	r3, #2
 80081e8:	e0ae      	b.n	8008348 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b0c      	cmp	r3, #12
 80081f6:	f200 809f 	bhi.w	8008338 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80081fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008200 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80081fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008200:	08008235 	.word	0x08008235
 8008204:	08008339 	.word	0x08008339
 8008208:	08008339 	.word	0x08008339
 800820c:	08008339 	.word	0x08008339
 8008210:	08008275 	.word	0x08008275
 8008214:	08008339 	.word	0x08008339
 8008218:	08008339 	.word	0x08008339
 800821c:	08008339 	.word	0x08008339
 8008220:	080082b7 	.word	0x080082b7
 8008224:	08008339 	.word	0x08008339
 8008228:	08008339 	.word	0x08008339
 800822c:	08008339 	.word	0x08008339
 8008230:	080082f7 	.word	0x080082f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68b9      	ldr	r1, [r7, #8]
 800823a:	4618      	mov	r0, r3
 800823c:	f000 f9f0 	bl	8008620 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	699a      	ldr	r2, [r3, #24]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f042 0208 	orr.w	r2, r2, #8
 800824e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	699a      	ldr	r2, [r3, #24]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f022 0204 	bic.w	r2, r2, #4
 800825e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6999      	ldr	r1, [r3, #24]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	691a      	ldr	r2, [r3, #16]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	619a      	str	r2, [r3, #24]
      break;
 8008272:	e064      	b.n	800833e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68b9      	ldr	r1, [r7, #8]
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fa40 	bl	8008700 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	699a      	ldr	r2, [r3, #24]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800828e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	699a      	ldr	r2, [r3, #24]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800829e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6999      	ldr	r1, [r3, #24]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	021a      	lsls	r2, r3, #8
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	430a      	orrs	r2, r1
 80082b2:	619a      	str	r2, [r3, #24]
      break;
 80082b4:	e043      	b.n	800833e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68b9      	ldr	r1, [r7, #8]
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 fa95 	bl	80087ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	69da      	ldr	r2, [r3, #28]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f042 0208 	orr.w	r2, r2, #8
 80082d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	69da      	ldr	r2, [r3, #28]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f022 0204 	bic.w	r2, r2, #4
 80082e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	69d9      	ldr	r1, [r3, #28]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	691a      	ldr	r2, [r3, #16]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	61da      	str	r2, [r3, #28]
      break;
 80082f4:	e023      	b.n	800833e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68b9      	ldr	r1, [r7, #8]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 fae9 	bl	80088d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	69da      	ldr	r2, [r3, #28]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	69da      	ldr	r2, [r3, #28]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	69d9      	ldr	r1, [r3, #28]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	021a      	lsls	r2, r3, #8
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	61da      	str	r2, [r3, #28]
      break;
 8008336:	e002      	b.n	800833e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	75fb      	strb	r3, [r7, #23]
      break;
 800833c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008346:	7dfb      	ldrb	r3, [r7, #23]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008364:	2b01      	cmp	r3, #1
 8008366:	d101      	bne.n	800836c <HAL_TIM_ConfigClockSource+0x1c>
 8008368:	2302      	movs	r3, #2
 800836a:	e0b4      	b.n	80084d6 <HAL_TIM_ConfigClockSource+0x186>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800838a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008392:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083a4:	d03e      	beq.n	8008424 <HAL_TIM_ConfigClockSource+0xd4>
 80083a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083aa:	f200 8087 	bhi.w	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083b2:	f000 8086 	beq.w	80084c2 <HAL_TIM_ConfigClockSource+0x172>
 80083b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083ba:	d87f      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083bc:	2b70      	cmp	r3, #112	@ 0x70
 80083be:	d01a      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0xa6>
 80083c0:	2b70      	cmp	r3, #112	@ 0x70
 80083c2:	d87b      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083c4:	2b60      	cmp	r3, #96	@ 0x60
 80083c6:	d050      	beq.n	800846a <HAL_TIM_ConfigClockSource+0x11a>
 80083c8:	2b60      	cmp	r3, #96	@ 0x60
 80083ca:	d877      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083cc:	2b50      	cmp	r3, #80	@ 0x50
 80083ce:	d03c      	beq.n	800844a <HAL_TIM_ConfigClockSource+0xfa>
 80083d0:	2b50      	cmp	r3, #80	@ 0x50
 80083d2:	d873      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083d4:	2b40      	cmp	r3, #64	@ 0x40
 80083d6:	d058      	beq.n	800848a <HAL_TIM_ConfigClockSource+0x13a>
 80083d8:	2b40      	cmp	r3, #64	@ 0x40
 80083da:	d86f      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083dc:	2b30      	cmp	r3, #48	@ 0x30
 80083de:	d064      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0x15a>
 80083e0:	2b30      	cmp	r3, #48	@ 0x30
 80083e2:	d86b      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083e4:	2b20      	cmp	r3, #32
 80083e6:	d060      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0x15a>
 80083e8:	2b20      	cmp	r3, #32
 80083ea:	d867      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d05c      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0x15a>
 80083f0:	2b10      	cmp	r3, #16
 80083f2:	d05a      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0x15a>
 80083f4:	e062      	b.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6818      	ldr	r0, [r3, #0]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	6899      	ldr	r1, [r3, #8]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	f000 fb35 	bl	8008a74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008418:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	609a      	str	r2, [r3, #8]
      break;
 8008422:	e04f      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6818      	ldr	r0, [r3, #0]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	6899      	ldr	r1, [r3, #8]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	f000 fb1e 	bl	8008a74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	689a      	ldr	r2, [r3, #8]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008446:	609a      	str	r2, [r3, #8]
      break;
 8008448:	e03c      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6818      	ldr	r0, [r3, #0]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	6859      	ldr	r1, [r3, #4]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	461a      	mov	r2, r3
 8008458:	f000 fa92 	bl	8008980 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2150      	movs	r1, #80	@ 0x50
 8008462:	4618      	mov	r0, r3
 8008464:	f000 faeb 	bl	8008a3e <TIM_ITRx_SetConfig>
      break;
 8008468:	e02c      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	6859      	ldr	r1, [r3, #4]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	461a      	mov	r2, r3
 8008478:	f000 fab1 	bl	80089de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2160      	movs	r1, #96	@ 0x60
 8008482:	4618      	mov	r0, r3
 8008484:	f000 fadb 	bl	8008a3e <TIM_ITRx_SetConfig>
      break;
 8008488:	e01c      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6818      	ldr	r0, [r3, #0]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	6859      	ldr	r1, [r3, #4]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	461a      	mov	r2, r3
 8008498:	f000 fa72 	bl	8008980 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2140      	movs	r1, #64	@ 0x40
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 facb 	bl	8008a3e <TIM_ITRx_SetConfig>
      break;
 80084a8:	e00c      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4619      	mov	r1, r3
 80084b4:	4610      	mov	r0, r2
 80084b6:	f000 fac2 	bl	8008a3e <TIM_ITRx_SetConfig>
      break;
 80084ba:	e003      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	73fb      	strb	r3, [r7, #15]
      break;
 80084c0:	e000      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80084c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a40      	ldr	r2, [pc, #256]	@ (80085f4 <TIM_Base_SetConfig+0x114>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d013      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084fe:	d00f      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a3d      	ldr	r2, [pc, #244]	@ (80085f8 <TIM_Base_SetConfig+0x118>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d00b      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a3c      	ldr	r2, [pc, #240]	@ (80085fc <TIM_Base_SetConfig+0x11c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d007      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a3b      	ldr	r2, [pc, #236]	@ (8008600 <TIM_Base_SetConfig+0x120>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d003      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a3a      	ldr	r2, [pc, #232]	@ (8008604 <TIM_Base_SetConfig+0x124>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d108      	bne.n	8008532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	4313      	orrs	r3, r2
 8008530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a2f      	ldr	r2, [pc, #188]	@ (80085f4 <TIM_Base_SetConfig+0x114>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d02b      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008540:	d027      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a2c      	ldr	r2, [pc, #176]	@ (80085f8 <TIM_Base_SetConfig+0x118>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d023      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a2b      	ldr	r2, [pc, #172]	@ (80085fc <TIM_Base_SetConfig+0x11c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d01f      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a2a      	ldr	r2, [pc, #168]	@ (8008600 <TIM_Base_SetConfig+0x120>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d01b      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a29      	ldr	r2, [pc, #164]	@ (8008604 <TIM_Base_SetConfig+0x124>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d017      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a28      	ldr	r2, [pc, #160]	@ (8008608 <TIM_Base_SetConfig+0x128>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d013      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a27      	ldr	r2, [pc, #156]	@ (800860c <TIM_Base_SetConfig+0x12c>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d00f      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a26      	ldr	r2, [pc, #152]	@ (8008610 <TIM_Base_SetConfig+0x130>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d00b      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a25      	ldr	r2, [pc, #148]	@ (8008614 <TIM_Base_SetConfig+0x134>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d007      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a24      	ldr	r2, [pc, #144]	@ (8008618 <TIM_Base_SetConfig+0x138>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d003      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a23      	ldr	r2, [pc, #140]	@ (800861c <TIM_Base_SetConfig+0x13c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d108      	bne.n	80085a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a0a      	ldr	r2, [pc, #40]	@ (80085f4 <TIM_Base_SetConfig+0x114>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d003      	beq.n	80085d8 <TIM_Base_SetConfig+0xf8>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a0c      	ldr	r2, [pc, #48]	@ (8008604 <TIM_Base_SetConfig+0x124>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d103      	bne.n	80085e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	691a      	ldr	r2, [r3, #16]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	615a      	str	r2, [r3, #20]
}
 80085e6:	bf00      	nop
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	40010000 	.word	0x40010000
 80085f8:	40000400 	.word	0x40000400
 80085fc:	40000800 	.word	0x40000800
 8008600:	40000c00 	.word	0x40000c00
 8008604:	40010400 	.word	0x40010400
 8008608:	40014000 	.word	0x40014000
 800860c:	40014400 	.word	0x40014400
 8008610:	40014800 	.word	0x40014800
 8008614:	40001800 	.word	0x40001800
 8008618:	40001c00 	.word	0x40001c00
 800861c:	40002000 	.word	0x40002000

08008620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	f023 0201 	bic.w	r2, r3, #1
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800864e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f023 0303 	bic.w	r3, r3, #3
 8008656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	4313      	orrs	r3, r2
 8008660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	f023 0302 	bic.w	r3, r3, #2
 8008668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	4313      	orrs	r3, r2
 8008672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a20      	ldr	r2, [pc, #128]	@ (80086f8 <TIM_OC1_SetConfig+0xd8>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d003      	beq.n	8008684 <TIM_OC1_SetConfig+0x64>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a1f      	ldr	r2, [pc, #124]	@ (80086fc <TIM_OC1_SetConfig+0xdc>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d10c      	bne.n	800869e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f023 0308 	bic.w	r3, r3, #8
 800868a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	697a      	ldr	r2, [r7, #20]
 8008692:	4313      	orrs	r3, r2
 8008694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f023 0304 	bic.w	r3, r3, #4
 800869c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a15      	ldr	r2, [pc, #84]	@ (80086f8 <TIM_OC1_SetConfig+0xd8>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d003      	beq.n	80086ae <TIM_OC1_SetConfig+0x8e>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a14      	ldr	r2, [pc, #80]	@ (80086fc <TIM_OC1_SetConfig+0xdc>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d111      	bne.n	80086d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80086bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	621a      	str	r2, [r3, #32]
}
 80086ec:	bf00      	nop
 80086ee:	371c      	adds	r7, #28
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	40010000 	.word	0x40010000
 80086fc:	40010400 	.word	0x40010400

08008700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	f023 0210 	bic.w	r2, r3, #16
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800872e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	021b      	lsls	r3, r3, #8
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	4313      	orrs	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	f023 0320 	bic.w	r3, r3, #32
 800874a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	011b      	lsls	r3, r3, #4
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	4313      	orrs	r3, r2
 8008756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a22      	ldr	r2, [pc, #136]	@ (80087e4 <TIM_OC2_SetConfig+0xe4>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d003      	beq.n	8008768 <TIM_OC2_SetConfig+0x68>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a21      	ldr	r2, [pc, #132]	@ (80087e8 <TIM_OC2_SetConfig+0xe8>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d10d      	bne.n	8008784 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800876e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	011b      	lsls	r3, r3, #4
 8008776:	697a      	ldr	r2, [r7, #20]
 8008778:	4313      	orrs	r3, r2
 800877a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008782:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a17      	ldr	r2, [pc, #92]	@ (80087e4 <TIM_OC2_SetConfig+0xe4>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d003      	beq.n	8008794 <TIM_OC2_SetConfig+0x94>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a16      	ldr	r2, [pc, #88]	@ (80087e8 <TIM_OC2_SetConfig+0xe8>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d113      	bne.n	80087bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800879a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80087a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	695b      	ldr	r3, [r3, #20]
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	699b      	ldr	r3, [r3, #24]
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	621a      	str	r2, [r3, #32]
}
 80087d6:	bf00      	nop
 80087d8:	371c      	adds	r7, #28
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	40010000 	.word	0x40010000
 80087e8:	40010400 	.word	0x40010400

080087ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b087      	sub	sp, #28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a1b      	ldr	r3, [r3, #32]
 8008806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800881a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f023 0303 	bic.w	r3, r3, #3
 8008822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	4313      	orrs	r3, r2
 800882c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	021b      	lsls	r3, r3, #8
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	4313      	orrs	r3, r2
 8008840:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a21      	ldr	r2, [pc, #132]	@ (80088cc <TIM_OC3_SetConfig+0xe0>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d003      	beq.n	8008852 <TIM_OC3_SetConfig+0x66>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a20      	ldr	r2, [pc, #128]	@ (80088d0 <TIM_OC3_SetConfig+0xe4>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d10d      	bne.n	800886e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	021b      	lsls	r3, r3, #8
 8008860:	697a      	ldr	r2, [r7, #20]
 8008862:	4313      	orrs	r3, r2
 8008864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800886c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a16      	ldr	r2, [pc, #88]	@ (80088cc <TIM_OC3_SetConfig+0xe0>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d003      	beq.n	800887e <TIM_OC3_SetConfig+0x92>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a15      	ldr	r2, [pc, #84]	@ (80088d0 <TIM_OC3_SetConfig+0xe4>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d113      	bne.n	80088a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800888c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	011b      	lsls	r3, r3, #4
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	4313      	orrs	r3, r2
 8008898:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	011b      	lsls	r3, r3, #4
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	621a      	str	r2, [r3, #32]
}
 80088c0:	bf00      	nop
 80088c2:	371c      	adds	r7, #28
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	40010000 	.word	0x40010000
 80088d0:	40010400 	.word	0x40010400

080088d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b087      	sub	sp, #28
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800890a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	021b      	lsls	r3, r3, #8
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	4313      	orrs	r3, r2
 8008916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800891e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	031b      	lsls	r3, r3, #12
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	4313      	orrs	r3, r2
 800892a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a12      	ldr	r2, [pc, #72]	@ (8008978 <TIM_OC4_SetConfig+0xa4>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d003      	beq.n	800893c <TIM_OC4_SetConfig+0x68>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a11      	ldr	r2, [pc, #68]	@ (800897c <TIM_OC4_SetConfig+0xa8>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d109      	bne.n	8008950 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008942:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	695b      	ldr	r3, [r3, #20]
 8008948:	019b      	lsls	r3, r3, #6
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	4313      	orrs	r3, r2
 800894e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	697a      	ldr	r2, [r7, #20]
 8008954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	685a      	ldr	r2, [r3, #4]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	621a      	str	r2, [r3, #32]
}
 800896a:	bf00      	nop
 800896c:	371c      	adds	r7, #28
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	40010000 	.word	0x40010000
 800897c:	40010400 	.word	0x40010400

08008980 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008980:	b480      	push	{r7}
 8008982:	b087      	sub	sp, #28
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	f023 0201 	bic.w	r2, r3, #1
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	011b      	lsls	r3, r3, #4
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f023 030a 	bic.w	r3, r3, #10
 80089bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	621a      	str	r2, [r3, #32]
}
 80089d2:	bf00      	nop
 80089d4:	371c      	adds	r7, #28
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089de:	b480      	push	{r7}
 80089e0:	b087      	sub	sp, #28
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	f023 0210 	bic.w	r2, r3, #16
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6a1b      	ldr	r3, [r3, #32]
 8008a00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	031b      	lsls	r3, r3, #12
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	011b      	lsls	r3, r3, #4
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	621a      	str	r2, [r3, #32]
}
 8008a32:	bf00      	nop
 8008a34:	371c      	adds	r7, #28
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b085      	sub	sp, #20
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a56:	683a      	ldr	r2, [r7, #0]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	f043 0307 	orr.w	r3, r3, #7
 8008a60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	609a      	str	r2, [r3, #8]
}
 8008a68:	bf00      	nop
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b087      	sub	sp, #28
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	021a      	lsls	r2, r3, #8
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	431a      	orrs	r2, r3
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	609a      	str	r2, [r3, #8]
}
 8008aa8:	bf00      	nop
 8008aaa:	371c      	adds	r7, #28
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	f003 031f 	and.w	r3, r3, #31
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8008acc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6a1a      	ldr	r2, [r3, #32]
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	43db      	mvns	r3, r3
 8008ad6:	401a      	ands	r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6a1a      	ldr	r2, [r3, #32]
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	f003 031f 	and.w	r3, r3, #31
 8008ae6:	6879      	ldr	r1, [r7, #4]
 8008ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8008aec:	431a      	orrs	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	621a      	str	r2, [r3, #32]
}
 8008af2:	bf00      	nop
 8008af4:	371c      	adds	r7, #28
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
	...

08008b00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d101      	bne.n	8008b18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b14:	2302      	movs	r3, #2
 8008b16:	e05a      	b.n	8008bce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2202      	movs	r2, #2
 8008b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a21      	ldr	r2, [pc, #132]	@ (8008bdc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d022      	beq.n	8008ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b64:	d01d      	beq.n	8008ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8008be0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d018      	beq.n	8008ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a1b      	ldr	r2, [pc, #108]	@ (8008be4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d013      	beq.n	8008ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a1a      	ldr	r2, [pc, #104]	@ (8008be8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d00e      	beq.n	8008ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a18      	ldr	r2, [pc, #96]	@ (8008bec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d009      	beq.n	8008ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a17      	ldr	r2, [pc, #92]	@ (8008bf0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d004      	beq.n	8008ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a15      	ldr	r2, [pc, #84]	@ (8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d10c      	bne.n	8008bbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ba8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	40010000 	.word	0x40010000
 8008be0:	40000400 	.word	0x40000400
 8008be4:	40000800 	.word	0x40000800
 8008be8:	40000c00 	.word	0x40000c00
 8008bec:	40010400 	.word	0x40010400
 8008bf0:	40014000 	.word	0x40014000
 8008bf4:	40001800 	.word	0x40001800

08008bf8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c02:	2300      	movs	r3, #0
 8008c04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d101      	bne.n	8008c14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c10:	2302      	movs	r3, #2
 8008c12:	e03d      	b.n	8008c90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3714      	adds	r7, #20
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e03f      	b.n	8008d2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d106      	bne.n	8008cc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7fb fa0e 	bl	80040e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2224      	movs	r2, #36	@ 0x24
 8008ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68da      	ldr	r2, [r3, #12]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008cde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 ff81 	bl	8009be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	691a      	ldr	r2, [r3, #16]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008cf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	695a      	ldr	r2, [r3, #20]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68da      	ldr	r2, [r3, #12]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2220      	movs	r2, #32
 8008d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
	...

08008d38 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b08c      	sub	sp, #48	@ 0x30
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	4613      	mov	r3, r2
 8008d44:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b20      	cmp	r3, #32
 8008d50:	d165      	bne.n	8008e1e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d002      	beq.n	8008d5e <HAL_UART_Transmit_DMA+0x26>
 8008d58:	88fb      	ldrh	r3, [r7, #6]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e05e      	b.n	8008e20 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d101      	bne.n	8008d70 <HAL_UART_Transmit_DMA+0x38>
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	e057      	b.n	8008e20 <HAL_UART_Transmit_DMA+0xe8>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	88fa      	ldrh	r2, [r7, #6]
 8008d82:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	88fa      	ldrh	r2, [r7, #6]
 8008d88:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2221      	movs	r2, #33	@ 0x21
 8008d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d9c:	4a22      	ldr	r2, [pc, #136]	@ (8008e28 <HAL_UART_Transmit_DMA+0xf0>)
 8008d9e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008da4:	4a21      	ldr	r2, [pc, #132]	@ (8008e2c <HAL_UART_Transmit_DMA+0xf4>)
 8008da6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dac:	4a20      	ldr	r2, [pc, #128]	@ (8008e30 <HAL_UART_Transmit_DMA+0xf8>)
 8008dae:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008db4:	2200      	movs	r2, #0
 8008db6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008db8:	f107 0308 	add.w	r3, r7, #8
 8008dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8008dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc4:	6819      	ldr	r1, [r3, #0]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	3304      	adds	r3, #4
 8008dcc:	461a      	mov	r2, r3
 8008dce:	88fb      	ldrh	r3, [r7, #6]
 8008dd0:	f7fc fd38 	bl	8005844 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008ddc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3314      	adds	r3, #20
 8008dec:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	e853 3f00 	ldrex	r3, [r3]
 8008df4:	617b      	str	r3, [r7, #20]
   return(result);
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	3314      	adds	r3, #20
 8008e04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e06:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e08:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0a:	6a39      	ldr	r1, [r7, #32]
 8008e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e0e:	e841 2300 	strex	r3, r2, [r1]
 8008e12:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1e5      	bne.n	8008de6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e000      	b.n	8008e20 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008e1e:	2302      	movs	r3, #2
  }
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3730      	adds	r7, #48	@ 0x30
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	08009481 	.word	0x08009481
 8008e2c:	0800951b 	.word	0x0800951b
 8008e30:	08009693 	.word	0x08009693

08008e34 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b08c      	sub	sp, #48	@ 0x30
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b20      	cmp	r3, #32
 8008e4c:	d152      	bne.n	8008ef4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008e54:	88fb      	ldrh	r3, [r7, #6]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d101      	bne.n	8008e5e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e04b      	b.n	8008ef6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d101      	bne.n	8008e6c <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8008e68:	2302      	movs	r3, #2
 8008e6a:	e044      	b.n	8008ef6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2201      	movs	r2, #1
 8008e78:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008e7a:	88fb      	ldrh	r3, [r7, #6]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	68b9      	ldr	r1, [r7, #8]
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f000 fc51 	bl	8009728 <UART_Start_Receive_DMA>
 8008e86:	4603      	mov	r3, r0
 8008e88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008e8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d12c      	bne.n	8008eee <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d125      	bne.n	8008ee8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	613b      	str	r3, [r7, #16]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	613b      	str	r3, [r7, #16]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	613b      	str	r3, [r7, #16]
 8008eb0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	330c      	adds	r3, #12
 8008eb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	e853 3f00 	ldrex	r3, [r3]
 8008ec0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	f043 0310 	orr.w	r3, r3, #16
 8008ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	330c      	adds	r3, #12
 8008ed0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ed2:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed6:	6a39      	ldr	r1, [r7, #32]
 8008ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008eda:	e841 2300 	strex	r3, r2, [r1]
 8008ede:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1e5      	bne.n	8008eb2 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8008ee6:	e002      	b.n	8008eee <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008eee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008ef2:	e000      	b.n	8008ef6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8008ef4:	2302      	movs	r3, #2
  }
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3730      	adds	r7, #48	@ 0x30
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
	...

08008f00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b0ba      	sub	sp, #232	@ 0xe8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008f26:	2300      	movs	r3, #0
 8008f28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f36:	f003 030f 	and.w	r3, r3, #15
 8008f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008f3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10f      	bne.n	8008f66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f4a:	f003 0320 	and.w	r3, r3, #32
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d009      	beq.n	8008f66 <HAL_UART_IRQHandler+0x66>
 8008f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f56:	f003 0320 	and.w	r3, r3, #32
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d003      	beq.n	8008f66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fd87 	bl	8009a72 <UART_Receive_IT>
      return;
 8008f64:	e256      	b.n	8009414 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 80de 	beq.w	800912c <HAL_UART_IRQHandler+0x22c>
 8008f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f74:	f003 0301 	and.w	r3, r3, #1
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d106      	bne.n	8008f8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f000 80d1 	beq.w	800912c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f8e:	f003 0301 	and.w	r3, r3, #1
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00b      	beq.n	8008fae <HAL_UART_IRQHandler+0xae>
 8008f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d005      	beq.n	8008fae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa6:	f043 0201 	orr.w	r2, r3, #1
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fb2:	f003 0304 	and.w	r3, r3, #4
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00b      	beq.n	8008fd2 <HAL_UART_IRQHandler+0xd2>
 8008fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d005      	beq.n	8008fd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fca:	f043 0202 	orr.w	r2, r3, #2
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fd6:	f003 0302 	and.w	r3, r3, #2
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00b      	beq.n	8008ff6 <HAL_UART_IRQHandler+0xf6>
 8008fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d005      	beq.n	8008ff6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fee:	f043 0204 	orr.w	r2, r3, #4
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ffa:	f003 0308 	and.w	r3, r3, #8
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d011      	beq.n	8009026 <HAL_UART_IRQHandler+0x126>
 8009002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009006:	f003 0320 	and.w	r3, r3, #32
 800900a:	2b00      	cmp	r3, #0
 800900c:	d105      	bne.n	800901a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800900e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	2b00      	cmp	r3, #0
 8009018:	d005      	beq.n	8009026 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800901e:	f043 0208 	orr.w	r2, r3, #8
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 81ed 	beq.w	800940a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009034:	f003 0320 	and.w	r3, r3, #32
 8009038:	2b00      	cmp	r3, #0
 800903a:	d008      	beq.n	800904e <HAL_UART_IRQHandler+0x14e>
 800903c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009040:	f003 0320 	and.w	r3, r3, #32
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fd12 	bl	8009a72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	695b      	ldr	r3, [r3, #20]
 8009054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009058:	2b40      	cmp	r3, #64	@ 0x40
 800905a:	bf0c      	ite	eq
 800905c:	2301      	moveq	r3, #1
 800905e:	2300      	movne	r3, #0
 8009060:	b2db      	uxtb	r3, r3
 8009062:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800906a:	f003 0308 	and.w	r3, r3, #8
 800906e:	2b00      	cmp	r3, #0
 8009070:	d103      	bne.n	800907a <HAL_UART_IRQHandler+0x17a>
 8009072:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009076:	2b00      	cmp	r3, #0
 8009078:	d04f      	beq.n	800911a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fc1a 	bl	80098b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800908a:	2b40      	cmp	r3, #64	@ 0x40
 800908c:	d141      	bne.n	8009112 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	3314      	adds	r3, #20
 8009094:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009098:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800909c:	e853 3f00 	ldrex	r3, [r3]
 80090a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80090a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80090a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	3314      	adds	r3, #20
 80090b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80090ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80090be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80090c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80090ca:	e841 2300 	strex	r3, r2, [r1]
 80090ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80090d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1d9      	bne.n	800908e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d013      	beq.n	800910a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e6:	4a7d      	ldr	r2, [pc, #500]	@ (80092dc <HAL_UART_IRQHandler+0x3dc>)
 80090e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fc fc70 	bl	80059d4 <HAL_DMA_Abort_IT>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d016      	beq.n	8009128 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009104:	4610      	mov	r0, r2
 8009106:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009108:	e00e      	b.n	8009128 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f9ae 	bl	800946c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009110:	e00a      	b.n	8009128 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f9aa 	bl	800946c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009118:	e006      	b.n	8009128 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f9a6 	bl	800946c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8009126:	e170      	b.n	800940a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009128:	bf00      	nop
    return;
 800912a:	e16e      	b.n	800940a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009130:	2b01      	cmp	r3, #1
 8009132:	f040 814a 	bne.w	80093ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800913a:	f003 0310 	and.w	r3, r3, #16
 800913e:	2b00      	cmp	r3, #0
 8009140:	f000 8143 	beq.w	80093ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009148:	f003 0310 	and.w	r3, r3, #16
 800914c:	2b00      	cmp	r3, #0
 800914e:	f000 813c 	beq.w	80093ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009152:	2300      	movs	r3, #0
 8009154:	60bb      	str	r3, [r7, #8]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	60bb      	str	r3, [r7, #8]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	60bb      	str	r3, [r7, #8]
 8009166:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009172:	2b40      	cmp	r3, #64	@ 0x40
 8009174:	f040 80b4 	bne.w	80092e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009184:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009188:	2b00      	cmp	r3, #0
 800918a:	f000 8140 	beq.w	800940e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009192:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009196:	429a      	cmp	r2, r3
 8009198:	f080 8139 	bcs.w	800940e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80091a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091ae:	f000 8088 	beq.w	80092c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	330c      	adds	r3, #12
 80091b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80091c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80091cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	330c      	adds	r3, #12
 80091da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80091de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80091e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80091ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80091ee:	e841 2300 	strex	r3, r2, [r1]
 80091f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80091f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1d9      	bne.n	80091b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	3314      	adds	r3, #20
 8009204:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009206:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009208:	e853 3f00 	ldrex	r3, [r3]
 800920c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800920e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009210:	f023 0301 	bic.w	r3, r3, #1
 8009214:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3314      	adds	r3, #20
 800921e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009222:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009226:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009228:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800922a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800922e:	e841 2300 	strex	r3, r2, [r1]
 8009232:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009234:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1e1      	bne.n	80091fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3314      	adds	r3, #20
 8009240:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009242:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009244:	e853 3f00 	ldrex	r3, [r3]
 8009248:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800924a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800924c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009250:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3314      	adds	r3, #20
 800925a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800925e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009260:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009262:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009264:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009266:	e841 2300 	strex	r3, r2, [r1]
 800926a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800926c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1e3      	bne.n	800923a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2220      	movs	r2, #32
 8009276:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	330c      	adds	r3, #12
 8009286:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800928a:	e853 3f00 	ldrex	r3, [r3]
 800928e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009290:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009292:	f023 0310 	bic.w	r3, r3, #16
 8009296:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	330c      	adds	r3, #12
 80092a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80092a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80092a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80092aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80092ac:	e841 2300 	strex	r3, r2, [r1]
 80092b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80092b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1e3      	bne.n	8009280 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092bc:	4618      	mov	r0, r3
 80092be:	f7fc fb19 	bl	80058f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	4619      	mov	r1, r3
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f7f8 fc12 	bl	8001afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092d8:	e099      	b.n	800940e <HAL_UART_IRQHandler+0x50e>
 80092da:	bf00      	nop
 80092dc:	0800997b 	.word	0x0800997b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f000 808b 	beq.w	8009412 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80092fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 8086 	beq.w	8009412 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	330c      	adds	r3, #12
 800930c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009310:	e853 3f00 	ldrex	r3, [r3]
 8009314:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009318:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800931c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	330c      	adds	r3, #12
 8009326:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800932a:	647a      	str	r2, [r7, #68]	@ 0x44
 800932c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009330:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009332:	e841 2300 	strex	r3, r2, [r1]
 8009336:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1e3      	bne.n	8009306 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3314      	adds	r3, #20
 8009344:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009348:	e853 3f00 	ldrex	r3, [r3]
 800934c:	623b      	str	r3, [r7, #32]
   return(result);
 800934e:	6a3b      	ldr	r3, [r7, #32]
 8009350:	f023 0301 	bic.w	r3, r3, #1
 8009354:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3314      	adds	r3, #20
 800935e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009362:	633a      	str	r2, [r7, #48]	@ 0x30
 8009364:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009366:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800936a:	e841 2300 	strex	r3, r2, [r1]
 800936e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1e3      	bne.n	800933e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2220      	movs	r2, #32
 800937a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	330c      	adds	r3, #12
 800938a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	e853 3f00 	ldrex	r3, [r3]
 8009392:	60fb      	str	r3, [r7, #12]
   return(result);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f023 0310 	bic.w	r3, r3, #16
 800939a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	330c      	adds	r3, #12
 80093a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80093a8:	61fa      	str	r2, [r7, #28]
 80093aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ac:	69b9      	ldr	r1, [r7, #24]
 80093ae:	69fa      	ldr	r2, [r7, #28]
 80093b0:	e841 2300 	strex	r3, r2, [r1]
 80093b4:	617b      	str	r3, [r7, #20]
   return(result);
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1e3      	bne.n	8009384 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80093c0:	4619      	mov	r1, r3
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7f8 fb9a 	bl	8001afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093c8:	e023      	b.n	8009412 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d009      	beq.n	80093ea <HAL_UART_IRQHandler+0x4ea>
 80093d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d003      	beq.n	80093ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fadd 	bl	80099a2 <UART_Transmit_IT>
    return;
 80093e8:	e014      	b.n	8009414 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00e      	beq.n	8009414 <HAL_UART_IRQHandler+0x514>
 80093f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d008      	beq.n	8009414 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fb1d 	bl	8009a42 <UART_EndTransmit_IT>
    return;
 8009408:	e004      	b.n	8009414 <HAL_UART_IRQHandler+0x514>
    return;
 800940a:	bf00      	nop
 800940c:	e002      	b.n	8009414 <HAL_UART_IRQHandler+0x514>
      return;
 800940e:	bf00      	nop
 8009410:	e000      	b.n	8009414 <HAL_UART_IRQHandler+0x514>
      return;
 8009412:	bf00      	nop
  }
}
 8009414:	37e8      	adds	r7, #232	@ 0xe8
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop

0800941c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009424:	bf00      	nop
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009438:	bf00      	nop
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b090      	sub	sp, #64	@ 0x40
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800948c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009498:	2b00      	cmp	r3, #0
 800949a:	d137      	bne.n	800950c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800949c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800949e:	2200      	movs	r2, #0
 80094a0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80094a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	3314      	adds	r3, #20
 80094a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ac:	e853 3f00 	ldrex	r3, [r3]
 80094b0:	623b      	str	r3, [r7, #32]
   return(result);
 80094b2:	6a3b      	ldr	r3, [r7, #32]
 80094b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80094ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3314      	adds	r3, #20
 80094c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80094c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094ca:	e841 2300 	strex	r3, r2, [r1]
 80094ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1e5      	bne.n	80094a2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	330c      	adds	r3, #12
 80094dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	e853 3f00 	ldrex	r3, [r3]
 80094e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80094ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	330c      	adds	r3, #12
 80094f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80094f6:	61fa      	str	r2, [r7, #28]
 80094f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fa:	69b9      	ldr	r1, [r7, #24]
 80094fc:	69fa      	ldr	r2, [r7, #28]
 80094fe:	e841 2300 	strex	r3, r2, [r1]
 8009502:	617b      	str	r3, [r7, #20]
   return(result);
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1e5      	bne.n	80094d6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800950a:	e002      	b.n	8009512 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800950c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800950e:	f7ff ff85 	bl	800941c <HAL_UART_TxCpltCallback>
}
 8009512:	bf00      	nop
 8009514:	3740      	adds	r7, #64	@ 0x40
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009526:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f7ff ff81 	bl	8009430 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800952e:	bf00      	nop
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b09c      	sub	sp, #112	@ 0x70
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009542:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800954e:	2b00      	cmp	r3, #0
 8009550:	d172      	bne.n	8009638 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009554:	2200      	movs	r2, #0
 8009556:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009558:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	330c      	adds	r3, #12
 800955e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009562:	e853 3f00 	ldrex	r3, [r3]
 8009566:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009568:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800956a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800956e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009570:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	330c      	adds	r3, #12
 8009576:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009578:	65ba      	str	r2, [r7, #88]	@ 0x58
 800957a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800957e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009580:	e841 2300 	strex	r3, r2, [r1]
 8009584:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009586:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1e5      	bne.n	8009558 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800958c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	3314      	adds	r3, #20
 8009592:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009596:	e853 3f00 	ldrex	r3, [r3]
 800959a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800959c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800959e:	f023 0301 	bic.w	r3, r3, #1
 80095a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80095a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3314      	adds	r3, #20
 80095aa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80095ac:	647a      	str	r2, [r7, #68]	@ 0x44
 80095ae:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095b4:	e841 2300 	strex	r3, r2, [r1]
 80095b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1e5      	bne.n	800958c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3314      	adds	r3, #20
 80095c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ca:	e853 3f00 	ldrex	r3, [r3]
 80095ce:	623b      	str	r3, [r7, #32]
   return(result);
 80095d0:	6a3b      	ldr	r3, [r7, #32]
 80095d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80095d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3314      	adds	r3, #20
 80095de:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80095e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80095e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095e8:	e841 2300 	strex	r3, r2, [r1]
 80095ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1e5      	bne.n	80095c0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80095f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095f6:	2220      	movs	r2, #32
 80095f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009600:	2b01      	cmp	r3, #1
 8009602:	d119      	bne.n	8009638 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009604:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	330c      	adds	r3, #12
 800960a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	e853 3f00 	ldrex	r3, [r3]
 8009612:	60fb      	str	r3, [r7, #12]
   return(result);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f023 0310 	bic.w	r3, r3, #16
 800961a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800961c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	330c      	adds	r3, #12
 8009622:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009624:	61fa      	str	r2, [r7, #28]
 8009626:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009628:	69b9      	ldr	r1, [r7, #24]
 800962a:	69fa      	ldr	r2, [r7, #28]
 800962c:	e841 2300 	strex	r3, r2, [r1]
 8009630:	617b      	str	r3, [r7, #20]
   return(result);
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1e5      	bne.n	8009604 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800963a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800963c:	2b01      	cmp	r3, #1
 800963e:	d106      	bne.n	800964e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009642:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009644:	4619      	mov	r1, r3
 8009646:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009648:	f7f8 fa58 	bl	8001afc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800964c:	e002      	b.n	8009654 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800964e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009650:	f7ff fef8 	bl	8009444 <HAL_UART_RxCpltCallback>
}
 8009654:	bf00      	nop
 8009656:	3770      	adds	r7, #112	@ 0x70
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009668:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800966e:	2b01      	cmp	r3, #1
 8009670:	d108      	bne.n	8009684 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009676:	085b      	lsrs	r3, r3, #1
 8009678:	b29b      	uxth	r3, r3
 800967a:	4619      	mov	r1, r3
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f7f8 fa3d 	bl	8001afc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009682:	e002      	b.n	800968a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f7ff fee7 	bl	8009458 <HAL_UART_RxHalfCpltCallback>
}
 800968a:	bf00      	nop
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b084      	sub	sp, #16
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800969a:	2300      	movs	r3, #0
 800969c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096a2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096ae:	2b80      	cmp	r3, #128	@ 0x80
 80096b0:	bf0c      	ite	eq
 80096b2:	2301      	moveq	r3, #1
 80096b4:	2300      	movne	r3, #0
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b21      	cmp	r3, #33	@ 0x21
 80096c4:	d108      	bne.n	80096d8 <UART_DMAError+0x46>
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d005      	beq.n	80096d8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2200      	movs	r2, #0
 80096d0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80096d2:	68b8      	ldr	r0, [r7, #8]
 80096d4:	f000 f8c6 	bl	8009864 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096e2:	2b40      	cmp	r3, #64	@ 0x40
 80096e4:	bf0c      	ite	eq
 80096e6:	2301      	moveq	r3, #1
 80096e8:	2300      	movne	r3, #0
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b22      	cmp	r3, #34	@ 0x22
 80096f8:	d108      	bne.n	800970c <UART_DMAError+0x7a>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d005      	beq.n	800970c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	2200      	movs	r2, #0
 8009704:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009706:	68b8      	ldr	r0, [r7, #8]
 8009708:	f000 f8d4 	bl	80098b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009710:	f043 0210 	orr.w	r2, r3, #16
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009718:	68b8      	ldr	r0, [r7, #8]
 800971a:	f7ff fea7 	bl	800946c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800971e:	bf00      	nop
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
	...

08009728 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b098      	sub	sp, #96	@ 0x60
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	4613      	mov	r3, r2
 8009734:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	88fa      	ldrh	r2, [r7, #6]
 8009740:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2222      	movs	r2, #34	@ 0x22
 800974c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009754:	4a40      	ldr	r2, [pc, #256]	@ (8009858 <UART_Start_Receive_DMA+0x130>)
 8009756:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800975c:	4a3f      	ldr	r2, [pc, #252]	@ (800985c <UART_Start_Receive_DMA+0x134>)
 800975e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009764:	4a3e      	ldr	r2, [pc, #248]	@ (8009860 <UART_Start_Receive_DMA+0x138>)
 8009766:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800976c:	2200      	movs	r2, #0
 800976e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009770:	f107 0308 	add.w	r3, r7, #8
 8009774:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	3304      	adds	r3, #4
 8009780:	4619      	mov	r1, r3
 8009782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	88fb      	ldrh	r3, [r7, #6]
 8009788:	f7fc f85c 	bl	8005844 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800978c:	2300      	movs	r3, #0
 800978e:	613b      	str	r3, [r7, #16]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	613b      	str	r3, [r7, #16]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	613b      	str	r3, [r7, #16]
 80097a0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d019      	beq.n	80097e6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	330c      	adds	r3, #12
 80097b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097bc:	e853 3f00 	ldrex	r3, [r3]
 80097c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80097c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	330c      	adds	r3, #12
 80097d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80097d2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80097d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80097d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097da:	e841 2300 	strex	r3, r2, [r1]
 80097de:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80097e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1e5      	bne.n	80097b2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3314      	adds	r3, #20
 80097ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097f0:	e853 3f00 	ldrex	r3, [r3]
 80097f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f8:	f043 0301 	orr.w	r3, r3, #1
 80097fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3314      	adds	r3, #20
 8009804:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009806:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009808:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800980c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800980e:	e841 2300 	strex	r3, r2, [r1]
 8009812:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1e5      	bne.n	80097e6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	3314      	adds	r3, #20
 8009820:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	e853 3f00 	ldrex	r3, [r3]
 8009828:	617b      	str	r3, [r7, #20]
   return(result);
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009830:	653b      	str	r3, [r7, #80]	@ 0x50
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	3314      	adds	r3, #20
 8009838:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800983a:	627a      	str	r2, [r7, #36]	@ 0x24
 800983c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983e:	6a39      	ldr	r1, [r7, #32]
 8009840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009842:	e841 2300 	strex	r3, r2, [r1]
 8009846:	61fb      	str	r3, [r7, #28]
   return(result);
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1e5      	bne.n	800981a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3760      	adds	r7, #96	@ 0x60
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	08009537 	.word	0x08009537
 800985c:	0800965d 	.word	0x0800965d
 8009860:	08009693 	.word	0x08009693

08009864 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009864:	b480      	push	{r7}
 8009866:	b089      	sub	sp, #36	@ 0x24
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	330c      	adds	r3, #12
 8009872:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	e853 3f00 	ldrex	r3, [r3]
 800987a:	60bb      	str	r3, [r7, #8]
   return(result);
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009882:	61fb      	str	r3, [r7, #28]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	330c      	adds	r3, #12
 800988a:	69fa      	ldr	r2, [r7, #28]
 800988c:	61ba      	str	r2, [r7, #24]
 800988e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009890:	6979      	ldr	r1, [r7, #20]
 8009892:	69ba      	ldr	r2, [r7, #24]
 8009894:	e841 2300 	strex	r3, r2, [r1]
 8009898:	613b      	str	r3, [r7, #16]
   return(result);
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1e5      	bne.n	800986c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2220      	movs	r2, #32
 80098a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80098a8:	bf00      	nop
 80098aa:	3724      	adds	r7, #36	@ 0x24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b095      	sub	sp, #84	@ 0x54
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	330c      	adds	r3, #12
 80098c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098c6:	e853 3f00 	ldrex	r3, [r3]
 80098ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	330c      	adds	r3, #12
 80098da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80098dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80098de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098e4:	e841 2300 	strex	r3, r2, [r1]
 80098e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1e5      	bne.n	80098bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	3314      	adds	r3, #20
 80098f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	e853 3f00 	ldrex	r3, [r3]
 80098fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	f023 0301 	bic.w	r3, r3, #1
 8009906:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	3314      	adds	r3, #20
 800990e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009910:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009912:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009914:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009916:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009918:	e841 2300 	strex	r3, r2, [r1]
 800991c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800991e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1e5      	bne.n	80098f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009928:	2b01      	cmp	r3, #1
 800992a:	d119      	bne.n	8009960 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	330c      	adds	r3, #12
 8009932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	e853 3f00 	ldrex	r3, [r3]
 800993a:	60bb      	str	r3, [r7, #8]
   return(result);
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	f023 0310 	bic.w	r3, r3, #16
 8009942:	647b      	str	r3, [r7, #68]	@ 0x44
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	330c      	adds	r3, #12
 800994a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800994c:	61ba      	str	r2, [r7, #24]
 800994e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009950:	6979      	ldr	r1, [r7, #20]
 8009952:	69ba      	ldr	r2, [r7, #24]
 8009954:	e841 2300 	strex	r3, r2, [r1]
 8009958:	613b      	str	r3, [r7, #16]
   return(result);
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1e5      	bne.n	800992c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2220      	movs	r2, #32
 8009964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800996e:	bf00      	nop
 8009970:	3754      	adds	r7, #84	@ 0x54
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009986:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f7ff fd69 	bl	800946c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800999a:	bf00      	nop
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b085      	sub	sp, #20
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	2b21      	cmp	r3, #33	@ 0x21
 80099b4:	d13e      	bne.n	8009a34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099be:	d114      	bne.n	80099ea <UART_Transmit_IT+0x48>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d110      	bne.n	80099ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a1b      	ldr	r3, [r3, #32]
 80099cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	881b      	ldrh	r3, [r3, #0]
 80099d2:	461a      	mov	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	1c9a      	adds	r2, r3, #2
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	621a      	str	r2, [r3, #32]
 80099e8:	e008      	b.n	80099fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	1c59      	adds	r1, r3, #1
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	6211      	str	r1, [r2, #32]
 80099f4:	781a      	ldrb	r2, [r3, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	3b01      	subs	r3, #1
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	4619      	mov	r1, r3
 8009a0a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10f      	bne.n	8009a30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68da      	ldr	r2, [r3, #12]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68da      	ldr	r2, [r3, #12]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	e000      	b.n	8009a36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a34:	2302      	movs	r3, #2
  }
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3714      	adds	r7, #20
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b082      	sub	sp, #8
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68da      	ldr	r2, [r3, #12]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2220      	movs	r2, #32
 8009a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f7ff fcda 	bl	800941c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b08c      	sub	sp, #48	@ 0x30
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	2b22      	cmp	r3, #34	@ 0x22
 8009a84:	f040 80ab 	bne.w	8009bde <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a90:	d117      	bne.n	8009ac2 <UART_Receive_IT+0x50>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d113      	bne.n	8009ac2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aba:	1c9a      	adds	r2, r3, #2
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	629a      	str	r2, [r3, #40]	@ 0x28
 8009ac0:	e026      	b.n	8009b10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ad4:	d007      	beq.n	8009ae6 <UART_Receive_IT+0x74>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10a      	bne.n	8009af4 <UART_Receive_IT+0x82>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d106      	bne.n	8009af4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009af0:	701a      	strb	r2, [r3, #0]
 8009af2:	e008      	b.n	8009b06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b0a:	1c5a      	adds	r2, r3, #1
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	3b01      	subs	r3, #1
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d15a      	bne.n	8009bda <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68da      	ldr	r2, [r3, #12]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f022 0220 	bic.w	r2, r2, #32
 8009b32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68da      	ldr	r2, [r3, #12]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009b42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	695a      	ldr	r2, [r3, #20]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f022 0201 	bic.w	r2, r2, #1
 8009b52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2220      	movs	r2, #32
 8009b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d135      	bne.n	8009bd0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	330c      	adds	r3, #12
 8009b70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	e853 3f00 	ldrex	r3, [r3]
 8009b78:	613b      	str	r3, [r7, #16]
   return(result);
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	f023 0310 	bic.w	r3, r3, #16
 8009b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	330c      	adds	r3, #12
 8009b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b8a:	623a      	str	r2, [r7, #32]
 8009b8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8e:	69f9      	ldr	r1, [r7, #28]
 8009b90:	6a3a      	ldr	r2, [r7, #32]
 8009b92:	e841 2300 	strex	r3, r2, [r1]
 8009b96:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1e5      	bne.n	8009b6a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f003 0310 	and.w	r3, r3, #16
 8009ba8:	2b10      	cmp	r3, #16
 8009baa:	d10a      	bne.n	8009bc2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bac:	2300      	movs	r3, #0
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f7f7 ff97 	bl	8001afc <HAL_UARTEx_RxEventCallback>
 8009bce:	e002      	b.n	8009bd6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7ff fc37 	bl	8009444 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	e002      	b.n	8009be0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	e000      	b.n	8009be0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009bde:	2302      	movs	r3, #2
  }
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3730      	adds	r7, #48	@ 0x30
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bec:	b0c0      	sub	sp, #256	@ 0x100
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c04:	68d9      	ldr	r1, [r3, #12]
 8009c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	ea40 0301 	orr.w	r3, r0, r1
 8009c10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c16:	689a      	ldr	r2, [r3, #8]
 8009c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	431a      	orrs	r2, r3
 8009c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c24:	695b      	ldr	r3, [r3, #20]
 8009c26:	431a      	orrs	r2, r3
 8009c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c2c:	69db      	ldr	r3, [r3, #28]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009c40:	f021 010c 	bic.w	r1, r1, #12
 8009c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009c4e:	430b      	orrs	r3, r1
 8009c50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c62:	6999      	ldr	r1, [r3, #24]
 8009c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	ea40 0301 	orr.w	r3, r0, r1
 8009c6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	4b8f      	ldr	r3, [pc, #572]	@ (8009eb4 <UART_SetConfig+0x2cc>)
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d005      	beq.n	8009c88 <UART_SetConfig+0xa0>
 8009c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	4b8d      	ldr	r3, [pc, #564]	@ (8009eb8 <UART_SetConfig+0x2d0>)
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d104      	bne.n	8009c92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c88:	f7fd fd3c 	bl	8007704 <HAL_RCC_GetPCLK2Freq>
 8009c8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009c90:	e003      	b.n	8009c9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c92:	f7fd fd23 	bl	80076dc <HAL_RCC_GetPCLK1Freq>
 8009c96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c9e:	69db      	ldr	r3, [r3, #28]
 8009ca0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ca4:	f040 810c 	bne.w	8009ec0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cac:	2200      	movs	r2, #0
 8009cae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009cb2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009cb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009cba:	4622      	mov	r2, r4
 8009cbc:	462b      	mov	r3, r5
 8009cbe:	1891      	adds	r1, r2, r2
 8009cc0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009cc2:	415b      	adcs	r3, r3
 8009cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009cca:	4621      	mov	r1, r4
 8009ccc:	eb12 0801 	adds.w	r8, r2, r1
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	eb43 0901 	adc.w	r9, r3, r1
 8009cd6:	f04f 0200 	mov.w	r2, #0
 8009cda:	f04f 0300 	mov.w	r3, #0
 8009cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009cea:	4690      	mov	r8, r2
 8009cec:	4699      	mov	r9, r3
 8009cee:	4623      	mov	r3, r4
 8009cf0:	eb18 0303 	adds.w	r3, r8, r3
 8009cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009cf8:	462b      	mov	r3, r5
 8009cfa:	eb49 0303 	adc.w	r3, r9, r3
 8009cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009d0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009d12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009d16:	460b      	mov	r3, r1
 8009d18:	18db      	adds	r3, r3, r3
 8009d1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	eb42 0303 	adc.w	r3, r2, r3
 8009d22:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009d28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009d2c:	f7f6 fe9e 	bl	8000a6c <__aeabi_uldivmod>
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	4b61      	ldr	r3, [pc, #388]	@ (8009ebc <UART_SetConfig+0x2d4>)
 8009d36:	fba3 2302 	umull	r2, r3, r3, r2
 8009d3a:	095b      	lsrs	r3, r3, #5
 8009d3c:	011c      	lsls	r4, r3, #4
 8009d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d42:	2200      	movs	r2, #0
 8009d44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009d4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009d50:	4642      	mov	r2, r8
 8009d52:	464b      	mov	r3, r9
 8009d54:	1891      	adds	r1, r2, r2
 8009d56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009d58:	415b      	adcs	r3, r3
 8009d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009d60:	4641      	mov	r1, r8
 8009d62:	eb12 0a01 	adds.w	sl, r2, r1
 8009d66:	4649      	mov	r1, r9
 8009d68:	eb43 0b01 	adc.w	fp, r3, r1
 8009d6c:	f04f 0200 	mov.w	r2, #0
 8009d70:	f04f 0300 	mov.w	r3, #0
 8009d74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d80:	4692      	mov	sl, r2
 8009d82:	469b      	mov	fp, r3
 8009d84:	4643      	mov	r3, r8
 8009d86:	eb1a 0303 	adds.w	r3, sl, r3
 8009d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d8e:	464b      	mov	r3, r9
 8009d90:	eb4b 0303 	adc.w	r3, fp, r3
 8009d94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009da4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009da8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009dac:	460b      	mov	r3, r1
 8009dae:	18db      	adds	r3, r3, r3
 8009db0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009db2:	4613      	mov	r3, r2
 8009db4:	eb42 0303 	adc.w	r3, r2, r3
 8009db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009dbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009dc2:	f7f6 fe53 	bl	8000a6c <__aeabi_uldivmod>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	4611      	mov	r1, r2
 8009dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8009ebc <UART_SetConfig+0x2d4>)
 8009dce:	fba3 2301 	umull	r2, r3, r3, r1
 8009dd2:	095b      	lsrs	r3, r3, #5
 8009dd4:	2264      	movs	r2, #100	@ 0x64
 8009dd6:	fb02 f303 	mul.w	r3, r2, r3
 8009dda:	1acb      	subs	r3, r1, r3
 8009ddc:	00db      	lsls	r3, r3, #3
 8009dde:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009de2:	4b36      	ldr	r3, [pc, #216]	@ (8009ebc <UART_SetConfig+0x2d4>)
 8009de4:	fba3 2302 	umull	r2, r3, r3, r2
 8009de8:	095b      	lsrs	r3, r3, #5
 8009dea:	005b      	lsls	r3, r3, #1
 8009dec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009df0:	441c      	add	r4, r3
 8009df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009df6:	2200      	movs	r2, #0
 8009df8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009dfc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009e00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009e04:	4642      	mov	r2, r8
 8009e06:	464b      	mov	r3, r9
 8009e08:	1891      	adds	r1, r2, r2
 8009e0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009e0c:	415b      	adcs	r3, r3
 8009e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009e14:	4641      	mov	r1, r8
 8009e16:	1851      	adds	r1, r2, r1
 8009e18:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	414b      	adcs	r3, r1
 8009e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e20:	f04f 0200 	mov.w	r2, #0
 8009e24:	f04f 0300 	mov.w	r3, #0
 8009e28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009e2c:	4659      	mov	r1, fp
 8009e2e:	00cb      	lsls	r3, r1, #3
 8009e30:	4651      	mov	r1, sl
 8009e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e36:	4651      	mov	r1, sl
 8009e38:	00ca      	lsls	r2, r1, #3
 8009e3a:	4610      	mov	r0, r2
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	4603      	mov	r3, r0
 8009e40:	4642      	mov	r2, r8
 8009e42:	189b      	adds	r3, r3, r2
 8009e44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e48:	464b      	mov	r3, r9
 8009e4a:	460a      	mov	r2, r1
 8009e4c:	eb42 0303 	adc.w	r3, r2, r3
 8009e50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009e64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009e68:	460b      	mov	r3, r1
 8009e6a:	18db      	adds	r3, r3, r3
 8009e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e6e:	4613      	mov	r3, r2
 8009e70:	eb42 0303 	adc.w	r3, r2, r3
 8009e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009e7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009e7e:	f7f6 fdf5 	bl	8000a6c <__aeabi_uldivmod>
 8009e82:	4602      	mov	r2, r0
 8009e84:	460b      	mov	r3, r1
 8009e86:	4b0d      	ldr	r3, [pc, #52]	@ (8009ebc <UART_SetConfig+0x2d4>)
 8009e88:	fba3 1302 	umull	r1, r3, r3, r2
 8009e8c:	095b      	lsrs	r3, r3, #5
 8009e8e:	2164      	movs	r1, #100	@ 0x64
 8009e90:	fb01 f303 	mul.w	r3, r1, r3
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	00db      	lsls	r3, r3, #3
 8009e98:	3332      	adds	r3, #50	@ 0x32
 8009e9a:	4a08      	ldr	r2, [pc, #32]	@ (8009ebc <UART_SetConfig+0x2d4>)
 8009e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea0:	095b      	lsrs	r3, r3, #5
 8009ea2:	f003 0207 	and.w	r2, r3, #7
 8009ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4422      	add	r2, r4
 8009eae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009eb0:	e106      	b.n	800a0c0 <UART_SetConfig+0x4d8>
 8009eb2:	bf00      	nop
 8009eb4:	40011000 	.word	0x40011000
 8009eb8:	40011400 	.word	0x40011400
 8009ebc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009eca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009ece:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009ed2:	4642      	mov	r2, r8
 8009ed4:	464b      	mov	r3, r9
 8009ed6:	1891      	adds	r1, r2, r2
 8009ed8:	6239      	str	r1, [r7, #32]
 8009eda:	415b      	adcs	r3, r3
 8009edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ede:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009ee2:	4641      	mov	r1, r8
 8009ee4:	1854      	adds	r4, r2, r1
 8009ee6:	4649      	mov	r1, r9
 8009ee8:	eb43 0501 	adc.w	r5, r3, r1
 8009eec:	f04f 0200 	mov.w	r2, #0
 8009ef0:	f04f 0300 	mov.w	r3, #0
 8009ef4:	00eb      	lsls	r3, r5, #3
 8009ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009efa:	00e2      	lsls	r2, r4, #3
 8009efc:	4614      	mov	r4, r2
 8009efe:	461d      	mov	r5, r3
 8009f00:	4643      	mov	r3, r8
 8009f02:	18e3      	adds	r3, r4, r3
 8009f04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f08:	464b      	mov	r3, r9
 8009f0a:	eb45 0303 	adc.w	r3, r5, r3
 8009f0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009f1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009f22:	f04f 0200 	mov.w	r2, #0
 8009f26:	f04f 0300 	mov.w	r3, #0
 8009f2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009f2e:	4629      	mov	r1, r5
 8009f30:	008b      	lsls	r3, r1, #2
 8009f32:	4621      	mov	r1, r4
 8009f34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f38:	4621      	mov	r1, r4
 8009f3a:	008a      	lsls	r2, r1, #2
 8009f3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009f40:	f7f6 fd94 	bl	8000a6c <__aeabi_uldivmod>
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	4b60      	ldr	r3, [pc, #384]	@ (800a0cc <UART_SetConfig+0x4e4>)
 8009f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8009f4e:	095b      	lsrs	r3, r3, #5
 8009f50:	011c      	lsls	r4, r3, #4
 8009f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f56:	2200      	movs	r2, #0
 8009f58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009f60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009f64:	4642      	mov	r2, r8
 8009f66:	464b      	mov	r3, r9
 8009f68:	1891      	adds	r1, r2, r2
 8009f6a:	61b9      	str	r1, [r7, #24]
 8009f6c:	415b      	adcs	r3, r3
 8009f6e:	61fb      	str	r3, [r7, #28]
 8009f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f74:	4641      	mov	r1, r8
 8009f76:	1851      	adds	r1, r2, r1
 8009f78:	6139      	str	r1, [r7, #16]
 8009f7a:	4649      	mov	r1, r9
 8009f7c:	414b      	adcs	r3, r1
 8009f7e:	617b      	str	r3, [r7, #20]
 8009f80:	f04f 0200 	mov.w	r2, #0
 8009f84:	f04f 0300 	mov.w	r3, #0
 8009f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f8c:	4659      	mov	r1, fp
 8009f8e:	00cb      	lsls	r3, r1, #3
 8009f90:	4651      	mov	r1, sl
 8009f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f96:	4651      	mov	r1, sl
 8009f98:	00ca      	lsls	r2, r1, #3
 8009f9a:	4610      	mov	r0, r2
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	4642      	mov	r2, r8
 8009fa2:	189b      	adds	r3, r3, r2
 8009fa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009fa8:	464b      	mov	r3, r9
 8009faa:	460a      	mov	r2, r1
 8009fac:	eb42 0303 	adc.w	r3, r2, r3
 8009fb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009fbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009fc0:	f04f 0200 	mov.w	r2, #0
 8009fc4:	f04f 0300 	mov.w	r3, #0
 8009fc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009fcc:	4649      	mov	r1, r9
 8009fce:	008b      	lsls	r3, r1, #2
 8009fd0:	4641      	mov	r1, r8
 8009fd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fd6:	4641      	mov	r1, r8
 8009fd8:	008a      	lsls	r2, r1, #2
 8009fda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009fde:	f7f6 fd45 	bl	8000a6c <__aeabi_uldivmod>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	4b38      	ldr	r3, [pc, #224]	@ (800a0cc <UART_SetConfig+0x4e4>)
 8009fea:	fba3 2301 	umull	r2, r3, r3, r1
 8009fee:	095b      	lsrs	r3, r3, #5
 8009ff0:	2264      	movs	r2, #100	@ 0x64
 8009ff2:	fb02 f303 	mul.w	r3, r2, r3
 8009ff6:	1acb      	subs	r3, r1, r3
 8009ff8:	011b      	lsls	r3, r3, #4
 8009ffa:	3332      	adds	r3, #50	@ 0x32
 8009ffc:	4a33      	ldr	r2, [pc, #204]	@ (800a0cc <UART_SetConfig+0x4e4>)
 8009ffe:	fba2 2303 	umull	r2, r3, r2, r3
 800a002:	095b      	lsrs	r3, r3, #5
 800a004:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a008:	441c      	add	r4, r3
 800a00a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a00e:	2200      	movs	r2, #0
 800a010:	673b      	str	r3, [r7, #112]	@ 0x70
 800a012:	677a      	str	r2, [r7, #116]	@ 0x74
 800a014:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a018:	4642      	mov	r2, r8
 800a01a:	464b      	mov	r3, r9
 800a01c:	1891      	adds	r1, r2, r2
 800a01e:	60b9      	str	r1, [r7, #8]
 800a020:	415b      	adcs	r3, r3
 800a022:	60fb      	str	r3, [r7, #12]
 800a024:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a028:	4641      	mov	r1, r8
 800a02a:	1851      	adds	r1, r2, r1
 800a02c:	6039      	str	r1, [r7, #0]
 800a02e:	4649      	mov	r1, r9
 800a030:	414b      	adcs	r3, r1
 800a032:	607b      	str	r3, [r7, #4]
 800a034:	f04f 0200 	mov.w	r2, #0
 800a038:	f04f 0300 	mov.w	r3, #0
 800a03c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a040:	4659      	mov	r1, fp
 800a042:	00cb      	lsls	r3, r1, #3
 800a044:	4651      	mov	r1, sl
 800a046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a04a:	4651      	mov	r1, sl
 800a04c:	00ca      	lsls	r2, r1, #3
 800a04e:	4610      	mov	r0, r2
 800a050:	4619      	mov	r1, r3
 800a052:	4603      	mov	r3, r0
 800a054:	4642      	mov	r2, r8
 800a056:	189b      	adds	r3, r3, r2
 800a058:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a05a:	464b      	mov	r3, r9
 800a05c:	460a      	mov	r2, r1
 800a05e:	eb42 0303 	adc.w	r3, r2, r3
 800a062:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a06e:	667a      	str	r2, [r7, #100]	@ 0x64
 800a070:	f04f 0200 	mov.w	r2, #0
 800a074:	f04f 0300 	mov.w	r3, #0
 800a078:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a07c:	4649      	mov	r1, r9
 800a07e:	008b      	lsls	r3, r1, #2
 800a080:	4641      	mov	r1, r8
 800a082:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a086:	4641      	mov	r1, r8
 800a088:	008a      	lsls	r2, r1, #2
 800a08a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a08e:	f7f6 fced 	bl	8000a6c <__aeabi_uldivmod>
 800a092:	4602      	mov	r2, r0
 800a094:	460b      	mov	r3, r1
 800a096:	4b0d      	ldr	r3, [pc, #52]	@ (800a0cc <UART_SetConfig+0x4e4>)
 800a098:	fba3 1302 	umull	r1, r3, r3, r2
 800a09c:	095b      	lsrs	r3, r3, #5
 800a09e:	2164      	movs	r1, #100	@ 0x64
 800a0a0:	fb01 f303 	mul.w	r3, r1, r3
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	011b      	lsls	r3, r3, #4
 800a0a8:	3332      	adds	r3, #50	@ 0x32
 800a0aa:	4a08      	ldr	r2, [pc, #32]	@ (800a0cc <UART_SetConfig+0x4e4>)
 800a0ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b0:	095b      	lsrs	r3, r3, #5
 800a0b2:	f003 020f 	and.w	r2, r3, #15
 800a0b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4422      	add	r2, r4
 800a0be:	609a      	str	r2, [r3, #8]
}
 800a0c0:	bf00      	nop
 800a0c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0cc:	51eb851f 	.word	0x51eb851f

0800a0d0 <__NVIC_SetPriority>:
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	6039      	str	r1, [r7, #0]
 800a0da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	db0a      	blt.n	800a0fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	b2da      	uxtb	r2, r3
 800a0e8:	490c      	ldr	r1, [pc, #48]	@ (800a11c <__NVIC_SetPriority+0x4c>)
 800a0ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0ee:	0112      	lsls	r2, r2, #4
 800a0f0:	b2d2      	uxtb	r2, r2
 800a0f2:	440b      	add	r3, r1
 800a0f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a0f8:	e00a      	b.n	800a110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	b2da      	uxtb	r2, r3
 800a0fe:	4908      	ldr	r1, [pc, #32]	@ (800a120 <__NVIC_SetPriority+0x50>)
 800a100:	79fb      	ldrb	r3, [r7, #7]
 800a102:	f003 030f 	and.w	r3, r3, #15
 800a106:	3b04      	subs	r3, #4
 800a108:	0112      	lsls	r2, r2, #4
 800a10a:	b2d2      	uxtb	r2, r2
 800a10c:	440b      	add	r3, r1
 800a10e:	761a      	strb	r2, [r3, #24]
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr
 800a11c:	e000e100 	.word	0xe000e100
 800a120:	e000ed00 	.word	0xe000ed00

0800a124 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a124:	b580      	push	{r7, lr}
 800a126:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a128:	2100      	movs	r1, #0
 800a12a:	f06f 0004 	mvn.w	r0, #4
 800a12e:	f7ff ffcf 	bl	800a0d0 <__NVIC_SetPriority>
#endif
}
 800a132:	bf00      	nop
 800a134:	bd80      	pop	{r7, pc}
	...

0800a138 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a13e:	f3ef 8305 	mrs	r3, IPSR
 800a142:	603b      	str	r3, [r7, #0]
  return(result);
 800a144:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a146:	2b00      	cmp	r3, #0
 800a148:	d003      	beq.n	800a152 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a14a:	f06f 0305 	mvn.w	r3, #5
 800a14e:	607b      	str	r3, [r7, #4]
 800a150:	e00c      	b.n	800a16c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a152:	4b0a      	ldr	r3, [pc, #40]	@ (800a17c <osKernelInitialize+0x44>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d105      	bne.n	800a166 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a15a:	4b08      	ldr	r3, [pc, #32]	@ (800a17c <osKernelInitialize+0x44>)
 800a15c:	2201      	movs	r2, #1
 800a15e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a160:	2300      	movs	r3, #0
 800a162:	607b      	str	r3, [r7, #4]
 800a164:	e002      	b.n	800a16c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a166:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a16a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a16c:	687b      	ldr	r3, [r7, #4]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	370c      	adds	r7, #12
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	20000d78 	.word	0x20000d78

0800a180 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a186:	f3ef 8305 	mrs	r3, IPSR
 800a18a:	603b      	str	r3, [r7, #0]
  return(result);
 800a18c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d003      	beq.n	800a19a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a192:	f06f 0305 	mvn.w	r3, #5
 800a196:	607b      	str	r3, [r7, #4]
 800a198:	e010      	b.n	800a1bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a19a:	4b0b      	ldr	r3, [pc, #44]	@ (800a1c8 <osKernelStart+0x48>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d109      	bne.n	800a1b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a1a2:	f7ff ffbf 	bl	800a124 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a1a6:	4b08      	ldr	r3, [pc, #32]	@ (800a1c8 <osKernelStart+0x48>)
 800a1a8:	2202      	movs	r2, #2
 800a1aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a1ac:	f001 f892 	bl	800b2d4 <vTaskStartScheduler>
      stat = osOK;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	607b      	str	r3, [r7, #4]
 800a1b4:	e002      	b.n	800a1bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a1b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a1ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a1bc:	687b      	ldr	r3, [r7, #4]
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	20000d78 	.word	0x20000d78

0800a1cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b08e      	sub	sp, #56	@ 0x38
 800a1d0:	af04      	add	r7, sp, #16
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1dc:	f3ef 8305 	mrs	r3, IPSR
 800a1e0:	617b      	str	r3, [r7, #20]
  return(result);
 800a1e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d17e      	bne.n	800a2e6 <osThreadNew+0x11a>
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d07b      	beq.n	800a2e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a1ee:	2380      	movs	r3, #128	@ 0x80
 800a1f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a1f2:	2318      	movs	r3, #24
 800a1f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a1fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a1fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d045      	beq.n	800a292 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d002      	beq.n	800a214 <osThreadNew+0x48>
        name = attr->name;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	699b      	ldr	r3, [r3, #24]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d002      	beq.n	800a222 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d008      	beq.n	800a23a <osThreadNew+0x6e>
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	2b38      	cmp	r3, #56	@ 0x38
 800a22c:	d805      	bhi.n	800a23a <osThreadNew+0x6e>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	2b00      	cmp	r3, #0
 800a238:	d001      	beq.n	800a23e <osThreadNew+0x72>
        return (NULL);
 800a23a:	2300      	movs	r3, #0
 800a23c:	e054      	b.n	800a2e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	695b      	ldr	r3, [r3, #20]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d003      	beq.n	800a24e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	695b      	ldr	r3, [r3, #20]
 800a24a:	089b      	lsrs	r3, r3, #2
 800a24c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00e      	beq.n	800a274 <osThreadNew+0xa8>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	2ba7      	cmp	r3, #167	@ 0xa7
 800a25c:	d90a      	bls.n	800a274 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a262:	2b00      	cmp	r3, #0
 800a264:	d006      	beq.n	800a274 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	695b      	ldr	r3, [r3, #20]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d002      	beq.n	800a274 <osThreadNew+0xa8>
        mem = 1;
 800a26e:	2301      	movs	r3, #1
 800a270:	61bb      	str	r3, [r7, #24]
 800a272:	e010      	b.n	800a296 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10c      	bne.n	800a296 <osThreadNew+0xca>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d108      	bne.n	800a296 <osThreadNew+0xca>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d104      	bne.n	800a296 <osThreadNew+0xca>
          mem = 0;
 800a28c:	2300      	movs	r3, #0
 800a28e:	61bb      	str	r3, [r7, #24]
 800a290:	e001      	b.n	800a296 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a292:	2300      	movs	r3, #0
 800a294:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d110      	bne.n	800a2be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2a4:	9202      	str	r2, [sp, #8]
 800a2a6:	9301      	str	r3, [sp, #4]
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	6a3a      	ldr	r2, [r7, #32]
 800a2b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f000 fe1a 	bl	800aeec <xTaskCreateStatic>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	613b      	str	r3, [r7, #16]
 800a2bc:	e013      	b.n	800a2e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d110      	bne.n	800a2e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a2c4:	6a3b      	ldr	r3, [r7, #32]
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	f107 0310 	add.w	r3, r7, #16
 800a2cc:	9301      	str	r3, [sp, #4]
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f000 fe68 	bl	800afac <xTaskCreate>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d001      	beq.n	800a2e6 <osThreadNew+0x11a>
            hTask = NULL;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a2e6:	693b      	ldr	r3, [r7, #16]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3728      	adds	r7, #40	@ 0x28
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2f8:	f3ef 8305 	mrs	r3, IPSR
 800a2fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800a2fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a300:	2b00      	cmp	r3, #0
 800a302:	d003      	beq.n	800a30c <osDelay+0x1c>
    stat = osErrorISR;
 800a304:	f06f 0305 	mvn.w	r3, #5
 800a308:	60fb      	str	r3, [r7, #12]
 800a30a:	e007      	b.n	800a31c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d002      	beq.n	800a31c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 ffa6 	bl	800b268 <vTaskDelay>
    }
  }

  return (stat);
 800a31c:	68fb      	ldr	r3, [r7, #12]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
	...

0800a328 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	4a07      	ldr	r2, [pc, #28]	@ (800a354 <vApplicationGetIdleTaskMemory+0x2c>)
 800a338:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	4a06      	ldr	r2, [pc, #24]	@ (800a358 <vApplicationGetIdleTaskMemory+0x30>)
 800a33e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2280      	movs	r2, #128	@ 0x80
 800a344:	601a      	str	r2, [r3, #0]
}
 800a346:	bf00      	nop
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	20000d7c 	.word	0x20000d7c
 800a358:	20000e24 	.word	0x20000e24

0800a35c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	4a07      	ldr	r2, [pc, #28]	@ (800a388 <vApplicationGetTimerTaskMemory+0x2c>)
 800a36c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	4a06      	ldr	r2, [pc, #24]	@ (800a38c <vApplicationGetTimerTaskMemory+0x30>)
 800a372:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a37a:	601a      	str	r2, [r3, #0]
}
 800a37c:	bf00      	nop
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr
 800a388:	20001024 	.word	0x20001024
 800a38c:	200010cc 	.word	0x200010cc

0800a390 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f103 0208 	add.w	r2, r3, #8
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f103 0208 	add.w	r2, r3, #8
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f103 0208 	add.w	r2, r3, #8
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a3de:	bf00      	nop
 800a3e0:	370c      	adds	r7, #12
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	b085      	sub	sp, #20
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	689a      	ldr	r2, [r3, #8]
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	1c5a      	adds	r2, r3, #1
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	601a      	str	r2, [r3, #0]
}
 800a426:	bf00      	nop
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr

0800a432 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a432:	b480      	push	{r7}
 800a434:	b085      	sub	sp, #20
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
 800a43a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a448:	d103      	bne.n	800a452 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	60fb      	str	r3, [r7, #12]
 800a450:	e00c      	b.n	800a46c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	3308      	adds	r3, #8
 800a456:	60fb      	str	r3, [r7, #12]
 800a458:	e002      	b.n	800a460 <vListInsert+0x2e>
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	60fb      	str	r3, [r7, #12]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d2f6      	bcs.n	800a45a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	685a      	ldr	r2, [r3, #4]
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	683a      	ldr	r2, [r7, #0]
 800a47a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	683a      	ldr	r2, [r7, #0]
 800a486:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	1c5a      	adds	r2, r3, #1
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	601a      	str	r2, [r3, #0]
}
 800a498:	bf00      	nop
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	6892      	ldr	r2, [r2, #8]
 800a4ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	6852      	ldr	r2, [r2, #4]
 800a4c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d103      	bne.n	800a4d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	689a      	ldr	r2, [r3, #8]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	1e5a      	subs	r2, r3, #1
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3714      	adds	r7, #20
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10b      	bne.n	800a524 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a50c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a510:	f383 8811 	msr	BASEPRI, r3
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a51e:	bf00      	nop
 800a520:	bf00      	nop
 800a522:	e7fd      	b.n	800a520 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a524:	f002 fa80 	bl	800ca28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a530:	68f9      	ldr	r1, [r7, #12]
 800a532:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a534:	fb01 f303 	mul.w	r3, r1, r3
 800a538:	441a      	add	r2, r3
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a554:	3b01      	subs	r3, #1
 800a556:	68f9      	ldr	r1, [r7, #12]
 800a558:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a55a:	fb01 f303 	mul.w	r3, r1, r3
 800a55e:	441a      	add	r2, r3
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	22ff      	movs	r2, #255	@ 0xff
 800a568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	22ff      	movs	r2, #255	@ 0xff
 800a570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d114      	bne.n	800a5a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d01a      	beq.n	800a5b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	3310      	adds	r3, #16
 800a586:	4618      	mov	r0, r3
 800a588:	f001 fa3c 	bl	800ba04 <xTaskRemoveFromEventList>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d012      	beq.n	800a5b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a592:	4b0d      	ldr	r3, [pc, #52]	@ (800a5c8 <xQueueGenericReset+0xd0>)
 800a594:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a598:	601a      	str	r2, [r3, #0]
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	f3bf 8f6f 	isb	sy
 800a5a2:	e009      	b.n	800a5b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	3310      	adds	r3, #16
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7ff fef1 	bl	800a390 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	3324      	adds	r3, #36	@ 0x24
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7ff feec 	bl	800a390 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a5b8:	f002 fa68 	bl	800ca8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a5bc:	2301      	movs	r3, #1
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	e000ed04 	.word	0xe000ed04

0800a5cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b08e      	sub	sp, #56	@ 0x38
 800a5d0:	af02      	add	r7, sp, #8
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
 800a5d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d10b      	bne.n	800a5f8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a5f2:	bf00      	nop
 800a5f4:	bf00      	nop
 800a5f6:	e7fd      	b.n	800a5f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10b      	bne.n	800a616 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a610:	bf00      	nop
 800a612:	bf00      	nop
 800a614:	e7fd      	b.n	800a612 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d002      	beq.n	800a622 <xQueueGenericCreateStatic+0x56>
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <xQueueGenericCreateStatic+0x5a>
 800a622:	2301      	movs	r3, #1
 800a624:	e000      	b.n	800a628 <xQueueGenericCreateStatic+0x5c>
 800a626:	2300      	movs	r3, #0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d10b      	bne.n	800a644 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a62c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	623b      	str	r3, [r7, #32]
}
 800a63e:	bf00      	nop
 800a640:	bf00      	nop
 800a642:	e7fd      	b.n	800a640 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d102      	bne.n	800a650 <xQueueGenericCreateStatic+0x84>
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d101      	bne.n	800a654 <xQueueGenericCreateStatic+0x88>
 800a650:	2301      	movs	r3, #1
 800a652:	e000      	b.n	800a656 <xQueueGenericCreateStatic+0x8a>
 800a654:	2300      	movs	r3, #0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10b      	bne.n	800a672 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	61fb      	str	r3, [r7, #28]
}
 800a66c:	bf00      	nop
 800a66e:	bf00      	nop
 800a670:	e7fd      	b.n	800a66e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a672:	2350      	movs	r3, #80	@ 0x50
 800a674:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	2b50      	cmp	r3, #80	@ 0x50
 800a67a:	d00b      	beq.n	800a694 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a67c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a680:	f383 8811 	msr	BASEPRI, r3
 800a684:	f3bf 8f6f 	isb	sy
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	61bb      	str	r3, [r7, #24]
}
 800a68e:	bf00      	nop
 800a690:	bf00      	nop
 800a692:	e7fd      	b.n	800a690 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a694:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d00d      	beq.n	800a6bc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ae:	9300      	str	r3, [sp, #0]
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	68b9      	ldr	r1, [r7, #8]
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f000 f805 	bl	800a6c6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3730      	adds	r7, #48	@ 0x30
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b084      	sub	sp, #16
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	60f8      	str	r0, [r7, #12]
 800a6ce:	60b9      	str	r1, [r7, #8]
 800a6d0:	607a      	str	r2, [r7, #4]
 800a6d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d103      	bne.n	800a6e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	69ba      	ldr	r2, [r7, #24]
 800a6de:	601a      	str	r2, [r3, #0]
 800a6e0:	e002      	b.n	800a6e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	68ba      	ldr	r2, [r7, #8]
 800a6f2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a6f4:	2101      	movs	r1, #1
 800a6f6:	69b8      	ldr	r0, [r7, #24]
 800a6f8:	f7ff fefe 	bl	800a4f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	78fa      	ldrb	r2, [r7, #3]
 800a700:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a704:	bf00      	nop
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b08e      	sub	sp, #56	@ 0x38
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	607a      	str	r2, [r7, #4]
 800a718:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a71a:	2300      	movs	r3, #0
 800a71c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10b      	bne.n	800a740 <xQueueGenericSend+0x34>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a73a:	bf00      	nop
 800a73c:	bf00      	nop
 800a73e:	e7fd      	b.n	800a73c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d103      	bne.n	800a74e <xQueueGenericSend+0x42>
 800a746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d101      	bne.n	800a752 <xQueueGenericSend+0x46>
 800a74e:	2301      	movs	r3, #1
 800a750:	e000      	b.n	800a754 <xQueueGenericSend+0x48>
 800a752:	2300      	movs	r3, #0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10b      	bne.n	800a770 <xQueueGenericSend+0x64>
	__asm volatile
 800a758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a76a:	bf00      	nop
 800a76c:	bf00      	nop
 800a76e:	e7fd      	b.n	800a76c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	2b02      	cmp	r3, #2
 800a774:	d103      	bne.n	800a77e <xQueueGenericSend+0x72>
 800a776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d101      	bne.n	800a782 <xQueueGenericSend+0x76>
 800a77e:	2301      	movs	r3, #1
 800a780:	e000      	b.n	800a784 <xQueueGenericSend+0x78>
 800a782:	2300      	movs	r3, #0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10b      	bne.n	800a7a0 <xQueueGenericSend+0x94>
	__asm volatile
 800a788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a78c:	f383 8811 	msr	BASEPRI, r3
 800a790:	f3bf 8f6f 	isb	sy
 800a794:	f3bf 8f4f 	dsb	sy
 800a798:	623b      	str	r3, [r7, #32]
}
 800a79a:	bf00      	nop
 800a79c:	bf00      	nop
 800a79e:	e7fd      	b.n	800a79c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7a0:	f001 faf6 	bl	800bd90 <xTaskGetSchedulerState>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d102      	bne.n	800a7b0 <xQueueGenericSend+0xa4>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d101      	bne.n	800a7b4 <xQueueGenericSend+0xa8>
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e000      	b.n	800a7b6 <xQueueGenericSend+0xaa>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10b      	bne.n	800a7d2 <xQueueGenericSend+0xc6>
	__asm volatile
 800a7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	61fb      	str	r3, [r7, #28]
}
 800a7cc:	bf00      	nop
 800a7ce:	bf00      	nop
 800a7d0:	e7fd      	b.n	800a7ce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7d2:	f002 f929 	bl	800ca28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d302      	bcc.n	800a7e8 <xQueueGenericSend+0xdc>
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d129      	bne.n	800a83c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7e8:	683a      	ldr	r2, [r7, #0]
 800a7ea:	68b9      	ldr	r1, [r7, #8]
 800a7ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7ee:	f000 fa0f 	bl	800ac10 <prvCopyDataToQueue>
 800a7f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d010      	beq.n	800a81e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fe:	3324      	adds	r3, #36	@ 0x24
 800a800:	4618      	mov	r0, r3
 800a802:	f001 f8ff 	bl	800ba04 <xTaskRemoveFromEventList>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d013      	beq.n	800a834 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a80c:	4b3f      	ldr	r3, [pc, #252]	@ (800a90c <xQueueGenericSend+0x200>)
 800a80e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	f3bf 8f4f 	dsb	sy
 800a818:	f3bf 8f6f 	isb	sy
 800a81c:	e00a      	b.n	800a834 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a81e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a820:	2b00      	cmp	r3, #0
 800a822:	d007      	beq.n	800a834 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a824:	4b39      	ldr	r3, [pc, #228]	@ (800a90c <xQueueGenericSend+0x200>)
 800a826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a82a:	601a      	str	r2, [r3, #0]
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a834:	f002 f92a 	bl	800ca8c <vPortExitCritical>
				return pdPASS;
 800a838:	2301      	movs	r3, #1
 800a83a:	e063      	b.n	800a904 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d103      	bne.n	800a84a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a842:	f002 f923 	bl	800ca8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a846:	2300      	movs	r3, #0
 800a848:	e05c      	b.n	800a904 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a84a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d106      	bne.n	800a85e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a850:	f107 0314 	add.w	r3, r7, #20
 800a854:	4618      	mov	r0, r3
 800a856:	f001 f939 	bl	800bacc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a85a:	2301      	movs	r3, #1
 800a85c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a85e:	f002 f915 	bl	800ca8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a862:	f000 fda7 	bl	800b3b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a866:	f002 f8df 	bl	800ca28 <vPortEnterCritical>
 800a86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a86c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a870:	b25b      	sxtb	r3, r3
 800a872:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a876:	d103      	bne.n	800a880 <xQueueGenericSend+0x174>
 800a878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a882:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a886:	b25b      	sxtb	r3, r3
 800a888:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a88c:	d103      	bne.n	800a896 <xQueueGenericSend+0x18a>
 800a88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a890:	2200      	movs	r2, #0
 800a892:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a896:	f002 f8f9 	bl	800ca8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a89a:	1d3a      	adds	r2, r7, #4
 800a89c:	f107 0314 	add.w	r3, r7, #20
 800a8a0:	4611      	mov	r1, r2
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f001 f928 	bl	800baf8 <xTaskCheckForTimeOut>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d124      	bne.n	800a8f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a8ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8b0:	f000 faa6 	bl	800ae00 <prvIsQueueFull>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d018      	beq.n	800a8ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8bc:	3310      	adds	r3, #16
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f001 f84c 	bl	800b960 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a8c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8ca:	f000 fa31 	bl	800ad30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a8ce:	f000 fd7f 	bl	800b3d0 <xTaskResumeAll>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f47f af7c 	bne.w	800a7d2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a8da:	4b0c      	ldr	r3, [pc, #48]	@ (800a90c <xQueueGenericSend+0x200>)
 800a8dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8e0:	601a      	str	r2, [r3, #0]
 800a8e2:	f3bf 8f4f 	dsb	sy
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	e772      	b.n	800a7d2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a8ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8ee:	f000 fa1f 	bl	800ad30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8f2:	f000 fd6d 	bl	800b3d0 <xTaskResumeAll>
 800a8f6:	e76c      	b.n	800a7d2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a8f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8fa:	f000 fa19 	bl	800ad30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8fe:	f000 fd67 	bl	800b3d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a902:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a904:	4618      	mov	r0, r3
 800a906:	3738      	adds	r7, #56	@ 0x38
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	e000ed04 	.word	0xe000ed04

0800a910 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b090      	sub	sp, #64	@ 0x40
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
 800a91c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10b      	bne.n	800a940 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92c:	f383 8811 	msr	BASEPRI, r3
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a93a:	bf00      	nop
 800a93c:	bf00      	nop
 800a93e:	e7fd      	b.n	800a93c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d103      	bne.n	800a94e <xQueueGenericSendFromISR+0x3e>
 800a946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d101      	bne.n	800a952 <xQueueGenericSendFromISR+0x42>
 800a94e:	2301      	movs	r3, #1
 800a950:	e000      	b.n	800a954 <xQueueGenericSendFromISR+0x44>
 800a952:	2300      	movs	r3, #0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10b      	bne.n	800a970 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a95c:	f383 8811 	msr	BASEPRI, r3
 800a960:	f3bf 8f6f 	isb	sy
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a96a:	bf00      	nop
 800a96c:	bf00      	nop
 800a96e:	e7fd      	b.n	800a96c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	2b02      	cmp	r3, #2
 800a974:	d103      	bne.n	800a97e <xQueueGenericSendFromISR+0x6e>
 800a976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d101      	bne.n	800a982 <xQueueGenericSendFromISR+0x72>
 800a97e:	2301      	movs	r3, #1
 800a980:	e000      	b.n	800a984 <xQueueGenericSendFromISR+0x74>
 800a982:	2300      	movs	r3, #0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d10b      	bne.n	800a9a0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a98c:	f383 8811 	msr	BASEPRI, r3
 800a990:	f3bf 8f6f 	isb	sy
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	623b      	str	r3, [r7, #32]
}
 800a99a:	bf00      	nop
 800a99c:	bf00      	nop
 800a99e:	e7fd      	b.n	800a99c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9a0:	f002 f922 	bl	800cbe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a9a4:	f3ef 8211 	mrs	r2, BASEPRI
 800a9a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ac:	f383 8811 	msr	BASEPRI, r3
 800a9b0:	f3bf 8f6f 	isb	sy
 800a9b4:	f3bf 8f4f 	dsb	sy
 800a9b8:	61fa      	str	r2, [r7, #28]
 800a9ba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a9bc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9be:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d302      	bcc.n	800a9d2 <xQueueGenericSendFromISR+0xc2>
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	d12f      	bne.n	800aa32 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9e2:	683a      	ldr	r2, [r7, #0]
 800a9e4:	68b9      	ldr	r1, [r7, #8]
 800a9e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a9e8:	f000 f912 	bl	800ac10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a9ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a9f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9f4:	d112      	bne.n	800aa1c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d016      	beq.n	800aa2c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa00:	3324      	adds	r3, #36	@ 0x24
 800aa02:	4618      	mov	r0, r3
 800aa04:	f000 fffe 	bl	800ba04 <xTaskRemoveFromEventList>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00e      	beq.n	800aa2c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00b      	beq.n	800aa2c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	601a      	str	r2, [r3, #0]
 800aa1a:	e007      	b.n	800aa2c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800aa20:	3301      	adds	r3, #1
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	b25a      	sxtb	r2, r3
 800aa26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800aa30:	e001      	b.n	800aa36 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa32:	2300      	movs	r3, #0
 800aa34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa38:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3740      	adds	r7, #64	@ 0x40
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b08c      	sub	sp, #48	@ 0x30
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d10b      	bne.n	800aa7e <xQueueReceive+0x32>
	__asm volatile
 800aa66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa6a:	f383 8811 	msr	BASEPRI, r3
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	623b      	str	r3, [r7, #32]
}
 800aa78:	bf00      	nop
 800aa7a:	bf00      	nop
 800aa7c:	e7fd      	b.n	800aa7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d103      	bne.n	800aa8c <xQueueReceive+0x40>
 800aa84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d101      	bne.n	800aa90 <xQueueReceive+0x44>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e000      	b.n	800aa92 <xQueueReceive+0x46>
 800aa90:	2300      	movs	r3, #0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d10b      	bne.n	800aaae <xQueueReceive+0x62>
	__asm volatile
 800aa96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa9a:	f383 8811 	msr	BASEPRI, r3
 800aa9e:	f3bf 8f6f 	isb	sy
 800aaa2:	f3bf 8f4f 	dsb	sy
 800aaa6:	61fb      	str	r3, [r7, #28]
}
 800aaa8:	bf00      	nop
 800aaaa:	bf00      	nop
 800aaac:	e7fd      	b.n	800aaaa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aaae:	f001 f96f 	bl	800bd90 <xTaskGetSchedulerState>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d102      	bne.n	800aabe <xQueueReceive+0x72>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d101      	bne.n	800aac2 <xQueueReceive+0x76>
 800aabe:	2301      	movs	r3, #1
 800aac0:	e000      	b.n	800aac4 <xQueueReceive+0x78>
 800aac2:	2300      	movs	r3, #0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10b      	bne.n	800aae0 <xQueueReceive+0x94>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aacc:	f383 8811 	msr	BASEPRI, r3
 800aad0:	f3bf 8f6f 	isb	sy
 800aad4:	f3bf 8f4f 	dsb	sy
 800aad8:	61bb      	str	r3, [r7, #24]
}
 800aada:	bf00      	nop
 800aadc:	bf00      	nop
 800aade:	e7fd      	b.n	800aadc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aae0:	f001 ffa2 	bl	800ca28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aaea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d01f      	beq.n	800ab30 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aaf0:	68b9      	ldr	r1, [r7, #8]
 800aaf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aaf4:	f000 f8f6 	bl	800ace4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aaf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafa:	1e5a      	subs	r2, r3, #1
 800aafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aafe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d00f      	beq.n	800ab28 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab0a:	3310      	adds	r3, #16
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f000 ff79 	bl	800ba04 <xTaskRemoveFromEventList>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d007      	beq.n	800ab28 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab18:	4b3c      	ldr	r3, [pc, #240]	@ (800ac0c <xQueueReceive+0x1c0>)
 800ab1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab1e:	601a      	str	r2, [r3, #0]
 800ab20:	f3bf 8f4f 	dsb	sy
 800ab24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab28:	f001 ffb0 	bl	800ca8c <vPortExitCritical>
				return pdPASS;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e069      	b.n	800ac04 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d103      	bne.n	800ab3e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab36:	f001 ffa9 	bl	800ca8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	e062      	b.n	800ac04 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d106      	bne.n	800ab52 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab44:	f107 0310 	add.w	r3, r7, #16
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f000 ffbf 	bl	800bacc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab52:	f001 ff9b 	bl	800ca8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab56:	f000 fc2d 	bl	800b3b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab5a:	f001 ff65 	bl	800ca28 <vPortEnterCritical>
 800ab5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab64:	b25b      	sxtb	r3, r3
 800ab66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab6a:	d103      	bne.n	800ab74 <xQueueReceive+0x128>
 800ab6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab7a:	b25b      	sxtb	r3, r3
 800ab7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab80:	d103      	bne.n	800ab8a <xQueueReceive+0x13e>
 800ab82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab8a:	f001 ff7f 	bl	800ca8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab8e:	1d3a      	adds	r2, r7, #4
 800ab90:	f107 0310 	add.w	r3, r7, #16
 800ab94:	4611      	mov	r1, r2
 800ab96:	4618      	mov	r0, r3
 800ab98:	f000 ffae 	bl	800baf8 <xTaskCheckForTimeOut>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d123      	bne.n	800abea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aba2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aba4:	f000 f916 	bl	800add4 <prvIsQueueEmpty>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d017      	beq.n	800abde <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb0:	3324      	adds	r3, #36	@ 0x24
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	4611      	mov	r1, r2
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 fed2 	bl	800b960 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abbe:	f000 f8b7 	bl	800ad30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abc2:	f000 fc05 	bl	800b3d0 <xTaskResumeAll>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d189      	bne.n	800aae0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800abcc:	4b0f      	ldr	r3, [pc, #60]	@ (800ac0c <xQueueReceive+0x1c0>)
 800abce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abd2:	601a      	str	r2, [r3, #0]
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	e780      	b.n	800aae0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800abde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abe0:	f000 f8a6 	bl	800ad30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abe4:	f000 fbf4 	bl	800b3d0 <xTaskResumeAll>
 800abe8:	e77a      	b.n	800aae0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800abea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abec:	f000 f8a0 	bl	800ad30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abf0:	f000 fbee 	bl	800b3d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abf6:	f000 f8ed 	bl	800add4 <prvIsQueueEmpty>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f43f af6f 	beq.w	800aae0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac02:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3730      	adds	r7, #48	@ 0x30
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	e000ed04 	.word	0xe000ed04

0800ac10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b086      	sub	sp, #24
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10d      	bne.n	800ac4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d14d      	bne.n	800acd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f001 f8c6 	bl	800bdcc <xTaskPriorityDisinherit>
 800ac40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2200      	movs	r2, #0
 800ac46:	609a      	str	r2, [r3, #8]
 800ac48:	e043      	b.n	800acd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d119      	bne.n	800ac84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6858      	ldr	r0, [r3, #4]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac58:	461a      	mov	r2, r3
 800ac5a:	68b9      	ldr	r1, [r7, #8]
 800ac5c:	f002 fa9e 	bl	800d19c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	685a      	ldr	r2, [r3, #4]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac68:	441a      	add	r2, r3
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	685a      	ldr	r2, [r3, #4]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d32b      	bcc.n	800acd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	605a      	str	r2, [r3, #4]
 800ac82:	e026      	b.n	800acd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	68d8      	ldr	r0, [r3, #12]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	68b9      	ldr	r1, [r7, #8]
 800ac90:	f002 fa84 	bl	800d19c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	68da      	ldr	r2, [r3, #12]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac9c:	425b      	negs	r3, r3
 800ac9e:	441a      	add	r2, r3
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	68da      	ldr	r2, [r3, #12]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	429a      	cmp	r2, r3
 800acae:	d207      	bcs.n	800acc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	689a      	ldr	r2, [r3, #8]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acb8:	425b      	negs	r3, r3
 800acba:	441a      	add	r2, r3
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	d105      	bne.n	800acd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d002      	beq.n	800acd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	3b01      	subs	r3, #1
 800acd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	1c5a      	adds	r2, r3, #1
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800acda:	697b      	ldr	r3, [r7, #20]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3718      	adds	r7, #24
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d018      	beq.n	800ad28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	68da      	ldr	r2, [r3, #12]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acfe:	441a      	add	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	68da      	ldr	r2, [r3, #12]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d303      	bcc.n	800ad18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	68d9      	ldr	r1, [r3, #12]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad20:	461a      	mov	r2, r3
 800ad22:	6838      	ldr	r0, [r7, #0]
 800ad24:	f002 fa3a 	bl	800d19c <memcpy>
	}
}
 800ad28:	bf00      	nop
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad38:	f001 fe76 	bl	800ca28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad44:	e011      	b.n	800ad6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d012      	beq.n	800ad74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	3324      	adds	r3, #36	@ 0x24
 800ad52:	4618      	mov	r0, r3
 800ad54:	f000 fe56 	bl	800ba04 <xTaskRemoveFromEventList>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d001      	beq.n	800ad62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad5e:	f000 ff2f 	bl	800bbc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad62:	7bfb      	ldrb	r3, [r7, #15]
 800ad64:	3b01      	subs	r3, #1
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	dce9      	bgt.n	800ad46 <prvUnlockQueue+0x16>
 800ad72:	e000      	b.n	800ad76 <prvUnlockQueue+0x46>
					break;
 800ad74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	22ff      	movs	r2, #255	@ 0xff
 800ad7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ad7e:	f001 fe85 	bl	800ca8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad82:	f001 fe51 	bl	800ca28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad8e:	e011      	b.n	800adb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d012      	beq.n	800adbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	3310      	adds	r3, #16
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f000 fe31 	bl	800ba04 <xTaskRemoveFromEventList>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d001      	beq.n	800adac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ada8:	f000 ff0a 	bl	800bbc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800adac:	7bbb      	ldrb	r3, [r7, #14]
 800adae:	3b01      	subs	r3, #1
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800adb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	dce9      	bgt.n	800ad90 <prvUnlockQueue+0x60>
 800adbc:	e000      	b.n	800adc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800adbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	22ff      	movs	r2, #255	@ 0xff
 800adc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800adc8:	f001 fe60 	bl	800ca8c <vPortExitCritical>
}
 800adcc:	bf00      	nop
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800addc:	f001 fe24 	bl	800ca28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d102      	bne.n	800adee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ade8:	2301      	movs	r3, #1
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	e001      	b.n	800adf2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800adee:	2300      	movs	r3, #0
 800adf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800adf2:	f001 fe4b 	bl	800ca8c <vPortExitCritical>

	return xReturn;
 800adf6:	68fb      	ldr	r3, [r7, #12]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae08:	f001 fe0e 	bl	800ca28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d102      	bne.n	800ae1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	60fb      	str	r3, [r7, #12]
 800ae1c:	e001      	b.n	800ae22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae22:	f001 fe33 	bl	800ca8c <vPortExitCritical>

	return xReturn;
 800ae26:	68fb      	ldr	r3, [r7, #12]
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae30:	b480      	push	{r7}
 800ae32:	b085      	sub	sp, #20
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	60fb      	str	r3, [r7, #12]
 800ae3e:	e014      	b.n	800ae6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae40:	4a0f      	ldr	r2, [pc, #60]	@ (800ae80 <vQueueAddToRegistry+0x50>)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d10b      	bne.n	800ae64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ae4c:	490c      	ldr	r1, [pc, #48]	@ (800ae80 <vQueueAddToRegistry+0x50>)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	683a      	ldr	r2, [r7, #0]
 800ae52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ae56:	4a0a      	ldr	r2, [pc, #40]	@ (800ae80 <vQueueAddToRegistry+0x50>)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	00db      	lsls	r3, r3, #3
 800ae5c:	4413      	add	r3, r2
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ae62:	e006      	b.n	800ae72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	3301      	adds	r3, #1
 800ae68:	60fb      	str	r3, [r7, #12]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2b07      	cmp	r3, #7
 800ae6e:	d9e7      	bls.n	800ae40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae70:	bf00      	nop
 800ae72:	bf00      	nop
 800ae74:	3714      	adds	r7, #20
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	200014cc 	.word	0x200014cc

0800ae84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ae94:	f001 fdc8 	bl	800ca28 <vPortEnterCritical>
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae9e:	b25b      	sxtb	r3, r3
 800aea0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aea4:	d103      	bne.n	800aeae <vQueueWaitForMessageRestricted+0x2a>
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aeb4:	b25b      	sxtb	r3, r3
 800aeb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aeba:	d103      	bne.n	800aec4 <vQueueWaitForMessageRestricted+0x40>
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aec4:	f001 fde2 	bl	800ca8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d106      	bne.n	800aede <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	3324      	adds	r3, #36	@ 0x24
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	68b9      	ldr	r1, [r7, #8]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f000 fd67 	bl	800b9ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aede:	6978      	ldr	r0, [r7, #20]
 800aee0:	f7ff ff26 	bl	800ad30 <prvUnlockQueue>
	}
 800aee4:	bf00      	nop
 800aee6:	3718      	adds	r7, #24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08e      	sub	sp, #56	@ 0x38
 800aef0:	af04      	add	r7, sp, #16
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
 800aef8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aefa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10b      	bne.n	800af18 <xTaskCreateStatic+0x2c>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	623b      	str	r3, [r7, #32]
}
 800af12:	bf00      	nop
 800af14:	bf00      	nop
 800af16:	e7fd      	b.n	800af14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800af18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10b      	bne.n	800af36 <xTaskCreateStatic+0x4a>
	__asm volatile
 800af1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af22:	f383 8811 	msr	BASEPRI, r3
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	61fb      	str	r3, [r7, #28]
}
 800af30:	bf00      	nop
 800af32:	bf00      	nop
 800af34:	e7fd      	b.n	800af32 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af36:	23a8      	movs	r3, #168	@ 0xa8
 800af38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	2ba8      	cmp	r3, #168	@ 0xa8
 800af3e:	d00b      	beq.n	800af58 <xTaskCreateStatic+0x6c>
	__asm volatile
 800af40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af44:	f383 8811 	msr	BASEPRI, r3
 800af48:	f3bf 8f6f 	isb	sy
 800af4c:	f3bf 8f4f 	dsb	sy
 800af50:	61bb      	str	r3, [r7, #24]
}
 800af52:	bf00      	nop
 800af54:	bf00      	nop
 800af56:	e7fd      	b.n	800af54 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800af58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800af5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d01e      	beq.n	800af9e <xTaskCreateStatic+0xb2>
 800af60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af62:	2b00      	cmp	r3, #0
 800af64:	d01b      	beq.n	800af9e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af68:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800af6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800af6e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800af70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af72:	2202      	movs	r2, #2
 800af74:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800af78:	2300      	movs	r3, #0
 800af7a:	9303      	str	r3, [sp, #12]
 800af7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7e:	9302      	str	r3, [sp, #8]
 800af80:	f107 0314 	add.w	r3, r7, #20
 800af84:	9301      	str	r3, [sp, #4]
 800af86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	68b9      	ldr	r1, [r7, #8]
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f000 f851 	bl	800b038 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800af98:	f000 f8f6 	bl	800b188 <prvAddNewTaskToReadyList>
 800af9c:	e001      	b.n	800afa2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800af9e:	2300      	movs	r3, #0
 800afa0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800afa2:	697b      	ldr	r3, [r7, #20]
	}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3728      	adds	r7, #40	@ 0x28
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800afac:	b580      	push	{r7, lr}
 800afae:	b08c      	sub	sp, #48	@ 0x30
 800afb0:	af04      	add	r7, sp, #16
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	603b      	str	r3, [r7, #0]
 800afb8:	4613      	mov	r3, r2
 800afba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800afbc:	88fb      	ldrh	r3, [r7, #6]
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	4618      	mov	r0, r3
 800afc2:	f001 fe53 	bl	800cc6c <pvPortMalloc>
 800afc6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00e      	beq.n	800afec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800afce:	20a8      	movs	r0, #168	@ 0xa8
 800afd0:	f001 fe4c 	bl	800cc6c <pvPortMalloc>
 800afd4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d003      	beq.n	800afe4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	631a      	str	r2, [r3, #48]	@ 0x30
 800afe2:	e005      	b.n	800aff0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800afe4:	6978      	ldr	r0, [r7, #20]
 800afe6:	f001 ff0f 	bl	800ce08 <vPortFree>
 800afea:	e001      	b.n	800aff0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800afec:	2300      	movs	r3, #0
 800afee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d017      	beq.n	800b026 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	2200      	movs	r2, #0
 800affa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800affe:	88fa      	ldrh	r2, [r7, #6]
 800b000:	2300      	movs	r3, #0
 800b002:	9303      	str	r3, [sp, #12]
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	9302      	str	r3, [sp, #8]
 800b008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b00a:	9301      	str	r3, [sp, #4]
 800b00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	68b9      	ldr	r1, [r7, #8]
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	f000 f80f 	bl	800b038 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b01a:	69f8      	ldr	r0, [r7, #28]
 800b01c:	f000 f8b4 	bl	800b188 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b020:	2301      	movs	r3, #1
 800b022:	61bb      	str	r3, [r7, #24]
 800b024:	e002      	b.n	800b02c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b026:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b02a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b02c:	69bb      	ldr	r3, [r7, #24]
	}
 800b02e:	4618      	mov	r0, r3
 800b030:	3720      	adds	r7, #32
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
	...

0800b038 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b088      	sub	sp, #32
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
 800b044:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b048:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	461a      	mov	r2, r3
 800b050:	21a5      	movs	r1, #165	@ 0xa5
 800b052:	f002 f819 	bl	800d088 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b058:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b060:	3b01      	subs	r3, #1
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	4413      	add	r3, r2
 800b066:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	f023 0307 	bic.w	r3, r3, #7
 800b06e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	f003 0307 	and.w	r3, r3, #7
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00b      	beq.n	800b092 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b07e:	f383 8811 	msr	BASEPRI, r3
 800b082:	f3bf 8f6f 	isb	sy
 800b086:	f3bf 8f4f 	dsb	sy
 800b08a:	617b      	str	r3, [r7, #20]
}
 800b08c:	bf00      	nop
 800b08e:	bf00      	nop
 800b090:	e7fd      	b.n	800b08e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d01f      	beq.n	800b0d8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b098:	2300      	movs	r3, #0
 800b09a:	61fb      	str	r3, [r7, #28]
 800b09c:	e012      	b.n	800b0c4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	7819      	ldrb	r1, [r3, #0]
 800b0a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0a8:	69fb      	ldr	r3, [r7, #28]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	3334      	adds	r3, #52	@ 0x34
 800b0ae:	460a      	mov	r2, r1
 800b0b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b0b2:	68ba      	ldr	r2, [r7, #8]
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d006      	beq.n	800b0cc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	61fb      	str	r3, [r7, #28]
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	2b0f      	cmp	r3, #15
 800b0c8:	d9e9      	bls.n	800b09e <prvInitialiseNewTask+0x66>
 800b0ca:	e000      	b.n	800b0ce <prvInitialiseNewTask+0x96>
			{
				break;
 800b0cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b0d6:	e003      	b.n	800b0e0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e2:	2b37      	cmp	r3, #55	@ 0x37
 800b0e4:	d901      	bls.n	800b0ea <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b0e6:	2337      	movs	r3, #55	@ 0x37
 800b0e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0f4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0fe:	3304      	adds	r3, #4
 800b100:	4618      	mov	r0, r3
 800b102:	f7ff f965 	bl	800a3d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b108:	3318      	adds	r3, #24
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7ff f960 	bl	800a3d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b114:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b118:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b11e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b124:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b128:	2200      	movs	r2, #0
 800b12a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b130:	2200      	movs	r2, #0
 800b132:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b138:	3354      	adds	r3, #84	@ 0x54
 800b13a:	224c      	movs	r2, #76	@ 0x4c
 800b13c:	2100      	movs	r1, #0
 800b13e:	4618      	mov	r0, r3
 800b140:	f001 ffa2 	bl	800d088 <memset>
 800b144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b146:	4a0d      	ldr	r2, [pc, #52]	@ (800b17c <prvInitialiseNewTask+0x144>)
 800b148:	659a      	str	r2, [r3, #88]	@ 0x58
 800b14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14c:	4a0c      	ldr	r2, [pc, #48]	@ (800b180 <prvInitialiseNewTask+0x148>)
 800b14e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b152:	4a0c      	ldr	r2, [pc, #48]	@ (800b184 <prvInitialiseNewTask+0x14c>)
 800b154:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b156:	683a      	ldr	r2, [r7, #0]
 800b158:	68f9      	ldr	r1, [r7, #12]
 800b15a:	69b8      	ldr	r0, [r7, #24]
 800b15c:	f001 fb36 	bl	800c7cc <pxPortInitialiseStack>
 800b160:	4602      	mov	r2, r0
 800b162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b164:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b16e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b170:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b172:	bf00      	nop
 800b174:	3720      	adds	r7, #32
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	20005760 	.word	0x20005760
 800b180:	200057c8 	.word	0x200057c8
 800b184:	20005830 	.word	0x20005830

0800b188 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b190:	f001 fc4a 	bl	800ca28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b194:	4b2d      	ldr	r3, [pc, #180]	@ (800b24c <prvAddNewTaskToReadyList+0xc4>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	3301      	adds	r3, #1
 800b19a:	4a2c      	ldr	r2, [pc, #176]	@ (800b24c <prvAddNewTaskToReadyList+0xc4>)
 800b19c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b19e:	4b2c      	ldr	r3, [pc, #176]	@ (800b250 <prvAddNewTaskToReadyList+0xc8>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d109      	bne.n	800b1ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b1a6:	4a2a      	ldr	r2, [pc, #168]	@ (800b250 <prvAddNewTaskToReadyList+0xc8>)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b1ac:	4b27      	ldr	r3, [pc, #156]	@ (800b24c <prvAddNewTaskToReadyList+0xc4>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d110      	bne.n	800b1d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b1b4:	f000 fd28 	bl	800bc08 <prvInitialiseTaskLists>
 800b1b8:	e00d      	b.n	800b1d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b1ba:	4b26      	ldr	r3, [pc, #152]	@ (800b254 <prvAddNewTaskToReadyList+0xcc>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d109      	bne.n	800b1d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b1c2:	4b23      	ldr	r3, [pc, #140]	@ (800b250 <prvAddNewTaskToReadyList+0xc8>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d802      	bhi.n	800b1d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b1d0:	4a1f      	ldr	r2, [pc, #124]	@ (800b250 <prvAddNewTaskToReadyList+0xc8>)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b1d6:	4b20      	ldr	r3, [pc, #128]	@ (800b258 <prvAddNewTaskToReadyList+0xd0>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	4a1e      	ldr	r2, [pc, #120]	@ (800b258 <prvAddNewTaskToReadyList+0xd0>)
 800b1de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b1e0:	4b1d      	ldr	r3, [pc, #116]	@ (800b258 <prvAddNewTaskToReadyList+0xd0>)
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ec:	4b1b      	ldr	r3, [pc, #108]	@ (800b25c <prvAddNewTaskToReadyList+0xd4>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d903      	bls.n	800b1fc <prvAddNewTaskToReadyList+0x74>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1f8:	4a18      	ldr	r2, [pc, #96]	@ (800b25c <prvAddNewTaskToReadyList+0xd4>)
 800b1fa:	6013      	str	r3, [r2, #0]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b200:	4613      	mov	r3, r2
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	4413      	add	r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4a15      	ldr	r2, [pc, #84]	@ (800b260 <prvAddNewTaskToReadyList+0xd8>)
 800b20a:	441a      	add	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	3304      	adds	r3, #4
 800b210:	4619      	mov	r1, r3
 800b212:	4610      	mov	r0, r2
 800b214:	f7ff f8e9 	bl	800a3ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b218:	f001 fc38 	bl	800ca8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b21c:	4b0d      	ldr	r3, [pc, #52]	@ (800b254 <prvAddNewTaskToReadyList+0xcc>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d00e      	beq.n	800b242 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b224:	4b0a      	ldr	r3, [pc, #40]	@ (800b250 <prvAddNewTaskToReadyList+0xc8>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b22e:	429a      	cmp	r2, r3
 800b230:	d207      	bcs.n	800b242 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b232:	4b0c      	ldr	r3, [pc, #48]	@ (800b264 <prvAddNewTaskToReadyList+0xdc>)
 800b234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b238:	601a      	str	r2, [r3, #0]
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b242:	bf00      	nop
 800b244:	3708      	adds	r7, #8
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	200019e0 	.word	0x200019e0
 800b250:	2000150c 	.word	0x2000150c
 800b254:	200019ec 	.word	0x200019ec
 800b258:	200019fc 	.word	0x200019fc
 800b25c:	200019e8 	.word	0x200019e8
 800b260:	20001510 	.word	0x20001510
 800b264:	e000ed04 	.word	0xe000ed04

0800b268 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b270:	2300      	movs	r3, #0
 800b272:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d018      	beq.n	800b2ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b27a:	4b14      	ldr	r3, [pc, #80]	@ (800b2cc <vTaskDelay+0x64>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d00b      	beq.n	800b29a <vTaskDelay+0x32>
	__asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	60bb      	str	r3, [r7, #8]
}
 800b294:	bf00      	nop
 800b296:	bf00      	nop
 800b298:	e7fd      	b.n	800b296 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b29a:	f000 f88b 	bl	800b3b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b29e:	2100      	movs	r1, #0
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 fee5 	bl	800c070 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b2a6:	f000 f893 	bl	800b3d0 <xTaskResumeAll>
 800b2aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d107      	bne.n	800b2c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b2b2:	4b07      	ldr	r3, [pc, #28]	@ (800b2d0 <vTaskDelay+0x68>)
 800b2b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2b8:	601a      	str	r2, [r3, #0]
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2c2:	bf00      	nop
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	20001a08 	.word	0x20001a08
 800b2d0:	e000ed04 	.word	0xe000ed04

0800b2d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b08a      	sub	sp, #40	@ 0x28
 800b2d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b2e2:	463a      	mov	r2, r7
 800b2e4:	1d39      	adds	r1, r7, #4
 800b2e6:	f107 0308 	add.w	r3, r7, #8
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7ff f81c 	bl	800a328 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b2f0:	6839      	ldr	r1, [r7, #0]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	68ba      	ldr	r2, [r7, #8]
 800b2f6:	9202      	str	r2, [sp, #8]
 800b2f8:	9301      	str	r3, [sp, #4]
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	9300      	str	r3, [sp, #0]
 800b2fe:	2300      	movs	r3, #0
 800b300:	460a      	mov	r2, r1
 800b302:	4924      	ldr	r1, [pc, #144]	@ (800b394 <vTaskStartScheduler+0xc0>)
 800b304:	4824      	ldr	r0, [pc, #144]	@ (800b398 <vTaskStartScheduler+0xc4>)
 800b306:	f7ff fdf1 	bl	800aeec <xTaskCreateStatic>
 800b30a:	4603      	mov	r3, r0
 800b30c:	4a23      	ldr	r2, [pc, #140]	@ (800b39c <vTaskStartScheduler+0xc8>)
 800b30e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b310:	4b22      	ldr	r3, [pc, #136]	@ (800b39c <vTaskStartScheduler+0xc8>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d002      	beq.n	800b31e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b318:	2301      	movs	r3, #1
 800b31a:	617b      	str	r3, [r7, #20]
 800b31c:	e001      	b.n	800b322 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b31e:	2300      	movs	r3, #0
 800b320:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	2b01      	cmp	r3, #1
 800b326:	d102      	bne.n	800b32e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b328:	f000 fef6 	bl	800c118 <xTimerCreateTimerTask>
 800b32c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	2b01      	cmp	r3, #1
 800b332:	d11b      	bne.n	800b36c <vTaskStartScheduler+0x98>
	__asm volatile
 800b334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b338:	f383 8811 	msr	BASEPRI, r3
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f3bf 8f4f 	dsb	sy
 800b344:	613b      	str	r3, [r7, #16]
}
 800b346:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b348:	4b15      	ldr	r3, [pc, #84]	@ (800b3a0 <vTaskStartScheduler+0xcc>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	3354      	adds	r3, #84	@ 0x54
 800b34e:	4a15      	ldr	r2, [pc, #84]	@ (800b3a4 <vTaskStartScheduler+0xd0>)
 800b350:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b352:	4b15      	ldr	r3, [pc, #84]	@ (800b3a8 <vTaskStartScheduler+0xd4>)
 800b354:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b358:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b35a:	4b14      	ldr	r3, [pc, #80]	@ (800b3ac <vTaskStartScheduler+0xd8>)
 800b35c:	2201      	movs	r2, #1
 800b35e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b360:	4b13      	ldr	r3, [pc, #76]	@ (800b3b0 <vTaskStartScheduler+0xdc>)
 800b362:	2200      	movs	r2, #0
 800b364:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b366:	f001 fabb 	bl	800c8e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b36a:	e00f      	b.n	800b38c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b372:	d10b      	bne.n	800b38c <vTaskStartScheduler+0xb8>
	__asm volatile
 800b374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b378:	f383 8811 	msr	BASEPRI, r3
 800b37c:	f3bf 8f6f 	isb	sy
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	60fb      	str	r3, [r7, #12]
}
 800b386:	bf00      	nop
 800b388:	bf00      	nop
 800b38a:	e7fd      	b.n	800b388 <vTaskStartScheduler+0xb4>
}
 800b38c:	bf00      	nop
 800b38e:	3718      	adds	r7, #24
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	0800da9c 	.word	0x0800da9c
 800b398:	0800bbd9 	.word	0x0800bbd9
 800b39c:	20001a04 	.word	0x20001a04
 800b3a0:	2000150c 	.word	0x2000150c
 800b3a4:	2000002c 	.word	0x2000002c
 800b3a8:	20001a00 	.word	0x20001a00
 800b3ac:	200019ec 	.word	0x200019ec
 800b3b0:	200019e4 	.word	0x200019e4

0800b3b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b3b8:	4b04      	ldr	r3, [pc, #16]	@ (800b3cc <vTaskSuspendAll+0x18>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	4a03      	ldr	r2, [pc, #12]	@ (800b3cc <vTaskSuspendAll+0x18>)
 800b3c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b3c2:	bf00      	nop
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr
 800b3cc:	20001a08 	.word	0x20001a08

0800b3d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3de:	4b42      	ldr	r3, [pc, #264]	@ (800b4e8 <xTaskResumeAll+0x118>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d10b      	bne.n	800b3fe <xTaskResumeAll+0x2e>
	__asm volatile
 800b3e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ea:	f383 8811 	msr	BASEPRI, r3
 800b3ee:	f3bf 8f6f 	isb	sy
 800b3f2:	f3bf 8f4f 	dsb	sy
 800b3f6:	603b      	str	r3, [r7, #0]
}
 800b3f8:	bf00      	nop
 800b3fa:	bf00      	nop
 800b3fc:	e7fd      	b.n	800b3fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b3fe:	f001 fb13 	bl	800ca28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b402:	4b39      	ldr	r3, [pc, #228]	@ (800b4e8 <xTaskResumeAll+0x118>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3b01      	subs	r3, #1
 800b408:	4a37      	ldr	r2, [pc, #220]	@ (800b4e8 <xTaskResumeAll+0x118>)
 800b40a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b40c:	4b36      	ldr	r3, [pc, #216]	@ (800b4e8 <xTaskResumeAll+0x118>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d162      	bne.n	800b4da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b414:	4b35      	ldr	r3, [pc, #212]	@ (800b4ec <xTaskResumeAll+0x11c>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d05e      	beq.n	800b4da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b41c:	e02f      	b.n	800b47e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b41e:	4b34      	ldr	r3, [pc, #208]	@ (800b4f0 <xTaskResumeAll+0x120>)
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	3318      	adds	r3, #24
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7ff f83a 	bl	800a4a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	3304      	adds	r3, #4
 800b434:	4618      	mov	r0, r3
 800b436:	f7ff f835 	bl	800a4a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b43e:	4b2d      	ldr	r3, [pc, #180]	@ (800b4f4 <xTaskResumeAll+0x124>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	429a      	cmp	r2, r3
 800b444:	d903      	bls.n	800b44e <xTaskResumeAll+0x7e>
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b44a:	4a2a      	ldr	r2, [pc, #168]	@ (800b4f4 <xTaskResumeAll+0x124>)
 800b44c:	6013      	str	r3, [r2, #0]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b452:	4613      	mov	r3, r2
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	4413      	add	r3, r2
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	4a27      	ldr	r2, [pc, #156]	@ (800b4f8 <xTaskResumeAll+0x128>)
 800b45c:	441a      	add	r2, r3
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	3304      	adds	r3, #4
 800b462:	4619      	mov	r1, r3
 800b464:	4610      	mov	r0, r2
 800b466:	f7fe ffc0 	bl	800a3ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b46e:	4b23      	ldr	r3, [pc, #140]	@ (800b4fc <xTaskResumeAll+0x12c>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b474:	429a      	cmp	r2, r3
 800b476:	d302      	bcc.n	800b47e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b478:	4b21      	ldr	r3, [pc, #132]	@ (800b500 <xTaskResumeAll+0x130>)
 800b47a:	2201      	movs	r2, #1
 800b47c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b47e:	4b1c      	ldr	r3, [pc, #112]	@ (800b4f0 <xTaskResumeAll+0x120>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d1cb      	bne.n	800b41e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d001      	beq.n	800b490 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b48c:	f000 fc60 	bl	800bd50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b490:	4b1c      	ldr	r3, [pc, #112]	@ (800b504 <xTaskResumeAll+0x134>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d010      	beq.n	800b4be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b49c:	f000 f940 	bl	800b720 <xTaskIncrementTick>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d002      	beq.n	800b4ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b4a6:	4b16      	ldr	r3, [pc, #88]	@ (800b500 <xTaskResumeAll+0x130>)
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d1f1      	bne.n	800b49c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b4b8:	4b12      	ldr	r3, [pc, #72]	@ (800b504 <xTaskResumeAll+0x134>)
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b4be:	4b10      	ldr	r3, [pc, #64]	@ (800b500 <xTaskResumeAll+0x130>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d009      	beq.n	800b4da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b4ca:	4b0f      	ldr	r3, [pc, #60]	@ (800b508 <xTaskResumeAll+0x138>)
 800b4cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4d0:	601a      	str	r2, [r3, #0]
 800b4d2:	f3bf 8f4f 	dsb	sy
 800b4d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4da:	f001 fad7 	bl	800ca8c <vPortExitCritical>

	return xAlreadyYielded;
 800b4de:	68bb      	ldr	r3, [r7, #8]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	20001a08 	.word	0x20001a08
 800b4ec:	200019e0 	.word	0x200019e0
 800b4f0:	200019a0 	.word	0x200019a0
 800b4f4:	200019e8 	.word	0x200019e8
 800b4f8:	20001510 	.word	0x20001510
 800b4fc:	2000150c 	.word	0x2000150c
 800b500:	200019f4 	.word	0x200019f4
 800b504:	200019f0 	.word	0x200019f0
 800b508:	e000ed04 	.word	0xe000ed04

0800b50c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b512:	4b05      	ldr	r3, [pc, #20]	@ (800b528 <xTaskGetTickCount+0x1c>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b518:	687b      	ldr	r3, [r7, #4]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	370c      	adds	r7, #12
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr
 800b526:	bf00      	nop
 800b528:	200019e4 	.word	0x200019e4

0800b52c <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d102      	bne.n	800b540 <pcTaskGetName+0x14>
 800b53a:	4b0e      	ldr	r3, [pc, #56]	@ (800b574 <pcTaskGetName+0x48>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	e000      	b.n	800b542 <pcTaskGetName+0x16>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d10b      	bne.n	800b562 <pcTaskGetName+0x36>
	__asm volatile
 800b54a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b54e:	f383 8811 	msr	BASEPRI, r3
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	f3bf 8f4f 	dsb	sy
 800b55a:	60bb      	str	r3, [r7, #8]
}
 800b55c:	bf00      	nop
 800b55e:	bf00      	nop
 800b560:	e7fd      	b.n	800b55e <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	3334      	adds	r3, #52	@ 0x34
}
 800b566:	4618      	mov	r0, r3
 800b568:	3714      	adds	r7, #20
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	2000150c 	.word	0x2000150c

0800b578 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800b578:	b480      	push	{r7}
 800b57a:	b08b      	sub	sp, #44	@ 0x2c
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800b582:	2300      	movs	r3, #0
 800b584:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d05b      	beq.n	800b646 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	61bb      	str	r3, [r7, #24]
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	605a      	str	r2, [r3, #4]
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	685a      	ldr	r2, [r3, #4]
 800b5a0:	69bb      	ldr	r3, [r7, #24]
 800b5a2:	3308      	adds	r3, #8
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d104      	bne.n	800b5b2 <prvSearchForNameWithinSingleList+0x3a>
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	685a      	ldr	r2, [r3, #4]
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	605a      	str	r2, [r3, #4]
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	613b      	str	r3, [r7, #16]
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	685a      	ldr	r2, [r3, #4]
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	605a      	str	r2, [r3, #4]
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	3308      	adds	r3, #8
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d104      	bne.n	800b5de <prvSearchForNameWithinSingleList+0x66>
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	685a      	ldr	r2, [r3, #4]
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	605a      	str	r2, [r3, #4]
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	623b      	str	r3, [r7, #32]
 800b5ee:	e01c      	b.n	800b62a <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	6a3b      	ldr	r3, [r7, #32]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	3334      	adds	r3, #52	@ 0x34
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800b5fc:	683a      	ldr	r2, [r7, #0]
 800b5fe:	6a3b      	ldr	r3, [r7, #32]
 800b600:	4413      	add	r3, r2
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	7afa      	ldrb	r2, [r7, #11]
 800b606:	429a      	cmp	r2, r3
 800b608:	d002      	beq.n	800b610 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800b60a:	2301      	movs	r3, #1
 800b60c:	61fb      	str	r3, [r7, #28]
 800b60e:	e006      	b.n	800b61e <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800b610:	7afb      	ldrb	r3, [r7, #11]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d103      	bne.n	800b61e <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800b61a:	2301      	movs	r3, #1
 800b61c:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d106      	bne.n	800b632 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b624:	6a3b      	ldr	r3, [r7, #32]
 800b626:	3301      	adds	r3, #1
 800b628:	623b      	str	r3, [r7, #32]
 800b62a:	6a3b      	ldr	r3, [r7, #32]
 800b62c:	2b0f      	cmp	r3, #15
 800b62e:	d9df      	bls.n	800b5f0 <prvSearchForNameWithinSingleList+0x78>
 800b630:	e000      	b.n	800b634 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800b632:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800b634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b636:	2b00      	cmp	r3, #0
 800b638:	d104      	bne.n	800b644 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d1bb      	bne.n	800b5ba <prvSearchForNameWithinSingleList+0x42>
 800b642:	e000      	b.n	800b646 <prvSearchForNameWithinSingleList+0xce>
					break;
 800b644:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800b646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b648:	4618      	mov	r0, r3
 800b64a:	372c      	adds	r7, #44	@ 0x2c
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b654:	b580      	push	{r7, lr}
 800b656:	b086      	sub	sp, #24
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800b65c:	2338      	movs	r3, #56	@ 0x38
 800b65e:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f7f4 fdb5 	bl	80001d0 <strlen>
 800b666:	4603      	mov	r3, r0
 800b668:	2b0f      	cmp	r3, #15
 800b66a:	d90b      	bls.n	800b684 <xTaskGetHandle+0x30>
	__asm volatile
 800b66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b670:	f383 8811 	msr	BASEPRI, r3
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	60fb      	str	r3, [r7, #12]
}
 800b67e:	bf00      	nop
 800b680:	bf00      	nop
 800b682:	e7fd      	b.n	800b680 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800b684:	f7ff fe96 	bl	800b3b4 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	3b01      	subs	r3, #1
 800b68c:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800b68e:	697a      	ldr	r2, [r7, #20]
 800b690:	4613      	mov	r3, r2
 800b692:	009b      	lsls	r3, r3, #2
 800b694:	4413      	add	r3, r2
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	4a1c      	ldr	r2, [pc, #112]	@ (800b70c <xTaskGetHandle+0xb8>)
 800b69a:	4413      	add	r3, r2
 800b69c:	6879      	ldr	r1, [r7, #4]
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7ff ff6a 	bl	800b578 <prvSearchForNameWithinSingleList>
 800b6a4:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d103      	bne.n	800b6b4 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d1ea      	bne.n	800b688 <xTaskGetHandle+0x34>
 800b6b2:	e000      	b.n	800b6b6 <xTaskGetHandle+0x62>
					break;
 800b6b4:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d106      	bne.n	800b6ca <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800b6bc:	4b14      	ldr	r3, [pc, #80]	@ (800b710 <xTaskGetHandle+0xbc>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	6879      	ldr	r1, [r7, #4]
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7ff ff58 	bl	800b578 <prvSearchForNameWithinSingleList>
 800b6c8:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d106      	bne.n	800b6de <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800b6d0:	4b10      	ldr	r3, [pc, #64]	@ (800b714 <xTaskGetHandle+0xc0>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	6879      	ldr	r1, [r7, #4]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7ff ff4e 	bl	800b578 <prvSearchForNameWithinSingleList>
 800b6dc:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d104      	bne.n	800b6ee <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800b6e4:	6879      	ldr	r1, [r7, #4]
 800b6e6:	480c      	ldr	r0, [pc, #48]	@ (800b718 <xTaskGetHandle+0xc4>)
 800b6e8:	f7ff ff46 	bl	800b578 <prvSearchForNameWithinSingleList>
 800b6ec:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d104      	bne.n	800b6fe <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800b6f4:	6879      	ldr	r1, [r7, #4]
 800b6f6:	4809      	ldr	r0, [pc, #36]	@ (800b71c <xTaskGetHandle+0xc8>)
 800b6f8:	f7ff ff3e 	bl	800b578 <prvSearchForNameWithinSingleList>
 800b6fc:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800b6fe:	f7ff fe67 	bl	800b3d0 <xTaskResumeAll>

		return pxTCB;
 800b702:	693b      	ldr	r3, [r7, #16]
	}
 800b704:	4618      	mov	r0, r3
 800b706:	3718      	adds	r7, #24
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	20001510 	.word	0x20001510
 800b710:	20001998 	.word	0x20001998
 800b714:	2000199c 	.word	0x2000199c
 800b718:	200019cc 	.word	0x200019cc
 800b71c:	200019b4 	.word	0x200019b4

0800b720 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b726:	2300      	movs	r3, #0
 800b728:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b72a:	4b4f      	ldr	r3, [pc, #316]	@ (800b868 <xTaskIncrementTick+0x148>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f040 8090 	bne.w	800b854 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b734:	4b4d      	ldr	r3, [pc, #308]	@ (800b86c <xTaskIncrementTick+0x14c>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	3301      	adds	r3, #1
 800b73a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b73c:	4a4b      	ldr	r2, [pc, #300]	@ (800b86c <xTaskIncrementTick+0x14c>)
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d121      	bne.n	800b78c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b748:	4b49      	ldr	r3, [pc, #292]	@ (800b870 <xTaskIncrementTick+0x150>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00b      	beq.n	800b76a <xTaskIncrementTick+0x4a>
	__asm volatile
 800b752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b756:	f383 8811 	msr	BASEPRI, r3
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	603b      	str	r3, [r7, #0]
}
 800b764:	bf00      	nop
 800b766:	bf00      	nop
 800b768:	e7fd      	b.n	800b766 <xTaskIncrementTick+0x46>
 800b76a:	4b41      	ldr	r3, [pc, #260]	@ (800b870 <xTaskIncrementTick+0x150>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	60fb      	str	r3, [r7, #12]
 800b770:	4b40      	ldr	r3, [pc, #256]	@ (800b874 <xTaskIncrementTick+0x154>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a3e      	ldr	r2, [pc, #248]	@ (800b870 <xTaskIncrementTick+0x150>)
 800b776:	6013      	str	r3, [r2, #0]
 800b778:	4a3e      	ldr	r2, [pc, #248]	@ (800b874 <xTaskIncrementTick+0x154>)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	6013      	str	r3, [r2, #0]
 800b77e:	4b3e      	ldr	r3, [pc, #248]	@ (800b878 <xTaskIncrementTick+0x158>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	3301      	adds	r3, #1
 800b784:	4a3c      	ldr	r2, [pc, #240]	@ (800b878 <xTaskIncrementTick+0x158>)
 800b786:	6013      	str	r3, [r2, #0]
 800b788:	f000 fae2 	bl	800bd50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b78c:	4b3b      	ldr	r3, [pc, #236]	@ (800b87c <xTaskIncrementTick+0x15c>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	693a      	ldr	r2, [r7, #16]
 800b792:	429a      	cmp	r2, r3
 800b794:	d349      	bcc.n	800b82a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b796:	4b36      	ldr	r3, [pc, #216]	@ (800b870 <xTaskIncrementTick+0x150>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d104      	bne.n	800b7aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7a0:	4b36      	ldr	r3, [pc, #216]	@ (800b87c <xTaskIncrementTick+0x15c>)
 800b7a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b7a6:	601a      	str	r2, [r3, #0]
					break;
 800b7a8:	e03f      	b.n	800b82a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7aa:	4b31      	ldr	r3, [pc, #196]	@ (800b870 <xTaskIncrementTick+0x150>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b7ba:	693a      	ldr	r2, [r7, #16]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d203      	bcs.n	800b7ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b7c2:	4a2e      	ldr	r2, [pc, #184]	@ (800b87c <xTaskIncrementTick+0x15c>)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b7c8:	e02f      	b.n	800b82a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	3304      	adds	r3, #4
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7fe fe68 	bl	800a4a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d004      	beq.n	800b7e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	3318      	adds	r3, #24
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7fe fe5f 	bl	800a4a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7ea:	4b25      	ldr	r3, [pc, #148]	@ (800b880 <xTaskIncrementTick+0x160>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d903      	bls.n	800b7fa <xTaskIncrementTick+0xda>
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7f6:	4a22      	ldr	r2, [pc, #136]	@ (800b880 <xTaskIncrementTick+0x160>)
 800b7f8:	6013      	str	r3, [r2, #0]
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7fe:	4613      	mov	r3, r2
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	4413      	add	r3, r2
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	4a1f      	ldr	r2, [pc, #124]	@ (800b884 <xTaskIncrementTick+0x164>)
 800b808:	441a      	add	r2, r3
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	3304      	adds	r3, #4
 800b80e:	4619      	mov	r1, r3
 800b810:	4610      	mov	r0, r2
 800b812:	f7fe fdea 	bl	800a3ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b81a:	4b1b      	ldr	r3, [pc, #108]	@ (800b888 <xTaskIncrementTick+0x168>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b820:	429a      	cmp	r2, r3
 800b822:	d3b8      	bcc.n	800b796 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b824:	2301      	movs	r3, #1
 800b826:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b828:	e7b5      	b.n	800b796 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b82a:	4b17      	ldr	r3, [pc, #92]	@ (800b888 <xTaskIncrementTick+0x168>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b830:	4914      	ldr	r1, [pc, #80]	@ (800b884 <xTaskIncrementTick+0x164>)
 800b832:	4613      	mov	r3, r2
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	4413      	add	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	440b      	add	r3, r1
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d901      	bls.n	800b846 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b842:	2301      	movs	r3, #1
 800b844:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b846:	4b11      	ldr	r3, [pc, #68]	@ (800b88c <xTaskIncrementTick+0x16c>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d007      	beq.n	800b85e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b84e:	2301      	movs	r3, #1
 800b850:	617b      	str	r3, [r7, #20]
 800b852:	e004      	b.n	800b85e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b854:	4b0e      	ldr	r3, [pc, #56]	@ (800b890 <xTaskIncrementTick+0x170>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	3301      	adds	r3, #1
 800b85a:	4a0d      	ldr	r2, [pc, #52]	@ (800b890 <xTaskIncrementTick+0x170>)
 800b85c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b85e:	697b      	ldr	r3, [r7, #20]
}
 800b860:	4618      	mov	r0, r3
 800b862:	3718      	adds	r7, #24
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	20001a08 	.word	0x20001a08
 800b86c:	200019e4 	.word	0x200019e4
 800b870:	20001998 	.word	0x20001998
 800b874:	2000199c 	.word	0x2000199c
 800b878:	200019f8 	.word	0x200019f8
 800b87c:	20001a00 	.word	0x20001a00
 800b880:	200019e8 	.word	0x200019e8
 800b884:	20001510 	.word	0x20001510
 800b888:	2000150c 	.word	0x2000150c
 800b88c:	200019f4 	.word	0x200019f4
 800b890:	200019f0 	.word	0x200019f0

0800b894 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b89a:	4b2b      	ldr	r3, [pc, #172]	@ (800b948 <vTaskSwitchContext+0xb4>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d003      	beq.n	800b8aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b8a2:	4b2a      	ldr	r3, [pc, #168]	@ (800b94c <vTaskSwitchContext+0xb8>)
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b8a8:	e047      	b.n	800b93a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b8aa:	4b28      	ldr	r3, [pc, #160]	@ (800b94c <vTaskSwitchContext+0xb8>)
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8b0:	4b27      	ldr	r3, [pc, #156]	@ (800b950 <vTaskSwitchContext+0xbc>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	60fb      	str	r3, [r7, #12]
 800b8b6:	e011      	b.n	800b8dc <vTaskSwitchContext+0x48>
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10b      	bne.n	800b8d6 <vTaskSwitchContext+0x42>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	607b      	str	r3, [r7, #4]
}
 800b8d0:	bf00      	nop
 800b8d2:	bf00      	nop
 800b8d4:	e7fd      	b.n	800b8d2 <vTaskSwitchContext+0x3e>
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	60fb      	str	r3, [r7, #12]
 800b8dc:	491d      	ldr	r1, [pc, #116]	@ (800b954 <vTaskSwitchContext+0xc0>)
 800b8de:	68fa      	ldr	r2, [r7, #12]
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	4413      	add	r3, r2
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	440b      	add	r3, r1
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d0e3      	beq.n	800b8b8 <vTaskSwitchContext+0x24>
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	4413      	add	r3, r2
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	4a16      	ldr	r2, [pc, #88]	@ (800b954 <vTaskSwitchContext+0xc0>)
 800b8fc:	4413      	add	r3, r2
 800b8fe:	60bb      	str	r3, [r7, #8]
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	685a      	ldr	r2, [r3, #4]
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	605a      	str	r2, [r3, #4]
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	685a      	ldr	r2, [r3, #4]
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	3308      	adds	r3, #8
 800b912:	429a      	cmp	r2, r3
 800b914:	d104      	bne.n	800b920 <vTaskSwitchContext+0x8c>
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	685a      	ldr	r2, [r3, #4]
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	605a      	str	r2, [r3, #4]
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	4a0c      	ldr	r2, [pc, #48]	@ (800b958 <vTaskSwitchContext+0xc4>)
 800b928:	6013      	str	r3, [r2, #0]
 800b92a:	4a09      	ldr	r2, [pc, #36]	@ (800b950 <vTaskSwitchContext+0xbc>)
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b930:	4b09      	ldr	r3, [pc, #36]	@ (800b958 <vTaskSwitchContext+0xc4>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	3354      	adds	r3, #84	@ 0x54
 800b936:	4a09      	ldr	r2, [pc, #36]	@ (800b95c <vTaskSwitchContext+0xc8>)
 800b938:	6013      	str	r3, [r2, #0]
}
 800b93a:	bf00      	nop
 800b93c:	3714      	adds	r7, #20
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop
 800b948:	20001a08 	.word	0x20001a08
 800b94c:	200019f4 	.word	0x200019f4
 800b950:	200019e8 	.word	0x200019e8
 800b954:	20001510 	.word	0x20001510
 800b958:	2000150c 	.word	0x2000150c
 800b95c:	2000002c 	.word	0x2000002c

0800b960 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d10b      	bne.n	800b988 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b974:	f383 8811 	msr	BASEPRI, r3
 800b978:	f3bf 8f6f 	isb	sy
 800b97c:	f3bf 8f4f 	dsb	sy
 800b980:	60fb      	str	r3, [r7, #12]
}
 800b982:	bf00      	nop
 800b984:	bf00      	nop
 800b986:	e7fd      	b.n	800b984 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b988:	4b07      	ldr	r3, [pc, #28]	@ (800b9a8 <vTaskPlaceOnEventList+0x48>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	3318      	adds	r3, #24
 800b98e:	4619      	mov	r1, r3
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f7fe fd4e 	bl	800a432 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b996:	2101      	movs	r1, #1
 800b998:	6838      	ldr	r0, [r7, #0]
 800b99a:	f000 fb69 	bl	800c070 <prvAddCurrentTaskToDelayedList>
}
 800b99e:	bf00      	nop
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	2000150c 	.word	0x2000150c

0800b9ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b086      	sub	sp, #24
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d10b      	bne.n	800b9d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	617b      	str	r3, [r7, #20]
}
 800b9d0:	bf00      	nop
 800b9d2:	bf00      	nop
 800b9d4:	e7fd      	b.n	800b9d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9d6:	4b0a      	ldr	r3, [pc, #40]	@ (800ba00 <vTaskPlaceOnEventListRestricted+0x54>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	3318      	adds	r3, #24
 800b9dc:	4619      	mov	r1, r3
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f7fe fd03 	bl	800a3ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d002      	beq.n	800b9f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b9ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b9ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b9f0:	6879      	ldr	r1, [r7, #4]
 800b9f2:	68b8      	ldr	r0, [r7, #8]
 800b9f4:	f000 fb3c 	bl	800c070 <prvAddCurrentTaskToDelayedList>
	}
 800b9f8:	bf00      	nop
 800b9fa:	3718      	adds	r7, #24
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	2000150c 	.word	0x2000150c

0800ba04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b086      	sub	sp, #24
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d10b      	bne.n	800ba32 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ba1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba1e:	f383 8811 	msr	BASEPRI, r3
 800ba22:	f3bf 8f6f 	isb	sy
 800ba26:	f3bf 8f4f 	dsb	sy
 800ba2a:	60fb      	str	r3, [r7, #12]
}
 800ba2c:	bf00      	nop
 800ba2e:	bf00      	nop
 800ba30:	e7fd      	b.n	800ba2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	3318      	adds	r3, #24
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fe fd34 	bl	800a4a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba3c:	4b1d      	ldr	r3, [pc, #116]	@ (800bab4 <xTaskRemoveFromEventList+0xb0>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d11d      	bne.n	800ba80 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	3304      	adds	r3, #4
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7fe fd2b 	bl	800a4a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba52:	4b19      	ldr	r3, [pc, #100]	@ (800bab8 <xTaskRemoveFromEventList+0xb4>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d903      	bls.n	800ba62 <xTaskRemoveFromEventList+0x5e>
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba5e:	4a16      	ldr	r2, [pc, #88]	@ (800bab8 <xTaskRemoveFromEventList+0xb4>)
 800ba60:	6013      	str	r3, [r2, #0]
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba66:	4613      	mov	r3, r2
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	4413      	add	r3, r2
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	4a13      	ldr	r2, [pc, #76]	@ (800babc <xTaskRemoveFromEventList+0xb8>)
 800ba70:	441a      	add	r2, r3
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	3304      	adds	r3, #4
 800ba76:	4619      	mov	r1, r3
 800ba78:	4610      	mov	r0, r2
 800ba7a:	f7fe fcb6 	bl	800a3ea <vListInsertEnd>
 800ba7e:	e005      	b.n	800ba8c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	3318      	adds	r3, #24
 800ba84:	4619      	mov	r1, r3
 800ba86:	480e      	ldr	r0, [pc, #56]	@ (800bac0 <xTaskRemoveFromEventList+0xbc>)
 800ba88:	f7fe fcaf 	bl	800a3ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba90:	4b0c      	ldr	r3, [pc, #48]	@ (800bac4 <xTaskRemoveFromEventList+0xc0>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d905      	bls.n	800baa6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba9e:	4b0a      	ldr	r3, [pc, #40]	@ (800bac8 <xTaskRemoveFromEventList+0xc4>)
 800baa0:	2201      	movs	r2, #1
 800baa2:	601a      	str	r2, [r3, #0]
 800baa4:	e001      	b.n	800baaa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800baa6:	2300      	movs	r3, #0
 800baa8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800baaa:	697b      	ldr	r3, [r7, #20]
}
 800baac:	4618      	mov	r0, r3
 800baae:	3718      	adds	r7, #24
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	20001a08 	.word	0x20001a08
 800bab8:	200019e8 	.word	0x200019e8
 800babc:	20001510 	.word	0x20001510
 800bac0:	200019a0 	.word	0x200019a0
 800bac4:	2000150c 	.word	0x2000150c
 800bac8:	200019f4 	.word	0x200019f4

0800bacc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bad4:	4b06      	ldr	r3, [pc, #24]	@ (800baf0 <vTaskInternalSetTimeOutState+0x24>)
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800badc:	4b05      	ldr	r3, [pc, #20]	@ (800baf4 <vTaskInternalSetTimeOutState+0x28>)
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	605a      	str	r2, [r3, #4]
}
 800bae4:	bf00      	nop
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr
 800baf0:	200019f8 	.word	0x200019f8
 800baf4:	200019e4 	.word	0x200019e4

0800baf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b088      	sub	sp, #32
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10b      	bne.n	800bb20 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bb08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb0c:	f383 8811 	msr	BASEPRI, r3
 800bb10:	f3bf 8f6f 	isb	sy
 800bb14:	f3bf 8f4f 	dsb	sy
 800bb18:	613b      	str	r3, [r7, #16]
}
 800bb1a:	bf00      	nop
 800bb1c:	bf00      	nop
 800bb1e:	e7fd      	b.n	800bb1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d10b      	bne.n	800bb3e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bb26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb2a:	f383 8811 	msr	BASEPRI, r3
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	60fb      	str	r3, [r7, #12]
}
 800bb38:	bf00      	nop
 800bb3a:	bf00      	nop
 800bb3c:	e7fd      	b.n	800bb3a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bb3e:	f000 ff73 	bl	800ca28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bb42:	4b1d      	ldr	r3, [pc, #116]	@ (800bbb8 <xTaskCheckForTimeOut+0xc0>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	69ba      	ldr	r2, [r7, #24]
 800bb4e:	1ad3      	subs	r3, r2, r3
 800bb50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb5a:	d102      	bne.n	800bb62 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	61fb      	str	r3, [r7, #28]
 800bb60:	e023      	b.n	800bbaa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	4b15      	ldr	r3, [pc, #84]	@ (800bbbc <xTaskCheckForTimeOut+0xc4>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d007      	beq.n	800bb7e <xTaskCheckForTimeOut+0x86>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	69ba      	ldr	r2, [r7, #24]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d302      	bcc.n	800bb7e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	61fb      	str	r3, [r7, #28]
 800bb7c:	e015      	b.n	800bbaa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	697a      	ldr	r2, [r7, #20]
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d20b      	bcs.n	800bba0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	1ad2      	subs	r2, r2, r3
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f7ff ff99 	bl	800bacc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	61fb      	str	r3, [r7, #28]
 800bb9e:	e004      	b.n	800bbaa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	2200      	movs	r2, #0
 800bba4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bba6:	2301      	movs	r3, #1
 800bba8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bbaa:	f000 ff6f 	bl	800ca8c <vPortExitCritical>

	return xReturn;
 800bbae:	69fb      	ldr	r3, [r7, #28]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3720      	adds	r7, #32
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	200019e4 	.word	0x200019e4
 800bbbc:	200019f8 	.word	0x200019f8

0800bbc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bbc4:	4b03      	ldr	r3, [pc, #12]	@ (800bbd4 <vTaskMissedYield+0x14>)
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	601a      	str	r2, [r3, #0]
}
 800bbca:	bf00      	nop
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr
 800bbd4:	200019f4 	.word	0x200019f4

0800bbd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bbe0:	f000 f852 	bl	800bc88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bbe4:	4b06      	ldr	r3, [pc, #24]	@ (800bc00 <prvIdleTask+0x28>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d9f9      	bls.n	800bbe0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bbec:	4b05      	ldr	r3, [pc, #20]	@ (800bc04 <prvIdleTask+0x2c>)
 800bbee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbf2:	601a      	str	r2, [r3, #0]
 800bbf4:	f3bf 8f4f 	dsb	sy
 800bbf8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bbfc:	e7f0      	b.n	800bbe0 <prvIdleTask+0x8>
 800bbfe:	bf00      	nop
 800bc00:	20001510 	.word	0x20001510
 800bc04:	e000ed04 	.word	0xe000ed04

0800bc08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc0e:	2300      	movs	r3, #0
 800bc10:	607b      	str	r3, [r7, #4]
 800bc12:	e00c      	b.n	800bc2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	4613      	mov	r3, r2
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	4413      	add	r3, r2
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	4a12      	ldr	r2, [pc, #72]	@ (800bc68 <prvInitialiseTaskLists+0x60>)
 800bc20:	4413      	add	r3, r2
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7fe fbb4 	bl	800a390 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	607b      	str	r3, [r7, #4]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2b37      	cmp	r3, #55	@ 0x37
 800bc32:	d9ef      	bls.n	800bc14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bc34:	480d      	ldr	r0, [pc, #52]	@ (800bc6c <prvInitialiseTaskLists+0x64>)
 800bc36:	f7fe fbab 	bl	800a390 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bc3a:	480d      	ldr	r0, [pc, #52]	@ (800bc70 <prvInitialiseTaskLists+0x68>)
 800bc3c:	f7fe fba8 	bl	800a390 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bc40:	480c      	ldr	r0, [pc, #48]	@ (800bc74 <prvInitialiseTaskLists+0x6c>)
 800bc42:	f7fe fba5 	bl	800a390 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc46:	480c      	ldr	r0, [pc, #48]	@ (800bc78 <prvInitialiseTaskLists+0x70>)
 800bc48:	f7fe fba2 	bl	800a390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc4c:	480b      	ldr	r0, [pc, #44]	@ (800bc7c <prvInitialiseTaskLists+0x74>)
 800bc4e:	f7fe fb9f 	bl	800a390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc52:	4b0b      	ldr	r3, [pc, #44]	@ (800bc80 <prvInitialiseTaskLists+0x78>)
 800bc54:	4a05      	ldr	r2, [pc, #20]	@ (800bc6c <prvInitialiseTaskLists+0x64>)
 800bc56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc58:	4b0a      	ldr	r3, [pc, #40]	@ (800bc84 <prvInitialiseTaskLists+0x7c>)
 800bc5a:	4a05      	ldr	r2, [pc, #20]	@ (800bc70 <prvInitialiseTaskLists+0x68>)
 800bc5c:	601a      	str	r2, [r3, #0]
}
 800bc5e:	bf00      	nop
 800bc60:	3708      	adds	r7, #8
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	20001510 	.word	0x20001510
 800bc6c:	20001970 	.word	0x20001970
 800bc70:	20001984 	.word	0x20001984
 800bc74:	200019a0 	.word	0x200019a0
 800bc78:	200019b4 	.word	0x200019b4
 800bc7c:	200019cc 	.word	0x200019cc
 800bc80:	20001998 	.word	0x20001998
 800bc84:	2000199c 	.word	0x2000199c

0800bc88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc8e:	e019      	b.n	800bcc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc90:	f000 feca 	bl	800ca28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc94:	4b10      	ldr	r3, [pc, #64]	@ (800bcd8 <prvCheckTasksWaitingTermination+0x50>)
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	3304      	adds	r3, #4
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7fe fbff 	bl	800a4a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bca6:	4b0d      	ldr	r3, [pc, #52]	@ (800bcdc <prvCheckTasksWaitingTermination+0x54>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	4a0b      	ldr	r2, [pc, #44]	@ (800bcdc <prvCheckTasksWaitingTermination+0x54>)
 800bcae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bcb0:	4b0b      	ldr	r3, [pc, #44]	@ (800bce0 <prvCheckTasksWaitingTermination+0x58>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	4a0a      	ldr	r2, [pc, #40]	@ (800bce0 <prvCheckTasksWaitingTermination+0x58>)
 800bcb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bcba:	f000 fee7 	bl	800ca8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 f810 	bl	800bce4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bcc4:	4b06      	ldr	r3, [pc, #24]	@ (800bce0 <prvCheckTasksWaitingTermination+0x58>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d1e1      	bne.n	800bc90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bccc:	bf00      	nop
 800bcce:	bf00      	nop
 800bcd0:	3708      	adds	r7, #8
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	200019b4 	.word	0x200019b4
 800bcdc:	200019e0 	.word	0x200019e0
 800bce0:	200019c8 	.word	0x200019c8

0800bce4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	3354      	adds	r3, #84	@ 0x54
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f001 f9d1 	bl	800d098 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d108      	bne.n	800bd12 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd04:	4618      	mov	r0, r3
 800bd06:	f001 f87f 	bl	800ce08 <vPortFree>
				vPortFree( pxTCB );
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f001 f87c 	bl	800ce08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bd10:	e019      	b.n	800bd46 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d103      	bne.n	800bd24 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f001 f873 	bl	800ce08 <vPortFree>
	}
 800bd22:	e010      	b.n	800bd46 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	d00b      	beq.n	800bd46 <prvDeleteTCB+0x62>
	__asm volatile
 800bd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd32:	f383 8811 	msr	BASEPRI, r3
 800bd36:	f3bf 8f6f 	isb	sy
 800bd3a:	f3bf 8f4f 	dsb	sy
 800bd3e:	60fb      	str	r3, [r7, #12]
}
 800bd40:	bf00      	nop
 800bd42:	bf00      	nop
 800bd44:	e7fd      	b.n	800bd42 <prvDeleteTCB+0x5e>
	}
 800bd46:	bf00      	nop
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
	...

0800bd50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd56:	4b0c      	ldr	r3, [pc, #48]	@ (800bd88 <prvResetNextTaskUnblockTime+0x38>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d104      	bne.n	800bd6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd60:	4b0a      	ldr	r3, [pc, #40]	@ (800bd8c <prvResetNextTaskUnblockTime+0x3c>)
 800bd62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bd68:	e008      	b.n	800bd7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd6a:	4b07      	ldr	r3, [pc, #28]	@ (800bd88 <prvResetNextTaskUnblockTime+0x38>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	68db      	ldr	r3, [r3, #12]
 800bd72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	4a04      	ldr	r2, [pc, #16]	@ (800bd8c <prvResetNextTaskUnblockTime+0x3c>)
 800bd7a:	6013      	str	r3, [r2, #0]
}
 800bd7c:	bf00      	nop
 800bd7e:	370c      	adds	r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr
 800bd88:	20001998 	.word	0x20001998
 800bd8c:	20001a00 	.word	0x20001a00

0800bd90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd96:	4b0b      	ldr	r3, [pc, #44]	@ (800bdc4 <xTaskGetSchedulerState+0x34>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d102      	bne.n	800bda4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	607b      	str	r3, [r7, #4]
 800bda2:	e008      	b.n	800bdb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bda4:	4b08      	ldr	r3, [pc, #32]	@ (800bdc8 <xTaskGetSchedulerState+0x38>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d102      	bne.n	800bdb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bdac:	2302      	movs	r3, #2
 800bdae:	607b      	str	r3, [r7, #4]
 800bdb0:	e001      	b.n	800bdb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bdb6:	687b      	ldr	r3, [r7, #4]
	}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	370c      	adds	r7, #12
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr
 800bdc4:	200019ec 	.word	0x200019ec
 800bdc8:	20001a08 	.word	0x20001a08

0800bdcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b086      	sub	sp, #24
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d058      	beq.n	800be94 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bde2:	4b2f      	ldr	r3, [pc, #188]	@ (800bea0 <xTaskPriorityDisinherit+0xd4>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	693a      	ldr	r2, [r7, #16]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d00b      	beq.n	800be04 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bdec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf0:	f383 8811 	msr	BASEPRI, r3
 800bdf4:	f3bf 8f6f 	isb	sy
 800bdf8:	f3bf 8f4f 	dsb	sy
 800bdfc:	60fb      	str	r3, [r7, #12]
}
 800bdfe:	bf00      	nop
 800be00:	bf00      	nop
 800be02:	e7fd      	b.n	800be00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d10b      	bne.n	800be24 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800be0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be10:	f383 8811 	msr	BASEPRI, r3
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	f3bf 8f4f 	dsb	sy
 800be1c:	60bb      	str	r3, [r7, #8]
}
 800be1e:	bf00      	nop
 800be20:	bf00      	nop
 800be22:	e7fd      	b.n	800be20 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be28:	1e5a      	subs	r2, r3, #1
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be36:	429a      	cmp	r2, r3
 800be38:	d02c      	beq.n	800be94 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d128      	bne.n	800be94 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	3304      	adds	r3, #4
 800be46:	4618      	mov	r0, r3
 800be48:	f7fe fb2c 	bl	800a4a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be58:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be64:	4b0f      	ldr	r3, [pc, #60]	@ (800bea4 <xTaskPriorityDisinherit+0xd8>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d903      	bls.n	800be74 <xTaskPriorityDisinherit+0xa8>
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be70:	4a0c      	ldr	r2, [pc, #48]	@ (800bea4 <xTaskPriorityDisinherit+0xd8>)
 800be72:	6013      	str	r3, [r2, #0]
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be78:	4613      	mov	r3, r2
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	4413      	add	r3, r2
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	4a09      	ldr	r2, [pc, #36]	@ (800bea8 <xTaskPriorityDisinherit+0xdc>)
 800be82:	441a      	add	r2, r3
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	3304      	adds	r3, #4
 800be88:	4619      	mov	r1, r3
 800be8a:	4610      	mov	r0, r2
 800be8c:	f7fe faad 	bl	800a3ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be90:	2301      	movs	r3, #1
 800be92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be94:	697b      	ldr	r3, [r7, #20]
	}
 800be96:	4618      	mov	r0, r3
 800be98:	3718      	adds	r7, #24
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	2000150c 	.word	0x2000150c
 800bea4:	200019e8 	.word	0x200019e8
 800bea8:	20001510 	.word	0x20001510

0800beac <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800beb6:	f000 fdb7 	bl	800ca28 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800beba:	4b20      	ldr	r3, [pc, #128]	@ (800bf3c <ulTaskNotifyTake+0x90>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d113      	bne.n	800beee <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bec6:	4b1d      	ldr	r3, [pc, #116]	@ (800bf3c <ulTaskNotifyTake+0x90>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	2201      	movs	r2, #1
 800becc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d00b      	beq.n	800beee <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bed6:	2101      	movs	r1, #1
 800bed8:	6838      	ldr	r0, [r7, #0]
 800beda:	f000 f8c9 	bl	800c070 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bede:	4b18      	ldr	r3, [pc, #96]	@ (800bf40 <ulTaskNotifyTake+0x94>)
 800bee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bee4:	601a      	str	r2, [r3, #0]
 800bee6:	f3bf 8f4f 	dsb	sy
 800beea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800beee:	f000 fdcd 	bl	800ca8c <vPortExitCritical>

		taskENTER_CRITICAL();
 800bef2:	f000 fd99 	bl	800ca28 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800bef6:	4b11      	ldr	r3, [pc, #68]	@ (800bf3c <ulTaskNotifyTake+0x90>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800befe:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00e      	beq.n	800bf24 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d005      	beq.n	800bf18 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800bf0c:	4b0b      	ldr	r3, [pc, #44]	@ (800bf3c <ulTaskNotifyTake+0x90>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2200      	movs	r2, #0
 800bf12:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800bf16:	e005      	b.n	800bf24 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800bf18:	4b08      	ldr	r3, [pc, #32]	@ (800bf3c <ulTaskNotifyTake+0x90>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	3a01      	subs	r2, #1
 800bf20:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf24:	4b05      	ldr	r3, [pc, #20]	@ (800bf3c <ulTaskNotifyTake+0x90>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800bf2e:	f000 fdad 	bl	800ca8c <vPortExitCritical>

		return ulReturn;
 800bf32:	68fb      	ldr	r3, [r7, #12]
	}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	2000150c 	.word	0x2000150c
 800bf40:	e000ed04 	.word	0xe000ed04

0800bf44 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b08a      	sub	sp, #40	@ 0x28
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d10b      	bne.n	800bf6c <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800bf54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf58:	f383 8811 	msr	BASEPRI, r3
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	f3bf 8f4f 	dsb	sy
 800bf64:	61bb      	str	r3, [r7, #24]
}
 800bf66:	bf00      	nop
 800bf68:	bf00      	nop
 800bf6a:	e7fd      	b.n	800bf68 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf6c:	f000 fe3c 	bl	800cbe8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800bf74:	f3ef 8211 	mrs	r2, BASEPRI
 800bf78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf7c:	f383 8811 	msr	BASEPRI, r3
 800bf80:	f3bf 8f6f 	isb	sy
 800bf84:	f3bf 8f4f 	dsb	sy
 800bf88:	617a      	str	r2, [r7, #20]
 800bf8a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bf8c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf8e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bf90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf92:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800bf96:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bf98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf9a:	2202      	movs	r2, #2
 800bf9c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800bfa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bfa6:	1c5a      	adds	r2, r3, #1
 800bfa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfaa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bfae:	7ffb      	ldrb	r3, [r7, #31]
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d147      	bne.n	800c044 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00b      	beq.n	800bfd4 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800bfbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc0:	f383 8811 	msr	BASEPRI, r3
 800bfc4:	f3bf 8f6f 	isb	sy
 800bfc8:	f3bf 8f4f 	dsb	sy
 800bfcc:	60fb      	str	r3, [r7, #12]
}
 800bfce:	bf00      	nop
 800bfd0:	bf00      	nop
 800bfd2:	e7fd      	b.n	800bfd0 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfd4:	4b20      	ldr	r3, [pc, #128]	@ (800c058 <vTaskNotifyGiveFromISR+0x114>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d11d      	bne.n	800c018 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfde:	3304      	adds	r3, #4
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7fe fa5f 	bl	800a4a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bfe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfea:	4b1c      	ldr	r3, [pc, #112]	@ (800c05c <vTaskNotifyGiveFromISR+0x118>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d903      	bls.n	800bffa <vTaskNotifyGiveFromISR+0xb6>
 800bff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bff6:	4a19      	ldr	r2, [pc, #100]	@ (800c05c <vTaskNotifyGiveFromISR+0x118>)
 800bff8:	6013      	str	r3, [r2, #0]
 800bffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bffe:	4613      	mov	r3, r2
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	4413      	add	r3, r2
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	4a16      	ldr	r2, [pc, #88]	@ (800c060 <vTaskNotifyGiveFromISR+0x11c>)
 800c008:	441a      	add	r2, r3
 800c00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c00c:	3304      	adds	r3, #4
 800c00e:	4619      	mov	r1, r3
 800c010:	4610      	mov	r0, r2
 800c012:	f7fe f9ea 	bl	800a3ea <vListInsertEnd>
 800c016:	e005      	b.n	800c024 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c01a:	3318      	adds	r3, #24
 800c01c:	4619      	mov	r1, r3
 800c01e:	4811      	ldr	r0, [pc, #68]	@ (800c064 <vTaskNotifyGiveFromISR+0x120>)
 800c020:	f7fe f9e3 	bl	800a3ea <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c028:	4b0f      	ldr	r3, [pc, #60]	@ (800c068 <vTaskNotifyGiveFromISR+0x124>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c02e:	429a      	cmp	r2, r3
 800c030:	d908      	bls.n	800c044 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	2201      	movs	r2, #1
 800c03c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c03e:	4b0b      	ldr	r3, [pc, #44]	@ (800c06c <vTaskNotifyGiveFromISR+0x128>)
 800c040:	2201      	movs	r2, #1
 800c042:	601a      	str	r2, [r3, #0]
 800c044:	6a3b      	ldr	r3, [r7, #32]
 800c046:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	f383 8811 	msr	BASEPRI, r3
}
 800c04e:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800c050:	bf00      	nop
 800c052:	3728      	adds	r7, #40	@ 0x28
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	20001a08 	.word	0x20001a08
 800c05c:	200019e8 	.word	0x200019e8
 800c060:	20001510 	.word	0x20001510
 800c064:	200019a0 	.word	0x200019a0
 800c068:	2000150c 	.word	0x2000150c
 800c06c:	200019f4 	.word	0x200019f4

0800c070 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c07a:	4b21      	ldr	r3, [pc, #132]	@ (800c100 <prvAddCurrentTaskToDelayedList+0x90>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c080:	4b20      	ldr	r3, [pc, #128]	@ (800c104 <prvAddCurrentTaskToDelayedList+0x94>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	3304      	adds	r3, #4
 800c086:	4618      	mov	r0, r3
 800c088:	f7fe fa0c 	bl	800a4a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c092:	d10a      	bne.n	800c0aa <prvAddCurrentTaskToDelayedList+0x3a>
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d007      	beq.n	800c0aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c09a:	4b1a      	ldr	r3, [pc, #104]	@ (800c104 <prvAddCurrentTaskToDelayedList+0x94>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	3304      	adds	r3, #4
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	4819      	ldr	r0, [pc, #100]	@ (800c108 <prvAddCurrentTaskToDelayedList+0x98>)
 800c0a4:	f7fe f9a1 	bl	800a3ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c0a8:	e026      	b.n	800c0f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c0aa:	68fa      	ldr	r2, [r7, #12]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c0b2:	4b14      	ldr	r3, [pc, #80]	@ (800c104 <prvAddCurrentTaskToDelayedList+0x94>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d209      	bcs.n	800c0d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0c2:	4b12      	ldr	r3, [pc, #72]	@ (800c10c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	4b0f      	ldr	r3, [pc, #60]	@ (800c104 <prvAddCurrentTaskToDelayedList+0x94>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	3304      	adds	r3, #4
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	4610      	mov	r0, r2
 800c0d0:	f7fe f9af 	bl	800a432 <vListInsert>
}
 800c0d4:	e010      	b.n	800c0f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0d6:	4b0e      	ldr	r3, [pc, #56]	@ (800c110 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	4b0a      	ldr	r3, [pc, #40]	@ (800c104 <prvAddCurrentTaskToDelayedList+0x94>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	3304      	adds	r3, #4
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	4610      	mov	r0, r2
 800c0e4:	f7fe f9a5 	bl	800a432 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c0e8:	4b0a      	ldr	r3, [pc, #40]	@ (800c114 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	68ba      	ldr	r2, [r7, #8]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d202      	bcs.n	800c0f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c0f2:	4a08      	ldr	r2, [pc, #32]	@ (800c114 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	6013      	str	r3, [r2, #0]
}
 800c0f8:	bf00      	nop
 800c0fa:	3710      	adds	r7, #16
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	200019e4 	.word	0x200019e4
 800c104:	2000150c 	.word	0x2000150c
 800c108:	200019cc 	.word	0x200019cc
 800c10c:	2000199c 	.word	0x2000199c
 800c110:	20001998 	.word	0x20001998
 800c114:	20001a00 	.word	0x20001a00

0800c118 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b08a      	sub	sp, #40	@ 0x28
 800c11c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c11e:	2300      	movs	r3, #0
 800c120:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c122:	f000 fb13 	bl	800c74c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c126:	4b1d      	ldr	r3, [pc, #116]	@ (800c19c <xTimerCreateTimerTask+0x84>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d021      	beq.n	800c172 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c12e:	2300      	movs	r3, #0
 800c130:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c132:	2300      	movs	r3, #0
 800c134:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c136:	1d3a      	adds	r2, r7, #4
 800c138:	f107 0108 	add.w	r1, r7, #8
 800c13c:	f107 030c 	add.w	r3, r7, #12
 800c140:	4618      	mov	r0, r3
 800c142:	f7fe f90b 	bl	800a35c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c146:	6879      	ldr	r1, [r7, #4]
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	68fa      	ldr	r2, [r7, #12]
 800c14c:	9202      	str	r2, [sp, #8]
 800c14e:	9301      	str	r3, [sp, #4]
 800c150:	2302      	movs	r3, #2
 800c152:	9300      	str	r3, [sp, #0]
 800c154:	2300      	movs	r3, #0
 800c156:	460a      	mov	r2, r1
 800c158:	4911      	ldr	r1, [pc, #68]	@ (800c1a0 <xTimerCreateTimerTask+0x88>)
 800c15a:	4812      	ldr	r0, [pc, #72]	@ (800c1a4 <xTimerCreateTimerTask+0x8c>)
 800c15c:	f7fe fec6 	bl	800aeec <xTaskCreateStatic>
 800c160:	4603      	mov	r3, r0
 800c162:	4a11      	ldr	r2, [pc, #68]	@ (800c1a8 <xTimerCreateTimerTask+0x90>)
 800c164:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c166:	4b10      	ldr	r3, [pc, #64]	@ (800c1a8 <xTimerCreateTimerTask+0x90>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d001      	beq.n	800c172 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c16e:	2301      	movs	r3, #1
 800c170:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d10b      	bne.n	800c190 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c17c:	f383 8811 	msr	BASEPRI, r3
 800c180:	f3bf 8f6f 	isb	sy
 800c184:	f3bf 8f4f 	dsb	sy
 800c188:	613b      	str	r3, [r7, #16]
}
 800c18a:	bf00      	nop
 800c18c:	bf00      	nop
 800c18e:	e7fd      	b.n	800c18c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c190:	697b      	ldr	r3, [r7, #20]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3718      	adds	r7, #24
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	20001a3c 	.word	0x20001a3c
 800c1a0:	0800daa4 	.word	0x0800daa4
 800c1a4:	0800c2e5 	.word	0x0800c2e5
 800c1a8:	20001a40 	.word	0x20001a40

0800c1ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b08a      	sub	sp, #40	@ 0x28
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	607a      	str	r2, [r7, #4]
 800c1b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d10b      	bne.n	800c1dc <xTimerGenericCommand+0x30>
	__asm volatile
 800c1c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c8:	f383 8811 	msr	BASEPRI, r3
 800c1cc:	f3bf 8f6f 	isb	sy
 800c1d0:	f3bf 8f4f 	dsb	sy
 800c1d4:	623b      	str	r3, [r7, #32]
}
 800c1d6:	bf00      	nop
 800c1d8:	bf00      	nop
 800c1da:	e7fd      	b.n	800c1d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c1dc:	4b19      	ldr	r3, [pc, #100]	@ (800c244 <xTimerGenericCommand+0x98>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d02a      	beq.n	800c23a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	2b05      	cmp	r3, #5
 800c1f4:	dc18      	bgt.n	800c228 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c1f6:	f7ff fdcb 	bl	800bd90 <xTaskGetSchedulerState>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b02      	cmp	r3, #2
 800c1fe:	d109      	bne.n	800c214 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c200:	4b10      	ldr	r3, [pc, #64]	@ (800c244 <xTimerGenericCommand+0x98>)
 800c202:	6818      	ldr	r0, [r3, #0]
 800c204:	f107 0110 	add.w	r1, r7, #16
 800c208:	2300      	movs	r3, #0
 800c20a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c20c:	f7fe fa7e 	bl	800a70c <xQueueGenericSend>
 800c210:	6278      	str	r0, [r7, #36]	@ 0x24
 800c212:	e012      	b.n	800c23a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c214:	4b0b      	ldr	r3, [pc, #44]	@ (800c244 <xTimerGenericCommand+0x98>)
 800c216:	6818      	ldr	r0, [r3, #0]
 800c218:	f107 0110 	add.w	r1, r7, #16
 800c21c:	2300      	movs	r3, #0
 800c21e:	2200      	movs	r2, #0
 800c220:	f7fe fa74 	bl	800a70c <xQueueGenericSend>
 800c224:	6278      	str	r0, [r7, #36]	@ 0x24
 800c226:	e008      	b.n	800c23a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c228:	4b06      	ldr	r3, [pc, #24]	@ (800c244 <xTimerGenericCommand+0x98>)
 800c22a:	6818      	ldr	r0, [r3, #0]
 800c22c:	f107 0110 	add.w	r1, r7, #16
 800c230:	2300      	movs	r3, #0
 800c232:	683a      	ldr	r2, [r7, #0]
 800c234:	f7fe fb6c 	bl	800a910 <xQueueGenericSendFromISR>
 800c238:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3728      	adds	r7, #40	@ 0x28
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}
 800c244:	20001a3c 	.word	0x20001a3c

0800c248 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b088      	sub	sp, #32
 800c24c:	af02      	add	r7, sp, #8
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c252:	4b23      	ldr	r3, [pc, #140]	@ (800c2e0 <prvProcessExpiredTimer+0x98>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	3304      	adds	r3, #4
 800c260:	4618      	mov	r0, r3
 800c262:	f7fe f91f 	bl	800a4a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c26c:	f003 0304 	and.w	r3, r3, #4
 800c270:	2b00      	cmp	r3, #0
 800c272:	d023      	beq.n	800c2bc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	699a      	ldr	r2, [r3, #24]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	18d1      	adds	r1, r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	683a      	ldr	r2, [r7, #0]
 800c280:	6978      	ldr	r0, [r7, #20]
 800c282:	f000 f8d5 	bl	800c430 <prvInsertTimerInActiveList>
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d020      	beq.n	800c2ce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c28c:	2300      	movs	r3, #0
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	2300      	movs	r3, #0
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	2100      	movs	r1, #0
 800c296:	6978      	ldr	r0, [r7, #20]
 800c298:	f7ff ff88 	bl	800c1ac <xTimerGenericCommand>
 800c29c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d114      	bne.n	800c2ce <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2a8:	f383 8811 	msr	BASEPRI, r3
 800c2ac:	f3bf 8f6f 	isb	sy
 800c2b0:	f3bf 8f4f 	dsb	sy
 800c2b4:	60fb      	str	r3, [r7, #12]
}
 800c2b6:	bf00      	nop
 800c2b8:	bf00      	nop
 800c2ba:	e7fd      	b.n	800c2b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2c2:	f023 0301 	bic.w	r3, r3, #1
 800c2c6:	b2da      	uxtb	r2, r3
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	6a1b      	ldr	r3, [r3, #32]
 800c2d2:	6978      	ldr	r0, [r7, #20]
 800c2d4:	4798      	blx	r3
}
 800c2d6:	bf00      	nop
 800c2d8:	3718      	adds	r7, #24
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	20001a34 	.word	0x20001a34

0800c2e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c2ec:	f107 0308 	add.w	r3, r7, #8
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f000 f859 	bl	800c3a8 <prvGetNextExpireTime>
 800c2f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	68f8      	ldr	r0, [r7, #12]
 800c2fe:	f000 f805 	bl	800c30c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c302:	f000 f8d7 	bl	800c4b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c306:	bf00      	nop
 800c308:	e7f0      	b.n	800c2ec <prvTimerTask+0x8>
	...

0800c30c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c316:	f7ff f84d 	bl	800b3b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c31a:	f107 0308 	add.w	r3, r7, #8
 800c31e:	4618      	mov	r0, r3
 800c320:	f000 f866 	bl	800c3f0 <prvSampleTimeNow>
 800c324:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d130      	bne.n	800c38e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d10a      	bne.n	800c348 <prvProcessTimerOrBlockTask+0x3c>
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	429a      	cmp	r2, r3
 800c338:	d806      	bhi.n	800c348 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c33a:	f7ff f849 	bl	800b3d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c33e:	68f9      	ldr	r1, [r7, #12]
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f7ff ff81 	bl	800c248 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c346:	e024      	b.n	800c392 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d008      	beq.n	800c360 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c34e:	4b13      	ldr	r3, [pc, #76]	@ (800c39c <prvProcessTimerOrBlockTask+0x90>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d101      	bne.n	800c35c <prvProcessTimerOrBlockTask+0x50>
 800c358:	2301      	movs	r3, #1
 800c35a:	e000      	b.n	800c35e <prvProcessTimerOrBlockTask+0x52>
 800c35c:	2300      	movs	r3, #0
 800c35e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c360:	4b0f      	ldr	r3, [pc, #60]	@ (800c3a0 <prvProcessTimerOrBlockTask+0x94>)
 800c362:	6818      	ldr	r0, [r3, #0]
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	1ad3      	subs	r3, r2, r3
 800c36a:	683a      	ldr	r2, [r7, #0]
 800c36c:	4619      	mov	r1, r3
 800c36e:	f7fe fd89 	bl	800ae84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c372:	f7ff f82d 	bl	800b3d0 <xTaskResumeAll>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d10a      	bne.n	800c392 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c37c:	4b09      	ldr	r3, [pc, #36]	@ (800c3a4 <prvProcessTimerOrBlockTask+0x98>)
 800c37e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c382:	601a      	str	r2, [r3, #0]
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	f3bf 8f6f 	isb	sy
}
 800c38c:	e001      	b.n	800c392 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c38e:	f7ff f81f 	bl	800b3d0 <xTaskResumeAll>
}
 800c392:	bf00      	nop
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	20001a38 	.word	0x20001a38
 800c3a0:	20001a3c 	.word	0x20001a3c
 800c3a4:	e000ed04 	.word	0xe000ed04

0800c3a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c3b0:	4b0e      	ldr	r3, [pc, #56]	@ (800c3ec <prvGetNextExpireTime+0x44>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d101      	bne.n	800c3be <prvGetNextExpireTime+0x16>
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	e000      	b.n	800c3c0 <prvGetNextExpireTime+0x18>
 800c3be:	2200      	movs	r2, #0
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d105      	bne.n	800c3d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c3cc:	4b07      	ldr	r3, [pc, #28]	@ (800c3ec <prvGetNextExpireTime+0x44>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	60fb      	str	r3, [r7, #12]
 800c3d6:	e001      	b.n	800c3dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3714      	adds	r7, #20
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr
 800c3ea:	bf00      	nop
 800c3ec:	20001a34 	.word	0x20001a34

0800c3f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c3f8:	f7ff f888 	bl	800b50c <xTaskGetTickCount>
 800c3fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c3fe:	4b0b      	ldr	r3, [pc, #44]	@ (800c42c <prvSampleTimeNow+0x3c>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	68fa      	ldr	r2, [r7, #12]
 800c404:	429a      	cmp	r2, r3
 800c406:	d205      	bcs.n	800c414 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c408:	f000 f93a 	bl	800c680 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2201      	movs	r2, #1
 800c410:	601a      	str	r2, [r3, #0]
 800c412:	e002      	b.n	800c41a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2200      	movs	r2, #0
 800c418:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c41a:	4a04      	ldr	r2, [pc, #16]	@ (800c42c <prvSampleTimeNow+0x3c>)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c420:	68fb      	ldr	r3, [r7, #12]
}
 800c422:	4618      	mov	r0, r3
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	20001a44 	.word	0x20001a44

0800c430 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b086      	sub	sp, #24
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	607a      	str	r2, [r7, #4]
 800c43c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c43e:	2300      	movs	r3, #0
 800c440:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	68ba      	ldr	r2, [r7, #8]
 800c446:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	68fa      	ldr	r2, [r7, #12]
 800c44c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c44e:	68ba      	ldr	r2, [r7, #8]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	429a      	cmp	r2, r3
 800c454:	d812      	bhi.n	800c47c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	1ad2      	subs	r2, r2, r3
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	429a      	cmp	r2, r3
 800c462:	d302      	bcc.n	800c46a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c464:	2301      	movs	r3, #1
 800c466:	617b      	str	r3, [r7, #20]
 800c468:	e01b      	b.n	800c4a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c46a:	4b10      	ldr	r3, [pc, #64]	@ (800c4ac <prvInsertTimerInActiveList+0x7c>)
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	3304      	adds	r3, #4
 800c472:	4619      	mov	r1, r3
 800c474:	4610      	mov	r0, r2
 800c476:	f7fd ffdc 	bl	800a432 <vListInsert>
 800c47a:	e012      	b.n	800c4a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	429a      	cmp	r2, r3
 800c482:	d206      	bcs.n	800c492 <prvInsertTimerInActiveList+0x62>
 800c484:	68ba      	ldr	r2, [r7, #8]
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d302      	bcc.n	800c492 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c48c:	2301      	movs	r3, #1
 800c48e:	617b      	str	r3, [r7, #20]
 800c490:	e007      	b.n	800c4a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c492:	4b07      	ldr	r3, [pc, #28]	@ (800c4b0 <prvInsertTimerInActiveList+0x80>)
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	3304      	adds	r3, #4
 800c49a:	4619      	mov	r1, r3
 800c49c:	4610      	mov	r0, r2
 800c49e:	f7fd ffc8 	bl	800a432 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c4a2:	697b      	ldr	r3, [r7, #20]
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3718      	adds	r7, #24
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	20001a38 	.word	0x20001a38
 800c4b0:	20001a34 	.word	0x20001a34

0800c4b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b08e      	sub	sp, #56	@ 0x38
 800c4b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c4ba:	e0ce      	b.n	800c65a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	da19      	bge.n	800c4f6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c4c2:	1d3b      	adds	r3, r7, #4
 800c4c4:	3304      	adds	r3, #4
 800c4c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d10b      	bne.n	800c4e6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d2:	f383 8811 	msr	BASEPRI, r3
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	f3bf 8f4f 	dsb	sy
 800c4de:	61fb      	str	r3, [r7, #28]
}
 800c4e0:	bf00      	nop
 800c4e2:	bf00      	nop
 800c4e4:	e7fd      	b.n	800c4e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4ec:	6850      	ldr	r0, [r2, #4]
 800c4ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4f0:	6892      	ldr	r2, [r2, #8]
 800c4f2:	4611      	mov	r1, r2
 800c4f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f2c0 80ae 	blt.w	800c65a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c504:	695b      	ldr	r3, [r3, #20]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d004      	beq.n	800c514 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c50c:	3304      	adds	r3, #4
 800c50e:	4618      	mov	r0, r3
 800c510:	f7fd ffc8 	bl	800a4a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c514:	463b      	mov	r3, r7
 800c516:	4618      	mov	r0, r3
 800c518:	f7ff ff6a 	bl	800c3f0 <prvSampleTimeNow>
 800c51c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2b09      	cmp	r3, #9
 800c522:	f200 8097 	bhi.w	800c654 <prvProcessReceivedCommands+0x1a0>
 800c526:	a201      	add	r2, pc, #4	@ (adr r2, 800c52c <prvProcessReceivedCommands+0x78>)
 800c528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c52c:	0800c555 	.word	0x0800c555
 800c530:	0800c555 	.word	0x0800c555
 800c534:	0800c555 	.word	0x0800c555
 800c538:	0800c5cb 	.word	0x0800c5cb
 800c53c:	0800c5df 	.word	0x0800c5df
 800c540:	0800c62b 	.word	0x0800c62b
 800c544:	0800c555 	.word	0x0800c555
 800c548:	0800c555 	.word	0x0800c555
 800c54c:	0800c5cb 	.word	0x0800c5cb
 800c550:	0800c5df 	.word	0x0800c5df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c556:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c55a:	f043 0301 	orr.w	r3, r3, #1
 800c55e:	b2da      	uxtb	r2, r3
 800c560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c562:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c566:	68ba      	ldr	r2, [r7, #8]
 800c568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c56a:	699b      	ldr	r3, [r3, #24]
 800c56c:	18d1      	adds	r1, r2, r3
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c574:	f7ff ff5c 	bl	800c430 <prvInsertTimerInActiveList>
 800c578:	4603      	mov	r3, r0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d06c      	beq.n	800c658 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c580:	6a1b      	ldr	r3, [r3, #32]
 800c582:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c584:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c588:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c58c:	f003 0304 	and.w	r3, r3, #4
 800c590:	2b00      	cmp	r3, #0
 800c592:	d061      	beq.n	800c658 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c594:	68ba      	ldr	r2, [r7, #8]
 800c596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c598:	699b      	ldr	r3, [r3, #24]
 800c59a:	441a      	add	r2, r3
 800c59c:	2300      	movs	r3, #0
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5a6:	f7ff fe01 	bl	800c1ac <xTimerGenericCommand>
 800c5aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c5ac:	6a3b      	ldr	r3, [r7, #32]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d152      	bne.n	800c658 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b6:	f383 8811 	msr	BASEPRI, r3
 800c5ba:	f3bf 8f6f 	isb	sy
 800c5be:	f3bf 8f4f 	dsb	sy
 800c5c2:	61bb      	str	r3, [r7, #24]
}
 800c5c4:	bf00      	nop
 800c5c6:	bf00      	nop
 800c5c8:	e7fd      	b.n	800c5c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5d0:	f023 0301 	bic.w	r3, r3, #1
 800c5d4:	b2da      	uxtb	r2, r3
 800c5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c5dc:	e03d      	b.n	800c65a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5e4:	f043 0301 	orr.w	r3, r3, #1
 800c5e8:	b2da      	uxtb	r2, r3
 800c5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c5f0:	68ba      	ldr	r2, [r7, #8]
 800c5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f8:	699b      	ldr	r3, [r3, #24]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d10b      	bne.n	800c616 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c602:	f383 8811 	msr	BASEPRI, r3
 800c606:	f3bf 8f6f 	isb	sy
 800c60a:	f3bf 8f4f 	dsb	sy
 800c60e:	617b      	str	r3, [r7, #20]
}
 800c610:	bf00      	nop
 800c612:	bf00      	nop
 800c614:	e7fd      	b.n	800c612 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c618:	699a      	ldr	r2, [r3, #24]
 800c61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c61c:	18d1      	adds	r1, r2, r3
 800c61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c622:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c624:	f7ff ff04 	bl	800c430 <prvInsertTimerInActiveList>
					break;
 800c628:	e017      	b.n	800c65a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c62a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c62c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c630:	f003 0302 	and.w	r3, r3, #2
 800c634:	2b00      	cmp	r3, #0
 800c636:	d103      	bne.n	800c640 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c638:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c63a:	f000 fbe5 	bl	800ce08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c63e:	e00c      	b.n	800c65a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c642:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c646:	f023 0301 	bic.w	r3, r3, #1
 800c64a:	b2da      	uxtb	r2, r3
 800c64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c64e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c652:	e002      	b.n	800c65a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c654:	bf00      	nop
 800c656:	e000      	b.n	800c65a <prvProcessReceivedCommands+0x1a6>
					break;
 800c658:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c65a:	4b08      	ldr	r3, [pc, #32]	@ (800c67c <prvProcessReceivedCommands+0x1c8>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	1d39      	adds	r1, r7, #4
 800c660:	2200      	movs	r2, #0
 800c662:	4618      	mov	r0, r3
 800c664:	f7fe f9f2 	bl	800aa4c <xQueueReceive>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	f47f af26 	bne.w	800c4bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c670:	bf00      	nop
 800c672:	bf00      	nop
 800c674:	3730      	adds	r7, #48	@ 0x30
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	20001a3c 	.word	0x20001a3c

0800c680 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b088      	sub	sp, #32
 800c684:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c686:	e049      	b.n	800c71c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c688:	4b2e      	ldr	r3, [pc, #184]	@ (800c744 <prvSwitchTimerLists+0xc4>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	68db      	ldr	r3, [r3, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c692:	4b2c      	ldr	r3, [pc, #176]	@ (800c744 <prvSwitchTimerLists+0xc4>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	68db      	ldr	r3, [r3, #12]
 800c69a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	3304      	adds	r3, #4
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7fd feff 	bl	800a4a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	6a1b      	ldr	r3, [r3, #32]
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6b4:	f003 0304 	and.w	r3, r3, #4
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d02f      	beq.n	800c71c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	699b      	ldr	r3, [r3, #24]
 800c6c0:	693a      	ldr	r2, [r7, #16]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c6c6:	68ba      	ldr	r2, [r7, #8]
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d90e      	bls.n	800c6ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	68ba      	ldr	r2, [r7, #8]
 800c6d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	68fa      	ldr	r2, [r7, #12]
 800c6d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c6da:	4b1a      	ldr	r3, [pc, #104]	@ (800c744 <prvSwitchTimerLists+0xc4>)
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	3304      	adds	r3, #4
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	4610      	mov	r0, r2
 800c6e6:	f7fd fea4 	bl	800a432 <vListInsert>
 800c6ea:	e017      	b.n	800c71c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	9300      	str	r3, [sp, #0]
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	693a      	ldr	r2, [r7, #16]
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	68f8      	ldr	r0, [r7, #12]
 800c6f8:	f7ff fd58 	bl	800c1ac <xTimerGenericCommand>
 800c6fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d10b      	bne.n	800c71c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c708:	f383 8811 	msr	BASEPRI, r3
 800c70c:	f3bf 8f6f 	isb	sy
 800c710:	f3bf 8f4f 	dsb	sy
 800c714:	603b      	str	r3, [r7, #0]
}
 800c716:	bf00      	nop
 800c718:	bf00      	nop
 800c71a:	e7fd      	b.n	800c718 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c71c:	4b09      	ldr	r3, [pc, #36]	@ (800c744 <prvSwitchTimerLists+0xc4>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d1b0      	bne.n	800c688 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c726:	4b07      	ldr	r3, [pc, #28]	@ (800c744 <prvSwitchTimerLists+0xc4>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c72c:	4b06      	ldr	r3, [pc, #24]	@ (800c748 <prvSwitchTimerLists+0xc8>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a04      	ldr	r2, [pc, #16]	@ (800c744 <prvSwitchTimerLists+0xc4>)
 800c732:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c734:	4a04      	ldr	r2, [pc, #16]	@ (800c748 <prvSwitchTimerLists+0xc8>)
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	6013      	str	r3, [r2, #0]
}
 800c73a:	bf00      	nop
 800c73c:	3718      	adds	r7, #24
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	20001a34 	.word	0x20001a34
 800c748:	20001a38 	.word	0x20001a38

0800c74c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c752:	f000 f969 	bl	800ca28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c756:	4b15      	ldr	r3, [pc, #84]	@ (800c7ac <prvCheckForValidListAndQueue+0x60>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d120      	bne.n	800c7a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c75e:	4814      	ldr	r0, [pc, #80]	@ (800c7b0 <prvCheckForValidListAndQueue+0x64>)
 800c760:	f7fd fe16 	bl	800a390 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c764:	4813      	ldr	r0, [pc, #76]	@ (800c7b4 <prvCheckForValidListAndQueue+0x68>)
 800c766:	f7fd fe13 	bl	800a390 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c76a:	4b13      	ldr	r3, [pc, #76]	@ (800c7b8 <prvCheckForValidListAndQueue+0x6c>)
 800c76c:	4a10      	ldr	r2, [pc, #64]	@ (800c7b0 <prvCheckForValidListAndQueue+0x64>)
 800c76e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c770:	4b12      	ldr	r3, [pc, #72]	@ (800c7bc <prvCheckForValidListAndQueue+0x70>)
 800c772:	4a10      	ldr	r2, [pc, #64]	@ (800c7b4 <prvCheckForValidListAndQueue+0x68>)
 800c774:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c776:	2300      	movs	r3, #0
 800c778:	9300      	str	r3, [sp, #0]
 800c77a:	4b11      	ldr	r3, [pc, #68]	@ (800c7c0 <prvCheckForValidListAndQueue+0x74>)
 800c77c:	4a11      	ldr	r2, [pc, #68]	@ (800c7c4 <prvCheckForValidListAndQueue+0x78>)
 800c77e:	2110      	movs	r1, #16
 800c780:	200a      	movs	r0, #10
 800c782:	f7fd ff23 	bl	800a5cc <xQueueGenericCreateStatic>
 800c786:	4603      	mov	r3, r0
 800c788:	4a08      	ldr	r2, [pc, #32]	@ (800c7ac <prvCheckForValidListAndQueue+0x60>)
 800c78a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c78c:	4b07      	ldr	r3, [pc, #28]	@ (800c7ac <prvCheckForValidListAndQueue+0x60>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d005      	beq.n	800c7a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c794:	4b05      	ldr	r3, [pc, #20]	@ (800c7ac <prvCheckForValidListAndQueue+0x60>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	490b      	ldr	r1, [pc, #44]	@ (800c7c8 <prvCheckForValidListAndQueue+0x7c>)
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7fe fb48 	bl	800ae30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c7a0:	f000 f974 	bl	800ca8c <vPortExitCritical>
}
 800c7a4:	bf00      	nop
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	20001a3c 	.word	0x20001a3c
 800c7b0:	20001a0c 	.word	0x20001a0c
 800c7b4:	20001a20 	.word	0x20001a20
 800c7b8:	20001a34 	.word	0x20001a34
 800c7bc:	20001a38 	.word	0x20001a38
 800c7c0:	20001ae8 	.word	0x20001ae8
 800c7c4:	20001a48 	.word	0x20001a48
 800c7c8:	0800daac 	.word	0x0800daac

0800c7cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b085      	sub	sp, #20
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	3b04      	subs	r3, #4
 800c7dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c7e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	3b04      	subs	r3, #4
 800c7ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	f023 0201 	bic.w	r2, r3, #1
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	3b04      	subs	r3, #4
 800c7fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c7fc:	4a0c      	ldr	r2, [pc, #48]	@ (800c830 <pxPortInitialiseStack+0x64>)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	3b14      	subs	r3, #20
 800c806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	3b04      	subs	r3, #4
 800c812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f06f 0202 	mvn.w	r2, #2
 800c81a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	3b20      	subs	r3, #32
 800c820:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c822:	68fb      	ldr	r3, [r7, #12]
}
 800c824:	4618      	mov	r0, r3
 800c826:	3714      	adds	r7, #20
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr
 800c830:	0800c835 	.word	0x0800c835

0800c834 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c834:	b480      	push	{r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c83a:	2300      	movs	r3, #0
 800c83c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c83e:	4b13      	ldr	r3, [pc, #76]	@ (800c88c <prvTaskExitError+0x58>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c846:	d00b      	beq.n	800c860 <prvTaskExitError+0x2c>
	__asm volatile
 800c848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c84c:	f383 8811 	msr	BASEPRI, r3
 800c850:	f3bf 8f6f 	isb	sy
 800c854:	f3bf 8f4f 	dsb	sy
 800c858:	60fb      	str	r3, [r7, #12]
}
 800c85a:	bf00      	nop
 800c85c:	bf00      	nop
 800c85e:	e7fd      	b.n	800c85c <prvTaskExitError+0x28>
	__asm volatile
 800c860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c864:	f383 8811 	msr	BASEPRI, r3
 800c868:	f3bf 8f6f 	isb	sy
 800c86c:	f3bf 8f4f 	dsb	sy
 800c870:	60bb      	str	r3, [r7, #8]
}
 800c872:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c874:	bf00      	nop
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d0fc      	beq.n	800c876 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c87c:	bf00      	nop
 800c87e:	bf00      	nop
 800c880:	3714      	adds	r7, #20
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr
 800c88a:	bf00      	nop
 800c88c:	20000028 	.word	0x20000028

0800c890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c890:	4b07      	ldr	r3, [pc, #28]	@ (800c8b0 <pxCurrentTCBConst2>)
 800c892:	6819      	ldr	r1, [r3, #0]
 800c894:	6808      	ldr	r0, [r1, #0]
 800c896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c89a:	f380 8809 	msr	PSP, r0
 800c89e:	f3bf 8f6f 	isb	sy
 800c8a2:	f04f 0000 	mov.w	r0, #0
 800c8a6:	f380 8811 	msr	BASEPRI, r0
 800c8aa:	4770      	bx	lr
 800c8ac:	f3af 8000 	nop.w

0800c8b0 <pxCurrentTCBConst2>:
 800c8b0:	2000150c 	.word	0x2000150c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c8b4:	bf00      	nop
 800c8b6:	bf00      	nop

0800c8b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c8b8:	4808      	ldr	r0, [pc, #32]	@ (800c8dc <prvPortStartFirstTask+0x24>)
 800c8ba:	6800      	ldr	r0, [r0, #0]
 800c8bc:	6800      	ldr	r0, [r0, #0]
 800c8be:	f380 8808 	msr	MSP, r0
 800c8c2:	f04f 0000 	mov.w	r0, #0
 800c8c6:	f380 8814 	msr	CONTROL, r0
 800c8ca:	b662      	cpsie	i
 800c8cc:	b661      	cpsie	f
 800c8ce:	f3bf 8f4f 	dsb	sy
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	df00      	svc	0
 800c8d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c8da:	bf00      	nop
 800c8dc:	e000ed08 	.word	0xe000ed08

0800c8e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b086      	sub	sp, #24
 800c8e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c8e6:	4b47      	ldr	r3, [pc, #284]	@ (800ca04 <xPortStartScheduler+0x124>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a47      	ldr	r2, [pc, #284]	@ (800ca08 <xPortStartScheduler+0x128>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d10b      	bne.n	800c908 <xPortStartScheduler+0x28>
	__asm volatile
 800c8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f4:	f383 8811 	msr	BASEPRI, r3
 800c8f8:	f3bf 8f6f 	isb	sy
 800c8fc:	f3bf 8f4f 	dsb	sy
 800c900:	613b      	str	r3, [r7, #16]
}
 800c902:	bf00      	nop
 800c904:	bf00      	nop
 800c906:	e7fd      	b.n	800c904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c908:	4b3e      	ldr	r3, [pc, #248]	@ (800ca04 <xPortStartScheduler+0x124>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a3f      	ldr	r2, [pc, #252]	@ (800ca0c <xPortStartScheduler+0x12c>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d10b      	bne.n	800c92a <xPortStartScheduler+0x4a>
	__asm volatile
 800c912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c916:	f383 8811 	msr	BASEPRI, r3
 800c91a:	f3bf 8f6f 	isb	sy
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	60fb      	str	r3, [r7, #12]
}
 800c924:	bf00      	nop
 800c926:	bf00      	nop
 800c928:	e7fd      	b.n	800c926 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c92a:	4b39      	ldr	r3, [pc, #228]	@ (800ca10 <xPortStartScheduler+0x130>)
 800c92c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	b2db      	uxtb	r3, r3
 800c934:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	22ff      	movs	r2, #255	@ 0xff
 800c93a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	b2db      	uxtb	r3, r3
 800c942:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c944:	78fb      	ldrb	r3, [r7, #3]
 800c946:	b2db      	uxtb	r3, r3
 800c948:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c94c:	b2da      	uxtb	r2, r3
 800c94e:	4b31      	ldr	r3, [pc, #196]	@ (800ca14 <xPortStartScheduler+0x134>)
 800c950:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c952:	4b31      	ldr	r3, [pc, #196]	@ (800ca18 <xPortStartScheduler+0x138>)
 800c954:	2207      	movs	r2, #7
 800c956:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c958:	e009      	b.n	800c96e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c95a:	4b2f      	ldr	r3, [pc, #188]	@ (800ca18 <xPortStartScheduler+0x138>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	3b01      	subs	r3, #1
 800c960:	4a2d      	ldr	r2, [pc, #180]	@ (800ca18 <xPortStartScheduler+0x138>)
 800c962:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c964:	78fb      	ldrb	r3, [r7, #3]
 800c966:	b2db      	uxtb	r3, r3
 800c968:	005b      	lsls	r3, r3, #1
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c96e:	78fb      	ldrb	r3, [r7, #3]
 800c970:	b2db      	uxtb	r3, r3
 800c972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c976:	2b80      	cmp	r3, #128	@ 0x80
 800c978:	d0ef      	beq.n	800c95a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c97a:	4b27      	ldr	r3, [pc, #156]	@ (800ca18 <xPortStartScheduler+0x138>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f1c3 0307 	rsb	r3, r3, #7
 800c982:	2b04      	cmp	r3, #4
 800c984:	d00b      	beq.n	800c99e <xPortStartScheduler+0xbe>
	__asm volatile
 800c986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c98a:	f383 8811 	msr	BASEPRI, r3
 800c98e:	f3bf 8f6f 	isb	sy
 800c992:	f3bf 8f4f 	dsb	sy
 800c996:	60bb      	str	r3, [r7, #8]
}
 800c998:	bf00      	nop
 800c99a:	bf00      	nop
 800c99c:	e7fd      	b.n	800c99a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c99e:	4b1e      	ldr	r3, [pc, #120]	@ (800ca18 <xPortStartScheduler+0x138>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	021b      	lsls	r3, r3, #8
 800c9a4:	4a1c      	ldr	r2, [pc, #112]	@ (800ca18 <xPortStartScheduler+0x138>)
 800c9a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c9a8:	4b1b      	ldr	r3, [pc, #108]	@ (800ca18 <xPortStartScheduler+0x138>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c9b0:	4a19      	ldr	r2, [pc, #100]	@ (800ca18 <xPortStartScheduler+0x138>)
 800c9b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	b2da      	uxtb	r2, r3
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c9bc:	4b17      	ldr	r3, [pc, #92]	@ (800ca1c <xPortStartScheduler+0x13c>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a16      	ldr	r2, [pc, #88]	@ (800ca1c <xPortStartScheduler+0x13c>)
 800c9c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c9c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c9c8:	4b14      	ldr	r3, [pc, #80]	@ (800ca1c <xPortStartScheduler+0x13c>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a13      	ldr	r2, [pc, #76]	@ (800ca1c <xPortStartScheduler+0x13c>)
 800c9ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c9d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c9d4:	f000 f8da 	bl	800cb8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c9d8:	4b11      	ldr	r3, [pc, #68]	@ (800ca20 <xPortStartScheduler+0x140>)
 800c9da:	2200      	movs	r2, #0
 800c9dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c9de:	f000 f8f9 	bl	800cbd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c9e2:	4b10      	ldr	r3, [pc, #64]	@ (800ca24 <xPortStartScheduler+0x144>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4a0f      	ldr	r2, [pc, #60]	@ (800ca24 <xPortStartScheduler+0x144>)
 800c9e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c9ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c9ee:	f7ff ff63 	bl	800c8b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c9f2:	f7fe ff4f 	bl	800b894 <vTaskSwitchContext>
	prvTaskExitError();
 800c9f6:	f7ff ff1d 	bl	800c834 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3718      	adds	r7, #24
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	e000ed00 	.word	0xe000ed00
 800ca08:	410fc271 	.word	0x410fc271
 800ca0c:	410fc270 	.word	0x410fc270
 800ca10:	e000e400 	.word	0xe000e400
 800ca14:	20001b38 	.word	0x20001b38
 800ca18:	20001b3c 	.word	0x20001b3c
 800ca1c:	e000ed20 	.word	0xe000ed20
 800ca20:	20000028 	.word	0x20000028
 800ca24:	e000ef34 	.word	0xe000ef34

0800ca28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca32:	f383 8811 	msr	BASEPRI, r3
 800ca36:	f3bf 8f6f 	isb	sy
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	607b      	str	r3, [r7, #4]
}
 800ca40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca42:	4b10      	ldr	r3, [pc, #64]	@ (800ca84 <vPortEnterCritical+0x5c>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	3301      	adds	r3, #1
 800ca48:	4a0e      	ldr	r2, [pc, #56]	@ (800ca84 <vPortEnterCritical+0x5c>)
 800ca4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca4c:	4b0d      	ldr	r3, [pc, #52]	@ (800ca84 <vPortEnterCritical+0x5c>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d110      	bne.n	800ca76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca54:	4b0c      	ldr	r3, [pc, #48]	@ (800ca88 <vPortEnterCritical+0x60>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d00b      	beq.n	800ca76 <vPortEnterCritical+0x4e>
	__asm volatile
 800ca5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	603b      	str	r3, [r7, #0]
}
 800ca70:	bf00      	nop
 800ca72:	bf00      	nop
 800ca74:	e7fd      	b.n	800ca72 <vPortEnterCritical+0x4a>
	}
}
 800ca76:	bf00      	nop
 800ca78:	370c      	adds	r7, #12
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop
 800ca84:	20000028 	.word	0x20000028
 800ca88:	e000ed04 	.word	0xe000ed04

0800ca8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca92:	4b12      	ldr	r3, [pc, #72]	@ (800cadc <vPortExitCritical+0x50>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d10b      	bne.n	800cab2 <vPortExitCritical+0x26>
	__asm volatile
 800ca9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca9e:	f383 8811 	msr	BASEPRI, r3
 800caa2:	f3bf 8f6f 	isb	sy
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	607b      	str	r3, [r7, #4]
}
 800caac:	bf00      	nop
 800caae:	bf00      	nop
 800cab0:	e7fd      	b.n	800caae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cab2:	4b0a      	ldr	r3, [pc, #40]	@ (800cadc <vPortExitCritical+0x50>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	3b01      	subs	r3, #1
 800cab8:	4a08      	ldr	r2, [pc, #32]	@ (800cadc <vPortExitCritical+0x50>)
 800caba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cabc:	4b07      	ldr	r3, [pc, #28]	@ (800cadc <vPortExitCritical+0x50>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d105      	bne.n	800cad0 <vPortExitCritical+0x44>
 800cac4:	2300      	movs	r3, #0
 800cac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	f383 8811 	msr	BASEPRI, r3
}
 800cace:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cad0:	bf00      	nop
 800cad2:	370c      	adds	r7, #12
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr
 800cadc:	20000028 	.word	0x20000028

0800cae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cae0:	f3ef 8009 	mrs	r0, PSP
 800cae4:	f3bf 8f6f 	isb	sy
 800cae8:	4b15      	ldr	r3, [pc, #84]	@ (800cb40 <pxCurrentTCBConst>)
 800caea:	681a      	ldr	r2, [r3, #0]
 800caec:	f01e 0f10 	tst.w	lr, #16
 800caf0:	bf08      	it	eq
 800caf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800caf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cafa:	6010      	str	r0, [r2, #0]
 800cafc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cb00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cb04:	f380 8811 	msr	BASEPRI, r0
 800cb08:	f3bf 8f4f 	dsb	sy
 800cb0c:	f3bf 8f6f 	isb	sy
 800cb10:	f7fe fec0 	bl	800b894 <vTaskSwitchContext>
 800cb14:	f04f 0000 	mov.w	r0, #0
 800cb18:	f380 8811 	msr	BASEPRI, r0
 800cb1c:	bc09      	pop	{r0, r3}
 800cb1e:	6819      	ldr	r1, [r3, #0]
 800cb20:	6808      	ldr	r0, [r1, #0]
 800cb22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb26:	f01e 0f10 	tst.w	lr, #16
 800cb2a:	bf08      	it	eq
 800cb2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cb30:	f380 8809 	msr	PSP, r0
 800cb34:	f3bf 8f6f 	isb	sy
 800cb38:	4770      	bx	lr
 800cb3a:	bf00      	nop
 800cb3c:	f3af 8000 	nop.w

0800cb40 <pxCurrentTCBConst>:
 800cb40:	2000150c 	.word	0x2000150c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb44:	bf00      	nop
 800cb46:	bf00      	nop

0800cb48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb52:	f383 8811 	msr	BASEPRI, r3
 800cb56:	f3bf 8f6f 	isb	sy
 800cb5a:	f3bf 8f4f 	dsb	sy
 800cb5e:	607b      	str	r3, [r7, #4]
}
 800cb60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb62:	f7fe fddd 	bl	800b720 <xTaskIncrementTick>
 800cb66:	4603      	mov	r3, r0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d003      	beq.n	800cb74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb6c:	4b06      	ldr	r3, [pc, #24]	@ (800cb88 <xPortSysTickHandler+0x40>)
 800cb6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb72:	601a      	str	r2, [r3, #0]
 800cb74:	2300      	movs	r3, #0
 800cb76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	f383 8811 	msr	BASEPRI, r3
}
 800cb7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cb80:	bf00      	nop
 800cb82:	3708      	adds	r7, #8
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	e000ed04 	.word	0xe000ed04

0800cb8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb90:	4b0b      	ldr	r3, [pc, #44]	@ (800cbc0 <vPortSetupTimerInterrupt+0x34>)
 800cb92:	2200      	movs	r2, #0
 800cb94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb96:	4b0b      	ldr	r3, [pc, #44]	@ (800cbc4 <vPortSetupTimerInterrupt+0x38>)
 800cb98:	2200      	movs	r2, #0
 800cb9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb9c:	4b0a      	ldr	r3, [pc, #40]	@ (800cbc8 <vPortSetupTimerInterrupt+0x3c>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a0a      	ldr	r2, [pc, #40]	@ (800cbcc <vPortSetupTimerInterrupt+0x40>)
 800cba2:	fba2 2303 	umull	r2, r3, r2, r3
 800cba6:	099b      	lsrs	r3, r3, #6
 800cba8:	4a09      	ldr	r2, [pc, #36]	@ (800cbd0 <vPortSetupTimerInterrupt+0x44>)
 800cbaa:	3b01      	subs	r3, #1
 800cbac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cbae:	4b04      	ldr	r3, [pc, #16]	@ (800cbc0 <vPortSetupTimerInterrupt+0x34>)
 800cbb0:	2207      	movs	r2, #7
 800cbb2:	601a      	str	r2, [r3, #0]
}
 800cbb4:	bf00      	nop
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop
 800cbc0:	e000e010 	.word	0xe000e010
 800cbc4:	e000e018 	.word	0xe000e018
 800cbc8:	2000001c 	.word	0x2000001c
 800cbcc:	10624dd3 	.word	0x10624dd3
 800cbd0:	e000e014 	.word	0xe000e014

0800cbd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cbd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cbe4 <vPortEnableVFP+0x10>
 800cbd8:	6801      	ldr	r1, [r0, #0]
 800cbda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cbde:	6001      	str	r1, [r0, #0]
 800cbe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cbe2:	bf00      	nop
 800cbe4:	e000ed88 	.word	0xe000ed88

0800cbe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cbe8:	b480      	push	{r7}
 800cbea:	b085      	sub	sp, #20
 800cbec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cbee:	f3ef 8305 	mrs	r3, IPSR
 800cbf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2b0f      	cmp	r3, #15
 800cbf8:	d915      	bls.n	800cc26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cbfa:	4a18      	ldr	r2, [pc, #96]	@ (800cc5c <vPortValidateInterruptPriority+0x74>)
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	4413      	add	r3, r2
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cc04:	4b16      	ldr	r3, [pc, #88]	@ (800cc60 <vPortValidateInterruptPriority+0x78>)
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	7afa      	ldrb	r2, [r7, #11]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d20b      	bcs.n	800cc26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cc0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc12:	f383 8811 	msr	BASEPRI, r3
 800cc16:	f3bf 8f6f 	isb	sy
 800cc1a:	f3bf 8f4f 	dsb	sy
 800cc1e:	607b      	str	r3, [r7, #4]
}
 800cc20:	bf00      	nop
 800cc22:	bf00      	nop
 800cc24:	e7fd      	b.n	800cc22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cc26:	4b0f      	ldr	r3, [pc, #60]	@ (800cc64 <vPortValidateInterruptPriority+0x7c>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cc2e:	4b0e      	ldr	r3, [pc, #56]	@ (800cc68 <vPortValidateInterruptPriority+0x80>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d90b      	bls.n	800cc4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cc36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc3a:	f383 8811 	msr	BASEPRI, r3
 800cc3e:	f3bf 8f6f 	isb	sy
 800cc42:	f3bf 8f4f 	dsb	sy
 800cc46:	603b      	str	r3, [r7, #0]
}
 800cc48:	bf00      	nop
 800cc4a:	bf00      	nop
 800cc4c:	e7fd      	b.n	800cc4a <vPortValidateInterruptPriority+0x62>
	}
 800cc4e:	bf00      	nop
 800cc50:	3714      	adds	r7, #20
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop
 800cc5c:	e000e3f0 	.word	0xe000e3f0
 800cc60:	20001b38 	.word	0x20001b38
 800cc64:	e000ed0c 	.word	0xe000ed0c
 800cc68:	20001b3c 	.word	0x20001b3c

0800cc6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b08a      	sub	sp, #40	@ 0x28
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cc74:	2300      	movs	r3, #0
 800cc76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cc78:	f7fe fb9c 	bl	800b3b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cc7c:	4b5c      	ldr	r3, [pc, #368]	@ (800cdf0 <pvPortMalloc+0x184>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d101      	bne.n	800cc88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cc84:	f000 f924 	bl	800ced0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cc88:	4b5a      	ldr	r3, [pc, #360]	@ (800cdf4 <pvPortMalloc+0x188>)
 800cc8a:	681a      	ldr	r2, [r3, #0]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	4013      	ands	r3, r2
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	f040 8095 	bne.w	800cdc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d01e      	beq.n	800ccda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cc9c:	2208      	movs	r2, #8
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	4413      	add	r3, r2
 800cca2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f003 0307 	and.w	r3, r3, #7
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d015      	beq.n	800ccda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f023 0307 	bic.w	r3, r3, #7
 800ccb4:	3308      	adds	r3, #8
 800ccb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f003 0307 	and.w	r3, r3, #7
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d00b      	beq.n	800ccda <pvPortMalloc+0x6e>
	__asm volatile
 800ccc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc6:	f383 8811 	msr	BASEPRI, r3
 800ccca:	f3bf 8f6f 	isb	sy
 800ccce:	f3bf 8f4f 	dsb	sy
 800ccd2:	617b      	str	r3, [r7, #20]
}
 800ccd4:	bf00      	nop
 800ccd6:	bf00      	nop
 800ccd8:	e7fd      	b.n	800ccd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d06f      	beq.n	800cdc0 <pvPortMalloc+0x154>
 800cce0:	4b45      	ldr	r3, [pc, #276]	@ (800cdf8 <pvPortMalloc+0x18c>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d86a      	bhi.n	800cdc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ccea:	4b44      	ldr	r3, [pc, #272]	@ (800cdfc <pvPortMalloc+0x190>)
 800ccec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ccee:	4b43      	ldr	r3, [pc, #268]	@ (800cdfc <pvPortMalloc+0x190>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ccf4:	e004      	b.n	800cd00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ccf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ccfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d903      	bls.n	800cd12 <pvPortMalloc+0xa6>
 800cd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1f1      	bne.n	800ccf6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cd12:	4b37      	ldr	r3, [pc, #220]	@ (800cdf0 <pvPortMalloc+0x184>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d051      	beq.n	800cdc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd1c:	6a3b      	ldr	r3, [r7, #32]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	2208      	movs	r2, #8
 800cd22:	4413      	add	r3, r2
 800cd24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	6a3b      	ldr	r3, [r7, #32]
 800cd2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cd2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd30:	685a      	ldr	r2, [r3, #4]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	1ad2      	subs	r2, r2, r3
 800cd36:	2308      	movs	r3, #8
 800cd38:	005b      	lsls	r3, r3, #1
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d920      	bls.n	800cd80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cd3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	4413      	add	r3, r2
 800cd44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd46:	69bb      	ldr	r3, [r7, #24]
 800cd48:	f003 0307 	and.w	r3, r3, #7
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00b      	beq.n	800cd68 <pvPortMalloc+0xfc>
	__asm volatile
 800cd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd54:	f383 8811 	msr	BASEPRI, r3
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	613b      	str	r3, [r7, #16]
}
 800cd62:	bf00      	nop
 800cd64:	bf00      	nop
 800cd66:	e7fd      	b.n	800cd64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cd68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd6a:	685a      	ldr	r2, [r3, #4]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	1ad2      	subs	r2, r2, r3
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cd7a:	69b8      	ldr	r0, [r7, #24]
 800cd7c:	f000 f90a 	bl	800cf94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd80:	4b1d      	ldr	r3, [pc, #116]	@ (800cdf8 <pvPortMalloc+0x18c>)
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	1ad3      	subs	r3, r2, r3
 800cd8a:	4a1b      	ldr	r2, [pc, #108]	@ (800cdf8 <pvPortMalloc+0x18c>)
 800cd8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd8e:	4b1a      	ldr	r3, [pc, #104]	@ (800cdf8 <pvPortMalloc+0x18c>)
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	4b1b      	ldr	r3, [pc, #108]	@ (800ce00 <pvPortMalloc+0x194>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d203      	bcs.n	800cda2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd9a:	4b17      	ldr	r3, [pc, #92]	@ (800cdf8 <pvPortMalloc+0x18c>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4a18      	ldr	r2, [pc, #96]	@ (800ce00 <pvPortMalloc+0x194>)
 800cda0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cda2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda4:	685a      	ldr	r2, [r3, #4]
 800cda6:	4b13      	ldr	r3, [pc, #76]	@ (800cdf4 <pvPortMalloc+0x188>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	431a      	orrs	r2, r3
 800cdac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cdb6:	4b13      	ldr	r3, [pc, #76]	@ (800ce04 <pvPortMalloc+0x198>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	3301      	adds	r3, #1
 800cdbc:	4a11      	ldr	r2, [pc, #68]	@ (800ce04 <pvPortMalloc+0x198>)
 800cdbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cdc0:	f7fe fb06 	bl	800b3d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cdc4:	69fb      	ldr	r3, [r7, #28]
 800cdc6:	f003 0307 	and.w	r3, r3, #7
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00b      	beq.n	800cde6 <pvPortMalloc+0x17a>
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	60fb      	str	r3, [r7, #12]
}
 800cde0:	bf00      	nop
 800cde2:	bf00      	nop
 800cde4:	e7fd      	b.n	800cde2 <pvPortMalloc+0x176>
	return pvReturn;
 800cde6:	69fb      	ldr	r3, [r7, #28]
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3728      	adds	r7, #40	@ 0x28
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	20005748 	.word	0x20005748
 800cdf4:	2000575c 	.word	0x2000575c
 800cdf8:	2000574c 	.word	0x2000574c
 800cdfc:	20005740 	.word	0x20005740
 800ce00:	20005750 	.word	0x20005750
 800ce04:	20005754 	.word	0x20005754

0800ce08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b086      	sub	sp, #24
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d04f      	beq.n	800ceba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ce1a:	2308      	movs	r3, #8
 800ce1c:	425b      	negs	r3, r3
 800ce1e:	697a      	ldr	r2, [r7, #20]
 800ce20:	4413      	add	r3, r2
 800ce22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	685a      	ldr	r2, [r3, #4]
 800ce2c:	4b25      	ldr	r3, [pc, #148]	@ (800cec4 <vPortFree+0xbc>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4013      	ands	r3, r2
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d10b      	bne.n	800ce4e <vPortFree+0x46>
	__asm volatile
 800ce36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce3a:	f383 8811 	msr	BASEPRI, r3
 800ce3e:	f3bf 8f6f 	isb	sy
 800ce42:	f3bf 8f4f 	dsb	sy
 800ce46:	60fb      	str	r3, [r7, #12]
}
 800ce48:	bf00      	nop
 800ce4a:	bf00      	nop
 800ce4c:	e7fd      	b.n	800ce4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d00b      	beq.n	800ce6e <vPortFree+0x66>
	__asm volatile
 800ce56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce5a:	f383 8811 	msr	BASEPRI, r3
 800ce5e:	f3bf 8f6f 	isb	sy
 800ce62:	f3bf 8f4f 	dsb	sy
 800ce66:	60bb      	str	r3, [r7, #8]
}
 800ce68:	bf00      	nop
 800ce6a:	bf00      	nop
 800ce6c:	e7fd      	b.n	800ce6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	685a      	ldr	r2, [r3, #4]
 800ce72:	4b14      	ldr	r3, [pc, #80]	@ (800cec4 <vPortFree+0xbc>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4013      	ands	r3, r2
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d01e      	beq.n	800ceba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d11a      	bne.n	800ceba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	685a      	ldr	r2, [r3, #4]
 800ce88:	4b0e      	ldr	r3, [pc, #56]	@ (800cec4 <vPortFree+0xbc>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	43db      	mvns	r3, r3
 800ce8e:	401a      	ands	r2, r3
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ce94:	f7fe fa8e 	bl	800b3b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	685a      	ldr	r2, [r3, #4]
 800ce9c:	4b0a      	ldr	r3, [pc, #40]	@ (800cec8 <vPortFree+0xc0>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4413      	add	r3, r2
 800cea2:	4a09      	ldr	r2, [pc, #36]	@ (800cec8 <vPortFree+0xc0>)
 800cea4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cea6:	6938      	ldr	r0, [r7, #16]
 800cea8:	f000 f874 	bl	800cf94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ceac:	4b07      	ldr	r3, [pc, #28]	@ (800cecc <vPortFree+0xc4>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	4a06      	ldr	r2, [pc, #24]	@ (800cecc <vPortFree+0xc4>)
 800ceb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ceb6:	f7fe fa8b 	bl	800b3d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ceba:	bf00      	nop
 800cebc:	3718      	adds	r7, #24
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	2000575c 	.word	0x2000575c
 800cec8:	2000574c 	.word	0x2000574c
 800cecc:	20005758 	.word	0x20005758

0800ced0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ced0:	b480      	push	{r7}
 800ced2:	b085      	sub	sp, #20
 800ced4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ced6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ceda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cedc:	4b27      	ldr	r3, [pc, #156]	@ (800cf7c <prvHeapInit+0xac>)
 800cede:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f003 0307 	and.w	r3, r3, #7
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00c      	beq.n	800cf04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	3307      	adds	r3, #7
 800ceee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f023 0307 	bic.w	r3, r3, #7
 800cef6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cef8:	68ba      	ldr	r2, [r7, #8]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	1ad3      	subs	r3, r2, r3
 800cefe:	4a1f      	ldr	r2, [pc, #124]	@ (800cf7c <prvHeapInit+0xac>)
 800cf00:	4413      	add	r3, r2
 800cf02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cf08:	4a1d      	ldr	r2, [pc, #116]	@ (800cf80 <prvHeapInit+0xb0>)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cf0e:	4b1c      	ldr	r3, [pc, #112]	@ (800cf80 <prvHeapInit+0xb0>)
 800cf10:	2200      	movs	r2, #0
 800cf12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	68ba      	ldr	r2, [r7, #8]
 800cf18:	4413      	add	r3, r2
 800cf1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cf1c:	2208      	movs	r2, #8
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	1a9b      	subs	r3, r3, r2
 800cf22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f023 0307 	bic.w	r3, r3, #7
 800cf2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	4a15      	ldr	r2, [pc, #84]	@ (800cf84 <prvHeapInit+0xb4>)
 800cf30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cf32:	4b14      	ldr	r3, [pc, #80]	@ (800cf84 <prvHeapInit+0xb4>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	2200      	movs	r2, #0
 800cf38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cf3a:	4b12      	ldr	r3, [pc, #72]	@ (800cf84 <prvHeapInit+0xb4>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	1ad2      	subs	r2, r2, r3
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cf50:	4b0c      	ldr	r3, [pc, #48]	@ (800cf84 <prvHeapInit+0xb4>)
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	4a0a      	ldr	r2, [pc, #40]	@ (800cf88 <prvHeapInit+0xb8>)
 800cf5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	4a09      	ldr	r2, [pc, #36]	@ (800cf8c <prvHeapInit+0xbc>)
 800cf66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cf68:	4b09      	ldr	r3, [pc, #36]	@ (800cf90 <prvHeapInit+0xc0>)
 800cf6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cf6e:	601a      	str	r2, [r3, #0]
}
 800cf70:	bf00      	nop
 800cf72:	3714      	adds	r7, #20
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr
 800cf7c:	20001b40 	.word	0x20001b40
 800cf80:	20005740 	.word	0x20005740
 800cf84:	20005748 	.word	0x20005748
 800cf88:	20005750 	.word	0x20005750
 800cf8c:	2000574c 	.word	0x2000574c
 800cf90:	2000575c 	.word	0x2000575c

0800cf94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cf94:	b480      	push	{r7}
 800cf96:	b085      	sub	sp, #20
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf9c:	4b28      	ldr	r3, [pc, #160]	@ (800d040 <prvInsertBlockIntoFreeList+0xac>)
 800cf9e:	60fb      	str	r3, [r7, #12]
 800cfa0:	e002      	b.n	800cfa8 <prvInsertBlockIntoFreeList+0x14>
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	60fb      	str	r3, [r7, #12]
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	687a      	ldr	r2, [r7, #4]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d8f7      	bhi.n	800cfa2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	68ba      	ldr	r2, [r7, #8]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	687a      	ldr	r2, [r7, #4]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d108      	bne.n	800cfd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	685a      	ldr	r2, [r3, #4]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	441a      	add	r2, r3
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	68ba      	ldr	r2, [r7, #8]
 800cfe0:	441a      	add	r2, r3
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d118      	bne.n	800d01c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	4b15      	ldr	r3, [pc, #84]	@ (800d044 <prvInsertBlockIntoFreeList+0xb0>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d00d      	beq.n	800d012 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	685a      	ldr	r2, [r3, #4]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	441a      	add	r2, r3
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	601a      	str	r2, [r3, #0]
 800d010:	e008      	b.n	800d024 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d012:	4b0c      	ldr	r3, [pc, #48]	@ (800d044 <prvInsertBlockIntoFreeList+0xb0>)
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	601a      	str	r2, [r3, #0]
 800d01a:	e003      	b.n	800d024 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681a      	ldr	r2, [r3, #0]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d024:	68fa      	ldr	r2, [r7, #12]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d002      	beq.n	800d032 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d032:	bf00      	nop
 800d034:	3714      	adds	r7, #20
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	20005740 	.word	0x20005740
 800d044:	20005748 	.word	0x20005748

0800d048 <_vsiprintf_r>:
 800d048:	b500      	push	{lr}
 800d04a:	b09b      	sub	sp, #108	@ 0x6c
 800d04c:	9100      	str	r1, [sp, #0]
 800d04e:	9104      	str	r1, [sp, #16]
 800d050:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d054:	9105      	str	r1, [sp, #20]
 800d056:	9102      	str	r1, [sp, #8]
 800d058:	4905      	ldr	r1, [pc, #20]	@ (800d070 <_vsiprintf_r+0x28>)
 800d05a:	9103      	str	r1, [sp, #12]
 800d05c:	4669      	mov	r1, sp
 800d05e:	f000 f951 	bl	800d304 <_svfiprintf_r>
 800d062:	9b00      	ldr	r3, [sp, #0]
 800d064:	2200      	movs	r2, #0
 800d066:	701a      	strb	r2, [r3, #0]
 800d068:	b01b      	add	sp, #108	@ 0x6c
 800d06a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d06e:	bf00      	nop
 800d070:	ffff0208 	.word	0xffff0208

0800d074 <vsiprintf>:
 800d074:	4613      	mov	r3, r2
 800d076:	460a      	mov	r2, r1
 800d078:	4601      	mov	r1, r0
 800d07a:	4802      	ldr	r0, [pc, #8]	@ (800d084 <vsiprintf+0x10>)
 800d07c:	6800      	ldr	r0, [r0, #0]
 800d07e:	f7ff bfe3 	b.w	800d048 <_vsiprintf_r>
 800d082:	bf00      	nop
 800d084:	2000002c 	.word	0x2000002c

0800d088 <memset>:
 800d088:	4402      	add	r2, r0
 800d08a:	4603      	mov	r3, r0
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d100      	bne.n	800d092 <memset+0xa>
 800d090:	4770      	bx	lr
 800d092:	f803 1b01 	strb.w	r1, [r3], #1
 800d096:	e7f9      	b.n	800d08c <memset+0x4>

0800d098 <_reclaim_reent>:
 800d098:	4b29      	ldr	r3, [pc, #164]	@ (800d140 <_reclaim_reent+0xa8>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4283      	cmp	r3, r0
 800d09e:	b570      	push	{r4, r5, r6, lr}
 800d0a0:	4604      	mov	r4, r0
 800d0a2:	d04b      	beq.n	800d13c <_reclaim_reent+0xa4>
 800d0a4:	69c3      	ldr	r3, [r0, #28]
 800d0a6:	b1ab      	cbz	r3, 800d0d4 <_reclaim_reent+0x3c>
 800d0a8:	68db      	ldr	r3, [r3, #12]
 800d0aa:	b16b      	cbz	r3, 800d0c8 <_reclaim_reent+0x30>
 800d0ac:	2500      	movs	r5, #0
 800d0ae:	69e3      	ldr	r3, [r4, #28]
 800d0b0:	68db      	ldr	r3, [r3, #12]
 800d0b2:	5959      	ldr	r1, [r3, r5]
 800d0b4:	2900      	cmp	r1, #0
 800d0b6:	d13b      	bne.n	800d130 <_reclaim_reent+0x98>
 800d0b8:	3504      	adds	r5, #4
 800d0ba:	2d80      	cmp	r5, #128	@ 0x80
 800d0bc:	d1f7      	bne.n	800d0ae <_reclaim_reent+0x16>
 800d0be:	69e3      	ldr	r3, [r4, #28]
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	68d9      	ldr	r1, [r3, #12]
 800d0c4:	f000 f878 	bl	800d1b8 <_free_r>
 800d0c8:	69e3      	ldr	r3, [r4, #28]
 800d0ca:	6819      	ldr	r1, [r3, #0]
 800d0cc:	b111      	cbz	r1, 800d0d4 <_reclaim_reent+0x3c>
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	f000 f872 	bl	800d1b8 <_free_r>
 800d0d4:	6961      	ldr	r1, [r4, #20]
 800d0d6:	b111      	cbz	r1, 800d0de <_reclaim_reent+0x46>
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f000 f86d 	bl	800d1b8 <_free_r>
 800d0de:	69e1      	ldr	r1, [r4, #28]
 800d0e0:	b111      	cbz	r1, 800d0e8 <_reclaim_reent+0x50>
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	f000 f868 	bl	800d1b8 <_free_r>
 800d0e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d0ea:	b111      	cbz	r1, 800d0f2 <_reclaim_reent+0x5a>
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	f000 f863 	bl	800d1b8 <_free_r>
 800d0f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d0f4:	b111      	cbz	r1, 800d0fc <_reclaim_reent+0x64>
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f000 f85e 	bl	800d1b8 <_free_r>
 800d0fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d0fe:	b111      	cbz	r1, 800d106 <_reclaim_reent+0x6e>
 800d100:	4620      	mov	r0, r4
 800d102:	f000 f859 	bl	800d1b8 <_free_r>
 800d106:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d108:	b111      	cbz	r1, 800d110 <_reclaim_reent+0x78>
 800d10a:	4620      	mov	r0, r4
 800d10c:	f000 f854 	bl	800d1b8 <_free_r>
 800d110:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d112:	b111      	cbz	r1, 800d11a <_reclaim_reent+0x82>
 800d114:	4620      	mov	r0, r4
 800d116:	f000 f84f 	bl	800d1b8 <_free_r>
 800d11a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d11c:	b111      	cbz	r1, 800d124 <_reclaim_reent+0x8c>
 800d11e:	4620      	mov	r0, r4
 800d120:	f000 f84a 	bl	800d1b8 <_free_r>
 800d124:	6a23      	ldr	r3, [r4, #32]
 800d126:	b14b      	cbz	r3, 800d13c <_reclaim_reent+0xa4>
 800d128:	4620      	mov	r0, r4
 800d12a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d12e:	4718      	bx	r3
 800d130:	680e      	ldr	r6, [r1, #0]
 800d132:	4620      	mov	r0, r4
 800d134:	f000 f840 	bl	800d1b8 <_free_r>
 800d138:	4631      	mov	r1, r6
 800d13a:	e7bb      	b.n	800d0b4 <_reclaim_reent+0x1c>
 800d13c:	bd70      	pop	{r4, r5, r6, pc}
 800d13e:	bf00      	nop
 800d140:	2000002c 	.word	0x2000002c

0800d144 <__errno>:
 800d144:	4b01      	ldr	r3, [pc, #4]	@ (800d14c <__errno+0x8>)
 800d146:	6818      	ldr	r0, [r3, #0]
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop
 800d14c:	2000002c 	.word	0x2000002c

0800d150 <__libc_init_array>:
 800d150:	b570      	push	{r4, r5, r6, lr}
 800d152:	4d0d      	ldr	r5, [pc, #52]	@ (800d188 <__libc_init_array+0x38>)
 800d154:	4c0d      	ldr	r4, [pc, #52]	@ (800d18c <__libc_init_array+0x3c>)
 800d156:	1b64      	subs	r4, r4, r5
 800d158:	10a4      	asrs	r4, r4, #2
 800d15a:	2600      	movs	r6, #0
 800d15c:	42a6      	cmp	r6, r4
 800d15e:	d109      	bne.n	800d174 <__libc_init_array+0x24>
 800d160:	4d0b      	ldr	r5, [pc, #44]	@ (800d190 <__libc_init_array+0x40>)
 800d162:	4c0c      	ldr	r4, [pc, #48]	@ (800d194 <__libc_init_array+0x44>)
 800d164:	f000 fc66 	bl	800da34 <_init>
 800d168:	1b64      	subs	r4, r4, r5
 800d16a:	10a4      	asrs	r4, r4, #2
 800d16c:	2600      	movs	r6, #0
 800d16e:	42a6      	cmp	r6, r4
 800d170:	d105      	bne.n	800d17e <__libc_init_array+0x2e>
 800d172:	bd70      	pop	{r4, r5, r6, pc}
 800d174:	f855 3b04 	ldr.w	r3, [r5], #4
 800d178:	4798      	blx	r3
 800d17a:	3601      	adds	r6, #1
 800d17c:	e7ee      	b.n	800d15c <__libc_init_array+0xc>
 800d17e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d182:	4798      	blx	r3
 800d184:	3601      	adds	r6, #1
 800d186:	e7f2      	b.n	800d16e <__libc_init_array+0x1e>
 800d188:	0800dbac 	.word	0x0800dbac
 800d18c:	0800dbac 	.word	0x0800dbac
 800d190:	0800dbac 	.word	0x0800dbac
 800d194:	0800dbb0 	.word	0x0800dbb0

0800d198 <__retarget_lock_acquire_recursive>:
 800d198:	4770      	bx	lr

0800d19a <__retarget_lock_release_recursive>:
 800d19a:	4770      	bx	lr

0800d19c <memcpy>:
 800d19c:	440a      	add	r2, r1
 800d19e:	4291      	cmp	r1, r2
 800d1a0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d1a4:	d100      	bne.n	800d1a8 <memcpy+0xc>
 800d1a6:	4770      	bx	lr
 800d1a8:	b510      	push	{r4, lr}
 800d1aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1b2:	4291      	cmp	r1, r2
 800d1b4:	d1f9      	bne.n	800d1aa <memcpy+0xe>
 800d1b6:	bd10      	pop	{r4, pc}

0800d1b8 <_free_r>:
 800d1b8:	b538      	push	{r3, r4, r5, lr}
 800d1ba:	4605      	mov	r5, r0
 800d1bc:	2900      	cmp	r1, #0
 800d1be:	d041      	beq.n	800d244 <_free_r+0x8c>
 800d1c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1c4:	1f0c      	subs	r4, r1, #4
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	bfb8      	it	lt
 800d1ca:	18e4      	addlt	r4, r4, r3
 800d1cc:	f000 fbc6 	bl	800d95c <__malloc_lock>
 800d1d0:	4a1d      	ldr	r2, [pc, #116]	@ (800d248 <_free_r+0x90>)
 800d1d2:	6813      	ldr	r3, [r2, #0]
 800d1d4:	b933      	cbnz	r3, 800d1e4 <_free_r+0x2c>
 800d1d6:	6063      	str	r3, [r4, #4]
 800d1d8:	6014      	str	r4, [r2, #0]
 800d1da:	4628      	mov	r0, r5
 800d1dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1e0:	f000 bbc2 	b.w	800d968 <__malloc_unlock>
 800d1e4:	42a3      	cmp	r3, r4
 800d1e6:	d908      	bls.n	800d1fa <_free_r+0x42>
 800d1e8:	6820      	ldr	r0, [r4, #0]
 800d1ea:	1821      	adds	r1, r4, r0
 800d1ec:	428b      	cmp	r3, r1
 800d1ee:	bf01      	itttt	eq
 800d1f0:	6819      	ldreq	r1, [r3, #0]
 800d1f2:	685b      	ldreq	r3, [r3, #4]
 800d1f4:	1809      	addeq	r1, r1, r0
 800d1f6:	6021      	streq	r1, [r4, #0]
 800d1f8:	e7ed      	b.n	800d1d6 <_free_r+0x1e>
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	b10b      	cbz	r3, 800d204 <_free_r+0x4c>
 800d200:	42a3      	cmp	r3, r4
 800d202:	d9fa      	bls.n	800d1fa <_free_r+0x42>
 800d204:	6811      	ldr	r1, [r2, #0]
 800d206:	1850      	adds	r0, r2, r1
 800d208:	42a0      	cmp	r0, r4
 800d20a:	d10b      	bne.n	800d224 <_free_r+0x6c>
 800d20c:	6820      	ldr	r0, [r4, #0]
 800d20e:	4401      	add	r1, r0
 800d210:	1850      	adds	r0, r2, r1
 800d212:	4283      	cmp	r3, r0
 800d214:	6011      	str	r1, [r2, #0]
 800d216:	d1e0      	bne.n	800d1da <_free_r+0x22>
 800d218:	6818      	ldr	r0, [r3, #0]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	6053      	str	r3, [r2, #4]
 800d21e:	4408      	add	r0, r1
 800d220:	6010      	str	r0, [r2, #0]
 800d222:	e7da      	b.n	800d1da <_free_r+0x22>
 800d224:	d902      	bls.n	800d22c <_free_r+0x74>
 800d226:	230c      	movs	r3, #12
 800d228:	602b      	str	r3, [r5, #0]
 800d22a:	e7d6      	b.n	800d1da <_free_r+0x22>
 800d22c:	6820      	ldr	r0, [r4, #0]
 800d22e:	1821      	adds	r1, r4, r0
 800d230:	428b      	cmp	r3, r1
 800d232:	bf04      	itt	eq
 800d234:	6819      	ldreq	r1, [r3, #0]
 800d236:	685b      	ldreq	r3, [r3, #4]
 800d238:	6063      	str	r3, [r4, #4]
 800d23a:	bf04      	itt	eq
 800d23c:	1809      	addeq	r1, r1, r0
 800d23e:	6021      	streq	r1, [r4, #0]
 800d240:	6054      	str	r4, [r2, #4]
 800d242:	e7ca      	b.n	800d1da <_free_r+0x22>
 800d244:	bd38      	pop	{r3, r4, r5, pc}
 800d246:	bf00      	nop
 800d248:	200058a4 	.word	0x200058a4

0800d24c <__ssputs_r>:
 800d24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d250:	688e      	ldr	r6, [r1, #8]
 800d252:	461f      	mov	r7, r3
 800d254:	42be      	cmp	r6, r7
 800d256:	680b      	ldr	r3, [r1, #0]
 800d258:	4682      	mov	sl, r0
 800d25a:	460c      	mov	r4, r1
 800d25c:	4690      	mov	r8, r2
 800d25e:	d82d      	bhi.n	800d2bc <__ssputs_r+0x70>
 800d260:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d264:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d268:	d026      	beq.n	800d2b8 <__ssputs_r+0x6c>
 800d26a:	6965      	ldr	r5, [r4, #20]
 800d26c:	6909      	ldr	r1, [r1, #16]
 800d26e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d272:	eba3 0901 	sub.w	r9, r3, r1
 800d276:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d27a:	1c7b      	adds	r3, r7, #1
 800d27c:	444b      	add	r3, r9
 800d27e:	106d      	asrs	r5, r5, #1
 800d280:	429d      	cmp	r5, r3
 800d282:	bf38      	it	cc
 800d284:	461d      	movcc	r5, r3
 800d286:	0553      	lsls	r3, r2, #21
 800d288:	d527      	bpl.n	800d2da <__ssputs_r+0x8e>
 800d28a:	4629      	mov	r1, r5
 800d28c:	f000 f958 	bl	800d540 <_malloc_r>
 800d290:	4606      	mov	r6, r0
 800d292:	b360      	cbz	r0, 800d2ee <__ssputs_r+0xa2>
 800d294:	6921      	ldr	r1, [r4, #16]
 800d296:	464a      	mov	r2, r9
 800d298:	f7ff ff80 	bl	800d19c <memcpy>
 800d29c:	89a3      	ldrh	r3, [r4, #12]
 800d29e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d2a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2a6:	81a3      	strh	r3, [r4, #12]
 800d2a8:	6126      	str	r6, [r4, #16]
 800d2aa:	6165      	str	r5, [r4, #20]
 800d2ac:	444e      	add	r6, r9
 800d2ae:	eba5 0509 	sub.w	r5, r5, r9
 800d2b2:	6026      	str	r6, [r4, #0]
 800d2b4:	60a5      	str	r5, [r4, #8]
 800d2b6:	463e      	mov	r6, r7
 800d2b8:	42be      	cmp	r6, r7
 800d2ba:	d900      	bls.n	800d2be <__ssputs_r+0x72>
 800d2bc:	463e      	mov	r6, r7
 800d2be:	6820      	ldr	r0, [r4, #0]
 800d2c0:	4632      	mov	r2, r6
 800d2c2:	4641      	mov	r1, r8
 800d2c4:	f000 fb84 	bl	800d9d0 <memmove>
 800d2c8:	68a3      	ldr	r3, [r4, #8]
 800d2ca:	1b9b      	subs	r3, r3, r6
 800d2cc:	60a3      	str	r3, [r4, #8]
 800d2ce:	6823      	ldr	r3, [r4, #0]
 800d2d0:	4433      	add	r3, r6
 800d2d2:	6023      	str	r3, [r4, #0]
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2da:	462a      	mov	r2, r5
 800d2dc:	f000 fb4a 	bl	800d974 <_realloc_r>
 800d2e0:	4606      	mov	r6, r0
 800d2e2:	2800      	cmp	r0, #0
 800d2e4:	d1e0      	bne.n	800d2a8 <__ssputs_r+0x5c>
 800d2e6:	6921      	ldr	r1, [r4, #16]
 800d2e8:	4650      	mov	r0, sl
 800d2ea:	f7ff ff65 	bl	800d1b8 <_free_r>
 800d2ee:	230c      	movs	r3, #12
 800d2f0:	f8ca 3000 	str.w	r3, [sl]
 800d2f4:	89a3      	ldrh	r3, [r4, #12]
 800d2f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2fa:	81a3      	strh	r3, [r4, #12]
 800d2fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d300:	e7e9      	b.n	800d2d6 <__ssputs_r+0x8a>
	...

0800d304 <_svfiprintf_r>:
 800d304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d308:	4698      	mov	r8, r3
 800d30a:	898b      	ldrh	r3, [r1, #12]
 800d30c:	061b      	lsls	r3, r3, #24
 800d30e:	b09d      	sub	sp, #116	@ 0x74
 800d310:	4607      	mov	r7, r0
 800d312:	460d      	mov	r5, r1
 800d314:	4614      	mov	r4, r2
 800d316:	d510      	bpl.n	800d33a <_svfiprintf_r+0x36>
 800d318:	690b      	ldr	r3, [r1, #16]
 800d31a:	b973      	cbnz	r3, 800d33a <_svfiprintf_r+0x36>
 800d31c:	2140      	movs	r1, #64	@ 0x40
 800d31e:	f000 f90f 	bl	800d540 <_malloc_r>
 800d322:	6028      	str	r0, [r5, #0]
 800d324:	6128      	str	r0, [r5, #16]
 800d326:	b930      	cbnz	r0, 800d336 <_svfiprintf_r+0x32>
 800d328:	230c      	movs	r3, #12
 800d32a:	603b      	str	r3, [r7, #0]
 800d32c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d330:	b01d      	add	sp, #116	@ 0x74
 800d332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d336:	2340      	movs	r3, #64	@ 0x40
 800d338:	616b      	str	r3, [r5, #20]
 800d33a:	2300      	movs	r3, #0
 800d33c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d33e:	2320      	movs	r3, #32
 800d340:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d344:	f8cd 800c 	str.w	r8, [sp, #12]
 800d348:	2330      	movs	r3, #48	@ 0x30
 800d34a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d4e8 <_svfiprintf_r+0x1e4>
 800d34e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d352:	f04f 0901 	mov.w	r9, #1
 800d356:	4623      	mov	r3, r4
 800d358:	469a      	mov	sl, r3
 800d35a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d35e:	b10a      	cbz	r2, 800d364 <_svfiprintf_r+0x60>
 800d360:	2a25      	cmp	r2, #37	@ 0x25
 800d362:	d1f9      	bne.n	800d358 <_svfiprintf_r+0x54>
 800d364:	ebba 0b04 	subs.w	fp, sl, r4
 800d368:	d00b      	beq.n	800d382 <_svfiprintf_r+0x7e>
 800d36a:	465b      	mov	r3, fp
 800d36c:	4622      	mov	r2, r4
 800d36e:	4629      	mov	r1, r5
 800d370:	4638      	mov	r0, r7
 800d372:	f7ff ff6b 	bl	800d24c <__ssputs_r>
 800d376:	3001      	adds	r0, #1
 800d378:	f000 80a7 	beq.w	800d4ca <_svfiprintf_r+0x1c6>
 800d37c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d37e:	445a      	add	r2, fp
 800d380:	9209      	str	r2, [sp, #36]	@ 0x24
 800d382:	f89a 3000 	ldrb.w	r3, [sl]
 800d386:	2b00      	cmp	r3, #0
 800d388:	f000 809f 	beq.w	800d4ca <_svfiprintf_r+0x1c6>
 800d38c:	2300      	movs	r3, #0
 800d38e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d396:	f10a 0a01 	add.w	sl, sl, #1
 800d39a:	9304      	str	r3, [sp, #16]
 800d39c:	9307      	str	r3, [sp, #28]
 800d39e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d3a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3a4:	4654      	mov	r4, sl
 800d3a6:	2205      	movs	r2, #5
 800d3a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3ac:	484e      	ldr	r0, [pc, #312]	@ (800d4e8 <_svfiprintf_r+0x1e4>)
 800d3ae:	f7f2 ff17 	bl	80001e0 <memchr>
 800d3b2:	9a04      	ldr	r2, [sp, #16]
 800d3b4:	b9d8      	cbnz	r0, 800d3ee <_svfiprintf_r+0xea>
 800d3b6:	06d0      	lsls	r0, r2, #27
 800d3b8:	bf44      	itt	mi
 800d3ba:	2320      	movmi	r3, #32
 800d3bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3c0:	0711      	lsls	r1, r2, #28
 800d3c2:	bf44      	itt	mi
 800d3c4:	232b      	movmi	r3, #43	@ 0x2b
 800d3c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3ca:	f89a 3000 	ldrb.w	r3, [sl]
 800d3ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3d0:	d015      	beq.n	800d3fe <_svfiprintf_r+0xfa>
 800d3d2:	9a07      	ldr	r2, [sp, #28]
 800d3d4:	4654      	mov	r4, sl
 800d3d6:	2000      	movs	r0, #0
 800d3d8:	f04f 0c0a 	mov.w	ip, #10
 800d3dc:	4621      	mov	r1, r4
 800d3de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3e2:	3b30      	subs	r3, #48	@ 0x30
 800d3e4:	2b09      	cmp	r3, #9
 800d3e6:	d94b      	bls.n	800d480 <_svfiprintf_r+0x17c>
 800d3e8:	b1b0      	cbz	r0, 800d418 <_svfiprintf_r+0x114>
 800d3ea:	9207      	str	r2, [sp, #28]
 800d3ec:	e014      	b.n	800d418 <_svfiprintf_r+0x114>
 800d3ee:	eba0 0308 	sub.w	r3, r0, r8
 800d3f2:	fa09 f303 	lsl.w	r3, r9, r3
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	9304      	str	r3, [sp, #16]
 800d3fa:	46a2      	mov	sl, r4
 800d3fc:	e7d2      	b.n	800d3a4 <_svfiprintf_r+0xa0>
 800d3fe:	9b03      	ldr	r3, [sp, #12]
 800d400:	1d19      	adds	r1, r3, #4
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	9103      	str	r1, [sp, #12]
 800d406:	2b00      	cmp	r3, #0
 800d408:	bfbb      	ittet	lt
 800d40a:	425b      	neglt	r3, r3
 800d40c:	f042 0202 	orrlt.w	r2, r2, #2
 800d410:	9307      	strge	r3, [sp, #28]
 800d412:	9307      	strlt	r3, [sp, #28]
 800d414:	bfb8      	it	lt
 800d416:	9204      	strlt	r2, [sp, #16]
 800d418:	7823      	ldrb	r3, [r4, #0]
 800d41a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d41c:	d10a      	bne.n	800d434 <_svfiprintf_r+0x130>
 800d41e:	7863      	ldrb	r3, [r4, #1]
 800d420:	2b2a      	cmp	r3, #42	@ 0x2a
 800d422:	d132      	bne.n	800d48a <_svfiprintf_r+0x186>
 800d424:	9b03      	ldr	r3, [sp, #12]
 800d426:	1d1a      	adds	r2, r3, #4
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	9203      	str	r2, [sp, #12]
 800d42c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d430:	3402      	adds	r4, #2
 800d432:	9305      	str	r3, [sp, #20]
 800d434:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d4f8 <_svfiprintf_r+0x1f4>
 800d438:	7821      	ldrb	r1, [r4, #0]
 800d43a:	2203      	movs	r2, #3
 800d43c:	4650      	mov	r0, sl
 800d43e:	f7f2 fecf 	bl	80001e0 <memchr>
 800d442:	b138      	cbz	r0, 800d454 <_svfiprintf_r+0x150>
 800d444:	9b04      	ldr	r3, [sp, #16]
 800d446:	eba0 000a 	sub.w	r0, r0, sl
 800d44a:	2240      	movs	r2, #64	@ 0x40
 800d44c:	4082      	lsls	r2, r0
 800d44e:	4313      	orrs	r3, r2
 800d450:	3401      	adds	r4, #1
 800d452:	9304      	str	r3, [sp, #16]
 800d454:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d458:	4824      	ldr	r0, [pc, #144]	@ (800d4ec <_svfiprintf_r+0x1e8>)
 800d45a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d45e:	2206      	movs	r2, #6
 800d460:	f7f2 febe 	bl	80001e0 <memchr>
 800d464:	2800      	cmp	r0, #0
 800d466:	d036      	beq.n	800d4d6 <_svfiprintf_r+0x1d2>
 800d468:	4b21      	ldr	r3, [pc, #132]	@ (800d4f0 <_svfiprintf_r+0x1ec>)
 800d46a:	bb1b      	cbnz	r3, 800d4b4 <_svfiprintf_r+0x1b0>
 800d46c:	9b03      	ldr	r3, [sp, #12]
 800d46e:	3307      	adds	r3, #7
 800d470:	f023 0307 	bic.w	r3, r3, #7
 800d474:	3308      	adds	r3, #8
 800d476:	9303      	str	r3, [sp, #12]
 800d478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d47a:	4433      	add	r3, r6
 800d47c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d47e:	e76a      	b.n	800d356 <_svfiprintf_r+0x52>
 800d480:	fb0c 3202 	mla	r2, ip, r2, r3
 800d484:	460c      	mov	r4, r1
 800d486:	2001      	movs	r0, #1
 800d488:	e7a8      	b.n	800d3dc <_svfiprintf_r+0xd8>
 800d48a:	2300      	movs	r3, #0
 800d48c:	3401      	adds	r4, #1
 800d48e:	9305      	str	r3, [sp, #20]
 800d490:	4619      	mov	r1, r3
 800d492:	f04f 0c0a 	mov.w	ip, #10
 800d496:	4620      	mov	r0, r4
 800d498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d49c:	3a30      	subs	r2, #48	@ 0x30
 800d49e:	2a09      	cmp	r2, #9
 800d4a0:	d903      	bls.n	800d4aa <_svfiprintf_r+0x1a6>
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d0c6      	beq.n	800d434 <_svfiprintf_r+0x130>
 800d4a6:	9105      	str	r1, [sp, #20]
 800d4a8:	e7c4      	b.n	800d434 <_svfiprintf_r+0x130>
 800d4aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	e7f0      	b.n	800d496 <_svfiprintf_r+0x192>
 800d4b4:	ab03      	add	r3, sp, #12
 800d4b6:	9300      	str	r3, [sp, #0]
 800d4b8:	462a      	mov	r2, r5
 800d4ba:	4b0e      	ldr	r3, [pc, #56]	@ (800d4f4 <_svfiprintf_r+0x1f0>)
 800d4bc:	a904      	add	r1, sp, #16
 800d4be:	4638      	mov	r0, r7
 800d4c0:	f3af 8000 	nop.w
 800d4c4:	1c42      	adds	r2, r0, #1
 800d4c6:	4606      	mov	r6, r0
 800d4c8:	d1d6      	bne.n	800d478 <_svfiprintf_r+0x174>
 800d4ca:	89ab      	ldrh	r3, [r5, #12]
 800d4cc:	065b      	lsls	r3, r3, #25
 800d4ce:	f53f af2d 	bmi.w	800d32c <_svfiprintf_r+0x28>
 800d4d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4d4:	e72c      	b.n	800d330 <_svfiprintf_r+0x2c>
 800d4d6:	ab03      	add	r3, sp, #12
 800d4d8:	9300      	str	r3, [sp, #0]
 800d4da:	462a      	mov	r2, r5
 800d4dc:	4b05      	ldr	r3, [pc, #20]	@ (800d4f4 <_svfiprintf_r+0x1f0>)
 800d4de:	a904      	add	r1, sp, #16
 800d4e0:	4638      	mov	r0, r7
 800d4e2:	f000 f91b 	bl	800d71c <_printf_i>
 800d4e6:	e7ed      	b.n	800d4c4 <_svfiprintf_r+0x1c0>
 800d4e8:	0800db70 	.word	0x0800db70
 800d4ec:	0800db7a 	.word	0x0800db7a
 800d4f0:	00000000 	.word	0x00000000
 800d4f4:	0800d24d 	.word	0x0800d24d
 800d4f8:	0800db76 	.word	0x0800db76

0800d4fc <sbrk_aligned>:
 800d4fc:	b570      	push	{r4, r5, r6, lr}
 800d4fe:	4e0f      	ldr	r6, [pc, #60]	@ (800d53c <sbrk_aligned+0x40>)
 800d500:	460c      	mov	r4, r1
 800d502:	6831      	ldr	r1, [r6, #0]
 800d504:	4605      	mov	r5, r0
 800d506:	b911      	cbnz	r1, 800d50e <sbrk_aligned+0x12>
 800d508:	f000 fa7c 	bl	800da04 <_sbrk_r>
 800d50c:	6030      	str	r0, [r6, #0]
 800d50e:	4621      	mov	r1, r4
 800d510:	4628      	mov	r0, r5
 800d512:	f000 fa77 	bl	800da04 <_sbrk_r>
 800d516:	1c43      	adds	r3, r0, #1
 800d518:	d103      	bne.n	800d522 <sbrk_aligned+0x26>
 800d51a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d51e:	4620      	mov	r0, r4
 800d520:	bd70      	pop	{r4, r5, r6, pc}
 800d522:	1cc4      	adds	r4, r0, #3
 800d524:	f024 0403 	bic.w	r4, r4, #3
 800d528:	42a0      	cmp	r0, r4
 800d52a:	d0f8      	beq.n	800d51e <sbrk_aligned+0x22>
 800d52c:	1a21      	subs	r1, r4, r0
 800d52e:	4628      	mov	r0, r5
 800d530:	f000 fa68 	bl	800da04 <_sbrk_r>
 800d534:	3001      	adds	r0, #1
 800d536:	d1f2      	bne.n	800d51e <sbrk_aligned+0x22>
 800d538:	e7ef      	b.n	800d51a <sbrk_aligned+0x1e>
 800d53a:	bf00      	nop
 800d53c:	200058a0 	.word	0x200058a0

0800d540 <_malloc_r>:
 800d540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d544:	1ccd      	adds	r5, r1, #3
 800d546:	f025 0503 	bic.w	r5, r5, #3
 800d54a:	3508      	adds	r5, #8
 800d54c:	2d0c      	cmp	r5, #12
 800d54e:	bf38      	it	cc
 800d550:	250c      	movcc	r5, #12
 800d552:	2d00      	cmp	r5, #0
 800d554:	4606      	mov	r6, r0
 800d556:	db01      	blt.n	800d55c <_malloc_r+0x1c>
 800d558:	42a9      	cmp	r1, r5
 800d55a:	d904      	bls.n	800d566 <_malloc_r+0x26>
 800d55c:	230c      	movs	r3, #12
 800d55e:	6033      	str	r3, [r6, #0]
 800d560:	2000      	movs	r0, #0
 800d562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d566:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d63c <_malloc_r+0xfc>
 800d56a:	f000 f9f7 	bl	800d95c <__malloc_lock>
 800d56e:	f8d8 3000 	ldr.w	r3, [r8]
 800d572:	461c      	mov	r4, r3
 800d574:	bb44      	cbnz	r4, 800d5c8 <_malloc_r+0x88>
 800d576:	4629      	mov	r1, r5
 800d578:	4630      	mov	r0, r6
 800d57a:	f7ff ffbf 	bl	800d4fc <sbrk_aligned>
 800d57e:	1c43      	adds	r3, r0, #1
 800d580:	4604      	mov	r4, r0
 800d582:	d158      	bne.n	800d636 <_malloc_r+0xf6>
 800d584:	f8d8 4000 	ldr.w	r4, [r8]
 800d588:	4627      	mov	r7, r4
 800d58a:	2f00      	cmp	r7, #0
 800d58c:	d143      	bne.n	800d616 <_malloc_r+0xd6>
 800d58e:	2c00      	cmp	r4, #0
 800d590:	d04b      	beq.n	800d62a <_malloc_r+0xea>
 800d592:	6823      	ldr	r3, [r4, #0]
 800d594:	4639      	mov	r1, r7
 800d596:	4630      	mov	r0, r6
 800d598:	eb04 0903 	add.w	r9, r4, r3
 800d59c:	f000 fa32 	bl	800da04 <_sbrk_r>
 800d5a0:	4581      	cmp	r9, r0
 800d5a2:	d142      	bne.n	800d62a <_malloc_r+0xea>
 800d5a4:	6821      	ldr	r1, [r4, #0]
 800d5a6:	1a6d      	subs	r5, r5, r1
 800d5a8:	4629      	mov	r1, r5
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	f7ff ffa6 	bl	800d4fc <sbrk_aligned>
 800d5b0:	3001      	adds	r0, #1
 800d5b2:	d03a      	beq.n	800d62a <_malloc_r+0xea>
 800d5b4:	6823      	ldr	r3, [r4, #0]
 800d5b6:	442b      	add	r3, r5
 800d5b8:	6023      	str	r3, [r4, #0]
 800d5ba:	f8d8 3000 	ldr.w	r3, [r8]
 800d5be:	685a      	ldr	r2, [r3, #4]
 800d5c0:	bb62      	cbnz	r2, 800d61c <_malloc_r+0xdc>
 800d5c2:	f8c8 7000 	str.w	r7, [r8]
 800d5c6:	e00f      	b.n	800d5e8 <_malloc_r+0xa8>
 800d5c8:	6822      	ldr	r2, [r4, #0]
 800d5ca:	1b52      	subs	r2, r2, r5
 800d5cc:	d420      	bmi.n	800d610 <_malloc_r+0xd0>
 800d5ce:	2a0b      	cmp	r2, #11
 800d5d0:	d917      	bls.n	800d602 <_malloc_r+0xc2>
 800d5d2:	1961      	adds	r1, r4, r5
 800d5d4:	42a3      	cmp	r3, r4
 800d5d6:	6025      	str	r5, [r4, #0]
 800d5d8:	bf18      	it	ne
 800d5da:	6059      	strne	r1, [r3, #4]
 800d5dc:	6863      	ldr	r3, [r4, #4]
 800d5de:	bf08      	it	eq
 800d5e0:	f8c8 1000 	streq.w	r1, [r8]
 800d5e4:	5162      	str	r2, [r4, r5]
 800d5e6:	604b      	str	r3, [r1, #4]
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	f000 f9bd 	bl	800d968 <__malloc_unlock>
 800d5ee:	f104 000b 	add.w	r0, r4, #11
 800d5f2:	1d23      	adds	r3, r4, #4
 800d5f4:	f020 0007 	bic.w	r0, r0, #7
 800d5f8:	1ac2      	subs	r2, r0, r3
 800d5fa:	bf1c      	itt	ne
 800d5fc:	1a1b      	subne	r3, r3, r0
 800d5fe:	50a3      	strne	r3, [r4, r2]
 800d600:	e7af      	b.n	800d562 <_malloc_r+0x22>
 800d602:	6862      	ldr	r2, [r4, #4]
 800d604:	42a3      	cmp	r3, r4
 800d606:	bf0c      	ite	eq
 800d608:	f8c8 2000 	streq.w	r2, [r8]
 800d60c:	605a      	strne	r2, [r3, #4]
 800d60e:	e7eb      	b.n	800d5e8 <_malloc_r+0xa8>
 800d610:	4623      	mov	r3, r4
 800d612:	6864      	ldr	r4, [r4, #4]
 800d614:	e7ae      	b.n	800d574 <_malloc_r+0x34>
 800d616:	463c      	mov	r4, r7
 800d618:	687f      	ldr	r7, [r7, #4]
 800d61a:	e7b6      	b.n	800d58a <_malloc_r+0x4a>
 800d61c:	461a      	mov	r2, r3
 800d61e:	685b      	ldr	r3, [r3, #4]
 800d620:	42a3      	cmp	r3, r4
 800d622:	d1fb      	bne.n	800d61c <_malloc_r+0xdc>
 800d624:	2300      	movs	r3, #0
 800d626:	6053      	str	r3, [r2, #4]
 800d628:	e7de      	b.n	800d5e8 <_malloc_r+0xa8>
 800d62a:	230c      	movs	r3, #12
 800d62c:	6033      	str	r3, [r6, #0]
 800d62e:	4630      	mov	r0, r6
 800d630:	f000 f99a 	bl	800d968 <__malloc_unlock>
 800d634:	e794      	b.n	800d560 <_malloc_r+0x20>
 800d636:	6005      	str	r5, [r0, #0]
 800d638:	e7d6      	b.n	800d5e8 <_malloc_r+0xa8>
 800d63a:	bf00      	nop
 800d63c:	200058a4 	.word	0x200058a4

0800d640 <_printf_common>:
 800d640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d644:	4616      	mov	r6, r2
 800d646:	4698      	mov	r8, r3
 800d648:	688a      	ldr	r2, [r1, #8]
 800d64a:	690b      	ldr	r3, [r1, #16]
 800d64c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d650:	4293      	cmp	r3, r2
 800d652:	bfb8      	it	lt
 800d654:	4613      	movlt	r3, r2
 800d656:	6033      	str	r3, [r6, #0]
 800d658:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d65c:	4607      	mov	r7, r0
 800d65e:	460c      	mov	r4, r1
 800d660:	b10a      	cbz	r2, 800d666 <_printf_common+0x26>
 800d662:	3301      	adds	r3, #1
 800d664:	6033      	str	r3, [r6, #0]
 800d666:	6823      	ldr	r3, [r4, #0]
 800d668:	0699      	lsls	r1, r3, #26
 800d66a:	bf42      	ittt	mi
 800d66c:	6833      	ldrmi	r3, [r6, #0]
 800d66e:	3302      	addmi	r3, #2
 800d670:	6033      	strmi	r3, [r6, #0]
 800d672:	6825      	ldr	r5, [r4, #0]
 800d674:	f015 0506 	ands.w	r5, r5, #6
 800d678:	d106      	bne.n	800d688 <_printf_common+0x48>
 800d67a:	f104 0a19 	add.w	sl, r4, #25
 800d67e:	68e3      	ldr	r3, [r4, #12]
 800d680:	6832      	ldr	r2, [r6, #0]
 800d682:	1a9b      	subs	r3, r3, r2
 800d684:	42ab      	cmp	r3, r5
 800d686:	dc26      	bgt.n	800d6d6 <_printf_common+0x96>
 800d688:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d68c:	6822      	ldr	r2, [r4, #0]
 800d68e:	3b00      	subs	r3, #0
 800d690:	bf18      	it	ne
 800d692:	2301      	movne	r3, #1
 800d694:	0692      	lsls	r2, r2, #26
 800d696:	d42b      	bmi.n	800d6f0 <_printf_common+0xb0>
 800d698:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d69c:	4641      	mov	r1, r8
 800d69e:	4638      	mov	r0, r7
 800d6a0:	47c8      	blx	r9
 800d6a2:	3001      	adds	r0, #1
 800d6a4:	d01e      	beq.n	800d6e4 <_printf_common+0xa4>
 800d6a6:	6823      	ldr	r3, [r4, #0]
 800d6a8:	6922      	ldr	r2, [r4, #16]
 800d6aa:	f003 0306 	and.w	r3, r3, #6
 800d6ae:	2b04      	cmp	r3, #4
 800d6b0:	bf02      	ittt	eq
 800d6b2:	68e5      	ldreq	r5, [r4, #12]
 800d6b4:	6833      	ldreq	r3, [r6, #0]
 800d6b6:	1aed      	subeq	r5, r5, r3
 800d6b8:	68a3      	ldr	r3, [r4, #8]
 800d6ba:	bf0c      	ite	eq
 800d6bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6c0:	2500      	movne	r5, #0
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	bfc4      	itt	gt
 800d6c6:	1a9b      	subgt	r3, r3, r2
 800d6c8:	18ed      	addgt	r5, r5, r3
 800d6ca:	2600      	movs	r6, #0
 800d6cc:	341a      	adds	r4, #26
 800d6ce:	42b5      	cmp	r5, r6
 800d6d0:	d11a      	bne.n	800d708 <_printf_common+0xc8>
 800d6d2:	2000      	movs	r0, #0
 800d6d4:	e008      	b.n	800d6e8 <_printf_common+0xa8>
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	4652      	mov	r2, sl
 800d6da:	4641      	mov	r1, r8
 800d6dc:	4638      	mov	r0, r7
 800d6de:	47c8      	blx	r9
 800d6e0:	3001      	adds	r0, #1
 800d6e2:	d103      	bne.n	800d6ec <_printf_common+0xac>
 800d6e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ec:	3501      	adds	r5, #1
 800d6ee:	e7c6      	b.n	800d67e <_printf_common+0x3e>
 800d6f0:	18e1      	adds	r1, r4, r3
 800d6f2:	1c5a      	adds	r2, r3, #1
 800d6f4:	2030      	movs	r0, #48	@ 0x30
 800d6f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d6fa:	4422      	add	r2, r4
 800d6fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d700:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d704:	3302      	adds	r3, #2
 800d706:	e7c7      	b.n	800d698 <_printf_common+0x58>
 800d708:	2301      	movs	r3, #1
 800d70a:	4622      	mov	r2, r4
 800d70c:	4641      	mov	r1, r8
 800d70e:	4638      	mov	r0, r7
 800d710:	47c8      	blx	r9
 800d712:	3001      	adds	r0, #1
 800d714:	d0e6      	beq.n	800d6e4 <_printf_common+0xa4>
 800d716:	3601      	adds	r6, #1
 800d718:	e7d9      	b.n	800d6ce <_printf_common+0x8e>
	...

0800d71c <_printf_i>:
 800d71c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d720:	7e0f      	ldrb	r7, [r1, #24]
 800d722:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d724:	2f78      	cmp	r7, #120	@ 0x78
 800d726:	4691      	mov	r9, r2
 800d728:	4680      	mov	r8, r0
 800d72a:	460c      	mov	r4, r1
 800d72c:	469a      	mov	sl, r3
 800d72e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d732:	d807      	bhi.n	800d744 <_printf_i+0x28>
 800d734:	2f62      	cmp	r7, #98	@ 0x62
 800d736:	d80a      	bhi.n	800d74e <_printf_i+0x32>
 800d738:	2f00      	cmp	r7, #0
 800d73a:	f000 80d2 	beq.w	800d8e2 <_printf_i+0x1c6>
 800d73e:	2f58      	cmp	r7, #88	@ 0x58
 800d740:	f000 80b9 	beq.w	800d8b6 <_printf_i+0x19a>
 800d744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d748:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d74c:	e03a      	b.n	800d7c4 <_printf_i+0xa8>
 800d74e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d752:	2b15      	cmp	r3, #21
 800d754:	d8f6      	bhi.n	800d744 <_printf_i+0x28>
 800d756:	a101      	add	r1, pc, #4	@ (adr r1, 800d75c <_printf_i+0x40>)
 800d758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d75c:	0800d7b5 	.word	0x0800d7b5
 800d760:	0800d7c9 	.word	0x0800d7c9
 800d764:	0800d745 	.word	0x0800d745
 800d768:	0800d745 	.word	0x0800d745
 800d76c:	0800d745 	.word	0x0800d745
 800d770:	0800d745 	.word	0x0800d745
 800d774:	0800d7c9 	.word	0x0800d7c9
 800d778:	0800d745 	.word	0x0800d745
 800d77c:	0800d745 	.word	0x0800d745
 800d780:	0800d745 	.word	0x0800d745
 800d784:	0800d745 	.word	0x0800d745
 800d788:	0800d8c9 	.word	0x0800d8c9
 800d78c:	0800d7f3 	.word	0x0800d7f3
 800d790:	0800d883 	.word	0x0800d883
 800d794:	0800d745 	.word	0x0800d745
 800d798:	0800d745 	.word	0x0800d745
 800d79c:	0800d8eb 	.word	0x0800d8eb
 800d7a0:	0800d745 	.word	0x0800d745
 800d7a4:	0800d7f3 	.word	0x0800d7f3
 800d7a8:	0800d745 	.word	0x0800d745
 800d7ac:	0800d745 	.word	0x0800d745
 800d7b0:	0800d88b 	.word	0x0800d88b
 800d7b4:	6833      	ldr	r3, [r6, #0]
 800d7b6:	1d1a      	adds	r2, r3, #4
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	6032      	str	r2, [r6, #0]
 800d7bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d7c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	e09d      	b.n	800d904 <_printf_i+0x1e8>
 800d7c8:	6833      	ldr	r3, [r6, #0]
 800d7ca:	6820      	ldr	r0, [r4, #0]
 800d7cc:	1d19      	adds	r1, r3, #4
 800d7ce:	6031      	str	r1, [r6, #0]
 800d7d0:	0606      	lsls	r6, r0, #24
 800d7d2:	d501      	bpl.n	800d7d8 <_printf_i+0xbc>
 800d7d4:	681d      	ldr	r5, [r3, #0]
 800d7d6:	e003      	b.n	800d7e0 <_printf_i+0xc4>
 800d7d8:	0645      	lsls	r5, r0, #25
 800d7da:	d5fb      	bpl.n	800d7d4 <_printf_i+0xb8>
 800d7dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d7e0:	2d00      	cmp	r5, #0
 800d7e2:	da03      	bge.n	800d7ec <_printf_i+0xd0>
 800d7e4:	232d      	movs	r3, #45	@ 0x2d
 800d7e6:	426d      	negs	r5, r5
 800d7e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7ec:	4859      	ldr	r0, [pc, #356]	@ (800d954 <_printf_i+0x238>)
 800d7ee:	230a      	movs	r3, #10
 800d7f0:	e011      	b.n	800d816 <_printf_i+0xfa>
 800d7f2:	6821      	ldr	r1, [r4, #0]
 800d7f4:	6833      	ldr	r3, [r6, #0]
 800d7f6:	0608      	lsls	r0, r1, #24
 800d7f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d7fc:	d402      	bmi.n	800d804 <_printf_i+0xe8>
 800d7fe:	0649      	lsls	r1, r1, #25
 800d800:	bf48      	it	mi
 800d802:	b2ad      	uxthmi	r5, r5
 800d804:	2f6f      	cmp	r7, #111	@ 0x6f
 800d806:	4853      	ldr	r0, [pc, #332]	@ (800d954 <_printf_i+0x238>)
 800d808:	6033      	str	r3, [r6, #0]
 800d80a:	bf14      	ite	ne
 800d80c:	230a      	movne	r3, #10
 800d80e:	2308      	moveq	r3, #8
 800d810:	2100      	movs	r1, #0
 800d812:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d816:	6866      	ldr	r6, [r4, #4]
 800d818:	60a6      	str	r6, [r4, #8]
 800d81a:	2e00      	cmp	r6, #0
 800d81c:	bfa2      	ittt	ge
 800d81e:	6821      	ldrge	r1, [r4, #0]
 800d820:	f021 0104 	bicge.w	r1, r1, #4
 800d824:	6021      	strge	r1, [r4, #0]
 800d826:	b90d      	cbnz	r5, 800d82c <_printf_i+0x110>
 800d828:	2e00      	cmp	r6, #0
 800d82a:	d04b      	beq.n	800d8c4 <_printf_i+0x1a8>
 800d82c:	4616      	mov	r6, r2
 800d82e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d832:	fb03 5711 	mls	r7, r3, r1, r5
 800d836:	5dc7      	ldrb	r7, [r0, r7]
 800d838:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d83c:	462f      	mov	r7, r5
 800d83e:	42bb      	cmp	r3, r7
 800d840:	460d      	mov	r5, r1
 800d842:	d9f4      	bls.n	800d82e <_printf_i+0x112>
 800d844:	2b08      	cmp	r3, #8
 800d846:	d10b      	bne.n	800d860 <_printf_i+0x144>
 800d848:	6823      	ldr	r3, [r4, #0]
 800d84a:	07df      	lsls	r7, r3, #31
 800d84c:	d508      	bpl.n	800d860 <_printf_i+0x144>
 800d84e:	6923      	ldr	r3, [r4, #16]
 800d850:	6861      	ldr	r1, [r4, #4]
 800d852:	4299      	cmp	r1, r3
 800d854:	bfde      	ittt	le
 800d856:	2330      	movle	r3, #48	@ 0x30
 800d858:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d85c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d860:	1b92      	subs	r2, r2, r6
 800d862:	6122      	str	r2, [r4, #16]
 800d864:	f8cd a000 	str.w	sl, [sp]
 800d868:	464b      	mov	r3, r9
 800d86a:	aa03      	add	r2, sp, #12
 800d86c:	4621      	mov	r1, r4
 800d86e:	4640      	mov	r0, r8
 800d870:	f7ff fee6 	bl	800d640 <_printf_common>
 800d874:	3001      	adds	r0, #1
 800d876:	d14a      	bne.n	800d90e <_printf_i+0x1f2>
 800d878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d87c:	b004      	add	sp, #16
 800d87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d882:	6823      	ldr	r3, [r4, #0]
 800d884:	f043 0320 	orr.w	r3, r3, #32
 800d888:	6023      	str	r3, [r4, #0]
 800d88a:	4833      	ldr	r0, [pc, #204]	@ (800d958 <_printf_i+0x23c>)
 800d88c:	2778      	movs	r7, #120	@ 0x78
 800d88e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d892:	6823      	ldr	r3, [r4, #0]
 800d894:	6831      	ldr	r1, [r6, #0]
 800d896:	061f      	lsls	r7, r3, #24
 800d898:	f851 5b04 	ldr.w	r5, [r1], #4
 800d89c:	d402      	bmi.n	800d8a4 <_printf_i+0x188>
 800d89e:	065f      	lsls	r7, r3, #25
 800d8a0:	bf48      	it	mi
 800d8a2:	b2ad      	uxthmi	r5, r5
 800d8a4:	6031      	str	r1, [r6, #0]
 800d8a6:	07d9      	lsls	r1, r3, #31
 800d8a8:	bf44      	itt	mi
 800d8aa:	f043 0320 	orrmi.w	r3, r3, #32
 800d8ae:	6023      	strmi	r3, [r4, #0]
 800d8b0:	b11d      	cbz	r5, 800d8ba <_printf_i+0x19e>
 800d8b2:	2310      	movs	r3, #16
 800d8b4:	e7ac      	b.n	800d810 <_printf_i+0xf4>
 800d8b6:	4827      	ldr	r0, [pc, #156]	@ (800d954 <_printf_i+0x238>)
 800d8b8:	e7e9      	b.n	800d88e <_printf_i+0x172>
 800d8ba:	6823      	ldr	r3, [r4, #0]
 800d8bc:	f023 0320 	bic.w	r3, r3, #32
 800d8c0:	6023      	str	r3, [r4, #0]
 800d8c2:	e7f6      	b.n	800d8b2 <_printf_i+0x196>
 800d8c4:	4616      	mov	r6, r2
 800d8c6:	e7bd      	b.n	800d844 <_printf_i+0x128>
 800d8c8:	6833      	ldr	r3, [r6, #0]
 800d8ca:	6825      	ldr	r5, [r4, #0]
 800d8cc:	6961      	ldr	r1, [r4, #20]
 800d8ce:	1d18      	adds	r0, r3, #4
 800d8d0:	6030      	str	r0, [r6, #0]
 800d8d2:	062e      	lsls	r6, r5, #24
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	d501      	bpl.n	800d8dc <_printf_i+0x1c0>
 800d8d8:	6019      	str	r1, [r3, #0]
 800d8da:	e002      	b.n	800d8e2 <_printf_i+0x1c6>
 800d8dc:	0668      	lsls	r0, r5, #25
 800d8de:	d5fb      	bpl.n	800d8d8 <_printf_i+0x1bc>
 800d8e0:	8019      	strh	r1, [r3, #0]
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	6123      	str	r3, [r4, #16]
 800d8e6:	4616      	mov	r6, r2
 800d8e8:	e7bc      	b.n	800d864 <_printf_i+0x148>
 800d8ea:	6833      	ldr	r3, [r6, #0]
 800d8ec:	1d1a      	adds	r2, r3, #4
 800d8ee:	6032      	str	r2, [r6, #0]
 800d8f0:	681e      	ldr	r6, [r3, #0]
 800d8f2:	6862      	ldr	r2, [r4, #4]
 800d8f4:	2100      	movs	r1, #0
 800d8f6:	4630      	mov	r0, r6
 800d8f8:	f7f2 fc72 	bl	80001e0 <memchr>
 800d8fc:	b108      	cbz	r0, 800d902 <_printf_i+0x1e6>
 800d8fe:	1b80      	subs	r0, r0, r6
 800d900:	6060      	str	r0, [r4, #4]
 800d902:	6863      	ldr	r3, [r4, #4]
 800d904:	6123      	str	r3, [r4, #16]
 800d906:	2300      	movs	r3, #0
 800d908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d90c:	e7aa      	b.n	800d864 <_printf_i+0x148>
 800d90e:	6923      	ldr	r3, [r4, #16]
 800d910:	4632      	mov	r2, r6
 800d912:	4649      	mov	r1, r9
 800d914:	4640      	mov	r0, r8
 800d916:	47d0      	blx	sl
 800d918:	3001      	adds	r0, #1
 800d91a:	d0ad      	beq.n	800d878 <_printf_i+0x15c>
 800d91c:	6823      	ldr	r3, [r4, #0]
 800d91e:	079b      	lsls	r3, r3, #30
 800d920:	d413      	bmi.n	800d94a <_printf_i+0x22e>
 800d922:	68e0      	ldr	r0, [r4, #12]
 800d924:	9b03      	ldr	r3, [sp, #12]
 800d926:	4298      	cmp	r0, r3
 800d928:	bfb8      	it	lt
 800d92a:	4618      	movlt	r0, r3
 800d92c:	e7a6      	b.n	800d87c <_printf_i+0x160>
 800d92e:	2301      	movs	r3, #1
 800d930:	4632      	mov	r2, r6
 800d932:	4649      	mov	r1, r9
 800d934:	4640      	mov	r0, r8
 800d936:	47d0      	blx	sl
 800d938:	3001      	adds	r0, #1
 800d93a:	d09d      	beq.n	800d878 <_printf_i+0x15c>
 800d93c:	3501      	adds	r5, #1
 800d93e:	68e3      	ldr	r3, [r4, #12]
 800d940:	9903      	ldr	r1, [sp, #12]
 800d942:	1a5b      	subs	r3, r3, r1
 800d944:	42ab      	cmp	r3, r5
 800d946:	dcf2      	bgt.n	800d92e <_printf_i+0x212>
 800d948:	e7eb      	b.n	800d922 <_printf_i+0x206>
 800d94a:	2500      	movs	r5, #0
 800d94c:	f104 0619 	add.w	r6, r4, #25
 800d950:	e7f5      	b.n	800d93e <_printf_i+0x222>
 800d952:	bf00      	nop
 800d954:	0800db81 	.word	0x0800db81
 800d958:	0800db92 	.word	0x0800db92

0800d95c <__malloc_lock>:
 800d95c:	4801      	ldr	r0, [pc, #4]	@ (800d964 <__malloc_lock+0x8>)
 800d95e:	f7ff bc1b 	b.w	800d198 <__retarget_lock_acquire_recursive>
 800d962:	bf00      	nop
 800d964:	2000589c 	.word	0x2000589c

0800d968 <__malloc_unlock>:
 800d968:	4801      	ldr	r0, [pc, #4]	@ (800d970 <__malloc_unlock+0x8>)
 800d96a:	f7ff bc16 	b.w	800d19a <__retarget_lock_release_recursive>
 800d96e:	bf00      	nop
 800d970:	2000589c 	.word	0x2000589c

0800d974 <_realloc_r>:
 800d974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d978:	4680      	mov	r8, r0
 800d97a:	4615      	mov	r5, r2
 800d97c:	460c      	mov	r4, r1
 800d97e:	b921      	cbnz	r1, 800d98a <_realloc_r+0x16>
 800d980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d984:	4611      	mov	r1, r2
 800d986:	f7ff bddb 	b.w	800d540 <_malloc_r>
 800d98a:	b92a      	cbnz	r2, 800d998 <_realloc_r+0x24>
 800d98c:	f7ff fc14 	bl	800d1b8 <_free_r>
 800d990:	2400      	movs	r4, #0
 800d992:	4620      	mov	r0, r4
 800d994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d998:	f000 f844 	bl	800da24 <_malloc_usable_size_r>
 800d99c:	4285      	cmp	r5, r0
 800d99e:	4606      	mov	r6, r0
 800d9a0:	d802      	bhi.n	800d9a8 <_realloc_r+0x34>
 800d9a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d9a6:	d8f4      	bhi.n	800d992 <_realloc_r+0x1e>
 800d9a8:	4629      	mov	r1, r5
 800d9aa:	4640      	mov	r0, r8
 800d9ac:	f7ff fdc8 	bl	800d540 <_malloc_r>
 800d9b0:	4607      	mov	r7, r0
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	d0ec      	beq.n	800d990 <_realloc_r+0x1c>
 800d9b6:	42b5      	cmp	r5, r6
 800d9b8:	462a      	mov	r2, r5
 800d9ba:	4621      	mov	r1, r4
 800d9bc:	bf28      	it	cs
 800d9be:	4632      	movcs	r2, r6
 800d9c0:	f7ff fbec 	bl	800d19c <memcpy>
 800d9c4:	4621      	mov	r1, r4
 800d9c6:	4640      	mov	r0, r8
 800d9c8:	f7ff fbf6 	bl	800d1b8 <_free_r>
 800d9cc:	463c      	mov	r4, r7
 800d9ce:	e7e0      	b.n	800d992 <_realloc_r+0x1e>

0800d9d0 <memmove>:
 800d9d0:	4288      	cmp	r0, r1
 800d9d2:	b510      	push	{r4, lr}
 800d9d4:	eb01 0402 	add.w	r4, r1, r2
 800d9d8:	d902      	bls.n	800d9e0 <memmove+0x10>
 800d9da:	4284      	cmp	r4, r0
 800d9dc:	4623      	mov	r3, r4
 800d9de:	d807      	bhi.n	800d9f0 <memmove+0x20>
 800d9e0:	1e43      	subs	r3, r0, #1
 800d9e2:	42a1      	cmp	r1, r4
 800d9e4:	d008      	beq.n	800d9f8 <memmove+0x28>
 800d9e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d9ee:	e7f8      	b.n	800d9e2 <memmove+0x12>
 800d9f0:	4402      	add	r2, r0
 800d9f2:	4601      	mov	r1, r0
 800d9f4:	428a      	cmp	r2, r1
 800d9f6:	d100      	bne.n	800d9fa <memmove+0x2a>
 800d9f8:	bd10      	pop	{r4, pc}
 800d9fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da02:	e7f7      	b.n	800d9f4 <memmove+0x24>

0800da04 <_sbrk_r>:
 800da04:	b538      	push	{r3, r4, r5, lr}
 800da06:	4d06      	ldr	r5, [pc, #24]	@ (800da20 <_sbrk_r+0x1c>)
 800da08:	2300      	movs	r3, #0
 800da0a:	4604      	mov	r4, r0
 800da0c:	4608      	mov	r0, r1
 800da0e:	602b      	str	r3, [r5, #0]
 800da10:	f7f6 fe12 	bl	8004638 <_sbrk>
 800da14:	1c43      	adds	r3, r0, #1
 800da16:	d102      	bne.n	800da1e <_sbrk_r+0x1a>
 800da18:	682b      	ldr	r3, [r5, #0]
 800da1a:	b103      	cbz	r3, 800da1e <_sbrk_r+0x1a>
 800da1c:	6023      	str	r3, [r4, #0]
 800da1e:	bd38      	pop	{r3, r4, r5, pc}
 800da20:	20005898 	.word	0x20005898

0800da24 <_malloc_usable_size_r>:
 800da24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da28:	1f18      	subs	r0, r3, #4
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	bfbc      	itt	lt
 800da2e:	580b      	ldrlt	r3, [r1, r0]
 800da30:	18c0      	addlt	r0, r0, r3
 800da32:	4770      	bx	lr

0800da34 <_init>:
 800da34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da36:	bf00      	nop
 800da38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da3a:	bc08      	pop	{r3}
 800da3c:	469e      	mov	lr, r3
 800da3e:	4770      	bx	lr

0800da40 <_fini>:
 800da40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da42:	bf00      	nop
 800da44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da46:	bc08      	pop	{r3}
 800da48:	469e      	mov	lr, r3
 800da4a:	4770      	bx	lr
