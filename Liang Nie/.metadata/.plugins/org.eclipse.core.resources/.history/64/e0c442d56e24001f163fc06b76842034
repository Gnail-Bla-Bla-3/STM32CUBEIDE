/*
 * driving.c
 *
 *  Created on: Jun 6, 2024
 *      Author: liangnie
 */
#include "main.h"
#include "CAN.h"
#include "remote_control.h"
#include "UART.h"
#include "buffer.h"
#include <math.h>

const float increaseSpeed = 0.02;
const float decreaseSpeed = 0.01;

float movementCounter[4] = {0, 0, 0, 0};

float graphingFunction (float x) {
	float y = x;
	return y;
}

float graphingFunctionEdgeCase (float x) {
	float y = graphingFunction(x);
	if (x <= 0) {
		y = 0;
	} else if (x > 1) {
		y = graphingFunction(1.0);
	}
	return y;
}

void all开车的Shit(int8_t w, int8_t a, int8_t s, int8_t d, int8_t q, int8_t e, int16_t rcRPM[], int8_t chassisVsTurretDrive, float convertedAngle) {

	float scaledMovementCounter[6] = {0, 0, 0, 0};
	int16_t xJoystickDirection = 0;
	int16_t yJoystickDirection = 0;
	int16_t rotationOfChassis = 0;

	if (w == 1) {
		movementCounter[0]+= increaseSpeed;
	} else {
		movementCounter[0]-= decreaseSpeed;
	}
	if (a == 1) {
		movementCounter[1]+= increaseSpeed;
	} else {
		movementCounter[1]-= decreaseSpeed;
	}
	if (s == 1) {
		movementCounter[2]+= increaseSpeed;
	} else {
		movementCounter[2]-= decreaseSpeed;
	}
	if (d == 1) {
		movementCounter[3]+= increaseSpeed;
	} else {
		movementCounter[3]-= decreaseSpeed;
	}
	if (q == 1) {
		movementCounter[4]+= increaseSpeed;
	} else {
		movementCounter[4]-= decreaseSpeed;
	}
	if (e == 1) {
		movementCounter[5]+= increaseSpeed;
	} else {
		movementCounter[5]-= decreaseSpeed;
	}

	for (int i = 0; i < 6; i++) {
		if (movementCounter[i] > 1) {
			movementCounter[i] = 1;
		} else if (movementCounter[i] < 0) {
			movementCounter[i] = 0;
		}
		scaledMovementCounter[i] = graphingFunctionEdgeCase(movementCounter[i]);
	}

	int16_t rcWS = 9005.7*((scaledMovementCounter[0]-scaledMovementCounter[2]));
	int16_t rcAD = 9005.7*((scaledMovementCounter[3]-scaledMovementCounter[1]));
	int16_t rcQE = 9005.7*((scaledMovementCounter[5]-scaledMovementCounter[4]));

	if (chassisVsTurretDrive == 1) {
		xJoystickDirection = (rcRPM[0]*cos(convertedAngle) - rcRPM[1]*sin(convertedAngle) + (rcAD*cos(convertedAngle) - rcWS*sin(convertedAngle)));
		yJoystickDirection = (rcRPM[0]*sin(convertedAngle) + rcRPM[1]*cos(convertedAngle) + (rcAD*sin(convertedAngle) + rcWS*cos(convertedAngle)));
		rotationOfChassis = rotationSpeedOfChassis;
	} else {
		xJoystickDirection = (rcRPM[0] + rcWS);
		yJoystickDirection = (rcRPM[1] + rcQE);
		rotationOfChassis = (rcRPM[2] + rcAD);
	}

}
