/*
 * CAL_RM25.c
 *
 *  Created on: Jun 8, 2025
 *      Author: moose
 */
#include "CAL_RM25.h"
#include "main.h"
#include "UART_RM25.h"
#include "CAN.h"
#include "DBUS.h"
#include "string.h"


//sensitivity for WASD emulating Channels 1 and 0
const int16_t RISING_SCALER = 5;
const int16_t FALLING_SCALER = 10;
const float MOUSE_SCALER = 1;
const CAN_Bus bus = Bus2;

//Control inputs
int16_t CAL_CH0 = 0;
int16_t CAL_CH1 = 0;
int16_t CAL_CH2 = 0;
int16_t CAL_CH3 = 0;
int16_t CAL_CH4 = 0;

uint8_t CAL_shift = 0;
uint8_t CAL_ctrl = 0;
uint8_t CAL_q = 0;
uint8_t CAL_e = 0;
uint8_t CAL_r = 0;
uint8_t CAL_f = 0;
uint8_t CAL_g = 0;
uint8_t CAL_z = 0;
uint8_t CAL_x = 0;
uint8_t CAL_c = 0;
uint8_t CAL_v = 0;
uint8_t CAL_b = 0;

uint8_t CAL_lb = 0;
uint8_t CAL_rb = 0;
uint8_t CAL_MouseZ = 0;

//custom controller values


//pmm stats

uint8_t CAL_game_type = 0;
uint8_t CAL_current_stage = 0;


uint16_t CAL_buffer_energy = 0;
uint16_t CAL_shooter_17mm_1_barrel_heat = 0;
uint16_t CAL_shooter_17mm_2_barrel_heat = 0;
uint16_t CAL_shooter_42mm_barrel_heat = 0;

uint8_t CAL_robot_id = 0;
uint8_t CAL_robot_level = 0;
uint16_t CAL_shooter_barrel_cooling_value = 0;
uint16_t CAL_chassis_power_limit = 0;
uint16_t CAL_shooter_barrel_heat_limit = 0;

//chassis reading values
int16_t CAL_FrontBack = 0;
int16_t CAL_RightLeft = 0;
int16_t CAL_ChassisSpin = 0;
int16_t CAL_TurretSpin = 0;
int16_t CAL_CurrentGyro = 0;
uint8_t CAL_TriggerPressed = 0;
uint8_t CAL_FireMode = 0;

//sentry recieve
int16_t CAL_TargetX = 0;
int16_t CAL_TargetY = 0;
int16_t CAL_TargetWidth = 0;
int16_t CAL_TargetHeight = 0;




/*
 * This Controls Abstraction Layer library combines the inputs from keyboard, custom controller and controller
 * into a single readable input. The RC switch 1 controls the input type that will be recognized:
 * 3 is RC controls. Intended for inspection. Key presses are also sent. WASD will emulate RC CH 1 and 0
 * 1 is keyboard inputs via vtm link, WASD will emulate RC CH 1 and 0
 * 2 is for custom controller based inputs
 *
 *
 * This Library also handles the b2b communication
 */





uint8_t isWPressed = 0;
uint8_t isAPressed = 0;
uint8_t isSPressed = 0;
uint8_t isDPressed = 0;

int16_t wCounter = 0;
int16_t aCounter = 0;
int16_t sCounter = 0;
int16_t dCounter = 0;

int16_t mouseX = 0;
int16_t mouseY = 0;

void CAL_Update(){
	if(getDR16_S2()==1){
		isWPressed = getDR16_W();
		isAPressed = getDR16_A();
		isSPressed = getDR16_S();
		isDPressed = getDR16_D();
		mouseX = (int16_t)(((float)getDR16_MouseX())*MOUSE_SCALER);
		mouseY = (int16_t)(((float)getDR16_MouseY())*MOUSE_SCALER);
	}
	if(isWPressed ==1){
		wCounter = wCounter + RISING_SCALER;
		if(wCounter>660){
			wCounter = 660;
		}
	}else{
		if(wCounter>0){
			wCounter = wCounter - FALLING_SCALER;
		}
		if(wCounter<0){
			wCounter = 0;
		}
	}

	if(isDPressed ==1){
		dCounter = dCounter + RISING_SCALER;
		if(dCounter>660){
			dCounter = 660;
		}
	}else{
		if(dCounter>0){
			dCounter = dCounter - FALLING_SCALER;
		}
		if(dCounter<0){
			dCounter = 0;
		}
	}

	if(isSPressed ==1){
		sCounter = sCounter + RISING_SCALER;
		if(sCounter>660){
			sCounter = 660;
		}
	}else{
		if(sCounter>0){
			sCounter = sCounter - FALLING_SCALER;
		}
		if(sCounter<0){
			sCounter = 0;
		}
	}

	if(isAPressed ==1){
		aCounter = aCounter + RISING_SCALER;
		if(aCounter>660){
			aCounter = 660;
		}
	}else{
		if(aCounter>0){
			aCounter = aCounter - FALLING_SCALER;
		}
		if(aCounter<0){
			aCounter = 0;
		}
	}

	if(mouseX>660){
		mouseX = 660;
	}else if(mouseX<-660){
		mouseX = -660;
	}
	if(mouseY>660){
		mouseY = 660;
	}else if(mouseY<-660){
		mouseY = -660;
	}


	CAL_CH0 = getDR16_CH0() + dCounter - aCounter;
	CAL_CH1 = getDR16_CH1() + wCounter - sCounter;
	CAL_CH2 = getDR16_CH2()+mouseX;
	CAL_CH3 = getDR16_CH3()+mouseY;

	if(CAL_CH0>660){
		CAL_CH0 = 660;
	}else if(CAL_CH0<-660){
		CAL_CH0 = -660;
	}

	if(CAL_CH1>660){
		CAL_CH1 = 660;
	}else if(CAL_CH1<-660){
		CAL_CH1 = -660;
	}

	if(CAL_CH2>660){
		CAL_CH2 = 660;
	}else if(CAL_CH2<-660){
		CAL_CH2 = -660;
	}

	if(CAL_CH3>660){
		CAL_CH3 = 660;
	}else if(CAL_CH3<-660){
		CAL_CH3 = -660;
	}


}





void CUSTOM_CONTROLLER_ROBOT_RxEventCallback(uint8_t customData[30]){

}




void PC_CONTROL_RxEventCallback(int16_t mouse_x, int16_t mouse_y, int16_t mouse_z, uint8_t left_button_down, uint8_t right_button_down, uint8_t w, uint8_t s, uint8_t a, uint8_t d, uint8_t shift,uint8_t ctrl,uint8_t q, uint8_t e, uint8_t r, uint8_t f, uint8_t g, uint8_t z, uint8_t x, uint8_t c, uint8_t v, uint8_t b){
	if(getDR16_S2()==3||getDR16_S2()==0){
		mouseY = (int16_t)(((float)mouse_y)*MOUSE_SCALER);
		mouseX = (int16_t)(((float)mouse_x)*MOUSE_SCALER);
		CAL_MouseZ = mouse_z;
		CAL_lb = left_button_down;
		CAL_rb = right_button_down;
		isWPressed = w;
		isAPressed = a;
		isSPressed = s;
		isDPressed = d;
		CAL_shift = shift;
		CAL_ctrl = ctrl;
		CAL_q = q;
		CAL_e = e;
		CAL_r = r;
		CAL_f = f;
		CAL_g = g;
		CAL_z = z;
		CAL_x = x;
		CAL_c = c;
		CAL_v = v;
		CAL_b = b;
	}
}


void GAME_STATUS_RxEventCallback(uint8_t game_type,uint8_t current_stage,uint8_t game_progress, uint16_t stage_remain_time,uint64_t SyncTimeStamp){
	CAL_game_type = game_type;
	CAL_current_stage = current_stage;

	uint8_t txData[8] = {0};
	memcpy(&txData[1],&game_type,1);
	memcpy(&txData[0],&current_stage,1);
	CAN_transmit(bus, CAL_GAME_STATUS,txData);
}

void ROBOT_STATUS_RxEventCallback(uint8_t robot_id, uint8_t robot_level, uint16_t current_HP, uint16_t maximum_HP, uint16_t shooter_barrel_cooling_value, uint16_t shooter_barrel_heat_limit, uint16_t chassis_power_limit, uint8_t power_management_gimbal_output, uint8_t power_management_chassis_output, uint8_t power_management_shooter_output){
	CAL_robot_id = robot_id;
	CAL_robot_level = robot_level;
	CAL_shooter_barrel_cooling_value = shooter_barrel_cooling_value;
	CAL_shooter_barrel_heat_limit = shooter_barrel_heat_limit;
	CAL_chassis_power_limit = chassis_power_limit;

	uint8_t txData[8] = {0};
	memcpy(&txData[0],&robot_id,1);
	memcpy(&txData[1],&robot_level,1);
	memcpy(&txData[2],&shooter_barrel_cooling_value,2);
	memcpy(&txData[4],&shooter_barrel_heat_limit,2);
	memcpy(&txData[6],&chassis_power_limit,2);
	CAN_transmit(bus, CAL_ROBOT_STATUS,txData);
}

void POWER_HEAT_DATA_RxEventCallback(uint16_t buffer_energy, uint16_t shooter_17mm_1_barrel_heat, uint16_t shooter_17mm_2_barrel_heat, uint16_t shooter_42mm_barrel_heat){
	CAL_buffer_energy = buffer_energy;
	CAL_shooter_17mm_1_barrel_heat = shooter_17mm_1_barrel_heat;
	CAL_shooter_17mm_2_barrel_heat = shooter_17mm_2_barrel_heat;
	CAL_shooter_42mm_barrel_heat = shooter_42mm_barrel_heat;

	uint8_t txData[8] = {0};
	memcpy(&txData[0],&buffer_energy,2);
	memcpy(&txData[2],&shooter_17mm_1_barrel_heat,2);
	memcpy(&txData[4],&shooter_17mm_2_barrel_heat,2);
	memcpy(&txData[6],&shooter_42mm_barrel_heat,2);
	CAN_transmit(bus, CAL_POWER_HEAT_DATA,txData);
}



void CAN_RxEventCallbackPT(uint32_t StdId, uint8_t rxData[8]){
	switch(StdId){
		case(CAL_GAME_STATUS):{
			memcpy(&CAL_game_type,&rxData[0],1);
			memcpy(&CAL_current_stage,&rxData[1],1);
			break;
		}
		case(CAL_ROBOT_STATUS):{
			memcpy(&CAL_robot_id,&rxData[0],1);
			memcpy(&CAL_robot_level,&rxData[1],1);
			memcpy(&CAL_shooter_barrel_cooling_value,&rxData[2],2);
			memcpy(&CAL_shooter_barrel_heat_limit,&rxData[4],2);
			memcpy(&CAL_chassis_power_limit,&rxData[6],2);
			break;
		}
		case(CAL_POWER_HEAT_DATA):{
			memcpy(&CAL_buffer_energy,&rxData[0],2);
			memcpy(&CAL_shooter_17mm_1_barrel_heat,&rxData[2],2);
			memcpy(&CAL_shooter_17mm_2_barrel_heat,&rxData[4],2);
			memcpy(&CAL_shooter_42mm_barrel_heat,&rxData[6],2);
			break;
		}
		case(CAL_CHASSIS_CONTROL_DATA):{

			uint8_t frontBackBuff[2] = {0};
			frontBackBuff[0] = rxData[0];
			frontBackBuff[1] = CAL_getBits(rxData[1],0,4);
			memcpy(&CAL_FrontBack,frontBackBuff,2);
			CAL_FrontBack = CAL_FrontBack - 2047;

			uint8_t rightLeftBuff[2] = {0};
			rightLeftBuff[0] = CAL_getBits(rxData[1],4,4)|(CAL_getBits(rxData[2],0,4)<<4);
			rightLeftBuff[1] = CAL_getBits(rxData[2],4,4);
			memcpy(&CAL_RightLeft,rightLeftBuff,2);
			CAL_RightLeft = CAL_RightLeft - 2047;

			uint8_t chassisSpinBuff[2] = {0};
			chassisSpinBuff[0] = rxData[3];
			chassisSpinBuff[1] = CAL_getBits(rxData[4],0,4);
			memcpy(&CAL_ChassisSpin,chassisSpinBuff,2);
			CAL_ChassisSpin = CAL_ChassisSpin - 2047;

			uint8_t turretSpinBuff[2] = {0};
			turretSpinBuff[0] = CAL_getBits(rxData[4],4,4)|(CAL_getBits(rxData[5],0,4)<<4);
			turretSpinBuff[1] = CAL_getBits(rxData[5],4,4);
			memcpy(&CAL_TurretSpin,turretSpinBuff,2);
			CAL_TurretSpin = CAL_TurretSpin;

			uint8_t currentGyroBuff[2] = {0};
			currentGyroBuff[0] = rxData[6];
			currentGyroBuff[1] = CAL_getBits(rxData[7],0,4);
			memcpy(&CAL_CurrentGyro,currentGyroBuff,2);
			CAL_CurrentGyro = CAL_CurrentGyro - 2047;

			CAL_TriggerPressed = CAL_getBits(rxData[7],4,1);
			CAL_FireMode = CAL_getBits(rxData[7],5,3);
			break;
		}
		case(CAL_CV_DATA):{

			uint8_t targetXBuff[2] = {0};
			targetXBuff[0] = rxData[0];
			targetXBuff[1] = CAL_getBits(rxData[1],0,4);
			memcpy(&CAL_TargetX,targetXBuff,2);
			CAL_TargetX = CAL_TargetX - 320;

			uint8_t targetYBuff[2] = {0};
			targetYBuff[0] = CAL_getBits(rxData[1],4,4)|(CAL_getBits(rxData[2],0,4)<<4);
			targetYBuff[1] = CAL_getBits(rxData[2],4,4);
			memcpy(&CAL_TargetY,targetYBuff,2);
			CAL_TargetY = CAL_TargetY - 160;

			uint8_t targetWidthBuff[2] = {0};
			targetWidthBuff[0] = rxData[3];
			targetWidthBuff[1] = CAL_getBits(rxData[4],0,4);
			memcpy(&CAL_TargetWidth,targetWidthBuff,2);
			CAL_TargetWidth = CAL_TargetWidth;

			uint8_t targetHeightBuff[2] = {0};
			targetHeightBuff[0] = CAL_getBits(rxData[4],4,4)|(CAL_getBits(rxData[5],0,4)<<4);
			targetHeightBuff[1] = CAL_getBits(rxData[5],4,4);
			memcpy(&CAL_TargetHeight,targetHeightBuff,2);
			CAL_TargetHeight = CAL_TargetHeight;
			break;
		}
		default:{

			break;
		}
	}
}

//frontback12b,rightleft12b,chassisspin12b,turretspin12b,currentgyro12b,trigger1b,firemode3b
void CAL_SendChassisCommands(int16_t frontBack, int16_t rightLeft, int16_t chassisSpin, int16_t turretSpin,int16_t currentGyro, uint8_t triggerPressed,uint8_t fireMode){
	uint8_t txData[8] = {0};

	//prep values for bit management
	frontBack = frontBack+2047;
	if(frontBack<0){
		frontBack=0;
	}
	if(frontBack>4095){
		frontBack=4095;
	}
	uint8_t frontBackBuff[2] = {0};
	memcpy(frontBackBuff,&frontBack,2);

	rightLeft = rightLeft+2047;
	if(rightLeft<0){
	rightLeft=0;
	}
	if(rightLeft>4095){
		rightLeft=4095;
	}
	uint8_t rightLeftBuff[2] = {0};
	memcpy(rightLeftBuff,&rightLeft,2);

	chassisSpin = chassisSpin+2047;
	if(chassisSpin<0){
		chassisSpin=0;
	}
	if(chassisSpin>4095){
		chassisSpin=4095;
	}
	uint8_t chassisSpinBuff[2] = {0};
	memcpy(chassisSpinBuff,&chassisSpin,2);

	if(turretSpin<0){
		turretSpin=0;
	}
	if(turretSpin>4095){
		turretSpin=4095;
	}
	uint8_t turretSpinBuff[2] = {0};
	memcpy(turretSpinBuff,&turretSpin,2);

	currentGyro = currentGyro+2047;
	if(currentGyro<0){
		currentGyro=0;
	}
	if(currentGyro>4095){
		currentGyro=4095;
	}
	uint8_t currentGyroBuff[2] = {0};
	memcpy(currentGyroBuff,&currentGyro,2);


	//build package
	txData[0] =  frontBackBuff[0];
	txData[1] =  CAL_getBits(frontBackBuff[1],0,4)|(CAL_getBits(rightLeftBuff[0],0,4)<<4);
	txData[2] =  CAL_getBits(rightLeftBuff[0],4,4)|(CAL_getBits(rightLeftBuff[1],0,4)<<4);
	txData[3] = chassisSpinBuff[0];
	txData[4] = CAL_getBits(chassisSpinBuff[1],0,4)|(CAL_getBits(turretSpinBuff[0],0,4)<<4);
	txData[5] = CAL_getBits(turretSpinBuff[0],4,4)|(CAL_getBits(turretSpinBuff[1],0,4)<<4);
	txData[6] = currentGyroBuff[0];
	txData[7] = CAL_getBits(currentGyroBuff[1],0,4)|(triggerPressed<<4)|(fireMode<<5);

	CAN_transmit(Bus2, CAL_CHASSIS_CONTROL_DATA,txData);
}


uint8_t CAL_getBits(uint8_t data, uint8_t startBit, uint8_t len){
	uint8_t result = 0;
	for(uint8_t index=0;index<len;index++){
		result = result | (((data>>(startBit+index))& 1)<<index);
	}
	return result;
}


int16_t CAL_getCH0(){
		return CAL_CH0;
}

int16_t CAL_getCH1(){
	return CAL_CH1;
}

int16_t CAL_getCH2(){
		return CAL_CH2;
}


int16_t CAL_getCH3(){
		return CAL_CH3;
}

int16_t CAL_getCH4(){
	if(getDR16_S2()==1){
		return getDR16_CH4();
	}else{
		return CAL_CH4;
	}
}

uint8_t CAL_getS1(){
	return getDR16_S1();
}

uint8_t CAL_getShift(){
	if(getDR16_S2()==1){
		return getDR16_Shift();
	}else{
		return CAL_shift;
	}
}

uint8_t CAL_getCtrl(){
	if(getDR16_S2()==1){
		return getDR16_Ctrl();
	}else{
		return CAL_ctrl;
	}
}

uint8_t CAL_getQ(){
	if(getDR16_S2()==1){
		return getDR16_Q();
	}else{
		return CAL_q;
	}
}

uint8_t CAL_getE(){
	if(getDR16_S2()==1){
		return getDR16_E();
	}else{
		return CAL_e;
	}
}

uint8_t CAL_getR(){
	if(getDR16_S2()==1){
		return getDR16_R();
	}else{
		return CAL_r;
	}
}

uint8_t CAL_getF(){
	if(getDR16_S2()==1){
		return getDR16_F();
	}else{
		return CAL_f;
	}
}

uint8_t CAL_getG(){
	if(getDR16_S2()==1){
		return getDR16_G();
	}else{
		return CAL_g;
	}
}

uint8_t CAL_getZ(){
	if(getDR16_S2()==1){
		return getDR16_Z();
	}else{
		return CAL_z;
	}
}

uint8_t CAL_getX(){
	if(getDR16_S2()==1){
		return getDR16_X();
	}else{
		return CAL_x;
	}
}

uint8_t CAL_getC(){
	if(getDR16_S2()==1){
		return getDR16_C();
	}else{
		return CAL_c;
	}
}

uint8_t CAL_getV(){
	if(getDR16_S2()==1){
		return getDR16_V();
	}else{
		return CAL_v;
	}
}

uint8_t CAL_getB(){
	if(getDR16_S2()==1){
		return getDR16_B();
	}else{
		return CAL_b;
	}
}

uint8_t CAL_getLMB(){
	if(getDR16_S2()==1){
		return getDR16_MouseL();
	}else{
		return CAL_lb;
	}
}

uint8_t CAL_getRMB(){
	if(getDR16_S2()==1){
		return getDR16_MouseR();
	}else{
		return CAL_rb;
	}
}

uint8_t CAL_getMouseZ(){
	if(getDR16_S2()==1){
		if(getDR16_MouseZ()<0){
			return 2;
		}else if(getDR16_MouseZ()>0){
			return 1;
		}else{
			return 0;
		}
	}else{
		if(CAL_MouseZ<0){
			return 2;
		}else if(CAL_MouseZ>0){
			return 1;
		}else{
			return 0;
		}
	}
}

uint8_t CAL_getGameType(){
	return CAL_game_type;
}

uint8_t CAL_getCurrentStage(){
	return CAL_current_stage;
}

uint16_t CAL_getBufferEnergy(){
	return CAL_buffer_energy;
}

uint16_t CAL_getBarrel1Heat(){
	return CAL_shooter_17mm_1_barrel_heat;
}

uint16_t CAL_getBarrel2Heat(){
	return CAL_shooter_17mm_2_barrel_heat;
}

uint16_t CAL_getHeroHeat(){
	return CAL_shooter_42mm_barrel_heat;
}

uint8_t CAL_getRobotId(){
	return CAL_robot_id;
}

uint8_t CAL_getRobotLevel(){
	return CAL_robot_level;
}

uint16_t CAL_getCoolingValue(){
	return CAL_shooter_barrel_cooling_value;
}

uint16_t CAL_getPowerLimit(){
	return CAL_chassis_power_limit;
}

uint16_t CAL_getHeatLimit(){
	return CAL_shooter_barrel_heat_limit;
}

int16_t CAL_getFrontBack(){
	return CAL_FrontBack;
}

int16_t CAL_getRightLeft(){
	return CAL_RightLeft;
}

int16_t CAL_getChassisSpin(){
	return CAL_ChassisSpin;
}

int16_t CAL_getTurretSpin(){
	return CAL_TurretSpin;
}

int16_t CAL_getCurrentGyro(){
	return CAL_CurrentGyro;
}

uint8_t CAL_getTriggerPressed(){
	return CAL_TriggerPressed;
}

uint8_t CAL_getFireMode(){
	return CAL_FireMode;
}

int16_t CAL_getTargetX(){
	return CAL_TargetX;
}

int16_t CAL_getTargetY(){
	return CAL_TargetY;
}

int16_t CAL_getTargetWidth(){
	return CAL_TargetWidth;
}

int16_t CAL_getTargetHeight(){
	return CAL_TargetHeight;
}
