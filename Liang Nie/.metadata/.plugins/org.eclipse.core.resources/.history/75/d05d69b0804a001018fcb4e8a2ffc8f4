/*
 * SWERVE.c
 *
 *  Created on: May 31, 2025
 *      Author: liangnie
 */
#include "SWERVE.h"
#include "math.h"
#include <stdlib.h>
#include "CAN.h"
#include "SwerveBuffer.h"


const int16_t maxValAlloweds = 800;
int16_t wheelPrev[8] = {0, 0, 0, 0, 0, 0, 0, 0};
/*  Fronts
	1   0

	2   3
*/

// 2047
int8_t rotationVectors[4][2] =  {{1,  -1},
						 		 {-1, -1},
								 {-1,  1},
								 {1,  1}};
int16_t forwardsID[4] = {3072, 6492, 3137, 1086};
// [MotorID][0 = MotorXVal, 1 = MotorYVal, 2 = MotorABSVal, 3 = MotorConvertedAngle], 4 = Reversal Of Motor
int16_t motorInfo[4][5];
int16_t DP[3] = {0, 0, 0};
int8_t noVelocity = 0;
PID_preset_t test = {5.0, 0.0, 0.0};
PID_preset_t test2 = {800.0, 60.0, 80.0};


float determiningTrigAngle (int16_t motorAngle[5]) {
	if (motorAngle[0] < 0 && motorAngle[1] < 0) {
		return (-M_PI + atanf(((float)motorAngle[0])/((float)motorAngle[1])));
	} else if (motorAngle[0] >= 0 && motorAngle[1] < 0) {
		return (M_PI + atanf(((float)motorAngle[0])/((float)motorAngle[1])));
	} else if (motorAngle[0] == 0 && motorAngle[1] == 0) {
		return 0;
	} else {
		return atanf(((float)motorAngle[0])/((float)motorAngle[1]));
	}
}

int16_t wheelRotation (int16_t currentRotation, int16_t destinationRotation) {
	int8_t newTargetRotationCounter = 0;
	int16_t ACD = abs(destinationRotation - currentRotation);
	int16_t ALD = abs((destinationRotation - 8191) - currentRotation);
	int16_t AUD = abs((destinationRotation + 8191) - currentRotation);
	if (ACD < ALD && ACD < AUD) { // Normal Delta is best case
		newTargetRotationCounter = 0;
	} else if (ALD < ACD && ALD < AUD) { // Lower Delta (Flip) is best case
		newTargetRotationCounter = -1;
	} else { // Upper Delta is best case here
		newTargetRotationCounter = 1;
	}
    return ((destinationRotation + (8191*newTargetRotationCounter)) - currentRotation);
}

float swerveScaler (int16_t motorInfo[4][5]) {
	int16_t largestVal = 0;
	for (int8_t i = 0; i < 4; i++) {
		if (motorInfo[i][2] > largestVal) {
			largestVal = motorInfo[i][2];
		}
	}
	/*
	if (largestVal == 0) {
		usart_printf("ERROR_WITH_SCALER\r\n");
	}
	*/
	// usart_printf("Hello %d there!\r\n", 5);
	if (largestVal <= maxValAlloweds) {
		return 1;
	} else {
		return ((float)(maxValAlloweds)/(float)(largestVal));
	}
}

int16_t PD (MotorType_ID motorType, int16_t *previousDelta, int16_t currentDelta, float kP, float kD) {

	return applyCtrlLimit(motorType, (currentDelta*kP + (*previousDelta - currentDelta)*kD));
}


void Loop(int16_t Axies[3], int16_t GM6020TurretAngle) {

	float CAngle = (2.0f*M_PI*(float)(1024-GM6020TurretAngle))/4095;
	// usart_printf("%d, %d, %d, %d\r\n", getRotorPosition(Bus1, GM6020, 1), getRotorPosition(Bus1, GM6020, 2), getRotorPosition(Bus1, GM6020, 3), getRotorPosition(Bus1, GM6020, 4));
	/*
	int16_t FB = Axies[0];
	int16_t LR = Axies[1];
	int16_t Rotate = Axies[2];
	*/

	int16_t FB = Axies[1]*cosf(CAngle) - Axies[0]*sinf(CAngle);
	int16_t LR = Axies[1]*sinf(CAngle) + Axies[0]*cosf(CAngle);
	int16_t Rotate = Axies[2];
	/*
	 * Checks if All joystick Values are 0 to make the wheels maintain last orientation
	 */
	if (FB == 0 && LR == 0 && Rotate == 0) {
		FB = DP[0];
		LR = DP[1];
		Rotate = DP[2];
		noVelocity = 1;
	} else {
		noVelocity = 0;
	}
	DP[0] = FB;
	DP[1] = LR;
	DP[2] = Rotate;

	/*
	 * Starts by Calculating the motors X and Y Values.
	 * Then it Calculates the ABS value of the motors.
	 * Unless Velocity is 0 in which it'll then just not rotate the Motors and set the ABS value to 0
	 */
	for (int8_t i = 0; i < 4; i++ ) {
		motorInfo[i][0] = LR + (Rotate * rotationVectors[i][0]);
		motorInfo[i][1] = FB + (Rotate * rotationVectors[i][1]);
		if (noVelocity == 0) {
			motorInfo[i][2] = (int16_t)(sqrtf((float)((motorInfo[i][0]*motorInfo[i][0])+(motorInfo[i][1]*motorInfo[i][1]))));
		} else {
			motorInfo[i][2] = 0;
		}
	}

	/*
	 * Scales ABS values of the Motor Speeds
	 */
	float SScalerVal = swerveScaler(motorInfo);

	// Swerve Motor

	/*
	 * Finds the appropriate Angle for each wheel
	 * Secondly it converts it into encoder increments
	 * Next it adds the offsets.
	 *
	 * Finally it makes sure that all values are within the min and max of the encoder
	 */
	for (int8_t j = 0; j < 4; j++) {
		// Scales Motor Speed Output
		// 800*11.25 = 9000
		motorInfo[j][2] = (float)motorInfo[j][2] * SScalerVal * 11.25;

		int16_t trigAng = (int16_t)(4095.5f*(determiningTrigAngle(motorInfo[j])/M_PI));

		int16_t tempAngle = trigAng+forwardsID[j];
		if (tempAngle > 8191) {
			tempAngle = tempAngle-8191;
		} else if (tempAngle < 0) {
			tempAngle = tempAngle+8191;
		}
		motorInfo[j][3] = tempAngle;
	}

	// Drive Motor

	/*
	 * This function outputs the power to the wheels.
	 * wheelRotation fines the optimal direction to rotate to
	 */

	int16_t allMotors[8] = {0, 0, 0, 0, 0, 0, 0, 0};

	for (int8_t l = 0; l < 4; l++) {
		allMotors[l] = PD(GM6020, &wheelPrev[l], wheelRotation (getRotorPosition(Bus1, GM6020, l+1), motorInfo[l][3]), 100, 75);
		allMotors[l+4] = calcRPM_PID(Bus1, M3508, l+1, motorInfo[l][2], test);
	}

	AllCheShit2(allMotors);

	/*
	for (int8_t k = 0; k < 4; k++) {
		CAN_setMotorCtrlVal(Bus1, GM6020, k+1, PD(GM6020, &wheelPrev[k], wheelRotation (getRotorPosition(Bus1, GM6020, k+1), motorInfo[k][3]), 100, 75));
		if (motorInfo[k][4] == 1) {
			setMotorRPM(Bus1, M3508, k+1, -1*motorInfo[k][2], test);
		} else {
			setMotorRPM(Bus1, M3508, k+1, motorInfo[k][2], test);
		}
	}
	*/
}
