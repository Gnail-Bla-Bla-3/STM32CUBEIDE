
RMTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d994  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800db28  0800db28  0001db28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfa4  0800dfa4  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800dfa4  0800dfa4  0001dfa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dfac  0800dfac  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfac  0800dfac  0001dfac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dfb0  0800dfb0  0001dfb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800dfb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020200  2**0
                  CONTENTS
 10 .bss          00005468  20000200  20000200  00020200  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005668  20005668  00020200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020e24  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004349  00000000  00000000  00041054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a58  00000000  00000000  000453a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018d8  00000000  00000000  00046df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ce0  00000000  00000000  000486d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cf8e  00000000  00000000  0006d3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dccd2  00000000  00000000  0008a33e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00167010  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000080dc  00000000  00000000  00167060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800db0c 	.word	0x0800db0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800db0c 	.word	0x0800db0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <HAL_CAN_RxFifo0MsgPendingCallback>:
/**
  * @brief          reading motor feedback from CAN FIFO
  * @param[in]      pointer to CAN handle
  * @retval         none
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	; 0x30
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	f107 0214 	add.w	r2, r7, #20
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f002 fffd 	bl	8003ebe <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000eca:	f080 80d9 	bcs.w	8001080 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
 8000ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ed2:	d807      	bhi.n	8000ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 8000ed4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8000ed8:	d066      	beq.n	8000fa8 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
 8000eda:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 8000ede:	f000 80a4 	beq.w	800102a <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
        		get_b2b_gyro_feedback(&b2bGyro, rx_data);                             // add back numbering code for extra CAN input lines
        	    break;
        	}
        }
        default: {
            break;
 8000ee2:	e0cd      	b.n	8001080 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
            i = rx_header.StdId - CAN_G1M1_ID;                             // get motor id by taking the difference between the first motor's ID (0 indexing) and the current motor's ID
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b6a      	ldr	r3, [pc, #424]	; (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000eee:	701a      	strb	r2, [r3, #0]
            get_motor_feedback(&motor_feedback[i], rx_data);
 8000ef0:	4b69      	ldr	r3, [pc, #420]	; (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4a69      	ldr	r2, [pc, #420]	; (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000ef8:	460b      	mov	r3, r1
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	881a      	ldrh	r2, [r3, #0]
 8000f04:	4b64      	ldr	r3, [pc, #400]	; (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	b210      	sxth	r0, r2
 8000f0c:	4a63      	ldr	r2, [pc, #396]	; (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000f0e:	460b      	mov	r3, r1
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	4413      	add	r3, r2
 8000f18:	3308      	adds	r3, #8
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	801a      	strh	r2, [r3, #0]
 8000f1e:	7b3b      	ldrb	r3, [r7, #12]
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	b21a      	sxth	r2, r3
 8000f24:	7b7b      	ldrb	r3, [r7, #13]
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b21a      	sxth	r2, r3
 8000f2c:	4b5a      	ldr	r3, [pc, #360]	; (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	b290      	uxth	r0, r2
 8000f34:	4a59      	ldr	r2, [pc, #356]	; (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000f36:	460b      	mov	r3, r1
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	4602      	mov	r2, r0
 8000f42:	801a      	strh	r2, [r3, #0]
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4952      	ldr	r1, [pc, #328]	; (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000f50:	7809      	ldrb	r1, [r1, #0]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b218      	sxth	r0, r3
 8000f56:	4a51      	ldr	r2, [pc, #324]	; (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000f58:	460b      	mov	r3, r1
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4413      	add	r3, r2
 8000f62:	3302      	adds	r3, #2
 8000f64:	4602      	mov	r2, r0
 8000f66:	801a      	strh	r2, [r3, #0]
 8000f68:	7c3b      	ldrb	r3, [r7, #16]
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	7c7b      	ldrb	r3, [r7, #17]
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	4949      	ldr	r1, [pc, #292]	; (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000f74:	7809      	ldrb	r1, [r1, #0]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b218      	sxth	r0, r3
 8000f7a:	4a48      	ldr	r2, [pc, #288]	; (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	440b      	add	r3, r1
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	3304      	adds	r3, #4
 8000f88:	4602      	mov	r2, r0
 8000f8a:	801a      	strh	r2, [r3, #0]
 8000f8c:	4b42      	ldr	r3, [pc, #264]	; (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	7cb8      	ldrb	r0, [r7, #18]
 8000f94:	4a41      	ldr	r2, [pc, #260]	; (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000f96:	460b      	mov	r3, r1
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	3306      	adds	r3, #6
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	701a      	strb	r2, [r3, #0]
            break;
 8000fa6:	e072      	b.n	800108e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        	if(CAN_b2b_A_ID == boardID) {
 8000fa8:	4b3d      	ldr	r3, [pc, #244]	; (80010a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	f240 1201 	movw	r2, #257	; 0x101
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d067      	beq.n	8001084 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>
        		get_b2b_motorCtrl_feedback(&b2bMotorCtrl, rx_data);                             // add back numbering code for extra CAN input lines
 8000fb4:	7b3b      	ldrb	r3, [r7, #12]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	7b7b      	ldrb	r3, [r7, #13]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000fc4:	801a      	strh	r2, [r3, #0]
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	4b33      	ldr	r3, [pc, #204]	; (80010a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000fd6:	805a      	strh	r2, [r3, #2]
 8000fd8:	7c3b      	ldrb	r3, [r7, #16]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	7c7b      	ldrb	r3, [r7, #17]
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000fe8:	809a      	strh	r2, [r3, #4]
 8000fea:	7cbb      	ldrb	r3, [r7, #18]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	7cfb      	ldrb	r3, [r7, #19]
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000ffa:	80da      	strh	r2, [r3, #6]
        		if (b2bMotorCtrl.motor1_Ctrl >= 3376) {
 8000ffc:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001002:	f5b3 6f53 	cmp.w	r3, #3376	; 0xd30
 8001006:	db04      	blt.n	8001012 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
        			b2bMotorCtrl.motor1_Ctrl = 3376;
 8001008:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 800100a:	f44f 6253 	mov.w	r2, #3376	; 0xd30
 800100e:	801a      	strh	r2, [r3, #0]
        		break;
 8001010:	e03a      	b.n	8001088 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        		} else if (b2bMotorCtrl.motor1_Ctrl <= 2132) {
 8001012:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8001014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001018:	f640 0254 	movw	r2, #2132	; 0x854
 800101c:	4293      	cmp	r3, r2
 800101e:	dc33      	bgt.n	8001088 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        			b2bMotorCtrl.motor1_Ctrl = 2132;
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8001022:	f640 0254 	movw	r2, #2132	; 0x854
 8001026:	801a      	strh	r2, [r3, #0]
        		break;
 8001028:	e02e      	b.n	8001088 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        	if(CAN_b2b_B_ID == boardID) {
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	f240 1211 	movw	r2, #273	; 0x111
 8001032:	4293      	cmp	r3, r2
 8001034:	d02a      	beq.n	800108c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>
        		get_b2b_gyro_feedback(&b2bGyro, rx_data);                             // add back numbering code for extra CAN input lines
 8001036:	7b3b      	ldrb	r3, [r7, #12]
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	b21a      	sxth	r2, r3
 800103c:	7b7b      	ldrb	r3, [r7, #13]
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21a      	sxth	r2, r3
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8001046:	801a      	strh	r2, [r3, #0]
 8001048:	7bbb      	ldrb	r3, [r7, #14]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	b21b      	sxth	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b21a      	sxth	r2, r3
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8001058:	805a      	strh	r2, [r3, #2]
 800105a:	7c3b      	ldrb	r3, [r7, #16]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	7c7b      	ldrb	r3, [r7, #17]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21a      	sxth	r2, r3
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 800106a:	809a      	strh	r2, [r3, #4]
 800106c:	7cbb      	ldrb	r3, [r7, #18]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21a      	sxth	r2, r3
 8001072:	7cfb      	ldrb	r3, [r7, #19]
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21a      	sxth	r2, r3
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 800107c:	80da      	strh	r2, [r3, #6]
        	    break;
 800107e:	e006      	b.n	800108e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
            break;
 8001080:	bf00      	nop
 8001082:	e004      	b.n	800108e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8001084:	bf00      	nop
 8001086:	e002      	b.n	800108e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8001088:	bf00      	nop
 800108a:	e000      	b.n	800108e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 800108c:	bf00      	nop
        }
    }
}
 800108e:	bf00      	nop
 8001090:	3730      	adds	r7, #48	; 0x30
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000454 	.word	0x20000454
 800109c:	20000234 	.word	0x20000234
 80010a0:	20000018 	.word	0x20000018
 80010a4:	200002a4 	.word	0x200002a4
 80010a8:	200002ac 	.word	0x200002ac

080010ac <CAN1_cmd_b2b>:
/**
  * @brief          sends board to board (b2b) communication data
  * @param[in]      yaw: (0x205) 6020 motor control current, range [-30000,30000] 
  * @retval         none
  */
void CAN1_cmd_b2b(can_msg_id_e canID, int16_t data1, int16_t data2, int16_t data3, int16_t data4) {
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4604      	mov	r4, r0
 80010b4:	4608      	mov	r0, r1
 80010b6:	4611      	mov	r1, r2
 80010b8:	461a      	mov	r2, r3
 80010ba:	4623      	mov	r3, r4
 80010bc:	80fb      	strh	r3, [r7, #6]
 80010be:	4603      	mov	r3, r0
 80010c0:	80bb      	strh	r3, [r7, #4]
 80010c2:	460b      	mov	r3, r1
 80010c4:	807b      	strh	r3, [r7, #2]
 80010c6:	4613      	mov	r3, r2
 80010c8:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    b2b_tx_message.StdId = canID;
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	4a20      	ldr	r2, [pc, #128]	; (8001150 <CAN1_cmd_b2b+0xa4>)
 80010ce:	6013      	str	r3, [r2, #0]
    b2b_tx_message.IDE = CAN_ID_STD;
 80010d0:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <CAN1_cmd_b2b+0xa4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
    b2b_tx_message.RTR = CAN_RTR_DATA;
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <CAN1_cmd_b2b+0xa4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
    b2b_tx_message.DLC = 0x08;
 80010dc:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <CAN1_cmd_b2b+0xa4>)
 80010de:	2208      	movs	r2, #8
 80010e0:	611a      	str	r2, [r3, #16]
    b2b_can_send_data[0] = (data1 >> 8);
 80010e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010e6:	121b      	asrs	r3, r3, #8
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <CAN1_cmd_b2b+0xa8>)
 80010ee:	701a      	strb	r2, [r3, #0]
    b2b_can_send_data[1] = data1;
 80010f0:	88bb      	ldrh	r3, [r7, #4]
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <CAN1_cmd_b2b+0xa8>)
 80010f6:	705a      	strb	r2, [r3, #1]
    b2b_can_send_data[2] = (data2 >> 8);
 80010f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010fc:	121b      	asrs	r3, r3, #8
 80010fe:	b21b      	sxth	r3, r3
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <CAN1_cmd_b2b+0xa8>)
 8001104:	709a      	strb	r2, [r3, #2]
    b2b_can_send_data[3] = data2;
 8001106:	887b      	ldrh	r3, [r7, #2]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <CAN1_cmd_b2b+0xa8>)
 800110c:	70da      	strb	r2, [r3, #3]
    b2b_can_send_data[4] = (data3 >> 8);
 800110e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001112:	121b      	asrs	r3, r3, #8
 8001114:	b21b      	sxth	r3, r3
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <CAN1_cmd_b2b+0xa8>)
 800111a:	711a      	strb	r2, [r3, #4]
    b2b_can_send_data[5] = data3;
 800111c:	883b      	ldrh	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <CAN1_cmd_b2b+0xa8>)
 8001122:	715a      	strb	r2, [r3, #5]
    b2b_can_send_data[6] = (data4 >> 8);
 8001124:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001128:	121b      	asrs	r3, r3, #8
 800112a:	b21b      	sxth	r3, r3
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <CAN1_cmd_b2b+0xa8>)
 8001130:	719a      	strb	r2, [r3, #6]
    b2b_can_send_data[7] = data4;
 8001132:	8c3b      	ldrh	r3, [r7, #32]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b07      	ldr	r3, [pc, #28]	; (8001154 <CAN1_cmd_b2b+0xa8>)
 8001138:	71da      	strb	r2, [r3, #7]
    HAL_CAN_AddTxMessage(&CAN_1, &b2b_tx_message, b2b_can_send_data, &send_mail_box);
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <CAN1_cmd_b2b+0xa8>)
 8001140:	4903      	ldr	r1, [pc, #12]	; (8001150 <CAN1_cmd_b2b+0xa4>)
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <CAN1_cmd_b2b+0xac>)
 8001144:	f002 fde0 	bl	8003d08 <HAL_CAN_AddTxMessage>
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	bd90      	pop	{r4, r7, pc}
 8001150:	20000414 	.word	0x20000414
 8001154:	2000042c 	.word	0x2000042c
 8001158:	20000790 	.word	0x20000790

0800115c <CAN2_cmd_motors>:
/**
  * @brief          send control information through CAN bus 2
  * @param[in]      canID of the target motor's group and the motor current values for all motors in that group
  * @retval         none
  */
void CAN2_cmd_motors(can_msg_id_e canID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	4604      	mov	r4, r0
 8001164:	4608      	mov	r0, r1
 8001166:	4611      	mov	r1, r2
 8001168:	461a      	mov	r2, r3
 800116a:	4623      	mov	r3, r4
 800116c:	80fb      	strh	r3, [r7, #6]
 800116e:	4603      	mov	r3, r0
 8001170:	80bb      	strh	r3, [r7, #4]
 8001172:	460b      	mov	r3, r1
 8001174:	807b      	strh	r3, [r7, #2]
 8001176:	4613      	mov	r3, r2
 8001178:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    motors_tx_message.StdId = canID;
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	4a20      	ldr	r2, [pc, #128]	; (8001200 <CAN2_cmd_motors+0xa4>)
 800117e:	6013      	str	r3, [r2, #0]
    motors_tx_message.IDE = CAN_ID_STD;
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <CAN2_cmd_motors+0xa4>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
    motors_tx_message.RTR = CAN_RTR_DATA;
 8001186:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <CAN2_cmd_motors+0xa4>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
    motors_tx_message.DLC = 0x08;
 800118c:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <CAN2_cmd_motors+0xa4>)
 800118e:	2208      	movs	r2, #8
 8001190:	611a      	str	r2, [r3, #16]
    motors_can_send_data[0] = m1 >> 8;
 8001192:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001196:	121b      	asrs	r3, r3, #8
 8001198:	b21b      	sxth	r3, r3
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <CAN2_cmd_motors+0xa8>)
 800119e:	701a      	strb	r2, [r3, #0]
    motors_can_send_data[1] = m1;
 80011a0:	88bb      	ldrh	r3, [r7, #4]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <CAN2_cmd_motors+0xa8>)
 80011a6:	705a      	strb	r2, [r3, #1]
    motors_can_send_data[2] = m2 >> 8;
 80011a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011ac:	121b      	asrs	r3, r3, #8
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <CAN2_cmd_motors+0xa8>)
 80011b4:	709a      	strb	r2, [r3, #2]
    motors_can_send_data[3] = m2;
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <CAN2_cmd_motors+0xa8>)
 80011bc:	70da      	strb	r2, [r3, #3]
    motors_can_send_data[4] = m3 >> 8;
 80011be:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011c2:	121b      	asrs	r3, r3, #8
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <CAN2_cmd_motors+0xa8>)
 80011ca:	711a      	strb	r2, [r3, #4]
    motors_can_send_data[5] = m3;
 80011cc:	883b      	ldrh	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <CAN2_cmd_motors+0xa8>)
 80011d2:	715a      	strb	r2, [r3, #5]
    motors_can_send_data[6] = m4 >> 8;
 80011d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80011d8:	121b      	asrs	r3, r3, #8
 80011da:	b21b      	sxth	r3, r3
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <CAN2_cmd_motors+0xa8>)
 80011e0:	719a      	strb	r2, [r3, #6]
    motors_can_send_data[7] = m4;
 80011e2:	8c3b      	ldrh	r3, [r7, #32]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <CAN2_cmd_motors+0xa8>)
 80011e8:	71da      	strb	r2, [r3, #7]
    HAL_CAN_AddTxMessage(&CAN_2, &motors_tx_message, motors_can_send_data, &send_mail_box);
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <CAN2_cmd_motors+0xa8>)
 80011f0:	4903      	ldr	r1, [pc, #12]	; (8001200 <CAN2_cmd_motors+0xa4>)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <CAN2_cmd_motors+0xac>)
 80011f4:	f002 fd88 	bl	8003d08 <HAL_CAN_AddTxMessage>
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd90      	pop	{r4, r7, pc}
 8001200:	20000434 	.word	0x20000434
 8001204:	2000044c 	.word	0x2000044c
 8001208:	200007b8 	.word	0x200007b8

0800120c <set_M3508_current>:
/**
  * @brief          simplification function to make communication with the motor not require the current data for all 4 motors
  * @param[in]      motor ID (1~11) and its target current (-16384 ~ 16384)
  * @retval         none
  */
void set_M3508_current(int8_t motorID, int16_t setCurrent) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af02      	add	r7, sp, #8
 8001212:	4603      	mov	r3, r0
 8001214:	460a      	mov	r2, r1
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	4613      	mov	r3, r2
 800121a:	80bb      	strh	r3, [r7, #4]
	motorCtrlVal[motorID-1] = setCurrent;
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	3b01      	subs	r3, #1
 8001222:	491c      	ldr	r1, [pc, #112]	; (8001294 <set_M3508_current+0x88>)
 8001224:	88ba      	ldrh	r2, [r7, #4]
 8001226:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	switch(motorID) {
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	2b04      	cmp	r3, #4
 8001230:	dc02      	bgt.n	8001238 <set_M3508_current+0x2c>
 8001232:	2b00      	cmp	r3, #0
 8001234:	dc04      	bgt.n	8001240 <set_M3508_current+0x34>
		case (7):
		case (8): {             // is group 2?
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
		}
		default: {
	        break;
 8001236:	e027      	b.n	8001288 <set_M3508_current+0x7c>
 8001238:	3b05      	subs	r3, #5
	switch(motorID) {
 800123a:	2b03      	cmp	r3, #3
 800123c:	d824      	bhi.n	8001288 <set_M3508_current+0x7c>
 800123e:	e011      	b.n	8001264 <set_M3508_current+0x58>
			CAN2_cmd_motors(CAN_GROUP1_ID, motorCtrlVal[0], motorCtrlVal[1], motorCtrlVal[2], motorCtrlVal[3]);
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <set_M3508_current+0x88>)
 8001242:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <set_M3508_current+0x88>)
 8001248:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <set_M3508_current+0x88>)
 800124e:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <set_M3508_current+0x88>)
 8001254:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	4603      	mov	r3, r0
 800125c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001260:	f7ff ff7c 	bl	800115c <CAN2_cmd_motors>
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <set_M3508_current+0x88>)
 8001266:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <set_M3508_current+0x88>)
 800126c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <set_M3508_current+0x88>)
 8001272:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <set_M3508_current+0x88>)
 8001278:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	4603      	mov	r3, r0
 8001280:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001284:	f7ff ff6a 	bl	800115c <CAN2_cmd_motors>
	        break;
 8001288:	bf00      	nop
	    }
	}
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000021c 	.word	0x2000021c

08001298 <set_GM6020_voltage>:
/**
  * @brief          similar to the above function, but specifically for the GM6020's voltage control mode
  * @param[in]      motor ID (5~11) and its target voltage (-25000 ~ 25000)
  * @retval         none
  */
void set_GM6020_voltage(int8_t motorID, int16_t setVoltage) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af02      	add	r7, sp, #8
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	80bb      	strh	r3, [r7, #4]
	motorCtrlVal[motorID-1] = setVoltage;      // -1 for 0 indexing and -4 for group 1, which cannot contain GM6020s
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	491a      	ldr	r1, [pc, #104]	; (8001318 <set_GM6020_voltage+0x80>)
 80012b0:	88ba      	ldrh	r2, [r7, #4]
 80012b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	switch(motorID) {
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	dc02      	bgt.n	80012c4 <set_GM6020_voltage+0x2c>
 80012be:	2b05      	cmp	r3, #5
 80012c0:	da04      	bge.n	80012cc <set_GM6020_voltage+0x34>
		case (10):
		case (11): {          // is group 3?
			CAN2_cmd_motors(CAN_GROUP3_ID, motorCtrlVal[8], motorCtrlVal[9], motorCtrlVal[10], 0);
		}
		default: {
	        break;
 80012c2:	e024      	b.n	800130e <set_GM6020_voltage+0x76>
 80012c4:	3b09      	subs	r3, #9
	switch(motorID) {
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d821      	bhi.n	800130e <set_GM6020_voltage+0x76>
 80012ca:	e011      	b.n	80012f0 <set_GM6020_voltage+0x58>
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <set_GM6020_voltage+0x80>)
 80012ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <set_GM6020_voltage+0x80>)
 80012d4:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <set_GM6020_voltage+0x80>)
 80012da:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <set_GM6020_voltage+0x80>)
 80012e0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	4603      	mov	r3, r0
 80012e8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80012ec:	f7ff ff36 	bl	800115c <CAN2_cmd_motors>
			CAN2_cmd_motors(CAN_GROUP3_ID, motorCtrlVal[8], motorCtrlVal[9], motorCtrlVal[10], 0);
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <set_GM6020_voltage+0x80>)
 80012f2:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <set_GM6020_voltage+0x80>)
 80012f8:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <set_GM6020_voltage+0x80>)
 80012fe:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001302:	2000      	movs	r0, #0
 8001304:	9000      	str	r0, [sp, #0]
 8001306:	f240 20ff 	movw	r0, #767	; 0x2ff
 800130a:	f7ff ff27 	bl	800115c <CAN2_cmd_motors>
	        break;
 800130e:	bf00      	nop
	    }
	}
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000021c 	.word	0x2000021c

0800131c <calc_current2RPM_PID>:
	        break;
	    }
	}
}

int32_t calc_current2RPM_PID(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 800131c:	b490      	push	{r4, r7}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	460a      	mov	r2, r1
 8001326:	eef0 6a40 	vmov.f32	s13, s0
 800132a:	eeb0 7a60 	vmov.f32	s14, s1
 800132e:	eef0 7a41 	vmov.f32	s15, s2
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	4613      	mov	r3, r2
 8001336:	81bb      	strh	r3, [r7, #12]
 8001338:	edc7 6a00 	vstr	s13, [r7]
 800133c:	ed87 7a01 	vstr	s14, [r7, #4]
 8001340:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_current_val = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	3b01      	subs	r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	74fb      	strb	r3, [r7, #19]
	iRPM[ID] += RPMtarget - motor_feedback[ID].speed_rpm;      // add to integral term
 8001350:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001354:	4a4a      	ldr	r2, [pc, #296]	; (8001480 <calc_current2RPM_PID+0x164>)
 8001356:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800135a:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 800135e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001362:	4c48      	ldr	r4, [pc, #288]	; (8001484 <calc_current2RPM_PID+0x168>)
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4423      	add	r3, r4
 800136e:	3302      	adds	r3, #2
 8001370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001374:	1ac2      	subs	r2, r0, r3
 8001376:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800137a:	440a      	add	r2, r1
 800137c:	4940      	ldr	r1, [pc, #256]	; (8001480 <calc_current2RPM_PID+0x164>)
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dRPM[ID] = lastRPM[ID] - motor_feedback[ID].speed_rpm;       // update derivative term
 8001382:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001386:	4a40      	ldr	r2, [pc, #256]	; (8001488 <calc_current2RPM_PID+0x16c>)
 8001388:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800138c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001390:	483c      	ldr	r0, [pc, #240]	; (8001484 <calc_current2RPM_PID+0x168>)
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	4403      	add	r3, r0
 800139c:	3302      	adds	r3, #2
 800139e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a2:	461a      	mov	r2, r3
 80013a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80013a8:	1a8a      	subs	r2, r1, r2
 80013aa:	4938      	ldr	r1, [pc, #224]	; (800148c <calc_current2RPM_PID+0x170>)
 80013ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errRPM[ID] = RPMtarget - motor_feedback[ID].speed_rpm;     // update proportional term
 80013b0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80013b4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80013b8:	4832      	ldr	r0, [pc, #200]	; (8001484 <calc_current2RPM_PID+0x168>)
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4403      	add	r3, r0
 80013c4:	3302      	adds	r3, #2
 80013c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ca:	461a      	mov	r2, r3
 80013cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80013d0:	1a8a      	subs	r2, r1, r2
 80013d2:	492f      	ldr	r1, [pc, #188]	; (8001490 <calc_current2RPM_PID+0x174>)
 80013d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	lastRPM[ID] = motor_feedback[ID].speed_rpm;
 80013d8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80013dc:	4929      	ldr	r1, [pc, #164]	; (8001484 <calc_current2RPM_PID+0x168>)
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	440b      	add	r3, r1
 80013e8:	3302      	adds	r3, #2
 80013ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4a24      	ldr	r2, [pc, #144]	; (8001488 <calc_current2RPM_PID+0x16c>)
 80013f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return_current_val = (preset.kP * errRPM[ID]) + (preset.kI * iRPM[ID]) + (preset.kD * dRPM[ID]);
 80013fa:	ed97 7a00 	vldr	s14, [r7]
 80013fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001402:	4a23      	ldr	r2, [pc, #140]	; (8001490 <calc_current2RPM_PID+0x174>)
 8001404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001410:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001414:	edd7 6a01 	vldr	s13, [r7, #4]
 8001418:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800141c:	4a18      	ldr	r2, [pc, #96]	; (8001480 <calc_current2RPM_PID+0x164>)
 800141e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001432:	edd7 6a02 	vldr	s13, [r7, #8]
 8001436:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800143a:	4a14      	ldr	r2, [pc, #80]	; (800148c <calc_current2RPM_PID+0x170>)
 800143c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800144c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001454:	ee17 3a90 	vmov	r3, s15
 8001458:	617b      	str	r3, [r7, #20]
	//apply power limit
	if (return_current_val > 16384) {return_current_val = 16384;}
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001460:	dd02      	ble.n	8001468 <calc_current2RPM_PID+0x14c>
 8001462:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001466:	617b      	str	r3, [r7, #20]
	if (return_current_val < -16384) {return_current_val = -16384;}
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 800146e:	da01      	bge.n	8001474 <calc_current2RPM_PID+0x158>
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <calc_current2RPM_PID+0x178>)
 8001472:	617b      	str	r3, [r7, #20]
	return return_current_val;
 8001474:	697b      	ldr	r3, [r7, #20]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bc90      	pop	{r4, r7}
 800147e:	4770      	bx	lr
 8001480:	2000030c 	.word	0x2000030c
 8001484:	20000234 	.word	0x20000234
 8001488:	200002b4 	.word	0x200002b4
 800148c:	200002e0 	.word	0x200002e0
 8001490:	20000338 	.word	0x20000338
 8001494:	ffffc000 	.word	0xffffc000

08001498 <calc_voltage2Position_PID>:
	if (return_current_val > 16384) {return_current_val = 16384;}
	if (return_current_val < -16384) {return_current_val = -16384;}
	return return_current_val;
}

int32_t calc_voltage2Position_PID(int8_t motorID, int16_t position, PID_preset_t preset) {
 8001498:	b490      	push	{r4, r7}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	460a      	mov	r2, r1
 80014a2:	eef0 6a40 	vmov.f32	s13, s0
 80014a6:	eeb0 7a60 	vmov.f32	s14, s1
 80014aa:	eef0 7a41 	vmov.f32	s15, s2
 80014ae:	73fb      	strb	r3, [r7, #15]
 80014b0:	4613      	mov	r3, r2
 80014b2:	81bb      	strh	r3, [r7, #12]
 80014b4:	edc7 6a00 	vstr	s13, [r7]
 80014b8:	ed87 7a01 	vstr	s14, [r7, #4]
 80014bc:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_voltage_val = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	74fb      	strb	r3, [r7, #19]
	iPosition[ID] += position - motor_feedback[ID].motor_position;      // add to integral term
 80014cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80014d0:	4a47      	ldr	r2, [pc, #284]	; (80015f0 <calc_voltage2Position_PID+0x158>)
 80014d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80014d6:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 80014da:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80014de:	4c45      	ldr	r4, [pc, #276]	; (80015f4 <calc_voltage2Position_PID+0x15c>)
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4423      	add	r3, r4
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	1ac2      	subs	r2, r0, r3
 80014ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80014f2:	440a      	add	r2, r1
 80014f4:	493e      	ldr	r1, [pc, #248]	; (80015f0 <calc_voltage2Position_PID+0x158>)
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dPosition[ID] = lastPosition[ID] - motor_feedback[ID].motor_position;       // update derivative term
 80014fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80014fe:	4a3e      	ldr	r2, [pc, #248]	; (80015f8 <calc_voltage2Position_PID+0x160>)
 8001500:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001504:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001508:	483a      	ldr	r0, [pc, #232]	; (80015f4 <calc_voltage2Position_PID+0x15c>)
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4403      	add	r3, r0
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800151c:	1a8a      	subs	r2, r1, r2
 800151e:	4937      	ldr	r1, [pc, #220]	; (80015fc <calc_voltage2Position_PID+0x164>)
 8001520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errPosition[ID] = position - motor_feedback[ID].motor_position;     // update proportional term
 8001524:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001528:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800152c:	4831      	ldr	r0, [pc, #196]	; (80015f4 <calc_voltage2Position_PID+0x15c>)
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4403      	add	r3, r0
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001540:	1a8a      	subs	r2, r1, r2
 8001542:	492f      	ldr	r1, [pc, #188]	; (8001600 <calc_voltage2Position_PID+0x168>)
 8001544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	lastPosition[ID] = motor_feedback[ID].motor_position;
 8001548:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800154c:	4929      	ldr	r1, [pc, #164]	; (80015f4 <calc_voltage2Position_PID+0x15c>)
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	440b      	add	r3, r1
 8001558:	881a      	ldrh	r2, [r3, #0]
 800155a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800155e:	4611      	mov	r1, r2
 8001560:	4a25      	ldr	r2, [pc, #148]	; (80015f8 <calc_voltage2Position_PID+0x160>)
 8001562:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return_voltage_val = (preset.kP * errPosition[ID]) + (preset.kI * iPosition[ID]) + (preset.kD * dPosition[ID]);
 8001566:	ed97 7a00 	vldr	s14, [r7]
 800156a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800156e:	4a24      	ldr	r2, [pc, #144]	; (8001600 <calc_voltage2Position_PID+0x168>)
 8001570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001574:	ee07 3a90 	vmov	s15, r3
 8001578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001580:	edd7 6a01 	vldr	s13, [r7, #4]
 8001584:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001588:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <calc_voltage2Position_PID+0x158>)
 800158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800159e:	edd7 6a02 	vldr	s13, [r7, #8]
 80015a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80015a6:	4a15      	ldr	r2, [pc, #84]	; (80015fc <calc_voltage2Position_PID+0x164>)
 80015a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015c0:	ee17 3a90 	vmov	r3, s15
 80015c4:	617b      	str	r3, [r7, #20]
	//apply power limit
	if (return_voltage_val > 25000) {return_voltage_val = 25000;}
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80015cc:	4293      	cmp	r3, r2
 80015ce:	dd02      	ble.n	80015d6 <calc_voltage2Position_PID+0x13e>
 80015d0:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80015d4:	617b      	str	r3, [r7, #20]
	if (return_voltage_val < -25000) {return_voltage_val = -25000;}
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <calc_voltage2Position_PID+0x16c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	da01      	bge.n	80015e2 <calc_voltage2Position_PID+0x14a>
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <calc_voltage2Position_PID+0x16c>)
 80015e0:	617b      	str	r3, [r7, #20]
	return return_voltage_val;
 80015e2:	697b      	ldr	r3, [r7, #20]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc90      	pop	{r4, r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	200003bc 	.word	0x200003bc
 80015f4:	20000234 	.word	0x20000234
 80015f8:	20000364 	.word	0x20000364
 80015fc:	20000390 	.word	0x20000390
 8001600:	200003e8 	.word	0x200003e8
 8001604:	ffff9e58 	.word	0xffff9e58

08001608 <setM3508RPM>:

// DO NOT use current ctrl and voltage ctrl concurrently for GM6020

void setM3508RPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	460a      	mov	r2, r1
 8001612:	eef0 6a40 	vmov.f32	s13, s0
 8001616:	eeb0 7a60 	vmov.f32	s14, s1
 800161a:	eef0 7a41 	vmov.f32	s15, s2
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	4613      	mov	r3, r2
 8001622:	81bb      	strh	r3, [r7, #12]
 8001624:	edc7 6a00 	vstr	s13, [r7]
 8001628:	ed87 7a01 	vstr	s14, [r7, #4]
 800162c:	edc7 7a02 	vstr	s15, [r7, #8]
	set_M3508_current(motorID, calc_current2RPM_PID(motorID, RPMtarget, preset));
 8001630:	edd7 6a00 	vldr	s13, [r7]
 8001634:	ed97 7a01 	vldr	s14, [r7, #4]
 8001638:	edd7 7a02 	vldr	s15, [r7, #8]
 800163c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001644:	eeb0 0a66 	vmov.f32	s0, s13
 8001648:	eef0 0a47 	vmov.f32	s1, s14
 800164c:	eeb0 1a67 	vmov.f32	s2, s15
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fe62 	bl	800131c <calc_current2RPM_PID>
 8001658:	4603      	mov	r3, r0
 800165a:	b21a      	sxth	r2, r3
 800165c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001660:	4611      	mov	r1, r2
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fdd2 	bl	800120c <set_M3508_current>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <setGM6020voltagePosition>:
void setGM6020currentPosition(int8_t motorID, int16_t position, PID_preset_t preset) {
	set_GM6020_current(motorID, calc_current2Position_PID(motorID, position, preset));

}

void setGM6020voltagePosition(int8_t motorID, int16_t position, PID_preset_t preset) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	460a      	mov	r2, r1
 800167a:	eef0 6a40 	vmov.f32	s13, s0
 800167e:	eeb0 7a60 	vmov.f32	s14, s1
 8001682:	eef0 7a41 	vmov.f32	s15, s2
 8001686:	73fb      	strb	r3, [r7, #15]
 8001688:	4613      	mov	r3, r2
 800168a:	81bb      	strh	r3, [r7, #12]
 800168c:	edc7 6a00 	vstr	s13, [r7]
 8001690:	ed87 7a01 	vstr	s14, [r7, #4]
 8001694:	edc7 7a02 	vstr	s15, [r7, #8]
	set_GM6020_voltage(motorID, calc_voltage2Position_PID(motorID, position, preset));
 8001698:	edd7 6a00 	vldr	s13, [r7]
 800169c:	ed97 7a01 	vldr	s14, [r7, #4]
 80016a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80016a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80016a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ac:	eeb0 0a66 	vmov.f32	s0, s13
 80016b0:	eef0 0a47 	vmov.f32	s1, s14
 80016b4:	eeb0 1a67 	vmov.f32	s2, s15
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff feec 	bl	8001498 <calc_voltage2Position_PID>
 80016c0:	4603      	mov	r3, r0
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fde4 	bl	8001298 <set_GM6020_voltage>
}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <getMotorPosition>:

uint16_t getMotorPosition(int8_t motorID) {
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
	return motor_feedback[motorID-1].motor_position;
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	1e5a      	subs	r2, r3, #1
 80016e8:	4906      	ldr	r1, [pc, #24]	; (8001704 <getMotorPosition+0x2c>)
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	440b      	add	r3, r1
 80016f4:	881b      	ldrh	r3, [r3, #0]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000234 	.word	0x20000234

08001708 <sendB2bData>:

void setB2bID (can_msg_id_e canID) {
	boardID = canID;
}

void sendB2bData(can_msg_id_e canID, int16_t data1, int16_t data2, int16_t data3, int16_t data4) {
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b085      	sub	sp, #20
 800170c:	af02      	add	r7, sp, #8
 800170e:	4604      	mov	r4, r0
 8001710:	4608      	mov	r0, r1
 8001712:	4611      	mov	r1, r2
 8001714:	461a      	mov	r2, r3
 8001716:	4623      	mov	r3, r4
 8001718:	80fb      	strh	r3, [r7, #6]
 800171a:	4603      	mov	r3, r0
 800171c:	80bb      	strh	r3, [r7, #4]
 800171e:	460b      	mov	r3, r1
 8001720:	807b      	strh	r3, [r7, #2]
 8001722:	4613      	mov	r3, r2
 8001724:	803b      	strh	r3, [r7, #0]
	CAN1_cmd_b2b(canID, data1, data2, data3, data4);
 8001726:	f9b7 4000 	ldrsh.w	r4, [r7]
 800172a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800172e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001732:	88f8      	ldrh	r0, [r7, #6]
 8001734:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	4623      	mov	r3, r4
 800173c:	f7ff fcb6 	bl	80010ac <CAN1_cmd_b2b>
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bd90      	pop	{r4, r7, pc}

08001748 <usart_Init>:
referee_warning_t referee_warning;
dart_info_t dart_info;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 800174c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001750:	4905      	ldr	r1, [pc, #20]	; (8001768 <usart_Init+0x20>)
 8001752:	4806      	ldr	r0, [pc, #24]	; (800176c <usart_Init+0x24>)
 8001754:	f005 fb60 	bl	8006e18 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8001758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175c:	4904      	ldr	r1, [pc, #16]	; (8001770 <usart_Init+0x28>)
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <usart_Init+0x2c>)
 8001760:	f005 fb5a 	bl	8006e18 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000458 	.word	0x20000458
 800176c:	20000910 	.word	0x20000910
 8001770:	20000558 	.word	0x20000558
 8001774:	20000998 	.word	0x20000998

08001778 <usart_printf>:

void usart_printf(const char *fmt,...) {
 8001778:	b40f      	push	{r0, r1, r2, r3}
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	4a0c      	ldr	r2, [pc, #48]	; (80017b4 <usart_printf+0x3c>)
 8001784:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <usart_printf+0x3c>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68b9      	ldr	r1, [r7, #8]
 800178c:	480a      	ldr	r0, [pc, #40]	; (80017b8 <usart_printf+0x40>)
 800178e:	f00a f949 	bl	800ba24 <vsiprintf>
 8001792:	4603      	mov	r3, r0
 8001794:	b29a      	uxth	r2, r3
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <usart_printf+0x44>)
 8001798:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <usart_printf+0x44>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	4905      	ldr	r1, [pc, #20]	; (80017b8 <usart_printf+0x40>)
 80017a2:	4807      	ldr	r0, [pc, #28]	; (80017c0 <usart_printf+0x48>)
 80017a4:	f005 faba 	bl	8006d1c <HAL_UART_Transmit_DMA>
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017b0:	b004      	add	sp, #16
 80017b2:	4770      	bx	lr
 80017b4:	20000688 	.word	0x20000688
 80017b8:	2000068c 	.word	0x2000068c
 80017bc:	2000078c 	.word	0x2000078c
 80017c0:	20000910 	.word	0x20000910

080017c4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80017c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017c8:	b09f      	sub	sp, #124	; 0x7c
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	66f8      	str	r0, [r7, #108]	; 0x6c
 80017ce:	460b      	mov	r3, r1
 80017d0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	if (huart == &huart6) {
 80017d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80017d6:	4b81      	ldr	r3, [pc, #516]	; (80019dc <HAL_UARTEx_RxEventCallback+0x218>)
 80017d8:	429a      	cmp	r2, r3
 80017da:	f040 81c9 	bne.w	8001b70 <HAL_UARTEx_RxEventCallback+0x3ac>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 80017de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e2:	497f      	ldr	r1, [pc, #508]	; (80019e0 <HAL_UARTEx_RxEventCallback+0x21c>)
 80017e4:	487d      	ldr	r0, [pc, #500]	; (80019dc <HAL_UARTEx_RxEventCallback+0x218>)
 80017e6:	f005 fb17 	bl	8006e18 <HAL_UARTEx_ReceiveToIdle_DMA>
		uint16_t RxBuff16 = ((uint16_t) RxBuff_2[5] << 8) | RxBuff_2[6];
 80017ea:	4b7d      	ldr	r3, [pc, #500]	; (80019e0 <HAL_UARTEx_RxEventCallback+0x21c>)
 80017ec:	795b      	ldrb	r3, [r3, #5]
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	b21a      	sxth	r2, r3
 80017f2:	4b7b      	ldr	r3, [pc, #492]	; (80019e0 <HAL_UARTEx_RxEventCallback+0x21c>)
 80017f4:	799b      	ldrb	r3, [r3, #6]
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	4313      	orrs	r3, r2
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		//usart_printf("callback triggered at %d | %d | %d | %d || %d \r\n", RxBuff_2[0], RxBuff_2[1], RxBuff_2[2], RxBuff_2[3], RxBuff16);
		switch (RxBuff16) {
 8001800:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001804:	f240 2302 	movw	r3, #514	; 0x202
 8001808:	429a      	cmp	r2, r3
 800180a:	f000 8153 	beq.w	8001ab4 <HAL_UARTEx_RxEventCallback+0x2f0>
 800180e:	f240 2302 	movw	r3, #514	; 0x202
 8001812:	429a      	cmp	r2, r3
 8001814:	f300 81ae 	bgt.w	8001b74 <HAL_UARTEx_RxEventCallback+0x3b0>
 8001818:	f240 2301 	movw	r3, #513	; 0x201
 800181c:	429a      	cmp	r2, r3
 800181e:	f000 80e7 	beq.w	80019f0 <HAL_UARTEx_RxEventCallback+0x22c>
 8001822:	f240 2301 	movw	r3, #513	; 0x201
 8001826:	429a      	cmp	r2, r3
 8001828:	f300 81a4 	bgt.w	8001b74 <HAL_UARTEx_RxEventCallback+0x3b0>
 800182c:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
 8001830:	f280 81a0 	bge.w	8001b74 <HAL_UARTEx_RxEventCallback+0x3b0>
 8001834:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001838:	f280 80da 	bge.w	80019f0 <HAL_UARTEx_RxEventCallback+0x22c>
 800183c:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8001840:	f300 8198 	bgt.w	8001b74 <HAL_UARTEx_RxEventCallback+0x3b0>
 8001844:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001848:	f300 80d2 	bgt.w	80019f0 <HAL_UARTEx_RxEventCallback+0x22c>
 800184c:	2a03      	cmp	r2, #3
 800184e:	f000 80cf 	beq.w	80019f0 <HAL_UARTEx_RxEventCallback+0x22c>
 8001852:	2a03      	cmp	r2, #3
 8001854:	f300 818e 	bgt.w	8001b74 <HAL_UARTEx_RxEventCallback+0x3b0>
 8001858:	2a01      	cmp	r2, #1
 800185a:	d003      	beq.n	8001864 <HAL_UARTEx_RxEventCallback+0xa0>
 800185c:	2a02      	cmp	r2, #2
 800185e:	f000 80c3 	beq.w	80019e8 <HAL_UARTEx_RxEventCallback+0x224>
		    case MINIMAP_DATA_HEADER: {}
		    case CUSTOM_INFO_HEADER: {}

		    default: {
		    	//usart_printf("no match \r\n");
		        break;
 8001862:	e187      	b.n	8001b74 <HAL_UARTEx_RxEventCallback+0x3b0>
		    	game_status.game_type = RxBuff_2[7];
 8001864:	4b5e      	ldr	r3, [pc, #376]	; (80019e0 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001866:	79db      	ldrb	r3, [r3, #7]
 8001868:	4a5e      	ldr	r2, [pc, #376]	; (80019e4 <HAL_UARTEx_RxEventCallback+0x220>)
 800186a:	7013      	strb	r3, [r2, #0]
		    	game_status.game_progress = RxBuff_2[8];
 800186c:	4b5c      	ldr	r3, [pc, #368]	; (80019e0 <HAL_UARTEx_RxEventCallback+0x21c>)
 800186e:	7a1b      	ldrb	r3, [r3, #8]
 8001870:	4a5c      	ldr	r2, [pc, #368]	; (80019e4 <HAL_UARTEx_RxEventCallback+0x220>)
 8001872:	7053      	strb	r3, [r2, #1]
		    	game_status.stage_remain_time = ((uint16_t) RxBuff_2[9] << 8) | RxBuff_2[10];
 8001874:	4b5a      	ldr	r3, [pc, #360]	; (80019e0 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001876:	7a5b      	ldrb	r3, [r3, #9]
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	b21a      	sxth	r2, r3
 800187c:	4b58      	ldr	r3, [pc, #352]	; (80019e0 <HAL_UARTEx_RxEventCallback+0x21c>)
 800187e:	7a9b      	ldrb	r3, [r3, #10]
 8001880:	b21b      	sxth	r3, r3
 8001882:	4313      	orrs	r3, r2
 8001884:	b21b      	sxth	r3, r3
 8001886:	b29b      	uxth	r3, r3
 8001888:	4a56      	ldr	r2, [pc, #344]	; (80019e4 <HAL_UARTEx_RxEventCallback+0x220>)
 800188a:	8053      	strh	r3, [r2, #2]
		    		((uint64_t) RxBuff_2[11] << 56) |
 800188c:	4b54      	ldr	r3, [pc, #336]	; (80019e0 <HAL_UARTEx_RxEventCallback+0x21c>)
 800188e:	7adb      	ldrb	r3, [r3, #11]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2200      	movs	r2, #0
 8001894:	663b      	str	r3, [r7, #96]	; 0x60
 8001896:	667a      	str	r2, [r7, #100]	; 0x64
 8001898:	f04f 0000 	mov.w	r0, #0
 800189c:	f04f 0100 	mov.w	r1, #0
 80018a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018a2:	0619      	lsls	r1, r3, #24
 80018a4:	2000      	movs	r0, #0
		    		((uint64_t) RxBuff_2[12] << 48) |
 80018a6:	4b4e      	ldr	r3, [pc, #312]	; (80019e0 <HAL_UARTEx_RxEventCallback+0x21c>)
 80018a8:	7b1b      	ldrb	r3, [r3, #12]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2200      	movs	r2, #0
 80018ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80018b0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 80018bc:	0433      	lsls	r3, r6, #16
 80018be:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[11] << 56) |
 80018c0:	ea40 0402 	orr.w	r4, r0, r2
 80018c4:	ea41 0503 	orr.w	r5, r1, r3
		    		((uint64_t) RxBuff_2[13] << 40) |
 80018c8:	4b45      	ldr	r3, [pc, #276]	; (80019e0 <HAL_UARTEx_RxEventCallback+0x21c>)
 80018ca:	7b5b      	ldrb	r3, [r3, #13]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2200      	movs	r2, #0
 80018d0:	653b      	str	r3, [r7, #80]	; 0x50
 80018d2:	657a      	str	r2, [r7, #84]	; 0x54
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80018de:	020b      	lsls	r3, r1, #8
 80018e0:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[12] << 48) |
 80018e2:	ea44 0802 	orr.w	r8, r4, r2
 80018e6:	ea45 0903 	orr.w	r9, r5, r3
		    		((uint64_t) RxBuff_2[14] << 32) |
 80018ea:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <HAL_UARTEx_RxEventCallback+0x21c>)
 80018ec:	7b9b      	ldrb	r3, [r3, #14]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2200      	movs	r2, #0
 80018f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80018f4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001900:	000b      	movs	r3, r1
 8001902:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[13] << 40) |
 8001904:	ea48 0102 	orr.w	r1, r8, r2
 8001908:	6439      	str	r1, [r7, #64]	; 0x40
 800190a:	ea49 0303 	orr.w	r3, r9, r3
 800190e:	647b      	str	r3, [r7, #68]	; 0x44
		    		((uint64_t) RxBuff_2[15] << 24) |
 8001910:	4b33      	ldr	r3, [pc, #204]	; (80019e0 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001912:	7bdb      	ldrb	r3, [r3, #15]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2200      	movs	r2, #0
 8001918:	63bb      	str	r3, [r7, #56]	; 0x38
 800191a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800191c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001920:	460b      	mov	r3, r1
 8001922:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8001926:	460b      	mov	r3, r1
 8001928:	ea4f 6a03 	mov.w	sl, r3, lsl #24
		    		((uint64_t) RxBuff_2[14] << 32) |
 800192c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001930:	460b      	mov	r3, r1
 8001932:	ea43 030a 	orr.w	r3, r3, sl
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
 8001938:	4613      	mov	r3, r2
 800193a:	ea43 030b 	orr.w	r3, r3, fp
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
		    		((uint64_t) RxBuff_2[16] << 16) |
 8001940:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001942:	7c1b      	ldrb	r3, [r3, #16]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2200      	movs	r2, #0
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
 800194a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001958:	4629      	mov	r1, r5
 800195a:	040b      	lsls	r3, r1, #16
 800195c:	4621      	mov	r1, r4
 800195e:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001962:	4621      	mov	r1, r4
 8001964:	040a      	lsls	r2, r1, #16
		    		((uint64_t) RxBuff_2[15] << 24) |
 8001966:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800196a:	4621      	mov	r1, r4
 800196c:	4311      	orrs	r1, r2
 800196e:	6239      	str	r1, [r7, #32]
 8001970:	4629      	mov	r1, r5
 8001972:	4319      	orrs	r1, r3
 8001974:	6279      	str	r1, [r7, #36]	; 0x24
		    		((uint64_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 8001976:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001978:	7c5b      	ldrb	r3, [r3, #17]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2200      	movs	r2, #0
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	61fa      	str	r2, [r7, #28]
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800198e:	4629      	mov	r1, r5
 8001990:	020b      	lsls	r3, r1, #8
 8001992:	4621      	mov	r1, r4
 8001994:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001998:	4621      	mov	r1, r4
 800199a:	020a      	lsls	r2, r1, #8
		    		((uint64_t) RxBuff_2[16] << 16) |
 800199c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80019a0:	4621      	mov	r1, r4
 80019a2:	4311      	orrs	r1, r2
 80019a4:	6139      	str	r1, [r7, #16]
 80019a6:	4629      	mov	r1, r5
 80019a8:	4319      	orrs	r1, r3
 80019aa:	6179      	str	r1, [r7, #20]
		    		((uint64_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_UARTEx_RxEventCallback+0x21c>)
 80019ae:	7c9b      	ldrb	r3, [r3, #18]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2200      	movs	r2, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	60fa      	str	r2, [r7, #12]
 80019b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80019bc:	4623      	mov	r3, r4
 80019be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019c2:	4602      	mov	r2, r0
 80019c4:	4313      	orrs	r3, r2
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	462b      	mov	r3, r5
 80019ca:	460a      	mov	r2, r1
 80019cc:	4313      	orrs	r3, r2
 80019ce:	607b      	str	r3, [r7, #4]
		    	game_status.SyncTimeStamp =
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <HAL_UARTEx_RxEventCallback+0x220>)
 80019d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80019d6:	e9c3 1202 	strd	r1, r2, [r3, #8]
		    	break;
 80019da:	e0cc      	b.n	8001b76 <HAL_UARTEx_RxEventCallback+0x3b2>
 80019dc:	20000998 	.word	0x20000998
 80019e0:	20000558 	.word	0x20000558
 80019e4:	20000658 	.word	0x20000658
		    	game_status.game_type = RxBuff_2[7];
 80019e8:	4b65      	ldr	r3, [pc, #404]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80019ea:	79da      	ldrb	r2, [r3, #7]
 80019ec:	4b65      	ldr	r3, [pc, #404]	; (8001b84 <HAL_UARTEx_RxEventCallback+0x3c0>)
 80019ee:	701a      	strb	r2, [r3, #0]
		    	robot_status.robot_id = RxBuff_2[7];
 80019f0:	4b63      	ldr	r3, [pc, #396]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80019f2:	79da      	ldrb	r2, [r3, #7]
 80019f4:	4b64      	ldr	r3, [pc, #400]	; (8001b88 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80019f6:	701a      	strb	r2, [r3, #0]
		    	robot_status.robot_level = RxBuff_2[8];
 80019f8:	4b61      	ldr	r3, [pc, #388]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80019fa:	7a1a      	ldrb	r2, [r3, #8]
 80019fc:	4b62      	ldr	r3, [pc, #392]	; (8001b88 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80019fe:	705a      	strb	r2, [r3, #1]
		    	robot_status.current_HP = ((uint16_t) RxBuff_2[9] << 8) | RxBuff_2[10];
 8001a00:	4b5f      	ldr	r3, [pc, #380]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001a02:	7a5b      	ldrb	r3, [r3, #9]
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	b21a      	sxth	r2, r3
 8001a08:	4b5d      	ldr	r3, [pc, #372]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001a0a:	7a9b      	ldrb	r3, [r3, #10]
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	4b5c      	ldr	r3, [pc, #368]	; (8001b88 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8001a16:	805a      	strh	r2, [r3, #2]
		    	robot_status.maximum_HP = ((uint16_t) RxBuff_2[11] << 8) | RxBuff_2[12];
 8001a18:	4b59      	ldr	r3, [pc, #356]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001a1a:	7adb      	ldrb	r3, [r3, #11]
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	b21a      	sxth	r2, r3
 8001a20:	4b57      	ldr	r3, [pc, #348]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001a22:	7b1b      	ldrb	r3, [r3, #12]
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	4313      	orrs	r3, r2
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	4b56      	ldr	r3, [pc, #344]	; (8001b88 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8001a2e:	809a      	strh	r2, [r3, #4]
		    	robot_status.shooter_barrel_cooling_value = ((uint16_t) RxBuff_2[13] << 8) | RxBuff_2[14];
 8001a30:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001a32:	7b5b      	ldrb	r3, [r3, #13]
 8001a34:	021b      	lsls	r3, r3, #8
 8001a36:	b21a      	sxth	r2, r3
 8001a38:	4b51      	ldr	r3, [pc, #324]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001a3a:	7b9b      	ldrb	r3, [r3, #14]
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	4b50      	ldr	r3, [pc, #320]	; (8001b88 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8001a46:	80da      	strh	r2, [r3, #6]
		    	robot_status.shooter_barrel_heat_limit = ((uint16_t) RxBuff_2[15] << 8) | RxBuff_2[16];
 8001a48:	4b4d      	ldr	r3, [pc, #308]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001a4a:	7bdb      	ldrb	r3, [r3, #15]
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	b21a      	sxth	r2, r3
 8001a50:	4b4b      	ldr	r3, [pc, #300]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001a52:	7c1b      	ldrb	r3, [r3, #16]
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	4313      	orrs	r3, r2
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	4b4a      	ldr	r3, [pc, #296]	; (8001b88 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8001a5e:	811a      	strh	r2, [r3, #8]
		    	robot_status.chassis_power_limit = ((uint16_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 8001a60:	4b47      	ldr	r3, [pc, #284]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001a62:	7c5b      	ldrb	r3, [r3, #17]
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	b21a      	sxth	r2, r3
 8001a68:	4b45      	ldr	r3, [pc, #276]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001a6a:	7c9b      	ldrb	r3, [r3, #18]
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	4b44      	ldr	r3, [pc, #272]	; (8001b88 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8001a76:	815a      	strh	r2, [r3, #10]
		    	robot_status.power_management_gimbal_output = RxBuff_2[19];
 8001a78:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001a7a:	7cdb      	ldrb	r3, [r3, #19]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	b2d9      	uxtb	r1, r3
 8001a82:	4a41      	ldr	r2, [pc, #260]	; (8001b88 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8001a84:	7b13      	ldrb	r3, [r2, #12]
 8001a86:	f361 0300 	bfi	r3, r1, #0, #1
 8001a8a:	7313      	strb	r3, [r2, #12]
		    	robot_status.power_management_chassis_output = RxBuff_2[20];
 8001a8c:	4b3c      	ldr	r3, [pc, #240]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001a8e:	7d1b      	ldrb	r3, [r3, #20]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	b2d9      	uxtb	r1, r3
 8001a96:	4a3c      	ldr	r2, [pc, #240]	; (8001b88 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8001a98:	7b13      	ldrb	r3, [r2, #12]
 8001a9a:	f361 0341 	bfi	r3, r1, #1, #1
 8001a9e:	7313      	strb	r3, [r2, #12]
		    	robot_status.power_management_shooter_output = RxBuff_2[21];
 8001aa0:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001aa2:	7d5b      	ldrb	r3, [r3, #21]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	b2d9      	uxtb	r1, r3
 8001aaa:	4a37      	ldr	r2, [pc, #220]	; (8001b88 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8001aac:	7b13      	ldrb	r3, [r2, #12]
 8001aae:	f361 0382 	bfi	r3, r1, #2, #1
 8001ab2:	7313      	strb	r3, [r2, #12]
		    	power_heat_data.chassis_voltage = ((uint16_t) RxBuff_2[8] << 8) | RxBuff_2[7];
 8001ab4:	4b32      	ldr	r3, [pc, #200]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001ab6:	7a1b      	ldrb	r3, [r3, #8]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001abe:	79db      	ldrb	r3, [r3, #7]
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	4b30      	ldr	r3, [pc, #192]	; (8001b8c <HAL_UARTEx_RxEventCallback+0x3c8>)
 8001aca:	801a      	strh	r2, [r3, #0]
		    	power_heat_data.chassis_current = ((uint16_t) RxBuff_2[10] << 8) | RxBuff_2[9];
 8001acc:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001ace:	7a9b      	ldrb	r3, [r3, #10]
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001ad6:	7a5b      	ldrb	r3, [r3, #9]
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	4313      	orrs	r3, r2
 8001adc:	b21b      	sxth	r3, r3
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <HAL_UARTEx_RxEventCallback+0x3c8>)
 8001ae2:	805a      	strh	r2, [r3, #2]
		    	power_heat_data.chassis_power = ((uint32_t) RxBuff_2[14] << 24) | ((uint32_t) RxBuff_2[13] << 16) | ((uint32_t) RxBuff_2[12] << 8) | RxBuff_2[11];
 8001ae4:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001ae6:	7b9b      	ldrb	r3, [r3, #14]
 8001ae8:	061a      	lsls	r2, r3, #24
 8001aea:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001aec:	7b5b      	ldrb	r3, [r3, #13]
 8001aee:	041b      	lsls	r3, r3, #16
 8001af0:	431a      	orrs	r2, r3
 8001af2:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001af4:	7b1b      	ldrb	r3, [r3, #12]
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	4313      	orrs	r3, r2
 8001afa:	4a21      	ldr	r2, [pc, #132]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001afc:	7ad2      	ldrb	r2, [r2, #11]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b08:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <HAL_UARTEx_RxEventCallback+0x3c8>)
 8001b0a:	edc3 7a01 	vstr	s15, [r3, #4]
		    	power_heat_data.buffer_energy = ((uint16_t) RxBuff_2[15] << 8) | RxBuff_2[16];
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001b10:	7bdb      	ldrb	r3, [r3, #15]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	b21a      	sxth	r2, r3
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001b18:	7c1b      	ldrb	r3, [r3, #16]
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <HAL_UARTEx_RxEventCallback+0x3c8>)
 8001b24:	811a      	strh	r2, [r3, #8]
		    	power_heat_data.shooter_17mm_1_barrel_heat = ((uint16_t) RxBuff_2[18] << 8) | RxBuff_2[17];
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001b28:	7c9b      	ldrb	r3, [r3, #18]
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	b21a      	sxth	r2, r3
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001b30:	7c5b      	ldrb	r3, [r3, #17]
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b21b      	sxth	r3, r3
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_UARTEx_RxEventCallback+0x3c8>)
 8001b3c:	815a      	strh	r2, [r3, #10]
		    	power_heat_data.shooter_17mm_2_barrel_heat = ((uint16_t) RxBuff_2[20] << 8) | RxBuff_2[19];
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001b40:	7d1b      	ldrb	r3, [r3, #20]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	b21a      	sxth	r2, r3
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001b48:	7cdb      	ldrb	r3, [r3, #19]
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <HAL_UARTEx_RxEventCallback+0x3c8>)
 8001b54:	819a      	strh	r2, [r3, #12]
		    	power_heat_data.shooter_42mm_barrel_heat = ((uint16_t) RxBuff_2[22] << 8) | RxBuff_2[21];
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001b58:	7d9b      	ldrb	r3, [r3, #22]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001b60:	7d5b      	ldrb	r3, [r3, #21]
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	4313      	orrs	r3, r2
 8001b66:	b21b      	sxth	r3, r3
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <HAL_UARTEx_RxEventCallback+0x3c8>)
 8001b6c:	81da      	strh	r2, [r3, #14]
		        break;
 8001b6e:	e001      	b.n	8001b74 <HAL_UARTEx_RxEventCallback+0x3b0>
		    }
		}
	}
 8001b70:	bf00      	nop
 8001b72:	e000      	b.n	8001b76 <HAL_UARTEx_RxEventCallback+0x3b2>
		        break;
 8001b74:	bf00      	nop
}
 8001b76:	bf00      	nop
 8001b78:	377c      	adds	r7, #124	; 0x7c
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b80:	20000558 	.word	0x20000558
 8001b84:	20000658 	.word	0x20000658
 8001b88:	20000678 	.word	0x20000678
 8001b8c:	20000668 	.word	0x20000668

08001b90 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 8001b96:	2301      	movs	r3, #1
 8001b98:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8001bba:	463b      	mov	r3, r7
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480f      	ldr	r0, [pc, #60]	; (8001bfc <can_filter_init+0x6c>)
 8001bc0:	f001 ff7e 	bl	8003ac0 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8001bc4:	480d      	ldr	r0, [pc, #52]	; (8001bfc <can_filter_init+0x6c>)
 8001bc6:	f002 f85b 	bl	8003c80 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001bca:	2102      	movs	r1, #2
 8001bcc:	480b      	ldr	r0, [pc, #44]	; (8001bfc <can_filter_init+0x6c>)
 8001bce:	f002 fa88 	bl	80040e2 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 8001bd2:	230e      	movs	r3, #14
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
    can_filter_st.FilterBank = 14;
 8001bd6:	230e      	movs	r3, #14
 8001bd8:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 8001bda:	463b      	mov	r3, r7
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4808      	ldr	r0, [pc, #32]	; (8001c00 <can_filter_init+0x70>)
 8001be0:	f001 ff6e 	bl	8003ac0 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 8001be4:	4806      	ldr	r0, [pc, #24]	; (8001c00 <can_filter_init+0x70>)
 8001be6:	f002 f84b 	bl	8003c80 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001bea:	2102      	movs	r1, #2
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <can_filter_init+0x70>)
 8001bee:	f002 fa78 	bl	80040e2 <HAL_CAN_ActivateNotification>
}
 8001bf2:	bf00      	nop
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000790 	.word	0x20000790
 8001c00:	200007b8 	.word	0x200007b8

08001c04 <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 8001c12:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <RC_init+0xac>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695a      	ldr	r2, [r3, #20]
 8001c18:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <RC_init+0xac>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c20:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 8001c22:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <RC_init+0xac>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <RC_init+0xac>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 0210 	orr.w	r2, r2, #16
 8001c30:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <RC_init+0xb0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <RC_init+0xb0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0201 	bic.w	r2, r2, #1
 8001c40:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8001c42:	e007      	b.n	8001c54 <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <RC_init+0xb0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <RC_init+0xb0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8001c54:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <RC_init+0xb0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <RC_init+0xb0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <RC_init+0xb4>)
 8001c68:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 8001c6a:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <RC_init+0xb0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <RC_init+0xb0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <RC_init+0xb0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	88fa      	ldrh	r2, [r7, #6]
 8001c80:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8001c82:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <RC_init+0xb0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <RC_init+0xb0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c90:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <RC_init+0xb0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <RC_init+0xb0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0201 	orr.w	r2, r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000954 	.word	0x20000954
 8001cb4:	20000a9c 	.word	0x20000a9c
 8001cb8:	40004804 	.word	0x40004804

08001cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc0:	f001 fd90 	bl	80037e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc4:	f000 f844 	bl	8001d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cc8:	f000 fbda 	bl	8002480 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ccc:	f000 fb8a 	bl	80023e4 <MX_DMA_Init>
  MX_CAN1_Init();
 8001cd0:	f000 f8aa 	bl	8001e28 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001cd4:	f000 f8de 	bl	8001e94 <MX_CAN2_Init>
  MX_SPI1_Init();
 8001cd8:	f000 f912 	bl	8001f00 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001cdc:	f000 f9ee 	bl	80020bc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001ce0:	f000 fb00 	bl	80022e4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001ce4:	f000 fb54 	bl	8002390 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8001ce8:	f000 f940 	bl	8001f6c <MX_TIM1_Init>
  MX_TIM8_Init();
 8001cec:	f000 fa5e 	bl	80021ac <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8001cf0:	f000 fb22 	bl	8002338 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8001cf4:	f7ff ff4c 	bl	8001b90 <can_filter_init>
  remote_control_init();
 8001cf8:	f000 fdde 	bl	80028b8 <remote_control_init>
  usart_Init();
 8001cfc:	f7ff fd24 	bl	8001748 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 8001d00:	f000 fde8 	bl	80028d4 <get_remote_control_point>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <main+0x78>)
 8001d08:	6013      	str	r3, [r2, #0]

  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d0a:	f006 fa07 	bl	800811c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <main+0x7c>)
 8001d10:	2100      	movs	r1, #0
 8001d12:	480a      	ldr	r0, [pc, #40]	; (8001d3c <main+0x80>)
 8001d14:	f006 fa4c 	bl	80081b0 <osThreadNew>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <main+0x84>)
 8001d1c:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <main+0x88>)
 8001d20:	2100      	movs	r1, #0
 8001d22:	4809      	ldr	r0, [pc, #36]	; (8001d48 <main+0x8c>)
 8001d24:	f006 fa44 	bl	80081b0 <osThreadNew>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4a08      	ldr	r2, [pc, #32]	; (8001d4c <main+0x90>)
 8001d2c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001d2e:	f006 fa19 	bl	8008164 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d32:	e7fe      	b.n	8001d32 <main+0x76>
 8001d34:	20000bc4 	.word	0x20000bc4
 8001d38:	0800db60 	.word	0x0800db60
 8001d3c:	080025d5 	.word	0x080025d5
 8001d40:	20000bbc 	.word	0x20000bbc
 8001d44:	0800db84 	.word	0x0800db84
 8001d48:	0800264d 	.word	0x0800264d
 8001d4c:	20000bc0 	.word	0x20000bc0

08001d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b094      	sub	sp, #80	; 0x50
 8001d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d56:	f107 0320 	add.w	r3, r7, #32
 8001d5a:	2230      	movs	r2, #48	; 0x30
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f009 f885 	bl	800ae6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <SystemClock_Config+0xd0>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	4a28      	ldr	r2, [pc, #160]	; (8001e20 <SystemClock_Config+0xd0>)
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d82:	6413      	str	r3, [r2, #64]	; 0x40
 8001d84:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <SystemClock_Config+0xd0>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d90:	2300      	movs	r3, #0
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <SystemClock_Config+0xd4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a22      	ldr	r2, [pc, #136]	; (8001e24 <SystemClock_Config+0xd4>)
 8001d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <SystemClock_Config+0xd4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dac:	2301      	movs	r3, #1
 8001dae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001db0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db6:	2302      	movs	r3, #2
 8001db8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001dc0:	2306      	movs	r3, #6
 8001dc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001dc4:	23a8      	movs	r3, #168	; 0xa8
 8001dc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd0:	f107 0320 	add.w	r3, r7, #32
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 faa3 	bl	8005320 <HAL_RCC_OscConfig>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001de0:	f000 fd64 	bl	80028ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de4:	230f      	movs	r3, #15
 8001de6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de8:	2302      	movs	r3, #2
 8001dea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001df0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001df4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	2105      	movs	r1, #5
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 fd04 	bl	8005810 <HAL_RCC_ClockConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e0e:	f000 fd4d 	bl	80028ac <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001e12:	f003 fde3 	bl	80059dc <HAL_RCC_EnableCSS>
}
 8001e16:	bf00      	nop
 8001e18:	3750      	adds	r7, #80	; 0x50
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40007000 	.word	0x40007000

08001e28 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <MX_CAN1_Init+0x64>)
 8001e2e:	4a18      	ldr	r2, [pc, #96]	; (8001e90 <MX_CAN1_Init+0x68>)
 8001e30:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001e32:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <MX_CAN1_Init+0x64>)
 8001e34:	2203      	movs	r2, #3
 8001e36:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e38:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <MX_CAN1_Init+0x64>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <MX_CAN1_Init+0x64>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <MX_CAN1_Init+0x64>)
 8001e46:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001e4a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <MX_CAN1_Init+0x64>)
 8001e4e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e52:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e54:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <MX_CAN1_Init+0x64>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <MX_CAN1_Init+0x64>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001e60:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <MX_CAN1_Init+0x64>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <MX_CAN1_Init+0x64>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001e6c:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <MX_CAN1_Init+0x64>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <MX_CAN1_Init+0x64>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001e78:	4804      	ldr	r0, [pc, #16]	; (8001e8c <MX_CAN1_Init+0x64>)
 8001e7a:	f001 fd25 	bl	80038c8 <HAL_CAN_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001e84:	f000 fd12 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000790 	.word	0x20000790
 8001e90:	40006400 	.word	0x40006400

08001e94 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001e98:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <MX_CAN2_Init+0x64>)
 8001e9a:	4a18      	ldr	r2, [pc, #96]	; (8001efc <MX_CAN2_Init+0x68>)
 8001e9c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8001e9e:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <MX_CAN2_Init+0x64>)
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <MX_CAN2_Init+0x64>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001eaa:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <MX_CAN2_Init+0x64>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <MX_CAN2_Init+0x64>)
 8001eb2:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001eb6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <MX_CAN2_Init+0x64>)
 8001eba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ebe:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <MX_CAN2_Init+0x64>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <MX_CAN2_Init+0x64>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <MX_CAN2_Init+0x64>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <MX_CAN2_Init+0x64>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <MX_CAN2_Init+0x64>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <MX_CAN2_Init+0x64>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001ee4:	4804      	ldr	r0, [pc, #16]	; (8001ef8 <MX_CAN2_Init+0x64>)
 8001ee6:	f001 fcef 	bl	80038c8 <HAL_CAN_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001ef0:	f000 fcdc 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	200007b8 	.word	0x200007b8
 8001efc:	40006800 	.word	0x40006800

08001f00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f04:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <MX_SPI1_Init+0x64>)
 8001f06:	4a18      	ldr	r2, [pc, #96]	; (8001f68 <MX_SPI1_Init+0x68>)
 8001f08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <MX_SPI1_Init+0x64>)
 8001f0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <MX_SPI1_Init+0x64>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <MX_SPI1_Init+0x64>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <MX_SPI1_Init+0x64>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <MX_SPI1_Init+0x64>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <MX_SPI1_Init+0x64>)
 8001f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <MX_SPI1_Init+0x64>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f38:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <MX_SPI1_Init+0x64>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <MX_SPI1_Init+0x64>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f44:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <MX_SPI1_Init+0x64>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <MX_SPI1_Init+0x64>)
 8001f4c:	220a      	movs	r2, #10
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f50:	4804      	ldr	r0, [pc, #16]	; (8001f64 <MX_SPI1_Init+0x64>)
 8001f52:	f003 fe64 	bl	8005c1e <HAL_SPI_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f5c:	f000 fca6 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200007e0 	.word	0x200007e0
 8001f68:	40013000 	.word	0x40013000

08001f6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b092      	sub	sp, #72	; 0x48
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
 8001f8c:	615a      	str	r2, [r3, #20]
 8001f8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	2220      	movs	r2, #32
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f008 ff69 	bl	800ae6e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f9c:	4b45      	ldr	r3, [pc, #276]	; (80020b4 <MX_TIM1_Init+0x148>)
 8001f9e:	4a46      	ldr	r2, [pc, #280]	; (80020b8 <MX_TIM1_Init+0x14c>)
 8001fa0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001fa2:	4b44      	ldr	r3, [pc, #272]	; (80020b4 <MX_TIM1_Init+0x148>)
 8001fa4:	2253      	movs	r2, #83	; 0x53
 8001fa6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa8:	4b42      	ldr	r3, [pc, #264]	; (80020b4 <MX_TIM1_Init+0x148>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001fae:	4b41      	ldr	r3, [pc, #260]	; (80020b4 <MX_TIM1_Init+0x148>)
 8001fb0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001fb4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb6:	4b3f      	ldr	r3, [pc, #252]	; (80020b4 <MX_TIM1_Init+0x148>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fbc:	4b3d      	ldr	r3, [pc, #244]	; (80020b4 <MX_TIM1_Init+0x148>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc2:	4b3c      	ldr	r3, [pc, #240]	; (80020b4 <MX_TIM1_Init+0x148>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fc8:	483a      	ldr	r0, [pc, #232]	; (80020b4 <MX_TIM1_Init+0x148>)
 8001fca:	f003 ff69 	bl	8005ea0 <HAL_TIM_PWM_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001fd4:	f000 fc6a 	bl	80028ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fe0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4833      	ldr	r0, [pc, #204]	; (80020b4 <MX_TIM1_Init+0x148>)
 8001fe8:	f004 fd7c 	bl	8006ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001ff2:	f000 fc5b 	bl	80028ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ff6:	2360      	movs	r3, #96	; 0x60
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002002:	2300      	movs	r3, #0
 8002004:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002016:	2200      	movs	r2, #0
 8002018:	4619      	mov	r1, r3
 800201a:	4826      	ldr	r0, [pc, #152]	; (80020b4 <MX_TIM1_Init+0x148>)
 800201c:	f004 f8c8 	bl	80061b0 <HAL_TIM_PWM_ConfigChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002026:	f000 fc41 	bl	80028ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800202a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800202e:	2204      	movs	r2, #4
 8002030:	4619      	mov	r1, r3
 8002032:	4820      	ldr	r0, [pc, #128]	; (80020b4 <MX_TIM1_Init+0x148>)
 8002034:	f004 f8bc 	bl	80061b0 <HAL_TIM_PWM_ConfigChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800203e:	f000 fc35 	bl	80028ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002046:	2208      	movs	r2, #8
 8002048:	4619      	mov	r1, r3
 800204a:	481a      	ldr	r0, [pc, #104]	; (80020b4 <MX_TIM1_Init+0x148>)
 800204c:	f004 f8b0 	bl	80061b0 <HAL_TIM_PWM_ConfigChannel>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002056:	f000 fc29 	bl	80028ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800205a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800205e:	220c      	movs	r2, #12
 8002060:	4619      	mov	r1, r3
 8002062:	4814      	ldr	r0, [pc, #80]	; (80020b4 <MX_TIM1_Init+0x148>)
 8002064:	f004 f8a4 	bl	80061b0 <HAL_TIM_PWM_ConfigChannel>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800206e:	f000 fc1d 	bl	80028ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800208a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	4619      	mov	r1, r3
 8002094:	4807      	ldr	r0, [pc, #28]	; (80020b4 <MX_TIM1_Init+0x148>)
 8002096:	f004 fda1 	bl	8006bdc <HAL_TIMEx_ConfigBreakDeadTime>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80020a0:	f000 fc04 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020a4:	4803      	ldr	r0, [pc, #12]	; (80020b4 <MX_TIM1_Init+0x148>)
 80020a6:	f000 ff7b 	bl	8002fa0 <HAL_TIM_MspPostInit>

}
 80020aa:	bf00      	nop
 80020ac:	3748      	adds	r7, #72	; 0x48
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000838 	.word	0x20000838
 80020b8:	40010000 	.word	0x40010000

080020bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08e      	sub	sp, #56	; 0x38
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d0:	f107 0320 	add.w	r3, r7, #32
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
 80020e8:	615a      	str	r2, [r3, #20]
 80020ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020ec:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <MX_TIM4_Init+0xe8>)
 80020ee:	4a2e      	ldr	r2, [pc, #184]	; (80021a8 <MX_TIM4_Init+0xec>)
 80020f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80020f2:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <MX_TIM4_Init+0xe8>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f8:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <MX_TIM4_Init+0xe8>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 80020fe:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <MX_TIM4_Init+0xe8>)
 8002100:	f245 2207 	movw	r2, #20999	; 0x5207
 8002104:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002106:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <MX_TIM4_Init+0xe8>)
 8002108:	2200      	movs	r2, #0
 800210a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <MX_TIM4_Init+0xe8>)
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002112:	4824      	ldr	r0, [pc, #144]	; (80021a4 <MX_TIM4_Init+0xe8>)
 8002114:	f003 fe0c 	bl	8005d30 <HAL_TIM_Base_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800211e:	f000 fbc5 	bl	80028ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800212c:	4619      	mov	r1, r3
 800212e:	481d      	ldr	r0, [pc, #116]	; (80021a4 <MX_TIM4_Init+0xe8>)
 8002130:	f004 f900 	bl	8006334 <HAL_TIM_ConfigClockSource>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800213a:	f000 fbb7 	bl	80028ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800213e:	4819      	ldr	r0, [pc, #100]	; (80021a4 <MX_TIM4_Init+0xe8>)
 8002140:	f003 feae 	bl	8005ea0 <HAL_TIM_PWM_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800214a:	f000 fbaf 	bl	80028ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002156:	f107 0320 	add.w	r3, r7, #32
 800215a:	4619      	mov	r1, r3
 800215c:	4811      	ldr	r0, [pc, #68]	; (80021a4 <MX_TIM4_Init+0xe8>)
 800215e:	f004 fcc1 	bl	8006ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002168:	f000 fba0 	bl	80028ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800216c:	2360      	movs	r3, #96	; 0x60
 800216e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8002170:	f642 1303 	movw	r3, #10499	; 0x2903
 8002174:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	2208      	movs	r2, #8
 8002182:	4619      	mov	r1, r3
 8002184:	4807      	ldr	r0, [pc, #28]	; (80021a4 <MX_TIM4_Init+0xe8>)
 8002186:	f004 f813 	bl	80061b0 <HAL_TIM_PWM_ConfigChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002190:	f000 fb8c 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002194:	4803      	ldr	r0, [pc, #12]	; (80021a4 <MX_TIM4_Init+0xe8>)
 8002196:	f000 ff03 	bl	8002fa0 <HAL_TIM_MspPostInit>

}
 800219a:	bf00      	nop
 800219c:	3738      	adds	r7, #56	; 0x38
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000880 	.word	0x20000880
 80021a8:	40000800 	.word	0x40000800

080021ac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b092      	sub	sp, #72	; 0x48
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
 80021cc:	615a      	str	r2, [r3, #20]
 80021ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	2220      	movs	r2, #32
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f008 fe49 	bl	800ae6e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80021dc:	4b3f      	ldr	r3, [pc, #252]	; (80022dc <MX_TIM8_Init+0x130>)
 80021de:	4a40      	ldr	r2, [pc, #256]	; (80022e0 <MX_TIM8_Init+0x134>)
 80021e0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 80021e2:	4b3e      	ldr	r3, [pc, #248]	; (80022dc <MX_TIM8_Init+0x130>)
 80021e4:	2253      	movs	r2, #83	; 0x53
 80021e6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e8:	4b3c      	ldr	r3, [pc, #240]	; (80022dc <MX_TIM8_Init+0x130>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 80021ee:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <MX_TIM8_Init+0x130>)
 80021f0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80021f4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f6:	4b39      	ldr	r3, [pc, #228]	; (80022dc <MX_TIM8_Init+0x130>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80021fc:	4b37      	ldr	r3, [pc, #220]	; (80022dc <MX_TIM8_Init+0x130>)
 80021fe:	2200      	movs	r2, #0
 8002200:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002202:	4b36      	ldr	r3, [pc, #216]	; (80022dc <MX_TIM8_Init+0x130>)
 8002204:	2280      	movs	r2, #128	; 0x80
 8002206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002208:	4834      	ldr	r0, [pc, #208]	; (80022dc <MX_TIM8_Init+0x130>)
 800220a:	f003 fe49 	bl	8005ea0 <HAL_TIM_PWM_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002214:	f000 fb4a 	bl	80028ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002218:	2300      	movs	r3, #0
 800221a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800221c:	2300      	movs	r3, #0
 800221e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002220:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002224:	4619      	mov	r1, r3
 8002226:	482d      	ldr	r0, [pc, #180]	; (80022dc <MX_TIM8_Init+0x130>)
 8002228:	f004 fc5c 	bl	8006ae4 <HAL_TIMEx_MasterConfigSynchronization>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002232:	f000 fb3b 	bl	80028ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002236:	2360      	movs	r3, #96	; 0x60
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800223e:	2300      	movs	r3, #0
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002242:	2300      	movs	r3, #0
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800224a:	2300      	movs	r3, #0
 800224c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800224e:	2300      	movs	r3, #0
 8002250:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002256:	2200      	movs	r2, #0
 8002258:	4619      	mov	r1, r3
 800225a:	4820      	ldr	r0, [pc, #128]	; (80022dc <MX_TIM8_Init+0x130>)
 800225c:	f003 ffa8 	bl	80061b0 <HAL_TIM_PWM_ConfigChannel>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002266:	f000 fb21 	bl	80028ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800226a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226e:	2204      	movs	r2, #4
 8002270:	4619      	mov	r1, r3
 8002272:	481a      	ldr	r0, [pc, #104]	; (80022dc <MX_TIM8_Init+0x130>)
 8002274:	f003 ff9c 	bl	80061b0 <HAL_TIM_PWM_ConfigChannel>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800227e:	f000 fb15 	bl	80028ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002286:	2208      	movs	r2, #8
 8002288:	4619      	mov	r1, r3
 800228a:	4814      	ldr	r0, [pc, #80]	; (80022dc <MX_TIM8_Init+0x130>)
 800228c:	f003 ff90 	bl	80061b0 <HAL_TIM_PWM_ConfigChannel>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002296:	f000 fb09 	bl	80028ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80022b8:	1d3b      	adds	r3, r7, #4
 80022ba:	4619      	mov	r1, r3
 80022bc:	4807      	ldr	r0, [pc, #28]	; (80022dc <MX_TIM8_Init+0x130>)
 80022be:	f004 fc8d 	bl	8006bdc <HAL_TIMEx_ConfigBreakDeadTime>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 80022c8:	f000 faf0 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80022cc:	4803      	ldr	r0, [pc, #12]	; (80022dc <MX_TIM8_Init+0x130>)
 80022ce:	f000 fe67 	bl	8002fa0 <HAL_TIM_MspPostInit>

}
 80022d2:	bf00      	nop
 80022d4:	3748      	adds	r7, #72	; 0x48
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200008c8 	.word	0x200008c8
 80022e0:	40010400 	.word	0x40010400

080022e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <MX_USART1_UART_Init+0x4c>)
 80022ea:	4a12      	ldr	r2, [pc, #72]	; (8002334 <MX_USART1_UART_Init+0x50>)
 80022ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <MX_USART1_UART_Init+0x4c>)
 80022f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <MX_USART1_UART_Init+0x4c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <MX_USART1_UART_Init+0x4c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <MX_USART1_UART_Init+0x4c>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <MX_USART1_UART_Init+0x4c>)
 800230a:	220c      	movs	r2, #12
 800230c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <MX_USART1_UART_Init+0x4c>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <MX_USART1_UART_Init+0x4c>)
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800231a:	4805      	ldr	r0, [pc, #20]	; (8002330 <MX_USART1_UART_Init+0x4c>)
 800231c:	f004 fcb0 	bl	8006c80 <HAL_UART_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002326:	f000 fac1 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000910 	.word	0x20000910
 8002334:	40011000 	.word	0x40011000

08002338 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <MX_USART3_UART_Init+0x4c>)
 800233e:	4a12      	ldr	r2, [pc, #72]	; (8002388 <MX_USART3_UART_Init+0x50>)
 8002340:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <MX_USART3_UART_Init+0x4c>)
 8002344:	4a11      	ldr	r2, [pc, #68]	; (800238c <MX_USART3_UART_Init+0x54>)
 8002346:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002348:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_USART3_UART_Init+0x4c>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <MX_USART3_UART_Init+0x4c>)
 8002350:	2200      	movs	r2, #0
 8002352:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <MX_USART3_UART_Init+0x4c>)
 8002356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800235a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_USART3_UART_Init+0x4c>)
 800235e:	220c      	movs	r2, #12
 8002360:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <MX_USART3_UART_Init+0x4c>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_USART3_UART_Init+0x4c>)
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800236e:	4805      	ldr	r0, [pc, #20]	; (8002384 <MX_USART3_UART_Init+0x4c>)
 8002370:	f004 fc86 	bl	8006c80 <HAL_UART_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800237a:	f000 fa97 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000954 	.word	0x20000954
 8002388:	40004800 	.word	0x40004800
 800238c:	000186a0 	.word	0x000186a0

08002390 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <MX_USART6_UART_Init+0x4c>)
 8002396:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <MX_USART6_UART_Init+0x50>)
 8002398:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <MX_USART6_UART_Init+0x4c>)
 800239c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <MX_USART6_UART_Init+0x4c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <MX_USART6_UART_Init+0x4c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <MX_USART6_UART_Init+0x4c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <MX_USART6_UART_Init+0x4c>)
 80023b6:	220c      	movs	r2, #12
 80023b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <MX_USART6_UART_Init+0x4c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <MX_USART6_UART_Init+0x4c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <MX_USART6_UART_Init+0x4c>)
 80023c8:	f004 fc5a 	bl	8006c80 <HAL_UART_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80023d2:	f000 fa6b 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000998 	.word	0x20000998
 80023e0:	40011400 	.word	0x40011400

080023e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	4b23      	ldr	r3, [pc, #140]	; (800247c <MX_DMA_Init+0x98>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a22      	ldr	r2, [pc, #136]	; (800247c <MX_DMA_Init+0x98>)
 80023f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b20      	ldr	r3, [pc, #128]	; (800247c <MX_DMA_Init+0x98>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	603b      	str	r3, [r7, #0]
 800240a:	4b1c      	ldr	r3, [pc, #112]	; (800247c <MX_DMA_Init+0x98>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4a1b      	ldr	r2, [pc, #108]	; (800247c <MX_DMA_Init+0x98>)
 8002410:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b19      	ldr	r3, [pc, #100]	; (800247c <MX_DMA_Init+0x98>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	2105      	movs	r1, #5
 8002426:	200c      	movs	r0, #12
 8002428:	f002 f98b 	bl	8004742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800242c:	200c      	movs	r0, #12
 800242e:	f002 f9a4 	bl	800477a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	2105      	movs	r1, #5
 8002436:	2039      	movs	r0, #57	; 0x39
 8002438:	f002 f983 	bl	8004742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800243c:	2039      	movs	r0, #57	; 0x39
 800243e:	f002 f99c 	bl	800477a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002442:	2200      	movs	r2, #0
 8002444:	2105      	movs	r1, #5
 8002446:	203a      	movs	r0, #58	; 0x3a
 8002448:	f002 f97b 	bl	8004742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800244c:	203a      	movs	r0, #58	; 0x3a
 800244e:	f002 f994 	bl	800477a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002452:	2200      	movs	r2, #0
 8002454:	2105      	movs	r1, #5
 8002456:	2045      	movs	r0, #69	; 0x45
 8002458:	f002 f973 	bl	8004742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800245c:	2045      	movs	r0, #69	; 0x45
 800245e:	f002 f98c 	bl	800477a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2105      	movs	r1, #5
 8002466:	2046      	movs	r0, #70	; 0x46
 8002468:	f002 f96b 	bl	8004742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800246c:	2046      	movs	r0, #70	; 0x46
 800246e:	f002 f984 	bl	800477a <HAL_NVIC_EnableIRQ>

}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800

08002480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08e      	sub	sp, #56	; 0x38
 8002484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
 8002494:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	623b      	str	r3, [r7, #32]
 800249a:	4b4b      	ldr	r3, [pc, #300]	; (80025c8 <MX_GPIO_Init+0x148>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a4a      	ldr	r2, [pc, #296]	; (80025c8 <MX_GPIO_Init+0x148>)
 80024a0:	f043 0302 	orr.w	r3, r3, #2
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b48      	ldr	r3, [pc, #288]	; (80025c8 <MX_GPIO_Init+0x148>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	623b      	str	r3, [r7, #32]
 80024b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	4b44      	ldr	r3, [pc, #272]	; (80025c8 <MX_GPIO_Init+0x148>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a43      	ldr	r2, [pc, #268]	; (80025c8 <MX_GPIO_Init+0x148>)
 80024bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b41      	ldr	r3, [pc, #260]	; (80025c8 <MX_GPIO_Init+0x148>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	61bb      	str	r3, [r7, #24]
 80024d2:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <MX_GPIO_Init+0x148>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a3c      	ldr	r2, [pc, #240]	; (80025c8 <MX_GPIO_Init+0x148>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b3a      	ldr	r3, [pc, #232]	; (80025c8 <MX_GPIO_Init+0x148>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	61bb      	str	r3, [r7, #24]
 80024e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <MX_GPIO_Init+0x148>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a35      	ldr	r2, [pc, #212]	; (80025c8 <MX_GPIO_Init+0x148>)
 80024f4:	f043 0308 	orr.w	r3, r3, #8
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <MX_GPIO_Init+0x148>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	4b2f      	ldr	r3, [pc, #188]	; (80025c8 <MX_GPIO_Init+0x148>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a2e      	ldr	r2, [pc, #184]	; (80025c8 <MX_GPIO_Init+0x148>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <MX_GPIO_Init+0x148>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	4b28      	ldr	r3, [pc, #160]	; (80025c8 <MX_GPIO_Init+0x148>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4a27      	ldr	r2, [pc, #156]	; (80025c8 <MX_GPIO_Init+0x148>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <MX_GPIO_Init+0x148>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <MX_GPIO_Init+0x148>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <MX_GPIO_Init+0x148>)
 8002548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <MX_GPIO_Init+0x148>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	607b      	str	r3, [r7, #4]
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <MX_GPIO_Init+0x148>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	4a19      	ldr	r2, [pc, #100]	; (80025c8 <MX_GPIO_Init+0x148>)
 8002564:	f043 0310 	orr.w	r3, r3, #16
 8002568:	6313      	str	r3, [r2, #48]	; 0x30
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <MX_GPIO_Init+0x148>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	607b      	str	r3, [r7, #4]
 8002574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10, GPIO_PIN_RESET);
 8002576:	2200      	movs	r2, #0
 8002578:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800257c:	4813      	ldr	r0, [pc, #76]	; (80025cc <MX_GPIO_Init+0x14c>)
 800257e:	f002 feb5 	bl	80052ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PH12 PH11 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8002582:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002588:	2301      	movs	r3, #1
 800258a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002590:	2300      	movs	r3, #0
 8002592:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002598:	4619      	mov	r1, r3
 800259a:	480c      	ldr	r0, [pc, #48]	; (80025cc <MX_GPIO_Init+0x14c>)
 800259c:	f002 fd0a 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80025a0:	2330      	movs	r3, #48	; 0x30
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 80025b0:	230f      	movs	r3, #15
 80025b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b8:	4619      	mov	r1, r3
 80025ba:	4805      	ldr	r0, [pc, #20]	; (80025d0 <MX_GPIO_Init+0x150>)
 80025bc:	f002 fcfa 	bl	8004fb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025c0:	bf00      	nop
 80025c2:	3738      	adds	r7, #56	; 0x38
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40021c00 	.word	0x40021c00
 80025d0:	40020800 	.word	0x40020800

080025d4 <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
 80025dc:	2201      	movs	r2, #1
 80025de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025e2:	4818      	ldr	r0, [pc, #96]	; (8002644 <TaskMain+0x70>)
 80025e4:	f002 fe82 	bl	80052ec <HAL_GPIO_WritePin>
	__HAL_TIM_PRESCALER(&htim4, 2);
 80025e8:	4b17      	ldr	r3, [pc, #92]	; (8002648 <TaskMain+0x74>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2202      	movs	r2, #2
 80025ee:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80025f0:	2108      	movs	r1, #8
 80025f2:	4815      	ldr	r0, [pc, #84]	; (8002648 <TaskMain+0x74>)
 80025f4:	f003 fca4 	bl	8005f40 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim4);
 80025f8:	4813      	ldr	r0, [pc, #76]	; (8002648 <TaskMain+0x74>)
 80025fa:	f003 fbe9 	bl	8005dd0 <HAL_TIM_Base_Start>
	osDelay(150);
 80025fe:	2096      	movs	r0, #150	; 0x96
 8002600:	f005 fe68 	bl	80082d4 <osDelay>
	__HAL_TIM_PRESCALER(&htim4, 0);
 8002604:	4b10      	ldr	r3, [pc, #64]	; (8002648 <TaskMain+0x74>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2200      	movs	r2, #0
 800260a:	629a      	str	r2, [r3, #40]	; 0x28
	osDelay(150);
 800260c:	2096      	movs	r0, #150	; 0x96
 800260e:	f005 fe61 	bl	80082d4 <osDelay>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8002612:	2108      	movs	r1, #8
 8002614:	480c      	ldr	r0, [pc, #48]	; (8002648 <TaskMain+0x74>)
 8002616:	f003 fd5b 	bl	80060d0 <HAL_TIM_PWM_Stop>

	for(;;) {
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002620:	4808      	ldr	r0, [pc, #32]	; (8002644 <TaskMain+0x70>)
 8002622:	f002 fe63 	bl	80052ec <HAL_GPIO_WritePin>
		//set_motor_voltage(5, 4000);
		osDelay(500);
 8002626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800262a:	f005 fe53 	bl	80082d4 <osDelay>
		//sendB2bData(CAN_b2b_A_ID, 1, 1, 1, 1);
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
 800262e:	2201      	movs	r2, #1
 8002630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002634:	4803      	ldr	r0, [pc, #12]	; (8002644 <TaskMain+0x70>)
 8002636:	f002 fe59 	bl	80052ec <HAL_GPIO_WritePin>
		//set_motor_voltage(5, -4000);
		osDelay(500);
 800263a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800263e:	f005 fe49 	bl	80082d4 <osDelay>
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 0);
 8002642:	e7ea      	b.n	800261a <TaskMain+0x46>
 8002644:	40021c00 	.word	0x40021c00
 8002648:	20000880 	.word	0x20000880

0800264c <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 800264c:	b590      	push	{r4, r7, lr}
 800264e:	b089      	sub	sp, #36	; 0x24
 8002650:	af02      	add	r7, sp, #8
 8002652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskChassis */
    int16_t rcRPM[4] = {0,0,0,0};                              // maps rc percentage reading to motors, assuming we're running M3508s at max 469RPM
 8002654:	f107 0308 	add.w	r3, r7, #8
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
    int16_t rcPitch = 0;                                   // range: 3376 ~ 2132
 800265e:	2300      	movs	r3, #0
 8002660:	827b      	strh	r3, [r7, #18]
    //int16_t targetRPM[4] = {0,0,0,0};
  /* Infinite loop */
    for(;;) {
	    for (int i = 0; i < 4; i++) {
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	e01b      	b.n	80026a0 <TaskChassis+0x54>
	        rcRPM[i] = getRCchannel(i) * 13.645f;              // 13.645 = 469 / 187 / 660 * 3591, 660 = max reading in one direction
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	b25b      	sxtb	r3, r3
 800266c:	4618      	mov	r0, r3
 800266e:	f000 fae5 	bl	8002c3c <getRCchannel>
 8002672:	4603      	mov	r3, r0
 8002674:	ee07 3a90 	vmov	s15, r3
 8002678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800267c:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002884 <TaskChassis+0x238>
 8002680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002688:	ee17 3a90 	vmov	r3, s15
 800268c:	b21a      	sxth	r2, r3
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	3318      	adds	r3, #24
 8002694:	443b      	add	r3, r7
 8002696:	f823 2c10 	strh.w	r2, [r3, #-16]
	    for (int i = 0; i < 4; i++) {
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	3301      	adds	r3, #1
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	dde0      	ble.n	8002668 <TaskChassis+0x1c>
	    }
	    rcPitch = getRCchannel(1) * 0.94f + 2754;
 80026a6:	2001      	movs	r0, #1
 80026a8:	f000 fac8 	bl	8002c3c <getRCchannel>
 80026ac:	4603      	mov	r3, r0
 80026ae:	ee07 3a90 	vmov	s15, r3
 80026b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026b6:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8002888 <TaskChassis+0x23c>
 80026ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026be:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800288c <TaskChassis+0x240>
 80026c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026ca:	ee17 3a90 	vmov	r3, s15
 80026ce:	827b      	strh	r3, [r7, #18]

	    chassisTargetRPM.motorRPM[0] = rcRPM[3] + rcRPM[0] + rcRPM[2];
 80026d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	4413      	add	r3, r2
 80026de:	b29a      	uxth	r2, r3
 80026e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	b21a      	sxth	r2, r3
 80026ec:	4b68      	ldr	r3, [pc, #416]	; (8002890 <TaskChassis+0x244>)
 80026ee:	801a      	strh	r2, [r3, #0]
	    chassisTargetRPM.motorRPM[1] = rcRPM[3] + rcRPM[0] - rcRPM[2];
 80026f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	b29a      	uxth	r2, r3
 8002700:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002704:	b29b      	uxth	r3, r3
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	b29b      	uxth	r3, r3
 800270a:	b21a      	sxth	r2, r3
 800270c:	4b60      	ldr	r3, [pc, #384]	; (8002890 <TaskChassis+0x244>)
 800270e:	805a      	strh	r2, [r3, #2]
	    chassisTargetRPM.motorRPM[2] = -rcRPM[3] + rcRPM[0] - rcRPM[2];
 8002710:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002714:	b29a      	uxth	r2, r3
 8002716:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800271a:	b29b      	uxth	r3, r3
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	b29a      	uxth	r2, r3
 8002720:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002724:	b29b      	uxth	r3, r3
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	b29b      	uxth	r3, r3
 800272a:	b21a      	sxth	r2, r3
 800272c:	4b58      	ldr	r3, [pc, #352]	; (8002890 <TaskChassis+0x244>)
 800272e:	809a      	strh	r2, [r3, #4]
	    chassisTargetRPM.motorRPM[3] = -rcRPM[3] + rcRPM[0] + rcRPM[2];
 8002730:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002734:	b29a      	uxth	r2, r3
 8002736:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800273a:	b29b      	uxth	r3, r3
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	b29a      	uxth	r2, r3
 8002740:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002744:	b29b      	uxth	r3, r3
 8002746:	4413      	add	r3, r2
 8002748:	b29b      	uxth	r3, r3
 800274a:	b21a      	sxth	r2, r3
 800274c:	4b50      	ldr	r3, [pc, #320]	; (8002890 <TaskChassis+0x244>)
 800274e:	80da      	strh	r2, [r3, #6]
	    //if (calcChassisPower >= 30) {
	    //chassisTargetCurrent = applyPowerlimit(chassis, chassisTargetRPM, calcChassisPower);

	    //CAN1_cmd_b2b(CAN_b2b_A_ID, 1, 1, 1, 1);

	    if (boardID == CAN_b2b_A_ID) {
 8002750:	4b50      	ldr	r3, [pc, #320]	; (8002894 <TaskChassis+0x248>)
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	f240 1201 	movw	r2, #257	; 0x101
 8002758:	4293      	cmp	r3, r2
 800275a:	d164      	bne.n	8002826 <TaskChassis+0x1da>
	    	setM3508RPM(1, chassisTargetRPM.motorRPM[0], chassisPreset);
 800275c:	4b4c      	ldr	r3, [pc, #304]	; (8002890 <TaskChassis+0x244>)
 800275e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002762:	4b4d      	ldr	r3, [pc, #308]	; (8002898 <TaskChassis+0x24c>)
 8002764:	edd3 6a00 	vldr	s13, [r3]
 8002768:	ed93 7a01 	vldr	s14, [r3, #4]
 800276c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002770:	eeb0 0a66 	vmov.f32	s0, s13
 8002774:	eef0 0a47 	vmov.f32	s1, s14
 8002778:	eeb0 1a67 	vmov.f32	s2, s15
 800277c:	4611      	mov	r1, r2
 800277e:	2001      	movs	r0, #1
 8002780:	f7fe ff42 	bl	8001608 <setM3508RPM>
	    	setM3508RPM(2, chassisTargetRPM.motorRPM[1], chassisPreset);
 8002784:	4b42      	ldr	r3, [pc, #264]	; (8002890 <TaskChassis+0x244>)
 8002786:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800278a:	4b43      	ldr	r3, [pc, #268]	; (8002898 <TaskChassis+0x24c>)
 800278c:	edd3 6a00 	vldr	s13, [r3]
 8002790:	ed93 7a01 	vldr	s14, [r3, #4]
 8002794:	edd3 7a02 	vldr	s15, [r3, #8]
 8002798:	eeb0 0a66 	vmov.f32	s0, s13
 800279c:	eef0 0a47 	vmov.f32	s1, s14
 80027a0:	eeb0 1a67 	vmov.f32	s2, s15
 80027a4:	4611      	mov	r1, r2
 80027a6:	2002      	movs	r0, #2
 80027a8:	f7fe ff2e 	bl	8001608 <setM3508RPM>
	    	setM3508RPM(3, chassisTargetRPM.motorRPM[2], chassisPreset);
 80027ac:	4b38      	ldr	r3, [pc, #224]	; (8002890 <TaskChassis+0x244>)
 80027ae:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80027b2:	4b39      	ldr	r3, [pc, #228]	; (8002898 <TaskChassis+0x24c>)
 80027b4:	edd3 6a00 	vldr	s13, [r3]
 80027b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80027bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80027c0:	eeb0 0a66 	vmov.f32	s0, s13
 80027c4:	eef0 0a47 	vmov.f32	s1, s14
 80027c8:	eeb0 1a67 	vmov.f32	s2, s15
 80027cc:	4611      	mov	r1, r2
 80027ce:	2003      	movs	r0, #3
 80027d0:	f7fe ff1a 	bl	8001608 <setM3508RPM>
	    	setM3508RPM(4, chassisTargetRPM.motorRPM[3], chassisPreset);
 80027d4:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <TaskChassis+0x244>)
 80027d6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80027da:	4b2f      	ldr	r3, [pc, #188]	; (8002898 <TaskChassis+0x24c>)
 80027dc:	edd3 6a00 	vldr	s13, [r3]
 80027e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80027e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80027e8:	eeb0 0a66 	vmov.f32	s0, s13
 80027ec:	eef0 0a47 	vmov.f32	s1, s14
 80027f0:	eeb0 1a67 	vmov.f32	s2, s15
 80027f4:	4611      	mov	r1, r2
 80027f6:	2004      	movs	r0, #4
 80027f8:	f7fe ff06 	bl	8001608 <setM3508RPM>

	    	sendB2bData(CAN_b2b_A_motorCtrl_ID, rcPitch, 0, 0, 0);
 80027fc:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8002800:	2300      	movs	r3, #0
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	2300      	movs	r3, #0
 8002806:	2200      	movs	r2, #0
 8002808:	f44f 7081 	mov.w	r0, #258	; 0x102
 800280c:	f7fe ff7c 	bl	8001708 <sendB2bData>
	    	usart_printf("%d %d\r\n", b2bGyro.gyro_x, b2bGyro.gyro_y);
 8002810:	4b22      	ldr	r3, [pc, #136]	; (800289c <TaskChassis+0x250>)
 8002812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002816:	4619      	mov	r1, r3
 8002818:	4b20      	ldr	r3, [pc, #128]	; (800289c <TaskChassis+0x250>)
 800281a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800281e:	461a      	mov	r2, r3
 8002820:	481f      	ldr	r0, [pc, #124]	; (80028a0 <TaskChassis+0x254>)
 8002822:	f7fe ffa9 	bl	8001778 <usart_printf>
	    }

	    if (boardID == CAN_b2b_B_ID) {
 8002826:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <TaskChassis+0x248>)
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	f240 1211 	movw	r2, #273	; 0x111
 800282e:	4293      	cmp	r3, r2
 8002830:	d123      	bne.n	800287a <TaskChassis+0x22e>
	    	setGM6020voltagePosition(9, b2bMotorCtrl.motor1_Ctrl, yawPresetVoltagePosition);
 8002832:	4b1c      	ldr	r3, [pc, #112]	; (80028a4 <TaskChassis+0x258>)
 8002834:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <TaskChassis+0x25c>)
 800283a:	edd3 6a00 	vldr	s13, [r3]
 800283e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002842:	edd3 7a02 	vldr	s15, [r3, #8]
 8002846:	eeb0 0a66 	vmov.f32	s0, s13
 800284a:	eef0 0a47 	vmov.f32	s1, s14
 800284e:	eeb0 1a67 	vmov.f32	s2, s15
 8002852:	4611      	mov	r1, r2
 8002854:	2009      	movs	r0, #9
 8002856:	f7fe ff0b 	bl	8001670 <setGM6020voltagePosition>
	    	//setGM6020voltageRPM(9, 100, yawPresetVoltageRPM);
	    	//CAN2_cmd_motors(CAN_GROUP3C_ID, 5000, 0, 0, 0);
	    	sendB2bData(CAN_b2b_B_gyro_ID, b2bMotorCtrl.motor1_Ctrl, getMotorPosition(9), 0, 0);
 800285a:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <TaskChassis+0x258>)
 800285c:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002860:	2009      	movs	r0, #9
 8002862:	f7fe ff39 	bl	80016d8 <getMotorPosition>
 8002866:	4603      	mov	r3, r0
 8002868:	b21a      	sxth	r2, r3
 800286a:	2300      	movs	r3, #0
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	2300      	movs	r3, #0
 8002870:	4621      	mov	r1, r4
 8002872:	f44f 7089 	mov.w	r0, #274	; 0x112
 8002876:	f7fe ff47 	bl	8001708 <sendB2bData>
	    //sprintf((char*)txbuf, "%f \r\n", power_heat_data.chassis_power);
	    //HAL_UART_Transmit(&huart1, txbuf, strlen((char*)txbuf), HAL_MAX_DELAY);
	    //txbuf = *((float*)&power_heat_data.chassis_power);
	    //usart_printf("%f %d\r\n", calcChassisPower, 30);

        osDelay(5);
 800287a:	2005      	movs	r0, #5
 800287c:	f005 fd2a 	bl	80082d4 <osDelay>
	    for (int i = 0; i < 4; i++) {
 8002880:	e6ef      	b.n	8002662 <TaskChassis+0x16>
 8002882:	bf00      	nop
 8002884:	415a51ec 	.word	0x415a51ec
 8002888:	3f70a3d7 	.word	0x3f70a3d7
 800288c:	452c2000 	.word	0x452c2000
 8002890:	20000bc8 	.word	0x20000bc8
 8002894:	20000018 	.word	0x20000018
 8002898:	20000000 	.word	0x20000000
 800289c:	200002ac 	.word	0x200002ac
 80028a0:	0800db40 	.word	0x0800db40
 80028a4:	200002a4 	.word	0x200002a4
 80028a8:	2000000c 	.word	0x2000000c

080028ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028b0:	b672      	cpsid	i
}
 80028b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028b4:	e7fe      	b.n	80028b4 <Error_Handler+0x8>
	...

080028b8 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 80028bc:	2224      	movs	r2, #36	; 0x24
 80028be:	4903      	ldr	r1, [pc, #12]	; (80028cc <remote_control_init+0x14>)
 80028c0:	4803      	ldr	r0, [pc, #12]	; (80028d0 <remote_control_init+0x18>)
 80028c2:	f7ff f99f 	bl	8001c04 <RC_init>
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000c14 	.word	0x20000c14
 80028d0:	20000bf0 	.word	0x20000bf0

080028d4 <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 80028d8:	4b02      	ldr	r3, [pc, #8]	; (80028e4 <get_remote_control_point+0x10>)
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	20000bd8 	.word	0x20000bd8

080028e8 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 80028ee:	4b44      	ldr	r3, [pc, #272]	; (8002a00 <USART3_IRQHandler+0x118>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00b      	beq.n	8002914 <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 80028fc:	2300      	movs	r3, #0
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	4b3f      	ldr	r3, [pc, #252]	; (8002a00 <USART3_IRQHandler+0x118>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	607b      	str	r3, [r7, #4]
 8002908:	4b3d      	ldr	r3, [pc, #244]	; (8002a00 <USART3_IRQHandler+0x118>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 8002912:	e070      	b.n	80029f6 <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8002914:	4b3b      	ldr	r3, [pc, #236]	; (8002a04 <USART3_IRQHandler+0x11c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b00      	cmp	r3, #0
 800291e:	d06a      	beq.n	80029f6 <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8002920:	2300      	movs	r3, #0
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	4b36      	ldr	r3, [pc, #216]	; (8002a00 <USART3_IRQHandler+0x118>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <USART3_IRQHandler+0x118>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8002936:	4b34      	ldr	r3, [pc, #208]	; (8002a08 <USART3_IRQHandler+0x120>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d12d      	bne.n	80029a0 <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8002944:	4b30      	ldr	r3, [pc, #192]	; (8002a08 <USART3_IRQHandler+0x120>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	4b2f      	ldr	r3, [pc, #188]	; (8002a08 <USART3_IRQHandler+0x120>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8002954:	4b2c      	ldr	r3, [pc, #176]	; (8002a08 <USART3_IRQHandler+0x120>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	b29b      	uxth	r3, r3
 800295c:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8002960:	b29a      	uxth	r2, r3
 8002962:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <USART3_IRQHandler+0x124>)
 8002964:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8002966:	4b28      	ldr	r3, [pc, #160]	; (8002a08 <USART3_IRQHandler+0x120>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2224      	movs	r2, #36	; 0x24
 800296c:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 800296e:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <USART3_IRQHandler+0x120>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b24      	ldr	r3, [pc, #144]	; (8002a08 <USART3_IRQHandler+0x120>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800297c:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 800297e:	4b22      	ldr	r3, [pc, #136]	; (8002a08 <USART3_IRQHandler+0x120>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <USART3_IRQHandler+0x120>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f042 0201 	orr.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 800298e:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <USART3_IRQHandler+0x124>)
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	2b12      	cmp	r3, #18
 8002994:	d12f      	bne.n	80029f6 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8002996:	491e      	ldr	r1, [pc, #120]	; (8002a10 <USART3_IRQHandler+0x128>)
 8002998:	481e      	ldr	r0, [pc, #120]	; (8002a14 <USART3_IRQHandler+0x12c>)
 800299a:	f000 f841 	bl	8002a20 <sbus_to_rc>
}
 800299e:	e02a      	b.n	80029f6 <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80029a0:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <USART3_IRQHandler+0x120>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <USART3_IRQHandler+0x120>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0201 	bic.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 80029b0:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <USART3_IRQHandler+0x120>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 80029bc:	b29a      	uxth	r2, r3
 80029be:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <USART3_IRQHandler+0x124>)
 80029c0:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 80029c2:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <USART3_IRQHandler+0x120>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2224      	movs	r2, #36	; 0x24
 80029c8:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 80029ca:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <USART3_IRQHandler+0x130>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <USART3_IRQHandler+0x130>)
 80029d0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80029d4:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 80029d6:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <USART3_IRQHandler+0x120>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <USART3_IRQHandler+0x120>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <USART3_IRQHandler+0x124>)
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	2b12      	cmp	r3, #18
 80029ec:	d103      	bne.n	80029f6 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 80029ee:	4908      	ldr	r1, [pc, #32]	; (8002a10 <USART3_IRQHandler+0x128>)
 80029f0:	480a      	ldr	r0, [pc, #40]	; (8002a1c <USART3_IRQHandler+0x134>)
 80029f2:	f000 f815 	bl	8002a20 <sbus_to_rc>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000954 	.word	0x20000954
 8002a04:	40004800 	.word	0x40004800
 8002a08:	20000a9c 	.word	0x20000a9c
 8002a0c:	20000c38 	.word	0x20000c38
 8002a10:	20000bd8 	.word	0x20000bd8
 8002a14:	20000bf0 	.word	0x20000bf0
 8002a18:	40026028 	.word	0x40026028
 8002a1c:	20000c14 	.word	0x20000c14

08002a20 <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80ff 	beq.w	8002c30 <sbus_to_rc+0x210>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 80fb 	beq.w	8002c30 <sbus_to_rc+0x210>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	b21a      	sxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3301      	adds	r3, #1
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	021b      	lsls	r3, r3, #8
 8002a4c:	b21b      	sxth	r3, r3
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	b21b      	sxth	r3, r3
 8002a52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a56:	b21a      	sxth	r2, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	08db      	lsrs	r3, r3, #3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	b21a      	sxth	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	015b      	lsls	r3, r3, #5
 8002a74:	b21b      	sxth	r3, r3
 8002a76:	4313      	orrs	r3, r2
 8002a78:	b21b      	sxth	r3, r3
 8002a7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a7e:	b21a      	sxth	r2, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3302      	adds	r3, #2
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	099b      	lsrs	r3, r3, #6
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	b21a      	sxth	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3303      	adds	r3, #3
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	b21b      	sxth	r3, r3
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8002aac:	b21b      	sxth	r3, r3
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8002ab2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ab6:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	085b      	lsrs	r3, r3, #1
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	b21a      	sxth	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3305      	adds	r3, #5
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	01db      	lsls	r3, r3, #7
 8002ad4:	b21b      	sxth	r3, r3
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	b21b      	sxth	r3, r3
 8002ada:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ade:	b21a      	sxth	r2, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3305      	adds	r3, #5
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3305      	adds	r3, #5
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	109b      	asrs	r3, r3, #2
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3306      	adds	r3, #6
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	b21a      	sxth	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3307      	adds	r3, #7
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	b21b      	sxth	r3, r3
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	b21a      	sxth	r2, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3308      	adds	r3, #8
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	b21a      	sxth	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3309      	adds	r3, #9
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	b21b      	sxth	r3, r3
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	b21a      	sxth	r2, r3
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	330a      	adds	r3, #10
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	b21a      	sxth	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	330b      	adds	r3, #11
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	021b      	lsls	r3, r3, #8
 8002b64:	b21b      	sxth	r3, r3
 8002b66:	4313      	orrs	r3, r2
 8002b68:	b21a      	sxth	r2, r3
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	7b1b      	ldrb	r3, [r3, #12]
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	7b5b      	ldrb	r3, [r3, #13]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	330e      	adds	r3, #14
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	b21a      	sxth	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	330f      	adds	r3, #15
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	b21b      	sxth	r3, r3
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	b21b      	sxth	r3, r3
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3310      	adds	r3, #16
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	b21a      	sxth	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3311      	adds	r3, #17
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	021b      	lsls	r3, r3, #8
 8002bb6:	b21b      	sxth	r3, r3
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	b21a      	sxth	r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bc6:	b21b      	sxth	r3, r3
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	b21a      	sxth	r2, r3
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bdc:	b21b      	sxth	r3, r3
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	b21a      	sxth	r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002bf2:	b21b      	sxth	r3, r3
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	b21a      	sxth	r2, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002c08:	b21b      	sxth	r3, r3
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	b21a      	sxth	r2, r3
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c1e:	b21b      	sxth	r3, r3
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	b21a      	sxth	r2, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	811a      	strh	r2, [r3, #8]
 8002c2e:	e000      	b.n	8002c32 <sbus_to_rc+0x212>
        return;
 8002c30:	bf00      	nop
}
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <getRCchannel+0x24>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002c4e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002c52:	b21b      	sxth	r3, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	2000001c 	.word	0x2000001c

08002c64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	607b      	str	r3, [r7, #4]
 8002c6e:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_MspInit+0x54>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	4a11      	ldr	r2, [pc, #68]	; (8002cb8 <HAL_MspInit+0x54>)
 8002c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c78:	6453      	str	r3, [r2, #68]	; 0x44
 8002c7a:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <HAL_MspInit+0x54>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c82:	607b      	str	r3, [r7, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	603b      	str	r3, [r7, #0]
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_MspInit+0x54>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <HAL_MspInit+0x54>)
 8002c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c94:	6413      	str	r3, [r2, #64]	; 0x40
 8002c96:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_MspInit+0x54>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	210f      	movs	r1, #15
 8002ca6:	f06f 0001 	mvn.w	r0, #1
 8002caa:	f001 fd4a 	bl	8004742 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800

08002cbc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08c      	sub	sp, #48	; 0x30
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 031c 	add.w	r3, r7, #28
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a4a      	ldr	r2, [pc, #296]	; (8002e04 <HAL_CAN_MspInit+0x148>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d13d      	bne.n	8002d5a <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002cde:	4b4a      	ldr	r3, [pc, #296]	; (8002e08 <HAL_CAN_MspInit+0x14c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	4a48      	ldr	r2, [pc, #288]	; (8002e08 <HAL_CAN_MspInit+0x14c>)
 8002ce6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002ce8:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <HAL_CAN_MspInit+0x14c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d10d      	bne.n	8002d0c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	4b45      	ldr	r3, [pc, #276]	; (8002e0c <HAL_CAN_MspInit+0x150>)
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	4a44      	ldr	r2, [pc, #272]	; (8002e0c <HAL_CAN_MspInit+0x150>)
 8002cfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8002d00:	4b42      	ldr	r3, [pc, #264]	; (8002e0c <HAL_CAN_MspInit+0x150>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	4b3e      	ldr	r3, [pc, #248]	; (8002e0c <HAL_CAN_MspInit+0x150>)
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	4a3d      	ldr	r2, [pc, #244]	; (8002e0c <HAL_CAN_MspInit+0x150>)
 8002d16:	f043 0308 	orr.w	r3, r3, #8
 8002d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1c:	4b3b      	ldr	r3, [pc, #236]	; (8002e0c <HAL_CAN_MspInit+0x150>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d34:	2303      	movs	r3, #3
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002d38:	2309      	movs	r3, #9
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d3c:	f107 031c 	add.w	r3, r7, #28
 8002d40:	4619      	mov	r1, r3
 8002d42:	4833      	ldr	r0, [pc, #204]	; (8002e10 <HAL_CAN_MspInit+0x154>)
 8002d44:	f002 f936 	bl	8004fb4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2105      	movs	r1, #5
 8002d4c:	2014      	movs	r0, #20
 8002d4e:	f001 fcf8 	bl	8004742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002d52:	2014      	movs	r0, #20
 8002d54:	f001 fd11 	bl	800477a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002d58:	e04f      	b.n	8002dfa <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a2d      	ldr	r2, [pc, #180]	; (8002e14 <HAL_CAN_MspInit+0x158>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d14a      	bne.n	8002dfa <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002d64:	2300      	movs	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <HAL_CAN_MspInit+0x150>)
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	4a27      	ldr	r2, [pc, #156]	; (8002e0c <HAL_CAN_MspInit+0x150>)
 8002d6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d72:	6413      	str	r3, [r2, #64]	; 0x40
 8002d74:	4b25      	ldr	r3, [pc, #148]	; (8002e0c <HAL_CAN_MspInit+0x150>)
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002d80:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <HAL_CAN_MspInit+0x14c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3301      	adds	r3, #1
 8002d86:	4a20      	ldr	r2, [pc, #128]	; (8002e08 <HAL_CAN_MspInit+0x14c>)
 8002d88:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002d8a:	4b1f      	ldr	r3, [pc, #124]	; (8002e08 <HAL_CAN_MspInit+0x14c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d10d      	bne.n	8002dae <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <HAL_CAN_MspInit+0x150>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	4a1c      	ldr	r2, [pc, #112]	; (8002e0c <HAL_CAN_MspInit+0x150>)
 8002d9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002da0:	6413      	str	r3, [r2, #64]	; 0x40
 8002da2:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <HAL_CAN_MspInit+0x150>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <HAL_CAN_MspInit+0x150>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a15      	ldr	r2, [pc, #84]	; (8002e0c <HAL_CAN_MspInit+0x150>)
 8002db8:	f043 0302 	orr.w	r3, r3, #2
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <HAL_CAN_MspInit+0x150>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002dca:	2360      	movs	r3, #96	; 0x60
 8002dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002dda:	2309      	movs	r3, #9
 8002ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dde:	f107 031c 	add.w	r3, r7, #28
 8002de2:	4619      	mov	r1, r3
 8002de4:	480c      	ldr	r0, [pc, #48]	; (8002e18 <HAL_CAN_MspInit+0x15c>)
 8002de6:	f002 f8e5 	bl	8004fb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8002dea:	2200      	movs	r2, #0
 8002dec:	2105      	movs	r1, #5
 8002dee:	2040      	movs	r0, #64	; 0x40
 8002df0:	f001 fca7 	bl	8004742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002df4:	2040      	movs	r0, #64	; 0x40
 8002df6:	f001 fcc0 	bl	800477a <HAL_NVIC_EnableIRQ>
}
 8002dfa:	bf00      	nop
 8002dfc:	3730      	adds	r7, #48	; 0x30
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40006400 	.word	0x40006400
 8002e08:	20000c3c 	.word	0x20000c3c
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40020c00 	.word	0x40020c00
 8002e14:	40006800 	.word	0x40006800
 8002e18:	40020400 	.word	0x40020400

08002e1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	; 0x28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
 8002e32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a28      	ldr	r2, [pc, #160]	; (8002edc <HAL_SPI_MspInit+0xc0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d149      	bne.n	8002ed2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	4b27      	ldr	r3, [pc, #156]	; (8002ee0 <HAL_SPI_MspInit+0xc4>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e46:	4a26      	ldr	r2, [pc, #152]	; (8002ee0 <HAL_SPI_MspInit+0xc4>)
 8002e48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e4e:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <HAL_SPI_MspInit+0xc4>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	4b20      	ldr	r3, [pc, #128]	; (8002ee0 <HAL_SPI_MspInit+0xc4>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	4a1f      	ldr	r2, [pc, #124]	; (8002ee0 <HAL_SPI_MspInit+0xc4>)
 8002e64:	f043 0302 	orr.w	r3, r3, #2
 8002e68:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <HAL_SPI_MspInit+0xc4>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <HAL_SPI_MspInit+0xc4>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a18      	ldr	r2, [pc, #96]	; (8002ee0 <HAL_SPI_MspInit+0xc4>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b16      	ldr	r3, [pc, #88]	; (8002ee0 <HAL_SPI_MspInit+0xc4>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8002e92:	2318      	movs	r3, #24
 8002e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ea2:	2305      	movs	r3, #5
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea6:	f107 0314 	add.w	r3, r7, #20
 8002eaa:	4619      	mov	r1, r3
 8002eac:	480d      	ldr	r0, [pc, #52]	; (8002ee4 <HAL_SPI_MspInit+0xc8>)
 8002eae:	f002 f881 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002eb2:	2380      	movs	r3, #128	; 0x80
 8002eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ec2:	2305      	movs	r3, #5
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec6:	f107 0314 	add.w	r3, r7, #20
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4806      	ldr	r0, [pc, #24]	; (8002ee8 <HAL_SPI_MspInit+0xcc>)
 8002ece:	f002 f871 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ed2:	bf00      	nop
 8002ed4:	3728      	adds	r7, #40	; 0x28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40013000 	.word	0x40013000
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40020400 	.word	0x40020400
 8002ee8:	40020000 	.word	0x40020000

08002eec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a15      	ldr	r2, [pc, #84]	; (8002f50 <HAL_TIM_PWM_MspInit+0x64>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d10e      	bne.n	8002f1c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	4b14      	ldr	r3, [pc, #80]	; (8002f54 <HAL_TIM_PWM_MspInit+0x68>)
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	4a13      	ldr	r2, [pc, #76]	; (8002f54 <HAL_TIM_PWM_MspInit+0x68>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0e:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <HAL_TIM_PWM_MspInit+0x68>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002f1a:	e012      	b.n	8002f42 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a0d      	ldr	r2, [pc, #52]	; (8002f58 <HAL_TIM_PWM_MspInit+0x6c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d10d      	bne.n	8002f42 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <HAL_TIM_PWM_MspInit+0x68>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	4a09      	ldr	r2, [pc, #36]	; (8002f54 <HAL_TIM_PWM_MspInit+0x68>)
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	6453      	str	r3, [r2, #68]	; 0x44
 8002f36:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <HAL_TIM_PWM_MspInit+0x68>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40010000 	.word	0x40010000
 8002f54:	40023800 	.word	0x40023800
 8002f58:	40010400 	.word	0x40010400

08002f5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0b      	ldr	r2, [pc, #44]	; (8002f98 <HAL_TIM_Base_MspInit+0x3c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10d      	bne.n	8002f8a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <HAL_TIM_Base_MspInit+0x40>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	4a09      	ldr	r2, [pc, #36]	; (8002f9c <HAL_TIM_Base_MspInit+0x40>)
 8002f78:	f043 0304 	orr.w	r3, r3, #4
 8002f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7e:	4b07      	ldr	r3, [pc, #28]	; (8002f9c <HAL_TIM_Base_MspInit+0x40>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40000800 	.word	0x40000800
 8002f9c:	40023800 	.word	0x40023800

08002fa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08c      	sub	sp, #48	; 0x30
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa8:	f107 031c 	add.w	r3, r7, #28
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a46      	ldr	r2, [pc, #280]	; (80030d8 <HAL_TIM_MspPostInit+0x138>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d11f      	bne.n	8003002 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
 8002fc6:	4b45      	ldr	r3, [pc, #276]	; (80030dc <HAL_TIM_MspPostInit+0x13c>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	4a44      	ldr	r2, [pc, #272]	; (80030dc <HAL_TIM_MspPostInit+0x13c>)
 8002fcc:	f043 0310 	orr.w	r3, r3, #16
 8002fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd2:	4b42      	ldr	r3, [pc, #264]	; (80030dc <HAL_TIM_MspPostInit+0x13c>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	61bb      	str	r3, [r7, #24]
 8002fdc:	69bb      	ldr	r3, [r7, #24]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8002fde:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fec:	2300      	movs	r3, #0
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ff4:	f107 031c 	add.w	r3, r7, #28
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4839      	ldr	r0, [pc, #228]	; (80030e0 <HAL_TIM_MspPostInit+0x140>)
 8002ffc:	f001 ffda 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003000:	e065      	b.n	80030ce <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM4)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a37      	ldr	r2, [pc, #220]	; (80030e4 <HAL_TIM_MspPostInit+0x144>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d11f      	bne.n	800304c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	4b32      	ldr	r3, [pc, #200]	; (80030dc <HAL_TIM_MspPostInit+0x13c>)
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	4a31      	ldr	r2, [pc, #196]	; (80030dc <HAL_TIM_MspPostInit+0x13c>)
 8003016:	f043 0308 	orr.w	r3, r3, #8
 800301a:	6313      	str	r3, [r2, #48]	; 0x30
 800301c:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <HAL_TIM_MspPostInit+0x13c>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003028:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800302c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302e:	2302      	movs	r3, #2
 8003030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003036:	2300      	movs	r3, #0
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800303a:	2302      	movs	r3, #2
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800303e:	f107 031c 	add.w	r3, r7, #28
 8003042:	4619      	mov	r1, r3
 8003044:	4828      	ldr	r0, [pc, #160]	; (80030e8 <HAL_TIM_MspPostInit+0x148>)
 8003046:	f001 ffb5 	bl	8004fb4 <HAL_GPIO_Init>
}
 800304a:	e040      	b.n	80030ce <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM8)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a26      	ldr	r2, [pc, #152]	; (80030ec <HAL_TIM_MspPostInit+0x14c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d13b      	bne.n	80030ce <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <HAL_TIM_MspPostInit+0x13c>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4a1f      	ldr	r2, [pc, #124]	; (80030dc <HAL_TIM_MspPostInit+0x13c>)
 8003060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003064:	6313      	str	r3, [r2, #48]	; 0x30
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_TIM_MspPostInit+0x13c>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	4b19      	ldr	r3, [pc, #100]	; (80030dc <HAL_TIM_MspPostInit+0x13c>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	4a18      	ldr	r2, [pc, #96]	; (80030dc <HAL_TIM_MspPostInit+0x13c>)
 800307c:	f043 0304 	orr.w	r3, r3, #4
 8003080:	6313      	str	r3, [r2, #48]	; 0x30
 8003082:	4b16      	ldr	r3, [pc, #88]	; (80030dc <HAL_TIM_MspPostInit+0x13c>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800308e:	23c0      	movs	r3, #192	; 0xc0
 8003090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003092:	2302      	movs	r3, #2
 8003094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309a:	2300      	movs	r3, #0
 800309c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800309e:	2303      	movs	r3, #3
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80030a2:	f107 031c 	add.w	r3, r7, #28
 80030a6:	4619      	mov	r1, r3
 80030a8:	4811      	ldr	r0, [pc, #68]	; (80030f0 <HAL_TIM_MspPostInit+0x150>)
 80030aa:	f001 ff83 	bl	8004fb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030ae:	2340      	movs	r3, #64	; 0x40
 80030b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b2:	2302      	movs	r3, #2
 80030b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ba:	2300      	movs	r3, #0
 80030bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80030be:	2303      	movs	r3, #3
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030c2:	f107 031c 	add.w	r3, r7, #28
 80030c6:	4619      	mov	r1, r3
 80030c8:	480a      	ldr	r0, [pc, #40]	; (80030f4 <HAL_TIM_MspPostInit+0x154>)
 80030ca:	f001 ff73 	bl	8004fb4 <HAL_GPIO_Init>
}
 80030ce:	bf00      	nop
 80030d0:	3730      	adds	r7, #48	; 0x30
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40010000 	.word	0x40010000
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40000800 	.word	0x40000800
 80030e8:	40020c00 	.word	0x40020c00
 80030ec:	40010400 	.word	0x40010400
 80030f0:	40022000 	.word	0x40022000
 80030f4:	40020800 	.word	0x40020800

080030f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08e      	sub	sp, #56	; 0x38
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a90      	ldr	r2, [pc, #576]	; (8003358 <HAL_UART_MspInit+0x260>)
 8003116:	4293      	cmp	r3, r2
 8003118:	f040 80b2 	bne.w	8003280 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800311c:	2300      	movs	r3, #0
 800311e:	623b      	str	r3, [r7, #32]
 8003120:	4b8e      	ldr	r3, [pc, #568]	; (800335c <HAL_UART_MspInit+0x264>)
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	4a8d      	ldr	r2, [pc, #564]	; (800335c <HAL_UART_MspInit+0x264>)
 8003126:	f043 0310 	orr.w	r3, r3, #16
 800312a:	6453      	str	r3, [r2, #68]	; 0x44
 800312c:	4b8b      	ldr	r3, [pc, #556]	; (800335c <HAL_UART_MspInit+0x264>)
 800312e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	623b      	str	r3, [r7, #32]
 8003136:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	4b87      	ldr	r3, [pc, #540]	; (800335c <HAL_UART_MspInit+0x264>)
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	4a86      	ldr	r2, [pc, #536]	; (800335c <HAL_UART_MspInit+0x264>)
 8003142:	f043 0302 	orr.w	r3, r3, #2
 8003146:	6313      	str	r3, [r2, #48]	; 0x30
 8003148:	4b84      	ldr	r3, [pc, #528]	; (800335c <HAL_UART_MspInit+0x264>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003154:	2300      	movs	r3, #0
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	4b80      	ldr	r3, [pc, #512]	; (800335c <HAL_UART_MspInit+0x264>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	4a7f      	ldr	r2, [pc, #508]	; (800335c <HAL_UART_MspInit+0x264>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6313      	str	r3, [r2, #48]	; 0x30
 8003164:	4b7d      	ldr	r3, [pc, #500]	; (800335c <HAL_UART_MspInit+0x264>)
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003174:	2302      	movs	r3, #2
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003178:	2300      	movs	r3, #0
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800317c:	2303      	movs	r3, #3
 800317e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003180:	2307      	movs	r3, #7
 8003182:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003188:	4619      	mov	r1, r3
 800318a:	4875      	ldr	r0, [pc, #468]	; (8003360 <HAL_UART_MspInit+0x268>)
 800318c:	f001 ff12 	bl	8004fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003196:	2302      	movs	r3, #2
 8003198:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319e:	2303      	movs	r3, #3
 80031a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031a2:	2307      	movs	r3, #7
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031aa:	4619      	mov	r1, r3
 80031ac:	486d      	ldr	r0, [pc, #436]	; (8003364 <HAL_UART_MspInit+0x26c>)
 80031ae:	f001 ff01 	bl	8004fb4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80031b2:	4b6d      	ldr	r3, [pc, #436]	; (8003368 <HAL_UART_MspInit+0x270>)
 80031b4:	4a6d      	ldr	r2, [pc, #436]	; (800336c <HAL_UART_MspInit+0x274>)
 80031b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80031b8:	4b6b      	ldr	r3, [pc, #428]	; (8003368 <HAL_UART_MspInit+0x270>)
 80031ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031be:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031c0:	4b69      	ldr	r3, [pc, #420]	; (8003368 <HAL_UART_MspInit+0x270>)
 80031c2:	2240      	movs	r2, #64	; 0x40
 80031c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031c6:	4b68      	ldr	r3, [pc, #416]	; (8003368 <HAL_UART_MspInit+0x270>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031cc:	4b66      	ldr	r3, [pc, #408]	; (8003368 <HAL_UART_MspInit+0x270>)
 80031ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031d4:	4b64      	ldr	r3, [pc, #400]	; (8003368 <HAL_UART_MspInit+0x270>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031da:	4b63      	ldr	r3, [pc, #396]	; (8003368 <HAL_UART_MspInit+0x270>)
 80031dc:	2200      	movs	r2, #0
 80031de:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80031e0:	4b61      	ldr	r3, [pc, #388]	; (8003368 <HAL_UART_MspInit+0x270>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031e6:	4b60      	ldr	r3, [pc, #384]	; (8003368 <HAL_UART_MspInit+0x270>)
 80031e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80031ec:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031ee:	4b5e      	ldr	r3, [pc, #376]	; (8003368 <HAL_UART_MspInit+0x270>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80031f4:	485c      	ldr	r0, [pc, #368]	; (8003368 <HAL_UART_MspInit+0x270>)
 80031f6:	f001 fadb 	bl	80047b0 <HAL_DMA_Init>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003200:	f7ff fb54 	bl	80028ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a58      	ldr	r2, [pc, #352]	; (8003368 <HAL_UART_MspInit+0x270>)
 8003208:	635a      	str	r2, [r3, #52]	; 0x34
 800320a:	4a57      	ldr	r2, [pc, #348]	; (8003368 <HAL_UART_MspInit+0x270>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003210:	4b57      	ldr	r3, [pc, #348]	; (8003370 <HAL_UART_MspInit+0x278>)
 8003212:	4a58      	ldr	r2, [pc, #352]	; (8003374 <HAL_UART_MspInit+0x27c>)
 8003214:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003216:	4b56      	ldr	r3, [pc, #344]	; (8003370 <HAL_UART_MspInit+0x278>)
 8003218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800321c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800321e:	4b54      	ldr	r3, [pc, #336]	; (8003370 <HAL_UART_MspInit+0x278>)
 8003220:	2200      	movs	r2, #0
 8003222:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003224:	4b52      	ldr	r3, [pc, #328]	; (8003370 <HAL_UART_MspInit+0x278>)
 8003226:	2200      	movs	r2, #0
 8003228:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800322a:	4b51      	ldr	r3, [pc, #324]	; (8003370 <HAL_UART_MspInit+0x278>)
 800322c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003230:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003232:	4b4f      	ldr	r3, [pc, #316]	; (8003370 <HAL_UART_MspInit+0x278>)
 8003234:	2200      	movs	r2, #0
 8003236:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003238:	4b4d      	ldr	r3, [pc, #308]	; (8003370 <HAL_UART_MspInit+0x278>)
 800323a:	2200      	movs	r2, #0
 800323c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800323e:	4b4c      	ldr	r3, [pc, #304]	; (8003370 <HAL_UART_MspInit+0x278>)
 8003240:	2200      	movs	r2, #0
 8003242:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003244:	4b4a      	ldr	r3, [pc, #296]	; (8003370 <HAL_UART_MspInit+0x278>)
 8003246:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800324a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800324c:	4b48      	ldr	r3, [pc, #288]	; (8003370 <HAL_UART_MspInit+0x278>)
 800324e:	2200      	movs	r2, #0
 8003250:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003252:	4847      	ldr	r0, [pc, #284]	; (8003370 <HAL_UART_MspInit+0x278>)
 8003254:	f001 faac 	bl	80047b0 <HAL_DMA_Init>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 800325e:	f7ff fb25 	bl	80028ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a42      	ldr	r2, [pc, #264]	; (8003370 <HAL_UART_MspInit+0x278>)
 8003266:	639a      	str	r2, [r3, #56]	; 0x38
 8003268:	4a41      	ldr	r2, [pc, #260]	; (8003370 <HAL_UART_MspInit+0x278>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800326e:	2200      	movs	r2, #0
 8003270:	2105      	movs	r1, #5
 8003272:	2025      	movs	r0, #37	; 0x25
 8003274:	f001 fa65 	bl	8004742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003278:	2025      	movs	r0, #37	; 0x25
 800327a:	f001 fa7e 	bl	800477a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800327e:	e11c      	b.n	80034ba <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a3c      	ldr	r2, [pc, #240]	; (8003378 <HAL_UART_MspInit+0x280>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d17e      	bne.n	8003388 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	4b33      	ldr	r3, [pc, #204]	; (800335c <HAL_UART_MspInit+0x264>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	4a32      	ldr	r2, [pc, #200]	; (800335c <HAL_UART_MspInit+0x264>)
 8003294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003298:	6413      	str	r3, [r2, #64]	; 0x40
 800329a:	4b30      	ldr	r3, [pc, #192]	; (800335c <HAL_UART_MspInit+0x264>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	4b2c      	ldr	r3, [pc, #176]	; (800335c <HAL_UART_MspInit+0x264>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	4a2b      	ldr	r2, [pc, #172]	; (800335c <HAL_UART_MspInit+0x264>)
 80032b0:	f043 0304 	orr.w	r3, r3, #4
 80032b4:	6313      	str	r3, [r2, #48]	; 0x30
 80032b6:	4b29      	ldr	r3, [pc, #164]	; (800335c <HAL_UART_MspInit+0x264>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80032c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c8:	2302      	movs	r3, #2
 80032ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d0:	2303      	movs	r3, #3
 80032d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80032d4:	2307      	movs	r3, #7
 80032d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032dc:	4619      	mov	r1, r3
 80032de:	4827      	ldr	r0, [pc, #156]	; (800337c <HAL_UART_MspInit+0x284>)
 80032e0:	f001 fe68 	bl	8004fb4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80032e4:	4b26      	ldr	r3, [pc, #152]	; (8003380 <HAL_UART_MspInit+0x288>)
 80032e6:	4a27      	ldr	r2, [pc, #156]	; (8003384 <HAL_UART_MspInit+0x28c>)
 80032e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80032ea:	4b25      	ldr	r3, [pc, #148]	; (8003380 <HAL_UART_MspInit+0x288>)
 80032ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032f0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032f2:	4b23      	ldr	r3, [pc, #140]	; (8003380 <HAL_UART_MspInit+0x288>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032f8:	4b21      	ldr	r3, [pc, #132]	; (8003380 <HAL_UART_MspInit+0x288>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032fe:	4b20      	ldr	r3, [pc, #128]	; (8003380 <HAL_UART_MspInit+0x288>)
 8003300:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003304:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003306:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <HAL_UART_MspInit+0x288>)
 8003308:	2200      	movs	r2, #0
 800330a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800330c:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <HAL_UART_MspInit+0x288>)
 800330e:	2200      	movs	r2, #0
 8003310:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003312:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_UART_MspInit+0x288>)
 8003314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003318:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800331a:	4b19      	ldr	r3, [pc, #100]	; (8003380 <HAL_UART_MspInit+0x288>)
 800331c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003320:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003322:	4b17      	ldr	r3, [pc, #92]	; (8003380 <HAL_UART_MspInit+0x288>)
 8003324:	2200      	movs	r2, #0
 8003326:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003328:	4815      	ldr	r0, [pc, #84]	; (8003380 <HAL_UART_MspInit+0x288>)
 800332a:	f001 fa41 	bl	80047b0 <HAL_DMA_Init>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_UART_MspInit+0x240>
      Error_Handler();
 8003334:	f7ff faba 	bl	80028ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a11      	ldr	r2, [pc, #68]	; (8003380 <HAL_UART_MspInit+0x288>)
 800333c:	639a      	str	r2, [r3, #56]	; 0x38
 800333e:	4a10      	ldr	r2, [pc, #64]	; (8003380 <HAL_UART_MspInit+0x288>)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003344:	2200      	movs	r2, #0
 8003346:	2105      	movs	r1, #5
 8003348:	2027      	movs	r0, #39	; 0x27
 800334a:	f001 f9fa 	bl	8004742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800334e:	2027      	movs	r0, #39	; 0x27
 8003350:	f001 fa13 	bl	800477a <HAL_NVIC_EnableIRQ>
}
 8003354:	e0b1      	b.n	80034ba <HAL_UART_MspInit+0x3c2>
 8003356:	bf00      	nop
 8003358:	40011000 	.word	0x40011000
 800335c:	40023800 	.word	0x40023800
 8003360:	40020400 	.word	0x40020400
 8003364:	40020000 	.word	0x40020000
 8003368:	200009dc 	.word	0x200009dc
 800336c:	400264b8 	.word	0x400264b8
 8003370:	20000a3c 	.word	0x20000a3c
 8003374:	40026440 	.word	0x40026440
 8003378:	40004800 	.word	0x40004800
 800337c:	40020800 	.word	0x40020800
 8003380:	20000a9c 	.word	0x20000a9c
 8003384:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a4d      	ldr	r2, [pc, #308]	; (80034c4 <HAL_UART_MspInit+0x3cc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	f040 8093 	bne.w	80034ba <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	4b4b      	ldr	r3, [pc, #300]	; (80034c8 <HAL_UART_MspInit+0x3d0>)
 800339a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339c:	4a4a      	ldr	r2, [pc, #296]	; (80034c8 <HAL_UART_MspInit+0x3d0>)
 800339e:	f043 0320 	orr.w	r3, r3, #32
 80033a2:	6453      	str	r3, [r2, #68]	; 0x44
 80033a4:	4b48      	ldr	r3, [pc, #288]	; (80034c8 <HAL_UART_MspInit+0x3d0>)
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033b0:	2300      	movs	r3, #0
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	4b44      	ldr	r3, [pc, #272]	; (80034c8 <HAL_UART_MspInit+0x3d0>)
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	4a43      	ldr	r2, [pc, #268]	; (80034c8 <HAL_UART_MspInit+0x3d0>)
 80033ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033be:	6313      	str	r3, [r2, #48]	; 0x30
 80033c0:	4b41      	ldr	r3, [pc, #260]	; (80034c8 <HAL_UART_MspInit+0x3d0>)
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80033cc:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d2:	2302      	movs	r3, #2
 80033d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033da:	2303      	movs	r3, #3
 80033dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80033de:	2308      	movs	r3, #8
 80033e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e6:	4619      	mov	r1, r3
 80033e8:	4838      	ldr	r0, [pc, #224]	; (80034cc <HAL_UART_MspInit+0x3d4>)
 80033ea:	f001 fde3 	bl	8004fb4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80033ee:	4b38      	ldr	r3, [pc, #224]	; (80034d0 <HAL_UART_MspInit+0x3d8>)
 80033f0:	4a38      	ldr	r2, [pc, #224]	; (80034d4 <HAL_UART_MspInit+0x3dc>)
 80033f2:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80033f4:	4b36      	ldr	r3, [pc, #216]	; (80034d0 <HAL_UART_MspInit+0x3d8>)
 80033f6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80033fa:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033fc:	4b34      	ldr	r3, [pc, #208]	; (80034d0 <HAL_UART_MspInit+0x3d8>)
 80033fe:	2200      	movs	r2, #0
 8003400:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003402:	4b33      	ldr	r3, [pc, #204]	; (80034d0 <HAL_UART_MspInit+0x3d8>)
 8003404:	2200      	movs	r2, #0
 8003406:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003408:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <HAL_UART_MspInit+0x3d8>)
 800340a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800340e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003410:	4b2f      	ldr	r3, [pc, #188]	; (80034d0 <HAL_UART_MspInit+0x3d8>)
 8003412:	2200      	movs	r2, #0
 8003414:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003416:	4b2e      	ldr	r3, [pc, #184]	; (80034d0 <HAL_UART_MspInit+0x3d8>)
 8003418:	2200      	movs	r2, #0
 800341a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800341c:	4b2c      	ldr	r3, [pc, #176]	; (80034d0 <HAL_UART_MspInit+0x3d8>)
 800341e:	2200      	movs	r2, #0
 8003420:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003422:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_UART_MspInit+0x3d8>)
 8003424:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003428:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800342a:	4b29      	ldr	r3, [pc, #164]	; (80034d0 <HAL_UART_MspInit+0x3d8>)
 800342c:	2200      	movs	r2, #0
 800342e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003430:	4827      	ldr	r0, [pc, #156]	; (80034d0 <HAL_UART_MspInit+0x3d8>)
 8003432:	f001 f9bd 	bl	80047b0 <HAL_DMA_Init>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_UART_MspInit+0x348>
      Error_Handler();
 800343c:	f7ff fa36 	bl	80028ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a23      	ldr	r2, [pc, #140]	; (80034d0 <HAL_UART_MspInit+0x3d8>)
 8003444:	639a      	str	r2, [r3, #56]	; 0x38
 8003446:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <HAL_UART_MspInit+0x3d8>)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800344c:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <HAL_UART_MspInit+0x3e0>)
 800344e:	4a23      	ldr	r2, [pc, #140]	; (80034dc <HAL_UART_MspInit+0x3e4>)
 8003450:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003452:	4b21      	ldr	r3, [pc, #132]	; (80034d8 <HAL_UART_MspInit+0x3e0>)
 8003454:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003458:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800345a:	4b1f      	ldr	r3, [pc, #124]	; (80034d8 <HAL_UART_MspInit+0x3e0>)
 800345c:	2240      	movs	r2, #64	; 0x40
 800345e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003460:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_UART_MspInit+0x3e0>)
 8003462:	2200      	movs	r2, #0
 8003464:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003466:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <HAL_UART_MspInit+0x3e0>)
 8003468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800346c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800346e:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <HAL_UART_MspInit+0x3e0>)
 8003470:	2200      	movs	r2, #0
 8003472:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003474:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <HAL_UART_MspInit+0x3e0>)
 8003476:	2200      	movs	r2, #0
 8003478:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800347a:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <HAL_UART_MspInit+0x3e0>)
 800347c:	2200      	movs	r2, #0
 800347e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003480:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <HAL_UART_MspInit+0x3e0>)
 8003482:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003486:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003488:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <HAL_UART_MspInit+0x3e0>)
 800348a:	2200      	movs	r2, #0
 800348c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800348e:	4812      	ldr	r0, [pc, #72]	; (80034d8 <HAL_UART_MspInit+0x3e0>)
 8003490:	f001 f98e 	bl	80047b0 <HAL_DMA_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 800349a:	f7ff fa07 	bl	80028ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a0d      	ldr	r2, [pc, #52]	; (80034d8 <HAL_UART_MspInit+0x3e0>)
 80034a2:	635a      	str	r2, [r3, #52]	; 0x34
 80034a4:	4a0c      	ldr	r2, [pc, #48]	; (80034d8 <HAL_UART_MspInit+0x3e0>)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80034aa:	2200      	movs	r2, #0
 80034ac:	2105      	movs	r1, #5
 80034ae:	2047      	movs	r0, #71	; 0x47
 80034b0:	f001 f947 	bl	8004742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80034b4:	2047      	movs	r0, #71	; 0x47
 80034b6:	f001 f960 	bl	800477a <HAL_NVIC_EnableIRQ>
}
 80034ba:	bf00      	nop
 80034bc:	3738      	adds	r7, #56	; 0x38
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40011400 	.word	0x40011400
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40021800 	.word	0x40021800
 80034d0:	20000afc 	.word	0x20000afc
 80034d4:	40026428 	.word	0x40026428
 80034d8:	20000b5c 	.word	0x20000b5c
 80034dc:	400264a0 	.word	0x400264a0

080034e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80034e4:	f002 fb80 	bl	8005be8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034e8:	e7fe      	b.n	80034e8 <NMI_Handler+0x8>

080034ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ea:	b480      	push	{r7}
 80034ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034ee:	e7fe      	b.n	80034ee <HardFault_Handler+0x4>

080034f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034f4:	e7fe      	b.n	80034f4 <MemManage_Handler+0x4>

080034f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034f6:	b480      	push	{r7}
 80034f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034fa:	e7fe      	b.n	80034fa <BusFault_Handler+0x4>

080034fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003500:	e7fe      	b.n	8003500 <UsageFault_Handler+0x4>

08003502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003502:	b480      	push	{r7}
 8003504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003514:	f000 f9b8 	bl	8003888 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003518:	f006 fb14 	bl	8009b44 <xTaskGetSchedulerState>
 800351c:	4603      	mov	r3, r0
 800351e:	2b01      	cmp	r3, #1
 8003520:	d001      	beq.n	8003526 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003522:	f007 f8f9 	bl	800a718 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003530:	4802      	ldr	r0, [pc, #8]	; (800353c <DMA1_Stream1_IRQHandler+0x10>)
 8003532:	f001 fad5 	bl	8004ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000a9c 	.word	0x20000a9c

08003540 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003544:	4802      	ldr	r0, [pc, #8]	; (8003550 <CAN1_RX0_IRQHandler+0x10>)
 8003546:	f000 fdf2 	bl	800412e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000790 	.word	0x20000790

08003554 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003558:	4802      	ldr	r0, [pc, #8]	; (8003564 <USART1_IRQHandler+0x10>)
 800355a:	f003 fcc3 	bl	8006ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000910 	.word	0x20000910

08003568 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800356c:	4802      	ldr	r0, [pc, #8]	; (8003578 <DMA2_Stream1_IRQHandler+0x10>)
 800356e:	f001 fab7 	bl	8004ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000afc 	.word	0x20000afc

0800357c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003580:	4802      	ldr	r0, [pc, #8]	; (800358c <DMA2_Stream2_IRQHandler+0x10>)
 8003582:	f001 faad 	bl	8004ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20000a3c 	.word	0x20000a3c

08003590 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003594:	4802      	ldr	r0, [pc, #8]	; (80035a0 <CAN2_RX0_IRQHandler+0x10>)
 8003596:	f000 fdca 	bl	800412e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	200007b8 	.word	0x200007b8

080035a4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80035a8:	4802      	ldr	r0, [pc, #8]	; (80035b4 <DMA2_Stream6_IRQHandler+0x10>)
 80035aa:	f001 fa99 	bl	8004ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000b5c 	.word	0x20000b5c

080035b8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80035bc:	4802      	ldr	r0, [pc, #8]	; (80035c8 <DMA2_Stream7_IRQHandler+0x10>)
 80035be:	f001 fa8f 	bl	8004ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	200009dc 	.word	0x200009dc

080035cc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80035d0:	4802      	ldr	r0, [pc, #8]	; (80035dc <USART6_IRQHandler+0x10>)
 80035d2:	f003 fc87 	bl	8006ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000998 	.word	0x20000998

080035e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return 1;
 80035e4:	2301      	movs	r3, #1
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <_kill>:

int _kill(int pid, int sig)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035fa:	f007 fb07 	bl	800ac0c <__errno>
 80035fe:	4603      	mov	r3, r0
 8003600:	2216      	movs	r2, #22
 8003602:	601a      	str	r2, [r3, #0]
  return -1;
 8003604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <_exit>:

void _exit (int status)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003618:	f04f 31ff 	mov.w	r1, #4294967295
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff ffe7 	bl	80035f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003622:	e7fe      	b.n	8003622 <_exit+0x12>

08003624 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	e00a      	b.n	800364c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003636:	f3af 8000 	nop.w
 800363a:	4601      	mov	r1, r0
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	60ba      	str	r2, [r7, #8]
 8003642:	b2ca      	uxtb	r2, r1
 8003644:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	3301      	adds	r3, #1
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	429a      	cmp	r2, r3
 8003652:	dbf0      	blt.n	8003636 <_read+0x12>
  }

  return len;
 8003654:	687b      	ldr	r3, [r7, #4]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b086      	sub	sp, #24
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	e009      	b.n	8003684 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	60ba      	str	r2, [r7, #8]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	3301      	adds	r3, #1
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	429a      	cmp	r2, r3
 800368a:	dbf1      	blt.n	8003670 <_write+0x12>
  }
  return len;
 800368c:	687b      	ldr	r3, [r7, #4]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <_close>:

int _close(int file)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800369e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036be:	605a      	str	r2, [r3, #4]
  return 0;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <_isatty>:

int _isatty(int file)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036d6:	2301      	movs	r3, #1
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003708:	4a14      	ldr	r2, [pc, #80]	; (800375c <_sbrk+0x5c>)
 800370a:	4b15      	ldr	r3, [pc, #84]	; (8003760 <_sbrk+0x60>)
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003714:	4b13      	ldr	r3, [pc, #76]	; (8003764 <_sbrk+0x64>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800371c:	4b11      	ldr	r3, [pc, #68]	; (8003764 <_sbrk+0x64>)
 800371e:	4a12      	ldr	r2, [pc, #72]	; (8003768 <_sbrk+0x68>)
 8003720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <_sbrk+0x64>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4413      	add	r3, r2
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	429a      	cmp	r2, r3
 800372e:	d207      	bcs.n	8003740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003730:	f007 fa6c 	bl	800ac0c <__errno>
 8003734:	4603      	mov	r3, r0
 8003736:	220c      	movs	r2, #12
 8003738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800373a:	f04f 33ff 	mov.w	r3, #4294967295
 800373e:	e009      	b.n	8003754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003740:	4b08      	ldr	r3, [pc, #32]	; (8003764 <_sbrk+0x64>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003746:	4b07      	ldr	r3, [pc, #28]	; (8003764 <_sbrk+0x64>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	4a05      	ldr	r2, [pc, #20]	; (8003764 <_sbrk+0x64>)
 8003750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003752:	68fb      	ldr	r3, [r7, #12]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20020000 	.word	0x20020000
 8003760:	00000400 	.word	0x00000400
 8003764:	20000c40 	.word	0x20000c40
 8003768:	20005668 	.word	0x20005668

0800376c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <SystemInit+0x20>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	4a05      	ldr	r2, [pc, #20]	; (800378c <SystemInit+0x20>)
 8003778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800377c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003780:	bf00      	nop
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003794:	480d      	ldr	r0, [pc, #52]	; (80037cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003796:	490e      	ldr	r1, [pc, #56]	; (80037d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003798:	4a0e      	ldr	r2, [pc, #56]	; (80037d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800379a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800379c:	e002      	b.n	80037a4 <LoopCopyDataInit>

0800379e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800379e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037a2:	3304      	adds	r3, #4

080037a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037a8:	d3f9      	bcc.n	800379e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037aa:	4a0b      	ldr	r2, [pc, #44]	; (80037d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80037ac:	4c0b      	ldr	r4, [pc, #44]	; (80037dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80037ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037b0:	e001      	b.n	80037b6 <LoopFillZerobss>

080037b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037b4:	3204      	adds	r2, #4

080037b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037b8:	d3fb      	bcc.n	80037b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037ba:	f7ff ffd7 	bl	800376c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037be:	f007 fb21 	bl	800ae04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037c2:	f7fe fa7b 	bl	8001cbc <main>
  bx  lr    
 80037c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80037c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037d0:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80037d4:	0800dfb4 	.word	0x0800dfb4
  ldr r2, =_sbss
 80037d8:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80037dc:	20005668 	.word	0x20005668

080037e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037e0:	e7fe      	b.n	80037e0 <ADC_IRQHandler>
	...

080037e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037e8:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <HAL_Init+0x40>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a0d      	ldr	r2, [pc, #52]	; (8003824 <HAL_Init+0x40>)
 80037ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037f4:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <HAL_Init+0x40>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a0a      	ldr	r2, [pc, #40]	; (8003824 <HAL_Init+0x40>)
 80037fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <HAL_Init+0x40>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a07      	ldr	r2, [pc, #28]	; (8003824 <HAL_Init+0x40>)
 8003806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800380c:	2003      	movs	r0, #3
 800380e:	f000 ff8d 	bl	800472c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003812:	200f      	movs	r0, #15
 8003814:	f000 f808 	bl	8003828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003818:	f7ff fa24 	bl	8002c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40023c00 	.word	0x40023c00

08003828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003830:	4b12      	ldr	r3, [pc, #72]	; (800387c <HAL_InitTick+0x54>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b12      	ldr	r3, [pc, #72]	; (8003880 <HAL_InitTick+0x58>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	4619      	mov	r1, r3
 800383a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800383e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003842:	fbb2 f3f3 	udiv	r3, r2, r3
 8003846:	4618      	mov	r0, r3
 8003848:	f000 ffa5 	bl	8004796 <HAL_SYSTICK_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e00e      	b.n	8003874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b0f      	cmp	r3, #15
 800385a:	d80a      	bhi.n	8003872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800385c:	2200      	movs	r2, #0
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	f04f 30ff 	mov.w	r0, #4294967295
 8003864:	f000 ff6d 	bl	8004742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003868:	4a06      	ldr	r2, [pc, #24]	; (8003884 <HAL_InitTick+0x5c>)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e000      	b.n	8003874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20000020 	.word	0x20000020
 8003880:	20000028 	.word	0x20000028
 8003884:	20000024 	.word	0x20000024

08003888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800388c:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_IncTick+0x20>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	4b06      	ldr	r3, [pc, #24]	; (80038ac <HAL_IncTick+0x24>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4413      	add	r3, r2
 8003898:	4a04      	ldr	r2, [pc, #16]	; (80038ac <HAL_IncTick+0x24>)
 800389a:	6013      	str	r3, [r2, #0]
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000028 	.word	0x20000028
 80038ac:	20000c44 	.word	0x20000c44

080038b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return uwTick;
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_GetTick+0x14>)
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000c44 	.word	0x20000c44

080038c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e0ed      	b.n	8003ab6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d102      	bne.n	80038ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff f9e8 	bl	8002cbc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038fc:	f7ff ffd8 	bl	80038b0 <HAL_GetTick>
 8003900:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003902:	e012      	b.n	800392a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003904:	f7ff ffd4 	bl	80038b0 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b0a      	cmp	r3, #10
 8003910:	d90b      	bls.n	800392a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2205      	movs	r2, #5
 8003922:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e0c5      	b.n	8003ab6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0e5      	beq.n	8003904 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0202 	bic.w	r2, r2, #2
 8003946:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003948:	f7ff ffb2 	bl	80038b0 <HAL_GetTick>
 800394c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800394e:	e012      	b.n	8003976 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003950:	f7ff ffae 	bl	80038b0 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b0a      	cmp	r3, #10
 800395c:	d90b      	bls.n	8003976 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2205      	movs	r2, #5
 800396e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e09f      	b.n	8003ab6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e5      	bne.n	8003950 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	7e1b      	ldrb	r3, [r3, #24]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d108      	bne.n	800399e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	e007      	b.n	80039ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7e5b      	ldrb	r3, [r3, #25]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d108      	bne.n	80039c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	e007      	b.n	80039d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	7e9b      	ldrb	r3, [r3, #26]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d108      	bne.n	80039f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0220 	orr.w	r2, r2, #32
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	e007      	b.n	8003a02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0220 	bic.w	r2, r2, #32
 8003a00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	7edb      	ldrb	r3, [r3, #27]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d108      	bne.n	8003a1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0210 	bic.w	r2, r2, #16
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	e007      	b.n	8003a2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0210 	orr.w	r2, r2, #16
 8003a2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	7f1b      	ldrb	r3, [r3, #28]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d108      	bne.n	8003a46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0208 	orr.w	r2, r2, #8
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	e007      	b.n	8003a56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0208 	bic.w	r2, r2, #8
 8003a54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	7f5b      	ldrb	r3, [r3, #29]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d108      	bne.n	8003a70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0204 	orr.w	r2, r2, #4
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	e007      	b.n	8003a80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0204 	bic.w	r2, r2, #4
 8003a7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	ea42 0103 	orr.w	r1, r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	1e5a      	subs	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ad6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003ad8:	7cfb      	ldrb	r3, [r7, #19]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d003      	beq.n	8003ae6 <HAL_CAN_ConfigFilter+0x26>
 8003ade:	7cfb      	ldrb	r3, [r7, #19]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	f040 80be 	bne.w	8003c62 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003ae6:	4b65      	ldr	r3, [pc, #404]	; (8003c7c <HAL_CAN_ConfigFilter+0x1bc>)
 8003ae8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003af0:	f043 0201 	orr.w	r2, r3, #1
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b00:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	431a      	orrs	r2, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 031f 	and.w	r3, r3, #31
 8003b26:	2201      	movs	r2, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	43db      	mvns	r3, r3
 8003b38:	401a      	ands	r2, r3
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d123      	bne.n	8003b90 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	43db      	mvns	r3, r3
 8003b52:	401a      	ands	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003b6a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	3248      	adds	r2, #72	; 0x48
 8003b70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b86:	6979      	ldr	r1, [r7, #20]
 8003b88:	3348      	adds	r3, #72	; 0x48
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	440b      	add	r3, r1
 8003b8e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d122      	bne.n	8003bde <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003bb8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	3248      	adds	r2, #72	; 0x48
 8003bbe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003bd2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003bd4:	6979      	ldr	r1, [r7, #20]
 8003bd6:	3348      	adds	r3, #72	; 0x48
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	440b      	add	r3, r1
 8003bdc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	401a      	ands	r2, r3
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003bf8:	e007      	b.n	8003c0a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	401a      	ands	r2, r3
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003c24:	e007      	b.n	8003c36 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d107      	bne.n	8003c4e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c54:	f023 0201 	bic.w	r2, r3, #1
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	e006      	b.n	8003c70 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
  }
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	40006400 	.word	0x40006400

08003c80 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d12e      	bne.n	8003cf2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0201 	bic.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003cac:	f7ff fe00 	bl	80038b0 <HAL_GetTick>
 8003cb0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003cb2:	e012      	b.n	8003cda <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003cb4:	f7ff fdfc 	bl	80038b0 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b0a      	cmp	r3, #10
 8003cc0:	d90b      	bls.n	8003cda <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2205      	movs	r2, #5
 8003cd2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e012      	b.n	8003d00 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1e5      	bne.n	8003cb4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e006      	b.n	8003d00 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
  }
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b089      	sub	sp, #36	; 0x24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d1c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d26:	7ffb      	ldrb	r3, [r7, #31]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d003      	beq.n	8003d34 <HAL_CAN_AddTxMessage+0x2c>
 8003d2c:	7ffb      	ldrb	r3, [r7, #31]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	f040 80b8 	bne.w	8003ea4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10a      	bne.n	8003d54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d105      	bne.n	8003d54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 80a0 	beq.w	8003e94 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	0e1b      	lsrs	r3, r3, #24
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d907      	bls.n	8003d74 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e09e      	b.n	8003eb2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003d74:	2201      	movs	r2, #1
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10d      	bne.n	8003da2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003d90:	68f9      	ldr	r1, [r7, #12]
 8003d92:	6809      	ldr	r1, [r1, #0]
 8003d94:	431a      	orrs	r2, r3
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	3318      	adds	r3, #24
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	440b      	add	r3, r1
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	e00f      	b.n	8003dc2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003dac:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003db2:	68f9      	ldr	r1, [r7, #12]
 8003db4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003db6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	3318      	adds	r3, #24
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	440b      	add	r3, r1
 8003dc0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6819      	ldr	r1, [r3, #0]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	3318      	adds	r3, #24
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	440b      	add	r3, r1
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	7d1b      	ldrb	r3, [r3, #20]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d111      	bne.n	8003e02 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	3318      	adds	r3, #24
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	4413      	add	r3, r2
 8003dea:	3304      	adds	r3, #4
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	6811      	ldr	r1, [r2, #0]
 8003df2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	3318      	adds	r3, #24
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	440b      	add	r3, r1
 8003dfe:	3304      	adds	r3, #4
 8003e00:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3307      	adds	r3, #7
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	061a      	lsls	r2, r3, #24
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3306      	adds	r3, #6
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	041b      	lsls	r3, r3, #16
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3305      	adds	r3, #5
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	3204      	adds	r2, #4
 8003e22:	7812      	ldrb	r2, [r2, #0]
 8003e24:	4610      	mov	r0, r2
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	6811      	ldr	r1, [r2, #0]
 8003e2a:	ea43 0200 	orr.w	r2, r3, r0
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	440b      	add	r3, r1
 8003e34:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003e38:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3303      	adds	r3, #3
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	061a      	lsls	r2, r3, #24
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3302      	adds	r3, #2
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	041b      	lsls	r3, r3, #16
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	4313      	orrs	r3, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	7812      	ldrb	r2, [r2, #0]
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	6811      	ldr	r1, [r2, #0]
 8003e60:	ea43 0200 	orr.w	r2, r3, r0
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	440b      	add	r3, r1
 8003e6a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003e6e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	3318      	adds	r3, #24
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	4413      	add	r3, r2
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	6811      	ldr	r1, [r2, #0]
 8003e82:	f043 0201 	orr.w	r2, r3, #1
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	3318      	adds	r3, #24
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	440b      	add	r3, r1
 8003e8e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e00e      	b.n	8003eb2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e006      	b.n	8003eb2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
  }
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3724      	adds	r7, #36	; 0x24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b087      	sub	sp, #28
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ed2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d003      	beq.n	8003ee2 <HAL_CAN_GetRxMessage+0x24>
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	f040 80f3 	bne.w	80040c8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10e      	bne.n	8003f06 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d116      	bne.n	8003f24 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e0e7      	b.n	80040d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d107      	bne.n	8003f24 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0d8      	b.n	80040d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	331b      	adds	r3, #27
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	4413      	add	r3, r2
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0204 	and.w	r2, r3, #4
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10c      	bne.n	8003f5c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	331b      	adds	r3, #27
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	4413      	add	r3, r2
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	0d5b      	lsrs	r3, r3, #21
 8003f52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	e00b      	b.n	8003f74 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	331b      	adds	r3, #27
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	4413      	add	r3, r2
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	08db      	lsrs	r3, r3, #3
 8003f6c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	331b      	adds	r3, #27
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	4413      	add	r3, r2
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0202 	and.w	r2, r3, #2
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	331b      	adds	r3, #27
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	4413      	add	r3, r2
 8003f96:	3304      	adds	r3, #4
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 020f 	and.w	r2, r3, #15
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	331b      	adds	r3, #27
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	4413      	add	r3, r2
 8003fae:	3304      	adds	r3, #4
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	331b      	adds	r3, #27
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	0c1b      	lsrs	r3, r3, #16
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	0a1a      	lsrs	r2, r3, #8
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	4413      	add	r3, r2
 800400c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	0c1a      	lsrs	r2, r3, #16
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	3302      	adds	r3, #2
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	4413      	add	r3, r2
 8004026:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	0e1a      	lsrs	r2, r3, #24
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	3303      	adds	r3, #3
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	4413      	add	r3, r2
 8004040:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	3304      	adds	r3, #4
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	4413      	add	r3, r2
 8004058:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	0a1a      	lsrs	r2, r3, #8
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	3305      	adds	r3, #5
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	4413      	add	r3, r2
 8004072:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	0c1a      	lsrs	r2, r3, #16
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	3306      	adds	r3, #6
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	4413      	add	r3, r2
 800408c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	0e1a      	lsrs	r2, r3, #24
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	3307      	adds	r3, #7
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d108      	bne.n	80040b4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0220 	orr.w	r2, r2, #32
 80040b0:	60da      	str	r2, [r3, #12]
 80040b2:	e007      	b.n	80040c4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0220 	orr.w	r2, r2, #32
 80040c2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	e006      	b.n	80040d6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
  }
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b085      	sub	sp, #20
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040f2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d002      	beq.n	8004100 <HAL_CAN_ActivateNotification+0x1e>
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d109      	bne.n	8004114 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6959      	ldr	r1, [r3, #20]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004110:	2300      	movs	r3, #0
 8004112:	e006      	b.n	8004122 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
  }
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b08a      	sub	sp, #40	; 0x28
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004136:	2300      	movs	r3, #0
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d07c      	beq.n	800426e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d023      	beq.n	80041c6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2201      	movs	r2, #1
 8004184:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f983 	bl	800449c <HAL_CAN_TxMailbox0CompleteCallback>
 8004196:	e016      	b.n	80041c6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d004      	beq.n	80041ac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
 80041aa:	e00c      	b.n	80041c6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d004      	beq.n	80041c0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
 80041be:	e002      	b.n	80041c6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f989 	bl	80044d8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d024      	beq.n	800421a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f963 	bl	80044b0 <HAL_CAN_TxMailbox1CompleteCallback>
 80041ea:	e016      	b.n	800421a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d004      	beq.n	8004200 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
 80041fe:	e00c      	b.n	800421a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004206:	2b00      	cmp	r3, #0
 8004208:	d004      	beq.n	8004214 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
 8004212:	e002      	b.n	800421a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f969 	bl	80044ec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d024      	beq.n	800426e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800422c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f943 	bl	80044c4 <HAL_CAN_TxMailbox2CompleteCallback>
 800423e:	e016      	b.n	800426e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d004      	beq.n	8004254 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
 8004252:	e00c      	b.n	800426e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d004      	beq.n	8004268 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
 8004266:	e002      	b.n	800426e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f949 	bl	8004500 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00c      	beq.n	8004292 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b00      	cmp	r3, #0
 8004280:	d007      	beq.n	8004292 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004288:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2210      	movs	r2, #16
 8004290:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00b      	beq.n	80042b4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d006      	beq.n	80042b4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2208      	movs	r2, #8
 80042ac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f930 	bl	8004514 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7fc fded 	bl	8000eac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00c      	beq.n	80042f6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2210      	movs	r2, #16
 80042f4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00b      	beq.n	8004318 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d006      	beq.n	8004318 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2208      	movs	r2, #8
 8004310:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f912 	bl	800453c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	f003 0310 	and.w	r3, r3, #16
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f8f9 	bl	8004528 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00b      	beq.n	8004358 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	2b00      	cmp	r3, #0
 8004348:	d006      	beq.n	8004358 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2210      	movs	r2, #16
 8004350:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f8fc 	bl	8004550 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00b      	beq.n	800437a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	d006      	beq.n	800437a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2208      	movs	r2, #8
 8004372:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f8f5 	bl	8004564 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d07b      	beq.n	800447c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	d072      	beq.n	8004474 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	f043 0302 	orr.w	r3, r3, #2
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	f043 0304 	orr.w	r3, r3, #4
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d043      	beq.n	8004474 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d03e      	beq.n	8004474 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043fc:	2b60      	cmp	r3, #96	; 0x60
 80043fe:	d02b      	beq.n	8004458 <HAL_CAN_IRQHandler+0x32a>
 8004400:	2b60      	cmp	r3, #96	; 0x60
 8004402:	d82e      	bhi.n	8004462 <HAL_CAN_IRQHandler+0x334>
 8004404:	2b50      	cmp	r3, #80	; 0x50
 8004406:	d022      	beq.n	800444e <HAL_CAN_IRQHandler+0x320>
 8004408:	2b50      	cmp	r3, #80	; 0x50
 800440a:	d82a      	bhi.n	8004462 <HAL_CAN_IRQHandler+0x334>
 800440c:	2b40      	cmp	r3, #64	; 0x40
 800440e:	d019      	beq.n	8004444 <HAL_CAN_IRQHandler+0x316>
 8004410:	2b40      	cmp	r3, #64	; 0x40
 8004412:	d826      	bhi.n	8004462 <HAL_CAN_IRQHandler+0x334>
 8004414:	2b30      	cmp	r3, #48	; 0x30
 8004416:	d010      	beq.n	800443a <HAL_CAN_IRQHandler+0x30c>
 8004418:	2b30      	cmp	r3, #48	; 0x30
 800441a:	d822      	bhi.n	8004462 <HAL_CAN_IRQHandler+0x334>
 800441c:	2b10      	cmp	r3, #16
 800441e:	d002      	beq.n	8004426 <HAL_CAN_IRQHandler+0x2f8>
 8004420:	2b20      	cmp	r3, #32
 8004422:	d005      	beq.n	8004430 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004424:	e01d      	b.n	8004462 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	f043 0308 	orr.w	r3, r3, #8
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800442e:	e019      	b.n	8004464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	f043 0310 	orr.w	r3, r3, #16
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004438:	e014      	b.n	8004464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	f043 0320 	orr.w	r3, r3, #32
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004442:	e00f      	b.n	8004464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800444c:	e00a      	b.n	8004464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004456:	e005      	b.n	8004464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800445e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004460:	e000      	b.n	8004464 <HAL_CAN_IRQHandler+0x336>
            break;
 8004462:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004472:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2204      	movs	r2, #4
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	2b00      	cmp	r3, #0
 8004480:	d008      	beq.n	8004494 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f872 	bl	8004578 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004494:	bf00      	nop
 8004496:	3728      	adds	r7, #40	; 0x28
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800459c:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <__NVIC_SetPriorityGrouping+0x44>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045a8:	4013      	ands	r3, r2
 80045aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045be:	4a04      	ldr	r2, [pc, #16]	; (80045d0 <__NVIC_SetPriorityGrouping+0x44>)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	60d3      	str	r3, [r2, #12]
}
 80045c4:	bf00      	nop
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	e000ed00 	.word	0xe000ed00

080045d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045d8:	4b04      	ldr	r3, [pc, #16]	; (80045ec <__NVIC_GetPriorityGrouping+0x18>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	0a1b      	lsrs	r3, r3, #8
 80045de:	f003 0307 	and.w	r3, r3, #7
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	e000ed00 	.word	0xe000ed00

080045f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	4603      	mov	r3, r0
 80045f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	db0b      	blt.n	800461a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004602:	79fb      	ldrb	r3, [r7, #7]
 8004604:	f003 021f 	and.w	r2, r3, #31
 8004608:	4907      	ldr	r1, [pc, #28]	; (8004628 <__NVIC_EnableIRQ+0x38>)
 800460a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	2001      	movs	r0, #1
 8004612:	fa00 f202 	lsl.w	r2, r0, r2
 8004616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	e000e100 	.word	0xe000e100

0800462c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	6039      	str	r1, [r7, #0]
 8004636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463c:	2b00      	cmp	r3, #0
 800463e:	db0a      	blt.n	8004656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	b2da      	uxtb	r2, r3
 8004644:	490c      	ldr	r1, [pc, #48]	; (8004678 <__NVIC_SetPriority+0x4c>)
 8004646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464a:	0112      	lsls	r2, r2, #4
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	440b      	add	r3, r1
 8004650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004654:	e00a      	b.n	800466c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	b2da      	uxtb	r2, r3
 800465a:	4908      	ldr	r1, [pc, #32]	; (800467c <__NVIC_SetPriority+0x50>)
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	3b04      	subs	r3, #4
 8004664:	0112      	lsls	r2, r2, #4
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	440b      	add	r3, r1
 800466a:	761a      	strb	r2, [r3, #24]
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	e000e100 	.word	0xe000e100
 800467c:	e000ed00 	.word	0xe000ed00

08004680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004680:	b480      	push	{r7}
 8004682:	b089      	sub	sp, #36	; 0x24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f1c3 0307 	rsb	r3, r3, #7
 800469a:	2b04      	cmp	r3, #4
 800469c:	bf28      	it	cs
 800469e:	2304      	movcs	r3, #4
 80046a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	3304      	adds	r3, #4
 80046a6:	2b06      	cmp	r3, #6
 80046a8:	d902      	bls.n	80046b0 <NVIC_EncodePriority+0x30>
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	3b03      	subs	r3, #3
 80046ae:	e000      	b.n	80046b2 <NVIC_EncodePriority+0x32>
 80046b0:	2300      	movs	r3, #0
 80046b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b4:	f04f 32ff 	mov.w	r2, #4294967295
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	43da      	mvns	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	401a      	ands	r2, r3
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046c8:	f04f 31ff 	mov.w	r1, #4294967295
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	fa01 f303 	lsl.w	r3, r1, r3
 80046d2:	43d9      	mvns	r1, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046d8:	4313      	orrs	r3, r2
         );
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3724      	adds	r7, #36	; 0x24
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
	...

080046e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046f8:	d301      	bcc.n	80046fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046fa:	2301      	movs	r3, #1
 80046fc:	e00f      	b.n	800471e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046fe:	4a0a      	ldr	r2, [pc, #40]	; (8004728 <SysTick_Config+0x40>)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3b01      	subs	r3, #1
 8004704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004706:	210f      	movs	r1, #15
 8004708:	f04f 30ff 	mov.w	r0, #4294967295
 800470c:	f7ff ff8e 	bl	800462c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <SysTick_Config+0x40>)
 8004712:	2200      	movs	r2, #0
 8004714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004716:	4b04      	ldr	r3, [pc, #16]	; (8004728 <SysTick_Config+0x40>)
 8004718:	2207      	movs	r2, #7
 800471a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	e000e010 	.word	0xe000e010

0800472c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7ff ff29 	bl	800458c <__NVIC_SetPriorityGrouping>
}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004742:	b580      	push	{r7, lr}
 8004744:	b086      	sub	sp, #24
 8004746:	af00      	add	r7, sp, #0
 8004748:	4603      	mov	r3, r0
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004754:	f7ff ff3e 	bl	80045d4 <__NVIC_GetPriorityGrouping>
 8004758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	6978      	ldr	r0, [r7, #20]
 8004760:	f7ff ff8e 	bl	8004680 <NVIC_EncodePriority>
 8004764:	4602      	mov	r2, r0
 8004766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800476a:	4611      	mov	r1, r2
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff ff5d 	bl	800462c <__NVIC_SetPriority>
}
 8004772:	bf00      	nop
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	4603      	mov	r3, r0
 8004782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff ff31 	bl	80045f0 <__NVIC_EnableIRQ>
}
 800478e:	bf00      	nop
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff ffa2 	bl	80046e8 <SysTick_Config>
 80047a4:	4603      	mov	r3, r0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047bc:	f7ff f878 	bl	80038b0 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e099      	b.n	8004900 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0201 	bic.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047ec:	e00f      	b.n	800480e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047ee:	f7ff f85f 	bl	80038b0 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b05      	cmp	r3, #5
 80047fa:	d908      	bls.n	800480e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2203      	movs	r2, #3
 8004806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e078      	b.n	8004900 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e8      	bne.n	80047ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	4b38      	ldr	r3, [pc, #224]	; (8004908 <HAL_DMA_Init+0x158>)
 8004828:	4013      	ands	r3, r2
 800482a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800483a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004846:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004852:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	2b04      	cmp	r3, #4
 8004866:	d107      	bne.n	8004878 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	4313      	orrs	r3, r2
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f023 0307 	bic.w	r3, r3, #7
 800488e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d117      	bne.n	80048d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00e      	beq.n	80048d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fb01 	bl	8004ebc <DMA_CheckFifoParam>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2240      	movs	r2, #64	; 0x40
 80048c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048ce:	2301      	movs	r3, #1
 80048d0:	e016      	b.n	8004900 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fab8 	bl	8004e50 <DMA_CalcBaseAndBitshift>
 80048e0:	4603      	mov	r3, r0
 80048e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e8:	223f      	movs	r2, #63	; 0x3f
 80048ea:	409a      	lsls	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	f010803f 	.word	0xf010803f

0800490c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004922:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_DMA_Start_IT+0x26>
 800492e:	2302      	movs	r3, #2
 8004930:	e040      	b.n	80049b4 <HAL_DMA_Start_IT+0xa8>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	d12f      	bne.n	80049a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	68b9      	ldr	r1, [r7, #8]
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 fa4a 	bl	8004df4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004964:	223f      	movs	r2, #63	; 0x3f
 8004966:	409a      	lsls	r2, r3
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0216 	orr.w	r2, r2, #22
 800497a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d007      	beq.n	8004994 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0208 	orr.w	r2, r2, #8
 8004992:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	e005      	b.n	80049b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80049ae:	2302      	movs	r3, #2
 80049b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049ca:	f7fe ff71 	bl	80038b0 <HAL_GetTick>
 80049ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d008      	beq.n	80049ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2280      	movs	r2, #128	; 0x80
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e052      	b.n	8004a94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0216 	bic.w	r2, r2, #22
 80049fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695a      	ldr	r2, [r3, #20]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d103      	bne.n	8004a1e <HAL_DMA_Abort+0x62>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0208 	bic.w	r2, r2, #8
 8004a2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0201 	bic.w	r2, r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a3e:	e013      	b.n	8004a68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a40:	f7fe ff36 	bl	80038b0 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b05      	cmp	r3, #5
 8004a4c:	d90c      	bls.n	8004a68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2220      	movs	r2, #32
 8004a52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2203      	movs	r2, #3
 8004a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e015      	b.n	8004a94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e4      	bne.n	8004a40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7a:	223f      	movs	r2, #63	; 0x3f
 8004a7c:	409a      	lsls	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d004      	beq.n	8004aba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2280      	movs	r2, #128	; 0x80
 8004ab4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e00c      	b.n	8004ad4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2205      	movs	r2, #5
 8004abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0201 	bic.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004aec:	4b8e      	ldr	r3, [pc, #568]	; (8004d28 <HAL_DMA_IRQHandler+0x248>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a8e      	ldr	r2, [pc, #568]	; (8004d2c <HAL_DMA_IRQHandler+0x24c>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	0a9b      	lsrs	r3, r3, #10
 8004af8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0a:	2208      	movs	r2, #8
 8004b0c:	409a      	lsls	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d01a      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d013      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0204 	bic.w	r2, r2, #4
 8004b32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b38:	2208      	movs	r2, #8
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b44:	f043 0201 	orr.w	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b50:	2201      	movs	r2, #1
 8004b52:	409a      	lsls	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4013      	ands	r3, r2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d012      	beq.n	8004b82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00b      	beq.n	8004b82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6e:	2201      	movs	r2, #1
 8004b70:	409a      	lsls	r2, r3
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7a:	f043 0202 	orr.w	r2, r3, #2
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b86:	2204      	movs	r2, #4
 8004b88:	409a      	lsls	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d012      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00b      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb0:	f043 0204 	orr.w	r2, r3, #4
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbc:	2210      	movs	r2, #16
 8004bbe:	409a      	lsls	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d043      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d03c      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bda:	2210      	movs	r2, #16
 8004bdc:	409a      	lsls	r2, r3
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d018      	beq.n	8004c22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d108      	bne.n	8004c10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d024      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	4798      	blx	r3
 8004c0e:	e01f      	b.n	8004c50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01b      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	4798      	blx	r3
 8004c20:	e016      	b.n	8004c50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d107      	bne.n	8004c40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0208 	bic.w	r2, r2, #8
 8004c3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c54:	2220      	movs	r2, #32
 8004c56:	409a      	lsls	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 808f 	beq.w	8004d80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8087 	beq.w	8004d80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c76:	2220      	movs	r2, #32
 8004c78:	409a      	lsls	r2, r3
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b05      	cmp	r3, #5
 8004c88:	d136      	bne.n	8004cf8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0216 	bic.w	r2, r2, #22
 8004c98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695a      	ldr	r2, [r3, #20]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ca8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d103      	bne.n	8004cba <HAL_DMA_IRQHandler+0x1da>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0208 	bic.w	r2, r2, #8
 8004cc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cce:	223f      	movs	r2, #63	; 0x3f
 8004cd0:	409a      	lsls	r2, r3
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d07e      	beq.n	8004dec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	4798      	blx	r3
        }
        return;
 8004cf6:	e079      	b.n	8004dec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d01d      	beq.n	8004d42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10d      	bne.n	8004d30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d031      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	4798      	blx	r3
 8004d24:	e02c      	b.n	8004d80 <HAL_DMA_IRQHandler+0x2a0>
 8004d26:	bf00      	nop
 8004d28:	20000020 	.word	0x20000020
 8004d2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d023      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	4798      	blx	r3
 8004d40:	e01e      	b.n	8004d80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10f      	bne.n	8004d70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0210 	bic.w	r2, r2, #16
 8004d5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d032      	beq.n	8004dee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d022      	beq.n	8004dda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2205      	movs	r2, #5
 8004d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0201 	bic.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	3301      	adds	r3, #1
 8004db0:	60bb      	str	r3, [r7, #8]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d307      	bcc.n	8004dc8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f2      	bne.n	8004dac <HAL_DMA_IRQHandler+0x2cc>
 8004dc6:	e000      	b.n	8004dca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004dc8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	4798      	blx	r3
 8004dea:	e000      	b.n	8004dee <HAL_DMA_IRQHandler+0x30e>
        return;
 8004dec:	bf00      	nop
    }
  }
}
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b40      	cmp	r3, #64	; 0x40
 8004e20:	d108      	bne.n	8004e34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e32:	e007      	b.n	8004e44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	60da      	str	r2, [r3, #12]
}
 8004e44:	bf00      	nop
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	3b10      	subs	r3, #16
 8004e60:	4a14      	ldr	r2, [pc, #80]	; (8004eb4 <DMA_CalcBaseAndBitshift+0x64>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	091b      	lsrs	r3, r3, #4
 8004e68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e6a:	4a13      	ldr	r2, [pc, #76]	; (8004eb8 <DMA_CalcBaseAndBitshift+0x68>)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	461a      	mov	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d909      	bls.n	8004e92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e86:	f023 0303 	bic.w	r3, r3, #3
 8004e8a:	1d1a      	adds	r2, r3, #4
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	659a      	str	r2, [r3, #88]	; 0x58
 8004e90:	e007      	b.n	8004ea2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e9a:	f023 0303 	bic.w	r3, r3, #3
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	aaaaaaab 	.word	0xaaaaaaab
 8004eb8:	0800dbc0 	.word	0x0800dbc0

08004ebc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d11f      	bne.n	8004f16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d856      	bhi.n	8004f8a <DMA_CheckFifoParam+0xce>
 8004edc:	a201      	add	r2, pc, #4	; (adr r2, 8004ee4 <DMA_CheckFifoParam+0x28>)
 8004ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee2:	bf00      	nop
 8004ee4:	08004ef5 	.word	0x08004ef5
 8004ee8:	08004f07 	.word	0x08004f07
 8004eec:	08004ef5 	.word	0x08004ef5
 8004ef0:	08004f8b 	.word	0x08004f8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d046      	beq.n	8004f8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f04:	e043      	b.n	8004f8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f0e:	d140      	bne.n	8004f92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f14:	e03d      	b.n	8004f92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f1e:	d121      	bne.n	8004f64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d837      	bhi.n	8004f96 <DMA_CheckFifoParam+0xda>
 8004f26:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <DMA_CheckFifoParam+0x70>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f3d 	.word	0x08004f3d
 8004f30:	08004f43 	.word	0x08004f43
 8004f34:	08004f3d 	.word	0x08004f3d
 8004f38:	08004f55 	.word	0x08004f55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f40:	e030      	b.n	8004fa4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d025      	beq.n	8004f9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f52:	e022      	b.n	8004f9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f5c:	d11f      	bne.n	8004f9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f62:	e01c      	b.n	8004f9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d903      	bls.n	8004f72 <DMA_CheckFifoParam+0xb6>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	d003      	beq.n	8004f78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f70:	e018      	b.n	8004fa4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	73fb      	strb	r3, [r7, #15]
      break;
 8004f76:	e015      	b.n	8004fa4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00e      	beq.n	8004fa2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]
      break;
 8004f88:	e00b      	b.n	8004fa2 <DMA_CheckFifoParam+0xe6>
      break;
 8004f8a:	bf00      	nop
 8004f8c:	e00a      	b.n	8004fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8004f8e:	bf00      	nop
 8004f90:	e008      	b.n	8004fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8004f92:	bf00      	nop
 8004f94:	e006      	b.n	8004fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8004f96:	bf00      	nop
 8004f98:	e004      	b.n	8004fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8004f9a:	bf00      	nop
 8004f9c:	e002      	b.n	8004fa4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f9e:	bf00      	nop
 8004fa0:	e000      	b.n	8004fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fa2:	bf00      	nop
    }
  } 
  
  return status; 
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop

08004fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b089      	sub	sp, #36	; 0x24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61fb      	str	r3, [r7, #28]
 8004fce:	e16b      	b.n	80052a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	f040 815a 	bne.w	80052a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d005      	beq.n	8005006 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005002:	2b02      	cmp	r3, #2
 8005004:	d130      	bne.n	8005068 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	2203      	movs	r2, #3
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	43db      	mvns	r3, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4013      	ands	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4313      	orrs	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800503c:	2201      	movs	r2, #1
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	43db      	mvns	r3, r3
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	4013      	ands	r3, r2
 800504a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	091b      	lsrs	r3, r3, #4
 8005052:	f003 0201 	and.w	r2, r3, #1
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	4313      	orrs	r3, r2
 8005060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f003 0303 	and.w	r3, r3, #3
 8005070:	2b03      	cmp	r3, #3
 8005072:	d017      	beq.n	80050a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	2203      	movs	r2, #3
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	43db      	mvns	r3, r3
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	4013      	ands	r3, r2
 800508a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	4313      	orrs	r3, r2
 800509c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f003 0303 	and.w	r3, r3, #3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d123      	bne.n	80050f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	08da      	lsrs	r2, r3, #3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3208      	adds	r2, #8
 80050b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	220f      	movs	r2, #15
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	43db      	mvns	r3, r3
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4013      	ands	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	08da      	lsrs	r2, r3, #3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3208      	adds	r2, #8
 80050f2:	69b9      	ldr	r1, [r7, #24]
 80050f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	2203      	movs	r2, #3
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	43db      	mvns	r3, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4013      	ands	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 0203 	and.w	r2, r3, #3
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	4313      	orrs	r3, r2
 8005124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80b4 	beq.w	80052a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	4b60      	ldr	r3, [pc, #384]	; (80052c0 <HAL_GPIO_Init+0x30c>)
 8005140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005142:	4a5f      	ldr	r2, [pc, #380]	; (80052c0 <HAL_GPIO_Init+0x30c>)
 8005144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005148:	6453      	str	r3, [r2, #68]	; 0x44
 800514a:	4b5d      	ldr	r3, [pc, #372]	; (80052c0 <HAL_GPIO_Init+0x30c>)
 800514c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005156:	4a5b      	ldr	r2, [pc, #364]	; (80052c4 <HAL_GPIO_Init+0x310>)
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	089b      	lsrs	r3, r3, #2
 800515c:	3302      	adds	r3, #2
 800515e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	220f      	movs	r2, #15
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43db      	mvns	r3, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4013      	ands	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a52      	ldr	r2, [pc, #328]	; (80052c8 <HAL_GPIO_Init+0x314>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d02b      	beq.n	80051da <HAL_GPIO_Init+0x226>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a51      	ldr	r2, [pc, #324]	; (80052cc <HAL_GPIO_Init+0x318>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d025      	beq.n	80051d6 <HAL_GPIO_Init+0x222>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a50      	ldr	r2, [pc, #320]	; (80052d0 <HAL_GPIO_Init+0x31c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d01f      	beq.n	80051d2 <HAL_GPIO_Init+0x21e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a4f      	ldr	r2, [pc, #316]	; (80052d4 <HAL_GPIO_Init+0x320>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d019      	beq.n	80051ce <HAL_GPIO_Init+0x21a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a4e      	ldr	r2, [pc, #312]	; (80052d8 <HAL_GPIO_Init+0x324>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d013      	beq.n	80051ca <HAL_GPIO_Init+0x216>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a4d      	ldr	r2, [pc, #308]	; (80052dc <HAL_GPIO_Init+0x328>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00d      	beq.n	80051c6 <HAL_GPIO_Init+0x212>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a4c      	ldr	r2, [pc, #304]	; (80052e0 <HAL_GPIO_Init+0x32c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d007      	beq.n	80051c2 <HAL_GPIO_Init+0x20e>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a4b      	ldr	r2, [pc, #300]	; (80052e4 <HAL_GPIO_Init+0x330>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d101      	bne.n	80051be <HAL_GPIO_Init+0x20a>
 80051ba:	2307      	movs	r3, #7
 80051bc:	e00e      	b.n	80051dc <HAL_GPIO_Init+0x228>
 80051be:	2308      	movs	r3, #8
 80051c0:	e00c      	b.n	80051dc <HAL_GPIO_Init+0x228>
 80051c2:	2306      	movs	r3, #6
 80051c4:	e00a      	b.n	80051dc <HAL_GPIO_Init+0x228>
 80051c6:	2305      	movs	r3, #5
 80051c8:	e008      	b.n	80051dc <HAL_GPIO_Init+0x228>
 80051ca:	2304      	movs	r3, #4
 80051cc:	e006      	b.n	80051dc <HAL_GPIO_Init+0x228>
 80051ce:	2303      	movs	r3, #3
 80051d0:	e004      	b.n	80051dc <HAL_GPIO_Init+0x228>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e002      	b.n	80051dc <HAL_GPIO_Init+0x228>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <HAL_GPIO_Init+0x228>
 80051da:	2300      	movs	r3, #0
 80051dc:	69fa      	ldr	r2, [r7, #28]
 80051de:	f002 0203 	and.w	r2, r2, #3
 80051e2:	0092      	lsls	r2, r2, #2
 80051e4:	4093      	lsls	r3, r2
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051ec:	4935      	ldr	r1, [pc, #212]	; (80052c4 <HAL_GPIO_Init+0x310>)
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	089b      	lsrs	r3, r3, #2
 80051f2:	3302      	adds	r3, #2
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051fa:	4b3b      	ldr	r3, [pc, #236]	; (80052e8 <HAL_GPIO_Init+0x334>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	43db      	mvns	r3, r3
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	4013      	ands	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800521e:	4a32      	ldr	r2, [pc, #200]	; (80052e8 <HAL_GPIO_Init+0x334>)
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005224:	4b30      	ldr	r3, [pc, #192]	; (80052e8 <HAL_GPIO_Init+0x334>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	43db      	mvns	r3, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4013      	ands	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005248:	4a27      	ldr	r2, [pc, #156]	; (80052e8 <HAL_GPIO_Init+0x334>)
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800524e:	4b26      	ldr	r3, [pc, #152]	; (80052e8 <HAL_GPIO_Init+0x334>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	43db      	mvns	r3, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4013      	ands	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005272:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <HAL_GPIO_Init+0x334>)
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005278:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <HAL_GPIO_Init+0x334>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	43db      	mvns	r3, r3
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4013      	ands	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800529c:	4a12      	ldr	r2, [pc, #72]	; (80052e8 <HAL_GPIO_Init+0x334>)
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	3301      	adds	r3, #1
 80052a6:	61fb      	str	r3, [r7, #28]
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	2b0f      	cmp	r3, #15
 80052ac:	f67f ae90 	bls.w	8004fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop
 80052b4:	3724      	adds	r7, #36	; 0x24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40023800 	.word	0x40023800
 80052c4:	40013800 	.word	0x40013800
 80052c8:	40020000 	.word	0x40020000
 80052cc:	40020400 	.word	0x40020400
 80052d0:	40020800 	.word	0x40020800
 80052d4:	40020c00 	.word	0x40020c00
 80052d8:	40021000 	.word	0x40021000
 80052dc:	40021400 	.word	0x40021400
 80052e0:	40021800 	.word	0x40021800
 80052e4:	40021c00 	.word	0x40021c00
 80052e8:	40013c00 	.word	0x40013c00

080052ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	460b      	mov	r3, r1
 80052f6:	807b      	strh	r3, [r7, #2]
 80052f8:	4613      	mov	r3, r2
 80052fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052fc:	787b      	ldrb	r3, [r7, #1]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005302:	887a      	ldrh	r2, [r7, #2]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005308:	e003      	b.n	8005312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800530a:	887b      	ldrh	r3, [r7, #2]
 800530c:	041a      	lsls	r2, r3, #16
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	619a      	str	r2, [r3, #24]
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
	...

08005320 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e267      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d075      	beq.n	800542a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800533e:	4b88      	ldr	r3, [pc, #544]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 030c 	and.w	r3, r3, #12
 8005346:	2b04      	cmp	r3, #4
 8005348:	d00c      	beq.n	8005364 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800534a:	4b85      	ldr	r3, [pc, #532]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005352:	2b08      	cmp	r3, #8
 8005354:	d112      	bne.n	800537c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005356:	4b82      	ldr	r3, [pc, #520]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005362:	d10b      	bne.n	800537c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005364:	4b7e      	ldr	r3, [pc, #504]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d05b      	beq.n	8005428 <HAL_RCC_OscConfig+0x108>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d157      	bne.n	8005428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e242      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005384:	d106      	bne.n	8005394 <HAL_RCC_OscConfig+0x74>
 8005386:	4b76      	ldr	r3, [pc, #472]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a75      	ldr	r2, [pc, #468]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 800538c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	e01d      	b.n	80053d0 <HAL_RCC_OscConfig+0xb0>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800539c:	d10c      	bne.n	80053b8 <HAL_RCC_OscConfig+0x98>
 800539e:	4b70      	ldr	r3, [pc, #448]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a6f      	ldr	r2, [pc, #444]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	4b6d      	ldr	r3, [pc, #436]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a6c      	ldr	r2, [pc, #432]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	e00b      	b.n	80053d0 <HAL_RCC_OscConfig+0xb0>
 80053b8:	4b69      	ldr	r3, [pc, #420]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a68      	ldr	r2, [pc, #416]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	4b66      	ldr	r3, [pc, #408]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a65      	ldr	r2, [pc, #404]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d013      	beq.n	8005400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d8:	f7fe fa6a 	bl	80038b0 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053e0:	f7fe fa66 	bl	80038b0 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b64      	cmp	r3, #100	; 0x64
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e207      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f2:	4b5b      	ldr	r3, [pc, #364]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCC_OscConfig+0xc0>
 80053fe:	e014      	b.n	800542a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005400:	f7fe fa56 	bl	80038b0 <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005408:	f7fe fa52 	bl	80038b0 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b64      	cmp	r3, #100	; 0x64
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e1f3      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800541a:	4b51      	ldr	r3, [pc, #324]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f0      	bne.n	8005408 <HAL_RCC_OscConfig+0xe8>
 8005426:	e000      	b.n	800542a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d063      	beq.n	80054fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005436:	4b4a      	ldr	r3, [pc, #296]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 030c 	and.w	r3, r3, #12
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005442:	4b47      	ldr	r3, [pc, #284]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800544a:	2b08      	cmp	r3, #8
 800544c:	d11c      	bne.n	8005488 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800544e:	4b44      	ldr	r3, [pc, #272]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d116      	bne.n	8005488 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800545a:	4b41      	ldr	r3, [pc, #260]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_RCC_OscConfig+0x152>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d001      	beq.n	8005472 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e1c7      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005472:	4b3b      	ldr	r3, [pc, #236]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	4937      	ldr	r1, [pc, #220]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005482:	4313      	orrs	r3, r2
 8005484:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005486:	e03a      	b.n	80054fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d020      	beq.n	80054d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005490:	4b34      	ldr	r3, [pc, #208]	; (8005564 <HAL_RCC_OscConfig+0x244>)
 8005492:	2201      	movs	r2, #1
 8005494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005496:	f7fe fa0b 	bl	80038b0 <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800549c:	e008      	b.n	80054b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800549e:	f7fe fa07 	bl	80038b0 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e1a8      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b0:	4b2b      	ldr	r3, [pc, #172]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0f0      	beq.n	800549e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054bc:	4b28      	ldr	r3, [pc, #160]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	4925      	ldr	r1, [pc, #148]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	600b      	str	r3, [r1, #0]
 80054d0:	e015      	b.n	80054fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054d2:	4b24      	ldr	r3, [pc, #144]	; (8005564 <HAL_RCC_OscConfig+0x244>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d8:	f7fe f9ea 	bl	80038b0 <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054e0:	f7fe f9e6 	bl	80038b0 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e187      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054f2:	4b1b      	ldr	r3, [pc, #108]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1f0      	bne.n	80054e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d036      	beq.n	8005578 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d016      	beq.n	8005540 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005512:	4b15      	ldr	r3, [pc, #84]	; (8005568 <HAL_RCC_OscConfig+0x248>)
 8005514:	2201      	movs	r2, #1
 8005516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005518:	f7fe f9ca 	bl	80038b0 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005520:	f7fe f9c6 	bl	80038b0 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e167      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005532:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <HAL_RCC_OscConfig+0x200>
 800553e:	e01b      	b.n	8005578 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005540:	4b09      	ldr	r3, [pc, #36]	; (8005568 <HAL_RCC_OscConfig+0x248>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005546:	f7fe f9b3 	bl	80038b0 <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800554c:	e00e      	b.n	800556c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800554e:	f7fe f9af 	bl	80038b0 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d907      	bls.n	800556c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e150      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
 8005560:	40023800 	.word	0x40023800
 8005564:	42470000 	.word	0x42470000
 8005568:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800556c:	4b88      	ldr	r3, [pc, #544]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800556e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1ea      	bne.n	800554e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8097 	beq.w	80056b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005586:	2300      	movs	r3, #0
 8005588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800558a:	4b81      	ldr	r3, [pc, #516]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10f      	bne.n	80055b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005596:	2300      	movs	r3, #0
 8005598:	60bb      	str	r3, [r7, #8]
 800559a:	4b7d      	ldr	r3, [pc, #500]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	4a7c      	ldr	r2, [pc, #496]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80055a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a4:	6413      	str	r3, [r2, #64]	; 0x40
 80055a6:	4b7a      	ldr	r3, [pc, #488]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ae:	60bb      	str	r3, [r7, #8]
 80055b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055b2:	2301      	movs	r3, #1
 80055b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b6:	4b77      	ldr	r3, [pc, #476]	; (8005794 <HAL_RCC_OscConfig+0x474>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d118      	bne.n	80055f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055c2:	4b74      	ldr	r3, [pc, #464]	; (8005794 <HAL_RCC_OscConfig+0x474>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a73      	ldr	r2, [pc, #460]	; (8005794 <HAL_RCC_OscConfig+0x474>)
 80055c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ce:	f7fe f96f 	bl	80038b0 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055d6:	f7fe f96b 	bl	80038b0 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e10c      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e8:	4b6a      	ldr	r3, [pc, #424]	; (8005794 <HAL_RCC_OscConfig+0x474>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0f0      	beq.n	80055d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d106      	bne.n	800560a <HAL_RCC_OscConfig+0x2ea>
 80055fc:	4b64      	ldr	r3, [pc, #400]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80055fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005600:	4a63      	ldr	r2, [pc, #396]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005602:	f043 0301 	orr.w	r3, r3, #1
 8005606:	6713      	str	r3, [r2, #112]	; 0x70
 8005608:	e01c      	b.n	8005644 <HAL_RCC_OscConfig+0x324>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	2b05      	cmp	r3, #5
 8005610:	d10c      	bne.n	800562c <HAL_RCC_OscConfig+0x30c>
 8005612:	4b5f      	ldr	r3, [pc, #380]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005616:	4a5e      	ldr	r2, [pc, #376]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005618:	f043 0304 	orr.w	r3, r3, #4
 800561c:	6713      	str	r3, [r2, #112]	; 0x70
 800561e:	4b5c      	ldr	r3, [pc, #368]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005622:	4a5b      	ldr	r2, [pc, #364]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	6713      	str	r3, [r2, #112]	; 0x70
 800562a:	e00b      	b.n	8005644 <HAL_RCC_OscConfig+0x324>
 800562c:	4b58      	ldr	r3, [pc, #352]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005630:	4a57      	ldr	r2, [pc, #348]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005632:	f023 0301 	bic.w	r3, r3, #1
 8005636:	6713      	str	r3, [r2, #112]	; 0x70
 8005638:	4b55      	ldr	r3, [pc, #340]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800563a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563c:	4a54      	ldr	r2, [pc, #336]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800563e:	f023 0304 	bic.w	r3, r3, #4
 8005642:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d015      	beq.n	8005678 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564c:	f7fe f930 	bl	80038b0 <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005652:	e00a      	b.n	800566a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005654:	f7fe f92c 	bl	80038b0 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005662:	4293      	cmp	r3, r2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e0cb      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800566a:	4b49      	ldr	r3, [pc, #292]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800566c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0ee      	beq.n	8005654 <HAL_RCC_OscConfig+0x334>
 8005676:	e014      	b.n	80056a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005678:	f7fe f91a 	bl	80038b0 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800567e:	e00a      	b.n	8005696 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005680:	f7fe f916 	bl	80038b0 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	f241 3288 	movw	r2, #5000	; 0x1388
 800568e:	4293      	cmp	r3, r2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e0b5      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005696:	4b3e      	ldr	r3, [pc, #248]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1ee      	bne.n	8005680 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056a2:	7dfb      	ldrb	r3, [r7, #23]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d105      	bne.n	80056b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056a8:	4b39      	ldr	r3, [pc, #228]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	4a38      	ldr	r2, [pc, #224]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80056ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 80a1 	beq.w	8005800 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056be:	4b34      	ldr	r3, [pc, #208]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 030c 	and.w	r3, r3, #12
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d05c      	beq.n	8005784 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d141      	bne.n	8005756 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d2:	4b31      	ldr	r3, [pc, #196]	; (8005798 <HAL_RCC_OscConfig+0x478>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d8:	f7fe f8ea 	bl	80038b0 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056e0:	f7fe f8e6 	bl	80038b0 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e087      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f2:	4b27      	ldr	r3, [pc, #156]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f0      	bne.n	80056e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69da      	ldr	r2, [r3, #28]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	019b      	lsls	r3, r3, #6
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	3b01      	subs	r3, #1
 8005718:	041b      	lsls	r3, r3, #16
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	061b      	lsls	r3, r3, #24
 8005722:	491b      	ldr	r1, [pc, #108]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005724:	4313      	orrs	r3, r2
 8005726:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005728:	4b1b      	ldr	r3, [pc, #108]	; (8005798 <HAL_RCC_OscConfig+0x478>)
 800572a:	2201      	movs	r2, #1
 800572c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572e:	f7fe f8bf 	bl	80038b0 <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005736:	f7fe f8bb 	bl	80038b0 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e05c      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005748:	4b11      	ldr	r3, [pc, #68]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0f0      	beq.n	8005736 <HAL_RCC_OscConfig+0x416>
 8005754:	e054      	b.n	8005800 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005756:	4b10      	ldr	r3, [pc, #64]	; (8005798 <HAL_RCC_OscConfig+0x478>)
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575c:	f7fe f8a8 	bl	80038b0 <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005764:	f7fe f8a4 	bl	80038b0 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e045      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005776:	4b06      	ldr	r3, [pc, #24]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1f0      	bne.n	8005764 <HAL_RCC_OscConfig+0x444>
 8005782:	e03d      	b.n	8005800 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d107      	bne.n	800579c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e038      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
 8005790:	40023800 	.word	0x40023800
 8005794:	40007000 	.word	0x40007000
 8005798:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800579c:	4b1b      	ldr	r3, [pc, #108]	; (800580c <HAL_RCC_OscConfig+0x4ec>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d028      	beq.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d121      	bne.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d11a      	bne.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057cc:	4013      	ands	r3, r2
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d111      	bne.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e2:	085b      	lsrs	r3, r3, #1
 80057e4:	3b01      	subs	r3, #1
 80057e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d107      	bne.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d001      	beq.n	8005800 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40023800 	.word	0x40023800

08005810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e0cc      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005824:	4b68      	ldr	r3, [pc, #416]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d90c      	bls.n	800584c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005832:	4b65      	ldr	r3, [pc, #404]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800583a:	4b63      	ldr	r3, [pc, #396]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d001      	beq.n	800584c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e0b8      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d020      	beq.n	800589a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005864:	4b59      	ldr	r3, [pc, #356]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	4a58      	ldr	r2, [pc, #352]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800586e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0308 	and.w	r3, r3, #8
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800587c:	4b53      	ldr	r3, [pc, #332]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	4a52      	ldr	r2, [pc, #328]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005882:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005886:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005888:	4b50      	ldr	r3, [pc, #320]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	494d      	ldr	r1, [pc, #308]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	4313      	orrs	r3, r2
 8005898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d044      	beq.n	8005930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d107      	bne.n	80058be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ae:	4b47      	ldr	r3, [pc, #284]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d119      	bne.n	80058ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e07f      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d003      	beq.n	80058ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d107      	bne.n	80058de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ce:	4b3f      	ldr	r3, [pc, #252]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e06f      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058de:	4b3b      	ldr	r3, [pc, #236]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e067      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ee:	4b37      	ldr	r3, [pc, #220]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f023 0203 	bic.w	r2, r3, #3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	4934      	ldr	r1, [pc, #208]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005900:	f7fd ffd6 	bl	80038b0 <HAL_GetTick>
 8005904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005906:	e00a      	b.n	800591e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005908:	f7fd ffd2 	bl	80038b0 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	f241 3288 	movw	r2, #5000	; 0x1388
 8005916:	4293      	cmp	r3, r2
 8005918:	d901      	bls.n	800591e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e04f      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591e:	4b2b      	ldr	r3, [pc, #172]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 020c 	and.w	r2, r3, #12
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	429a      	cmp	r2, r3
 800592e:	d1eb      	bne.n	8005908 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005930:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d20c      	bcs.n	8005958 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593e:	4b22      	ldr	r3, [pc, #136]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005946:	4b20      	ldr	r3, [pc, #128]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d001      	beq.n	8005958 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e032      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d008      	beq.n	8005976 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005964:	4b19      	ldr	r3, [pc, #100]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	4916      	ldr	r1, [pc, #88]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	4313      	orrs	r3, r2
 8005974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b00      	cmp	r3, #0
 8005980:	d009      	beq.n	8005996 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005982:	4b12      	ldr	r3, [pc, #72]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	490e      	ldr	r1, [pc, #56]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	4313      	orrs	r3, r2
 8005994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005996:	f000 f82d 	bl	80059f4 <HAL_RCC_GetSysClockFreq>
 800599a:	4602      	mov	r2, r0
 800599c:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	091b      	lsrs	r3, r3, #4
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	490a      	ldr	r1, [pc, #40]	; (80059d0 <HAL_RCC_ClockConfig+0x1c0>)
 80059a8:	5ccb      	ldrb	r3, [r1, r3]
 80059aa:	fa22 f303 	lsr.w	r3, r2, r3
 80059ae:	4a09      	ldr	r2, [pc, #36]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 80059b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059b2:	4b09      	ldr	r3, [pc, #36]	; (80059d8 <HAL_RCC_ClockConfig+0x1c8>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fd ff36 	bl	8003828 <HAL_InitTick>

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40023c00 	.word	0x40023c00
 80059cc:	40023800 	.word	0x40023800
 80059d0:	0800dba8 	.word	0x0800dba8
 80059d4:	20000020 	.word	0x20000020
 80059d8:	20000024 	.word	0x20000024

080059dc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80059e0:	4b03      	ldr	r3, [pc, #12]	; (80059f0 <HAL_RCC_EnableCSS+0x14>)
 80059e2:	2201      	movs	r2, #1
 80059e4:	601a      	str	r2, [r3, #0]
}
 80059e6:	bf00      	nop
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	4247004c 	.word	0x4247004c

080059f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059f8:	b090      	sub	sp, #64	; 0x40
 80059fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005a00:	2300      	movs	r3, #0
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a04:	2300      	movs	r3, #0
 8005a06:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a0c:	4b59      	ldr	r3, [pc, #356]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 030c 	and.w	r3, r3, #12
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d00d      	beq.n	8005a34 <HAL_RCC_GetSysClockFreq+0x40>
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	f200 80a1 	bhi.w	8005b60 <HAL_RCC_GetSysClockFreq+0x16c>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <HAL_RCC_GetSysClockFreq+0x34>
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d003      	beq.n	8005a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8005a26:	e09b      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a28:	4b53      	ldr	r3, [pc, #332]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a2a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005a2c:	e09b      	b.n	8005b66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a2e:	4b53      	ldr	r3, [pc, #332]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8005a30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a32:	e098      	b.n	8005b66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a34:	4b4f      	ldr	r3, [pc, #316]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a3e:	4b4d      	ldr	r3, [pc, #308]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d028      	beq.n	8005a9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a4a:	4b4a      	ldr	r3, [pc, #296]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	099b      	lsrs	r3, r3, #6
 8005a50:	2200      	movs	r2, #0
 8005a52:	623b      	str	r3, [r7, #32]
 8005a54:	627a      	str	r2, [r7, #36]	; 0x24
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4b47      	ldr	r3, [pc, #284]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8005a60:	fb03 f201 	mul.w	r2, r3, r1
 8005a64:	2300      	movs	r3, #0
 8005a66:	fb00 f303 	mul.w	r3, r0, r3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	4a43      	ldr	r2, [pc, #268]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8005a6e:	fba0 1202 	umull	r1, r2, r0, r2
 8005a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a74:	460a      	mov	r2, r1
 8005a76:	62ba      	str	r2, [r7, #40]	; 0x28
 8005a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a7a:	4413      	add	r3, r2
 8005a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a80:	2200      	movs	r2, #0
 8005a82:	61bb      	str	r3, [r7, #24]
 8005a84:	61fa      	str	r2, [r7, #28]
 8005a86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005a8e:	f7fb f88b 	bl	8000ba8 <__aeabi_uldivmod>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4613      	mov	r3, r2
 8005a98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a9a:	e053      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a9c:	4b35      	ldr	r3, [pc, #212]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	099b      	lsrs	r3, r3, #6
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	617a      	str	r2, [r7, #20]
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005aae:	f04f 0b00 	mov.w	fp, #0
 8005ab2:	4652      	mov	r2, sl
 8005ab4:	465b      	mov	r3, fp
 8005ab6:	f04f 0000 	mov.w	r0, #0
 8005aba:	f04f 0100 	mov.w	r1, #0
 8005abe:	0159      	lsls	r1, r3, #5
 8005ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ac4:	0150      	lsls	r0, r2, #5
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	ebb2 080a 	subs.w	r8, r2, sl
 8005ace:	eb63 090b 	sbc.w	r9, r3, fp
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	f04f 0300 	mov.w	r3, #0
 8005ada:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005ade:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005ae2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005ae6:	ebb2 0408 	subs.w	r4, r2, r8
 8005aea:	eb63 0509 	sbc.w	r5, r3, r9
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	00eb      	lsls	r3, r5, #3
 8005af8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005afc:	00e2      	lsls	r2, r4, #3
 8005afe:	4614      	mov	r4, r2
 8005b00:	461d      	mov	r5, r3
 8005b02:	eb14 030a 	adds.w	r3, r4, sl
 8005b06:	603b      	str	r3, [r7, #0]
 8005b08:	eb45 030b 	adc.w	r3, r5, fp
 8005b0c:	607b      	str	r3, [r7, #4]
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	028b      	lsls	r3, r1, #10
 8005b1e:	4621      	mov	r1, r4
 8005b20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b24:	4621      	mov	r1, r4
 8005b26:	028a      	lsls	r2, r1, #10
 8005b28:	4610      	mov	r0, r2
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2e:	2200      	movs	r2, #0
 8005b30:	60bb      	str	r3, [r7, #8]
 8005b32:	60fa      	str	r2, [r7, #12]
 8005b34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b38:	f7fb f836 	bl	8000ba8 <__aeabi_uldivmod>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4613      	mov	r3, r2
 8005b42:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b44:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	0c1b      	lsrs	r3, r3, #16
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	3301      	adds	r3, #1
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005b54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b5e:	e002      	b.n	8005b66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b60:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x184>)
 8005b62:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3740      	adds	r7, #64	; 0x40
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b72:	bf00      	nop
 8005b74:	40023800 	.word	0x40023800
 8005b78:	00f42400 	.word	0x00f42400
 8005b7c:	00b71b00 	.word	0x00b71b00

08005b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b84:	4b03      	ldr	r3, [pc, #12]	; (8005b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b86:	681b      	ldr	r3, [r3, #0]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	20000020 	.word	0x20000020

08005b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b9c:	f7ff fff0 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	0a9b      	lsrs	r3, r3, #10
 8005ba8:	f003 0307 	and.w	r3, r3, #7
 8005bac:	4903      	ldr	r1, [pc, #12]	; (8005bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bae:	5ccb      	ldrb	r3, [r1, r3]
 8005bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	40023800 	.word	0x40023800
 8005bbc:	0800dbb8 	.word	0x0800dbb8

08005bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005bc4:	f7ff ffdc 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	0b5b      	lsrs	r3, r3, #13
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	4903      	ldr	r1, [pc, #12]	; (8005be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bd6:	5ccb      	ldrb	r3, [r1, r3]
 8005bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	40023800 	.word	0x40023800
 8005be4:	0800dbb8 	.word	0x0800dbb8

08005be8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf4:	2b80      	cmp	r3, #128	; 0x80
 8005bf6:	d104      	bne.n	8005c02 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005bf8:	f000 f80a 	bl	8005c10 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005bfc:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <HAL_RCC_NMI_IRQHandler+0x24>)
 8005bfe:	2280      	movs	r2, #128	; 0x80
 8005c00:	701a      	strb	r2, [r3, #0]
  }
}
 8005c02:	bf00      	nop
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	40023800 	.word	0x40023800
 8005c0c:	4002380e 	.word	0x4002380e

08005c10 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e07b      	b.n	8005d28 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d108      	bne.n	8005c4a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c40:	d009      	beq.n	8005c56 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	61da      	str	r2, [r3, #28]
 8005c48:	e005      	b.n	8005c56 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d106      	bne.n	8005c76 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7fd f8d3 	bl	8002e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2202      	movs	r2, #2
 8005c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c8c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cda:	ea42 0103 	orr.w	r1, r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	0c1b      	lsrs	r3, r3, #16
 8005cf4:	f003 0104 	and.w	r1, r3, #4
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	f003 0210 	and.w	r2, r3, #16
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69da      	ldr	r2, [r3, #28]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e041      	b.n	8005dc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d106      	bne.n	8005d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7fd f900 	bl	8002f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4610      	mov	r0, r2
 8005d70:	f000 fba8 	bl	80064c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d001      	beq.n	8005de8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e046      	b.n	8005e76 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a23      	ldr	r2, [pc, #140]	; (8005e84 <HAL_TIM_Base_Start+0xb4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d022      	beq.n	8005e40 <HAL_TIM_Base_Start+0x70>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e02:	d01d      	beq.n	8005e40 <HAL_TIM_Base_Start+0x70>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a1f      	ldr	r2, [pc, #124]	; (8005e88 <HAL_TIM_Base_Start+0xb8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d018      	beq.n	8005e40 <HAL_TIM_Base_Start+0x70>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a1e      	ldr	r2, [pc, #120]	; (8005e8c <HAL_TIM_Base_Start+0xbc>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d013      	beq.n	8005e40 <HAL_TIM_Base_Start+0x70>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1c      	ldr	r2, [pc, #112]	; (8005e90 <HAL_TIM_Base_Start+0xc0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d00e      	beq.n	8005e40 <HAL_TIM_Base_Start+0x70>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a1b      	ldr	r2, [pc, #108]	; (8005e94 <HAL_TIM_Base_Start+0xc4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d009      	beq.n	8005e40 <HAL_TIM_Base_Start+0x70>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a19      	ldr	r2, [pc, #100]	; (8005e98 <HAL_TIM_Base_Start+0xc8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d004      	beq.n	8005e40 <HAL_TIM_Base_Start+0x70>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a18      	ldr	r2, [pc, #96]	; (8005e9c <HAL_TIM_Base_Start+0xcc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d111      	bne.n	8005e64 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b06      	cmp	r3, #6
 8005e50:	d010      	beq.n	8005e74 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f042 0201 	orr.w	r2, r2, #1
 8005e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e62:	e007      	b.n	8005e74 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40010000 	.word	0x40010000
 8005e88:	40000400 	.word	0x40000400
 8005e8c:	40000800 	.word	0x40000800
 8005e90:	40000c00 	.word	0x40000c00
 8005e94:	40010400 	.word	0x40010400
 8005e98:	40014000 	.word	0x40014000
 8005e9c:	40001800 	.word	0x40001800

08005ea0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e041      	b.n	8005f36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7fd f810 	bl	8002eec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3304      	adds	r3, #4
 8005edc:	4619      	mov	r1, r3
 8005ede:	4610      	mov	r0, r2
 8005ee0:	f000 faf0 	bl	80064c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d109      	bne.n	8005f64 <HAL_TIM_PWM_Start+0x24>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	bf14      	ite	ne
 8005f5c:	2301      	movne	r3, #1
 8005f5e:	2300      	moveq	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	e022      	b.n	8005faa <HAL_TIM_PWM_Start+0x6a>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d109      	bne.n	8005f7e <HAL_TIM_PWM_Start+0x3e>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	bf14      	ite	ne
 8005f76:	2301      	movne	r3, #1
 8005f78:	2300      	moveq	r3, #0
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	e015      	b.n	8005faa <HAL_TIM_PWM_Start+0x6a>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d109      	bne.n	8005f98 <HAL_TIM_PWM_Start+0x58>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	bf14      	ite	ne
 8005f90:	2301      	movne	r3, #1
 8005f92:	2300      	moveq	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	e008      	b.n	8005faa <HAL_TIM_PWM_Start+0x6a>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	bf14      	ite	ne
 8005fa4:	2301      	movne	r3, #1
 8005fa6:	2300      	moveq	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e07c      	b.n	80060ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d104      	bne.n	8005fc2 <HAL_TIM_PWM_Start+0x82>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fc0:	e013      	b.n	8005fea <HAL_TIM_PWM_Start+0xaa>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d104      	bne.n	8005fd2 <HAL_TIM_PWM_Start+0x92>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd0:	e00b      	b.n	8005fea <HAL_TIM_PWM_Start+0xaa>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d104      	bne.n	8005fe2 <HAL_TIM_PWM_Start+0xa2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fe0:	e003      	b.n	8005fea <HAL_TIM_PWM_Start+0xaa>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fd50 	bl	8006a98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a2d      	ldr	r2, [pc, #180]	; (80060b4 <HAL_TIM_PWM_Start+0x174>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d004      	beq.n	800600c <HAL_TIM_PWM_Start+0xcc>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a2c      	ldr	r2, [pc, #176]	; (80060b8 <HAL_TIM_PWM_Start+0x178>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d101      	bne.n	8006010 <HAL_TIM_PWM_Start+0xd0>
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <HAL_TIM_PWM_Start+0xd2>
 8006010:	2300      	movs	r3, #0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d007      	beq.n	8006026 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006024:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a22      	ldr	r2, [pc, #136]	; (80060b4 <HAL_TIM_PWM_Start+0x174>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d022      	beq.n	8006076 <HAL_TIM_PWM_Start+0x136>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006038:	d01d      	beq.n	8006076 <HAL_TIM_PWM_Start+0x136>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a1f      	ldr	r2, [pc, #124]	; (80060bc <HAL_TIM_PWM_Start+0x17c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d018      	beq.n	8006076 <HAL_TIM_PWM_Start+0x136>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1d      	ldr	r2, [pc, #116]	; (80060c0 <HAL_TIM_PWM_Start+0x180>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d013      	beq.n	8006076 <HAL_TIM_PWM_Start+0x136>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a1c      	ldr	r2, [pc, #112]	; (80060c4 <HAL_TIM_PWM_Start+0x184>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d00e      	beq.n	8006076 <HAL_TIM_PWM_Start+0x136>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a16      	ldr	r2, [pc, #88]	; (80060b8 <HAL_TIM_PWM_Start+0x178>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d009      	beq.n	8006076 <HAL_TIM_PWM_Start+0x136>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a18      	ldr	r2, [pc, #96]	; (80060c8 <HAL_TIM_PWM_Start+0x188>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d004      	beq.n	8006076 <HAL_TIM_PWM_Start+0x136>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a16      	ldr	r2, [pc, #88]	; (80060cc <HAL_TIM_PWM_Start+0x18c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d111      	bne.n	800609a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b06      	cmp	r3, #6
 8006086:	d010      	beq.n	80060aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0201 	orr.w	r2, r2, #1
 8006096:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006098:	e007      	b.n	80060aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f042 0201 	orr.w	r2, r2, #1
 80060a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	40010000 	.word	0x40010000
 80060b8:	40010400 	.word	0x40010400
 80060bc:	40000400 	.word	0x40000400
 80060c0:	40000800 	.word	0x40000800
 80060c4:	40000c00 	.word	0x40000c00
 80060c8:	40014000 	.word	0x40014000
 80060cc:	40001800 	.word	0x40001800

080060d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2200      	movs	r2, #0
 80060e0:	6839      	ldr	r1, [r7, #0]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fcd8 	bl	8006a98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a2e      	ldr	r2, [pc, #184]	; (80061a8 <HAL_TIM_PWM_Stop+0xd8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d004      	beq.n	80060fc <HAL_TIM_PWM_Stop+0x2c>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a2d      	ldr	r2, [pc, #180]	; (80061ac <HAL_TIM_PWM_Stop+0xdc>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d101      	bne.n	8006100 <HAL_TIM_PWM_Stop+0x30>
 80060fc:	2301      	movs	r3, #1
 80060fe:	e000      	b.n	8006102 <HAL_TIM_PWM_Stop+0x32>
 8006100:	2300      	movs	r3, #0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d017      	beq.n	8006136 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6a1a      	ldr	r2, [r3, #32]
 800610c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006110:	4013      	ands	r3, r2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10f      	bne.n	8006136 <HAL_TIM_PWM_Stop+0x66>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6a1a      	ldr	r2, [r3, #32]
 800611c:	f240 4344 	movw	r3, #1092	; 0x444
 8006120:	4013      	ands	r3, r2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d107      	bne.n	8006136 <HAL_TIM_PWM_Stop+0x66>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006134:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6a1a      	ldr	r2, [r3, #32]
 800613c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006140:	4013      	ands	r3, r2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10f      	bne.n	8006166 <HAL_TIM_PWM_Stop+0x96>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6a1a      	ldr	r2, [r3, #32]
 800614c:	f240 4344 	movw	r3, #1092	; 0x444
 8006150:	4013      	ands	r3, r2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d107      	bne.n	8006166 <HAL_TIM_PWM_Stop+0x96>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0201 	bic.w	r2, r2, #1
 8006164:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d104      	bne.n	8006176 <HAL_TIM_PWM_Stop+0xa6>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006174:	e013      	b.n	800619e <HAL_TIM_PWM_Stop+0xce>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b04      	cmp	r3, #4
 800617a:	d104      	bne.n	8006186 <HAL_TIM_PWM_Stop+0xb6>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006184:	e00b      	b.n	800619e <HAL_TIM_PWM_Stop+0xce>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b08      	cmp	r3, #8
 800618a:	d104      	bne.n	8006196 <HAL_TIM_PWM_Stop+0xc6>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006194:	e003      	b.n	800619e <HAL_TIM_PWM_Stop+0xce>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40010000 	.word	0x40010000
 80061ac:	40010400 	.word	0x40010400

080061b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061ca:	2302      	movs	r3, #2
 80061cc:	e0ae      	b.n	800632c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b0c      	cmp	r3, #12
 80061da:	f200 809f 	bhi.w	800631c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80061de:	a201      	add	r2, pc, #4	; (adr r2, 80061e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e4:	08006219 	.word	0x08006219
 80061e8:	0800631d 	.word	0x0800631d
 80061ec:	0800631d 	.word	0x0800631d
 80061f0:	0800631d 	.word	0x0800631d
 80061f4:	08006259 	.word	0x08006259
 80061f8:	0800631d 	.word	0x0800631d
 80061fc:	0800631d 	.word	0x0800631d
 8006200:	0800631d 	.word	0x0800631d
 8006204:	0800629b 	.word	0x0800629b
 8006208:	0800631d 	.word	0x0800631d
 800620c:	0800631d 	.word	0x0800631d
 8006210:	0800631d 	.word	0x0800631d
 8006214:	080062db 	.word	0x080062db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	4618      	mov	r0, r3
 8006220:	f000 f9f0 	bl	8006604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0208 	orr.w	r2, r2, #8
 8006232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699a      	ldr	r2, [r3, #24]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0204 	bic.w	r2, r2, #4
 8006242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6999      	ldr	r1, [r3, #24]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	619a      	str	r2, [r3, #24]
      break;
 8006256:	e064      	b.n	8006322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fa40 	bl	80066e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699a      	ldr	r2, [r3, #24]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6999      	ldr	r1, [r3, #24]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	021a      	lsls	r2, r3, #8
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	619a      	str	r2, [r3, #24]
      break;
 8006298:	e043      	b.n	8006322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fa95 	bl	80067d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69da      	ldr	r2, [r3, #28]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 0208 	orr.w	r2, r2, #8
 80062b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69da      	ldr	r2, [r3, #28]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0204 	bic.w	r2, r2, #4
 80062c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69d9      	ldr	r1, [r3, #28]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	61da      	str	r2, [r3, #28]
      break;
 80062d8:	e023      	b.n	8006322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 fae9 	bl	80068b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69d9      	ldr	r1, [r3, #28]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	021a      	lsls	r2, r3, #8
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	61da      	str	r2, [r3, #28]
      break;
 800631a:	e002      	b.n	8006322 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	75fb      	strb	r3, [r7, #23]
      break;
 8006320:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800632a:	7dfb      	ldrb	r3, [r7, #23]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_TIM_ConfigClockSource+0x1c>
 800634c:	2302      	movs	r3, #2
 800634e:	e0b4      	b.n	80064ba <HAL_TIM_ConfigClockSource+0x186>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800636e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006388:	d03e      	beq.n	8006408 <HAL_TIM_ConfigClockSource+0xd4>
 800638a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800638e:	f200 8087 	bhi.w	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006396:	f000 8086 	beq.w	80064a6 <HAL_TIM_ConfigClockSource+0x172>
 800639a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800639e:	d87f      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063a0:	2b70      	cmp	r3, #112	; 0x70
 80063a2:	d01a      	beq.n	80063da <HAL_TIM_ConfigClockSource+0xa6>
 80063a4:	2b70      	cmp	r3, #112	; 0x70
 80063a6:	d87b      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063a8:	2b60      	cmp	r3, #96	; 0x60
 80063aa:	d050      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x11a>
 80063ac:	2b60      	cmp	r3, #96	; 0x60
 80063ae:	d877      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063b0:	2b50      	cmp	r3, #80	; 0x50
 80063b2:	d03c      	beq.n	800642e <HAL_TIM_ConfigClockSource+0xfa>
 80063b4:	2b50      	cmp	r3, #80	; 0x50
 80063b6:	d873      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063b8:	2b40      	cmp	r3, #64	; 0x40
 80063ba:	d058      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x13a>
 80063bc:	2b40      	cmp	r3, #64	; 0x40
 80063be:	d86f      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063c0:	2b30      	cmp	r3, #48	; 0x30
 80063c2:	d064      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x15a>
 80063c4:	2b30      	cmp	r3, #48	; 0x30
 80063c6:	d86b      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063c8:	2b20      	cmp	r3, #32
 80063ca:	d060      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x15a>
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d867      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d05c      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x15a>
 80063d4:	2b10      	cmp	r3, #16
 80063d6:	d05a      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x15a>
 80063d8:	e062      	b.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6899      	ldr	r1, [r3, #8]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f000 fb35 	bl	8006a58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	609a      	str	r2, [r3, #8]
      break;
 8006406:	e04f      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6818      	ldr	r0, [r3, #0]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	6899      	ldr	r1, [r3, #8]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f000 fb1e 	bl	8006a58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800642a:	609a      	str	r2, [r3, #8]
      break;
 800642c:	e03c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6859      	ldr	r1, [r3, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	461a      	mov	r2, r3
 800643c:	f000 fa92 	bl	8006964 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2150      	movs	r1, #80	; 0x50
 8006446:	4618      	mov	r0, r3
 8006448:	f000 faeb 	bl	8006a22 <TIM_ITRx_SetConfig>
      break;
 800644c:	e02c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6859      	ldr	r1, [r3, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	461a      	mov	r2, r3
 800645c:	f000 fab1 	bl	80069c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2160      	movs	r1, #96	; 0x60
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fadb 	bl	8006a22 <TIM_ITRx_SetConfig>
      break;
 800646c:	e01c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	6859      	ldr	r1, [r3, #4]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	461a      	mov	r2, r3
 800647c:	f000 fa72 	bl	8006964 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2140      	movs	r1, #64	; 0x40
 8006486:	4618      	mov	r0, r3
 8006488:	f000 facb 	bl	8006a22 <TIM_ITRx_SetConfig>
      break;
 800648c:	e00c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4619      	mov	r1, r3
 8006498:	4610      	mov	r0, r2
 800649a:	f000 fac2 	bl	8006a22 <TIM_ITRx_SetConfig>
      break;
 800649e:	e003      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	73fb      	strb	r3, [r7, #15]
      break;
 80064a4:	e000      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a40      	ldr	r2, [pc, #256]	; (80065d8 <TIM_Base_SetConfig+0x114>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d013      	beq.n	8006504 <TIM_Base_SetConfig+0x40>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e2:	d00f      	beq.n	8006504 <TIM_Base_SetConfig+0x40>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a3d      	ldr	r2, [pc, #244]	; (80065dc <TIM_Base_SetConfig+0x118>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00b      	beq.n	8006504 <TIM_Base_SetConfig+0x40>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a3c      	ldr	r2, [pc, #240]	; (80065e0 <TIM_Base_SetConfig+0x11c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d007      	beq.n	8006504 <TIM_Base_SetConfig+0x40>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a3b      	ldr	r2, [pc, #236]	; (80065e4 <TIM_Base_SetConfig+0x120>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d003      	beq.n	8006504 <TIM_Base_SetConfig+0x40>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a3a      	ldr	r2, [pc, #232]	; (80065e8 <TIM_Base_SetConfig+0x124>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d108      	bne.n	8006516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4313      	orrs	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a2f      	ldr	r2, [pc, #188]	; (80065d8 <TIM_Base_SetConfig+0x114>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d02b      	beq.n	8006576 <TIM_Base_SetConfig+0xb2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006524:	d027      	beq.n	8006576 <TIM_Base_SetConfig+0xb2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a2c      	ldr	r2, [pc, #176]	; (80065dc <TIM_Base_SetConfig+0x118>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d023      	beq.n	8006576 <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a2b      	ldr	r2, [pc, #172]	; (80065e0 <TIM_Base_SetConfig+0x11c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d01f      	beq.n	8006576 <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a2a      	ldr	r2, [pc, #168]	; (80065e4 <TIM_Base_SetConfig+0x120>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d01b      	beq.n	8006576 <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a29      	ldr	r2, [pc, #164]	; (80065e8 <TIM_Base_SetConfig+0x124>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d017      	beq.n	8006576 <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a28      	ldr	r2, [pc, #160]	; (80065ec <TIM_Base_SetConfig+0x128>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d013      	beq.n	8006576 <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a27      	ldr	r2, [pc, #156]	; (80065f0 <TIM_Base_SetConfig+0x12c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00f      	beq.n	8006576 <TIM_Base_SetConfig+0xb2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a26      	ldr	r2, [pc, #152]	; (80065f4 <TIM_Base_SetConfig+0x130>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00b      	beq.n	8006576 <TIM_Base_SetConfig+0xb2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a25      	ldr	r2, [pc, #148]	; (80065f8 <TIM_Base_SetConfig+0x134>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d007      	beq.n	8006576 <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a24      	ldr	r2, [pc, #144]	; (80065fc <TIM_Base_SetConfig+0x138>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d003      	beq.n	8006576 <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a23      	ldr	r2, [pc, #140]	; (8006600 <TIM_Base_SetConfig+0x13c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d108      	bne.n	8006588 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800657c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	4313      	orrs	r3, r2
 8006586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a0a      	ldr	r2, [pc, #40]	; (80065d8 <TIM_Base_SetConfig+0x114>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d003      	beq.n	80065bc <TIM_Base_SetConfig+0xf8>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a0c      	ldr	r2, [pc, #48]	; (80065e8 <TIM_Base_SetConfig+0x124>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d103      	bne.n	80065c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	615a      	str	r2, [r3, #20]
}
 80065ca:	bf00      	nop
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	40010000 	.word	0x40010000
 80065dc:	40000400 	.word	0x40000400
 80065e0:	40000800 	.word	0x40000800
 80065e4:	40000c00 	.word	0x40000c00
 80065e8:	40010400 	.word	0x40010400
 80065ec:	40014000 	.word	0x40014000
 80065f0:	40014400 	.word	0x40014400
 80065f4:	40014800 	.word	0x40014800
 80065f8:	40001800 	.word	0x40001800
 80065fc:	40001c00 	.word	0x40001c00
 8006600:	40002000 	.word	0x40002000

08006604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	f023 0201 	bic.w	r2, r3, #1
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0303 	bic.w	r3, r3, #3
 800663a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f023 0302 	bic.w	r3, r3, #2
 800664c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a20      	ldr	r2, [pc, #128]	; (80066dc <TIM_OC1_SetConfig+0xd8>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d003      	beq.n	8006668 <TIM_OC1_SetConfig+0x64>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a1f      	ldr	r2, [pc, #124]	; (80066e0 <TIM_OC1_SetConfig+0xdc>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d10c      	bne.n	8006682 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f023 0308 	bic.w	r3, r3, #8
 800666e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f023 0304 	bic.w	r3, r3, #4
 8006680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a15      	ldr	r2, [pc, #84]	; (80066dc <TIM_OC1_SetConfig+0xd8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d003      	beq.n	8006692 <TIM_OC1_SetConfig+0x8e>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a14      	ldr	r2, [pc, #80]	; (80066e0 <TIM_OC1_SetConfig+0xdc>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d111      	bne.n	80066b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	621a      	str	r2, [r3, #32]
}
 80066d0:	bf00      	nop
 80066d2:	371c      	adds	r7, #28
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	40010000 	.word	0x40010000
 80066e0:	40010400 	.word	0x40010400

080066e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	f023 0210 	bic.w	r2, r3, #16
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800671a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	021b      	lsls	r3, r3, #8
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f023 0320 	bic.w	r3, r3, #32
 800672e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	011b      	lsls	r3, r3, #4
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a22      	ldr	r2, [pc, #136]	; (80067c8 <TIM_OC2_SetConfig+0xe4>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d003      	beq.n	800674c <TIM_OC2_SetConfig+0x68>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a21      	ldr	r2, [pc, #132]	; (80067cc <TIM_OC2_SetConfig+0xe8>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d10d      	bne.n	8006768 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	011b      	lsls	r3, r3, #4
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006766:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a17      	ldr	r2, [pc, #92]	; (80067c8 <TIM_OC2_SetConfig+0xe4>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d003      	beq.n	8006778 <TIM_OC2_SetConfig+0x94>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a16      	ldr	r2, [pc, #88]	; (80067cc <TIM_OC2_SetConfig+0xe8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d113      	bne.n	80067a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800677e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006786:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	4313      	orrs	r3, r2
 8006792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	621a      	str	r2, [r3, #32]
}
 80067ba:	bf00      	nop
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40010000 	.word	0x40010000
 80067cc:	40010400 	.word	0x40010400

080067d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 0303 	bic.w	r3, r3, #3
 8006806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	021b      	lsls	r3, r3, #8
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a21      	ldr	r2, [pc, #132]	; (80068b0 <TIM_OC3_SetConfig+0xe0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d003      	beq.n	8006836 <TIM_OC3_SetConfig+0x66>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a20      	ldr	r2, [pc, #128]	; (80068b4 <TIM_OC3_SetConfig+0xe4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d10d      	bne.n	8006852 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800683c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	021b      	lsls	r3, r3, #8
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	4313      	orrs	r3, r2
 8006848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a16      	ldr	r2, [pc, #88]	; (80068b0 <TIM_OC3_SetConfig+0xe0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_OC3_SetConfig+0x92>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a15      	ldr	r2, [pc, #84]	; (80068b4 <TIM_OC3_SetConfig+0xe4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d113      	bne.n	800688a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	011b      	lsls	r3, r3, #4
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	4313      	orrs	r3, r2
 800687c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	621a      	str	r2, [r3, #32]
}
 80068a4:	bf00      	nop
 80068a6:	371c      	adds	r7, #28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	40010000 	.word	0x40010000
 80068b4:	40010400 	.word	0x40010400

080068b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	021b      	lsls	r3, r3, #8
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	031b      	lsls	r3, r3, #12
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a12      	ldr	r2, [pc, #72]	; (800695c <TIM_OC4_SetConfig+0xa4>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d003      	beq.n	8006920 <TIM_OC4_SetConfig+0x68>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a11      	ldr	r2, [pc, #68]	; (8006960 <TIM_OC4_SetConfig+0xa8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d109      	bne.n	8006934 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006926:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	019b      	lsls	r3, r3, #6
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	4313      	orrs	r3, r2
 8006932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	621a      	str	r2, [r3, #32]
}
 800694e:	bf00      	nop
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40010000 	.word	0x40010000
 8006960:	40010400 	.word	0x40010400

08006964 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	f023 0201 	bic.w	r2, r3, #1
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800698e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	4313      	orrs	r3, r2
 8006998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f023 030a 	bic.w	r3, r3, #10
 80069a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	621a      	str	r2, [r3, #32]
}
 80069b6:	bf00      	nop
 80069b8:	371c      	adds	r7, #28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b087      	sub	sp, #28
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	60b9      	str	r1, [r7, #8]
 80069cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	f023 0210 	bic.w	r2, r3, #16
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	031b      	lsls	r3, r3, #12
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	621a      	str	r2, [r3, #32]
}
 8006a16:	bf00      	nop
 8006a18:	371c      	adds	r7, #28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b085      	sub	sp, #20
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	f043 0307 	orr.w	r3, r3, #7
 8006a44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	609a      	str	r2, [r3, #8]
}
 8006a4c:	bf00      	nop
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	021a      	lsls	r2, r3, #8
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	609a      	str	r2, [r3, #8]
}
 8006a8c:	bf00      	nop
 8006a8e:	371c      	adds	r7, #28
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f003 031f 	and.w	r3, r3, #31
 8006aaa:	2201      	movs	r2, #1
 8006aac:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6a1a      	ldr	r2, [r3, #32]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	43db      	mvns	r3, r3
 8006aba:	401a      	ands	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6a1a      	ldr	r2, [r3, #32]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f003 031f 	and.w	r3, r3, #31
 8006aca:	6879      	ldr	r1, [r7, #4]
 8006acc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	621a      	str	r2, [r3, #32]
}
 8006ad6:	bf00      	nop
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
	...

08006ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d101      	bne.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006af8:	2302      	movs	r3, #2
 8006afa:	e05a      	b.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a21      	ldr	r2, [pc, #132]	; (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d022      	beq.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b48:	d01d      	beq.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a1d      	ldr	r2, [pc, #116]	; (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d018      	beq.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a1b      	ldr	r2, [pc, #108]	; (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d013      	beq.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a1a      	ldr	r2, [pc, #104]	; (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d00e      	beq.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a18      	ldr	r2, [pc, #96]	; (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d009      	beq.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a17      	ldr	r2, [pc, #92]	; (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d004      	beq.n	8006b86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a15      	ldr	r2, [pc, #84]	; (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d10c      	bne.n	8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	40010000 	.word	0x40010000
 8006bc4:	40000400 	.word	0x40000400
 8006bc8:	40000800 	.word	0x40000800
 8006bcc:	40000c00 	.word	0x40000c00
 8006bd0:	40010400 	.word	0x40010400
 8006bd4:	40014000 	.word	0x40014000
 8006bd8:	40001800 	.word	0x40001800

08006bdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e03d      	b.n	8006c74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e03f      	b.n	8006d12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d106      	bne.n	8006cac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7fc fa26 	bl	80030f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2224      	movs	r2, #36	; 0x24
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 ff81 	bl	8007bcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	691a      	ldr	r2, [r3, #16]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	695a      	ldr	r2, [r3, #20]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ce8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08c      	sub	sp, #48	; 0x30
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	4613      	mov	r3, r2
 8006d28:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b20      	cmp	r3, #32
 8006d34:	d165      	bne.n	8006e02 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d002      	beq.n	8006d42 <HAL_UART_Transmit_DMA+0x26>
 8006d3c:	88fb      	ldrh	r3, [r7, #6]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e05e      	b.n	8006e04 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d101      	bne.n	8006d54 <HAL_UART_Transmit_DMA+0x38>
 8006d50:	2302      	movs	r3, #2
 8006d52:	e057      	b.n	8006e04 <HAL_UART_Transmit_DMA+0xe8>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	88fa      	ldrh	r2, [r7, #6]
 8006d66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	88fa      	ldrh	r2, [r7, #6]
 8006d6c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2221      	movs	r2, #33	; 0x21
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d80:	4a22      	ldr	r2, [pc, #136]	; (8006e0c <HAL_UART_Transmit_DMA+0xf0>)
 8006d82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d88:	4a21      	ldr	r2, [pc, #132]	; (8006e10 <HAL_UART_Transmit_DMA+0xf4>)
 8006d8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d90:	4a20      	ldr	r2, [pc, #128]	; (8006e14 <HAL_UART_Transmit_DMA+0xf8>)
 8006d92:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d98:	2200      	movs	r2, #0
 8006d9a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006d9c:	f107 0308 	add.w	r3, r7, #8
 8006da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da8:	6819      	ldr	r1, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3304      	adds	r3, #4
 8006db0:	461a      	mov	r2, r3
 8006db2:	88fb      	ldrh	r3, [r7, #6]
 8006db4:	f7fd fdaa 	bl	800490c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dc0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3314      	adds	r3, #20
 8006dd0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	e853 3f00 	ldrex	r3, [r3]
 8006dd8:	617b      	str	r3, [r7, #20]
   return(result);
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3314      	adds	r3, #20
 8006de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dea:	627a      	str	r2, [r7, #36]	; 0x24
 8006dec:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	6a39      	ldr	r1, [r7, #32]
 8006df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df2:	e841 2300 	strex	r3, r2, [r1]
 8006df6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e5      	bne.n	8006dca <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	e000      	b.n	8006e04 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006e02:	2302      	movs	r3, #2
  }
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3730      	adds	r7, #48	; 0x30
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	08007465 	.word	0x08007465
 8006e10:	080074ff 	.word	0x080074ff
 8006e14:	08007677 	.word	0x08007677

08006e18 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08c      	sub	sp, #48	; 0x30
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	4613      	mov	r3, r2
 8006e24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d152      	bne.n	8006ed8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006e38:	88fb      	ldrh	r3, [r7, #6]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e04b      	b.n	8006eda <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d101      	bne.n	8006e50 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	e044      	b.n	8006eda <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006e5e:	88fb      	ldrh	r3, [r7, #6]
 8006e60:	461a      	mov	r2, r3
 8006e62:	68b9      	ldr	r1, [r7, #8]
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 fc51 	bl	800770c <UART_Start_Receive_DMA>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006e70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d12c      	bne.n	8006ed2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d125      	bne.n	8006ecc <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e80:	2300      	movs	r3, #0
 8006e82:	613b      	str	r3, [r7, #16]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	613b      	str	r3, [r7, #16]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	613b      	str	r3, [r7, #16]
 8006e94:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	330c      	adds	r3, #12
 8006e9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f043 0310 	orr.w	r3, r3, #16
 8006eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	330c      	adds	r3, #12
 8006eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eb6:	627a      	str	r2, [r7, #36]	; 0x24
 8006eb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	6a39      	ldr	r1, [r7, #32]
 8006ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e5      	bne.n	8006e96 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006eca:	e002      	b.n	8006ed2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ed6:	e000      	b.n	8006eda <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006ed8:	2302      	movs	r3, #2
  }
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3730      	adds	r7, #48	; 0x30
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b0ba      	sub	sp, #232	; 0xe8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f1a:	f003 030f 	and.w	r3, r3, #15
 8006f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006f22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10f      	bne.n	8006f4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f2e:	f003 0320 	and.w	r3, r3, #32
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <HAL_UART_IRQHandler+0x66>
 8006f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f3a:	f003 0320 	and.w	r3, r3, #32
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fd87 	bl	8007a56 <UART_Receive_IT>
      return;
 8006f48:	e256      	b.n	80073f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 80de 	beq.w	8007110 <HAL_UART_IRQHandler+0x22c>
 8006f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d106      	bne.n	8006f6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 80d1 	beq.w	8007110 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00b      	beq.n	8006f92 <HAL_UART_IRQHandler+0xae>
 8006f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d005      	beq.n	8006f92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	f043 0201 	orr.w	r2, r3, #1
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f96:	f003 0304 	and.w	r3, r3, #4
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00b      	beq.n	8006fb6 <HAL_UART_IRQHandler+0xd2>
 8006f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d005      	beq.n	8006fb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	f043 0202 	orr.w	r2, r3, #2
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00b      	beq.n	8006fda <HAL_UART_IRQHandler+0xf6>
 8006fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	f043 0204 	orr.w	r2, r3, #4
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fde:	f003 0308 	and.w	r3, r3, #8
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d011      	beq.n	800700a <HAL_UART_IRQHandler+0x126>
 8006fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fea:	f003 0320 	and.w	r3, r3, #32
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d105      	bne.n	8006ffe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d005      	beq.n	800700a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	f043 0208 	orr.w	r2, r3, #8
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 81ed 	beq.w	80073ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007018:	f003 0320 	and.w	r3, r3, #32
 800701c:	2b00      	cmp	r3, #0
 800701e:	d008      	beq.n	8007032 <HAL_UART_IRQHandler+0x14e>
 8007020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007024:	f003 0320 	and.w	r3, r3, #32
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fd12 	bl	8007a56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703c:	2b40      	cmp	r3, #64	; 0x40
 800703e:	bf0c      	ite	eq
 8007040:	2301      	moveq	r3, #1
 8007042:	2300      	movne	r3, #0
 8007044:	b2db      	uxtb	r3, r3
 8007046:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	f003 0308 	and.w	r3, r3, #8
 8007052:	2b00      	cmp	r3, #0
 8007054:	d103      	bne.n	800705e <HAL_UART_IRQHandler+0x17a>
 8007056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800705a:	2b00      	cmp	r3, #0
 800705c:	d04f      	beq.n	80070fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fc1a 	bl	8007898 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706e:	2b40      	cmp	r3, #64	; 0x40
 8007070:	d141      	bne.n	80070f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3314      	adds	r3, #20
 8007078:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007080:	e853 3f00 	ldrex	r3, [r3]
 8007084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007088:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800708c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007090:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3314      	adds	r3, #20
 800709a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800709e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80070a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80070aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80070b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1d9      	bne.n	8007072 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d013      	beq.n	80070ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ca:	4a7d      	ldr	r2, [pc, #500]	; (80072c0 <HAL_UART_IRQHandler+0x3dc>)
 80070cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fd fce2 	bl	8004a9c <HAL_DMA_Abort_IT>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d016      	beq.n	800710c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070e8:	4610      	mov	r0, r2
 80070ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ec:	e00e      	b.n	800710c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f9ae 	bl	8007450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f4:	e00a      	b.n	800710c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f9aa 	bl	8007450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070fc:	e006      	b.n	800710c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f9a6 	bl	8007450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800710a:	e170      	b.n	80073ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800710c:	bf00      	nop
    return;
 800710e:	e16e      	b.n	80073ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007114:	2b01      	cmp	r3, #1
 8007116:	f040 814a 	bne.w	80073ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800711a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711e:	f003 0310 	and.w	r3, r3, #16
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 8143 	beq.w	80073ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800712c:	f003 0310 	and.w	r3, r3, #16
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 813c 	beq.w	80073ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007136:	2300      	movs	r3, #0
 8007138:	60bb      	str	r3, [r7, #8]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60bb      	str	r3, [r7, #8]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	60bb      	str	r3, [r7, #8]
 800714a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007156:	2b40      	cmp	r3, #64	; 0x40
 8007158:	f040 80b4 	bne.w	80072c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007168:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 8140 	beq.w	80073f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800717a:	429a      	cmp	r2, r3
 800717c:	f080 8139 	bcs.w	80073f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007186:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007192:	f000 8088 	beq.w	80072a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	330c      	adds	r3, #12
 800719c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80071ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	330c      	adds	r3, #12
 80071be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80071c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80071ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80071da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1d9      	bne.n	8007196 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3314      	adds	r3, #20
 80071e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071ec:	e853 3f00 	ldrex	r3, [r3]
 80071f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80071f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071f4:	f023 0301 	bic.w	r3, r3, #1
 80071f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3314      	adds	r3, #20
 8007202:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007206:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800720a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800720e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007218:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e1      	bne.n	80071e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3314      	adds	r3, #20
 8007224:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007228:	e853 3f00 	ldrex	r3, [r3]
 800722c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800722e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3314      	adds	r3, #20
 800723e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007242:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007244:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007248:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e3      	bne.n	800721e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	330c      	adds	r3, #12
 800726a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800726e:	e853 3f00 	ldrex	r3, [r3]
 8007272:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007276:	f023 0310 	bic.w	r3, r3, #16
 800727a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	330c      	adds	r3, #12
 8007284:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007288:	65ba      	str	r2, [r7, #88]	; 0x58
 800728a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800728e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e3      	bne.n	8007264 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fd fb8b 	bl	80049bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	4619      	mov	r1, r3
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7fa fa84 	bl	80017c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072bc:	e099      	b.n	80073f2 <HAL_UART_IRQHandler+0x50e>
 80072be:	bf00      	nop
 80072c0:	0800795f 	.word	0x0800795f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 808b 	beq.w	80073f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80072e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8086 	beq.w	80073f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	330c      	adds	r3, #12
 80072f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f4:	e853 3f00 	ldrex	r3, [r3]
 80072f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007300:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	330c      	adds	r3, #12
 800730a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800730e:	647a      	str	r2, [r7, #68]	; 0x44
 8007310:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007312:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007314:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007316:	e841 2300 	strex	r3, r2, [r1]
 800731a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800731c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1e3      	bne.n	80072ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3314      	adds	r3, #20
 8007328:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	623b      	str	r3, [r7, #32]
   return(result);
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	f023 0301 	bic.w	r3, r3, #1
 8007338:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	3314      	adds	r3, #20
 8007342:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007346:	633a      	str	r2, [r7, #48]	; 0x30
 8007348:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800734c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e3      	bne.n	8007322 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2220      	movs	r2, #32
 800735e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	330c      	adds	r3, #12
 800736e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	e853 3f00 	ldrex	r3, [r3]
 8007376:	60fb      	str	r3, [r7, #12]
   return(result);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f023 0310 	bic.w	r3, r3, #16
 800737e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	330c      	adds	r3, #12
 8007388:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800738c:	61fa      	str	r2, [r7, #28]
 800738e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007390:	69b9      	ldr	r1, [r7, #24]
 8007392:	69fa      	ldr	r2, [r7, #28]
 8007394:	e841 2300 	strex	r3, r2, [r1]
 8007398:	617b      	str	r3, [r7, #20]
   return(result);
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e3      	bne.n	8007368 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073a4:	4619      	mov	r1, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7fa fa0c 	bl	80017c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073ac:	e023      	b.n	80073f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80073ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d009      	beq.n	80073ce <HAL_UART_IRQHandler+0x4ea>
 80073ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fadd 	bl	8007986 <UART_Transmit_IT>
    return;
 80073cc:	e014      	b.n	80073f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00e      	beq.n	80073f8 <HAL_UART_IRQHandler+0x514>
 80073da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d008      	beq.n	80073f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fb1d 	bl	8007a26 <UART_EndTransmit_IT>
    return;
 80073ec:	e004      	b.n	80073f8 <HAL_UART_IRQHandler+0x514>
    return;
 80073ee:	bf00      	nop
 80073f0:	e002      	b.n	80073f8 <HAL_UART_IRQHandler+0x514>
      return;
 80073f2:	bf00      	nop
 80073f4:	e000      	b.n	80073f8 <HAL_UART_IRQHandler+0x514>
      return;
 80073f6:	bf00      	nop
  }
}
 80073f8:	37e8      	adds	r7, #232	; 0xe8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop

08007400 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b090      	sub	sp, #64	; 0x40
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007470:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800747c:	2b00      	cmp	r3, #0
 800747e:	d137      	bne.n	80074f0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007482:	2200      	movs	r2, #0
 8007484:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3314      	adds	r3, #20
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	e853 3f00 	ldrex	r3, [r3]
 8007494:	623b      	str	r3, [r7, #32]
   return(result);
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800749c:	63bb      	str	r3, [r7, #56]	; 0x38
 800749e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3314      	adds	r3, #20
 80074a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074a6:	633a      	str	r2, [r7, #48]	; 0x30
 80074a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ae:	e841 2300 	strex	r3, r2, [r1]
 80074b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1e5      	bne.n	8007486 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	330c      	adds	r3, #12
 80074c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074d0:	637b      	str	r3, [r7, #52]	; 0x34
 80074d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	330c      	adds	r3, #12
 80074d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074da:	61fa      	str	r2, [r7, #28]
 80074dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	69b9      	ldr	r1, [r7, #24]
 80074e0:	69fa      	ldr	r2, [r7, #28]
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	617b      	str	r3, [r7, #20]
   return(result);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1e5      	bne.n	80074ba <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074ee:	e002      	b.n	80074f6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80074f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80074f2:	f7ff ff85 	bl	8007400 <HAL_UART_TxCpltCallback>
}
 80074f6:	bf00      	nop
 80074f8:	3740      	adds	r7, #64	; 0x40
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f7ff ff81 	bl	8007414 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007512:	bf00      	nop
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b09c      	sub	sp, #112	; 0x70
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007526:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007532:	2b00      	cmp	r3, #0
 8007534:	d172      	bne.n	800761c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007538:	2200      	movs	r2, #0
 800753a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800753c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	330c      	adds	r3, #12
 8007542:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007546:	e853 3f00 	ldrex	r3, [r3]
 800754a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800754c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007552:	66bb      	str	r3, [r7, #104]	; 0x68
 8007554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	330c      	adds	r3, #12
 800755a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800755c:	65ba      	str	r2, [r7, #88]	; 0x58
 800755e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007562:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007564:	e841 2300 	strex	r3, r2, [r1]
 8007568:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800756a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e5      	bne.n	800753c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3314      	adds	r3, #20
 8007576:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007582:	f023 0301 	bic.w	r3, r3, #1
 8007586:	667b      	str	r3, [r7, #100]	; 0x64
 8007588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	3314      	adds	r3, #20
 800758e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007590:	647a      	str	r2, [r7, #68]	; 0x44
 8007592:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007594:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007598:	e841 2300 	strex	r3, r2, [r1]
 800759c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800759e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e5      	bne.n	8007570 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3314      	adds	r3, #20
 80075aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ae:	e853 3f00 	ldrex	r3, [r3]
 80075b2:	623b      	str	r3, [r7, #32]
   return(result);
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ba:	663b      	str	r3, [r7, #96]	; 0x60
 80075bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3314      	adds	r3, #20
 80075c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075c4:	633a      	str	r2, [r7, #48]	; 0x30
 80075c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075cc:	e841 2300 	strex	r3, r2, [r1]
 80075d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e5      	bne.n	80075a4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075da:	2220      	movs	r2, #32
 80075dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d119      	bne.n	800761c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	330c      	adds	r3, #12
 80075ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 0310 	bic.w	r3, r3, #16
 80075fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	330c      	adds	r3, #12
 8007606:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007608:	61fa      	str	r2, [r7, #28]
 800760a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	69b9      	ldr	r1, [r7, #24]
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	617b      	str	r3, [r7, #20]
   return(result);
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e5      	bne.n	80075e8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800761c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800761e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007620:	2b01      	cmp	r3, #1
 8007622:	d106      	bne.n	8007632 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007626:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007628:	4619      	mov	r1, r3
 800762a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800762c:	f7fa f8ca 	bl	80017c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007630:	e002      	b.n	8007638 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007632:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007634:	f7ff fef8 	bl	8007428 <HAL_UART_RxCpltCallback>
}
 8007638:	bf00      	nop
 800763a:	3770      	adds	r7, #112	; 0x70
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007652:	2b01      	cmp	r3, #1
 8007654:	d108      	bne.n	8007668 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800765a:	085b      	lsrs	r3, r3, #1
 800765c:	b29b      	uxth	r3, r3
 800765e:	4619      	mov	r1, r3
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f7fa f8af 	bl	80017c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007666:	e002      	b.n	800766e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f7ff fee7 	bl	800743c <HAL_UART_RxHalfCpltCallback>
}
 800766e:	bf00      	nop
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b084      	sub	sp, #16
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800767e:	2300      	movs	r3, #0
 8007680:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007686:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007692:	2b80      	cmp	r3, #128	; 0x80
 8007694:	bf0c      	ite	eq
 8007696:	2301      	moveq	r3, #1
 8007698:	2300      	movne	r3, #0
 800769a:	b2db      	uxtb	r3, r3
 800769c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b21      	cmp	r3, #33	; 0x21
 80076a8:	d108      	bne.n	80076bc <UART_DMAError+0x46>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d005      	beq.n	80076bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2200      	movs	r2, #0
 80076b4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80076b6:	68b8      	ldr	r0, [r7, #8]
 80076b8:	f000 f8c6 	bl	8007848 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c6:	2b40      	cmp	r3, #64	; 0x40
 80076c8:	bf0c      	ite	eq
 80076ca:	2301      	moveq	r3, #1
 80076cc:	2300      	movne	r3, #0
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b22      	cmp	r3, #34	; 0x22
 80076dc:	d108      	bne.n	80076f0 <UART_DMAError+0x7a>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d005      	beq.n	80076f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2200      	movs	r2, #0
 80076e8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80076ea:	68b8      	ldr	r0, [r7, #8]
 80076ec:	f000 f8d4 	bl	8007898 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f4:	f043 0210 	orr.w	r2, r3, #16
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076fc:	68b8      	ldr	r0, [r7, #8]
 80076fe:	f7ff fea7 	bl	8007450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007702:	bf00      	nop
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b098      	sub	sp, #96	; 0x60
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	4613      	mov	r3, r2
 8007718:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	88fa      	ldrh	r2, [r7, #6]
 8007724:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2222      	movs	r2, #34	; 0x22
 8007730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007738:	4a40      	ldr	r2, [pc, #256]	; (800783c <UART_Start_Receive_DMA+0x130>)
 800773a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007740:	4a3f      	ldr	r2, [pc, #252]	; (8007840 <UART_Start_Receive_DMA+0x134>)
 8007742:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007748:	4a3e      	ldr	r2, [pc, #248]	; (8007844 <UART_Start_Receive_DMA+0x138>)
 800774a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007750:	2200      	movs	r2, #0
 8007752:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007754:	f107 0308 	add.w	r3, r7, #8
 8007758:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3304      	adds	r3, #4
 8007764:	4619      	mov	r1, r3
 8007766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	88fb      	ldrh	r3, [r7, #6]
 800776c:	f7fd f8ce 	bl	800490c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007770:	2300      	movs	r3, #0
 8007772:	613b      	str	r3, [r7, #16]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	613b      	str	r3, [r7, #16]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	613b      	str	r3, [r7, #16]
 8007784:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d019      	beq.n	80077ca <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	330c      	adds	r3, #12
 800779c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	330c      	adds	r3, #12
 80077b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077b6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80077b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80077bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80077c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e5      	bne.n	8007796 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3314      	adds	r3, #20
 80077d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d4:	e853 3f00 	ldrex	r3, [r3]
 80077d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	f043 0301 	orr.w	r3, r3, #1
 80077e0:	657b      	str	r3, [r7, #84]	; 0x54
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3314      	adds	r3, #20
 80077e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80077ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80077f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077f2:	e841 2300 	strex	r3, r2, [r1]
 80077f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1e5      	bne.n	80077ca <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3314      	adds	r3, #20
 8007804:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	e853 3f00 	ldrex	r3, [r3]
 800780c:	617b      	str	r3, [r7, #20]
   return(result);
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007814:	653b      	str	r3, [r7, #80]	; 0x50
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3314      	adds	r3, #20
 800781c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800781e:	627a      	str	r2, [r7, #36]	; 0x24
 8007820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007822:	6a39      	ldr	r1, [r7, #32]
 8007824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007826:	e841 2300 	strex	r3, r2, [r1]
 800782a:	61fb      	str	r3, [r7, #28]
   return(result);
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1e5      	bne.n	80077fe <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3760      	adds	r7, #96	; 0x60
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	0800751b 	.word	0x0800751b
 8007840:	08007641 	.word	0x08007641
 8007844:	08007677 	.word	0x08007677

08007848 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007848:	b480      	push	{r7}
 800784a:	b089      	sub	sp, #36	; 0x24
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	330c      	adds	r3, #12
 8007856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	e853 3f00 	ldrex	r3, [r3]
 800785e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007866:	61fb      	str	r3, [r7, #28]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	330c      	adds	r3, #12
 800786e:	69fa      	ldr	r2, [r7, #28]
 8007870:	61ba      	str	r2, [r7, #24]
 8007872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007874:	6979      	ldr	r1, [r7, #20]
 8007876:	69ba      	ldr	r2, [r7, #24]
 8007878:	e841 2300 	strex	r3, r2, [r1]
 800787c:	613b      	str	r3, [r7, #16]
   return(result);
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e5      	bne.n	8007850 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2220      	movs	r2, #32
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800788c:	bf00      	nop
 800788e:	3724      	adds	r7, #36	; 0x24
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007898:	b480      	push	{r7}
 800789a:	b095      	sub	sp, #84	; 0x54
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	330c      	adds	r3, #12
 80078a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	330c      	adds	r3, #12
 80078be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078c0:	643a      	str	r2, [r7, #64]	; 0x40
 80078c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e5      	bne.n	80078a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3314      	adds	r3, #20
 80078da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	e853 3f00 	ldrex	r3, [r3]
 80078e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	f023 0301 	bic.w	r3, r3, #1
 80078ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3314      	adds	r3, #20
 80078f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078fc:	e841 2300 	strex	r3, r2, [r1]
 8007900:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e5      	bne.n	80078d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790c:	2b01      	cmp	r3, #1
 800790e:	d119      	bne.n	8007944 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	330c      	adds	r3, #12
 8007916:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	e853 3f00 	ldrex	r3, [r3]
 800791e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f023 0310 	bic.w	r3, r3, #16
 8007926:	647b      	str	r3, [r7, #68]	; 0x44
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	330c      	adds	r3, #12
 800792e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007930:	61ba      	str	r2, [r7, #24]
 8007932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007934:	6979      	ldr	r1, [r7, #20]
 8007936:	69ba      	ldr	r2, [r7, #24]
 8007938:	e841 2300 	strex	r3, r2, [r1]
 800793c:	613b      	str	r3, [r7, #16]
   return(result);
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e5      	bne.n	8007910 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2220      	movs	r2, #32
 8007948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007952:	bf00      	nop
 8007954:	3754      	adds	r7, #84	; 0x54
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f7ff fd69 	bl	8007450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800797e:	bf00      	nop
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007986:	b480      	push	{r7}
 8007988:	b085      	sub	sp, #20
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b21      	cmp	r3, #33	; 0x21
 8007998:	d13e      	bne.n	8007a18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a2:	d114      	bne.n	80079ce <UART_Transmit_IT+0x48>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d110      	bne.n	80079ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	1c9a      	adds	r2, r3, #2
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	621a      	str	r2, [r3, #32]
 80079cc:	e008      	b.n	80079e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	1c59      	adds	r1, r3, #1
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	6211      	str	r1, [r2, #32]
 80079d8:	781a      	ldrb	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	3b01      	subs	r3, #1
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	4619      	mov	r1, r3
 80079ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10f      	bne.n	8007a14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68da      	ldr	r2, [r3, #12]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68da      	ldr	r2, [r3, #12]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	e000      	b.n	8007a1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a18:	2302      	movs	r3, #2
  }
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b082      	sub	sp, #8
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2220      	movs	r2, #32
 8007a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7ff fcda 	bl	8007400 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b08c      	sub	sp, #48	; 0x30
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b22      	cmp	r3, #34	; 0x22
 8007a68:	f040 80ab 	bne.w	8007bc2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a74:	d117      	bne.n	8007aa6 <UART_Receive_IT+0x50>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d113      	bne.n	8007aa6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9e:	1c9a      	adds	r2, r3, #2
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	629a      	str	r2, [r3, #40]	; 0x28
 8007aa4:	e026      	b.n	8007af4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007aac:	2300      	movs	r3, #0
 8007aae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ab8:	d007      	beq.n	8007aca <UART_Receive_IT+0x74>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10a      	bne.n	8007ad8 <UART_Receive_IT+0x82>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d106      	bne.n	8007ad8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad4:	701a      	strb	r2, [r3, #0]
 8007ad6:	e008      	b.n	8007aea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	3b01      	subs	r3, #1
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	4619      	mov	r1, r3
 8007b02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d15a      	bne.n	8007bbe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68da      	ldr	r2, [r3, #12]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f022 0220 	bic.w	r2, r2, #32
 8007b16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68da      	ldr	r2, [r3, #12]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	695a      	ldr	r2, [r3, #20]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0201 	bic.w	r2, r2, #1
 8007b36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d135      	bne.n	8007bb4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	330c      	adds	r3, #12
 8007b54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	e853 3f00 	ldrex	r3, [r3]
 8007b5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f023 0310 	bic.w	r3, r3, #16
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	330c      	adds	r3, #12
 8007b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b6e:	623a      	str	r2, [r7, #32]
 8007b70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b72:	69f9      	ldr	r1, [r7, #28]
 8007b74:	6a3a      	ldr	r2, [r7, #32]
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e5      	bne.n	8007b4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0310 	and.w	r3, r3, #16
 8007b8c:	2b10      	cmp	r3, #16
 8007b8e:	d10a      	bne.n	8007ba6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b90:	2300      	movs	r3, #0
 8007b92:	60fb      	str	r3, [r7, #12]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	60fb      	str	r3, [r7, #12]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7f9 fe09 	bl	80017c4 <HAL_UARTEx_RxEventCallback>
 8007bb2:	e002      	b.n	8007bba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff fc37 	bl	8007428 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	e002      	b.n	8007bc4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	e000      	b.n	8007bc4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007bc2:	2302      	movs	r3, #2
  }
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3730      	adds	r7, #48	; 0x30
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bd0:	b0c0      	sub	sp, #256	; 0x100
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be8:	68d9      	ldr	r1, [r3, #12]
 8007bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	ea40 0301 	orr.w	r3, r0, r1
 8007bf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	431a      	orrs	r2, r3
 8007c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c24:	f021 010c 	bic.w	r1, r1, #12
 8007c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c32:	430b      	orrs	r3, r1
 8007c34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c46:	6999      	ldr	r1, [r3, #24]
 8007c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	ea40 0301 	orr.w	r3, r0, r1
 8007c52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	4b8f      	ldr	r3, [pc, #572]	; (8007e98 <UART_SetConfig+0x2cc>)
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d005      	beq.n	8007c6c <UART_SetConfig+0xa0>
 8007c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	4b8d      	ldr	r3, [pc, #564]	; (8007e9c <UART_SetConfig+0x2d0>)
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d104      	bne.n	8007c76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c6c:	f7fd ffa8 	bl	8005bc0 <HAL_RCC_GetPCLK2Freq>
 8007c70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007c74:	e003      	b.n	8007c7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c76:	f7fd ff8f 	bl	8005b98 <HAL_RCC_GetPCLK1Freq>
 8007c7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c88:	f040 810c 	bne.w	8007ea4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c90:	2200      	movs	r2, #0
 8007c92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007c9e:	4622      	mov	r2, r4
 8007ca0:	462b      	mov	r3, r5
 8007ca2:	1891      	adds	r1, r2, r2
 8007ca4:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ca6:	415b      	adcs	r3, r3
 8007ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007caa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007cae:	4621      	mov	r1, r4
 8007cb0:	eb12 0801 	adds.w	r8, r2, r1
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	eb43 0901 	adc.w	r9, r3, r1
 8007cba:	f04f 0200 	mov.w	r2, #0
 8007cbe:	f04f 0300 	mov.w	r3, #0
 8007cc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007cc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007cca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007cce:	4690      	mov	r8, r2
 8007cd0:	4699      	mov	r9, r3
 8007cd2:	4623      	mov	r3, r4
 8007cd4:	eb18 0303 	adds.w	r3, r8, r3
 8007cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007cdc:	462b      	mov	r3, r5
 8007cde:	eb49 0303 	adc.w	r3, r9, r3
 8007ce2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007cf2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007cf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	18db      	adds	r3, r3, r3
 8007cfe:	653b      	str	r3, [r7, #80]	; 0x50
 8007d00:	4613      	mov	r3, r2
 8007d02:	eb42 0303 	adc.w	r3, r2, r3
 8007d06:	657b      	str	r3, [r7, #84]	; 0x54
 8007d08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d10:	f7f8 ff4a 	bl	8000ba8 <__aeabi_uldivmod>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4b61      	ldr	r3, [pc, #388]	; (8007ea0 <UART_SetConfig+0x2d4>)
 8007d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8007d1e:	095b      	lsrs	r3, r3, #5
 8007d20:	011c      	lsls	r4, r3, #4
 8007d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007d30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007d34:	4642      	mov	r2, r8
 8007d36:	464b      	mov	r3, r9
 8007d38:	1891      	adds	r1, r2, r2
 8007d3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d3c:	415b      	adcs	r3, r3
 8007d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007d44:	4641      	mov	r1, r8
 8007d46:	eb12 0a01 	adds.w	sl, r2, r1
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	eb43 0b01 	adc.w	fp, r3, r1
 8007d50:	f04f 0200 	mov.w	r2, #0
 8007d54:	f04f 0300 	mov.w	r3, #0
 8007d58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d64:	4692      	mov	sl, r2
 8007d66:	469b      	mov	fp, r3
 8007d68:	4643      	mov	r3, r8
 8007d6a:	eb1a 0303 	adds.w	r3, sl, r3
 8007d6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d72:	464b      	mov	r3, r9
 8007d74:	eb4b 0303 	adc.w	r3, fp, r3
 8007d78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007d8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007d90:	460b      	mov	r3, r1
 8007d92:	18db      	adds	r3, r3, r3
 8007d94:	643b      	str	r3, [r7, #64]	; 0x40
 8007d96:	4613      	mov	r3, r2
 8007d98:	eb42 0303 	adc.w	r3, r2, r3
 8007d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007da2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007da6:	f7f8 feff 	bl	8000ba8 <__aeabi_uldivmod>
 8007daa:	4602      	mov	r2, r0
 8007dac:	460b      	mov	r3, r1
 8007dae:	4611      	mov	r1, r2
 8007db0:	4b3b      	ldr	r3, [pc, #236]	; (8007ea0 <UART_SetConfig+0x2d4>)
 8007db2:	fba3 2301 	umull	r2, r3, r3, r1
 8007db6:	095b      	lsrs	r3, r3, #5
 8007db8:	2264      	movs	r2, #100	; 0x64
 8007dba:	fb02 f303 	mul.w	r3, r2, r3
 8007dbe:	1acb      	subs	r3, r1, r3
 8007dc0:	00db      	lsls	r3, r3, #3
 8007dc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007dc6:	4b36      	ldr	r3, [pc, #216]	; (8007ea0 <UART_SetConfig+0x2d4>)
 8007dc8:	fba3 2302 	umull	r2, r3, r3, r2
 8007dcc:	095b      	lsrs	r3, r3, #5
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007dd4:	441c      	add	r4, r3
 8007dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007de0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007de4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007de8:	4642      	mov	r2, r8
 8007dea:	464b      	mov	r3, r9
 8007dec:	1891      	adds	r1, r2, r2
 8007dee:	63b9      	str	r1, [r7, #56]	; 0x38
 8007df0:	415b      	adcs	r3, r3
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007df4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007df8:	4641      	mov	r1, r8
 8007dfa:	1851      	adds	r1, r2, r1
 8007dfc:	6339      	str	r1, [r7, #48]	; 0x30
 8007dfe:	4649      	mov	r1, r9
 8007e00:	414b      	adcs	r3, r1
 8007e02:	637b      	str	r3, [r7, #52]	; 0x34
 8007e04:	f04f 0200 	mov.w	r2, #0
 8007e08:	f04f 0300 	mov.w	r3, #0
 8007e0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007e10:	4659      	mov	r1, fp
 8007e12:	00cb      	lsls	r3, r1, #3
 8007e14:	4651      	mov	r1, sl
 8007e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e1a:	4651      	mov	r1, sl
 8007e1c:	00ca      	lsls	r2, r1, #3
 8007e1e:	4610      	mov	r0, r2
 8007e20:	4619      	mov	r1, r3
 8007e22:	4603      	mov	r3, r0
 8007e24:	4642      	mov	r2, r8
 8007e26:	189b      	adds	r3, r3, r2
 8007e28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e2c:	464b      	mov	r3, r9
 8007e2e:	460a      	mov	r2, r1
 8007e30:	eb42 0303 	adc.w	r3, r2, r3
 8007e34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007e48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	18db      	adds	r3, r3, r3
 8007e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e52:	4613      	mov	r3, r2
 8007e54:	eb42 0303 	adc.w	r3, r2, r3
 8007e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e62:	f7f8 fea1 	bl	8000ba8 <__aeabi_uldivmod>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4b0d      	ldr	r3, [pc, #52]	; (8007ea0 <UART_SetConfig+0x2d4>)
 8007e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8007e70:	095b      	lsrs	r3, r3, #5
 8007e72:	2164      	movs	r1, #100	; 0x64
 8007e74:	fb01 f303 	mul.w	r3, r1, r3
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	3332      	adds	r3, #50	; 0x32
 8007e7e:	4a08      	ldr	r2, [pc, #32]	; (8007ea0 <UART_SetConfig+0x2d4>)
 8007e80:	fba2 2303 	umull	r2, r3, r2, r3
 8007e84:	095b      	lsrs	r3, r3, #5
 8007e86:	f003 0207 	and.w	r2, r3, #7
 8007e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4422      	add	r2, r4
 8007e92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e94:	e105      	b.n	80080a2 <UART_SetConfig+0x4d6>
 8007e96:	bf00      	nop
 8007e98:	40011000 	.word	0x40011000
 8007e9c:	40011400 	.word	0x40011400
 8007ea0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007eae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007eb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007eb6:	4642      	mov	r2, r8
 8007eb8:	464b      	mov	r3, r9
 8007eba:	1891      	adds	r1, r2, r2
 8007ebc:	6239      	str	r1, [r7, #32]
 8007ebe:	415b      	adcs	r3, r3
 8007ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ec2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ec6:	4641      	mov	r1, r8
 8007ec8:	1854      	adds	r4, r2, r1
 8007eca:	4649      	mov	r1, r9
 8007ecc:	eb43 0501 	adc.w	r5, r3, r1
 8007ed0:	f04f 0200 	mov.w	r2, #0
 8007ed4:	f04f 0300 	mov.w	r3, #0
 8007ed8:	00eb      	lsls	r3, r5, #3
 8007eda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ede:	00e2      	lsls	r2, r4, #3
 8007ee0:	4614      	mov	r4, r2
 8007ee2:	461d      	mov	r5, r3
 8007ee4:	4643      	mov	r3, r8
 8007ee6:	18e3      	adds	r3, r4, r3
 8007ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007eec:	464b      	mov	r3, r9
 8007eee:	eb45 0303 	adc.w	r3, r5, r3
 8007ef2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f06:	f04f 0200 	mov.w	r2, #0
 8007f0a:	f04f 0300 	mov.w	r3, #0
 8007f0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007f12:	4629      	mov	r1, r5
 8007f14:	008b      	lsls	r3, r1, #2
 8007f16:	4621      	mov	r1, r4
 8007f18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	008a      	lsls	r2, r1, #2
 8007f20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007f24:	f7f8 fe40 	bl	8000ba8 <__aeabi_uldivmod>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4b60      	ldr	r3, [pc, #384]	; (80080b0 <UART_SetConfig+0x4e4>)
 8007f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8007f32:	095b      	lsrs	r3, r3, #5
 8007f34:	011c      	lsls	r4, r3, #4
 8007f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007f44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007f48:	4642      	mov	r2, r8
 8007f4a:	464b      	mov	r3, r9
 8007f4c:	1891      	adds	r1, r2, r2
 8007f4e:	61b9      	str	r1, [r7, #24]
 8007f50:	415b      	adcs	r3, r3
 8007f52:	61fb      	str	r3, [r7, #28]
 8007f54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f58:	4641      	mov	r1, r8
 8007f5a:	1851      	adds	r1, r2, r1
 8007f5c:	6139      	str	r1, [r7, #16]
 8007f5e:	4649      	mov	r1, r9
 8007f60:	414b      	adcs	r3, r1
 8007f62:	617b      	str	r3, [r7, #20]
 8007f64:	f04f 0200 	mov.w	r2, #0
 8007f68:	f04f 0300 	mov.w	r3, #0
 8007f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f70:	4659      	mov	r1, fp
 8007f72:	00cb      	lsls	r3, r1, #3
 8007f74:	4651      	mov	r1, sl
 8007f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f7a:	4651      	mov	r1, sl
 8007f7c:	00ca      	lsls	r2, r1, #3
 8007f7e:	4610      	mov	r0, r2
 8007f80:	4619      	mov	r1, r3
 8007f82:	4603      	mov	r3, r0
 8007f84:	4642      	mov	r2, r8
 8007f86:	189b      	adds	r3, r3, r2
 8007f88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f8c:	464b      	mov	r3, r9
 8007f8e:	460a      	mov	r2, r1
 8007f90:	eb42 0303 	adc.w	r3, r2, r3
 8007f94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fa2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007fa4:	f04f 0200 	mov.w	r2, #0
 8007fa8:	f04f 0300 	mov.w	r3, #0
 8007fac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007fb0:	4649      	mov	r1, r9
 8007fb2:	008b      	lsls	r3, r1, #2
 8007fb4:	4641      	mov	r1, r8
 8007fb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fba:	4641      	mov	r1, r8
 8007fbc:	008a      	lsls	r2, r1, #2
 8007fbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007fc2:	f7f8 fdf1 	bl	8000ba8 <__aeabi_uldivmod>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4b39      	ldr	r3, [pc, #228]	; (80080b0 <UART_SetConfig+0x4e4>)
 8007fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8007fd0:	095b      	lsrs	r3, r3, #5
 8007fd2:	2164      	movs	r1, #100	; 0x64
 8007fd4:	fb01 f303 	mul.w	r3, r1, r3
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	011b      	lsls	r3, r3, #4
 8007fdc:	3332      	adds	r3, #50	; 0x32
 8007fde:	4a34      	ldr	r2, [pc, #208]	; (80080b0 <UART_SetConfig+0x4e4>)
 8007fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe4:	095b      	lsrs	r3, r3, #5
 8007fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fea:	441c      	add	r4, r3
 8007fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	673b      	str	r3, [r7, #112]	; 0x70
 8007ff4:	677a      	str	r2, [r7, #116]	; 0x74
 8007ff6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007ffa:	4642      	mov	r2, r8
 8007ffc:	464b      	mov	r3, r9
 8007ffe:	1891      	adds	r1, r2, r2
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	415b      	adcs	r3, r3
 8008004:	60fb      	str	r3, [r7, #12]
 8008006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800800a:	4641      	mov	r1, r8
 800800c:	1851      	adds	r1, r2, r1
 800800e:	6039      	str	r1, [r7, #0]
 8008010:	4649      	mov	r1, r9
 8008012:	414b      	adcs	r3, r1
 8008014:	607b      	str	r3, [r7, #4]
 8008016:	f04f 0200 	mov.w	r2, #0
 800801a:	f04f 0300 	mov.w	r3, #0
 800801e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008022:	4659      	mov	r1, fp
 8008024:	00cb      	lsls	r3, r1, #3
 8008026:	4651      	mov	r1, sl
 8008028:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800802c:	4651      	mov	r1, sl
 800802e:	00ca      	lsls	r2, r1, #3
 8008030:	4610      	mov	r0, r2
 8008032:	4619      	mov	r1, r3
 8008034:	4603      	mov	r3, r0
 8008036:	4642      	mov	r2, r8
 8008038:	189b      	adds	r3, r3, r2
 800803a:	66bb      	str	r3, [r7, #104]	; 0x68
 800803c:	464b      	mov	r3, r9
 800803e:	460a      	mov	r2, r1
 8008040:	eb42 0303 	adc.w	r3, r2, r3
 8008044:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	663b      	str	r3, [r7, #96]	; 0x60
 8008050:	667a      	str	r2, [r7, #100]	; 0x64
 8008052:	f04f 0200 	mov.w	r2, #0
 8008056:	f04f 0300 	mov.w	r3, #0
 800805a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800805e:	4649      	mov	r1, r9
 8008060:	008b      	lsls	r3, r1, #2
 8008062:	4641      	mov	r1, r8
 8008064:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008068:	4641      	mov	r1, r8
 800806a:	008a      	lsls	r2, r1, #2
 800806c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008070:	f7f8 fd9a 	bl	8000ba8 <__aeabi_uldivmod>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4b0d      	ldr	r3, [pc, #52]	; (80080b0 <UART_SetConfig+0x4e4>)
 800807a:	fba3 1302 	umull	r1, r3, r3, r2
 800807e:	095b      	lsrs	r3, r3, #5
 8008080:	2164      	movs	r1, #100	; 0x64
 8008082:	fb01 f303 	mul.w	r3, r1, r3
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	011b      	lsls	r3, r3, #4
 800808a:	3332      	adds	r3, #50	; 0x32
 800808c:	4a08      	ldr	r2, [pc, #32]	; (80080b0 <UART_SetConfig+0x4e4>)
 800808e:	fba2 2303 	umull	r2, r3, r2, r3
 8008092:	095b      	lsrs	r3, r3, #5
 8008094:	f003 020f 	and.w	r2, r3, #15
 8008098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4422      	add	r2, r4
 80080a0:	609a      	str	r2, [r3, #8]
}
 80080a2:	bf00      	nop
 80080a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80080a8:	46bd      	mov	sp, r7
 80080aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080ae:	bf00      	nop
 80080b0:	51eb851f 	.word	0x51eb851f

080080b4 <__NVIC_SetPriority>:
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4603      	mov	r3, r0
 80080bc:	6039      	str	r1, [r7, #0]
 80080be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	db0a      	blt.n	80080de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	490c      	ldr	r1, [pc, #48]	; (8008100 <__NVIC_SetPriority+0x4c>)
 80080ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080d2:	0112      	lsls	r2, r2, #4
 80080d4:	b2d2      	uxtb	r2, r2
 80080d6:	440b      	add	r3, r1
 80080d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80080dc:	e00a      	b.n	80080f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	4908      	ldr	r1, [pc, #32]	; (8008104 <__NVIC_SetPriority+0x50>)
 80080e4:	79fb      	ldrb	r3, [r7, #7]
 80080e6:	f003 030f 	and.w	r3, r3, #15
 80080ea:	3b04      	subs	r3, #4
 80080ec:	0112      	lsls	r2, r2, #4
 80080ee:	b2d2      	uxtb	r2, r2
 80080f0:	440b      	add	r3, r1
 80080f2:	761a      	strb	r2, [r3, #24]
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	e000e100 	.word	0xe000e100
 8008104:	e000ed00 	.word	0xe000ed00

08008108 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800810c:	2100      	movs	r1, #0
 800810e:	f06f 0004 	mvn.w	r0, #4
 8008112:	f7ff ffcf 	bl	80080b4 <__NVIC_SetPriority>
#endif
}
 8008116:	bf00      	nop
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008122:	f3ef 8305 	mrs	r3, IPSR
 8008126:	603b      	str	r3, [r7, #0]
  return(result);
 8008128:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800812e:	f06f 0305 	mvn.w	r3, #5
 8008132:	607b      	str	r3, [r7, #4]
 8008134:	e00c      	b.n	8008150 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008136:	4b0a      	ldr	r3, [pc, #40]	; (8008160 <osKernelInitialize+0x44>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d105      	bne.n	800814a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800813e:	4b08      	ldr	r3, [pc, #32]	; (8008160 <osKernelInitialize+0x44>)
 8008140:	2201      	movs	r2, #1
 8008142:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008144:	2300      	movs	r3, #0
 8008146:	607b      	str	r3, [r7, #4]
 8008148:	e002      	b.n	8008150 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800814a:	f04f 33ff 	mov.w	r3, #4294967295
 800814e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008150:	687b      	ldr	r3, [r7, #4]
}
 8008152:	4618      	mov	r0, r3
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	20000c48 	.word	0x20000c48

08008164 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800816a:	f3ef 8305 	mrs	r3, IPSR
 800816e:	603b      	str	r3, [r7, #0]
  return(result);
 8008170:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008176:	f06f 0305 	mvn.w	r3, #5
 800817a:	607b      	str	r3, [r7, #4]
 800817c:	e010      	b.n	80081a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800817e:	4b0b      	ldr	r3, [pc, #44]	; (80081ac <osKernelStart+0x48>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d109      	bne.n	800819a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008186:	f7ff ffbf 	bl	8008108 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800818a:	4b08      	ldr	r3, [pc, #32]	; (80081ac <osKernelStart+0x48>)
 800818c:	2202      	movs	r2, #2
 800818e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008190:	f001 f87c 	bl	800928c <vTaskStartScheduler>
      stat = osOK;
 8008194:	2300      	movs	r3, #0
 8008196:	607b      	str	r3, [r7, #4]
 8008198:	e002      	b.n	80081a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800819a:	f04f 33ff 	mov.w	r3, #4294967295
 800819e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80081a0:	687b      	ldr	r3, [r7, #4]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20000c48 	.word	0x20000c48

080081b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b08e      	sub	sp, #56	; 0x38
 80081b4:	af04      	add	r7, sp, #16
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80081bc:	2300      	movs	r3, #0
 80081be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081c0:	f3ef 8305 	mrs	r3, IPSR
 80081c4:	617b      	str	r3, [r7, #20]
  return(result);
 80081c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d17e      	bne.n	80082ca <osThreadNew+0x11a>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d07b      	beq.n	80082ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80081d2:	2380      	movs	r3, #128	; 0x80
 80081d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80081d6:	2318      	movs	r3, #24
 80081d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80081da:	2300      	movs	r3, #0
 80081dc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80081de:	f04f 33ff 	mov.w	r3, #4294967295
 80081e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d045      	beq.n	8008276 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d002      	beq.n	80081f8 <osThreadNew+0x48>
        name = attr->name;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d002      	beq.n	8008206 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d008      	beq.n	800821e <osThreadNew+0x6e>
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	2b38      	cmp	r3, #56	; 0x38
 8008210:	d805      	bhi.n	800821e <osThreadNew+0x6e>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <osThreadNew+0x72>
        return (NULL);
 800821e:	2300      	movs	r3, #0
 8008220:	e054      	b.n	80082cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	089b      	lsrs	r3, r3, #2
 8008230:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00e      	beq.n	8008258 <osThreadNew+0xa8>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	2bbb      	cmp	r3, #187	; 0xbb
 8008240:	d90a      	bls.n	8008258 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008246:	2b00      	cmp	r3, #0
 8008248:	d006      	beq.n	8008258 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <osThreadNew+0xa8>
        mem = 1;
 8008252:	2301      	movs	r3, #1
 8008254:	61bb      	str	r3, [r7, #24]
 8008256:	e010      	b.n	800827a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10c      	bne.n	800827a <osThreadNew+0xca>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d108      	bne.n	800827a <osThreadNew+0xca>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d104      	bne.n	800827a <osThreadNew+0xca>
          mem = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	61bb      	str	r3, [r7, #24]
 8008274:	e001      	b.n	800827a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008276:	2300      	movs	r3, #0
 8008278:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d110      	bne.n	80082a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008288:	9202      	str	r2, [sp, #8]
 800828a:	9301      	str	r3, [sp, #4]
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	6a3a      	ldr	r2, [r7, #32]
 8008294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 fe0c 	bl	8008eb4 <xTaskCreateStatic>
 800829c:	4603      	mov	r3, r0
 800829e:	613b      	str	r3, [r7, #16]
 80082a0:	e013      	b.n	80082ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d110      	bne.n	80082ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80082a8:	6a3b      	ldr	r3, [r7, #32]
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	f107 0310 	add.w	r3, r7, #16
 80082b0:	9301      	str	r3, [sp, #4]
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f000 fe57 	bl	8008f6e <xTaskCreate>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d001      	beq.n	80082ca <osThreadNew+0x11a>
            hTask = NULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80082ca:	693b      	ldr	r3, [r7, #16]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3728      	adds	r7, #40	; 0x28
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082dc:	f3ef 8305 	mrs	r3, IPSR
 80082e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80082e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d003      	beq.n	80082f0 <osDelay+0x1c>
    stat = osErrorISR;
 80082e8:	f06f 0305 	mvn.w	r3, #5
 80082ec:	60fb      	str	r3, [r7, #12]
 80082ee:	e007      	b.n	8008300 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d002      	beq.n	8008300 <osDelay+0x2c>
      vTaskDelay(ticks);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 ff92 	bl	8009224 <vTaskDelay>
    }
  }

  return (stat);
 8008300:	68fb      	ldr	r3, [r7, #12]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4a07      	ldr	r2, [pc, #28]	; (8008338 <vApplicationGetIdleTaskMemory+0x2c>)
 800831c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	4a06      	ldr	r2, [pc, #24]	; (800833c <vApplicationGetIdleTaskMemory+0x30>)
 8008322:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2280      	movs	r2, #128	; 0x80
 8008328:	601a      	str	r2, [r3, #0]
}
 800832a:	bf00      	nop
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	20000c4c 	.word	0x20000c4c
 800833c:	20000d08 	.word	0x20000d08

08008340 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	4a07      	ldr	r2, [pc, #28]	; (800836c <vApplicationGetTimerTaskMemory+0x2c>)
 8008350:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	4a06      	ldr	r2, [pc, #24]	; (8008370 <vApplicationGetTimerTaskMemory+0x30>)
 8008356:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800835e:	601a      	str	r2, [r3, #0]
}
 8008360:	bf00      	nop
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	20000f08 	.word	0x20000f08
 8008370:	20000fc4 	.word	0x20000fc4

08008374 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f103 0208 	add.w	r2, r3, #8
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f04f 32ff 	mov.w	r2, #4294967295
 800838c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f103 0208 	add.w	r2, r3, #8
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f103 0208 	add.w	r2, r3, #8
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083c2:	bf00      	nop
 80083c4:	370c      	adds	r7, #12
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083ce:	b480      	push	{r7}
 80083d0:	b085      	sub	sp, #20
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	689a      	ldr	r2, [r3, #8]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	683a      	ldr	r2, [r7, #0]
 80083f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	1c5a      	adds	r2, r3, #1
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	601a      	str	r2, [r3, #0]
}
 800840a:	bf00      	nop
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008416:	b480      	push	{r7}
 8008418:	b085      	sub	sp, #20
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842c:	d103      	bne.n	8008436 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	e00c      	b.n	8008450 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	3308      	adds	r3, #8
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	e002      	b.n	8008444 <vListInsert+0x2e>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	60fb      	str	r3, [r7, #12]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	429a      	cmp	r2, r3
 800844e:	d2f6      	bcs.n	800843e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	685a      	ldr	r2, [r3, #4]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	1c5a      	adds	r2, r3, #1
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	601a      	str	r2, [r3, #0]
}
 800847c:	bf00      	nop
 800847e:	3714      	adds	r7, #20
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	6892      	ldr	r2, [r2, #8]
 800849e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	6852      	ldr	r2, [r2, #4]
 80084a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d103      	bne.n	80084bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	689a      	ldr	r2, [r3, #8]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	1e5a      	subs	r2, r3, #1
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10a      	bne.n	8008506 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008502:	bf00      	nop
 8008504:	e7fe      	b.n	8008504 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008506:	f002 f875 	bl	800a5f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008512:	68f9      	ldr	r1, [r7, #12]
 8008514:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008516:	fb01 f303 	mul.w	r3, r1, r3
 800851a:	441a      	add	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008536:	3b01      	subs	r3, #1
 8008538:	68f9      	ldr	r1, [r7, #12]
 800853a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800853c:	fb01 f303 	mul.w	r3, r1, r3
 8008540:	441a      	add	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	22ff      	movs	r2, #255	; 0xff
 800854a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	22ff      	movs	r2, #255	; 0xff
 8008552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d114      	bne.n	8008586 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d01a      	beq.n	800859a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3310      	adds	r3, #16
 8008568:	4618      	mov	r0, r3
 800856a:	f001 f929 	bl	80097c0 <xTaskRemoveFromEventList>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d012      	beq.n	800859a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008574:	4b0c      	ldr	r3, [pc, #48]	; (80085a8 <xQueueGenericReset+0xcc>)
 8008576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800857a:	601a      	str	r2, [r3, #0]
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	f3bf 8f6f 	isb	sy
 8008584:	e009      	b.n	800859a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	3310      	adds	r3, #16
 800858a:	4618      	mov	r0, r3
 800858c:	f7ff fef2 	bl	8008374 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	3324      	adds	r3, #36	; 0x24
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff feed 	bl	8008374 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800859a:	f002 f85b 	bl	800a654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800859e:	2301      	movs	r3, #1
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	e000ed04 	.word	0xe000ed04

080085ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b08e      	sub	sp, #56	; 0x38
 80085b0:	af02      	add	r7, sp, #8
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10a      	bne.n	80085d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085d2:	bf00      	nop
 80085d4:	e7fe      	b.n	80085d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10a      	bne.n	80085f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80085dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e0:	f383 8811 	msr	BASEPRI, r3
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085ee:	bf00      	nop
 80085f0:	e7fe      	b.n	80085f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <xQueueGenericCreateStatic+0x52>
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <xQueueGenericCreateStatic+0x56>
 80085fe:	2301      	movs	r3, #1
 8008600:	e000      	b.n	8008604 <xQueueGenericCreateStatic+0x58>
 8008602:	2300      	movs	r3, #0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10a      	bne.n	800861e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	623b      	str	r3, [r7, #32]
}
 800861a:	bf00      	nop
 800861c:	e7fe      	b.n	800861c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d102      	bne.n	800862a <xQueueGenericCreateStatic+0x7e>
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <xQueueGenericCreateStatic+0x82>
 800862a:	2301      	movs	r3, #1
 800862c:	e000      	b.n	8008630 <xQueueGenericCreateStatic+0x84>
 800862e:	2300      	movs	r3, #0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10a      	bne.n	800864a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	61fb      	str	r3, [r7, #28]
}
 8008646:	bf00      	nop
 8008648:	e7fe      	b.n	8008648 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800864a:	2350      	movs	r3, #80	; 0x50
 800864c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b50      	cmp	r3, #80	; 0x50
 8008652:	d00a      	beq.n	800866a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	61bb      	str	r3, [r7, #24]
}
 8008666:	bf00      	nop
 8008668:	e7fe      	b.n	8008668 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800866a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00d      	beq.n	8008692 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008678:	2201      	movs	r2, #1
 800867a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800867e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	4613      	mov	r3, r2
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	68b9      	ldr	r1, [r7, #8]
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f000 f805 	bl	800869c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008694:	4618      	mov	r0, r3
 8008696:	3730      	adds	r7, #48	; 0x30
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d103      	bne.n	80086b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	e002      	b.n	80086be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80086ca:	2101      	movs	r1, #1
 80086cc:	69b8      	ldr	r0, [r7, #24]
 80086ce:	f7ff ff05 	bl	80084dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	78fa      	ldrb	r2, [r7, #3]
 80086d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80086da:	bf00      	nop
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
	...

080086e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b08e      	sub	sp, #56	; 0x38
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
 80086f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80086f2:	2300      	movs	r3, #0
 80086f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80086fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10a      	bne.n	8008716 <xQueueGenericSend+0x32>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008712:	bf00      	nop
 8008714:	e7fe      	b.n	8008714 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d103      	bne.n	8008724 <xQueueGenericSend+0x40>
 800871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <xQueueGenericSend+0x44>
 8008724:	2301      	movs	r3, #1
 8008726:	e000      	b.n	800872a <xQueueGenericSend+0x46>
 8008728:	2300      	movs	r3, #0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10a      	bne.n	8008744 <xQueueGenericSend+0x60>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008740:	bf00      	nop
 8008742:	e7fe      	b.n	8008742 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	2b02      	cmp	r3, #2
 8008748:	d103      	bne.n	8008752 <xQueueGenericSend+0x6e>
 800874a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800874e:	2b01      	cmp	r3, #1
 8008750:	d101      	bne.n	8008756 <xQueueGenericSend+0x72>
 8008752:	2301      	movs	r3, #1
 8008754:	e000      	b.n	8008758 <xQueueGenericSend+0x74>
 8008756:	2300      	movs	r3, #0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10a      	bne.n	8008772 <xQueueGenericSend+0x8e>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	623b      	str	r3, [r7, #32]
}
 800876e:	bf00      	nop
 8008770:	e7fe      	b.n	8008770 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008772:	f001 f9e7 	bl	8009b44 <xTaskGetSchedulerState>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d102      	bne.n	8008782 <xQueueGenericSend+0x9e>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <xQueueGenericSend+0xa2>
 8008782:	2301      	movs	r3, #1
 8008784:	e000      	b.n	8008788 <xQueueGenericSend+0xa4>
 8008786:	2300      	movs	r3, #0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10a      	bne.n	80087a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800878c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	61fb      	str	r3, [r7, #28]
}
 800879e:	bf00      	nop
 80087a0:	e7fe      	b.n	80087a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087a2:	f001 ff27 	bl	800a5f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d302      	bcc.n	80087b8 <xQueueGenericSend+0xd4>
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d129      	bne.n	800880c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087b8:	683a      	ldr	r2, [r7, #0]
 80087ba:	68b9      	ldr	r1, [r7, #8]
 80087bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087be:	f000 fa0b 	bl	8008bd8 <prvCopyDataToQueue>
 80087c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d010      	beq.n	80087ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ce:	3324      	adds	r3, #36	; 0x24
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 fff5 	bl	80097c0 <xTaskRemoveFromEventList>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d013      	beq.n	8008804 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80087dc:	4b3f      	ldr	r3, [pc, #252]	; (80088dc <xQueueGenericSend+0x1f8>)
 80087de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	f3bf 8f4f 	dsb	sy
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	e00a      	b.n	8008804 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80087ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d007      	beq.n	8008804 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80087f4:	4b39      	ldr	r3, [pc, #228]	; (80088dc <xQueueGenericSend+0x1f8>)
 80087f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008804:	f001 ff26 	bl	800a654 <vPortExitCritical>
				return pdPASS;
 8008808:	2301      	movs	r3, #1
 800880a:	e063      	b.n	80088d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d103      	bne.n	800881a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008812:	f001 ff1f 	bl	800a654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008816:	2300      	movs	r3, #0
 8008818:	e05c      	b.n	80088d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800881a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881c:	2b00      	cmp	r3, #0
 800881e:	d106      	bne.n	800882e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008820:	f107 0314 	add.w	r3, r7, #20
 8008824:	4618      	mov	r0, r3
 8008826:	f001 f82f 	bl	8009888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800882a:	2301      	movs	r3, #1
 800882c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800882e:	f001 ff11 	bl	800a654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008832:	f000 fd9b 	bl	800936c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008836:	f001 fedd 	bl	800a5f4 <vPortEnterCritical>
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008840:	b25b      	sxtb	r3, r3
 8008842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008846:	d103      	bne.n	8008850 <xQueueGenericSend+0x16c>
 8008848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008852:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008856:	b25b      	sxtb	r3, r3
 8008858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885c:	d103      	bne.n	8008866 <xQueueGenericSend+0x182>
 800885e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008866:	f001 fef5 	bl	800a654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800886a:	1d3a      	adds	r2, r7, #4
 800886c:	f107 0314 	add.w	r3, r7, #20
 8008870:	4611      	mov	r1, r2
 8008872:	4618      	mov	r0, r3
 8008874:	f001 f81e 	bl	80098b4 <xTaskCheckForTimeOut>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d124      	bne.n	80088c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800887e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008880:	f000 faa2 	bl	8008dc8 <prvIsQueueFull>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d018      	beq.n	80088bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	3310      	adds	r3, #16
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	4611      	mov	r1, r2
 8008892:	4618      	mov	r0, r3
 8008894:	f000 ff44 	bl	8009720 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800889a:	f000 fa2d 	bl	8008cf8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800889e:	f000 fd73 	bl	8009388 <xTaskResumeAll>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f47f af7c 	bne.w	80087a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80088aa:	4b0c      	ldr	r3, [pc, #48]	; (80088dc <xQueueGenericSend+0x1f8>)
 80088ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b0:	601a      	str	r2, [r3, #0]
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	e772      	b.n	80087a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80088bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088be:	f000 fa1b 	bl	8008cf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088c2:	f000 fd61 	bl	8009388 <xTaskResumeAll>
 80088c6:	e76c      	b.n	80087a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80088c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088ca:	f000 fa15 	bl	8008cf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088ce:	f000 fd5b 	bl	8009388 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80088d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3738      	adds	r7, #56	; 0x38
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	e000ed04 	.word	0xe000ed04

080088e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b090      	sub	sp, #64	; 0x40
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
 80088ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80088f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10a      	bne.n	800890e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800890a:	bf00      	nop
 800890c:	e7fe      	b.n	800890c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d103      	bne.n	800891c <xQueueGenericSendFromISR+0x3c>
 8008914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <xQueueGenericSendFromISR+0x40>
 800891c:	2301      	movs	r3, #1
 800891e:	e000      	b.n	8008922 <xQueueGenericSendFromISR+0x42>
 8008920:	2300      	movs	r3, #0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10a      	bne.n	800893c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008938:	bf00      	nop
 800893a:	e7fe      	b.n	800893a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	2b02      	cmp	r3, #2
 8008940:	d103      	bne.n	800894a <xQueueGenericSendFromISR+0x6a>
 8008942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008946:	2b01      	cmp	r3, #1
 8008948:	d101      	bne.n	800894e <xQueueGenericSendFromISR+0x6e>
 800894a:	2301      	movs	r3, #1
 800894c:	e000      	b.n	8008950 <xQueueGenericSendFromISR+0x70>
 800894e:	2300      	movs	r3, #0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10a      	bne.n	800896a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	623b      	str	r3, [r7, #32]
}
 8008966:	bf00      	nop
 8008968:	e7fe      	b.n	8008968 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800896a:	f001 ff25 	bl	800a7b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800896e:	f3ef 8211 	mrs	r2, BASEPRI
 8008972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	61fa      	str	r2, [r7, #28]
 8008984:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008986:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008988:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800898a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800898e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008992:	429a      	cmp	r2, r3
 8008994:	d302      	bcc.n	800899c <xQueueGenericSendFromISR+0xbc>
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b02      	cmp	r3, #2
 800899a:	d12f      	bne.n	80089fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800899c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	68b9      	ldr	r1, [r7, #8]
 80089b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089b2:	f000 f911 	bl	8008bd8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80089ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089be:	d112      	bne.n	80089e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d016      	beq.n	80089f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ca:	3324      	adds	r3, #36	; 0x24
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 fef7 	bl	80097c0 <xTaskRemoveFromEventList>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00e      	beq.n	80089f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00b      	beq.n	80089f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	e007      	b.n	80089f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80089e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80089ea:	3301      	adds	r3, #1
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	b25a      	sxtb	r2, r3
 80089f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80089f6:	2301      	movs	r3, #1
 80089f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80089fa:	e001      	b.n	8008a00 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80089fc:	2300      	movs	r3, #0
 80089fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a02:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3740      	adds	r7, #64	; 0x40
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
	...

08008a18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b08c      	sub	sp, #48	; 0x30
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a24:	2300      	movs	r3, #0
 8008a26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10a      	bne.n	8008a48 <xQueueReceive+0x30>
	__asm volatile
 8008a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	623b      	str	r3, [r7, #32]
}
 8008a44:	bf00      	nop
 8008a46:	e7fe      	b.n	8008a46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d103      	bne.n	8008a56 <xQueueReceive+0x3e>
 8008a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d101      	bne.n	8008a5a <xQueueReceive+0x42>
 8008a56:	2301      	movs	r3, #1
 8008a58:	e000      	b.n	8008a5c <xQueueReceive+0x44>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10a      	bne.n	8008a76 <xQueueReceive+0x5e>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	61fb      	str	r3, [r7, #28]
}
 8008a72:	bf00      	nop
 8008a74:	e7fe      	b.n	8008a74 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a76:	f001 f865 	bl	8009b44 <xTaskGetSchedulerState>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d102      	bne.n	8008a86 <xQueueReceive+0x6e>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <xQueueReceive+0x72>
 8008a86:	2301      	movs	r3, #1
 8008a88:	e000      	b.n	8008a8c <xQueueReceive+0x74>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10a      	bne.n	8008aa6 <xQueueReceive+0x8e>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	61bb      	str	r3, [r7, #24]
}
 8008aa2:	bf00      	nop
 8008aa4:	e7fe      	b.n	8008aa4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008aa6:	f001 fda5 	bl	800a5f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d01f      	beq.n	8008af6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ab6:	68b9      	ldr	r1, [r7, #8]
 8008ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aba:	f000 f8f7 	bl	8008cac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	1e5a      	subs	r2, r3, #1
 8008ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00f      	beq.n	8008aee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad0:	3310      	adds	r3, #16
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 fe74 	bl	80097c0 <xTaskRemoveFromEventList>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d007      	beq.n	8008aee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ade:	4b3d      	ldr	r3, [pc, #244]	; (8008bd4 <xQueueReceive+0x1bc>)
 8008ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae4:	601a      	str	r2, [r3, #0]
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008aee:	f001 fdb1 	bl	800a654 <vPortExitCritical>
				return pdPASS;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e069      	b.n	8008bca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d103      	bne.n	8008b04 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008afc:	f001 fdaa 	bl	800a654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b00:	2300      	movs	r3, #0
 8008b02:	e062      	b.n	8008bca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d106      	bne.n	8008b18 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b0a:	f107 0310 	add.w	r3, r7, #16
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 feba 	bl	8009888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b14:	2301      	movs	r3, #1
 8008b16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b18:	f001 fd9c 	bl	800a654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b1c:	f000 fc26 	bl	800936c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b20:	f001 fd68 	bl	800a5f4 <vPortEnterCritical>
 8008b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b2a:	b25b      	sxtb	r3, r3
 8008b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b30:	d103      	bne.n	8008b3a <xQueueReceive+0x122>
 8008b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b40:	b25b      	sxtb	r3, r3
 8008b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b46:	d103      	bne.n	8008b50 <xQueueReceive+0x138>
 8008b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b50:	f001 fd80 	bl	800a654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b54:	1d3a      	adds	r2, r7, #4
 8008b56:	f107 0310 	add.w	r3, r7, #16
 8008b5a:	4611      	mov	r1, r2
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 fea9 	bl	80098b4 <xTaskCheckForTimeOut>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d123      	bne.n	8008bb0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b6a:	f000 f917 	bl	8008d9c <prvIsQueueEmpty>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d017      	beq.n	8008ba4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b76:	3324      	adds	r3, #36	; 0x24
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f000 fdcf 	bl	8009720 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b84:	f000 f8b8 	bl	8008cf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b88:	f000 fbfe 	bl	8009388 <xTaskResumeAll>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d189      	bne.n	8008aa6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008b92:	4b10      	ldr	r3, [pc, #64]	; (8008bd4 <xQueueReceive+0x1bc>)
 8008b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	e780      	b.n	8008aa6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ba6:	f000 f8a7 	bl	8008cf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008baa:	f000 fbed 	bl	8009388 <xTaskResumeAll>
 8008bae:	e77a      	b.n	8008aa6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bb2:	f000 f8a1 	bl	8008cf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bb6:	f000 fbe7 	bl	8009388 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bbc:	f000 f8ee 	bl	8008d9c <prvIsQueueEmpty>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f43f af6f 	beq.w	8008aa6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008bc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3730      	adds	r7, #48	; 0x30
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	e000ed04 	.word	0xe000ed04

08008bd8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008be4:	2300      	movs	r3, #0
 8008be6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10d      	bne.n	8008c12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d14d      	bne.n	8008c9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 ffbc 	bl	8009b80 <xTaskPriorityDisinherit>
 8008c08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	609a      	str	r2, [r3, #8]
 8008c10:	e043      	b.n	8008c9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d119      	bne.n	8008c4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6858      	ldr	r0, [r3, #4]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c20:	461a      	mov	r2, r3
 8008c22:	68b9      	ldr	r1, [r7, #8]
 8008c24:	f002 f915 	bl	800ae52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c30:	441a      	add	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d32b      	bcc.n	8008c9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	605a      	str	r2, [r3, #4]
 8008c4a:	e026      	b.n	8008c9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	68d8      	ldr	r0, [r3, #12]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c54:	461a      	mov	r2, r3
 8008c56:	68b9      	ldr	r1, [r7, #8]
 8008c58:	f002 f8fb 	bl	800ae52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	68da      	ldr	r2, [r3, #12]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c64:	425b      	negs	r3, r3
 8008c66:	441a      	add	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	68da      	ldr	r2, [r3, #12]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d207      	bcs.n	8008c88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	689a      	ldr	r2, [r3, #8]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c80:	425b      	negs	r3, r3
 8008c82:	441a      	add	r2, r3
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d105      	bne.n	8008c9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d002      	beq.n	8008c9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	3b01      	subs	r3, #1
 8008c98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	1c5a      	adds	r2, r3, #1
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008ca2:	697b      	ldr	r3, [r7, #20]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d018      	beq.n	8008cf0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68da      	ldr	r2, [r3, #12]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc6:	441a      	add	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	68da      	ldr	r2, [r3, #12]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d303      	bcc.n	8008ce0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	68d9      	ldr	r1, [r3, #12]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce8:	461a      	mov	r2, r3
 8008cea:	6838      	ldr	r0, [r7, #0]
 8008cec:	f002 f8b1 	bl	800ae52 <memcpy>
	}
}
 8008cf0:	bf00      	nop
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d00:	f001 fc78 	bl	800a5f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d0c:	e011      	b.n	8008d32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d012      	beq.n	8008d3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3324      	adds	r3, #36	; 0x24
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 fd50 	bl	80097c0 <xTaskRemoveFromEventList>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d26:	f000 fe27 	bl	8009978 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	dce9      	bgt.n	8008d0e <prvUnlockQueue+0x16>
 8008d3a:	e000      	b.n	8008d3e <prvUnlockQueue+0x46>
					break;
 8008d3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	22ff      	movs	r2, #255	; 0xff
 8008d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008d46:	f001 fc85 	bl	800a654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d4a:	f001 fc53 	bl	800a5f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d56:	e011      	b.n	8008d7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d012      	beq.n	8008d86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3310      	adds	r3, #16
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 fd2b 	bl	80097c0 <xTaskRemoveFromEventList>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d70:	f000 fe02 	bl	8009978 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d74:	7bbb      	ldrb	r3, [r7, #14]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	dce9      	bgt.n	8008d58 <prvUnlockQueue+0x60>
 8008d84:	e000      	b.n	8008d88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	22ff      	movs	r2, #255	; 0xff
 8008d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008d90:	f001 fc60 	bl	800a654 <vPortExitCritical>
}
 8008d94:	bf00      	nop
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008da4:	f001 fc26 	bl	800a5f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d102      	bne.n	8008db6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008db0:	2301      	movs	r3, #1
 8008db2:	60fb      	str	r3, [r7, #12]
 8008db4:	e001      	b.n	8008dba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008db6:	2300      	movs	r3, #0
 8008db8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008dba:	f001 fc4b 	bl	800a654 <vPortExitCritical>

	return xReturn;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008dd0:	f001 fc10 	bl	800a5f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d102      	bne.n	8008de6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008de0:	2301      	movs	r3, #1
 8008de2:	60fb      	str	r3, [r7, #12]
 8008de4:	e001      	b.n	8008dea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008de6:	2300      	movs	r3, #0
 8008de8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008dea:	f001 fc33 	bl	800a654 <vPortExitCritical>

	return xReturn;
 8008dee:	68fb      	ldr	r3, [r7, #12]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e02:	2300      	movs	r3, #0
 8008e04:	60fb      	str	r3, [r7, #12]
 8008e06:	e014      	b.n	8008e32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e08:	4a0f      	ldr	r2, [pc, #60]	; (8008e48 <vQueueAddToRegistry+0x50>)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10b      	bne.n	8008e2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008e14:	490c      	ldr	r1, [pc, #48]	; (8008e48 <vQueueAddToRegistry+0x50>)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	683a      	ldr	r2, [r7, #0]
 8008e1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e1e:	4a0a      	ldr	r2, [pc, #40]	; (8008e48 <vQueueAddToRegistry+0x50>)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	00db      	lsls	r3, r3, #3
 8008e24:	4413      	add	r3, r2
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008e2a:	e006      	b.n	8008e3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	60fb      	str	r3, [r7, #12]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2b07      	cmp	r3, #7
 8008e36:	d9e7      	bls.n	8008e08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e38:	bf00      	nop
 8008e3a:	bf00      	nop
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	200013c4 	.word	0x200013c4

08008e4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e5c:	f001 fbca 	bl	800a5f4 <vPortEnterCritical>
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e66:	b25b      	sxtb	r3, r3
 8008e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6c:	d103      	bne.n	8008e76 <vQueueWaitForMessageRestricted+0x2a>
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e7c:	b25b      	sxtb	r3, r3
 8008e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e82:	d103      	bne.n	8008e8c <vQueueWaitForMessageRestricted+0x40>
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e8c:	f001 fbe2 	bl	800a654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d106      	bne.n	8008ea6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	3324      	adds	r3, #36	; 0x24
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	68b9      	ldr	r1, [r7, #8]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 fc61 	bl	8009768 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008ea6:	6978      	ldr	r0, [r7, #20]
 8008ea8:	f7ff ff26 	bl	8008cf8 <prvUnlockQueue>
	}
 8008eac:	bf00      	nop
 8008eae:	3718      	adds	r7, #24
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b08e      	sub	sp, #56	; 0x38
 8008eb8:	af04      	add	r7, sp, #16
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	607a      	str	r2, [r7, #4]
 8008ec0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10a      	bne.n	8008ede <xTaskCreateStatic+0x2a>
	__asm volatile
 8008ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ecc:	f383 8811 	msr	BASEPRI, r3
 8008ed0:	f3bf 8f6f 	isb	sy
 8008ed4:	f3bf 8f4f 	dsb	sy
 8008ed8:	623b      	str	r3, [r7, #32]
}
 8008eda:	bf00      	nop
 8008edc:	e7fe      	b.n	8008edc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10a      	bne.n	8008efa <xTaskCreateStatic+0x46>
	__asm volatile
 8008ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	61fb      	str	r3, [r7, #28]
}
 8008ef6:	bf00      	nop
 8008ef8:	e7fe      	b.n	8008ef8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008efa:	23bc      	movs	r3, #188	; 0xbc
 8008efc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	2bbc      	cmp	r3, #188	; 0xbc
 8008f02:	d00a      	beq.n	8008f1a <xTaskCreateStatic+0x66>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	61bb      	str	r3, [r7, #24]
}
 8008f16:	bf00      	nop
 8008f18:	e7fe      	b.n	8008f18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d01e      	beq.n	8008f60 <xTaskCreateStatic+0xac>
 8008f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d01b      	beq.n	8008f60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	2202      	movs	r2, #2
 8008f36:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	9303      	str	r3, [sp, #12]
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	9302      	str	r3, [sp, #8]
 8008f42:	f107 0314 	add.w	r3, r7, #20
 8008f46:	9301      	str	r3, [sp, #4]
 8008f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	68b9      	ldr	r1, [r7, #8]
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f000 f850 	bl	8008ff8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f5a:	f000 f8f3 	bl	8009144 <prvAddNewTaskToReadyList>
 8008f5e:	e001      	b.n	8008f64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008f60:	2300      	movs	r3, #0
 8008f62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f64:	697b      	ldr	r3, [r7, #20]
	}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3728      	adds	r7, #40	; 0x28
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b08c      	sub	sp, #48	; 0x30
 8008f72:	af04      	add	r7, sp, #16
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	60b9      	str	r1, [r7, #8]
 8008f78:	603b      	str	r3, [r7, #0]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f7e:	88fb      	ldrh	r3, [r7, #6]
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4618      	mov	r0, r3
 8008f84:	f001 fc58 	bl	800a838 <pvPortMalloc>
 8008f88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00e      	beq.n	8008fae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f90:	20bc      	movs	r0, #188	; 0xbc
 8008f92:	f001 fc51 	bl	800a838 <pvPortMalloc>
 8008f96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d003      	beq.n	8008fa6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	631a      	str	r2, [r3, #48]	; 0x30
 8008fa4:	e005      	b.n	8008fb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008fa6:	6978      	ldr	r0, [r7, #20]
 8008fa8:	f001 fd12 	bl	800a9d0 <vPortFree>
 8008fac:	e001      	b.n	8008fb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d017      	beq.n	8008fe8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008fc0:	88fa      	ldrh	r2, [r7, #6]
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	9303      	str	r3, [sp, #12]
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	9302      	str	r3, [sp, #8]
 8008fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fcc:	9301      	str	r3, [sp, #4]
 8008fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	68b9      	ldr	r1, [r7, #8]
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f000 f80e 	bl	8008ff8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fdc:	69f8      	ldr	r0, [r7, #28]
 8008fde:	f000 f8b1 	bl	8009144 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	61bb      	str	r3, [r7, #24]
 8008fe6:	e002      	b.n	8008fee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008fee:	69bb      	ldr	r3, [r7, #24]
	}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3720      	adds	r7, #32
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b088      	sub	sp, #32
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009008:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	461a      	mov	r2, r3
 8009010:	21a5      	movs	r1, #165	; 0xa5
 8009012:	f001 ff2c 	bl	800ae6e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009020:	3b01      	subs	r3, #1
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4413      	add	r3, r2
 8009026:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	f023 0307 	bic.w	r3, r3, #7
 800902e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	f003 0307 	and.w	r3, r3, #7
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00a      	beq.n	8009050 <prvInitialiseNewTask+0x58>
	__asm volatile
 800903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	617b      	str	r3, [r7, #20]
}
 800904c:	bf00      	nop
 800904e:	e7fe      	b.n	800904e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d01f      	beq.n	8009096 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009056:	2300      	movs	r3, #0
 8009058:	61fb      	str	r3, [r7, #28]
 800905a:	e012      	b.n	8009082 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	4413      	add	r3, r2
 8009062:	7819      	ldrb	r1, [r3, #0]
 8009064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	4413      	add	r3, r2
 800906a:	3334      	adds	r3, #52	; 0x34
 800906c:	460a      	mov	r2, r1
 800906e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	4413      	add	r3, r2
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d006      	beq.n	800908a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	3301      	adds	r3, #1
 8009080:	61fb      	str	r3, [r7, #28]
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	2b0f      	cmp	r3, #15
 8009086:	d9e9      	bls.n	800905c <prvInitialiseNewTask+0x64>
 8009088:	e000      	b.n	800908c <prvInitialiseNewTask+0x94>
			{
				break;
 800908a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800908c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908e:	2200      	movs	r2, #0
 8009090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009094:	e003      	b.n	800909e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	2200      	movs	r2, #0
 800909a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800909e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a0:	2b37      	cmp	r3, #55	; 0x37
 80090a2:	d901      	bls.n	80090a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80090a4:	2337      	movs	r3, #55	; 0x37
 80090a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80090a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80090ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80090b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b6:	2200      	movs	r2, #0
 80090b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80090ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090bc:	3304      	adds	r3, #4
 80090be:	4618      	mov	r0, r3
 80090c0:	f7ff f978 	bl	80083b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80090c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c6:	3318      	adds	r3, #24
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7ff f973 	bl	80083b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80090de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80090e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e6:	2200      	movs	r2, #0
 80090e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80090f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f6:	3354      	adds	r3, #84	; 0x54
 80090f8:	2260      	movs	r2, #96	; 0x60
 80090fa:	2100      	movs	r1, #0
 80090fc:	4618      	mov	r0, r3
 80090fe:	f001 feb6 	bl	800ae6e <memset>
 8009102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009104:	4a0c      	ldr	r2, [pc, #48]	; (8009138 <prvInitialiseNewTask+0x140>)
 8009106:	659a      	str	r2, [r3, #88]	; 0x58
 8009108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910a:	4a0c      	ldr	r2, [pc, #48]	; (800913c <prvInitialiseNewTask+0x144>)
 800910c:	65da      	str	r2, [r3, #92]	; 0x5c
 800910e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009110:	4a0b      	ldr	r2, [pc, #44]	; (8009140 <prvInitialiseNewTask+0x148>)
 8009112:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	68f9      	ldr	r1, [r7, #12]
 8009118:	69b8      	ldr	r0, [r7, #24]
 800911a:	f001 f941 	bl	800a3a0 <pxPortInitialiseStack>
 800911e:	4602      	mov	r2, r0
 8009120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009122:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009126:	2b00      	cmp	r3, #0
 8009128:	d002      	beq.n	8009130 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800912a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800912e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009130:	bf00      	nop
 8009132:	3720      	adds	r7, #32
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	0800dbe8 	.word	0x0800dbe8
 800913c:	0800dc08 	.word	0x0800dc08
 8009140:	0800dbc8 	.word	0x0800dbc8

08009144 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800914c:	f001 fa52 	bl	800a5f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009150:	4b2d      	ldr	r3, [pc, #180]	; (8009208 <prvAddNewTaskToReadyList+0xc4>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	3301      	adds	r3, #1
 8009156:	4a2c      	ldr	r2, [pc, #176]	; (8009208 <prvAddNewTaskToReadyList+0xc4>)
 8009158:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800915a:	4b2c      	ldr	r3, [pc, #176]	; (800920c <prvAddNewTaskToReadyList+0xc8>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d109      	bne.n	8009176 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009162:	4a2a      	ldr	r2, [pc, #168]	; (800920c <prvAddNewTaskToReadyList+0xc8>)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009168:	4b27      	ldr	r3, [pc, #156]	; (8009208 <prvAddNewTaskToReadyList+0xc4>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d110      	bne.n	8009192 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009170:	f000 fc26 	bl	80099c0 <prvInitialiseTaskLists>
 8009174:	e00d      	b.n	8009192 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009176:	4b26      	ldr	r3, [pc, #152]	; (8009210 <prvAddNewTaskToReadyList+0xcc>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d109      	bne.n	8009192 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800917e:	4b23      	ldr	r3, [pc, #140]	; (800920c <prvAddNewTaskToReadyList+0xc8>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009188:	429a      	cmp	r2, r3
 800918a:	d802      	bhi.n	8009192 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800918c:	4a1f      	ldr	r2, [pc, #124]	; (800920c <prvAddNewTaskToReadyList+0xc8>)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009192:	4b20      	ldr	r3, [pc, #128]	; (8009214 <prvAddNewTaskToReadyList+0xd0>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3301      	adds	r3, #1
 8009198:	4a1e      	ldr	r2, [pc, #120]	; (8009214 <prvAddNewTaskToReadyList+0xd0>)
 800919a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800919c:	4b1d      	ldr	r3, [pc, #116]	; (8009214 <prvAddNewTaskToReadyList+0xd0>)
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a8:	4b1b      	ldr	r3, [pc, #108]	; (8009218 <prvAddNewTaskToReadyList+0xd4>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d903      	bls.n	80091b8 <prvAddNewTaskToReadyList+0x74>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b4:	4a18      	ldr	r2, [pc, #96]	; (8009218 <prvAddNewTaskToReadyList+0xd4>)
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091bc:	4613      	mov	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4413      	add	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4a15      	ldr	r2, [pc, #84]	; (800921c <prvAddNewTaskToReadyList+0xd8>)
 80091c6:	441a      	add	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	3304      	adds	r3, #4
 80091cc:	4619      	mov	r1, r3
 80091ce:	4610      	mov	r0, r2
 80091d0:	f7ff f8fd 	bl	80083ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80091d4:	f001 fa3e 	bl	800a654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80091d8:	4b0d      	ldr	r3, [pc, #52]	; (8009210 <prvAddNewTaskToReadyList+0xcc>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00e      	beq.n	80091fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80091e0:	4b0a      	ldr	r3, [pc, #40]	; (800920c <prvAddNewTaskToReadyList+0xc8>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d207      	bcs.n	80091fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80091ee:	4b0c      	ldr	r3, [pc, #48]	; (8009220 <prvAddNewTaskToReadyList+0xdc>)
 80091f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091f4:	601a      	str	r2, [r3, #0]
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091fe:	bf00      	nop
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	200018d8 	.word	0x200018d8
 800920c:	20001404 	.word	0x20001404
 8009210:	200018e4 	.word	0x200018e4
 8009214:	200018f4 	.word	0x200018f4
 8009218:	200018e0 	.word	0x200018e0
 800921c:	20001408 	.word	0x20001408
 8009220:	e000ed04 	.word	0xe000ed04

08009224 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800922c:	2300      	movs	r3, #0
 800922e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d017      	beq.n	8009266 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009236:	4b13      	ldr	r3, [pc, #76]	; (8009284 <vTaskDelay+0x60>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00a      	beq.n	8009254 <vTaskDelay+0x30>
	__asm volatile
 800923e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009242:	f383 8811 	msr	BASEPRI, r3
 8009246:	f3bf 8f6f 	isb	sy
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	60bb      	str	r3, [r7, #8]
}
 8009250:	bf00      	nop
 8009252:	e7fe      	b.n	8009252 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009254:	f000 f88a 	bl	800936c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009258:	2100      	movs	r1, #0
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fcfe 	bl	8009c5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009260:	f000 f892 	bl	8009388 <xTaskResumeAll>
 8009264:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d107      	bne.n	800927c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800926c:	4b06      	ldr	r3, [pc, #24]	; (8009288 <vTaskDelay+0x64>)
 800926e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800927c:	bf00      	nop
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	20001900 	.word	0x20001900
 8009288:	e000ed04 	.word	0xe000ed04

0800928c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08a      	sub	sp, #40	; 0x28
 8009290:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009292:	2300      	movs	r3, #0
 8009294:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009296:	2300      	movs	r3, #0
 8009298:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800929a:	463a      	mov	r2, r7
 800929c:	1d39      	adds	r1, r7, #4
 800929e:	f107 0308 	add.w	r3, r7, #8
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7ff f832 	bl	800830c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	9202      	str	r2, [sp, #8]
 80092b0:	9301      	str	r3, [sp, #4]
 80092b2:	2300      	movs	r3, #0
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	2300      	movs	r3, #0
 80092b8:	460a      	mov	r2, r1
 80092ba:	4924      	ldr	r1, [pc, #144]	; (800934c <vTaskStartScheduler+0xc0>)
 80092bc:	4824      	ldr	r0, [pc, #144]	; (8009350 <vTaskStartScheduler+0xc4>)
 80092be:	f7ff fdf9 	bl	8008eb4 <xTaskCreateStatic>
 80092c2:	4603      	mov	r3, r0
 80092c4:	4a23      	ldr	r2, [pc, #140]	; (8009354 <vTaskStartScheduler+0xc8>)
 80092c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80092c8:	4b22      	ldr	r3, [pc, #136]	; (8009354 <vTaskStartScheduler+0xc8>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80092d0:	2301      	movs	r3, #1
 80092d2:	617b      	str	r3, [r7, #20]
 80092d4:	e001      	b.n	80092da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80092d6:	2300      	movs	r3, #0
 80092d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d102      	bne.n	80092e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80092e0:	f000 fd10 	bl	8009d04 <xTimerCreateTimerTask>
 80092e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d11b      	bne.n	8009324 <vTaskStartScheduler+0x98>
	__asm volatile
 80092ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f0:	f383 8811 	msr	BASEPRI, r3
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	613b      	str	r3, [r7, #16]
}
 80092fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009300:	4b15      	ldr	r3, [pc, #84]	; (8009358 <vTaskStartScheduler+0xcc>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	3354      	adds	r3, #84	; 0x54
 8009306:	4a15      	ldr	r2, [pc, #84]	; (800935c <vTaskStartScheduler+0xd0>)
 8009308:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800930a:	4b15      	ldr	r3, [pc, #84]	; (8009360 <vTaskStartScheduler+0xd4>)
 800930c:	f04f 32ff 	mov.w	r2, #4294967295
 8009310:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009312:	4b14      	ldr	r3, [pc, #80]	; (8009364 <vTaskStartScheduler+0xd8>)
 8009314:	2201      	movs	r2, #1
 8009316:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009318:	4b13      	ldr	r3, [pc, #76]	; (8009368 <vTaskStartScheduler+0xdc>)
 800931a:	2200      	movs	r2, #0
 800931c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800931e:	f001 f8c7 	bl	800a4b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009322:	e00e      	b.n	8009342 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932a:	d10a      	bne.n	8009342 <vTaskStartScheduler+0xb6>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	60fb      	str	r3, [r7, #12]
}
 800933e:	bf00      	nop
 8009340:	e7fe      	b.n	8009340 <vTaskStartScheduler+0xb4>
}
 8009342:	bf00      	nop
 8009344:	3718      	adds	r7, #24
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	0800db48 	.word	0x0800db48
 8009350:	08009991 	.word	0x08009991
 8009354:	200018fc 	.word	0x200018fc
 8009358:	20001404 	.word	0x20001404
 800935c:	20000030 	.word	0x20000030
 8009360:	200018f8 	.word	0x200018f8
 8009364:	200018e4 	.word	0x200018e4
 8009368:	200018dc 	.word	0x200018dc

0800936c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800936c:	b480      	push	{r7}
 800936e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009370:	4b04      	ldr	r3, [pc, #16]	; (8009384 <vTaskSuspendAll+0x18>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3301      	adds	r3, #1
 8009376:	4a03      	ldr	r2, [pc, #12]	; (8009384 <vTaskSuspendAll+0x18>)
 8009378:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800937a:	bf00      	nop
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	20001900 	.word	0x20001900

08009388 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800938e:	2300      	movs	r3, #0
 8009390:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009392:	2300      	movs	r3, #0
 8009394:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009396:	4b42      	ldr	r3, [pc, #264]	; (80094a0 <xTaskResumeAll+0x118>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10a      	bne.n	80093b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800939e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a2:	f383 8811 	msr	BASEPRI, r3
 80093a6:	f3bf 8f6f 	isb	sy
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	603b      	str	r3, [r7, #0]
}
 80093b0:	bf00      	nop
 80093b2:	e7fe      	b.n	80093b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80093b4:	f001 f91e 	bl	800a5f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80093b8:	4b39      	ldr	r3, [pc, #228]	; (80094a0 <xTaskResumeAll+0x118>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	3b01      	subs	r3, #1
 80093be:	4a38      	ldr	r2, [pc, #224]	; (80094a0 <xTaskResumeAll+0x118>)
 80093c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093c2:	4b37      	ldr	r3, [pc, #220]	; (80094a0 <xTaskResumeAll+0x118>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d162      	bne.n	8009490 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80093ca:	4b36      	ldr	r3, [pc, #216]	; (80094a4 <xTaskResumeAll+0x11c>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d05e      	beq.n	8009490 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093d2:	e02f      	b.n	8009434 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093d4:	4b34      	ldr	r3, [pc, #208]	; (80094a8 <xTaskResumeAll+0x120>)
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	3318      	adds	r3, #24
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7ff f851 	bl	8008488 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3304      	adds	r3, #4
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7ff f84c 	bl	8008488 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f4:	4b2d      	ldr	r3, [pc, #180]	; (80094ac <xTaskResumeAll+0x124>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d903      	bls.n	8009404 <xTaskResumeAll+0x7c>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009400:	4a2a      	ldr	r2, [pc, #168]	; (80094ac <xTaskResumeAll+0x124>)
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009408:	4613      	mov	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4a27      	ldr	r2, [pc, #156]	; (80094b0 <xTaskResumeAll+0x128>)
 8009412:	441a      	add	r2, r3
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	3304      	adds	r3, #4
 8009418:	4619      	mov	r1, r3
 800941a:	4610      	mov	r0, r2
 800941c:	f7fe ffd7 	bl	80083ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009424:	4b23      	ldr	r3, [pc, #140]	; (80094b4 <xTaskResumeAll+0x12c>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942a:	429a      	cmp	r2, r3
 800942c:	d302      	bcc.n	8009434 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800942e:	4b22      	ldr	r3, [pc, #136]	; (80094b8 <xTaskResumeAll+0x130>)
 8009430:	2201      	movs	r2, #1
 8009432:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009434:	4b1c      	ldr	r3, [pc, #112]	; (80094a8 <xTaskResumeAll+0x120>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1cb      	bne.n	80093d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d001      	beq.n	8009446 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009442:	f000 fb5f 	bl	8009b04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009446:	4b1d      	ldr	r3, [pc, #116]	; (80094bc <xTaskResumeAll+0x134>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d010      	beq.n	8009474 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009452:	f000 f847 	bl	80094e4 <xTaskIncrementTick>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d002      	beq.n	8009462 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800945c:	4b16      	ldr	r3, [pc, #88]	; (80094b8 <xTaskResumeAll+0x130>)
 800945e:	2201      	movs	r2, #1
 8009460:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	3b01      	subs	r3, #1
 8009466:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1f1      	bne.n	8009452 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800946e:	4b13      	ldr	r3, [pc, #76]	; (80094bc <xTaskResumeAll+0x134>)
 8009470:	2200      	movs	r2, #0
 8009472:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009474:	4b10      	ldr	r3, [pc, #64]	; (80094b8 <xTaskResumeAll+0x130>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d009      	beq.n	8009490 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800947c:	2301      	movs	r3, #1
 800947e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009480:	4b0f      	ldr	r3, [pc, #60]	; (80094c0 <xTaskResumeAll+0x138>)
 8009482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009486:	601a      	str	r2, [r3, #0]
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009490:	f001 f8e0 	bl	800a654 <vPortExitCritical>

	return xAlreadyYielded;
 8009494:	68bb      	ldr	r3, [r7, #8]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	20001900 	.word	0x20001900
 80094a4:	200018d8 	.word	0x200018d8
 80094a8:	20001898 	.word	0x20001898
 80094ac:	200018e0 	.word	0x200018e0
 80094b0:	20001408 	.word	0x20001408
 80094b4:	20001404 	.word	0x20001404
 80094b8:	200018ec 	.word	0x200018ec
 80094bc:	200018e8 	.word	0x200018e8
 80094c0:	e000ed04 	.word	0xe000ed04

080094c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80094ca:	4b05      	ldr	r3, [pc, #20]	; (80094e0 <xTaskGetTickCount+0x1c>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80094d0:	687b      	ldr	r3, [r7, #4]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	200018dc 	.word	0x200018dc

080094e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80094ea:	2300      	movs	r3, #0
 80094ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094ee:	4b4f      	ldr	r3, [pc, #316]	; (800962c <xTaskIncrementTick+0x148>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f040 808f 	bne.w	8009616 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80094f8:	4b4d      	ldr	r3, [pc, #308]	; (8009630 <xTaskIncrementTick+0x14c>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	3301      	adds	r3, #1
 80094fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009500:	4a4b      	ldr	r2, [pc, #300]	; (8009630 <xTaskIncrementTick+0x14c>)
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d120      	bne.n	800954e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800950c:	4b49      	ldr	r3, [pc, #292]	; (8009634 <xTaskIncrementTick+0x150>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00a      	beq.n	800952c <xTaskIncrementTick+0x48>
	__asm volatile
 8009516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	603b      	str	r3, [r7, #0]
}
 8009528:	bf00      	nop
 800952a:	e7fe      	b.n	800952a <xTaskIncrementTick+0x46>
 800952c:	4b41      	ldr	r3, [pc, #260]	; (8009634 <xTaskIncrementTick+0x150>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60fb      	str	r3, [r7, #12]
 8009532:	4b41      	ldr	r3, [pc, #260]	; (8009638 <xTaskIncrementTick+0x154>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a3f      	ldr	r2, [pc, #252]	; (8009634 <xTaskIncrementTick+0x150>)
 8009538:	6013      	str	r3, [r2, #0]
 800953a:	4a3f      	ldr	r2, [pc, #252]	; (8009638 <xTaskIncrementTick+0x154>)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6013      	str	r3, [r2, #0]
 8009540:	4b3e      	ldr	r3, [pc, #248]	; (800963c <xTaskIncrementTick+0x158>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	3301      	adds	r3, #1
 8009546:	4a3d      	ldr	r2, [pc, #244]	; (800963c <xTaskIncrementTick+0x158>)
 8009548:	6013      	str	r3, [r2, #0]
 800954a:	f000 fadb 	bl	8009b04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800954e:	4b3c      	ldr	r3, [pc, #240]	; (8009640 <xTaskIncrementTick+0x15c>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	429a      	cmp	r2, r3
 8009556:	d349      	bcc.n	80095ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009558:	4b36      	ldr	r3, [pc, #216]	; (8009634 <xTaskIncrementTick+0x150>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d104      	bne.n	800956c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009562:	4b37      	ldr	r3, [pc, #220]	; (8009640 <xTaskIncrementTick+0x15c>)
 8009564:	f04f 32ff 	mov.w	r2, #4294967295
 8009568:	601a      	str	r2, [r3, #0]
					break;
 800956a:	e03f      	b.n	80095ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800956c:	4b31      	ldr	r3, [pc, #196]	; (8009634 <xTaskIncrementTick+0x150>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	429a      	cmp	r2, r3
 8009582:	d203      	bcs.n	800958c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009584:	4a2e      	ldr	r2, [pc, #184]	; (8009640 <xTaskIncrementTick+0x15c>)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800958a:	e02f      	b.n	80095ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	3304      	adds	r3, #4
 8009590:	4618      	mov	r0, r3
 8009592:	f7fe ff79 	bl	8008488 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800959a:	2b00      	cmp	r3, #0
 800959c:	d004      	beq.n	80095a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	3318      	adds	r3, #24
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fe ff70 	bl	8008488 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ac:	4b25      	ldr	r3, [pc, #148]	; (8009644 <xTaskIncrementTick+0x160>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d903      	bls.n	80095bc <xTaskIncrementTick+0xd8>
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b8:	4a22      	ldr	r2, [pc, #136]	; (8009644 <xTaskIncrementTick+0x160>)
 80095ba:	6013      	str	r3, [r2, #0]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c0:	4613      	mov	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	4413      	add	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	4a1f      	ldr	r2, [pc, #124]	; (8009648 <xTaskIncrementTick+0x164>)
 80095ca:	441a      	add	r2, r3
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	3304      	adds	r3, #4
 80095d0:	4619      	mov	r1, r3
 80095d2:	4610      	mov	r0, r2
 80095d4:	f7fe fefb 	bl	80083ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095dc:	4b1b      	ldr	r3, [pc, #108]	; (800964c <xTaskIncrementTick+0x168>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d3b8      	bcc.n	8009558 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80095e6:	2301      	movs	r3, #1
 80095e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095ea:	e7b5      	b.n	8009558 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80095ec:	4b17      	ldr	r3, [pc, #92]	; (800964c <xTaskIncrementTick+0x168>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f2:	4915      	ldr	r1, [pc, #84]	; (8009648 <xTaskIncrementTick+0x164>)
 80095f4:	4613      	mov	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	440b      	add	r3, r1
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d901      	bls.n	8009608 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009604:	2301      	movs	r3, #1
 8009606:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009608:	4b11      	ldr	r3, [pc, #68]	; (8009650 <xTaskIncrementTick+0x16c>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d007      	beq.n	8009620 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009610:	2301      	movs	r3, #1
 8009612:	617b      	str	r3, [r7, #20]
 8009614:	e004      	b.n	8009620 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009616:	4b0f      	ldr	r3, [pc, #60]	; (8009654 <xTaskIncrementTick+0x170>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3301      	adds	r3, #1
 800961c:	4a0d      	ldr	r2, [pc, #52]	; (8009654 <xTaskIncrementTick+0x170>)
 800961e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009620:	697b      	ldr	r3, [r7, #20]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	20001900 	.word	0x20001900
 8009630:	200018dc 	.word	0x200018dc
 8009634:	20001890 	.word	0x20001890
 8009638:	20001894 	.word	0x20001894
 800963c:	200018f0 	.word	0x200018f0
 8009640:	200018f8 	.word	0x200018f8
 8009644:	200018e0 	.word	0x200018e0
 8009648:	20001408 	.word	0x20001408
 800964c:	20001404 	.word	0x20001404
 8009650:	200018ec 	.word	0x200018ec
 8009654:	200018e8 	.word	0x200018e8

08009658 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800965e:	4b2a      	ldr	r3, [pc, #168]	; (8009708 <vTaskSwitchContext+0xb0>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d003      	beq.n	800966e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009666:	4b29      	ldr	r3, [pc, #164]	; (800970c <vTaskSwitchContext+0xb4>)
 8009668:	2201      	movs	r2, #1
 800966a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800966c:	e046      	b.n	80096fc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800966e:	4b27      	ldr	r3, [pc, #156]	; (800970c <vTaskSwitchContext+0xb4>)
 8009670:	2200      	movs	r2, #0
 8009672:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009674:	4b26      	ldr	r3, [pc, #152]	; (8009710 <vTaskSwitchContext+0xb8>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	60fb      	str	r3, [r7, #12]
 800967a:	e010      	b.n	800969e <vTaskSwitchContext+0x46>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10a      	bne.n	8009698 <vTaskSwitchContext+0x40>
	__asm volatile
 8009682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009686:	f383 8811 	msr	BASEPRI, r3
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	607b      	str	r3, [r7, #4]
}
 8009694:	bf00      	nop
 8009696:	e7fe      	b.n	8009696 <vTaskSwitchContext+0x3e>
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	3b01      	subs	r3, #1
 800969c:	60fb      	str	r3, [r7, #12]
 800969e:	491d      	ldr	r1, [pc, #116]	; (8009714 <vTaskSwitchContext+0xbc>)
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	4613      	mov	r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	4413      	add	r3, r2
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	440b      	add	r3, r1
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d0e4      	beq.n	800967c <vTaskSwitchContext+0x24>
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	4613      	mov	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4413      	add	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4a15      	ldr	r2, [pc, #84]	; (8009714 <vTaskSwitchContext+0xbc>)
 80096be:	4413      	add	r3, r2
 80096c0:	60bb      	str	r3, [r7, #8]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	685a      	ldr	r2, [r3, #4]
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	605a      	str	r2, [r3, #4]
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	685a      	ldr	r2, [r3, #4]
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	3308      	adds	r3, #8
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d104      	bne.n	80096e2 <vTaskSwitchContext+0x8a>
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	685a      	ldr	r2, [r3, #4]
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	605a      	str	r2, [r3, #4]
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	4a0b      	ldr	r2, [pc, #44]	; (8009718 <vTaskSwitchContext+0xc0>)
 80096ea:	6013      	str	r3, [r2, #0]
 80096ec:	4a08      	ldr	r2, [pc, #32]	; (8009710 <vTaskSwitchContext+0xb8>)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096f2:	4b09      	ldr	r3, [pc, #36]	; (8009718 <vTaskSwitchContext+0xc0>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3354      	adds	r3, #84	; 0x54
 80096f8:	4a08      	ldr	r2, [pc, #32]	; (800971c <vTaskSwitchContext+0xc4>)
 80096fa:	6013      	str	r3, [r2, #0]
}
 80096fc:	bf00      	nop
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	20001900 	.word	0x20001900
 800970c:	200018ec 	.word	0x200018ec
 8009710:	200018e0 	.word	0x200018e0
 8009714:	20001408 	.word	0x20001408
 8009718:	20001404 	.word	0x20001404
 800971c:	20000030 	.word	0x20000030

08009720 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10a      	bne.n	8009746 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009734:	f383 8811 	msr	BASEPRI, r3
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	60fb      	str	r3, [r7, #12]
}
 8009742:	bf00      	nop
 8009744:	e7fe      	b.n	8009744 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009746:	4b07      	ldr	r3, [pc, #28]	; (8009764 <vTaskPlaceOnEventList+0x44>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	3318      	adds	r3, #24
 800974c:	4619      	mov	r1, r3
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7fe fe61 	bl	8008416 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009754:	2101      	movs	r1, #1
 8009756:	6838      	ldr	r0, [r7, #0]
 8009758:	f000 fa80 	bl	8009c5c <prvAddCurrentTaskToDelayedList>
}
 800975c:	bf00      	nop
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	20001404 	.word	0x20001404

08009768 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10a      	bne.n	8009790 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800977a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	617b      	str	r3, [r7, #20]
}
 800978c:	bf00      	nop
 800978e:	e7fe      	b.n	800978e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009790:	4b0a      	ldr	r3, [pc, #40]	; (80097bc <vTaskPlaceOnEventListRestricted+0x54>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	3318      	adds	r3, #24
 8009796:	4619      	mov	r1, r3
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f7fe fe18 	bl	80083ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d002      	beq.n	80097aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80097a4:	f04f 33ff 	mov.w	r3, #4294967295
 80097a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80097aa:	6879      	ldr	r1, [r7, #4]
 80097ac:	68b8      	ldr	r0, [r7, #8]
 80097ae:	f000 fa55 	bl	8009c5c <prvAddCurrentTaskToDelayedList>
	}
 80097b2:	bf00      	nop
 80097b4:	3718      	adds	r7, #24
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	20001404 	.word	0x20001404

080097c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10a      	bne.n	80097ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	60fb      	str	r3, [r7, #12]
}
 80097e8:	bf00      	nop
 80097ea:	e7fe      	b.n	80097ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	3318      	adds	r3, #24
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fe fe49 	bl	8008488 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097f6:	4b1e      	ldr	r3, [pc, #120]	; (8009870 <xTaskRemoveFromEventList+0xb0>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d11d      	bne.n	800983a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	3304      	adds	r3, #4
 8009802:	4618      	mov	r0, r3
 8009804:	f7fe fe40 	bl	8008488 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980c:	4b19      	ldr	r3, [pc, #100]	; (8009874 <xTaskRemoveFromEventList+0xb4>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	429a      	cmp	r2, r3
 8009812:	d903      	bls.n	800981c <xTaskRemoveFromEventList+0x5c>
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009818:	4a16      	ldr	r2, [pc, #88]	; (8009874 <xTaskRemoveFromEventList+0xb4>)
 800981a:	6013      	str	r3, [r2, #0]
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009820:	4613      	mov	r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4413      	add	r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4a13      	ldr	r2, [pc, #76]	; (8009878 <xTaskRemoveFromEventList+0xb8>)
 800982a:	441a      	add	r2, r3
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	3304      	adds	r3, #4
 8009830:	4619      	mov	r1, r3
 8009832:	4610      	mov	r0, r2
 8009834:	f7fe fdcb 	bl	80083ce <vListInsertEnd>
 8009838:	e005      	b.n	8009846 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	3318      	adds	r3, #24
 800983e:	4619      	mov	r1, r3
 8009840:	480e      	ldr	r0, [pc, #56]	; (800987c <xTaskRemoveFromEventList+0xbc>)
 8009842:	f7fe fdc4 	bl	80083ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984a:	4b0d      	ldr	r3, [pc, #52]	; (8009880 <xTaskRemoveFromEventList+0xc0>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009850:	429a      	cmp	r2, r3
 8009852:	d905      	bls.n	8009860 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009854:	2301      	movs	r3, #1
 8009856:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009858:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <xTaskRemoveFromEventList+0xc4>)
 800985a:	2201      	movs	r2, #1
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	e001      	b.n	8009864 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009860:	2300      	movs	r3, #0
 8009862:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009864:	697b      	ldr	r3, [r7, #20]
}
 8009866:	4618      	mov	r0, r3
 8009868:	3718      	adds	r7, #24
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	20001900 	.word	0x20001900
 8009874:	200018e0 	.word	0x200018e0
 8009878:	20001408 	.word	0x20001408
 800987c:	20001898 	.word	0x20001898
 8009880:	20001404 	.word	0x20001404
 8009884:	200018ec 	.word	0x200018ec

08009888 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009890:	4b06      	ldr	r3, [pc, #24]	; (80098ac <vTaskInternalSetTimeOutState+0x24>)
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009898:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <vTaskInternalSetTimeOutState+0x28>)
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	605a      	str	r2, [r3, #4]
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	200018f0 	.word	0x200018f0
 80098b0:	200018dc 	.word	0x200018dc

080098b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b088      	sub	sp, #32
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d10a      	bne.n	80098da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80098c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c8:	f383 8811 	msr	BASEPRI, r3
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	613b      	str	r3, [r7, #16]
}
 80098d6:	bf00      	nop
 80098d8:	e7fe      	b.n	80098d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10a      	bne.n	80098f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80098e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	60fb      	str	r3, [r7, #12]
}
 80098f2:	bf00      	nop
 80098f4:	e7fe      	b.n	80098f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80098f6:	f000 fe7d 	bl	800a5f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80098fa:	4b1d      	ldr	r3, [pc, #116]	; (8009970 <xTaskCheckForTimeOut+0xbc>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	69ba      	ldr	r2, [r7, #24]
 8009906:	1ad3      	subs	r3, r2, r3
 8009908:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009912:	d102      	bne.n	800991a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009914:	2300      	movs	r3, #0
 8009916:	61fb      	str	r3, [r7, #28]
 8009918:	e023      	b.n	8009962 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	4b15      	ldr	r3, [pc, #84]	; (8009974 <xTaskCheckForTimeOut+0xc0>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	429a      	cmp	r2, r3
 8009924:	d007      	beq.n	8009936 <xTaskCheckForTimeOut+0x82>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	69ba      	ldr	r2, [r7, #24]
 800992c:	429a      	cmp	r2, r3
 800992e:	d302      	bcc.n	8009936 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009930:	2301      	movs	r3, #1
 8009932:	61fb      	str	r3, [r7, #28]
 8009934:	e015      	b.n	8009962 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	429a      	cmp	r2, r3
 800993e:	d20b      	bcs.n	8009958 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	1ad2      	subs	r2, r2, r3
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7ff ff9b 	bl	8009888 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009952:	2300      	movs	r3, #0
 8009954:	61fb      	str	r3, [r7, #28]
 8009956:	e004      	b.n	8009962 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	2200      	movs	r2, #0
 800995c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800995e:	2301      	movs	r3, #1
 8009960:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009962:	f000 fe77 	bl	800a654 <vPortExitCritical>

	return xReturn;
 8009966:	69fb      	ldr	r3, [r7, #28]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3720      	adds	r7, #32
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	200018dc 	.word	0x200018dc
 8009974:	200018f0 	.word	0x200018f0

08009978 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009978:	b480      	push	{r7}
 800997a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800997c:	4b03      	ldr	r3, [pc, #12]	; (800998c <vTaskMissedYield+0x14>)
 800997e:	2201      	movs	r2, #1
 8009980:	601a      	str	r2, [r3, #0]
}
 8009982:	bf00      	nop
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	200018ec 	.word	0x200018ec

08009990 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009998:	f000 f852 	bl	8009a40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800999c:	4b06      	ldr	r3, [pc, #24]	; (80099b8 <prvIdleTask+0x28>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d9f9      	bls.n	8009998 <prvIdleTask+0x8>
			{
				taskYIELD();
 80099a4:	4b05      	ldr	r3, [pc, #20]	; (80099bc <prvIdleTask+0x2c>)
 80099a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099aa:	601a      	str	r2, [r3, #0]
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099b4:	e7f0      	b.n	8009998 <prvIdleTask+0x8>
 80099b6:	bf00      	nop
 80099b8:	20001408 	.word	0x20001408
 80099bc:	e000ed04 	.word	0xe000ed04

080099c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099c6:	2300      	movs	r3, #0
 80099c8:	607b      	str	r3, [r7, #4]
 80099ca:	e00c      	b.n	80099e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	4613      	mov	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4a12      	ldr	r2, [pc, #72]	; (8009a20 <prvInitialiseTaskLists+0x60>)
 80099d8:	4413      	add	r3, r2
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fe fcca 	bl	8008374 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3301      	adds	r3, #1
 80099e4:	607b      	str	r3, [r7, #4]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2b37      	cmp	r3, #55	; 0x37
 80099ea:	d9ef      	bls.n	80099cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80099ec:	480d      	ldr	r0, [pc, #52]	; (8009a24 <prvInitialiseTaskLists+0x64>)
 80099ee:	f7fe fcc1 	bl	8008374 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80099f2:	480d      	ldr	r0, [pc, #52]	; (8009a28 <prvInitialiseTaskLists+0x68>)
 80099f4:	f7fe fcbe 	bl	8008374 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80099f8:	480c      	ldr	r0, [pc, #48]	; (8009a2c <prvInitialiseTaskLists+0x6c>)
 80099fa:	f7fe fcbb 	bl	8008374 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80099fe:	480c      	ldr	r0, [pc, #48]	; (8009a30 <prvInitialiseTaskLists+0x70>)
 8009a00:	f7fe fcb8 	bl	8008374 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a04:	480b      	ldr	r0, [pc, #44]	; (8009a34 <prvInitialiseTaskLists+0x74>)
 8009a06:	f7fe fcb5 	bl	8008374 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a0a:	4b0b      	ldr	r3, [pc, #44]	; (8009a38 <prvInitialiseTaskLists+0x78>)
 8009a0c:	4a05      	ldr	r2, [pc, #20]	; (8009a24 <prvInitialiseTaskLists+0x64>)
 8009a0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a10:	4b0a      	ldr	r3, [pc, #40]	; (8009a3c <prvInitialiseTaskLists+0x7c>)
 8009a12:	4a05      	ldr	r2, [pc, #20]	; (8009a28 <prvInitialiseTaskLists+0x68>)
 8009a14:	601a      	str	r2, [r3, #0]
}
 8009a16:	bf00      	nop
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	20001408 	.word	0x20001408
 8009a24:	20001868 	.word	0x20001868
 8009a28:	2000187c 	.word	0x2000187c
 8009a2c:	20001898 	.word	0x20001898
 8009a30:	200018ac 	.word	0x200018ac
 8009a34:	200018c4 	.word	0x200018c4
 8009a38:	20001890 	.word	0x20001890
 8009a3c:	20001894 	.word	0x20001894

08009a40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a46:	e019      	b.n	8009a7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a48:	f000 fdd4 	bl	800a5f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a4c:	4b10      	ldr	r3, [pc, #64]	; (8009a90 <prvCheckTasksWaitingTermination+0x50>)
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	3304      	adds	r3, #4
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fe fd15 	bl	8008488 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a5e:	4b0d      	ldr	r3, [pc, #52]	; (8009a94 <prvCheckTasksWaitingTermination+0x54>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3b01      	subs	r3, #1
 8009a64:	4a0b      	ldr	r2, [pc, #44]	; (8009a94 <prvCheckTasksWaitingTermination+0x54>)
 8009a66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a68:	4b0b      	ldr	r3, [pc, #44]	; (8009a98 <prvCheckTasksWaitingTermination+0x58>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	4a0a      	ldr	r2, [pc, #40]	; (8009a98 <prvCheckTasksWaitingTermination+0x58>)
 8009a70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a72:	f000 fdef 	bl	800a654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f810 	bl	8009a9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a7c:	4b06      	ldr	r3, [pc, #24]	; (8009a98 <prvCheckTasksWaitingTermination+0x58>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1e1      	bne.n	8009a48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	200018ac 	.word	0x200018ac
 8009a94:	200018d8 	.word	0x200018d8
 8009a98:	200018c0 	.word	0x200018c0

08009a9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	3354      	adds	r3, #84	; 0x54
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f001 fef5 	bl	800b898 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d108      	bne.n	8009aca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 ff87 	bl	800a9d0 <vPortFree>
				vPortFree( pxTCB );
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 ff84 	bl	800a9d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ac8:	e018      	b.n	8009afc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d103      	bne.n	8009adc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 ff7b 	bl	800a9d0 <vPortFree>
	}
 8009ada:	e00f      	b.n	8009afc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d00a      	beq.n	8009afc <prvDeleteTCB+0x60>
	__asm volatile
 8009ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aea:	f383 8811 	msr	BASEPRI, r3
 8009aee:	f3bf 8f6f 	isb	sy
 8009af2:	f3bf 8f4f 	dsb	sy
 8009af6:	60fb      	str	r3, [r7, #12]
}
 8009af8:	bf00      	nop
 8009afa:	e7fe      	b.n	8009afa <prvDeleteTCB+0x5e>
	}
 8009afc:	bf00      	nop
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b0a:	4b0c      	ldr	r3, [pc, #48]	; (8009b3c <prvResetNextTaskUnblockTime+0x38>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d104      	bne.n	8009b1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b14:	4b0a      	ldr	r3, [pc, #40]	; (8009b40 <prvResetNextTaskUnblockTime+0x3c>)
 8009b16:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b1c:	e008      	b.n	8009b30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b1e:	4b07      	ldr	r3, [pc, #28]	; (8009b3c <prvResetNextTaskUnblockTime+0x38>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	4a04      	ldr	r2, [pc, #16]	; (8009b40 <prvResetNextTaskUnblockTime+0x3c>)
 8009b2e:	6013      	str	r3, [r2, #0]
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr
 8009b3c:	20001890 	.word	0x20001890
 8009b40:	200018f8 	.word	0x200018f8

08009b44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b4a:	4b0b      	ldr	r3, [pc, #44]	; (8009b78 <xTaskGetSchedulerState+0x34>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d102      	bne.n	8009b58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b52:	2301      	movs	r3, #1
 8009b54:	607b      	str	r3, [r7, #4]
 8009b56:	e008      	b.n	8009b6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b58:	4b08      	ldr	r3, [pc, #32]	; (8009b7c <xTaskGetSchedulerState+0x38>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d102      	bne.n	8009b66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b60:	2302      	movs	r3, #2
 8009b62:	607b      	str	r3, [r7, #4]
 8009b64:	e001      	b.n	8009b6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b66:	2300      	movs	r3, #0
 8009b68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b6a:	687b      	ldr	r3, [r7, #4]
	}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr
 8009b78:	200018e4 	.word	0x200018e4
 8009b7c:	20001900 	.word	0x20001900

08009b80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d056      	beq.n	8009c44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b96:	4b2e      	ldr	r3, [pc, #184]	; (8009c50 <xTaskPriorityDisinherit+0xd0>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d00a      	beq.n	8009bb6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	60fb      	str	r3, [r7, #12]
}
 8009bb2:	bf00      	nop
 8009bb4:	e7fe      	b.n	8009bb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d10a      	bne.n	8009bd4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	60bb      	str	r3, [r7, #8]
}
 8009bd0:	bf00      	nop
 8009bd2:	e7fe      	b.n	8009bd2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bd8:	1e5a      	subs	r2, r3, #1
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d02c      	beq.n	8009c44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d128      	bne.n	8009c44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	3304      	adds	r3, #4
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fe fc46 	bl	8008488 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c14:	4b0f      	ldr	r3, [pc, #60]	; (8009c54 <xTaskPriorityDisinherit+0xd4>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d903      	bls.n	8009c24 <xTaskPriorityDisinherit+0xa4>
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c20:	4a0c      	ldr	r2, [pc, #48]	; (8009c54 <xTaskPriorityDisinherit+0xd4>)
 8009c22:	6013      	str	r3, [r2, #0]
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c28:	4613      	mov	r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4413      	add	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4a09      	ldr	r2, [pc, #36]	; (8009c58 <xTaskPriorityDisinherit+0xd8>)
 8009c32:	441a      	add	r2, r3
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	3304      	adds	r3, #4
 8009c38:	4619      	mov	r1, r3
 8009c3a:	4610      	mov	r0, r2
 8009c3c:	f7fe fbc7 	bl	80083ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c40:	2301      	movs	r3, #1
 8009c42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c44:	697b      	ldr	r3, [r7, #20]
	}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3718      	adds	r7, #24
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	20001404 	.word	0x20001404
 8009c54:	200018e0 	.word	0x200018e0
 8009c58:	20001408 	.word	0x20001408

08009c5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c66:	4b21      	ldr	r3, [pc, #132]	; (8009cec <prvAddCurrentTaskToDelayedList+0x90>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c6c:	4b20      	ldr	r3, [pc, #128]	; (8009cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	3304      	adds	r3, #4
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fe fc08 	bl	8008488 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c7e:	d10a      	bne.n	8009c96 <prvAddCurrentTaskToDelayedList+0x3a>
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d007      	beq.n	8009c96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c86:	4b1a      	ldr	r3, [pc, #104]	; (8009cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	3304      	adds	r3, #4
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	4819      	ldr	r0, [pc, #100]	; (8009cf4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009c90:	f7fe fb9d 	bl	80083ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c94:	e026      	b.n	8009ce4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c9e:	4b14      	ldr	r3, [pc, #80]	; (8009cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d209      	bcs.n	8009cc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cae:	4b12      	ldr	r3, [pc, #72]	; (8009cf8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	4b0f      	ldr	r3, [pc, #60]	; (8009cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4610      	mov	r0, r2
 8009cbc:	f7fe fbab 	bl	8008416 <vListInsert>
}
 8009cc0:	e010      	b.n	8009ce4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cc2:	4b0e      	ldr	r3, [pc, #56]	; (8009cfc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	4b0a      	ldr	r3, [pc, #40]	; (8009cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	3304      	adds	r3, #4
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4610      	mov	r0, r2
 8009cd0:	f7fe fba1 	bl	8008416 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009cd4:	4b0a      	ldr	r3, [pc, #40]	; (8009d00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d202      	bcs.n	8009ce4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009cde:	4a08      	ldr	r2, [pc, #32]	; (8009d00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	6013      	str	r3, [r2, #0]
}
 8009ce4:	bf00      	nop
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	200018dc 	.word	0x200018dc
 8009cf0:	20001404 	.word	0x20001404
 8009cf4:	200018c4 	.word	0x200018c4
 8009cf8:	20001894 	.word	0x20001894
 8009cfc:	20001890 	.word	0x20001890
 8009d00:	200018f8 	.word	0x200018f8

08009d04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b08a      	sub	sp, #40	; 0x28
 8009d08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009d0e:	f000 fb07 	bl	800a320 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009d12:	4b1c      	ldr	r3, [pc, #112]	; (8009d84 <xTimerCreateTimerTask+0x80>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d021      	beq.n	8009d5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009d22:	1d3a      	adds	r2, r7, #4
 8009d24:	f107 0108 	add.w	r1, r7, #8
 8009d28:	f107 030c 	add.w	r3, r7, #12
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7fe fb07 	bl	8008340 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009d32:	6879      	ldr	r1, [r7, #4]
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	9202      	str	r2, [sp, #8]
 8009d3a:	9301      	str	r3, [sp, #4]
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	9300      	str	r3, [sp, #0]
 8009d40:	2300      	movs	r3, #0
 8009d42:	460a      	mov	r2, r1
 8009d44:	4910      	ldr	r1, [pc, #64]	; (8009d88 <xTimerCreateTimerTask+0x84>)
 8009d46:	4811      	ldr	r0, [pc, #68]	; (8009d8c <xTimerCreateTimerTask+0x88>)
 8009d48:	f7ff f8b4 	bl	8008eb4 <xTaskCreateStatic>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	4a10      	ldr	r2, [pc, #64]	; (8009d90 <xTimerCreateTimerTask+0x8c>)
 8009d50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009d52:	4b0f      	ldr	r3, [pc, #60]	; (8009d90 <xTimerCreateTimerTask+0x8c>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10a      	bne.n	8009d7a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	613b      	str	r3, [r7, #16]
}
 8009d76:	bf00      	nop
 8009d78:	e7fe      	b.n	8009d78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009d7a:	697b      	ldr	r3, [r7, #20]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3718      	adds	r7, #24
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	20001934 	.word	0x20001934
 8009d88:	0800db50 	.word	0x0800db50
 8009d8c:	08009ec9 	.word	0x08009ec9
 8009d90:	20001938 	.word	0x20001938

08009d94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b08a      	sub	sp, #40	; 0x28
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
 8009da0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009da2:	2300      	movs	r3, #0
 8009da4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10a      	bne.n	8009dc2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	623b      	str	r3, [r7, #32]
}
 8009dbe:	bf00      	nop
 8009dc0:	e7fe      	b.n	8009dc0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009dc2:	4b1a      	ldr	r3, [pc, #104]	; (8009e2c <xTimerGenericCommand+0x98>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d02a      	beq.n	8009e20 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	2b05      	cmp	r3, #5
 8009dda:	dc18      	bgt.n	8009e0e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ddc:	f7ff feb2 	bl	8009b44 <xTaskGetSchedulerState>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d109      	bne.n	8009dfa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009de6:	4b11      	ldr	r3, [pc, #68]	; (8009e2c <xTimerGenericCommand+0x98>)
 8009de8:	6818      	ldr	r0, [r3, #0]
 8009dea:	f107 0110 	add.w	r1, r7, #16
 8009dee:	2300      	movs	r3, #0
 8009df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009df2:	f7fe fc77 	bl	80086e4 <xQueueGenericSend>
 8009df6:	6278      	str	r0, [r7, #36]	; 0x24
 8009df8:	e012      	b.n	8009e20 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009dfa:	4b0c      	ldr	r3, [pc, #48]	; (8009e2c <xTimerGenericCommand+0x98>)
 8009dfc:	6818      	ldr	r0, [r3, #0]
 8009dfe:	f107 0110 	add.w	r1, r7, #16
 8009e02:	2300      	movs	r3, #0
 8009e04:	2200      	movs	r2, #0
 8009e06:	f7fe fc6d 	bl	80086e4 <xQueueGenericSend>
 8009e0a:	6278      	str	r0, [r7, #36]	; 0x24
 8009e0c:	e008      	b.n	8009e20 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e0e:	4b07      	ldr	r3, [pc, #28]	; (8009e2c <xTimerGenericCommand+0x98>)
 8009e10:	6818      	ldr	r0, [r3, #0]
 8009e12:	f107 0110 	add.w	r1, r7, #16
 8009e16:	2300      	movs	r3, #0
 8009e18:	683a      	ldr	r2, [r7, #0]
 8009e1a:	f7fe fd61 	bl	80088e0 <xQueueGenericSendFromISR>
 8009e1e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3728      	adds	r7, #40	; 0x28
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	20001934 	.word	0x20001934

08009e30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b088      	sub	sp, #32
 8009e34:	af02      	add	r7, sp, #8
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e3a:	4b22      	ldr	r3, [pc, #136]	; (8009ec4 <prvProcessExpiredTimer+0x94>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	3304      	adds	r3, #4
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7fe fb1d 	bl	8008488 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e54:	f003 0304 	and.w	r3, r3, #4
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d022      	beq.n	8009ea2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	699a      	ldr	r2, [r3, #24]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	18d1      	adds	r1, r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	6978      	ldr	r0, [r7, #20]
 8009e6a:	f000 f8d1 	bl	800a010 <prvInsertTimerInActiveList>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d01f      	beq.n	8009eb4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e74:	2300      	movs	r3, #0
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	6978      	ldr	r0, [r7, #20]
 8009e80:	f7ff ff88 	bl	8009d94 <xTimerGenericCommand>
 8009e84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d113      	bne.n	8009eb4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e90:	f383 8811 	msr	BASEPRI, r3
 8009e94:	f3bf 8f6f 	isb	sy
 8009e98:	f3bf 8f4f 	dsb	sy
 8009e9c:	60fb      	str	r3, [r7, #12]
}
 8009e9e:	bf00      	nop
 8009ea0:	e7fe      	b.n	8009ea0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ea8:	f023 0301 	bic.w	r3, r3, #1
 8009eac:	b2da      	uxtb	r2, r3
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	6a1b      	ldr	r3, [r3, #32]
 8009eb8:	6978      	ldr	r0, [r7, #20]
 8009eba:	4798      	blx	r3
}
 8009ebc:	bf00      	nop
 8009ebe:	3718      	adds	r7, #24
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	2000192c 	.word	0x2000192c

08009ec8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ed0:	f107 0308 	add.w	r3, r7, #8
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f000 f857 	bl	8009f88 <prvGetNextExpireTime>
 8009eda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f000 f803 	bl	8009eec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009ee6:	f000 f8d5 	bl	800a094 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009eea:	e7f1      	b.n	8009ed0 <prvTimerTask+0x8>

08009eec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009ef6:	f7ff fa39 	bl	800936c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009efa:	f107 0308 	add.w	r3, r7, #8
 8009efe:	4618      	mov	r0, r3
 8009f00:	f000 f866 	bl	8009fd0 <prvSampleTimeNow>
 8009f04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d130      	bne.n	8009f6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d10a      	bne.n	8009f28 <prvProcessTimerOrBlockTask+0x3c>
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d806      	bhi.n	8009f28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009f1a:	f7ff fa35 	bl	8009388 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f1e:	68f9      	ldr	r1, [r7, #12]
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7ff ff85 	bl	8009e30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009f26:	e024      	b.n	8009f72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d008      	beq.n	8009f40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009f2e:	4b13      	ldr	r3, [pc, #76]	; (8009f7c <prvProcessTimerOrBlockTask+0x90>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <prvProcessTimerOrBlockTask+0x50>
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e000      	b.n	8009f3e <prvProcessTimerOrBlockTask+0x52>
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009f40:	4b0f      	ldr	r3, [pc, #60]	; (8009f80 <prvProcessTimerOrBlockTask+0x94>)
 8009f42:	6818      	ldr	r0, [r3, #0]
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	683a      	ldr	r2, [r7, #0]
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	f7fe ff7d 	bl	8008e4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009f52:	f7ff fa19 	bl	8009388 <xTaskResumeAll>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10a      	bne.n	8009f72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009f5c:	4b09      	ldr	r3, [pc, #36]	; (8009f84 <prvProcessTimerOrBlockTask+0x98>)
 8009f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f62:	601a      	str	r2, [r3, #0]
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	f3bf 8f6f 	isb	sy
}
 8009f6c:	e001      	b.n	8009f72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009f6e:	f7ff fa0b 	bl	8009388 <xTaskResumeAll>
}
 8009f72:	bf00      	nop
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	20001930 	.word	0x20001930
 8009f80:	20001934 	.word	0x20001934
 8009f84:	e000ed04 	.word	0xe000ed04

08009f88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009f90:	4b0e      	ldr	r3, [pc, #56]	; (8009fcc <prvGetNextExpireTime+0x44>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d101      	bne.n	8009f9e <prvGetNextExpireTime+0x16>
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	e000      	b.n	8009fa0 <prvGetNextExpireTime+0x18>
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d105      	bne.n	8009fb8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fac:	4b07      	ldr	r3, [pc, #28]	; (8009fcc <prvGetNextExpireTime+0x44>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	60fb      	str	r3, [r7, #12]
 8009fb6:	e001      	b.n	8009fbc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3714      	adds	r7, #20
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	2000192c 	.word	0x2000192c

08009fd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009fd8:	f7ff fa74 	bl	80094c4 <xTaskGetTickCount>
 8009fdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009fde:	4b0b      	ldr	r3, [pc, #44]	; (800a00c <prvSampleTimeNow+0x3c>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d205      	bcs.n	8009ff4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009fe8:	f000 f936 	bl	800a258 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	601a      	str	r2, [r3, #0]
 8009ff2:	e002      	b.n	8009ffa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009ffa:	4a04      	ldr	r2, [pc, #16]	; (800a00c <prvSampleTimeNow+0x3c>)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a000:	68fb      	ldr	r3, [r7, #12]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	2000193c 	.word	0x2000193c

0800a010 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	607a      	str	r2, [r7, #4]
 800a01c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a01e:	2300      	movs	r3, #0
 800a020:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a02e:	68ba      	ldr	r2, [r7, #8]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	429a      	cmp	r2, r3
 800a034:	d812      	bhi.n	800a05c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	1ad2      	subs	r2, r2, r3
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	429a      	cmp	r2, r3
 800a042:	d302      	bcc.n	800a04a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a044:	2301      	movs	r3, #1
 800a046:	617b      	str	r3, [r7, #20]
 800a048:	e01b      	b.n	800a082 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a04a:	4b10      	ldr	r3, [pc, #64]	; (800a08c <prvInsertTimerInActiveList+0x7c>)
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	3304      	adds	r3, #4
 800a052:	4619      	mov	r1, r3
 800a054:	4610      	mov	r0, r2
 800a056:	f7fe f9de 	bl	8008416 <vListInsert>
 800a05a:	e012      	b.n	800a082 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	429a      	cmp	r2, r3
 800a062:	d206      	bcs.n	800a072 <prvInsertTimerInActiveList+0x62>
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d302      	bcc.n	800a072 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a06c:	2301      	movs	r3, #1
 800a06e:	617b      	str	r3, [r7, #20]
 800a070:	e007      	b.n	800a082 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a072:	4b07      	ldr	r3, [pc, #28]	; (800a090 <prvInsertTimerInActiveList+0x80>)
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	3304      	adds	r3, #4
 800a07a:	4619      	mov	r1, r3
 800a07c:	4610      	mov	r0, r2
 800a07e:	f7fe f9ca 	bl	8008416 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a082:	697b      	ldr	r3, [r7, #20]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3718      	adds	r7, #24
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	20001930 	.word	0x20001930
 800a090:	2000192c 	.word	0x2000192c

0800a094 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b08e      	sub	sp, #56	; 0x38
 800a098:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a09a:	e0ca      	b.n	800a232 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	da18      	bge.n	800a0d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a0a2:	1d3b      	adds	r3, r7, #4
 800a0a4:	3304      	adds	r3, #4
 800a0a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10a      	bne.n	800a0c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	61fb      	str	r3, [r7, #28]
}
 800a0c0:	bf00      	nop
 800a0c2:	e7fe      	b.n	800a0c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0ca:	6850      	ldr	r0, [r2, #4]
 800a0cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0ce:	6892      	ldr	r2, [r2, #8]
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f2c0 80aa 	blt.w	800a230 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	695b      	ldr	r3, [r3, #20]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d004      	beq.n	800a0f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7fe f9cb 	bl	8008488 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0f2:	463b      	mov	r3, r7
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7ff ff6b 	bl	8009fd0 <prvSampleTimeNow>
 800a0fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2b09      	cmp	r3, #9
 800a100:	f200 8097 	bhi.w	800a232 <prvProcessReceivedCommands+0x19e>
 800a104:	a201      	add	r2, pc, #4	; (adr r2, 800a10c <prvProcessReceivedCommands+0x78>)
 800a106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10a:	bf00      	nop
 800a10c:	0800a135 	.word	0x0800a135
 800a110:	0800a135 	.word	0x0800a135
 800a114:	0800a135 	.word	0x0800a135
 800a118:	0800a1a9 	.word	0x0800a1a9
 800a11c:	0800a1bd 	.word	0x0800a1bd
 800a120:	0800a207 	.word	0x0800a207
 800a124:	0800a135 	.word	0x0800a135
 800a128:	0800a135 	.word	0x0800a135
 800a12c:	0800a1a9 	.word	0x0800a1a9
 800a130:	0800a1bd 	.word	0x0800a1bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a136:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a13a:	f043 0301 	orr.w	r3, r3, #1
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a146:	68ba      	ldr	r2, [r7, #8]
 800a148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14a:	699b      	ldr	r3, [r3, #24]
 800a14c:	18d1      	adds	r1, r2, r3
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a154:	f7ff ff5c 	bl	800a010 <prvInsertTimerInActiveList>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d069      	beq.n	800a232 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a160:	6a1b      	ldr	r3, [r3, #32]
 800a162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a164:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a16c:	f003 0304 	and.w	r3, r3, #4
 800a170:	2b00      	cmp	r3, #0
 800a172:	d05e      	beq.n	800a232 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	441a      	add	r2, r3
 800a17c:	2300      	movs	r3, #0
 800a17e:	9300      	str	r3, [sp, #0]
 800a180:	2300      	movs	r3, #0
 800a182:	2100      	movs	r1, #0
 800a184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a186:	f7ff fe05 	bl	8009d94 <xTimerGenericCommand>
 800a18a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a18c:	6a3b      	ldr	r3, [r7, #32]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d14f      	bne.n	800a232 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a196:	f383 8811 	msr	BASEPRI, r3
 800a19a:	f3bf 8f6f 	isb	sy
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	61bb      	str	r3, [r7, #24]
}
 800a1a4:	bf00      	nop
 800a1a6:	e7fe      	b.n	800a1a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1ae:	f023 0301 	bic.w	r3, r3, #1
 800a1b2:	b2da      	uxtb	r2, r3
 800a1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a1ba:	e03a      	b.n	800a232 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1c2:	f043 0301 	orr.w	r3, r3, #1
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d6:	699b      	ldr	r3, [r3, #24]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d10a      	bne.n	800a1f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e0:	f383 8811 	msr	BASEPRI, r3
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	617b      	str	r3, [r7, #20]
}
 800a1ee:	bf00      	nop
 800a1f0:	e7fe      	b.n	800a1f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f4:	699a      	ldr	r2, [r3, #24]
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f8:	18d1      	adds	r1, r2, r3
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a200:	f7ff ff06 	bl	800a010 <prvInsertTimerInActiveList>
					break;
 800a204:	e015      	b.n	800a232 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a20c:	f003 0302 	and.w	r3, r3, #2
 800a210:	2b00      	cmp	r3, #0
 800a212:	d103      	bne.n	800a21c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a216:	f000 fbdb 	bl	800a9d0 <vPortFree>
 800a21a:	e00a      	b.n	800a232 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a222:	f023 0301 	bic.w	r3, r3, #1
 800a226:	b2da      	uxtb	r2, r3
 800a228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a22e:	e000      	b.n	800a232 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a230:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a232:	4b08      	ldr	r3, [pc, #32]	; (800a254 <prvProcessReceivedCommands+0x1c0>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	1d39      	adds	r1, r7, #4
 800a238:	2200      	movs	r2, #0
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe fbec 	bl	8008a18 <xQueueReceive>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	f47f af2a 	bne.w	800a09c <prvProcessReceivedCommands+0x8>
	}
}
 800a248:	bf00      	nop
 800a24a:	bf00      	nop
 800a24c:	3730      	adds	r7, #48	; 0x30
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	20001934 	.word	0x20001934

0800a258 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b088      	sub	sp, #32
 800a25c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a25e:	e048      	b.n	800a2f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a260:	4b2d      	ldr	r3, [pc, #180]	; (800a318 <prvSwitchTimerLists+0xc0>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a26a:	4b2b      	ldr	r3, [pc, #172]	; (800a318 <prvSwitchTimerLists+0xc0>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	3304      	adds	r3, #4
 800a278:	4618      	mov	r0, r3
 800a27a:	f7fe f905 	bl	8008488 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6a1b      	ldr	r3, [r3, #32]
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a28c:	f003 0304 	and.w	r3, r3, #4
 800a290:	2b00      	cmp	r3, #0
 800a292:	d02e      	beq.n	800a2f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	4413      	add	r3, r2
 800a29c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a29e:	68ba      	ldr	r2, [r7, #8]
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d90e      	bls.n	800a2c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2b2:	4b19      	ldr	r3, [pc, #100]	; (800a318 <prvSwitchTimerLists+0xc0>)
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	3304      	adds	r3, #4
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	4610      	mov	r0, r2
 800a2be:	f7fe f8aa 	bl	8008416 <vListInsert>
 800a2c2:	e016      	b.n	800a2f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	693a      	ldr	r2, [r7, #16]
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f7ff fd60 	bl	8009d94 <xTimerGenericCommand>
 800a2d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d10a      	bne.n	800a2f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e0:	f383 8811 	msr	BASEPRI, r3
 800a2e4:	f3bf 8f6f 	isb	sy
 800a2e8:	f3bf 8f4f 	dsb	sy
 800a2ec:	603b      	str	r3, [r7, #0]
}
 800a2ee:	bf00      	nop
 800a2f0:	e7fe      	b.n	800a2f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a2f2:	4b09      	ldr	r3, [pc, #36]	; (800a318 <prvSwitchTimerLists+0xc0>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1b1      	bne.n	800a260 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a2fc:	4b06      	ldr	r3, [pc, #24]	; (800a318 <prvSwitchTimerLists+0xc0>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a302:	4b06      	ldr	r3, [pc, #24]	; (800a31c <prvSwitchTimerLists+0xc4>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a04      	ldr	r2, [pc, #16]	; (800a318 <prvSwitchTimerLists+0xc0>)
 800a308:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a30a:	4a04      	ldr	r2, [pc, #16]	; (800a31c <prvSwitchTimerLists+0xc4>)
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	6013      	str	r3, [r2, #0]
}
 800a310:	bf00      	nop
 800a312:	3718      	adds	r7, #24
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	2000192c 	.word	0x2000192c
 800a31c:	20001930 	.word	0x20001930

0800a320 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a326:	f000 f965 	bl	800a5f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a32a:	4b15      	ldr	r3, [pc, #84]	; (800a380 <prvCheckForValidListAndQueue+0x60>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d120      	bne.n	800a374 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a332:	4814      	ldr	r0, [pc, #80]	; (800a384 <prvCheckForValidListAndQueue+0x64>)
 800a334:	f7fe f81e 	bl	8008374 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a338:	4813      	ldr	r0, [pc, #76]	; (800a388 <prvCheckForValidListAndQueue+0x68>)
 800a33a:	f7fe f81b 	bl	8008374 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a33e:	4b13      	ldr	r3, [pc, #76]	; (800a38c <prvCheckForValidListAndQueue+0x6c>)
 800a340:	4a10      	ldr	r2, [pc, #64]	; (800a384 <prvCheckForValidListAndQueue+0x64>)
 800a342:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a344:	4b12      	ldr	r3, [pc, #72]	; (800a390 <prvCheckForValidListAndQueue+0x70>)
 800a346:	4a10      	ldr	r2, [pc, #64]	; (800a388 <prvCheckForValidListAndQueue+0x68>)
 800a348:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a34a:	2300      	movs	r3, #0
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	4b11      	ldr	r3, [pc, #68]	; (800a394 <prvCheckForValidListAndQueue+0x74>)
 800a350:	4a11      	ldr	r2, [pc, #68]	; (800a398 <prvCheckForValidListAndQueue+0x78>)
 800a352:	2110      	movs	r1, #16
 800a354:	200a      	movs	r0, #10
 800a356:	f7fe f929 	bl	80085ac <xQueueGenericCreateStatic>
 800a35a:	4603      	mov	r3, r0
 800a35c:	4a08      	ldr	r2, [pc, #32]	; (800a380 <prvCheckForValidListAndQueue+0x60>)
 800a35e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a360:	4b07      	ldr	r3, [pc, #28]	; (800a380 <prvCheckForValidListAndQueue+0x60>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d005      	beq.n	800a374 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a368:	4b05      	ldr	r3, [pc, #20]	; (800a380 <prvCheckForValidListAndQueue+0x60>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	490b      	ldr	r1, [pc, #44]	; (800a39c <prvCheckForValidListAndQueue+0x7c>)
 800a36e:	4618      	mov	r0, r3
 800a370:	f7fe fd42 	bl	8008df8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a374:	f000 f96e 	bl	800a654 <vPortExitCritical>
}
 800a378:	bf00      	nop
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	20001934 	.word	0x20001934
 800a384:	20001904 	.word	0x20001904
 800a388:	20001918 	.word	0x20001918
 800a38c:	2000192c 	.word	0x2000192c
 800a390:	20001930 	.word	0x20001930
 800a394:	200019e0 	.word	0x200019e0
 800a398:	20001940 	.word	0x20001940
 800a39c:	0800db58 	.word	0x0800db58

0800a3a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	3b04      	subs	r3, #4
 800a3b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a3b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	3b04      	subs	r3, #4
 800a3be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	f023 0201 	bic.w	r2, r3, #1
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	3b04      	subs	r3, #4
 800a3ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a3d0:	4a0c      	ldr	r2, [pc, #48]	; (800a404 <pxPortInitialiseStack+0x64>)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	3b14      	subs	r3, #20
 800a3da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	3b04      	subs	r3, #4
 800a3e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f06f 0202 	mvn.w	r2, #2
 800a3ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	3b20      	subs	r3, #32
 800a3f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3714      	adds	r7, #20
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	0800a409 	.word	0x0800a409

0800a408 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a40e:	2300      	movs	r3, #0
 800a410:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a412:	4b12      	ldr	r3, [pc, #72]	; (800a45c <prvTaskExitError+0x54>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a41a:	d00a      	beq.n	800a432 <prvTaskExitError+0x2a>
	__asm volatile
 800a41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a420:	f383 8811 	msr	BASEPRI, r3
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	60fb      	str	r3, [r7, #12]
}
 800a42e:	bf00      	nop
 800a430:	e7fe      	b.n	800a430 <prvTaskExitError+0x28>
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	60bb      	str	r3, [r7, #8]
}
 800a444:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a446:	bf00      	nop
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0fc      	beq.n	800a448 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a44e:	bf00      	nop
 800a450:	bf00      	nop
 800a452:	3714      	adds	r7, #20
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr
 800a45c:	2000002c 	.word	0x2000002c

0800a460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a460:	4b07      	ldr	r3, [pc, #28]	; (800a480 <pxCurrentTCBConst2>)
 800a462:	6819      	ldr	r1, [r3, #0]
 800a464:	6808      	ldr	r0, [r1, #0]
 800a466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46a:	f380 8809 	msr	PSP, r0
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f04f 0000 	mov.w	r0, #0
 800a476:	f380 8811 	msr	BASEPRI, r0
 800a47a:	4770      	bx	lr
 800a47c:	f3af 8000 	nop.w

0800a480 <pxCurrentTCBConst2>:
 800a480:	20001404 	.word	0x20001404
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a484:	bf00      	nop
 800a486:	bf00      	nop

0800a488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a488:	4808      	ldr	r0, [pc, #32]	; (800a4ac <prvPortStartFirstTask+0x24>)
 800a48a:	6800      	ldr	r0, [r0, #0]
 800a48c:	6800      	ldr	r0, [r0, #0]
 800a48e:	f380 8808 	msr	MSP, r0
 800a492:	f04f 0000 	mov.w	r0, #0
 800a496:	f380 8814 	msr	CONTROL, r0
 800a49a:	b662      	cpsie	i
 800a49c:	b661      	cpsie	f
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	df00      	svc	0
 800a4a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a4aa:	bf00      	nop
 800a4ac:	e000ed08 	.word	0xe000ed08

0800a4b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a4b6:	4b46      	ldr	r3, [pc, #280]	; (800a5d0 <xPortStartScheduler+0x120>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a46      	ldr	r2, [pc, #280]	; (800a5d4 <xPortStartScheduler+0x124>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d10a      	bne.n	800a4d6 <xPortStartScheduler+0x26>
	__asm volatile
 800a4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	613b      	str	r3, [r7, #16]
}
 800a4d2:	bf00      	nop
 800a4d4:	e7fe      	b.n	800a4d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a4d6:	4b3e      	ldr	r3, [pc, #248]	; (800a5d0 <xPortStartScheduler+0x120>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a3f      	ldr	r2, [pc, #252]	; (800a5d8 <xPortStartScheduler+0x128>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d10a      	bne.n	800a4f6 <xPortStartScheduler+0x46>
	__asm volatile
 800a4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	60fb      	str	r3, [r7, #12]
}
 800a4f2:	bf00      	nop
 800a4f4:	e7fe      	b.n	800a4f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a4f6:	4b39      	ldr	r3, [pc, #228]	; (800a5dc <xPortStartScheduler+0x12c>)
 800a4f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	22ff      	movs	r2, #255	; 0xff
 800a506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a510:	78fb      	ldrb	r3, [r7, #3]
 800a512:	b2db      	uxtb	r3, r3
 800a514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	4b31      	ldr	r3, [pc, #196]	; (800a5e0 <xPortStartScheduler+0x130>)
 800a51c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a51e:	4b31      	ldr	r3, [pc, #196]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a520:	2207      	movs	r2, #7
 800a522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a524:	e009      	b.n	800a53a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a526:	4b2f      	ldr	r3, [pc, #188]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3b01      	subs	r3, #1
 800a52c:	4a2d      	ldr	r2, [pc, #180]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a52e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a530:	78fb      	ldrb	r3, [r7, #3]
 800a532:	b2db      	uxtb	r3, r3
 800a534:	005b      	lsls	r3, r3, #1
 800a536:	b2db      	uxtb	r3, r3
 800a538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a53a:	78fb      	ldrb	r3, [r7, #3]
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a542:	2b80      	cmp	r3, #128	; 0x80
 800a544:	d0ef      	beq.n	800a526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a546:	4b27      	ldr	r3, [pc, #156]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f1c3 0307 	rsb	r3, r3, #7
 800a54e:	2b04      	cmp	r3, #4
 800a550:	d00a      	beq.n	800a568 <xPortStartScheduler+0xb8>
	__asm volatile
 800a552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	60bb      	str	r3, [r7, #8]
}
 800a564:	bf00      	nop
 800a566:	e7fe      	b.n	800a566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a568:	4b1e      	ldr	r3, [pc, #120]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	021b      	lsls	r3, r3, #8
 800a56e:	4a1d      	ldr	r2, [pc, #116]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a572:	4b1c      	ldr	r3, [pc, #112]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a57a:	4a1a      	ldr	r2, [pc, #104]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a57c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	b2da      	uxtb	r2, r3
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a586:	4b18      	ldr	r3, [pc, #96]	; (800a5e8 <xPortStartScheduler+0x138>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a17      	ldr	r2, [pc, #92]	; (800a5e8 <xPortStartScheduler+0x138>)
 800a58c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a592:	4b15      	ldr	r3, [pc, #84]	; (800a5e8 <xPortStartScheduler+0x138>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a14      	ldr	r2, [pc, #80]	; (800a5e8 <xPortStartScheduler+0x138>)
 800a598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a59c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a59e:	f000 f8dd 	bl	800a75c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a5a2:	4b12      	ldr	r3, [pc, #72]	; (800a5ec <xPortStartScheduler+0x13c>)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a5a8:	f000 f8fc 	bl	800a7a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a5ac:	4b10      	ldr	r3, [pc, #64]	; (800a5f0 <xPortStartScheduler+0x140>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a0f      	ldr	r2, [pc, #60]	; (800a5f0 <xPortStartScheduler+0x140>)
 800a5b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a5b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a5b8:	f7ff ff66 	bl	800a488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a5bc:	f7ff f84c 	bl	8009658 <vTaskSwitchContext>
	prvTaskExitError();
 800a5c0:	f7ff ff22 	bl	800a408 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3718      	adds	r7, #24
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	e000ed00 	.word	0xe000ed00
 800a5d4:	410fc271 	.word	0x410fc271
 800a5d8:	410fc270 	.word	0x410fc270
 800a5dc:	e000e400 	.word	0xe000e400
 800a5e0:	20001a30 	.word	0x20001a30
 800a5e4:	20001a34 	.word	0x20001a34
 800a5e8:	e000ed20 	.word	0xe000ed20
 800a5ec:	2000002c 	.word	0x2000002c
 800a5f0:	e000ef34 	.word	0xe000ef34

0800a5f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
	__asm volatile
 800a5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	607b      	str	r3, [r7, #4]
}
 800a60c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a60e:	4b0f      	ldr	r3, [pc, #60]	; (800a64c <vPortEnterCritical+0x58>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	3301      	adds	r3, #1
 800a614:	4a0d      	ldr	r2, [pc, #52]	; (800a64c <vPortEnterCritical+0x58>)
 800a616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a618:	4b0c      	ldr	r3, [pc, #48]	; (800a64c <vPortEnterCritical+0x58>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d10f      	bne.n	800a640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a620:	4b0b      	ldr	r3, [pc, #44]	; (800a650 <vPortEnterCritical+0x5c>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	b2db      	uxtb	r3, r3
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00a      	beq.n	800a640 <vPortEnterCritical+0x4c>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	603b      	str	r3, [r7, #0]
}
 800a63c:	bf00      	nop
 800a63e:	e7fe      	b.n	800a63e <vPortEnterCritical+0x4a>
	}
}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	2000002c 	.word	0x2000002c
 800a650:	e000ed04 	.word	0xe000ed04

0800a654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a65a:	4b12      	ldr	r3, [pc, #72]	; (800a6a4 <vPortExitCritical+0x50>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d10a      	bne.n	800a678 <vPortExitCritical+0x24>
	__asm volatile
 800a662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	607b      	str	r3, [r7, #4]
}
 800a674:	bf00      	nop
 800a676:	e7fe      	b.n	800a676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a678:	4b0a      	ldr	r3, [pc, #40]	; (800a6a4 <vPortExitCritical+0x50>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	3b01      	subs	r3, #1
 800a67e:	4a09      	ldr	r2, [pc, #36]	; (800a6a4 <vPortExitCritical+0x50>)
 800a680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a682:	4b08      	ldr	r3, [pc, #32]	; (800a6a4 <vPortExitCritical+0x50>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d105      	bne.n	800a696 <vPortExitCritical+0x42>
 800a68a:	2300      	movs	r3, #0
 800a68c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	f383 8811 	msr	BASEPRI, r3
}
 800a694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a696:	bf00      	nop
 800a698:	370c      	adds	r7, #12
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	2000002c 	.word	0x2000002c
	...

0800a6b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a6b0:	f3ef 8009 	mrs	r0, PSP
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	4b15      	ldr	r3, [pc, #84]	; (800a710 <pxCurrentTCBConst>)
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	f01e 0f10 	tst.w	lr, #16
 800a6c0:	bf08      	it	eq
 800a6c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a6c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ca:	6010      	str	r0, [r2, #0]
 800a6cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a6d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a6d4:	f380 8811 	msr	BASEPRI, r0
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	f3bf 8f6f 	isb	sy
 800a6e0:	f7fe ffba 	bl	8009658 <vTaskSwitchContext>
 800a6e4:	f04f 0000 	mov.w	r0, #0
 800a6e8:	f380 8811 	msr	BASEPRI, r0
 800a6ec:	bc09      	pop	{r0, r3}
 800a6ee:	6819      	ldr	r1, [r3, #0]
 800a6f0:	6808      	ldr	r0, [r1, #0]
 800a6f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f6:	f01e 0f10 	tst.w	lr, #16
 800a6fa:	bf08      	it	eq
 800a6fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a700:	f380 8809 	msr	PSP, r0
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	f3af 8000 	nop.w

0800a710 <pxCurrentTCBConst>:
 800a710:	20001404 	.word	0x20001404
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a714:	bf00      	nop
 800a716:	bf00      	nop

0800a718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	607b      	str	r3, [r7, #4]
}
 800a730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a732:	f7fe fed7 	bl	80094e4 <xTaskIncrementTick>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d003      	beq.n	800a744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a73c:	4b06      	ldr	r3, [pc, #24]	; (800a758 <xPortSysTickHandler+0x40>)
 800a73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a742:	601a      	str	r2, [r3, #0]
 800a744:	2300      	movs	r3, #0
 800a746:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	f383 8811 	msr	BASEPRI, r3
}
 800a74e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a750:	bf00      	nop
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	e000ed04 	.word	0xe000ed04

0800a75c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a75c:	b480      	push	{r7}
 800a75e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a760:	4b0b      	ldr	r3, [pc, #44]	; (800a790 <vPortSetupTimerInterrupt+0x34>)
 800a762:	2200      	movs	r2, #0
 800a764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a766:	4b0b      	ldr	r3, [pc, #44]	; (800a794 <vPortSetupTimerInterrupt+0x38>)
 800a768:	2200      	movs	r2, #0
 800a76a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a76c:	4b0a      	ldr	r3, [pc, #40]	; (800a798 <vPortSetupTimerInterrupt+0x3c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a0a      	ldr	r2, [pc, #40]	; (800a79c <vPortSetupTimerInterrupt+0x40>)
 800a772:	fba2 2303 	umull	r2, r3, r2, r3
 800a776:	099b      	lsrs	r3, r3, #6
 800a778:	4a09      	ldr	r2, [pc, #36]	; (800a7a0 <vPortSetupTimerInterrupt+0x44>)
 800a77a:	3b01      	subs	r3, #1
 800a77c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a77e:	4b04      	ldr	r3, [pc, #16]	; (800a790 <vPortSetupTimerInterrupt+0x34>)
 800a780:	2207      	movs	r2, #7
 800a782:	601a      	str	r2, [r3, #0]
}
 800a784:	bf00      	nop
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	e000e010 	.word	0xe000e010
 800a794:	e000e018 	.word	0xe000e018
 800a798:	20000020 	.word	0x20000020
 800a79c:	10624dd3 	.word	0x10624dd3
 800a7a0:	e000e014 	.word	0xe000e014

0800a7a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a7a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a7b4 <vPortEnableVFP+0x10>
 800a7a8:	6801      	ldr	r1, [r0, #0]
 800a7aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a7ae:	6001      	str	r1, [r0, #0]
 800a7b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a7b2:	bf00      	nop
 800a7b4:	e000ed88 	.word	0xe000ed88

0800a7b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a7be:	f3ef 8305 	mrs	r3, IPSR
 800a7c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2b0f      	cmp	r3, #15
 800a7c8:	d914      	bls.n	800a7f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a7ca:	4a17      	ldr	r2, [pc, #92]	; (800a828 <vPortValidateInterruptPriority+0x70>)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a7d4:	4b15      	ldr	r3, [pc, #84]	; (800a82c <vPortValidateInterruptPriority+0x74>)
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	7afa      	ldrb	r2, [r7, #11]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d20a      	bcs.n	800a7f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	607b      	str	r3, [r7, #4]
}
 800a7f0:	bf00      	nop
 800a7f2:	e7fe      	b.n	800a7f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a7f4:	4b0e      	ldr	r3, [pc, #56]	; (800a830 <vPortValidateInterruptPriority+0x78>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a7fc:	4b0d      	ldr	r3, [pc, #52]	; (800a834 <vPortValidateInterruptPriority+0x7c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	429a      	cmp	r2, r3
 800a802:	d90a      	bls.n	800a81a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a808:	f383 8811 	msr	BASEPRI, r3
 800a80c:	f3bf 8f6f 	isb	sy
 800a810:	f3bf 8f4f 	dsb	sy
 800a814:	603b      	str	r3, [r7, #0]
}
 800a816:	bf00      	nop
 800a818:	e7fe      	b.n	800a818 <vPortValidateInterruptPriority+0x60>
	}
 800a81a:	bf00      	nop
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	e000e3f0 	.word	0xe000e3f0
 800a82c:	20001a30 	.word	0x20001a30
 800a830:	e000ed0c 	.word	0xe000ed0c
 800a834:	20001a34 	.word	0x20001a34

0800a838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08a      	sub	sp, #40	; 0x28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a840:	2300      	movs	r3, #0
 800a842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a844:	f7fe fd92 	bl	800936c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a848:	4b5b      	ldr	r3, [pc, #364]	; (800a9b8 <pvPortMalloc+0x180>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d101      	bne.n	800a854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a850:	f000 f920 	bl	800aa94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a854:	4b59      	ldr	r3, [pc, #356]	; (800a9bc <pvPortMalloc+0x184>)
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4013      	ands	r3, r2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f040 8093 	bne.w	800a988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d01d      	beq.n	800a8a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a868:	2208      	movs	r2, #8
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4413      	add	r3, r2
 800a86e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f003 0307 	and.w	r3, r3, #7
 800a876:	2b00      	cmp	r3, #0
 800a878:	d014      	beq.n	800a8a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f023 0307 	bic.w	r3, r3, #7
 800a880:	3308      	adds	r3, #8
 800a882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f003 0307 	and.w	r3, r3, #7
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00a      	beq.n	800a8a4 <pvPortMalloc+0x6c>
	__asm volatile
 800a88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	617b      	str	r3, [r7, #20]
}
 800a8a0:	bf00      	nop
 800a8a2:	e7fe      	b.n	800a8a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d06e      	beq.n	800a988 <pvPortMalloc+0x150>
 800a8aa:	4b45      	ldr	r3, [pc, #276]	; (800a9c0 <pvPortMalloc+0x188>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d869      	bhi.n	800a988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a8b4:	4b43      	ldr	r3, [pc, #268]	; (800a9c4 <pvPortMalloc+0x18c>)
 800a8b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a8b8:	4b42      	ldr	r3, [pc, #264]	; (800a9c4 <pvPortMalloc+0x18c>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8be:	e004      	b.n	800a8ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d903      	bls.n	800a8dc <pvPortMalloc+0xa4>
 800a8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d1f1      	bne.n	800a8c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a8dc:	4b36      	ldr	r3, [pc, #216]	; (800a9b8 <pvPortMalloc+0x180>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d050      	beq.n	800a988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a8e6:	6a3b      	ldr	r3, [r7, #32]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2208      	movs	r2, #8
 800a8ec:	4413      	add	r3, r2
 800a8ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	6a3b      	ldr	r3, [r7, #32]
 800a8f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	1ad2      	subs	r2, r2, r3
 800a900:	2308      	movs	r3, #8
 800a902:	005b      	lsls	r3, r3, #1
 800a904:	429a      	cmp	r2, r3
 800a906:	d91f      	bls.n	800a948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4413      	add	r3, r2
 800a90e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a910:	69bb      	ldr	r3, [r7, #24]
 800a912:	f003 0307 	and.w	r3, r3, #7
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00a      	beq.n	800a930 <pvPortMalloc+0xf8>
	__asm volatile
 800a91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91e:	f383 8811 	msr	BASEPRI, r3
 800a922:	f3bf 8f6f 	isb	sy
 800a926:	f3bf 8f4f 	dsb	sy
 800a92a:	613b      	str	r3, [r7, #16]
}
 800a92c:	bf00      	nop
 800a92e:	e7fe      	b.n	800a92e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	1ad2      	subs	r2, r2, r3
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a942:	69b8      	ldr	r0, [r7, #24]
 800a944:	f000 f908 	bl	800ab58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a948:	4b1d      	ldr	r3, [pc, #116]	; (800a9c0 <pvPortMalloc+0x188>)
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	4a1b      	ldr	r2, [pc, #108]	; (800a9c0 <pvPortMalloc+0x188>)
 800a954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a956:	4b1a      	ldr	r3, [pc, #104]	; (800a9c0 <pvPortMalloc+0x188>)
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	4b1b      	ldr	r3, [pc, #108]	; (800a9c8 <pvPortMalloc+0x190>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d203      	bcs.n	800a96a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a962:	4b17      	ldr	r3, [pc, #92]	; (800a9c0 <pvPortMalloc+0x188>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a18      	ldr	r2, [pc, #96]	; (800a9c8 <pvPortMalloc+0x190>)
 800a968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96c:	685a      	ldr	r2, [r3, #4]
 800a96e:	4b13      	ldr	r3, [pc, #76]	; (800a9bc <pvPortMalloc+0x184>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	431a      	orrs	r2, r3
 800a974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97a:	2200      	movs	r2, #0
 800a97c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a97e:	4b13      	ldr	r3, [pc, #76]	; (800a9cc <pvPortMalloc+0x194>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	3301      	adds	r3, #1
 800a984:	4a11      	ldr	r2, [pc, #68]	; (800a9cc <pvPortMalloc+0x194>)
 800a986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a988:	f7fe fcfe 	bl	8009388 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	f003 0307 	and.w	r3, r3, #7
 800a992:	2b00      	cmp	r3, #0
 800a994:	d00a      	beq.n	800a9ac <pvPortMalloc+0x174>
	__asm volatile
 800a996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99a:	f383 8811 	msr	BASEPRI, r3
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	60fb      	str	r3, [r7, #12]
}
 800a9a8:	bf00      	nop
 800a9aa:	e7fe      	b.n	800a9aa <pvPortMalloc+0x172>
	return pvReturn;
 800a9ac:	69fb      	ldr	r3, [r7, #28]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3728      	adds	r7, #40	; 0x28
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	20005640 	.word	0x20005640
 800a9bc:	20005654 	.word	0x20005654
 800a9c0:	20005644 	.word	0x20005644
 800a9c4:	20005638 	.word	0x20005638
 800a9c8:	20005648 	.word	0x20005648
 800a9cc:	2000564c 	.word	0x2000564c

0800a9d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d04d      	beq.n	800aa7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a9e2:	2308      	movs	r3, #8
 800a9e4:	425b      	negs	r3, r3
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	685a      	ldr	r2, [r3, #4]
 800a9f4:	4b24      	ldr	r3, [pc, #144]	; (800aa88 <vPortFree+0xb8>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d10a      	bne.n	800aa14 <vPortFree+0x44>
	__asm volatile
 800a9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	60fb      	str	r3, [r7, #12]
}
 800aa10:	bf00      	nop
 800aa12:	e7fe      	b.n	800aa12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00a      	beq.n	800aa32 <vPortFree+0x62>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	60bb      	str	r3, [r7, #8]
}
 800aa2e:	bf00      	nop
 800aa30:	e7fe      	b.n	800aa30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	685a      	ldr	r2, [r3, #4]
 800aa36:	4b14      	ldr	r3, [pc, #80]	; (800aa88 <vPortFree+0xb8>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d01e      	beq.n	800aa7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d11a      	bne.n	800aa7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	685a      	ldr	r2, [r3, #4]
 800aa4c:	4b0e      	ldr	r3, [pc, #56]	; (800aa88 <vPortFree+0xb8>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	43db      	mvns	r3, r3
 800aa52:	401a      	ands	r2, r3
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa58:	f7fe fc88 	bl	800936c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	685a      	ldr	r2, [r3, #4]
 800aa60:	4b0a      	ldr	r3, [pc, #40]	; (800aa8c <vPortFree+0xbc>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4413      	add	r3, r2
 800aa66:	4a09      	ldr	r2, [pc, #36]	; (800aa8c <vPortFree+0xbc>)
 800aa68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa6a:	6938      	ldr	r0, [r7, #16]
 800aa6c:	f000 f874 	bl	800ab58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aa70:	4b07      	ldr	r3, [pc, #28]	; (800aa90 <vPortFree+0xc0>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	3301      	adds	r3, #1
 800aa76:	4a06      	ldr	r2, [pc, #24]	; (800aa90 <vPortFree+0xc0>)
 800aa78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aa7a:	f7fe fc85 	bl	8009388 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa7e:	bf00      	nop
 800aa80:	3718      	adds	r7, #24
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20005654 	.word	0x20005654
 800aa8c:	20005644 	.word	0x20005644
 800aa90:	20005650 	.word	0x20005650

0800aa94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aa9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800aa9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aaa0:	4b27      	ldr	r3, [pc, #156]	; (800ab40 <prvHeapInit+0xac>)
 800aaa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f003 0307 	and.w	r3, r3, #7
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00c      	beq.n	800aac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	3307      	adds	r3, #7
 800aab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f023 0307 	bic.w	r3, r3, #7
 800aaba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	4a1f      	ldr	r2, [pc, #124]	; (800ab40 <prvHeapInit+0xac>)
 800aac4:	4413      	add	r3, r2
 800aac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aacc:	4a1d      	ldr	r2, [pc, #116]	; (800ab44 <prvHeapInit+0xb0>)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aad2:	4b1c      	ldr	r3, [pc, #112]	; (800ab44 <prvHeapInit+0xb0>)
 800aad4:	2200      	movs	r2, #0
 800aad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	4413      	add	r3, r2
 800aade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aae0:	2208      	movs	r2, #8
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	1a9b      	subs	r3, r3, r2
 800aae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f023 0307 	bic.w	r3, r3, #7
 800aaee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	4a15      	ldr	r2, [pc, #84]	; (800ab48 <prvHeapInit+0xb4>)
 800aaf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aaf6:	4b14      	ldr	r3, [pc, #80]	; (800ab48 <prvHeapInit+0xb4>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2200      	movs	r2, #0
 800aafc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aafe:	4b12      	ldr	r3, [pc, #72]	; (800ab48 <prvHeapInit+0xb4>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2200      	movs	r2, #0
 800ab04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	1ad2      	subs	r2, r2, r3
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab14:	4b0c      	ldr	r3, [pc, #48]	; (800ab48 <prvHeapInit+0xb4>)
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	4a0a      	ldr	r2, [pc, #40]	; (800ab4c <prvHeapInit+0xb8>)
 800ab22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	4a09      	ldr	r2, [pc, #36]	; (800ab50 <prvHeapInit+0xbc>)
 800ab2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab2c:	4b09      	ldr	r3, [pc, #36]	; (800ab54 <prvHeapInit+0xc0>)
 800ab2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ab32:	601a      	str	r2, [r3, #0]
}
 800ab34:	bf00      	nop
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	20001a38 	.word	0x20001a38
 800ab44:	20005638 	.word	0x20005638
 800ab48:	20005640 	.word	0x20005640
 800ab4c:	20005648 	.word	0x20005648
 800ab50:	20005644 	.word	0x20005644
 800ab54:	20005654 	.word	0x20005654

0800ab58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab60:	4b28      	ldr	r3, [pc, #160]	; (800ac04 <prvInsertBlockIntoFreeList+0xac>)
 800ab62:	60fb      	str	r3, [r7, #12]
 800ab64:	e002      	b.n	800ab6c <prvInsertBlockIntoFreeList+0x14>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	60fb      	str	r3, [r7, #12]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d8f7      	bhi.n	800ab66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	68ba      	ldr	r2, [r7, #8]
 800ab80:	4413      	add	r3, r2
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d108      	bne.n	800ab9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	441a      	add	r2, r3
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	441a      	add	r2, r3
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d118      	bne.n	800abe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	4b15      	ldr	r3, [pc, #84]	; (800ac08 <prvInsertBlockIntoFreeList+0xb0>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d00d      	beq.n	800abd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	685a      	ldr	r2, [r3, #4]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	441a      	add	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	601a      	str	r2, [r3, #0]
 800abd4:	e008      	b.n	800abe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800abd6:	4b0c      	ldr	r3, [pc, #48]	; (800ac08 <prvInsertBlockIntoFreeList+0xb0>)
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	601a      	str	r2, [r3, #0]
 800abde:	e003      	b.n	800abe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	429a      	cmp	r2, r3
 800abee:	d002      	beq.n	800abf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abf6:	bf00      	nop
 800abf8:	3714      	adds	r7, #20
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop
 800ac04:	20005638 	.word	0x20005638
 800ac08:	20005640 	.word	0x20005640

0800ac0c <__errno>:
 800ac0c:	4b01      	ldr	r3, [pc, #4]	; (800ac14 <__errno+0x8>)
 800ac0e:	6818      	ldr	r0, [r3, #0]
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	20000030 	.word	0x20000030

0800ac18 <std>:
 800ac18:	2300      	movs	r3, #0
 800ac1a:	b510      	push	{r4, lr}
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	e9c0 3300 	strd	r3, r3, [r0]
 800ac22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac26:	6083      	str	r3, [r0, #8]
 800ac28:	8181      	strh	r1, [r0, #12]
 800ac2a:	6643      	str	r3, [r0, #100]	; 0x64
 800ac2c:	81c2      	strh	r2, [r0, #14]
 800ac2e:	6183      	str	r3, [r0, #24]
 800ac30:	4619      	mov	r1, r3
 800ac32:	2208      	movs	r2, #8
 800ac34:	305c      	adds	r0, #92	; 0x5c
 800ac36:	f000 f91a 	bl	800ae6e <memset>
 800ac3a:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <std+0x38>)
 800ac3c:	6263      	str	r3, [r4, #36]	; 0x24
 800ac3e:	4b05      	ldr	r3, [pc, #20]	; (800ac54 <std+0x3c>)
 800ac40:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac42:	4b05      	ldr	r3, [pc, #20]	; (800ac58 <std+0x40>)
 800ac44:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac46:	4b05      	ldr	r3, [pc, #20]	; (800ac5c <std+0x44>)
 800ac48:	6224      	str	r4, [r4, #32]
 800ac4a:	6323      	str	r3, [r4, #48]	; 0x30
 800ac4c:	bd10      	pop	{r4, pc}
 800ac4e:	bf00      	nop
 800ac50:	0800b971 	.word	0x0800b971
 800ac54:	0800b993 	.word	0x0800b993
 800ac58:	0800b9cb 	.word	0x0800b9cb
 800ac5c:	0800b9ef 	.word	0x0800b9ef

0800ac60 <_cleanup_r>:
 800ac60:	4901      	ldr	r1, [pc, #4]	; (800ac68 <_cleanup_r+0x8>)
 800ac62:	f000 b8af 	b.w	800adc4 <_fwalk_reent>
 800ac66:	bf00      	nop
 800ac68:	0800c881 	.word	0x0800c881

0800ac6c <__sfmoreglue>:
 800ac6c:	b570      	push	{r4, r5, r6, lr}
 800ac6e:	2268      	movs	r2, #104	; 0x68
 800ac70:	1e4d      	subs	r5, r1, #1
 800ac72:	4355      	muls	r5, r2
 800ac74:	460e      	mov	r6, r1
 800ac76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac7a:	f000 f921 	bl	800aec0 <_malloc_r>
 800ac7e:	4604      	mov	r4, r0
 800ac80:	b140      	cbz	r0, 800ac94 <__sfmoreglue+0x28>
 800ac82:	2100      	movs	r1, #0
 800ac84:	e9c0 1600 	strd	r1, r6, [r0]
 800ac88:	300c      	adds	r0, #12
 800ac8a:	60a0      	str	r0, [r4, #8]
 800ac8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac90:	f000 f8ed 	bl	800ae6e <memset>
 800ac94:	4620      	mov	r0, r4
 800ac96:	bd70      	pop	{r4, r5, r6, pc}

0800ac98 <__sfp_lock_acquire>:
 800ac98:	4801      	ldr	r0, [pc, #4]	; (800aca0 <__sfp_lock_acquire+0x8>)
 800ac9a:	f000 b8d8 	b.w	800ae4e <__retarget_lock_acquire_recursive>
 800ac9e:	bf00      	nop
 800aca0:	20005659 	.word	0x20005659

0800aca4 <__sfp_lock_release>:
 800aca4:	4801      	ldr	r0, [pc, #4]	; (800acac <__sfp_lock_release+0x8>)
 800aca6:	f000 b8d3 	b.w	800ae50 <__retarget_lock_release_recursive>
 800acaa:	bf00      	nop
 800acac:	20005659 	.word	0x20005659

0800acb0 <__sinit_lock_acquire>:
 800acb0:	4801      	ldr	r0, [pc, #4]	; (800acb8 <__sinit_lock_acquire+0x8>)
 800acb2:	f000 b8cc 	b.w	800ae4e <__retarget_lock_acquire_recursive>
 800acb6:	bf00      	nop
 800acb8:	2000565a 	.word	0x2000565a

0800acbc <__sinit_lock_release>:
 800acbc:	4801      	ldr	r0, [pc, #4]	; (800acc4 <__sinit_lock_release+0x8>)
 800acbe:	f000 b8c7 	b.w	800ae50 <__retarget_lock_release_recursive>
 800acc2:	bf00      	nop
 800acc4:	2000565a 	.word	0x2000565a

0800acc8 <__sinit>:
 800acc8:	b510      	push	{r4, lr}
 800acca:	4604      	mov	r4, r0
 800accc:	f7ff fff0 	bl	800acb0 <__sinit_lock_acquire>
 800acd0:	69a3      	ldr	r3, [r4, #24]
 800acd2:	b11b      	cbz	r3, 800acdc <__sinit+0x14>
 800acd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acd8:	f7ff bff0 	b.w	800acbc <__sinit_lock_release>
 800acdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ace0:	6523      	str	r3, [r4, #80]	; 0x50
 800ace2:	4b13      	ldr	r3, [pc, #76]	; (800ad30 <__sinit+0x68>)
 800ace4:	4a13      	ldr	r2, [pc, #76]	; (800ad34 <__sinit+0x6c>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	62a2      	str	r2, [r4, #40]	; 0x28
 800acea:	42a3      	cmp	r3, r4
 800acec:	bf04      	itt	eq
 800acee:	2301      	moveq	r3, #1
 800acf0:	61a3      	streq	r3, [r4, #24]
 800acf2:	4620      	mov	r0, r4
 800acf4:	f000 f820 	bl	800ad38 <__sfp>
 800acf8:	6060      	str	r0, [r4, #4]
 800acfa:	4620      	mov	r0, r4
 800acfc:	f000 f81c 	bl	800ad38 <__sfp>
 800ad00:	60a0      	str	r0, [r4, #8]
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 f818 	bl	800ad38 <__sfp>
 800ad08:	2200      	movs	r2, #0
 800ad0a:	60e0      	str	r0, [r4, #12]
 800ad0c:	2104      	movs	r1, #4
 800ad0e:	6860      	ldr	r0, [r4, #4]
 800ad10:	f7ff ff82 	bl	800ac18 <std>
 800ad14:	68a0      	ldr	r0, [r4, #8]
 800ad16:	2201      	movs	r2, #1
 800ad18:	2109      	movs	r1, #9
 800ad1a:	f7ff ff7d 	bl	800ac18 <std>
 800ad1e:	68e0      	ldr	r0, [r4, #12]
 800ad20:	2202      	movs	r2, #2
 800ad22:	2112      	movs	r1, #18
 800ad24:	f7ff ff78 	bl	800ac18 <std>
 800ad28:	2301      	movs	r3, #1
 800ad2a:	61a3      	str	r3, [r4, #24]
 800ad2c:	e7d2      	b.n	800acd4 <__sinit+0xc>
 800ad2e:	bf00      	nop
 800ad30:	0800dc28 	.word	0x0800dc28
 800ad34:	0800ac61 	.word	0x0800ac61

0800ad38 <__sfp>:
 800ad38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad3a:	4607      	mov	r7, r0
 800ad3c:	f7ff ffac 	bl	800ac98 <__sfp_lock_acquire>
 800ad40:	4b1e      	ldr	r3, [pc, #120]	; (800adbc <__sfp+0x84>)
 800ad42:	681e      	ldr	r6, [r3, #0]
 800ad44:	69b3      	ldr	r3, [r6, #24]
 800ad46:	b913      	cbnz	r3, 800ad4e <__sfp+0x16>
 800ad48:	4630      	mov	r0, r6
 800ad4a:	f7ff ffbd 	bl	800acc8 <__sinit>
 800ad4e:	3648      	adds	r6, #72	; 0x48
 800ad50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad54:	3b01      	subs	r3, #1
 800ad56:	d503      	bpl.n	800ad60 <__sfp+0x28>
 800ad58:	6833      	ldr	r3, [r6, #0]
 800ad5a:	b30b      	cbz	r3, 800ada0 <__sfp+0x68>
 800ad5c:	6836      	ldr	r6, [r6, #0]
 800ad5e:	e7f7      	b.n	800ad50 <__sfp+0x18>
 800ad60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad64:	b9d5      	cbnz	r5, 800ad9c <__sfp+0x64>
 800ad66:	4b16      	ldr	r3, [pc, #88]	; (800adc0 <__sfp+0x88>)
 800ad68:	60e3      	str	r3, [r4, #12]
 800ad6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad6e:	6665      	str	r5, [r4, #100]	; 0x64
 800ad70:	f000 f86c 	bl	800ae4c <__retarget_lock_init_recursive>
 800ad74:	f7ff ff96 	bl	800aca4 <__sfp_lock_release>
 800ad78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad80:	6025      	str	r5, [r4, #0]
 800ad82:	61a5      	str	r5, [r4, #24]
 800ad84:	2208      	movs	r2, #8
 800ad86:	4629      	mov	r1, r5
 800ad88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad8c:	f000 f86f 	bl	800ae6e <memset>
 800ad90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad98:	4620      	mov	r0, r4
 800ad9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad9c:	3468      	adds	r4, #104	; 0x68
 800ad9e:	e7d9      	b.n	800ad54 <__sfp+0x1c>
 800ada0:	2104      	movs	r1, #4
 800ada2:	4638      	mov	r0, r7
 800ada4:	f7ff ff62 	bl	800ac6c <__sfmoreglue>
 800ada8:	4604      	mov	r4, r0
 800adaa:	6030      	str	r0, [r6, #0]
 800adac:	2800      	cmp	r0, #0
 800adae:	d1d5      	bne.n	800ad5c <__sfp+0x24>
 800adb0:	f7ff ff78 	bl	800aca4 <__sfp_lock_release>
 800adb4:	230c      	movs	r3, #12
 800adb6:	603b      	str	r3, [r7, #0]
 800adb8:	e7ee      	b.n	800ad98 <__sfp+0x60>
 800adba:	bf00      	nop
 800adbc:	0800dc28 	.word	0x0800dc28
 800adc0:	ffff0001 	.word	0xffff0001

0800adc4 <_fwalk_reent>:
 800adc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc8:	4606      	mov	r6, r0
 800adca:	4688      	mov	r8, r1
 800adcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800add0:	2700      	movs	r7, #0
 800add2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800add6:	f1b9 0901 	subs.w	r9, r9, #1
 800adda:	d505      	bpl.n	800ade8 <_fwalk_reent+0x24>
 800addc:	6824      	ldr	r4, [r4, #0]
 800adde:	2c00      	cmp	r4, #0
 800ade0:	d1f7      	bne.n	800add2 <_fwalk_reent+0xe>
 800ade2:	4638      	mov	r0, r7
 800ade4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ade8:	89ab      	ldrh	r3, [r5, #12]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d907      	bls.n	800adfe <_fwalk_reent+0x3a>
 800adee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adf2:	3301      	adds	r3, #1
 800adf4:	d003      	beq.n	800adfe <_fwalk_reent+0x3a>
 800adf6:	4629      	mov	r1, r5
 800adf8:	4630      	mov	r0, r6
 800adfa:	47c0      	blx	r8
 800adfc:	4307      	orrs	r7, r0
 800adfe:	3568      	adds	r5, #104	; 0x68
 800ae00:	e7e9      	b.n	800add6 <_fwalk_reent+0x12>
	...

0800ae04 <__libc_init_array>:
 800ae04:	b570      	push	{r4, r5, r6, lr}
 800ae06:	4d0d      	ldr	r5, [pc, #52]	; (800ae3c <__libc_init_array+0x38>)
 800ae08:	4c0d      	ldr	r4, [pc, #52]	; (800ae40 <__libc_init_array+0x3c>)
 800ae0a:	1b64      	subs	r4, r4, r5
 800ae0c:	10a4      	asrs	r4, r4, #2
 800ae0e:	2600      	movs	r6, #0
 800ae10:	42a6      	cmp	r6, r4
 800ae12:	d109      	bne.n	800ae28 <__libc_init_array+0x24>
 800ae14:	4d0b      	ldr	r5, [pc, #44]	; (800ae44 <__libc_init_array+0x40>)
 800ae16:	4c0c      	ldr	r4, [pc, #48]	; (800ae48 <__libc_init_array+0x44>)
 800ae18:	f002 fe78 	bl	800db0c <_init>
 800ae1c:	1b64      	subs	r4, r4, r5
 800ae1e:	10a4      	asrs	r4, r4, #2
 800ae20:	2600      	movs	r6, #0
 800ae22:	42a6      	cmp	r6, r4
 800ae24:	d105      	bne.n	800ae32 <__libc_init_array+0x2e>
 800ae26:	bd70      	pop	{r4, r5, r6, pc}
 800ae28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae2c:	4798      	blx	r3
 800ae2e:	3601      	adds	r6, #1
 800ae30:	e7ee      	b.n	800ae10 <__libc_init_array+0xc>
 800ae32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae36:	4798      	blx	r3
 800ae38:	3601      	adds	r6, #1
 800ae3a:	e7f2      	b.n	800ae22 <__libc_init_array+0x1e>
 800ae3c:	0800dfac 	.word	0x0800dfac
 800ae40:	0800dfac 	.word	0x0800dfac
 800ae44:	0800dfac 	.word	0x0800dfac
 800ae48:	0800dfb0 	.word	0x0800dfb0

0800ae4c <__retarget_lock_init_recursive>:
 800ae4c:	4770      	bx	lr

0800ae4e <__retarget_lock_acquire_recursive>:
 800ae4e:	4770      	bx	lr

0800ae50 <__retarget_lock_release_recursive>:
 800ae50:	4770      	bx	lr

0800ae52 <memcpy>:
 800ae52:	440a      	add	r2, r1
 800ae54:	4291      	cmp	r1, r2
 800ae56:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae5a:	d100      	bne.n	800ae5e <memcpy+0xc>
 800ae5c:	4770      	bx	lr
 800ae5e:	b510      	push	{r4, lr}
 800ae60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae64:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae68:	4291      	cmp	r1, r2
 800ae6a:	d1f9      	bne.n	800ae60 <memcpy+0xe>
 800ae6c:	bd10      	pop	{r4, pc}

0800ae6e <memset>:
 800ae6e:	4402      	add	r2, r0
 800ae70:	4603      	mov	r3, r0
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d100      	bne.n	800ae78 <memset+0xa>
 800ae76:	4770      	bx	lr
 800ae78:	f803 1b01 	strb.w	r1, [r3], #1
 800ae7c:	e7f9      	b.n	800ae72 <memset+0x4>
	...

0800ae80 <sbrk_aligned>:
 800ae80:	b570      	push	{r4, r5, r6, lr}
 800ae82:	4e0e      	ldr	r6, [pc, #56]	; (800aebc <sbrk_aligned+0x3c>)
 800ae84:	460c      	mov	r4, r1
 800ae86:	6831      	ldr	r1, [r6, #0]
 800ae88:	4605      	mov	r5, r0
 800ae8a:	b911      	cbnz	r1, 800ae92 <sbrk_aligned+0x12>
 800ae8c:	f000 fd60 	bl	800b950 <_sbrk_r>
 800ae90:	6030      	str	r0, [r6, #0]
 800ae92:	4621      	mov	r1, r4
 800ae94:	4628      	mov	r0, r5
 800ae96:	f000 fd5b 	bl	800b950 <_sbrk_r>
 800ae9a:	1c43      	adds	r3, r0, #1
 800ae9c:	d00a      	beq.n	800aeb4 <sbrk_aligned+0x34>
 800ae9e:	1cc4      	adds	r4, r0, #3
 800aea0:	f024 0403 	bic.w	r4, r4, #3
 800aea4:	42a0      	cmp	r0, r4
 800aea6:	d007      	beq.n	800aeb8 <sbrk_aligned+0x38>
 800aea8:	1a21      	subs	r1, r4, r0
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f000 fd50 	bl	800b950 <_sbrk_r>
 800aeb0:	3001      	adds	r0, #1
 800aeb2:	d101      	bne.n	800aeb8 <sbrk_aligned+0x38>
 800aeb4:	f04f 34ff 	mov.w	r4, #4294967295
 800aeb8:	4620      	mov	r0, r4
 800aeba:	bd70      	pop	{r4, r5, r6, pc}
 800aebc:	20005660 	.word	0x20005660

0800aec0 <_malloc_r>:
 800aec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec4:	1ccd      	adds	r5, r1, #3
 800aec6:	f025 0503 	bic.w	r5, r5, #3
 800aeca:	3508      	adds	r5, #8
 800aecc:	2d0c      	cmp	r5, #12
 800aece:	bf38      	it	cc
 800aed0:	250c      	movcc	r5, #12
 800aed2:	2d00      	cmp	r5, #0
 800aed4:	4607      	mov	r7, r0
 800aed6:	db01      	blt.n	800aedc <_malloc_r+0x1c>
 800aed8:	42a9      	cmp	r1, r5
 800aeda:	d905      	bls.n	800aee8 <_malloc_r+0x28>
 800aedc:	230c      	movs	r3, #12
 800aede:	603b      	str	r3, [r7, #0]
 800aee0:	2600      	movs	r6, #0
 800aee2:	4630      	mov	r0, r6
 800aee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aee8:	4e2e      	ldr	r6, [pc, #184]	; (800afa4 <_malloc_r+0xe4>)
 800aeea:	f001 fd23 	bl	800c934 <__malloc_lock>
 800aeee:	6833      	ldr	r3, [r6, #0]
 800aef0:	461c      	mov	r4, r3
 800aef2:	bb34      	cbnz	r4, 800af42 <_malloc_r+0x82>
 800aef4:	4629      	mov	r1, r5
 800aef6:	4638      	mov	r0, r7
 800aef8:	f7ff ffc2 	bl	800ae80 <sbrk_aligned>
 800aefc:	1c43      	adds	r3, r0, #1
 800aefe:	4604      	mov	r4, r0
 800af00:	d14d      	bne.n	800af9e <_malloc_r+0xde>
 800af02:	6834      	ldr	r4, [r6, #0]
 800af04:	4626      	mov	r6, r4
 800af06:	2e00      	cmp	r6, #0
 800af08:	d140      	bne.n	800af8c <_malloc_r+0xcc>
 800af0a:	6823      	ldr	r3, [r4, #0]
 800af0c:	4631      	mov	r1, r6
 800af0e:	4638      	mov	r0, r7
 800af10:	eb04 0803 	add.w	r8, r4, r3
 800af14:	f000 fd1c 	bl	800b950 <_sbrk_r>
 800af18:	4580      	cmp	r8, r0
 800af1a:	d13a      	bne.n	800af92 <_malloc_r+0xd2>
 800af1c:	6821      	ldr	r1, [r4, #0]
 800af1e:	3503      	adds	r5, #3
 800af20:	1a6d      	subs	r5, r5, r1
 800af22:	f025 0503 	bic.w	r5, r5, #3
 800af26:	3508      	adds	r5, #8
 800af28:	2d0c      	cmp	r5, #12
 800af2a:	bf38      	it	cc
 800af2c:	250c      	movcc	r5, #12
 800af2e:	4629      	mov	r1, r5
 800af30:	4638      	mov	r0, r7
 800af32:	f7ff ffa5 	bl	800ae80 <sbrk_aligned>
 800af36:	3001      	adds	r0, #1
 800af38:	d02b      	beq.n	800af92 <_malloc_r+0xd2>
 800af3a:	6823      	ldr	r3, [r4, #0]
 800af3c:	442b      	add	r3, r5
 800af3e:	6023      	str	r3, [r4, #0]
 800af40:	e00e      	b.n	800af60 <_malloc_r+0xa0>
 800af42:	6822      	ldr	r2, [r4, #0]
 800af44:	1b52      	subs	r2, r2, r5
 800af46:	d41e      	bmi.n	800af86 <_malloc_r+0xc6>
 800af48:	2a0b      	cmp	r2, #11
 800af4a:	d916      	bls.n	800af7a <_malloc_r+0xba>
 800af4c:	1961      	adds	r1, r4, r5
 800af4e:	42a3      	cmp	r3, r4
 800af50:	6025      	str	r5, [r4, #0]
 800af52:	bf18      	it	ne
 800af54:	6059      	strne	r1, [r3, #4]
 800af56:	6863      	ldr	r3, [r4, #4]
 800af58:	bf08      	it	eq
 800af5a:	6031      	streq	r1, [r6, #0]
 800af5c:	5162      	str	r2, [r4, r5]
 800af5e:	604b      	str	r3, [r1, #4]
 800af60:	4638      	mov	r0, r7
 800af62:	f104 060b 	add.w	r6, r4, #11
 800af66:	f001 fceb 	bl	800c940 <__malloc_unlock>
 800af6a:	f026 0607 	bic.w	r6, r6, #7
 800af6e:	1d23      	adds	r3, r4, #4
 800af70:	1af2      	subs	r2, r6, r3
 800af72:	d0b6      	beq.n	800aee2 <_malloc_r+0x22>
 800af74:	1b9b      	subs	r3, r3, r6
 800af76:	50a3      	str	r3, [r4, r2]
 800af78:	e7b3      	b.n	800aee2 <_malloc_r+0x22>
 800af7a:	6862      	ldr	r2, [r4, #4]
 800af7c:	42a3      	cmp	r3, r4
 800af7e:	bf0c      	ite	eq
 800af80:	6032      	streq	r2, [r6, #0]
 800af82:	605a      	strne	r2, [r3, #4]
 800af84:	e7ec      	b.n	800af60 <_malloc_r+0xa0>
 800af86:	4623      	mov	r3, r4
 800af88:	6864      	ldr	r4, [r4, #4]
 800af8a:	e7b2      	b.n	800aef2 <_malloc_r+0x32>
 800af8c:	4634      	mov	r4, r6
 800af8e:	6876      	ldr	r6, [r6, #4]
 800af90:	e7b9      	b.n	800af06 <_malloc_r+0x46>
 800af92:	230c      	movs	r3, #12
 800af94:	603b      	str	r3, [r7, #0]
 800af96:	4638      	mov	r0, r7
 800af98:	f001 fcd2 	bl	800c940 <__malloc_unlock>
 800af9c:	e7a1      	b.n	800aee2 <_malloc_r+0x22>
 800af9e:	6025      	str	r5, [r4, #0]
 800afa0:	e7de      	b.n	800af60 <_malloc_r+0xa0>
 800afa2:	bf00      	nop
 800afa4:	2000565c 	.word	0x2000565c

0800afa8 <__cvt>:
 800afa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afac:	ec55 4b10 	vmov	r4, r5, d0
 800afb0:	2d00      	cmp	r5, #0
 800afb2:	460e      	mov	r6, r1
 800afb4:	4619      	mov	r1, r3
 800afb6:	462b      	mov	r3, r5
 800afb8:	bfbb      	ittet	lt
 800afba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800afbe:	461d      	movlt	r5, r3
 800afc0:	2300      	movge	r3, #0
 800afc2:	232d      	movlt	r3, #45	; 0x2d
 800afc4:	700b      	strb	r3, [r1, #0]
 800afc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800afcc:	4691      	mov	r9, r2
 800afce:	f023 0820 	bic.w	r8, r3, #32
 800afd2:	bfbc      	itt	lt
 800afd4:	4622      	movlt	r2, r4
 800afd6:	4614      	movlt	r4, r2
 800afd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800afdc:	d005      	beq.n	800afea <__cvt+0x42>
 800afde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800afe2:	d100      	bne.n	800afe6 <__cvt+0x3e>
 800afe4:	3601      	adds	r6, #1
 800afe6:	2102      	movs	r1, #2
 800afe8:	e000      	b.n	800afec <__cvt+0x44>
 800afea:	2103      	movs	r1, #3
 800afec:	ab03      	add	r3, sp, #12
 800afee:	9301      	str	r3, [sp, #4]
 800aff0:	ab02      	add	r3, sp, #8
 800aff2:	9300      	str	r3, [sp, #0]
 800aff4:	ec45 4b10 	vmov	d0, r4, r5
 800aff8:	4653      	mov	r3, sl
 800affa:	4632      	mov	r2, r6
 800affc:	f000 fdcc 	bl	800bb98 <_dtoa_r>
 800b000:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b004:	4607      	mov	r7, r0
 800b006:	d102      	bne.n	800b00e <__cvt+0x66>
 800b008:	f019 0f01 	tst.w	r9, #1
 800b00c:	d022      	beq.n	800b054 <__cvt+0xac>
 800b00e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b012:	eb07 0906 	add.w	r9, r7, r6
 800b016:	d110      	bne.n	800b03a <__cvt+0x92>
 800b018:	783b      	ldrb	r3, [r7, #0]
 800b01a:	2b30      	cmp	r3, #48	; 0x30
 800b01c:	d10a      	bne.n	800b034 <__cvt+0x8c>
 800b01e:	2200      	movs	r2, #0
 800b020:	2300      	movs	r3, #0
 800b022:	4620      	mov	r0, r4
 800b024:	4629      	mov	r1, r5
 800b026:	f7f5 fd4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b02a:	b918      	cbnz	r0, 800b034 <__cvt+0x8c>
 800b02c:	f1c6 0601 	rsb	r6, r6, #1
 800b030:	f8ca 6000 	str.w	r6, [sl]
 800b034:	f8da 3000 	ldr.w	r3, [sl]
 800b038:	4499      	add	r9, r3
 800b03a:	2200      	movs	r2, #0
 800b03c:	2300      	movs	r3, #0
 800b03e:	4620      	mov	r0, r4
 800b040:	4629      	mov	r1, r5
 800b042:	f7f5 fd41 	bl	8000ac8 <__aeabi_dcmpeq>
 800b046:	b108      	cbz	r0, 800b04c <__cvt+0xa4>
 800b048:	f8cd 900c 	str.w	r9, [sp, #12]
 800b04c:	2230      	movs	r2, #48	; 0x30
 800b04e:	9b03      	ldr	r3, [sp, #12]
 800b050:	454b      	cmp	r3, r9
 800b052:	d307      	bcc.n	800b064 <__cvt+0xbc>
 800b054:	9b03      	ldr	r3, [sp, #12]
 800b056:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b058:	1bdb      	subs	r3, r3, r7
 800b05a:	4638      	mov	r0, r7
 800b05c:	6013      	str	r3, [r2, #0]
 800b05e:	b004      	add	sp, #16
 800b060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b064:	1c59      	adds	r1, r3, #1
 800b066:	9103      	str	r1, [sp, #12]
 800b068:	701a      	strb	r2, [r3, #0]
 800b06a:	e7f0      	b.n	800b04e <__cvt+0xa6>

0800b06c <__exponent>:
 800b06c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b06e:	4603      	mov	r3, r0
 800b070:	2900      	cmp	r1, #0
 800b072:	bfb8      	it	lt
 800b074:	4249      	neglt	r1, r1
 800b076:	f803 2b02 	strb.w	r2, [r3], #2
 800b07a:	bfb4      	ite	lt
 800b07c:	222d      	movlt	r2, #45	; 0x2d
 800b07e:	222b      	movge	r2, #43	; 0x2b
 800b080:	2909      	cmp	r1, #9
 800b082:	7042      	strb	r2, [r0, #1]
 800b084:	dd2a      	ble.n	800b0dc <__exponent+0x70>
 800b086:	f10d 0407 	add.w	r4, sp, #7
 800b08a:	46a4      	mov	ip, r4
 800b08c:	270a      	movs	r7, #10
 800b08e:	46a6      	mov	lr, r4
 800b090:	460a      	mov	r2, r1
 800b092:	fb91 f6f7 	sdiv	r6, r1, r7
 800b096:	fb07 1516 	mls	r5, r7, r6, r1
 800b09a:	3530      	adds	r5, #48	; 0x30
 800b09c:	2a63      	cmp	r2, #99	; 0x63
 800b09e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b0a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b0a6:	4631      	mov	r1, r6
 800b0a8:	dcf1      	bgt.n	800b08e <__exponent+0x22>
 800b0aa:	3130      	adds	r1, #48	; 0x30
 800b0ac:	f1ae 0502 	sub.w	r5, lr, #2
 800b0b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b0b4:	1c44      	adds	r4, r0, #1
 800b0b6:	4629      	mov	r1, r5
 800b0b8:	4561      	cmp	r1, ip
 800b0ba:	d30a      	bcc.n	800b0d2 <__exponent+0x66>
 800b0bc:	f10d 0209 	add.w	r2, sp, #9
 800b0c0:	eba2 020e 	sub.w	r2, r2, lr
 800b0c4:	4565      	cmp	r5, ip
 800b0c6:	bf88      	it	hi
 800b0c8:	2200      	movhi	r2, #0
 800b0ca:	4413      	add	r3, r2
 800b0cc:	1a18      	subs	r0, r3, r0
 800b0ce:	b003      	add	sp, #12
 800b0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b0da:	e7ed      	b.n	800b0b8 <__exponent+0x4c>
 800b0dc:	2330      	movs	r3, #48	; 0x30
 800b0de:	3130      	adds	r1, #48	; 0x30
 800b0e0:	7083      	strb	r3, [r0, #2]
 800b0e2:	70c1      	strb	r1, [r0, #3]
 800b0e4:	1d03      	adds	r3, r0, #4
 800b0e6:	e7f1      	b.n	800b0cc <__exponent+0x60>

0800b0e8 <_printf_float>:
 800b0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ec:	ed2d 8b02 	vpush	{d8}
 800b0f0:	b08d      	sub	sp, #52	; 0x34
 800b0f2:	460c      	mov	r4, r1
 800b0f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b0f8:	4616      	mov	r6, r2
 800b0fa:	461f      	mov	r7, r3
 800b0fc:	4605      	mov	r5, r0
 800b0fe:	f001 fbfb 	bl	800c8f8 <_localeconv_r>
 800b102:	f8d0 a000 	ldr.w	sl, [r0]
 800b106:	4650      	mov	r0, sl
 800b108:	f7f5 f862 	bl	80001d0 <strlen>
 800b10c:	2300      	movs	r3, #0
 800b10e:	930a      	str	r3, [sp, #40]	; 0x28
 800b110:	6823      	ldr	r3, [r4, #0]
 800b112:	9305      	str	r3, [sp, #20]
 800b114:	f8d8 3000 	ldr.w	r3, [r8]
 800b118:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b11c:	3307      	adds	r3, #7
 800b11e:	f023 0307 	bic.w	r3, r3, #7
 800b122:	f103 0208 	add.w	r2, r3, #8
 800b126:	f8c8 2000 	str.w	r2, [r8]
 800b12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b132:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b136:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b13a:	9307      	str	r3, [sp, #28]
 800b13c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b140:	ee08 0a10 	vmov	s16, r0
 800b144:	4b9f      	ldr	r3, [pc, #636]	; (800b3c4 <_printf_float+0x2dc>)
 800b146:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b14a:	f04f 32ff 	mov.w	r2, #4294967295
 800b14e:	f7f5 fced 	bl	8000b2c <__aeabi_dcmpun>
 800b152:	bb88      	cbnz	r0, 800b1b8 <_printf_float+0xd0>
 800b154:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b158:	4b9a      	ldr	r3, [pc, #616]	; (800b3c4 <_printf_float+0x2dc>)
 800b15a:	f04f 32ff 	mov.w	r2, #4294967295
 800b15e:	f7f5 fcc7 	bl	8000af0 <__aeabi_dcmple>
 800b162:	bb48      	cbnz	r0, 800b1b8 <_printf_float+0xd0>
 800b164:	2200      	movs	r2, #0
 800b166:	2300      	movs	r3, #0
 800b168:	4640      	mov	r0, r8
 800b16a:	4649      	mov	r1, r9
 800b16c:	f7f5 fcb6 	bl	8000adc <__aeabi_dcmplt>
 800b170:	b110      	cbz	r0, 800b178 <_printf_float+0x90>
 800b172:	232d      	movs	r3, #45	; 0x2d
 800b174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b178:	4b93      	ldr	r3, [pc, #588]	; (800b3c8 <_printf_float+0x2e0>)
 800b17a:	4894      	ldr	r0, [pc, #592]	; (800b3cc <_printf_float+0x2e4>)
 800b17c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b180:	bf94      	ite	ls
 800b182:	4698      	movls	r8, r3
 800b184:	4680      	movhi	r8, r0
 800b186:	2303      	movs	r3, #3
 800b188:	6123      	str	r3, [r4, #16]
 800b18a:	9b05      	ldr	r3, [sp, #20]
 800b18c:	f023 0204 	bic.w	r2, r3, #4
 800b190:	6022      	str	r2, [r4, #0]
 800b192:	f04f 0900 	mov.w	r9, #0
 800b196:	9700      	str	r7, [sp, #0]
 800b198:	4633      	mov	r3, r6
 800b19a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b19c:	4621      	mov	r1, r4
 800b19e:	4628      	mov	r0, r5
 800b1a0:	f000 f9d8 	bl	800b554 <_printf_common>
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	f040 8090 	bne.w	800b2ca <_printf_float+0x1e2>
 800b1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ae:	b00d      	add	sp, #52	; 0x34
 800b1b0:	ecbd 8b02 	vpop	{d8}
 800b1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b8:	4642      	mov	r2, r8
 800b1ba:	464b      	mov	r3, r9
 800b1bc:	4640      	mov	r0, r8
 800b1be:	4649      	mov	r1, r9
 800b1c0:	f7f5 fcb4 	bl	8000b2c <__aeabi_dcmpun>
 800b1c4:	b140      	cbz	r0, 800b1d8 <_printf_float+0xf0>
 800b1c6:	464b      	mov	r3, r9
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	bfbc      	itt	lt
 800b1cc:	232d      	movlt	r3, #45	; 0x2d
 800b1ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b1d2:	487f      	ldr	r0, [pc, #508]	; (800b3d0 <_printf_float+0x2e8>)
 800b1d4:	4b7f      	ldr	r3, [pc, #508]	; (800b3d4 <_printf_float+0x2ec>)
 800b1d6:	e7d1      	b.n	800b17c <_printf_float+0x94>
 800b1d8:	6863      	ldr	r3, [r4, #4]
 800b1da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b1de:	9206      	str	r2, [sp, #24]
 800b1e0:	1c5a      	adds	r2, r3, #1
 800b1e2:	d13f      	bne.n	800b264 <_printf_float+0x17c>
 800b1e4:	2306      	movs	r3, #6
 800b1e6:	6063      	str	r3, [r4, #4]
 800b1e8:	9b05      	ldr	r3, [sp, #20]
 800b1ea:	6861      	ldr	r1, [r4, #4]
 800b1ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	9303      	str	r3, [sp, #12]
 800b1f4:	ab0a      	add	r3, sp, #40	; 0x28
 800b1f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b1fa:	ab09      	add	r3, sp, #36	; 0x24
 800b1fc:	ec49 8b10 	vmov	d0, r8, r9
 800b200:	9300      	str	r3, [sp, #0]
 800b202:	6022      	str	r2, [r4, #0]
 800b204:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b208:	4628      	mov	r0, r5
 800b20a:	f7ff fecd 	bl	800afa8 <__cvt>
 800b20e:	9b06      	ldr	r3, [sp, #24]
 800b210:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b212:	2b47      	cmp	r3, #71	; 0x47
 800b214:	4680      	mov	r8, r0
 800b216:	d108      	bne.n	800b22a <_printf_float+0x142>
 800b218:	1cc8      	adds	r0, r1, #3
 800b21a:	db02      	blt.n	800b222 <_printf_float+0x13a>
 800b21c:	6863      	ldr	r3, [r4, #4]
 800b21e:	4299      	cmp	r1, r3
 800b220:	dd41      	ble.n	800b2a6 <_printf_float+0x1be>
 800b222:	f1ab 0b02 	sub.w	fp, fp, #2
 800b226:	fa5f fb8b 	uxtb.w	fp, fp
 800b22a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b22e:	d820      	bhi.n	800b272 <_printf_float+0x18a>
 800b230:	3901      	subs	r1, #1
 800b232:	465a      	mov	r2, fp
 800b234:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b238:	9109      	str	r1, [sp, #36]	; 0x24
 800b23a:	f7ff ff17 	bl	800b06c <__exponent>
 800b23e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b240:	1813      	adds	r3, r2, r0
 800b242:	2a01      	cmp	r2, #1
 800b244:	4681      	mov	r9, r0
 800b246:	6123      	str	r3, [r4, #16]
 800b248:	dc02      	bgt.n	800b250 <_printf_float+0x168>
 800b24a:	6822      	ldr	r2, [r4, #0]
 800b24c:	07d2      	lsls	r2, r2, #31
 800b24e:	d501      	bpl.n	800b254 <_printf_float+0x16c>
 800b250:	3301      	adds	r3, #1
 800b252:	6123      	str	r3, [r4, #16]
 800b254:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d09c      	beq.n	800b196 <_printf_float+0xae>
 800b25c:	232d      	movs	r3, #45	; 0x2d
 800b25e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b262:	e798      	b.n	800b196 <_printf_float+0xae>
 800b264:	9a06      	ldr	r2, [sp, #24]
 800b266:	2a47      	cmp	r2, #71	; 0x47
 800b268:	d1be      	bne.n	800b1e8 <_printf_float+0x100>
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1bc      	bne.n	800b1e8 <_printf_float+0x100>
 800b26e:	2301      	movs	r3, #1
 800b270:	e7b9      	b.n	800b1e6 <_printf_float+0xfe>
 800b272:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b276:	d118      	bne.n	800b2aa <_printf_float+0x1c2>
 800b278:	2900      	cmp	r1, #0
 800b27a:	6863      	ldr	r3, [r4, #4]
 800b27c:	dd0b      	ble.n	800b296 <_printf_float+0x1ae>
 800b27e:	6121      	str	r1, [r4, #16]
 800b280:	b913      	cbnz	r3, 800b288 <_printf_float+0x1a0>
 800b282:	6822      	ldr	r2, [r4, #0]
 800b284:	07d0      	lsls	r0, r2, #31
 800b286:	d502      	bpl.n	800b28e <_printf_float+0x1a6>
 800b288:	3301      	adds	r3, #1
 800b28a:	440b      	add	r3, r1
 800b28c:	6123      	str	r3, [r4, #16]
 800b28e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b290:	f04f 0900 	mov.w	r9, #0
 800b294:	e7de      	b.n	800b254 <_printf_float+0x16c>
 800b296:	b913      	cbnz	r3, 800b29e <_printf_float+0x1b6>
 800b298:	6822      	ldr	r2, [r4, #0]
 800b29a:	07d2      	lsls	r2, r2, #31
 800b29c:	d501      	bpl.n	800b2a2 <_printf_float+0x1ba>
 800b29e:	3302      	adds	r3, #2
 800b2a0:	e7f4      	b.n	800b28c <_printf_float+0x1a4>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e7f2      	b.n	800b28c <_printf_float+0x1a4>
 800b2a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b2aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2ac:	4299      	cmp	r1, r3
 800b2ae:	db05      	blt.n	800b2bc <_printf_float+0x1d4>
 800b2b0:	6823      	ldr	r3, [r4, #0]
 800b2b2:	6121      	str	r1, [r4, #16]
 800b2b4:	07d8      	lsls	r0, r3, #31
 800b2b6:	d5ea      	bpl.n	800b28e <_printf_float+0x1a6>
 800b2b8:	1c4b      	adds	r3, r1, #1
 800b2ba:	e7e7      	b.n	800b28c <_printf_float+0x1a4>
 800b2bc:	2900      	cmp	r1, #0
 800b2be:	bfd4      	ite	le
 800b2c0:	f1c1 0202 	rsble	r2, r1, #2
 800b2c4:	2201      	movgt	r2, #1
 800b2c6:	4413      	add	r3, r2
 800b2c8:	e7e0      	b.n	800b28c <_printf_float+0x1a4>
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	055a      	lsls	r2, r3, #21
 800b2ce:	d407      	bmi.n	800b2e0 <_printf_float+0x1f8>
 800b2d0:	6923      	ldr	r3, [r4, #16]
 800b2d2:	4642      	mov	r2, r8
 800b2d4:	4631      	mov	r1, r6
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	47b8      	blx	r7
 800b2da:	3001      	adds	r0, #1
 800b2dc:	d12c      	bne.n	800b338 <_printf_float+0x250>
 800b2de:	e764      	b.n	800b1aa <_printf_float+0xc2>
 800b2e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b2e4:	f240 80e0 	bls.w	800b4a8 <_printf_float+0x3c0>
 800b2e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	f7f5 fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d034      	beq.n	800b362 <_printf_float+0x27a>
 800b2f8:	4a37      	ldr	r2, [pc, #220]	; (800b3d8 <_printf_float+0x2f0>)
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	4631      	mov	r1, r6
 800b2fe:	4628      	mov	r0, r5
 800b300:	47b8      	blx	r7
 800b302:	3001      	adds	r0, #1
 800b304:	f43f af51 	beq.w	800b1aa <_printf_float+0xc2>
 800b308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b30c:	429a      	cmp	r2, r3
 800b30e:	db02      	blt.n	800b316 <_printf_float+0x22e>
 800b310:	6823      	ldr	r3, [r4, #0]
 800b312:	07d8      	lsls	r0, r3, #31
 800b314:	d510      	bpl.n	800b338 <_printf_float+0x250>
 800b316:	ee18 3a10 	vmov	r3, s16
 800b31a:	4652      	mov	r2, sl
 800b31c:	4631      	mov	r1, r6
 800b31e:	4628      	mov	r0, r5
 800b320:	47b8      	blx	r7
 800b322:	3001      	adds	r0, #1
 800b324:	f43f af41 	beq.w	800b1aa <_printf_float+0xc2>
 800b328:	f04f 0800 	mov.w	r8, #0
 800b32c:	f104 091a 	add.w	r9, r4, #26
 800b330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b332:	3b01      	subs	r3, #1
 800b334:	4543      	cmp	r3, r8
 800b336:	dc09      	bgt.n	800b34c <_printf_float+0x264>
 800b338:	6823      	ldr	r3, [r4, #0]
 800b33a:	079b      	lsls	r3, r3, #30
 800b33c:	f100 8105 	bmi.w	800b54a <_printf_float+0x462>
 800b340:	68e0      	ldr	r0, [r4, #12]
 800b342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b344:	4298      	cmp	r0, r3
 800b346:	bfb8      	it	lt
 800b348:	4618      	movlt	r0, r3
 800b34a:	e730      	b.n	800b1ae <_printf_float+0xc6>
 800b34c:	2301      	movs	r3, #1
 800b34e:	464a      	mov	r2, r9
 800b350:	4631      	mov	r1, r6
 800b352:	4628      	mov	r0, r5
 800b354:	47b8      	blx	r7
 800b356:	3001      	adds	r0, #1
 800b358:	f43f af27 	beq.w	800b1aa <_printf_float+0xc2>
 800b35c:	f108 0801 	add.w	r8, r8, #1
 800b360:	e7e6      	b.n	800b330 <_printf_float+0x248>
 800b362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b364:	2b00      	cmp	r3, #0
 800b366:	dc39      	bgt.n	800b3dc <_printf_float+0x2f4>
 800b368:	4a1b      	ldr	r2, [pc, #108]	; (800b3d8 <_printf_float+0x2f0>)
 800b36a:	2301      	movs	r3, #1
 800b36c:	4631      	mov	r1, r6
 800b36e:	4628      	mov	r0, r5
 800b370:	47b8      	blx	r7
 800b372:	3001      	adds	r0, #1
 800b374:	f43f af19 	beq.w	800b1aa <_printf_float+0xc2>
 800b378:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b37c:	4313      	orrs	r3, r2
 800b37e:	d102      	bne.n	800b386 <_printf_float+0x29e>
 800b380:	6823      	ldr	r3, [r4, #0]
 800b382:	07d9      	lsls	r1, r3, #31
 800b384:	d5d8      	bpl.n	800b338 <_printf_float+0x250>
 800b386:	ee18 3a10 	vmov	r3, s16
 800b38a:	4652      	mov	r2, sl
 800b38c:	4631      	mov	r1, r6
 800b38e:	4628      	mov	r0, r5
 800b390:	47b8      	blx	r7
 800b392:	3001      	adds	r0, #1
 800b394:	f43f af09 	beq.w	800b1aa <_printf_float+0xc2>
 800b398:	f04f 0900 	mov.w	r9, #0
 800b39c:	f104 0a1a 	add.w	sl, r4, #26
 800b3a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3a2:	425b      	negs	r3, r3
 800b3a4:	454b      	cmp	r3, r9
 800b3a6:	dc01      	bgt.n	800b3ac <_printf_float+0x2c4>
 800b3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3aa:	e792      	b.n	800b2d2 <_printf_float+0x1ea>
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	4652      	mov	r2, sl
 800b3b0:	4631      	mov	r1, r6
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	47b8      	blx	r7
 800b3b6:	3001      	adds	r0, #1
 800b3b8:	f43f aef7 	beq.w	800b1aa <_printf_float+0xc2>
 800b3bc:	f109 0901 	add.w	r9, r9, #1
 800b3c0:	e7ee      	b.n	800b3a0 <_printf_float+0x2b8>
 800b3c2:	bf00      	nop
 800b3c4:	7fefffff 	.word	0x7fefffff
 800b3c8:	0800dc2c 	.word	0x0800dc2c
 800b3cc:	0800dc30 	.word	0x0800dc30
 800b3d0:	0800dc38 	.word	0x0800dc38
 800b3d4:	0800dc34 	.word	0x0800dc34
 800b3d8:	0800dc3c 	.word	0x0800dc3c
 800b3dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	bfa8      	it	ge
 800b3e4:	461a      	movge	r2, r3
 800b3e6:	2a00      	cmp	r2, #0
 800b3e8:	4691      	mov	r9, r2
 800b3ea:	dc37      	bgt.n	800b45c <_printf_float+0x374>
 800b3ec:	f04f 0b00 	mov.w	fp, #0
 800b3f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3f4:	f104 021a 	add.w	r2, r4, #26
 800b3f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b3fa:	9305      	str	r3, [sp, #20]
 800b3fc:	eba3 0309 	sub.w	r3, r3, r9
 800b400:	455b      	cmp	r3, fp
 800b402:	dc33      	bgt.n	800b46c <_printf_float+0x384>
 800b404:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b408:	429a      	cmp	r2, r3
 800b40a:	db3b      	blt.n	800b484 <_printf_float+0x39c>
 800b40c:	6823      	ldr	r3, [r4, #0]
 800b40e:	07da      	lsls	r2, r3, #31
 800b410:	d438      	bmi.n	800b484 <_printf_float+0x39c>
 800b412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b414:	9a05      	ldr	r2, [sp, #20]
 800b416:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b418:	1a9a      	subs	r2, r3, r2
 800b41a:	eba3 0901 	sub.w	r9, r3, r1
 800b41e:	4591      	cmp	r9, r2
 800b420:	bfa8      	it	ge
 800b422:	4691      	movge	r9, r2
 800b424:	f1b9 0f00 	cmp.w	r9, #0
 800b428:	dc35      	bgt.n	800b496 <_printf_float+0x3ae>
 800b42a:	f04f 0800 	mov.w	r8, #0
 800b42e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b432:	f104 0a1a 	add.w	sl, r4, #26
 800b436:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b43a:	1a9b      	subs	r3, r3, r2
 800b43c:	eba3 0309 	sub.w	r3, r3, r9
 800b440:	4543      	cmp	r3, r8
 800b442:	f77f af79 	ble.w	800b338 <_printf_float+0x250>
 800b446:	2301      	movs	r3, #1
 800b448:	4652      	mov	r2, sl
 800b44a:	4631      	mov	r1, r6
 800b44c:	4628      	mov	r0, r5
 800b44e:	47b8      	blx	r7
 800b450:	3001      	adds	r0, #1
 800b452:	f43f aeaa 	beq.w	800b1aa <_printf_float+0xc2>
 800b456:	f108 0801 	add.w	r8, r8, #1
 800b45a:	e7ec      	b.n	800b436 <_printf_float+0x34e>
 800b45c:	4613      	mov	r3, r2
 800b45e:	4631      	mov	r1, r6
 800b460:	4642      	mov	r2, r8
 800b462:	4628      	mov	r0, r5
 800b464:	47b8      	blx	r7
 800b466:	3001      	adds	r0, #1
 800b468:	d1c0      	bne.n	800b3ec <_printf_float+0x304>
 800b46a:	e69e      	b.n	800b1aa <_printf_float+0xc2>
 800b46c:	2301      	movs	r3, #1
 800b46e:	4631      	mov	r1, r6
 800b470:	4628      	mov	r0, r5
 800b472:	9205      	str	r2, [sp, #20]
 800b474:	47b8      	blx	r7
 800b476:	3001      	adds	r0, #1
 800b478:	f43f ae97 	beq.w	800b1aa <_printf_float+0xc2>
 800b47c:	9a05      	ldr	r2, [sp, #20]
 800b47e:	f10b 0b01 	add.w	fp, fp, #1
 800b482:	e7b9      	b.n	800b3f8 <_printf_float+0x310>
 800b484:	ee18 3a10 	vmov	r3, s16
 800b488:	4652      	mov	r2, sl
 800b48a:	4631      	mov	r1, r6
 800b48c:	4628      	mov	r0, r5
 800b48e:	47b8      	blx	r7
 800b490:	3001      	adds	r0, #1
 800b492:	d1be      	bne.n	800b412 <_printf_float+0x32a>
 800b494:	e689      	b.n	800b1aa <_printf_float+0xc2>
 800b496:	9a05      	ldr	r2, [sp, #20]
 800b498:	464b      	mov	r3, r9
 800b49a:	4442      	add	r2, r8
 800b49c:	4631      	mov	r1, r6
 800b49e:	4628      	mov	r0, r5
 800b4a0:	47b8      	blx	r7
 800b4a2:	3001      	adds	r0, #1
 800b4a4:	d1c1      	bne.n	800b42a <_printf_float+0x342>
 800b4a6:	e680      	b.n	800b1aa <_printf_float+0xc2>
 800b4a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4aa:	2a01      	cmp	r2, #1
 800b4ac:	dc01      	bgt.n	800b4b2 <_printf_float+0x3ca>
 800b4ae:	07db      	lsls	r3, r3, #31
 800b4b0:	d538      	bpl.n	800b524 <_printf_float+0x43c>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	4642      	mov	r2, r8
 800b4b6:	4631      	mov	r1, r6
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	47b8      	blx	r7
 800b4bc:	3001      	adds	r0, #1
 800b4be:	f43f ae74 	beq.w	800b1aa <_printf_float+0xc2>
 800b4c2:	ee18 3a10 	vmov	r3, s16
 800b4c6:	4652      	mov	r2, sl
 800b4c8:	4631      	mov	r1, r6
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	47b8      	blx	r7
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	f43f ae6b 	beq.w	800b1aa <_printf_float+0xc2>
 800b4d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b4d8:	2200      	movs	r2, #0
 800b4da:	2300      	movs	r3, #0
 800b4dc:	f7f5 faf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4e0:	b9d8      	cbnz	r0, 800b51a <_printf_float+0x432>
 800b4e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4e4:	f108 0201 	add.w	r2, r8, #1
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	4631      	mov	r1, r6
 800b4ec:	4628      	mov	r0, r5
 800b4ee:	47b8      	blx	r7
 800b4f0:	3001      	adds	r0, #1
 800b4f2:	d10e      	bne.n	800b512 <_printf_float+0x42a>
 800b4f4:	e659      	b.n	800b1aa <_printf_float+0xc2>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	4652      	mov	r2, sl
 800b4fa:	4631      	mov	r1, r6
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	47b8      	blx	r7
 800b500:	3001      	adds	r0, #1
 800b502:	f43f ae52 	beq.w	800b1aa <_printf_float+0xc2>
 800b506:	f108 0801 	add.w	r8, r8, #1
 800b50a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b50c:	3b01      	subs	r3, #1
 800b50e:	4543      	cmp	r3, r8
 800b510:	dcf1      	bgt.n	800b4f6 <_printf_float+0x40e>
 800b512:	464b      	mov	r3, r9
 800b514:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b518:	e6dc      	b.n	800b2d4 <_printf_float+0x1ec>
 800b51a:	f04f 0800 	mov.w	r8, #0
 800b51e:	f104 0a1a 	add.w	sl, r4, #26
 800b522:	e7f2      	b.n	800b50a <_printf_float+0x422>
 800b524:	2301      	movs	r3, #1
 800b526:	4642      	mov	r2, r8
 800b528:	e7df      	b.n	800b4ea <_printf_float+0x402>
 800b52a:	2301      	movs	r3, #1
 800b52c:	464a      	mov	r2, r9
 800b52e:	4631      	mov	r1, r6
 800b530:	4628      	mov	r0, r5
 800b532:	47b8      	blx	r7
 800b534:	3001      	adds	r0, #1
 800b536:	f43f ae38 	beq.w	800b1aa <_printf_float+0xc2>
 800b53a:	f108 0801 	add.w	r8, r8, #1
 800b53e:	68e3      	ldr	r3, [r4, #12]
 800b540:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b542:	1a5b      	subs	r3, r3, r1
 800b544:	4543      	cmp	r3, r8
 800b546:	dcf0      	bgt.n	800b52a <_printf_float+0x442>
 800b548:	e6fa      	b.n	800b340 <_printf_float+0x258>
 800b54a:	f04f 0800 	mov.w	r8, #0
 800b54e:	f104 0919 	add.w	r9, r4, #25
 800b552:	e7f4      	b.n	800b53e <_printf_float+0x456>

0800b554 <_printf_common>:
 800b554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b558:	4616      	mov	r6, r2
 800b55a:	4699      	mov	r9, r3
 800b55c:	688a      	ldr	r2, [r1, #8]
 800b55e:	690b      	ldr	r3, [r1, #16]
 800b560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b564:	4293      	cmp	r3, r2
 800b566:	bfb8      	it	lt
 800b568:	4613      	movlt	r3, r2
 800b56a:	6033      	str	r3, [r6, #0]
 800b56c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b570:	4607      	mov	r7, r0
 800b572:	460c      	mov	r4, r1
 800b574:	b10a      	cbz	r2, 800b57a <_printf_common+0x26>
 800b576:	3301      	adds	r3, #1
 800b578:	6033      	str	r3, [r6, #0]
 800b57a:	6823      	ldr	r3, [r4, #0]
 800b57c:	0699      	lsls	r1, r3, #26
 800b57e:	bf42      	ittt	mi
 800b580:	6833      	ldrmi	r3, [r6, #0]
 800b582:	3302      	addmi	r3, #2
 800b584:	6033      	strmi	r3, [r6, #0]
 800b586:	6825      	ldr	r5, [r4, #0]
 800b588:	f015 0506 	ands.w	r5, r5, #6
 800b58c:	d106      	bne.n	800b59c <_printf_common+0x48>
 800b58e:	f104 0a19 	add.w	sl, r4, #25
 800b592:	68e3      	ldr	r3, [r4, #12]
 800b594:	6832      	ldr	r2, [r6, #0]
 800b596:	1a9b      	subs	r3, r3, r2
 800b598:	42ab      	cmp	r3, r5
 800b59a:	dc26      	bgt.n	800b5ea <_printf_common+0x96>
 800b59c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b5a0:	1e13      	subs	r3, r2, #0
 800b5a2:	6822      	ldr	r2, [r4, #0]
 800b5a4:	bf18      	it	ne
 800b5a6:	2301      	movne	r3, #1
 800b5a8:	0692      	lsls	r2, r2, #26
 800b5aa:	d42b      	bmi.n	800b604 <_printf_common+0xb0>
 800b5ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5b0:	4649      	mov	r1, r9
 800b5b2:	4638      	mov	r0, r7
 800b5b4:	47c0      	blx	r8
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	d01e      	beq.n	800b5f8 <_printf_common+0xa4>
 800b5ba:	6823      	ldr	r3, [r4, #0]
 800b5bc:	68e5      	ldr	r5, [r4, #12]
 800b5be:	6832      	ldr	r2, [r6, #0]
 800b5c0:	f003 0306 	and.w	r3, r3, #6
 800b5c4:	2b04      	cmp	r3, #4
 800b5c6:	bf08      	it	eq
 800b5c8:	1aad      	subeq	r5, r5, r2
 800b5ca:	68a3      	ldr	r3, [r4, #8]
 800b5cc:	6922      	ldr	r2, [r4, #16]
 800b5ce:	bf0c      	ite	eq
 800b5d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5d4:	2500      	movne	r5, #0
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	bfc4      	itt	gt
 800b5da:	1a9b      	subgt	r3, r3, r2
 800b5dc:	18ed      	addgt	r5, r5, r3
 800b5de:	2600      	movs	r6, #0
 800b5e0:	341a      	adds	r4, #26
 800b5e2:	42b5      	cmp	r5, r6
 800b5e4:	d11a      	bne.n	800b61c <_printf_common+0xc8>
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	e008      	b.n	800b5fc <_printf_common+0xa8>
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	4652      	mov	r2, sl
 800b5ee:	4649      	mov	r1, r9
 800b5f0:	4638      	mov	r0, r7
 800b5f2:	47c0      	blx	r8
 800b5f4:	3001      	adds	r0, #1
 800b5f6:	d103      	bne.n	800b600 <_printf_common+0xac>
 800b5f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b600:	3501      	adds	r5, #1
 800b602:	e7c6      	b.n	800b592 <_printf_common+0x3e>
 800b604:	18e1      	adds	r1, r4, r3
 800b606:	1c5a      	adds	r2, r3, #1
 800b608:	2030      	movs	r0, #48	; 0x30
 800b60a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b60e:	4422      	add	r2, r4
 800b610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b618:	3302      	adds	r3, #2
 800b61a:	e7c7      	b.n	800b5ac <_printf_common+0x58>
 800b61c:	2301      	movs	r3, #1
 800b61e:	4622      	mov	r2, r4
 800b620:	4649      	mov	r1, r9
 800b622:	4638      	mov	r0, r7
 800b624:	47c0      	blx	r8
 800b626:	3001      	adds	r0, #1
 800b628:	d0e6      	beq.n	800b5f8 <_printf_common+0xa4>
 800b62a:	3601      	adds	r6, #1
 800b62c:	e7d9      	b.n	800b5e2 <_printf_common+0x8e>
	...

0800b630 <_printf_i>:
 800b630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b634:	7e0f      	ldrb	r7, [r1, #24]
 800b636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b638:	2f78      	cmp	r7, #120	; 0x78
 800b63a:	4691      	mov	r9, r2
 800b63c:	4680      	mov	r8, r0
 800b63e:	460c      	mov	r4, r1
 800b640:	469a      	mov	sl, r3
 800b642:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b646:	d807      	bhi.n	800b658 <_printf_i+0x28>
 800b648:	2f62      	cmp	r7, #98	; 0x62
 800b64a:	d80a      	bhi.n	800b662 <_printf_i+0x32>
 800b64c:	2f00      	cmp	r7, #0
 800b64e:	f000 80d8 	beq.w	800b802 <_printf_i+0x1d2>
 800b652:	2f58      	cmp	r7, #88	; 0x58
 800b654:	f000 80a3 	beq.w	800b79e <_printf_i+0x16e>
 800b658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b65c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b660:	e03a      	b.n	800b6d8 <_printf_i+0xa8>
 800b662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b666:	2b15      	cmp	r3, #21
 800b668:	d8f6      	bhi.n	800b658 <_printf_i+0x28>
 800b66a:	a101      	add	r1, pc, #4	; (adr r1, 800b670 <_printf_i+0x40>)
 800b66c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b670:	0800b6c9 	.word	0x0800b6c9
 800b674:	0800b6dd 	.word	0x0800b6dd
 800b678:	0800b659 	.word	0x0800b659
 800b67c:	0800b659 	.word	0x0800b659
 800b680:	0800b659 	.word	0x0800b659
 800b684:	0800b659 	.word	0x0800b659
 800b688:	0800b6dd 	.word	0x0800b6dd
 800b68c:	0800b659 	.word	0x0800b659
 800b690:	0800b659 	.word	0x0800b659
 800b694:	0800b659 	.word	0x0800b659
 800b698:	0800b659 	.word	0x0800b659
 800b69c:	0800b7e9 	.word	0x0800b7e9
 800b6a0:	0800b70d 	.word	0x0800b70d
 800b6a4:	0800b7cb 	.word	0x0800b7cb
 800b6a8:	0800b659 	.word	0x0800b659
 800b6ac:	0800b659 	.word	0x0800b659
 800b6b0:	0800b80b 	.word	0x0800b80b
 800b6b4:	0800b659 	.word	0x0800b659
 800b6b8:	0800b70d 	.word	0x0800b70d
 800b6bc:	0800b659 	.word	0x0800b659
 800b6c0:	0800b659 	.word	0x0800b659
 800b6c4:	0800b7d3 	.word	0x0800b7d3
 800b6c8:	682b      	ldr	r3, [r5, #0]
 800b6ca:	1d1a      	adds	r2, r3, #4
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	602a      	str	r2, [r5, #0]
 800b6d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b6d8:	2301      	movs	r3, #1
 800b6da:	e0a3      	b.n	800b824 <_printf_i+0x1f4>
 800b6dc:	6820      	ldr	r0, [r4, #0]
 800b6de:	6829      	ldr	r1, [r5, #0]
 800b6e0:	0606      	lsls	r6, r0, #24
 800b6e2:	f101 0304 	add.w	r3, r1, #4
 800b6e6:	d50a      	bpl.n	800b6fe <_printf_i+0xce>
 800b6e8:	680e      	ldr	r6, [r1, #0]
 800b6ea:	602b      	str	r3, [r5, #0]
 800b6ec:	2e00      	cmp	r6, #0
 800b6ee:	da03      	bge.n	800b6f8 <_printf_i+0xc8>
 800b6f0:	232d      	movs	r3, #45	; 0x2d
 800b6f2:	4276      	negs	r6, r6
 800b6f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6f8:	485e      	ldr	r0, [pc, #376]	; (800b874 <_printf_i+0x244>)
 800b6fa:	230a      	movs	r3, #10
 800b6fc:	e019      	b.n	800b732 <_printf_i+0x102>
 800b6fe:	680e      	ldr	r6, [r1, #0]
 800b700:	602b      	str	r3, [r5, #0]
 800b702:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b706:	bf18      	it	ne
 800b708:	b236      	sxthne	r6, r6
 800b70a:	e7ef      	b.n	800b6ec <_printf_i+0xbc>
 800b70c:	682b      	ldr	r3, [r5, #0]
 800b70e:	6820      	ldr	r0, [r4, #0]
 800b710:	1d19      	adds	r1, r3, #4
 800b712:	6029      	str	r1, [r5, #0]
 800b714:	0601      	lsls	r1, r0, #24
 800b716:	d501      	bpl.n	800b71c <_printf_i+0xec>
 800b718:	681e      	ldr	r6, [r3, #0]
 800b71a:	e002      	b.n	800b722 <_printf_i+0xf2>
 800b71c:	0646      	lsls	r6, r0, #25
 800b71e:	d5fb      	bpl.n	800b718 <_printf_i+0xe8>
 800b720:	881e      	ldrh	r6, [r3, #0]
 800b722:	4854      	ldr	r0, [pc, #336]	; (800b874 <_printf_i+0x244>)
 800b724:	2f6f      	cmp	r7, #111	; 0x6f
 800b726:	bf0c      	ite	eq
 800b728:	2308      	moveq	r3, #8
 800b72a:	230a      	movne	r3, #10
 800b72c:	2100      	movs	r1, #0
 800b72e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b732:	6865      	ldr	r5, [r4, #4]
 800b734:	60a5      	str	r5, [r4, #8]
 800b736:	2d00      	cmp	r5, #0
 800b738:	bfa2      	ittt	ge
 800b73a:	6821      	ldrge	r1, [r4, #0]
 800b73c:	f021 0104 	bicge.w	r1, r1, #4
 800b740:	6021      	strge	r1, [r4, #0]
 800b742:	b90e      	cbnz	r6, 800b748 <_printf_i+0x118>
 800b744:	2d00      	cmp	r5, #0
 800b746:	d04d      	beq.n	800b7e4 <_printf_i+0x1b4>
 800b748:	4615      	mov	r5, r2
 800b74a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b74e:	fb03 6711 	mls	r7, r3, r1, r6
 800b752:	5dc7      	ldrb	r7, [r0, r7]
 800b754:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b758:	4637      	mov	r7, r6
 800b75a:	42bb      	cmp	r3, r7
 800b75c:	460e      	mov	r6, r1
 800b75e:	d9f4      	bls.n	800b74a <_printf_i+0x11a>
 800b760:	2b08      	cmp	r3, #8
 800b762:	d10b      	bne.n	800b77c <_printf_i+0x14c>
 800b764:	6823      	ldr	r3, [r4, #0]
 800b766:	07de      	lsls	r6, r3, #31
 800b768:	d508      	bpl.n	800b77c <_printf_i+0x14c>
 800b76a:	6923      	ldr	r3, [r4, #16]
 800b76c:	6861      	ldr	r1, [r4, #4]
 800b76e:	4299      	cmp	r1, r3
 800b770:	bfde      	ittt	le
 800b772:	2330      	movle	r3, #48	; 0x30
 800b774:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b778:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b77c:	1b52      	subs	r2, r2, r5
 800b77e:	6122      	str	r2, [r4, #16]
 800b780:	f8cd a000 	str.w	sl, [sp]
 800b784:	464b      	mov	r3, r9
 800b786:	aa03      	add	r2, sp, #12
 800b788:	4621      	mov	r1, r4
 800b78a:	4640      	mov	r0, r8
 800b78c:	f7ff fee2 	bl	800b554 <_printf_common>
 800b790:	3001      	adds	r0, #1
 800b792:	d14c      	bne.n	800b82e <_printf_i+0x1fe>
 800b794:	f04f 30ff 	mov.w	r0, #4294967295
 800b798:	b004      	add	sp, #16
 800b79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b79e:	4835      	ldr	r0, [pc, #212]	; (800b874 <_printf_i+0x244>)
 800b7a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b7a4:	6829      	ldr	r1, [r5, #0]
 800b7a6:	6823      	ldr	r3, [r4, #0]
 800b7a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b7ac:	6029      	str	r1, [r5, #0]
 800b7ae:	061d      	lsls	r5, r3, #24
 800b7b0:	d514      	bpl.n	800b7dc <_printf_i+0x1ac>
 800b7b2:	07df      	lsls	r7, r3, #31
 800b7b4:	bf44      	itt	mi
 800b7b6:	f043 0320 	orrmi.w	r3, r3, #32
 800b7ba:	6023      	strmi	r3, [r4, #0]
 800b7bc:	b91e      	cbnz	r6, 800b7c6 <_printf_i+0x196>
 800b7be:	6823      	ldr	r3, [r4, #0]
 800b7c0:	f023 0320 	bic.w	r3, r3, #32
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	2310      	movs	r3, #16
 800b7c8:	e7b0      	b.n	800b72c <_printf_i+0xfc>
 800b7ca:	6823      	ldr	r3, [r4, #0]
 800b7cc:	f043 0320 	orr.w	r3, r3, #32
 800b7d0:	6023      	str	r3, [r4, #0]
 800b7d2:	2378      	movs	r3, #120	; 0x78
 800b7d4:	4828      	ldr	r0, [pc, #160]	; (800b878 <_printf_i+0x248>)
 800b7d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b7da:	e7e3      	b.n	800b7a4 <_printf_i+0x174>
 800b7dc:	0659      	lsls	r1, r3, #25
 800b7de:	bf48      	it	mi
 800b7e0:	b2b6      	uxthmi	r6, r6
 800b7e2:	e7e6      	b.n	800b7b2 <_printf_i+0x182>
 800b7e4:	4615      	mov	r5, r2
 800b7e6:	e7bb      	b.n	800b760 <_printf_i+0x130>
 800b7e8:	682b      	ldr	r3, [r5, #0]
 800b7ea:	6826      	ldr	r6, [r4, #0]
 800b7ec:	6961      	ldr	r1, [r4, #20]
 800b7ee:	1d18      	adds	r0, r3, #4
 800b7f0:	6028      	str	r0, [r5, #0]
 800b7f2:	0635      	lsls	r5, r6, #24
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	d501      	bpl.n	800b7fc <_printf_i+0x1cc>
 800b7f8:	6019      	str	r1, [r3, #0]
 800b7fa:	e002      	b.n	800b802 <_printf_i+0x1d2>
 800b7fc:	0670      	lsls	r0, r6, #25
 800b7fe:	d5fb      	bpl.n	800b7f8 <_printf_i+0x1c8>
 800b800:	8019      	strh	r1, [r3, #0]
 800b802:	2300      	movs	r3, #0
 800b804:	6123      	str	r3, [r4, #16]
 800b806:	4615      	mov	r5, r2
 800b808:	e7ba      	b.n	800b780 <_printf_i+0x150>
 800b80a:	682b      	ldr	r3, [r5, #0]
 800b80c:	1d1a      	adds	r2, r3, #4
 800b80e:	602a      	str	r2, [r5, #0]
 800b810:	681d      	ldr	r5, [r3, #0]
 800b812:	6862      	ldr	r2, [r4, #4]
 800b814:	2100      	movs	r1, #0
 800b816:	4628      	mov	r0, r5
 800b818:	f7f4 fce2 	bl	80001e0 <memchr>
 800b81c:	b108      	cbz	r0, 800b822 <_printf_i+0x1f2>
 800b81e:	1b40      	subs	r0, r0, r5
 800b820:	6060      	str	r0, [r4, #4]
 800b822:	6863      	ldr	r3, [r4, #4]
 800b824:	6123      	str	r3, [r4, #16]
 800b826:	2300      	movs	r3, #0
 800b828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b82c:	e7a8      	b.n	800b780 <_printf_i+0x150>
 800b82e:	6923      	ldr	r3, [r4, #16]
 800b830:	462a      	mov	r2, r5
 800b832:	4649      	mov	r1, r9
 800b834:	4640      	mov	r0, r8
 800b836:	47d0      	blx	sl
 800b838:	3001      	adds	r0, #1
 800b83a:	d0ab      	beq.n	800b794 <_printf_i+0x164>
 800b83c:	6823      	ldr	r3, [r4, #0]
 800b83e:	079b      	lsls	r3, r3, #30
 800b840:	d413      	bmi.n	800b86a <_printf_i+0x23a>
 800b842:	68e0      	ldr	r0, [r4, #12]
 800b844:	9b03      	ldr	r3, [sp, #12]
 800b846:	4298      	cmp	r0, r3
 800b848:	bfb8      	it	lt
 800b84a:	4618      	movlt	r0, r3
 800b84c:	e7a4      	b.n	800b798 <_printf_i+0x168>
 800b84e:	2301      	movs	r3, #1
 800b850:	4632      	mov	r2, r6
 800b852:	4649      	mov	r1, r9
 800b854:	4640      	mov	r0, r8
 800b856:	47d0      	blx	sl
 800b858:	3001      	adds	r0, #1
 800b85a:	d09b      	beq.n	800b794 <_printf_i+0x164>
 800b85c:	3501      	adds	r5, #1
 800b85e:	68e3      	ldr	r3, [r4, #12]
 800b860:	9903      	ldr	r1, [sp, #12]
 800b862:	1a5b      	subs	r3, r3, r1
 800b864:	42ab      	cmp	r3, r5
 800b866:	dcf2      	bgt.n	800b84e <_printf_i+0x21e>
 800b868:	e7eb      	b.n	800b842 <_printf_i+0x212>
 800b86a:	2500      	movs	r5, #0
 800b86c:	f104 0619 	add.w	r6, r4, #25
 800b870:	e7f5      	b.n	800b85e <_printf_i+0x22e>
 800b872:	bf00      	nop
 800b874:	0800dc3e 	.word	0x0800dc3e
 800b878:	0800dc4f 	.word	0x0800dc4f

0800b87c <cleanup_glue>:
 800b87c:	b538      	push	{r3, r4, r5, lr}
 800b87e:	460c      	mov	r4, r1
 800b880:	6809      	ldr	r1, [r1, #0]
 800b882:	4605      	mov	r5, r0
 800b884:	b109      	cbz	r1, 800b88a <cleanup_glue+0xe>
 800b886:	f7ff fff9 	bl	800b87c <cleanup_glue>
 800b88a:	4621      	mov	r1, r4
 800b88c:	4628      	mov	r0, r5
 800b88e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b892:	f001 bbf5 	b.w	800d080 <_free_r>
	...

0800b898 <_reclaim_reent>:
 800b898:	4b2c      	ldr	r3, [pc, #176]	; (800b94c <_reclaim_reent+0xb4>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4283      	cmp	r3, r0
 800b89e:	b570      	push	{r4, r5, r6, lr}
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	d051      	beq.n	800b948 <_reclaim_reent+0xb0>
 800b8a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b8a6:	b143      	cbz	r3, 800b8ba <_reclaim_reent+0x22>
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d14a      	bne.n	800b944 <_reclaim_reent+0xac>
 800b8ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8b0:	6819      	ldr	r1, [r3, #0]
 800b8b2:	b111      	cbz	r1, 800b8ba <_reclaim_reent+0x22>
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f001 fbe3 	bl	800d080 <_free_r>
 800b8ba:	6961      	ldr	r1, [r4, #20]
 800b8bc:	b111      	cbz	r1, 800b8c4 <_reclaim_reent+0x2c>
 800b8be:	4620      	mov	r0, r4
 800b8c0:	f001 fbde 	bl	800d080 <_free_r>
 800b8c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b8c6:	b111      	cbz	r1, 800b8ce <_reclaim_reent+0x36>
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	f001 fbd9 	bl	800d080 <_free_r>
 800b8ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b8d0:	b111      	cbz	r1, 800b8d8 <_reclaim_reent+0x40>
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f001 fbd4 	bl	800d080 <_free_r>
 800b8d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b8da:	b111      	cbz	r1, 800b8e2 <_reclaim_reent+0x4a>
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f001 fbcf 	bl	800d080 <_free_r>
 800b8e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b8e4:	b111      	cbz	r1, 800b8ec <_reclaim_reent+0x54>
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f001 fbca 	bl	800d080 <_free_r>
 800b8ec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b8ee:	b111      	cbz	r1, 800b8f6 <_reclaim_reent+0x5e>
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f001 fbc5 	bl	800d080 <_free_r>
 800b8f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b8f8:	b111      	cbz	r1, 800b900 <_reclaim_reent+0x68>
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f001 fbc0 	bl	800d080 <_free_r>
 800b900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b902:	b111      	cbz	r1, 800b90a <_reclaim_reent+0x72>
 800b904:	4620      	mov	r0, r4
 800b906:	f001 fbbb 	bl	800d080 <_free_r>
 800b90a:	69a3      	ldr	r3, [r4, #24]
 800b90c:	b1e3      	cbz	r3, 800b948 <_reclaim_reent+0xb0>
 800b90e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b910:	4620      	mov	r0, r4
 800b912:	4798      	blx	r3
 800b914:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b916:	b1b9      	cbz	r1, 800b948 <_reclaim_reent+0xb0>
 800b918:	4620      	mov	r0, r4
 800b91a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b91e:	f7ff bfad 	b.w	800b87c <cleanup_glue>
 800b922:	5949      	ldr	r1, [r1, r5]
 800b924:	b941      	cbnz	r1, 800b938 <_reclaim_reent+0xa0>
 800b926:	3504      	adds	r5, #4
 800b928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b92a:	2d80      	cmp	r5, #128	; 0x80
 800b92c:	68d9      	ldr	r1, [r3, #12]
 800b92e:	d1f8      	bne.n	800b922 <_reclaim_reent+0x8a>
 800b930:	4620      	mov	r0, r4
 800b932:	f001 fba5 	bl	800d080 <_free_r>
 800b936:	e7ba      	b.n	800b8ae <_reclaim_reent+0x16>
 800b938:	680e      	ldr	r6, [r1, #0]
 800b93a:	4620      	mov	r0, r4
 800b93c:	f001 fba0 	bl	800d080 <_free_r>
 800b940:	4631      	mov	r1, r6
 800b942:	e7ef      	b.n	800b924 <_reclaim_reent+0x8c>
 800b944:	2500      	movs	r5, #0
 800b946:	e7ef      	b.n	800b928 <_reclaim_reent+0x90>
 800b948:	bd70      	pop	{r4, r5, r6, pc}
 800b94a:	bf00      	nop
 800b94c:	20000030 	.word	0x20000030

0800b950 <_sbrk_r>:
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	4d06      	ldr	r5, [pc, #24]	; (800b96c <_sbrk_r+0x1c>)
 800b954:	2300      	movs	r3, #0
 800b956:	4604      	mov	r4, r0
 800b958:	4608      	mov	r0, r1
 800b95a:	602b      	str	r3, [r5, #0]
 800b95c:	f7f7 fed0 	bl	8003700 <_sbrk>
 800b960:	1c43      	adds	r3, r0, #1
 800b962:	d102      	bne.n	800b96a <_sbrk_r+0x1a>
 800b964:	682b      	ldr	r3, [r5, #0]
 800b966:	b103      	cbz	r3, 800b96a <_sbrk_r+0x1a>
 800b968:	6023      	str	r3, [r4, #0]
 800b96a:	bd38      	pop	{r3, r4, r5, pc}
 800b96c:	20005664 	.word	0x20005664

0800b970 <__sread>:
 800b970:	b510      	push	{r4, lr}
 800b972:	460c      	mov	r4, r1
 800b974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b978:	f001 fd2a 	bl	800d3d0 <_read_r>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	bfab      	itete	ge
 800b980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b982:	89a3      	ldrhlt	r3, [r4, #12]
 800b984:	181b      	addge	r3, r3, r0
 800b986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b98a:	bfac      	ite	ge
 800b98c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b98e:	81a3      	strhlt	r3, [r4, #12]
 800b990:	bd10      	pop	{r4, pc}

0800b992 <__swrite>:
 800b992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b996:	461f      	mov	r7, r3
 800b998:	898b      	ldrh	r3, [r1, #12]
 800b99a:	05db      	lsls	r3, r3, #23
 800b99c:	4605      	mov	r5, r0
 800b99e:	460c      	mov	r4, r1
 800b9a0:	4616      	mov	r6, r2
 800b9a2:	d505      	bpl.n	800b9b0 <__swrite+0x1e>
 800b9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f000 ffa8 	bl	800c900 <_lseek_r>
 800b9b0:	89a3      	ldrh	r3, [r4, #12]
 800b9b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9ba:	81a3      	strh	r3, [r4, #12]
 800b9bc:	4632      	mov	r2, r6
 800b9be:	463b      	mov	r3, r7
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c6:	f000 b837 	b.w	800ba38 <_write_r>

0800b9ca <__sseek>:
 800b9ca:	b510      	push	{r4, lr}
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d2:	f000 ff95 	bl	800c900 <_lseek_r>
 800b9d6:	1c43      	adds	r3, r0, #1
 800b9d8:	89a3      	ldrh	r3, [r4, #12]
 800b9da:	bf15      	itete	ne
 800b9dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9e6:	81a3      	strheq	r3, [r4, #12]
 800b9e8:	bf18      	it	ne
 800b9ea:	81a3      	strhne	r3, [r4, #12]
 800b9ec:	bd10      	pop	{r4, pc}

0800b9ee <__sclose>:
 800b9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f2:	f000 b833 	b.w	800ba5c <_close_r>
	...

0800b9f8 <_vsiprintf_r>:
 800b9f8:	b500      	push	{lr}
 800b9fa:	b09b      	sub	sp, #108	; 0x6c
 800b9fc:	9100      	str	r1, [sp, #0]
 800b9fe:	9104      	str	r1, [sp, #16]
 800ba00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ba04:	9105      	str	r1, [sp, #20]
 800ba06:	9102      	str	r1, [sp, #8]
 800ba08:	4905      	ldr	r1, [pc, #20]	; (800ba20 <_vsiprintf_r+0x28>)
 800ba0a:	9103      	str	r1, [sp, #12]
 800ba0c:	4669      	mov	r1, sp
 800ba0e:	f001 fbdf 	bl	800d1d0 <_svfiprintf_r>
 800ba12:	9b00      	ldr	r3, [sp, #0]
 800ba14:	2200      	movs	r2, #0
 800ba16:	701a      	strb	r2, [r3, #0]
 800ba18:	b01b      	add	sp, #108	; 0x6c
 800ba1a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba1e:	bf00      	nop
 800ba20:	ffff0208 	.word	0xffff0208

0800ba24 <vsiprintf>:
 800ba24:	4613      	mov	r3, r2
 800ba26:	460a      	mov	r2, r1
 800ba28:	4601      	mov	r1, r0
 800ba2a:	4802      	ldr	r0, [pc, #8]	; (800ba34 <vsiprintf+0x10>)
 800ba2c:	6800      	ldr	r0, [r0, #0]
 800ba2e:	f7ff bfe3 	b.w	800b9f8 <_vsiprintf_r>
 800ba32:	bf00      	nop
 800ba34:	20000030 	.word	0x20000030

0800ba38 <_write_r>:
 800ba38:	b538      	push	{r3, r4, r5, lr}
 800ba3a:	4d07      	ldr	r5, [pc, #28]	; (800ba58 <_write_r+0x20>)
 800ba3c:	4604      	mov	r4, r0
 800ba3e:	4608      	mov	r0, r1
 800ba40:	4611      	mov	r1, r2
 800ba42:	2200      	movs	r2, #0
 800ba44:	602a      	str	r2, [r5, #0]
 800ba46:	461a      	mov	r2, r3
 800ba48:	f7f7 fe09 	bl	800365e <_write>
 800ba4c:	1c43      	adds	r3, r0, #1
 800ba4e:	d102      	bne.n	800ba56 <_write_r+0x1e>
 800ba50:	682b      	ldr	r3, [r5, #0]
 800ba52:	b103      	cbz	r3, 800ba56 <_write_r+0x1e>
 800ba54:	6023      	str	r3, [r4, #0]
 800ba56:	bd38      	pop	{r3, r4, r5, pc}
 800ba58:	20005664 	.word	0x20005664

0800ba5c <_close_r>:
 800ba5c:	b538      	push	{r3, r4, r5, lr}
 800ba5e:	4d06      	ldr	r5, [pc, #24]	; (800ba78 <_close_r+0x1c>)
 800ba60:	2300      	movs	r3, #0
 800ba62:	4604      	mov	r4, r0
 800ba64:	4608      	mov	r0, r1
 800ba66:	602b      	str	r3, [r5, #0]
 800ba68:	f7f7 fe15 	bl	8003696 <_close>
 800ba6c:	1c43      	adds	r3, r0, #1
 800ba6e:	d102      	bne.n	800ba76 <_close_r+0x1a>
 800ba70:	682b      	ldr	r3, [r5, #0]
 800ba72:	b103      	cbz	r3, 800ba76 <_close_r+0x1a>
 800ba74:	6023      	str	r3, [r4, #0]
 800ba76:	bd38      	pop	{r3, r4, r5, pc}
 800ba78:	20005664 	.word	0x20005664

0800ba7c <quorem>:
 800ba7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba80:	6903      	ldr	r3, [r0, #16]
 800ba82:	690c      	ldr	r4, [r1, #16]
 800ba84:	42a3      	cmp	r3, r4
 800ba86:	4607      	mov	r7, r0
 800ba88:	f2c0 8081 	blt.w	800bb8e <quorem+0x112>
 800ba8c:	3c01      	subs	r4, #1
 800ba8e:	f101 0814 	add.w	r8, r1, #20
 800ba92:	f100 0514 	add.w	r5, r0, #20
 800ba96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba9a:	9301      	str	r3, [sp, #4]
 800ba9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800baa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800baa4:	3301      	adds	r3, #1
 800baa6:	429a      	cmp	r2, r3
 800baa8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800baac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bab0:	fbb2 f6f3 	udiv	r6, r2, r3
 800bab4:	d331      	bcc.n	800bb1a <quorem+0x9e>
 800bab6:	f04f 0e00 	mov.w	lr, #0
 800baba:	4640      	mov	r0, r8
 800babc:	46ac      	mov	ip, r5
 800babe:	46f2      	mov	sl, lr
 800bac0:	f850 2b04 	ldr.w	r2, [r0], #4
 800bac4:	b293      	uxth	r3, r2
 800bac6:	fb06 e303 	mla	r3, r6, r3, lr
 800baca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bace:	b29b      	uxth	r3, r3
 800bad0:	ebaa 0303 	sub.w	r3, sl, r3
 800bad4:	f8dc a000 	ldr.w	sl, [ip]
 800bad8:	0c12      	lsrs	r2, r2, #16
 800bada:	fa13 f38a 	uxtah	r3, r3, sl
 800bade:	fb06 e202 	mla	r2, r6, r2, lr
 800bae2:	9300      	str	r3, [sp, #0]
 800bae4:	9b00      	ldr	r3, [sp, #0]
 800bae6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800baea:	b292      	uxth	r2, r2
 800baec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800baf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800baf4:	f8bd 3000 	ldrh.w	r3, [sp]
 800baf8:	4581      	cmp	r9, r0
 800bafa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bafe:	f84c 3b04 	str.w	r3, [ip], #4
 800bb02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bb06:	d2db      	bcs.n	800bac0 <quorem+0x44>
 800bb08:	f855 300b 	ldr.w	r3, [r5, fp]
 800bb0c:	b92b      	cbnz	r3, 800bb1a <quorem+0x9e>
 800bb0e:	9b01      	ldr	r3, [sp, #4]
 800bb10:	3b04      	subs	r3, #4
 800bb12:	429d      	cmp	r5, r3
 800bb14:	461a      	mov	r2, r3
 800bb16:	d32e      	bcc.n	800bb76 <quorem+0xfa>
 800bb18:	613c      	str	r4, [r7, #16]
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	f001 f998 	bl	800ce50 <__mcmp>
 800bb20:	2800      	cmp	r0, #0
 800bb22:	db24      	blt.n	800bb6e <quorem+0xf2>
 800bb24:	3601      	adds	r6, #1
 800bb26:	4628      	mov	r0, r5
 800bb28:	f04f 0c00 	mov.w	ip, #0
 800bb2c:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb30:	f8d0 e000 	ldr.w	lr, [r0]
 800bb34:	b293      	uxth	r3, r2
 800bb36:	ebac 0303 	sub.w	r3, ip, r3
 800bb3a:	0c12      	lsrs	r2, r2, #16
 800bb3c:	fa13 f38e 	uxtah	r3, r3, lr
 800bb40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bb44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb4e:	45c1      	cmp	r9, r8
 800bb50:	f840 3b04 	str.w	r3, [r0], #4
 800bb54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bb58:	d2e8      	bcs.n	800bb2c <quorem+0xb0>
 800bb5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb62:	b922      	cbnz	r2, 800bb6e <quorem+0xf2>
 800bb64:	3b04      	subs	r3, #4
 800bb66:	429d      	cmp	r5, r3
 800bb68:	461a      	mov	r2, r3
 800bb6a:	d30a      	bcc.n	800bb82 <quorem+0x106>
 800bb6c:	613c      	str	r4, [r7, #16]
 800bb6e:	4630      	mov	r0, r6
 800bb70:	b003      	add	sp, #12
 800bb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb76:	6812      	ldr	r2, [r2, #0]
 800bb78:	3b04      	subs	r3, #4
 800bb7a:	2a00      	cmp	r2, #0
 800bb7c:	d1cc      	bne.n	800bb18 <quorem+0x9c>
 800bb7e:	3c01      	subs	r4, #1
 800bb80:	e7c7      	b.n	800bb12 <quorem+0x96>
 800bb82:	6812      	ldr	r2, [r2, #0]
 800bb84:	3b04      	subs	r3, #4
 800bb86:	2a00      	cmp	r2, #0
 800bb88:	d1f0      	bne.n	800bb6c <quorem+0xf0>
 800bb8a:	3c01      	subs	r4, #1
 800bb8c:	e7eb      	b.n	800bb66 <quorem+0xea>
 800bb8e:	2000      	movs	r0, #0
 800bb90:	e7ee      	b.n	800bb70 <quorem+0xf4>
 800bb92:	0000      	movs	r0, r0
 800bb94:	0000      	movs	r0, r0
	...

0800bb98 <_dtoa_r>:
 800bb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb9c:	ed2d 8b04 	vpush	{d8-d9}
 800bba0:	ec57 6b10 	vmov	r6, r7, d0
 800bba4:	b093      	sub	sp, #76	; 0x4c
 800bba6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bba8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bbac:	9106      	str	r1, [sp, #24]
 800bbae:	ee10 aa10 	vmov	sl, s0
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	9209      	str	r2, [sp, #36]	; 0x24
 800bbb6:	930c      	str	r3, [sp, #48]	; 0x30
 800bbb8:	46bb      	mov	fp, r7
 800bbba:	b975      	cbnz	r5, 800bbda <_dtoa_r+0x42>
 800bbbc:	2010      	movs	r0, #16
 800bbbe:	f000 feb1 	bl	800c924 <malloc>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	6260      	str	r0, [r4, #36]	; 0x24
 800bbc6:	b920      	cbnz	r0, 800bbd2 <_dtoa_r+0x3a>
 800bbc8:	4ba7      	ldr	r3, [pc, #668]	; (800be68 <_dtoa_r+0x2d0>)
 800bbca:	21ea      	movs	r1, #234	; 0xea
 800bbcc:	48a7      	ldr	r0, [pc, #668]	; (800be6c <_dtoa_r+0x2d4>)
 800bbce:	f001 fc11 	bl	800d3f4 <__assert_func>
 800bbd2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bbd6:	6005      	str	r5, [r0, #0]
 800bbd8:	60c5      	str	r5, [r0, #12]
 800bbda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbdc:	6819      	ldr	r1, [r3, #0]
 800bbde:	b151      	cbz	r1, 800bbf6 <_dtoa_r+0x5e>
 800bbe0:	685a      	ldr	r2, [r3, #4]
 800bbe2:	604a      	str	r2, [r1, #4]
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	4093      	lsls	r3, r2
 800bbe8:	608b      	str	r3, [r1, #8]
 800bbea:	4620      	mov	r0, r4
 800bbec:	f000 feee 	bl	800c9cc <_Bfree>
 800bbf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	601a      	str	r2, [r3, #0]
 800bbf6:	1e3b      	subs	r3, r7, #0
 800bbf8:	bfaa      	itet	ge
 800bbfa:	2300      	movge	r3, #0
 800bbfc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bc00:	f8c8 3000 	strge.w	r3, [r8]
 800bc04:	4b9a      	ldr	r3, [pc, #616]	; (800be70 <_dtoa_r+0x2d8>)
 800bc06:	bfbc      	itt	lt
 800bc08:	2201      	movlt	r2, #1
 800bc0a:	f8c8 2000 	strlt.w	r2, [r8]
 800bc0e:	ea33 030b 	bics.w	r3, r3, fp
 800bc12:	d11b      	bne.n	800bc4c <_dtoa_r+0xb4>
 800bc14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc16:	f242 730f 	movw	r3, #9999	; 0x270f
 800bc1a:	6013      	str	r3, [r2, #0]
 800bc1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc20:	4333      	orrs	r3, r6
 800bc22:	f000 8592 	beq.w	800c74a <_dtoa_r+0xbb2>
 800bc26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc28:	b963      	cbnz	r3, 800bc44 <_dtoa_r+0xac>
 800bc2a:	4b92      	ldr	r3, [pc, #584]	; (800be74 <_dtoa_r+0x2dc>)
 800bc2c:	e022      	b.n	800bc74 <_dtoa_r+0xdc>
 800bc2e:	4b92      	ldr	r3, [pc, #584]	; (800be78 <_dtoa_r+0x2e0>)
 800bc30:	9301      	str	r3, [sp, #4]
 800bc32:	3308      	adds	r3, #8
 800bc34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bc36:	6013      	str	r3, [r2, #0]
 800bc38:	9801      	ldr	r0, [sp, #4]
 800bc3a:	b013      	add	sp, #76	; 0x4c
 800bc3c:	ecbd 8b04 	vpop	{d8-d9}
 800bc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc44:	4b8b      	ldr	r3, [pc, #556]	; (800be74 <_dtoa_r+0x2dc>)
 800bc46:	9301      	str	r3, [sp, #4]
 800bc48:	3303      	adds	r3, #3
 800bc4a:	e7f3      	b.n	800bc34 <_dtoa_r+0x9c>
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	2300      	movs	r3, #0
 800bc50:	4650      	mov	r0, sl
 800bc52:	4659      	mov	r1, fp
 800bc54:	f7f4 ff38 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc58:	ec4b ab19 	vmov	d9, sl, fp
 800bc5c:	4680      	mov	r8, r0
 800bc5e:	b158      	cbz	r0, 800bc78 <_dtoa_r+0xe0>
 800bc60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc62:	2301      	movs	r3, #1
 800bc64:	6013      	str	r3, [r2, #0]
 800bc66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f000 856b 	beq.w	800c744 <_dtoa_r+0xbac>
 800bc6e:	4883      	ldr	r0, [pc, #524]	; (800be7c <_dtoa_r+0x2e4>)
 800bc70:	6018      	str	r0, [r3, #0]
 800bc72:	1e43      	subs	r3, r0, #1
 800bc74:	9301      	str	r3, [sp, #4]
 800bc76:	e7df      	b.n	800bc38 <_dtoa_r+0xa0>
 800bc78:	ec4b ab10 	vmov	d0, sl, fp
 800bc7c:	aa10      	add	r2, sp, #64	; 0x40
 800bc7e:	a911      	add	r1, sp, #68	; 0x44
 800bc80:	4620      	mov	r0, r4
 800bc82:	f001 f98b 	bl	800cf9c <__d2b>
 800bc86:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bc8a:	ee08 0a10 	vmov	s16, r0
 800bc8e:	2d00      	cmp	r5, #0
 800bc90:	f000 8084 	beq.w	800bd9c <_dtoa_r+0x204>
 800bc94:	ee19 3a90 	vmov	r3, s19
 800bc98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc9c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bca0:	4656      	mov	r6, sl
 800bca2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bca6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bcaa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bcae:	4b74      	ldr	r3, [pc, #464]	; (800be80 <_dtoa_r+0x2e8>)
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	4630      	mov	r0, r6
 800bcb4:	4639      	mov	r1, r7
 800bcb6:	f7f4 fae7 	bl	8000288 <__aeabi_dsub>
 800bcba:	a365      	add	r3, pc, #404	; (adr r3, 800be50 <_dtoa_r+0x2b8>)
 800bcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc0:	f7f4 fc9a 	bl	80005f8 <__aeabi_dmul>
 800bcc4:	a364      	add	r3, pc, #400	; (adr r3, 800be58 <_dtoa_r+0x2c0>)
 800bcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcca:	f7f4 fadf 	bl	800028c <__adddf3>
 800bcce:	4606      	mov	r6, r0
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	460f      	mov	r7, r1
 800bcd4:	f7f4 fc26 	bl	8000524 <__aeabi_i2d>
 800bcd8:	a361      	add	r3, pc, #388	; (adr r3, 800be60 <_dtoa_r+0x2c8>)
 800bcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcde:	f7f4 fc8b 	bl	80005f8 <__aeabi_dmul>
 800bce2:	4602      	mov	r2, r0
 800bce4:	460b      	mov	r3, r1
 800bce6:	4630      	mov	r0, r6
 800bce8:	4639      	mov	r1, r7
 800bcea:	f7f4 facf 	bl	800028c <__adddf3>
 800bcee:	4606      	mov	r6, r0
 800bcf0:	460f      	mov	r7, r1
 800bcf2:	f7f4 ff31 	bl	8000b58 <__aeabi_d2iz>
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	9000      	str	r0, [sp, #0]
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	4639      	mov	r1, r7
 800bd00:	f7f4 feec 	bl	8000adc <__aeabi_dcmplt>
 800bd04:	b150      	cbz	r0, 800bd1c <_dtoa_r+0x184>
 800bd06:	9800      	ldr	r0, [sp, #0]
 800bd08:	f7f4 fc0c 	bl	8000524 <__aeabi_i2d>
 800bd0c:	4632      	mov	r2, r6
 800bd0e:	463b      	mov	r3, r7
 800bd10:	f7f4 feda 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd14:	b910      	cbnz	r0, 800bd1c <_dtoa_r+0x184>
 800bd16:	9b00      	ldr	r3, [sp, #0]
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	9300      	str	r3, [sp, #0]
 800bd1c:	9b00      	ldr	r3, [sp, #0]
 800bd1e:	2b16      	cmp	r3, #22
 800bd20:	d85a      	bhi.n	800bdd8 <_dtoa_r+0x240>
 800bd22:	9a00      	ldr	r2, [sp, #0]
 800bd24:	4b57      	ldr	r3, [pc, #348]	; (800be84 <_dtoa_r+0x2ec>)
 800bd26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2e:	ec51 0b19 	vmov	r0, r1, d9
 800bd32:	f7f4 fed3 	bl	8000adc <__aeabi_dcmplt>
 800bd36:	2800      	cmp	r0, #0
 800bd38:	d050      	beq.n	800bddc <_dtoa_r+0x244>
 800bd3a:	9b00      	ldr	r3, [sp, #0]
 800bd3c:	3b01      	subs	r3, #1
 800bd3e:	9300      	str	r3, [sp, #0]
 800bd40:	2300      	movs	r3, #0
 800bd42:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd46:	1b5d      	subs	r5, r3, r5
 800bd48:	1e6b      	subs	r3, r5, #1
 800bd4a:	9305      	str	r3, [sp, #20]
 800bd4c:	bf45      	ittet	mi
 800bd4e:	f1c5 0301 	rsbmi	r3, r5, #1
 800bd52:	9304      	strmi	r3, [sp, #16]
 800bd54:	2300      	movpl	r3, #0
 800bd56:	2300      	movmi	r3, #0
 800bd58:	bf4c      	ite	mi
 800bd5a:	9305      	strmi	r3, [sp, #20]
 800bd5c:	9304      	strpl	r3, [sp, #16]
 800bd5e:	9b00      	ldr	r3, [sp, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	db3d      	blt.n	800bde0 <_dtoa_r+0x248>
 800bd64:	9b05      	ldr	r3, [sp, #20]
 800bd66:	9a00      	ldr	r2, [sp, #0]
 800bd68:	920a      	str	r2, [sp, #40]	; 0x28
 800bd6a:	4413      	add	r3, r2
 800bd6c:	9305      	str	r3, [sp, #20]
 800bd6e:	2300      	movs	r3, #0
 800bd70:	9307      	str	r3, [sp, #28]
 800bd72:	9b06      	ldr	r3, [sp, #24]
 800bd74:	2b09      	cmp	r3, #9
 800bd76:	f200 8089 	bhi.w	800be8c <_dtoa_r+0x2f4>
 800bd7a:	2b05      	cmp	r3, #5
 800bd7c:	bfc4      	itt	gt
 800bd7e:	3b04      	subgt	r3, #4
 800bd80:	9306      	strgt	r3, [sp, #24]
 800bd82:	9b06      	ldr	r3, [sp, #24]
 800bd84:	f1a3 0302 	sub.w	r3, r3, #2
 800bd88:	bfcc      	ite	gt
 800bd8a:	2500      	movgt	r5, #0
 800bd8c:	2501      	movle	r5, #1
 800bd8e:	2b03      	cmp	r3, #3
 800bd90:	f200 8087 	bhi.w	800bea2 <_dtoa_r+0x30a>
 800bd94:	e8df f003 	tbb	[pc, r3]
 800bd98:	59383a2d 	.word	0x59383a2d
 800bd9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bda0:	441d      	add	r5, r3
 800bda2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bda6:	2b20      	cmp	r3, #32
 800bda8:	bfc1      	itttt	gt
 800bdaa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bdae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bdb2:	fa0b f303 	lslgt.w	r3, fp, r3
 800bdb6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bdba:	bfda      	itte	le
 800bdbc:	f1c3 0320 	rsble	r3, r3, #32
 800bdc0:	fa06 f003 	lslle.w	r0, r6, r3
 800bdc4:	4318      	orrgt	r0, r3
 800bdc6:	f7f4 fb9d 	bl	8000504 <__aeabi_ui2d>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	4606      	mov	r6, r0
 800bdce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bdd2:	3d01      	subs	r5, #1
 800bdd4:	930e      	str	r3, [sp, #56]	; 0x38
 800bdd6:	e76a      	b.n	800bcae <_dtoa_r+0x116>
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e7b2      	b.n	800bd42 <_dtoa_r+0x1aa>
 800bddc:	900b      	str	r0, [sp, #44]	; 0x2c
 800bdde:	e7b1      	b.n	800bd44 <_dtoa_r+0x1ac>
 800bde0:	9b04      	ldr	r3, [sp, #16]
 800bde2:	9a00      	ldr	r2, [sp, #0]
 800bde4:	1a9b      	subs	r3, r3, r2
 800bde6:	9304      	str	r3, [sp, #16]
 800bde8:	4253      	negs	r3, r2
 800bdea:	9307      	str	r3, [sp, #28]
 800bdec:	2300      	movs	r3, #0
 800bdee:	930a      	str	r3, [sp, #40]	; 0x28
 800bdf0:	e7bf      	b.n	800bd72 <_dtoa_r+0x1da>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	9308      	str	r3, [sp, #32]
 800bdf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	dc55      	bgt.n	800bea8 <_dtoa_r+0x310>
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800be02:	461a      	mov	r2, r3
 800be04:	9209      	str	r2, [sp, #36]	; 0x24
 800be06:	e00c      	b.n	800be22 <_dtoa_r+0x28a>
 800be08:	2301      	movs	r3, #1
 800be0a:	e7f3      	b.n	800bdf4 <_dtoa_r+0x25c>
 800be0c:	2300      	movs	r3, #0
 800be0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be10:	9308      	str	r3, [sp, #32]
 800be12:	9b00      	ldr	r3, [sp, #0]
 800be14:	4413      	add	r3, r2
 800be16:	9302      	str	r3, [sp, #8]
 800be18:	3301      	adds	r3, #1
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	9303      	str	r3, [sp, #12]
 800be1e:	bfb8      	it	lt
 800be20:	2301      	movlt	r3, #1
 800be22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800be24:	2200      	movs	r2, #0
 800be26:	6042      	str	r2, [r0, #4]
 800be28:	2204      	movs	r2, #4
 800be2a:	f102 0614 	add.w	r6, r2, #20
 800be2e:	429e      	cmp	r6, r3
 800be30:	6841      	ldr	r1, [r0, #4]
 800be32:	d93d      	bls.n	800beb0 <_dtoa_r+0x318>
 800be34:	4620      	mov	r0, r4
 800be36:	f000 fd89 	bl	800c94c <_Balloc>
 800be3a:	9001      	str	r0, [sp, #4]
 800be3c:	2800      	cmp	r0, #0
 800be3e:	d13b      	bne.n	800beb8 <_dtoa_r+0x320>
 800be40:	4b11      	ldr	r3, [pc, #68]	; (800be88 <_dtoa_r+0x2f0>)
 800be42:	4602      	mov	r2, r0
 800be44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800be48:	e6c0      	b.n	800bbcc <_dtoa_r+0x34>
 800be4a:	2301      	movs	r3, #1
 800be4c:	e7df      	b.n	800be0e <_dtoa_r+0x276>
 800be4e:	bf00      	nop
 800be50:	636f4361 	.word	0x636f4361
 800be54:	3fd287a7 	.word	0x3fd287a7
 800be58:	8b60c8b3 	.word	0x8b60c8b3
 800be5c:	3fc68a28 	.word	0x3fc68a28
 800be60:	509f79fb 	.word	0x509f79fb
 800be64:	3fd34413 	.word	0x3fd34413
 800be68:	0800dc6d 	.word	0x0800dc6d
 800be6c:	0800dc84 	.word	0x0800dc84
 800be70:	7ff00000 	.word	0x7ff00000
 800be74:	0800dc69 	.word	0x0800dc69
 800be78:	0800dc60 	.word	0x0800dc60
 800be7c:	0800dc3d 	.word	0x0800dc3d
 800be80:	3ff80000 	.word	0x3ff80000
 800be84:	0800dd78 	.word	0x0800dd78
 800be88:	0800dcdf 	.word	0x0800dcdf
 800be8c:	2501      	movs	r5, #1
 800be8e:	2300      	movs	r3, #0
 800be90:	9306      	str	r3, [sp, #24]
 800be92:	9508      	str	r5, [sp, #32]
 800be94:	f04f 33ff 	mov.w	r3, #4294967295
 800be98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800be9c:	2200      	movs	r2, #0
 800be9e:	2312      	movs	r3, #18
 800bea0:	e7b0      	b.n	800be04 <_dtoa_r+0x26c>
 800bea2:	2301      	movs	r3, #1
 800bea4:	9308      	str	r3, [sp, #32]
 800bea6:	e7f5      	b.n	800be94 <_dtoa_r+0x2fc>
 800bea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beaa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800beae:	e7b8      	b.n	800be22 <_dtoa_r+0x28a>
 800beb0:	3101      	adds	r1, #1
 800beb2:	6041      	str	r1, [r0, #4]
 800beb4:	0052      	lsls	r2, r2, #1
 800beb6:	e7b8      	b.n	800be2a <_dtoa_r+0x292>
 800beb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800beba:	9a01      	ldr	r2, [sp, #4]
 800bebc:	601a      	str	r2, [r3, #0]
 800bebe:	9b03      	ldr	r3, [sp, #12]
 800bec0:	2b0e      	cmp	r3, #14
 800bec2:	f200 809d 	bhi.w	800c000 <_dtoa_r+0x468>
 800bec6:	2d00      	cmp	r5, #0
 800bec8:	f000 809a 	beq.w	800c000 <_dtoa_r+0x468>
 800becc:	9b00      	ldr	r3, [sp, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	dd32      	ble.n	800bf38 <_dtoa_r+0x3a0>
 800bed2:	4ab7      	ldr	r2, [pc, #732]	; (800c1b0 <_dtoa_r+0x618>)
 800bed4:	f003 030f 	and.w	r3, r3, #15
 800bed8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bedc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bee0:	9b00      	ldr	r3, [sp, #0]
 800bee2:	05d8      	lsls	r0, r3, #23
 800bee4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bee8:	d516      	bpl.n	800bf18 <_dtoa_r+0x380>
 800beea:	4bb2      	ldr	r3, [pc, #712]	; (800c1b4 <_dtoa_r+0x61c>)
 800beec:	ec51 0b19 	vmov	r0, r1, d9
 800bef0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bef4:	f7f4 fcaa 	bl	800084c <__aeabi_ddiv>
 800bef8:	f007 070f 	and.w	r7, r7, #15
 800befc:	4682      	mov	sl, r0
 800befe:	468b      	mov	fp, r1
 800bf00:	2503      	movs	r5, #3
 800bf02:	4eac      	ldr	r6, [pc, #688]	; (800c1b4 <_dtoa_r+0x61c>)
 800bf04:	b957      	cbnz	r7, 800bf1c <_dtoa_r+0x384>
 800bf06:	4642      	mov	r2, r8
 800bf08:	464b      	mov	r3, r9
 800bf0a:	4650      	mov	r0, sl
 800bf0c:	4659      	mov	r1, fp
 800bf0e:	f7f4 fc9d 	bl	800084c <__aeabi_ddiv>
 800bf12:	4682      	mov	sl, r0
 800bf14:	468b      	mov	fp, r1
 800bf16:	e028      	b.n	800bf6a <_dtoa_r+0x3d2>
 800bf18:	2502      	movs	r5, #2
 800bf1a:	e7f2      	b.n	800bf02 <_dtoa_r+0x36a>
 800bf1c:	07f9      	lsls	r1, r7, #31
 800bf1e:	d508      	bpl.n	800bf32 <_dtoa_r+0x39a>
 800bf20:	4640      	mov	r0, r8
 800bf22:	4649      	mov	r1, r9
 800bf24:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bf28:	f7f4 fb66 	bl	80005f8 <__aeabi_dmul>
 800bf2c:	3501      	adds	r5, #1
 800bf2e:	4680      	mov	r8, r0
 800bf30:	4689      	mov	r9, r1
 800bf32:	107f      	asrs	r7, r7, #1
 800bf34:	3608      	adds	r6, #8
 800bf36:	e7e5      	b.n	800bf04 <_dtoa_r+0x36c>
 800bf38:	f000 809b 	beq.w	800c072 <_dtoa_r+0x4da>
 800bf3c:	9b00      	ldr	r3, [sp, #0]
 800bf3e:	4f9d      	ldr	r7, [pc, #628]	; (800c1b4 <_dtoa_r+0x61c>)
 800bf40:	425e      	negs	r6, r3
 800bf42:	4b9b      	ldr	r3, [pc, #620]	; (800c1b0 <_dtoa_r+0x618>)
 800bf44:	f006 020f 	and.w	r2, r6, #15
 800bf48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf50:	ec51 0b19 	vmov	r0, r1, d9
 800bf54:	f7f4 fb50 	bl	80005f8 <__aeabi_dmul>
 800bf58:	1136      	asrs	r6, r6, #4
 800bf5a:	4682      	mov	sl, r0
 800bf5c:	468b      	mov	fp, r1
 800bf5e:	2300      	movs	r3, #0
 800bf60:	2502      	movs	r5, #2
 800bf62:	2e00      	cmp	r6, #0
 800bf64:	d17a      	bne.n	800c05c <_dtoa_r+0x4c4>
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d1d3      	bne.n	800bf12 <_dtoa_r+0x37a>
 800bf6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f000 8082 	beq.w	800c076 <_dtoa_r+0x4de>
 800bf72:	4b91      	ldr	r3, [pc, #580]	; (800c1b8 <_dtoa_r+0x620>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	4650      	mov	r0, sl
 800bf78:	4659      	mov	r1, fp
 800bf7a:	f7f4 fdaf 	bl	8000adc <__aeabi_dcmplt>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d079      	beq.n	800c076 <_dtoa_r+0x4de>
 800bf82:	9b03      	ldr	r3, [sp, #12]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d076      	beq.n	800c076 <_dtoa_r+0x4de>
 800bf88:	9b02      	ldr	r3, [sp, #8]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	dd36      	ble.n	800bffc <_dtoa_r+0x464>
 800bf8e:	9b00      	ldr	r3, [sp, #0]
 800bf90:	4650      	mov	r0, sl
 800bf92:	4659      	mov	r1, fp
 800bf94:	1e5f      	subs	r7, r3, #1
 800bf96:	2200      	movs	r2, #0
 800bf98:	4b88      	ldr	r3, [pc, #544]	; (800c1bc <_dtoa_r+0x624>)
 800bf9a:	f7f4 fb2d 	bl	80005f8 <__aeabi_dmul>
 800bf9e:	9e02      	ldr	r6, [sp, #8]
 800bfa0:	4682      	mov	sl, r0
 800bfa2:	468b      	mov	fp, r1
 800bfa4:	3501      	adds	r5, #1
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	f7f4 fabc 	bl	8000524 <__aeabi_i2d>
 800bfac:	4652      	mov	r2, sl
 800bfae:	465b      	mov	r3, fp
 800bfb0:	f7f4 fb22 	bl	80005f8 <__aeabi_dmul>
 800bfb4:	4b82      	ldr	r3, [pc, #520]	; (800c1c0 <_dtoa_r+0x628>)
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f7f4 f968 	bl	800028c <__adddf3>
 800bfbc:	46d0      	mov	r8, sl
 800bfbe:	46d9      	mov	r9, fp
 800bfc0:	4682      	mov	sl, r0
 800bfc2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bfc6:	2e00      	cmp	r6, #0
 800bfc8:	d158      	bne.n	800c07c <_dtoa_r+0x4e4>
 800bfca:	4b7e      	ldr	r3, [pc, #504]	; (800c1c4 <_dtoa_r+0x62c>)
 800bfcc:	2200      	movs	r2, #0
 800bfce:	4640      	mov	r0, r8
 800bfd0:	4649      	mov	r1, r9
 800bfd2:	f7f4 f959 	bl	8000288 <__aeabi_dsub>
 800bfd6:	4652      	mov	r2, sl
 800bfd8:	465b      	mov	r3, fp
 800bfda:	4680      	mov	r8, r0
 800bfdc:	4689      	mov	r9, r1
 800bfde:	f7f4 fd9b 	bl	8000b18 <__aeabi_dcmpgt>
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	f040 8295 	bne.w	800c512 <_dtoa_r+0x97a>
 800bfe8:	4652      	mov	r2, sl
 800bfea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bfee:	4640      	mov	r0, r8
 800bff0:	4649      	mov	r1, r9
 800bff2:	f7f4 fd73 	bl	8000adc <__aeabi_dcmplt>
 800bff6:	2800      	cmp	r0, #0
 800bff8:	f040 8289 	bne.w	800c50e <_dtoa_r+0x976>
 800bffc:	ec5b ab19 	vmov	sl, fp, d9
 800c000:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c002:	2b00      	cmp	r3, #0
 800c004:	f2c0 8148 	blt.w	800c298 <_dtoa_r+0x700>
 800c008:	9a00      	ldr	r2, [sp, #0]
 800c00a:	2a0e      	cmp	r2, #14
 800c00c:	f300 8144 	bgt.w	800c298 <_dtoa_r+0x700>
 800c010:	4b67      	ldr	r3, [pc, #412]	; (800c1b0 <_dtoa_r+0x618>)
 800c012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c016:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c01a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f280 80d5 	bge.w	800c1cc <_dtoa_r+0x634>
 800c022:	9b03      	ldr	r3, [sp, #12]
 800c024:	2b00      	cmp	r3, #0
 800c026:	f300 80d1 	bgt.w	800c1cc <_dtoa_r+0x634>
 800c02a:	f040 826f 	bne.w	800c50c <_dtoa_r+0x974>
 800c02e:	4b65      	ldr	r3, [pc, #404]	; (800c1c4 <_dtoa_r+0x62c>)
 800c030:	2200      	movs	r2, #0
 800c032:	4640      	mov	r0, r8
 800c034:	4649      	mov	r1, r9
 800c036:	f7f4 fadf 	bl	80005f8 <__aeabi_dmul>
 800c03a:	4652      	mov	r2, sl
 800c03c:	465b      	mov	r3, fp
 800c03e:	f7f4 fd61 	bl	8000b04 <__aeabi_dcmpge>
 800c042:	9e03      	ldr	r6, [sp, #12]
 800c044:	4637      	mov	r7, r6
 800c046:	2800      	cmp	r0, #0
 800c048:	f040 8245 	bne.w	800c4d6 <_dtoa_r+0x93e>
 800c04c:	9d01      	ldr	r5, [sp, #4]
 800c04e:	2331      	movs	r3, #49	; 0x31
 800c050:	f805 3b01 	strb.w	r3, [r5], #1
 800c054:	9b00      	ldr	r3, [sp, #0]
 800c056:	3301      	adds	r3, #1
 800c058:	9300      	str	r3, [sp, #0]
 800c05a:	e240      	b.n	800c4de <_dtoa_r+0x946>
 800c05c:	07f2      	lsls	r2, r6, #31
 800c05e:	d505      	bpl.n	800c06c <_dtoa_r+0x4d4>
 800c060:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c064:	f7f4 fac8 	bl	80005f8 <__aeabi_dmul>
 800c068:	3501      	adds	r5, #1
 800c06a:	2301      	movs	r3, #1
 800c06c:	1076      	asrs	r6, r6, #1
 800c06e:	3708      	adds	r7, #8
 800c070:	e777      	b.n	800bf62 <_dtoa_r+0x3ca>
 800c072:	2502      	movs	r5, #2
 800c074:	e779      	b.n	800bf6a <_dtoa_r+0x3d2>
 800c076:	9f00      	ldr	r7, [sp, #0]
 800c078:	9e03      	ldr	r6, [sp, #12]
 800c07a:	e794      	b.n	800bfa6 <_dtoa_r+0x40e>
 800c07c:	9901      	ldr	r1, [sp, #4]
 800c07e:	4b4c      	ldr	r3, [pc, #304]	; (800c1b0 <_dtoa_r+0x618>)
 800c080:	4431      	add	r1, r6
 800c082:	910d      	str	r1, [sp, #52]	; 0x34
 800c084:	9908      	ldr	r1, [sp, #32]
 800c086:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c08a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c08e:	2900      	cmp	r1, #0
 800c090:	d043      	beq.n	800c11a <_dtoa_r+0x582>
 800c092:	494d      	ldr	r1, [pc, #308]	; (800c1c8 <_dtoa_r+0x630>)
 800c094:	2000      	movs	r0, #0
 800c096:	f7f4 fbd9 	bl	800084c <__aeabi_ddiv>
 800c09a:	4652      	mov	r2, sl
 800c09c:	465b      	mov	r3, fp
 800c09e:	f7f4 f8f3 	bl	8000288 <__aeabi_dsub>
 800c0a2:	9d01      	ldr	r5, [sp, #4]
 800c0a4:	4682      	mov	sl, r0
 800c0a6:	468b      	mov	fp, r1
 800c0a8:	4649      	mov	r1, r9
 800c0aa:	4640      	mov	r0, r8
 800c0ac:	f7f4 fd54 	bl	8000b58 <__aeabi_d2iz>
 800c0b0:	4606      	mov	r6, r0
 800c0b2:	f7f4 fa37 	bl	8000524 <__aeabi_i2d>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	4640      	mov	r0, r8
 800c0bc:	4649      	mov	r1, r9
 800c0be:	f7f4 f8e3 	bl	8000288 <__aeabi_dsub>
 800c0c2:	3630      	adds	r6, #48	; 0x30
 800c0c4:	f805 6b01 	strb.w	r6, [r5], #1
 800c0c8:	4652      	mov	r2, sl
 800c0ca:	465b      	mov	r3, fp
 800c0cc:	4680      	mov	r8, r0
 800c0ce:	4689      	mov	r9, r1
 800c0d0:	f7f4 fd04 	bl	8000adc <__aeabi_dcmplt>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d163      	bne.n	800c1a0 <_dtoa_r+0x608>
 800c0d8:	4642      	mov	r2, r8
 800c0da:	464b      	mov	r3, r9
 800c0dc:	4936      	ldr	r1, [pc, #216]	; (800c1b8 <_dtoa_r+0x620>)
 800c0de:	2000      	movs	r0, #0
 800c0e0:	f7f4 f8d2 	bl	8000288 <__aeabi_dsub>
 800c0e4:	4652      	mov	r2, sl
 800c0e6:	465b      	mov	r3, fp
 800c0e8:	f7f4 fcf8 	bl	8000adc <__aeabi_dcmplt>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	f040 80b5 	bne.w	800c25c <_dtoa_r+0x6c4>
 800c0f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0f4:	429d      	cmp	r5, r3
 800c0f6:	d081      	beq.n	800bffc <_dtoa_r+0x464>
 800c0f8:	4b30      	ldr	r3, [pc, #192]	; (800c1bc <_dtoa_r+0x624>)
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	4650      	mov	r0, sl
 800c0fe:	4659      	mov	r1, fp
 800c100:	f7f4 fa7a 	bl	80005f8 <__aeabi_dmul>
 800c104:	4b2d      	ldr	r3, [pc, #180]	; (800c1bc <_dtoa_r+0x624>)
 800c106:	4682      	mov	sl, r0
 800c108:	468b      	mov	fp, r1
 800c10a:	4640      	mov	r0, r8
 800c10c:	4649      	mov	r1, r9
 800c10e:	2200      	movs	r2, #0
 800c110:	f7f4 fa72 	bl	80005f8 <__aeabi_dmul>
 800c114:	4680      	mov	r8, r0
 800c116:	4689      	mov	r9, r1
 800c118:	e7c6      	b.n	800c0a8 <_dtoa_r+0x510>
 800c11a:	4650      	mov	r0, sl
 800c11c:	4659      	mov	r1, fp
 800c11e:	f7f4 fa6b 	bl	80005f8 <__aeabi_dmul>
 800c122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c124:	9d01      	ldr	r5, [sp, #4]
 800c126:	930f      	str	r3, [sp, #60]	; 0x3c
 800c128:	4682      	mov	sl, r0
 800c12a:	468b      	mov	fp, r1
 800c12c:	4649      	mov	r1, r9
 800c12e:	4640      	mov	r0, r8
 800c130:	f7f4 fd12 	bl	8000b58 <__aeabi_d2iz>
 800c134:	4606      	mov	r6, r0
 800c136:	f7f4 f9f5 	bl	8000524 <__aeabi_i2d>
 800c13a:	3630      	adds	r6, #48	; 0x30
 800c13c:	4602      	mov	r2, r0
 800c13e:	460b      	mov	r3, r1
 800c140:	4640      	mov	r0, r8
 800c142:	4649      	mov	r1, r9
 800c144:	f7f4 f8a0 	bl	8000288 <__aeabi_dsub>
 800c148:	f805 6b01 	strb.w	r6, [r5], #1
 800c14c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c14e:	429d      	cmp	r5, r3
 800c150:	4680      	mov	r8, r0
 800c152:	4689      	mov	r9, r1
 800c154:	f04f 0200 	mov.w	r2, #0
 800c158:	d124      	bne.n	800c1a4 <_dtoa_r+0x60c>
 800c15a:	4b1b      	ldr	r3, [pc, #108]	; (800c1c8 <_dtoa_r+0x630>)
 800c15c:	4650      	mov	r0, sl
 800c15e:	4659      	mov	r1, fp
 800c160:	f7f4 f894 	bl	800028c <__adddf3>
 800c164:	4602      	mov	r2, r0
 800c166:	460b      	mov	r3, r1
 800c168:	4640      	mov	r0, r8
 800c16a:	4649      	mov	r1, r9
 800c16c:	f7f4 fcd4 	bl	8000b18 <__aeabi_dcmpgt>
 800c170:	2800      	cmp	r0, #0
 800c172:	d173      	bne.n	800c25c <_dtoa_r+0x6c4>
 800c174:	4652      	mov	r2, sl
 800c176:	465b      	mov	r3, fp
 800c178:	4913      	ldr	r1, [pc, #76]	; (800c1c8 <_dtoa_r+0x630>)
 800c17a:	2000      	movs	r0, #0
 800c17c:	f7f4 f884 	bl	8000288 <__aeabi_dsub>
 800c180:	4602      	mov	r2, r0
 800c182:	460b      	mov	r3, r1
 800c184:	4640      	mov	r0, r8
 800c186:	4649      	mov	r1, r9
 800c188:	f7f4 fca8 	bl	8000adc <__aeabi_dcmplt>
 800c18c:	2800      	cmp	r0, #0
 800c18e:	f43f af35 	beq.w	800bffc <_dtoa_r+0x464>
 800c192:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c194:	1e6b      	subs	r3, r5, #1
 800c196:	930f      	str	r3, [sp, #60]	; 0x3c
 800c198:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c19c:	2b30      	cmp	r3, #48	; 0x30
 800c19e:	d0f8      	beq.n	800c192 <_dtoa_r+0x5fa>
 800c1a0:	9700      	str	r7, [sp, #0]
 800c1a2:	e049      	b.n	800c238 <_dtoa_r+0x6a0>
 800c1a4:	4b05      	ldr	r3, [pc, #20]	; (800c1bc <_dtoa_r+0x624>)
 800c1a6:	f7f4 fa27 	bl	80005f8 <__aeabi_dmul>
 800c1aa:	4680      	mov	r8, r0
 800c1ac:	4689      	mov	r9, r1
 800c1ae:	e7bd      	b.n	800c12c <_dtoa_r+0x594>
 800c1b0:	0800dd78 	.word	0x0800dd78
 800c1b4:	0800dd50 	.word	0x0800dd50
 800c1b8:	3ff00000 	.word	0x3ff00000
 800c1bc:	40240000 	.word	0x40240000
 800c1c0:	401c0000 	.word	0x401c0000
 800c1c4:	40140000 	.word	0x40140000
 800c1c8:	3fe00000 	.word	0x3fe00000
 800c1cc:	9d01      	ldr	r5, [sp, #4]
 800c1ce:	4656      	mov	r6, sl
 800c1d0:	465f      	mov	r7, fp
 800c1d2:	4642      	mov	r2, r8
 800c1d4:	464b      	mov	r3, r9
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	4639      	mov	r1, r7
 800c1da:	f7f4 fb37 	bl	800084c <__aeabi_ddiv>
 800c1de:	f7f4 fcbb 	bl	8000b58 <__aeabi_d2iz>
 800c1e2:	4682      	mov	sl, r0
 800c1e4:	f7f4 f99e 	bl	8000524 <__aeabi_i2d>
 800c1e8:	4642      	mov	r2, r8
 800c1ea:	464b      	mov	r3, r9
 800c1ec:	f7f4 fa04 	bl	80005f8 <__aeabi_dmul>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	4639      	mov	r1, r7
 800c1f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c1fc:	f7f4 f844 	bl	8000288 <__aeabi_dsub>
 800c200:	f805 6b01 	strb.w	r6, [r5], #1
 800c204:	9e01      	ldr	r6, [sp, #4]
 800c206:	9f03      	ldr	r7, [sp, #12]
 800c208:	1bae      	subs	r6, r5, r6
 800c20a:	42b7      	cmp	r7, r6
 800c20c:	4602      	mov	r2, r0
 800c20e:	460b      	mov	r3, r1
 800c210:	d135      	bne.n	800c27e <_dtoa_r+0x6e6>
 800c212:	f7f4 f83b 	bl	800028c <__adddf3>
 800c216:	4642      	mov	r2, r8
 800c218:	464b      	mov	r3, r9
 800c21a:	4606      	mov	r6, r0
 800c21c:	460f      	mov	r7, r1
 800c21e:	f7f4 fc7b 	bl	8000b18 <__aeabi_dcmpgt>
 800c222:	b9d0      	cbnz	r0, 800c25a <_dtoa_r+0x6c2>
 800c224:	4642      	mov	r2, r8
 800c226:	464b      	mov	r3, r9
 800c228:	4630      	mov	r0, r6
 800c22a:	4639      	mov	r1, r7
 800c22c:	f7f4 fc4c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c230:	b110      	cbz	r0, 800c238 <_dtoa_r+0x6a0>
 800c232:	f01a 0f01 	tst.w	sl, #1
 800c236:	d110      	bne.n	800c25a <_dtoa_r+0x6c2>
 800c238:	4620      	mov	r0, r4
 800c23a:	ee18 1a10 	vmov	r1, s16
 800c23e:	f000 fbc5 	bl	800c9cc <_Bfree>
 800c242:	2300      	movs	r3, #0
 800c244:	9800      	ldr	r0, [sp, #0]
 800c246:	702b      	strb	r3, [r5, #0]
 800c248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c24a:	3001      	adds	r0, #1
 800c24c:	6018      	str	r0, [r3, #0]
 800c24e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c250:	2b00      	cmp	r3, #0
 800c252:	f43f acf1 	beq.w	800bc38 <_dtoa_r+0xa0>
 800c256:	601d      	str	r5, [r3, #0]
 800c258:	e4ee      	b.n	800bc38 <_dtoa_r+0xa0>
 800c25a:	9f00      	ldr	r7, [sp, #0]
 800c25c:	462b      	mov	r3, r5
 800c25e:	461d      	mov	r5, r3
 800c260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c264:	2a39      	cmp	r2, #57	; 0x39
 800c266:	d106      	bne.n	800c276 <_dtoa_r+0x6de>
 800c268:	9a01      	ldr	r2, [sp, #4]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d1f7      	bne.n	800c25e <_dtoa_r+0x6c6>
 800c26e:	9901      	ldr	r1, [sp, #4]
 800c270:	2230      	movs	r2, #48	; 0x30
 800c272:	3701      	adds	r7, #1
 800c274:	700a      	strb	r2, [r1, #0]
 800c276:	781a      	ldrb	r2, [r3, #0]
 800c278:	3201      	adds	r2, #1
 800c27a:	701a      	strb	r2, [r3, #0]
 800c27c:	e790      	b.n	800c1a0 <_dtoa_r+0x608>
 800c27e:	4ba6      	ldr	r3, [pc, #664]	; (800c518 <_dtoa_r+0x980>)
 800c280:	2200      	movs	r2, #0
 800c282:	f7f4 f9b9 	bl	80005f8 <__aeabi_dmul>
 800c286:	2200      	movs	r2, #0
 800c288:	2300      	movs	r3, #0
 800c28a:	4606      	mov	r6, r0
 800c28c:	460f      	mov	r7, r1
 800c28e:	f7f4 fc1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c292:	2800      	cmp	r0, #0
 800c294:	d09d      	beq.n	800c1d2 <_dtoa_r+0x63a>
 800c296:	e7cf      	b.n	800c238 <_dtoa_r+0x6a0>
 800c298:	9a08      	ldr	r2, [sp, #32]
 800c29a:	2a00      	cmp	r2, #0
 800c29c:	f000 80d7 	beq.w	800c44e <_dtoa_r+0x8b6>
 800c2a0:	9a06      	ldr	r2, [sp, #24]
 800c2a2:	2a01      	cmp	r2, #1
 800c2a4:	f300 80ba 	bgt.w	800c41c <_dtoa_r+0x884>
 800c2a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2aa:	2a00      	cmp	r2, #0
 800c2ac:	f000 80b2 	beq.w	800c414 <_dtoa_r+0x87c>
 800c2b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c2b4:	9e07      	ldr	r6, [sp, #28]
 800c2b6:	9d04      	ldr	r5, [sp, #16]
 800c2b8:	9a04      	ldr	r2, [sp, #16]
 800c2ba:	441a      	add	r2, r3
 800c2bc:	9204      	str	r2, [sp, #16]
 800c2be:	9a05      	ldr	r2, [sp, #20]
 800c2c0:	2101      	movs	r1, #1
 800c2c2:	441a      	add	r2, r3
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	9205      	str	r2, [sp, #20]
 800c2c8:	f000 fc38 	bl	800cb3c <__i2b>
 800c2cc:	4607      	mov	r7, r0
 800c2ce:	2d00      	cmp	r5, #0
 800c2d0:	dd0c      	ble.n	800c2ec <_dtoa_r+0x754>
 800c2d2:	9b05      	ldr	r3, [sp, #20]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	dd09      	ble.n	800c2ec <_dtoa_r+0x754>
 800c2d8:	42ab      	cmp	r3, r5
 800c2da:	9a04      	ldr	r2, [sp, #16]
 800c2dc:	bfa8      	it	ge
 800c2de:	462b      	movge	r3, r5
 800c2e0:	1ad2      	subs	r2, r2, r3
 800c2e2:	9204      	str	r2, [sp, #16]
 800c2e4:	9a05      	ldr	r2, [sp, #20]
 800c2e6:	1aed      	subs	r5, r5, r3
 800c2e8:	1ad3      	subs	r3, r2, r3
 800c2ea:	9305      	str	r3, [sp, #20]
 800c2ec:	9b07      	ldr	r3, [sp, #28]
 800c2ee:	b31b      	cbz	r3, 800c338 <_dtoa_r+0x7a0>
 800c2f0:	9b08      	ldr	r3, [sp, #32]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	f000 80af 	beq.w	800c456 <_dtoa_r+0x8be>
 800c2f8:	2e00      	cmp	r6, #0
 800c2fa:	dd13      	ble.n	800c324 <_dtoa_r+0x78c>
 800c2fc:	4639      	mov	r1, r7
 800c2fe:	4632      	mov	r2, r6
 800c300:	4620      	mov	r0, r4
 800c302:	f000 fcdb 	bl	800ccbc <__pow5mult>
 800c306:	ee18 2a10 	vmov	r2, s16
 800c30a:	4601      	mov	r1, r0
 800c30c:	4607      	mov	r7, r0
 800c30e:	4620      	mov	r0, r4
 800c310:	f000 fc2a 	bl	800cb68 <__multiply>
 800c314:	ee18 1a10 	vmov	r1, s16
 800c318:	4680      	mov	r8, r0
 800c31a:	4620      	mov	r0, r4
 800c31c:	f000 fb56 	bl	800c9cc <_Bfree>
 800c320:	ee08 8a10 	vmov	s16, r8
 800c324:	9b07      	ldr	r3, [sp, #28]
 800c326:	1b9a      	subs	r2, r3, r6
 800c328:	d006      	beq.n	800c338 <_dtoa_r+0x7a0>
 800c32a:	ee18 1a10 	vmov	r1, s16
 800c32e:	4620      	mov	r0, r4
 800c330:	f000 fcc4 	bl	800ccbc <__pow5mult>
 800c334:	ee08 0a10 	vmov	s16, r0
 800c338:	2101      	movs	r1, #1
 800c33a:	4620      	mov	r0, r4
 800c33c:	f000 fbfe 	bl	800cb3c <__i2b>
 800c340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c342:	2b00      	cmp	r3, #0
 800c344:	4606      	mov	r6, r0
 800c346:	f340 8088 	ble.w	800c45a <_dtoa_r+0x8c2>
 800c34a:	461a      	mov	r2, r3
 800c34c:	4601      	mov	r1, r0
 800c34e:	4620      	mov	r0, r4
 800c350:	f000 fcb4 	bl	800ccbc <__pow5mult>
 800c354:	9b06      	ldr	r3, [sp, #24]
 800c356:	2b01      	cmp	r3, #1
 800c358:	4606      	mov	r6, r0
 800c35a:	f340 8081 	ble.w	800c460 <_dtoa_r+0x8c8>
 800c35e:	f04f 0800 	mov.w	r8, #0
 800c362:	6933      	ldr	r3, [r6, #16]
 800c364:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c368:	6918      	ldr	r0, [r3, #16]
 800c36a:	f000 fb97 	bl	800ca9c <__hi0bits>
 800c36e:	f1c0 0020 	rsb	r0, r0, #32
 800c372:	9b05      	ldr	r3, [sp, #20]
 800c374:	4418      	add	r0, r3
 800c376:	f010 001f 	ands.w	r0, r0, #31
 800c37a:	f000 8092 	beq.w	800c4a2 <_dtoa_r+0x90a>
 800c37e:	f1c0 0320 	rsb	r3, r0, #32
 800c382:	2b04      	cmp	r3, #4
 800c384:	f340 808a 	ble.w	800c49c <_dtoa_r+0x904>
 800c388:	f1c0 001c 	rsb	r0, r0, #28
 800c38c:	9b04      	ldr	r3, [sp, #16]
 800c38e:	4403      	add	r3, r0
 800c390:	9304      	str	r3, [sp, #16]
 800c392:	9b05      	ldr	r3, [sp, #20]
 800c394:	4403      	add	r3, r0
 800c396:	4405      	add	r5, r0
 800c398:	9305      	str	r3, [sp, #20]
 800c39a:	9b04      	ldr	r3, [sp, #16]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	dd07      	ble.n	800c3b0 <_dtoa_r+0x818>
 800c3a0:	ee18 1a10 	vmov	r1, s16
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	f000 fce2 	bl	800cd70 <__lshift>
 800c3ac:	ee08 0a10 	vmov	s16, r0
 800c3b0:	9b05      	ldr	r3, [sp, #20]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	dd05      	ble.n	800c3c2 <_dtoa_r+0x82a>
 800c3b6:	4631      	mov	r1, r6
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f000 fcd8 	bl	800cd70 <__lshift>
 800c3c0:	4606      	mov	r6, r0
 800c3c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d06e      	beq.n	800c4a6 <_dtoa_r+0x90e>
 800c3c8:	ee18 0a10 	vmov	r0, s16
 800c3cc:	4631      	mov	r1, r6
 800c3ce:	f000 fd3f 	bl	800ce50 <__mcmp>
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	da67      	bge.n	800c4a6 <_dtoa_r+0x90e>
 800c3d6:	9b00      	ldr	r3, [sp, #0]
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	ee18 1a10 	vmov	r1, s16
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	220a      	movs	r2, #10
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f000 fb13 	bl	800ca10 <__multadd>
 800c3ea:	9b08      	ldr	r3, [sp, #32]
 800c3ec:	ee08 0a10 	vmov	s16, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	f000 81b1 	beq.w	800c758 <_dtoa_r+0xbc0>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	4639      	mov	r1, r7
 800c3fa:	220a      	movs	r2, #10
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f000 fb07 	bl	800ca10 <__multadd>
 800c402:	9b02      	ldr	r3, [sp, #8]
 800c404:	2b00      	cmp	r3, #0
 800c406:	4607      	mov	r7, r0
 800c408:	f300 808e 	bgt.w	800c528 <_dtoa_r+0x990>
 800c40c:	9b06      	ldr	r3, [sp, #24]
 800c40e:	2b02      	cmp	r3, #2
 800c410:	dc51      	bgt.n	800c4b6 <_dtoa_r+0x91e>
 800c412:	e089      	b.n	800c528 <_dtoa_r+0x990>
 800c414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c416:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c41a:	e74b      	b.n	800c2b4 <_dtoa_r+0x71c>
 800c41c:	9b03      	ldr	r3, [sp, #12]
 800c41e:	1e5e      	subs	r6, r3, #1
 800c420:	9b07      	ldr	r3, [sp, #28]
 800c422:	42b3      	cmp	r3, r6
 800c424:	bfbf      	itttt	lt
 800c426:	9b07      	ldrlt	r3, [sp, #28]
 800c428:	9607      	strlt	r6, [sp, #28]
 800c42a:	1af2      	sublt	r2, r6, r3
 800c42c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c42e:	bfb6      	itet	lt
 800c430:	189b      	addlt	r3, r3, r2
 800c432:	1b9e      	subge	r6, r3, r6
 800c434:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c436:	9b03      	ldr	r3, [sp, #12]
 800c438:	bfb8      	it	lt
 800c43a:	2600      	movlt	r6, #0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	bfb7      	itett	lt
 800c440:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c444:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c448:	1a9d      	sublt	r5, r3, r2
 800c44a:	2300      	movlt	r3, #0
 800c44c:	e734      	b.n	800c2b8 <_dtoa_r+0x720>
 800c44e:	9e07      	ldr	r6, [sp, #28]
 800c450:	9d04      	ldr	r5, [sp, #16]
 800c452:	9f08      	ldr	r7, [sp, #32]
 800c454:	e73b      	b.n	800c2ce <_dtoa_r+0x736>
 800c456:	9a07      	ldr	r2, [sp, #28]
 800c458:	e767      	b.n	800c32a <_dtoa_r+0x792>
 800c45a:	9b06      	ldr	r3, [sp, #24]
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	dc18      	bgt.n	800c492 <_dtoa_r+0x8fa>
 800c460:	f1ba 0f00 	cmp.w	sl, #0
 800c464:	d115      	bne.n	800c492 <_dtoa_r+0x8fa>
 800c466:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c46a:	b993      	cbnz	r3, 800c492 <_dtoa_r+0x8fa>
 800c46c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c470:	0d1b      	lsrs	r3, r3, #20
 800c472:	051b      	lsls	r3, r3, #20
 800c474:	b183      	cbz	r3, 800c498 <_dtoa_r+0x900>
 800c476:	9b04      	ldr	r3, [sp, #16]
 800c478:	3301      	adds	r3, #1
 800c47a:	9304      	str	r3, [sp, #16]
 800c47c:	9b05      	ldr	r3, [sp, #20]
 800c47e:	3301      	adds	r3, #1
 800c480:	9305      	str	r3, [sp, #20]
 800c482:	f04f 0801 	mov.w	r8, #1
 800c486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f47f af6a 	bne.w	800c362 <_dtoa_r+0x7ca>
 800c48e:	2001      	movs	r0, #1
 800c490:	e76f      	b.n	800c372 <_dtoa_r+0x7da>
 800c492:	f04f 0800 	mov.w	r8, #0
 800c496:	e7f6      	b.n	800c486 <_dtoa_r+0x8ee>
 800c498:	4698      	mov	r8, r3
 800c49a:	e7f4      	b.n	800c486 <_dtoa_r+0x8ee>
 800c49c:	f43f af7d 	beq.w	800c39a <_dtoa_r+0x802>
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	301c      	adds	r0, #28
 800c4a4:	e772      	b.n	800c38c <_dtoa_r+0x7f4>
 800c4a6:	9b03      	ldr	r3, [sp, #12]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	dc37      	bgt.n	800c51c <_dtoa_r+0x984>
 800c4ac:	9b06      	ldr	r3, [sp, #24]
 800c4ae:	2b02      	cmp	r3, #2
 800c4b0:	dd34      	ble.n	800c51c <_dtoa_r+0x984>
 800c4b2:	9b03      	ldr	r3, [sp, #12]
 800c4b4:	9302      	str	r3, [sp, #8]
 800c4b6:	9b02      	ldr	r3, [sp, #8]
 800c4b8:	b96b      	cbnz	r3, 800c4d6 <_dtoa_r+0x93e>
 800c4ba:	4631      	mov	r1, r6
 800c4bc:	2205      	movs	r2, #5
 800c4be:	4620      	mov	r0, r4
 800c4c0:	f000 faa6 	bl	800ca10 <__multadd>
 800c4c4:	4601      	mov	r1, r0
 800c4c6:	4606      	mov	r6, r0
 800c4c8:	ee18 0a10 	vmov	r0, s16
 800c4cc:	f000 fcc0 	bl	800ce50 <__mcmp>
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	f73f adbb 	bgt.w	800c04c <_dtoa_r+0x4b4>
 800c4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4d8:	9d01      	ldr	r5, [sp, #4]
 800c4da:	43db      	mvns	r3, r3
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	f04f 0800 	mov.w	r8, #0
 800c4e2:	4631      	mov	r1, r6
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	f000 fa71 	bl	800c9cc <_Bfree>
 800c4ea:	2f00      	cmp	r7, #0
 800c4ec:	f43f aea4 	beq.w	800c238 <_dtoa_r+0x6a0>
 800c4f0:	f1b8 0f00 	cmp.w	r8, #0
 800c4f4:	d005      	beq.n	800c502 <_dtoa_r+0x96a>
 800c4f6:	45b8      	cmp	r8, r7
 800c4f8:	d003      	beq.n	800c502 <_dtoa_r+0x96a>
 800c4fa:	4641      	mov	r1, r8
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	f000 fa65 	bl	800c9cc <_Bfree>
 800c502:	4639      	mov	r1, r7
 800c504:	4620      	mov	r0, r4
 800c506:	f000 fa61 	bl	800c9cc <_Bfree>
 800c50a:	e695      	b.n	800c238 <_dtoa_r+0x6a0>
 800c50c:	2600      	movs	r6, #0
 800c50e:	4637      	mov	r7, r6
 800c510:	e7e1      	b.n	800c4d6 <_dtoa_r+0x93e>
 800c512:	9700      	str	r7, [sp, #0]
 800c514:	4637      	mov	r7, r6
 800c516:	e599      	b.n	800c04c <_dtoa_r+0x4b4>
 800c518:	40240000 	.word	0x40240000
 800c51c:	9b08      	ldr	r3, [sp, #32]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	f000 80ca 	beq.w	800c6b8 <_dtoa_r+0xb20>
 800c524:	9b03      	ldr	r3, [sp, #12]
 800c526:	9302      	str	r3, [sp, #8]
 800c528:	2d00      	cmp	r5, #0
 800c52a:	dd05      	ble.n	800c538 <_dtoa_r+0x9a0>
 800c52c:	4639      	mov	r1, r7
 800c52e:	462a      	mov	r2, r5
 800c530:	4620      	mov	r0, r4
 800c532:	f000 fc1d 	bl	800cd70 <__lshift>
 800c536:	4607      	mov	r7, r0
 800c538:	f1b8 0f00 	cmp.w	r8, #0
 800c53c:	d05b      	beq.n	800c5f6 <_dtoa_r+0xa5e>
 800c53e:	6879      	ldr	r1, [r7, #4]
 800c540:	4620      	mov	r0, r4
 800c542:	f000 fa03 	bl	800c94c <_Balloc>
 800c546:	4605      	mov	r5, r0
 800c548:	b928      	cbnz	r0, 800c556 <_dtoa_r+0x9be>
 800c54a:	4b87      	ldr	r3, [pc, #540]	; (800c768 <_dtoa_r+0xbd0>)
 800c54c:	4602      	mov	r2, r0
 800c54e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c552:	f7ff bb3b 	b.w	800bbcc <_dtoa_r+0x34>
 800c556:	693a      	ldr	r2, [r7, #16]
 800c558:	3202      	adds	r2, #2
 800c55a:	0092      	lsls	r2, r2, #2
 800c55c:	f107 010c 	add.w	r1, r7, #12
 800c560:	300c      	adds	r0, #12
 800c562:	f7fe fc76 	bl	800ae52 <memcpy>
 800c566:	2201      	movs	r2, #1
 800c568:	4629      	mov	r1, r5
 800c56a:	4620      	mov	r0, r4
 800c56c:	f000 fc00 	bl	800cd70 <__lshift>
 800c570:	9b01      	ldr	r3, [sp, #4]
 800c572:	f103 0901 	add.w	r9, r3, #1
 800c576:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c57a:	4413      	add	r3, r2
 800c57c:	9305      	str	r3, [sp, #20]
 800c57e:	f00a 0301 	and.w	r3, sl, #1
 800c582:	46b8      	mov	r8, r7
 800c584:	9304      	str	r3, [sp, #16]
 800c586:	4607      	mov	r7, r0
 800c588:	4631      	mov	r1, r6
 800c58a:	ee18 0a10 	vmov	r0, s16
 800c58e:	f7ff fa75 	bl	800ba7c <quorem>
 800c592:	4641      	mov	r1, r8
 800c594:	9002      	str	r0, [sp, #8]
 800c596:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c59a:	ee18 0a10 	vmov	r0, s16
 800c59e:	f000 fc57 	bl	800ce50 <__mcmp>
 800c5a2:	463a      	mov	r2, r7
 800c5a4:	9003      	str	r0, [sp, #12]
 800c5a6:	4631      	mov	r1, r6
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f000 fc6d 	bl	800ce88 <__mdiff>
 800c5ae:	68c2      	ldr	r2, [r0, #12]
 800c5b0:	f109 3bff 	add.w	fp, r9, #4294967295
 800c5b4:	4605      	mov	r5, r0
 800c5b6:	bb02      	cbnz	r2, 800c5fa <_dtoa_r+0xa62>
 800c5b8:	4601      	mov	r1, r0
 800c5ba:	ee18 0a10 	vmov	r0, s16
 800c5be:	f000 fc47 	bl	800ce50 <__mcmp>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	9207      	str	r2, [sp, #28]
 800c5ca:	f000 f9ff 	bl	800c9cc <_Bfree>
 800c5ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c5d2:	ea43 0102 	orr.w	r1, r3, r2
 800c5d6:	9b04      	ldr	r3, [sp, #16]
 800c5d8:	430b      	orrs	r3, r1
 800c5da:	464d      	mov	r5, r9
 800c5dc:	d10f      	bne.n	800c5fe <_dtoa_r+0xa66>
 800c5de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c5e2:	d02a      	beq.n	800c63a <_dtoa_r+0xaa2>
 800c5e4:	9b03      	ldr	r3, [sp, #12]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	dd02      	ble.n	800c5f0 <_dtoa_r+0xa58>
 800c5ea:	9b02      	ldr	r3, [sp, #8]
 800c5ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c5f0:	f88b a000 	strb.w	sl, [fp]
 800c5f4:	e775      	b.n	800c4e2 <_dtoa_r+0x94a>
 800c5f6:	4638      	mov	r0, r7
 800c5f8:	e7ba      	b.n	800c570 <_dtoa_r+0x9d8>
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	e7e2      	b.n	800c5c4 <_dtoa_r+0xa2c>
 800c5fe:	9b03      	ldr	r3, [sp, #12]
 800c600:	2b00      	cmp	r3, #0
 800c602:	db04      	blt.n	800c60e <_dtoa_r+0xa76>
 800c604:	9906      	ldr	r1, [sp, #24]
 800c606:	430b      	orrs	r3, r1
 800c608:	9904      	ldr	r1, [sp, #16]
 800c60a:	430b      	orrs	r3, r1
 800c60c:	d122      	bne.n	800c654 <_dtoa_r+0xabc>
 800c60e:	2a00      	cmp	r2, #0
 800c610:	ddee      	ble.n	800c5f0 <_dtoa_r+0xa58>
 800c612:	ee18 1a10 	vmov	r1, s16
 800c616:	2201      	movs	r2, #1
 800c618:	4620      	mov	r0, r4
 800c61a:	f000 fba9 	bl	800cd70 <__lshift>
 800c61e:	4631      	mov	r1, r6
 800c620:	ee08 0a10 	vmov	s16, r0
 800c624:	f000 fc14 	bl	800ce50 <__mcmp>
 800c628:	2800      	cmp	r0, #0
 800c62a:	dc03      	bgt.n	800c634 <_dtoa_r+0xa9c>
 800c62c:	d1e0      	bne.n	800c5f0 <_dtoa_r+0xa58>
 800c62e:	f01a 0f01 	tst.w	sl, #1
 800c632:	d0dd      	beq.n	800c5f0 <_dtoa_r+0xa58>
 800c634:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c638:	d1d7      	bne.n	800c5ea <_dtoa_r+0xa52>
 800c63a:	2339      	movs	r3, #57	; 0x39
 800c63c:	f88b 3000 	strb.w	r3, [fp]
 800c640:	462b      	mov	r3, r5
 800c642:	461d      	mov	r5, r3
 800c644:	3b01      	subs	r3, #1
 800c646:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c64a:	2a39      	cmp	r2, #57	; 0x39
 800c64c:	d071      	beq.n	800c732 <_dtoa_r+0xb9a>
 800c64e:	3201      	adds	r2, #1
 800c650:	701a      	strb	r2, [r3, #0]
 800c652:	e746      	b.n	800c4e2 <_dtoa_r+0x94a>
 800c654:	2a00      	cmp	r2, #0
 800c656:	dd07      	ble.n	800c668 <_dtoa_r+0xad0>
 800c658:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c65c:	d0ed      	beq.n	800c63a <_dtoa_r+0xaa2>
 800c65e:	f10a 0301 	add.w	r3, sl, #1
 800c662:	f88b 3000 	strb.w	r3, [fp]
 800c666:	e73c      	b.n	800c4e2 <_dtoa_r+0x94a>
 800c668:	9b05      	ldr	r3, [sp, #20]
 800c66a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c66e:	4599      	cmp	r9, r3
 800c670:	d047      	beq.n	800c702 <_dtoa_r+0xb6a>
 800c672:	ee18 1a10 	vmov	r1, s16
 800c676:	2300      	movs	r3, #0
 800c678:	220a      	movs	r2, #10
 800c67a:	4620      	mov	r0, r4
 800c67c:	f000 f9c8 	bl	800ca10 <__multadd>
 800c680:	45b8      	cmp	r8, r7
 800c682:	ee08 0a10 	vmov	s16, r0
 800c686:	f04f 0300 	mov.w	r3, #0
 800c68a:	f04f 020a 	mov.w	r2, #10
 800c68e:	4641      	mov	r1, r8
 800c690:	4620      	mov	r0, r4
 800c692:	d106      	bne.n	800c6a2 <_dtoa_r+0xb0a>
 800c694:	f000 f9bc 	bl	800ca10 <__multadd>
 800c698:	4680      	mov	r8, r0
 800c69a:	4607      	mov	r7, r0
 800c69c:	f109 0901 	add.w	r9, r9, #1
 800c6a0:	e772      	b.n	800c588 <_dtoa_r+0x9f0>
 800c6a2:	f000 f9b5 	bl	800ca10 <__multadd>
 800c6a6:	4639      	mov	r1, r7
 800c6a8:	4680      	mov	r8, r0
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	220a      	movs	r2, #10
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	f000 f9ae 	bl	800ca10 <__multadd>
 800c6b4:	4607      	mov	r7, r0
 800c6b6:	e7f1      	b.n	800c69c <_dtoa_r+0xb04>
 800c6b8:	9b03      	ldr	r3, [sp, #12]
 800c6ba:	9302      	str	r3, [sp, #8]
 800c6bc:	9d01      	ldr	r5, [sp, #4]
 800c6be:	ee18 0a10 	vmov	r0, s16
 800c6c2:	4631      	mov	r1, r6
 800c6c4:	f7ff f9da 	bl	800ba7c <quorem>
 800c6c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c6cc:	9b01      	ldr	r3, [sp, #4]
 800c6ce:	f805 ab01 	strb.w	sl, [r5], #1
 800c6d2:	1aea      	subs	r2, r5, r3
 800c6d4:	9b02      	ldr	r3, [sp, #8]
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	dd09      	ble.n	800c6ee <_dtoa_r+0xb56>
 800c6da:	ee18 1a10 	vmov	r1, s16
 800c6de:	2300      	movs	r3, #0
 800c6e0:	220a      	movs	r2, #10
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	f000 f994 	bl	800ca10 <__multadd>
 800c6e8:	ee08 0a10 	vmov	s16, r0
 800c6ec:	e7e7      	b.n	800c6be <_dtoa_r+0xb26>
 800c6ee:	9b02      	ldr	r3, [sp, #8]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	bfc8      	it	gt
 800c6f4:	461d      	movgt	r5, r3
 800c6f6:	9b01      	ldr	r3, [sp, #4]
 800c6f8:	bfd8      	it	le
 800c6fa:	2501      	movle	r5, #1
 800c6fc:	441d      	add	r5, r3
 800c6fe:	f04f 0800 	mov.w	r8, #0
 800c702:	ee18 1a10 	vmov	r1, s16
 800c706:	2201      	movs	r2, #1
 800c708:	4620      	mov	r0, r4
 800c70a:	f000 fb31 	bl	800cd70 <__lshift>
 800c70e:	4631      	mov	r1, r6
 800c710:	ee08 0a10 	vmov	s16, r0
 800c714:	f000 fb9c 	bl	800ce50 <__mcmp>
 800c718:	2800      	cmp	r0, #0
 800c71a:	dc91      	bgt.n	800c640 <_dtoa_r+0xaa8>
 800c71c:	d102      	bne.n	800c724 <_dtoa_r+0xb8c>
 800c71e:	f01a 0f01 	tst.w	sl, #1
 800c722:	d18d      	bne.n	800c640 <_dtoa_r+0xaa8>
 800c724:	462b      	mov	r3, r5
 800c726:	461d      	mov	r5, r3
 800c728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c72c:	2a30      	cmp	r2, #48	; 0x30
 800c72e:	d0fa      	beq.n	800c726 <_dtoa_r+0xb8e>
 800c730:	e6d7      	b.n	800c4e2 <_dtoa_r+0x94a>
 800c732:	9a01      	ldr	r2, [sp, #4]
 800c734:	429a      	cmp	r2, r3
 800c736:	d184      	bne.n	800c642 <_dtoa_r+0xaaa>
 800c738:	9b00      	ldr	r3, [sp, #0]
 800c73a:	3301      	adds	r3, #1
 800c73c:	9300      	str	r3, [sp, #0]
 800c73e:	2331      	movs	r3, #49	; 0x31
 800c740:	7013      	strb	r3, [r2, #0]
 800c742:	e6ce      	b.n	800c4e2 <_dtoa_r+0x94a>
 800c744:	4b09      	ldr	r3, [pc, #36]	; (800c76c <_dtoa_r+0xbd4>)
 800c746:	f7ff ba95 	b.w	800bc74 <_dtoa_r+0xdc>
 800c74a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	f47f aa6e 	bne.w	800bc2e <_dtoa_r+0x96>
 800c752:	4b07      	ldr	r3, [pc, #28]	; (800c770 <_dtoa_r+0xbd8>)
 800c754:	f7ff ba8e 	b.w	800bc74 <_dtoa_r+0xdc>
 800c758:	9b02      	ldr	r3, [sp, #8]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	dcae      	bgt.n	800c6bc <_dtoa_r+0xb24>
 800c75e:	9b06      	ldr	r3, [sp, #24]
 800c760:	2b02      	cmp	r3, #2
 800c762:	f73f aea8 	bgt.w	800c4b6 <_dtoa_r+0x91e>
 800c766:	e7a9      	b.n	800c6bc <_dtoa_r+0xb24>
 800c768:	0800dcdf 	.word	0x0800dcdf
 800c76c:	0800dc3c 	.word	0x0800dc3c
 800c770:	0800dc60 	.word	0x0800dc60

0800c774 <__sflush_r>:
 800c774:	898a      	ldrh	r2, [r1, #12]
 800c776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c77a:	4605      	mov	r5, r0
 800c77c:	0710      	lsls	r0, r2, #28
 800c77e:	460c      	mov	r4, r1
 800c780:	d458      	bmi.n	800c834 <__sflush_r+0xc0>
 800c782:	684b      	ldr	r3, [r1, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	dc05      	bgt.n	800c794 <__sflush_r+0x20>
 800c788:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	dc02      	bgt.n	800c794 <__sflush_r+0x20>
 800c78e:	2000      	movs	r0, #0
 800c790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c794:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c796:	2e00      	cmp	r6, #0
 800c798:	d0f9      	beq.n	800c78e <__sflush_r+0x1a>
 800c79a:	2300      	movs	r3, #0
 800c79c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7a0:	682f      	ldr	r7, [r5, #0]
 800c7a2:	602b      	str	r3, [r5, #0]
 800c7a4:	d032      	beq.n	800c80c <__sflush_r+0x98>
 800c7a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c7a8:	89a3      	ldrh	r3, [r4, #12]
 800c7aa:	075a      	lsls	r2, r3, #29
 800c7ac:	d505      	bpl.n	800c7ba <__sflush_r+0x46>
 800c7ae:	6863      	ldr	r3, [r4, #4]
 800c7b0:	1ac0      	subs	r0, r0, r3
 800c7b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7b4:	b10b      	cbz	r3, 800c7ba <__sflush_r+0x46>
 800c7b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7b8:	1ac0      	subs	r0, r0, r3
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	4602      	mov	r2, r0
 800c7be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7c0:	6a21      	ldr	r1, [r4, #32]
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	47b0      	blx	r6
 800c7c6:	1c43      	adds	r3, r0, #1
 800c7c8:	89a3      	ldrh	r3, [r4, #12]
 800c7ca:	d106      	bne.n	800c7da <__sflush_r+0x66>
 800c7cc:	6829      	ldr	r1, [r5, #0]
 800c7ce:	291d      	cmp	r1, #29
 800c7d0:	d82c      	bhi.n	800c82c <__sflush_r+0xb8>
 800c7d2:	4a2a      	ldr	r2, [pc, #168]	; (800c87c <__sflush_r+0x108>)
 800c7d4:	40ca      	lsrs	r2, r1
 800c7d6:	07d6      	lsls	r6, r2, #31
 800c7d8:	d528      	bpl.n	800c82c <__sflush_r+0xb8>
 800c7da:	2200      	movs	r2, #0
 800c7dc:	6062      	str	r2, [r4, #4]
 800c7de:	04d9      	lsls	r1, r3, #19
 800c7e0:	6922      	ldr	r2, [r4, #16]
 800c7e2:	6022      	str	r2, [r4, #0]
 800c7e4:	d504      	bpl.n	800c7f0 <__sflush_r+0x7c>
 800c7e6:	1c42      	adds	r2, r0, #1
 800c7e8:	d101      	bne.n	800c7ee <__sflush_r+0x7a>
 800c7ea:	682b      	ldr	r3, [r5, #0]
 800c7ec:	b903      	cbnz	r3, 800c7f0 <__sflush_r+0x7c>
 800c7ee:	6560      	str	r0, [r4, #84]	; 0x54
 800c7f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7f2:	602f      	str	r7, [r5, #0]
 800c7f4:	2900      	cmp	r1, #0
 800c7f6:	d0ca      	beq.n	800c78e <__sflush_r+0x1a>
 800c7f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7fc:	4299      	cmp	r1, r3
 800c7fe:	d002      	beq.n	800c806 <__sflush_r+0x92>
 800c800:	4628      	mov	r0, r5
 800c802:	f000 fc3d 	bl	800d080 <_free_r>
 800c806:	2000      	movs	r0, #0
 800c808:	6360      	str	r0, [r4, #52]	; 0x34
 800c80a:	e7c1      	b.n	800c790 <__sflush_r+0x1c>
 800c80c:	6a21      	ldr	r1, [r4, #32]
 800c80e:	2301      	movs	r3, #1
 800c810:	4628      	mov	r0, r5
 800c812:	47b0      	blx	r6
 800c814:	1c41      	adds	r1, r0, #1
 800c816:	d1c7      	bne.n	800c7a8 <__sflush_r+0x34>
 800c818:	682b      	ldr	r3, [r5, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d0c4      	beq.n	800c7a8 <__sflush_r+0x34>
 800c81e:	2b1d      	cmp	r3, #29
 800c820:	d001      	beq.n	800c826 <__sflush_r+0xb2>
 800c822:	2b16      	cmp	r3, #22
 800c824:	d101      	bne.n	800c82a <__sflush_r+0xb6>
 800c826:	602f      	str	r7, [r5, #0]
 800c828:	e7b1      	b.n	800c78e <__sflush_r+0x1a>
 800c82a:	89a3      	ldrh	r3, [r4, #12]
 800c82c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c830:	81a3      	strh	r3, [r4, #12]
 800c832:	e7ad      	b.n	800c790 <__sflush_r+0x1c>
 800c834:	690f      	ldr	r7, [r1, #16]
 800c836:	2f00      	cmp	r7, #0
 800c838:	d0a9      	beq.n	800c78e <__sflush_r+0x1a>
 800c83a:	0793      	lsls	r3, r2, #30
 800c83c:	680e      	ldr	r6, [r1, #0]
 800c83e:	bf08      	it	eq
 800c840:	694b      	ldreq	r3, [r1, #20]
 800c842:	600f      	str	r7, [r1, #0]
 800c844:	bf18      	it	ne
 800c846:	2300      	movne	r3, #0
 800c848:	eba6 0807 	sub.w	r8, r6, r7
 800c84c:	608b      	str	r3, [r1, #8]
 800c84e:	f1b8 0f00 	cmp.w	r8, #0
 800c852:	dd9c      	ble.n	800c78e <__sflush_r+0x1a>
 800c854:	6a21      	ldr	r1, [r4, #32]
 800c856:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c858:	4643      	mov	r3, r8
 800c85a:	463a      	mov	r2, r7
 800c85c:	4628      	mov	r0, r5
 800c85e:	47b0      	blx	r6
 800c860:	2800      	cmp	r0, #0
 800c862:	dc06      	bgt.n	800c872 <__sflush_r+0xfe>
 800c864:	89a3      	ldrh	r3, [r4, #12]
 800c866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c86a:	81a3      	strh	r3, [r4, #12]
 800c86c:	f04f 30ff 	mov.w	r0, #4294967295
 800c870:	e78e      	b.n	800c790 <__sflush_r+0x1c>
 800c872:	4407      	add	r7, r0
 800c874:	eba8 0800 	sub.w	r8, r8, r0
 800c878:	e7e9      	b.n	800c84e <__sflush_r+0xda>
 800c87a:	bf00      	nop
 800c87c:	20400001 	.word	0x20400001

0800c880 <_fflush_r>:
 800c880:	b538      	push	{r3, r4, r5, lr}
 800c882:	690b      	ldr	r3, [r1, #16]
 800c884:	4605      	mov	r5, r0
 800c886:	460c      	mov	r4, r1
 800c888:	b913      	cbnz	r3, 800c890 <_fflush_r+0x10>
 800c88a:	2500      	movs	r5, #0
 800c88c:	4628      	mov	r0, r5
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	b118      	cbz	r0, 800c89a <_fflush_r+0x1a>
 800c892:	6983      	ldr	r3, [r0, #24]
 800c894:	b90b      	cbnz	r3, 800c89a <_fflush_r+0x1a>
 800c896:	f7fe fa17 	bl	800acc8 <__sinit>
 800c89a:	4b14      	ldr	r3, [pc, #80]	; (800c8ec <_fflush_r+0x6c>)
 800c89c:	429c      	cmp	r4, r3
 800c89e:	d11b      	bne.n	800c8d8 <_fflush_r+0x58>
 800c8a0:	686c      	ldr	r4, [r5, #4]
 800c8a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d0ef      	beq.n	800c88a <_fflush_r+0xa>
 800c8aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c8ac:	07d0      	lsls	r0, r2, #31
 800c8ae:	d404      	bmi.n	800c8ba <_fflush_r+0x3a>
 800c8b0:	0599      	lsls	r1, r3, #22
 800c8b2:	d402      	bmi.n	800c8ba <_fflush_r+0x3a>
 800c8b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8b6:	f7fe faca 	bl	800ae4e <__retarget_lock_acquire_recursive>
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	4621      	mov	r1, r4
 800c8be:	f7ff ff59 	bl	800c774 <__sflush_r>
 800c8c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8c4:	07da      	lsls	r2, r3, #31
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	d4e0      	bmi.n	800c88c <_fflush_r+0xc>
 800c8ca:	89a3      	ldrh	r3, [r4, #12]
 800c8cc:	059b      	lsls	r3, r3, #22
 800c8ce:	d4dd      	bmi.n	800c88c <_fflush_r+0xc>
 800c8d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8d2:	f7fe fabd 	bl	800ae50 <__retarget_lock_release_recursive>
 800c8d6:	e7d9      	b.n	800c88c <_fflush_r+0xc>
 800c8d8:	4b05      	ldr	r3, [pc, #20]	; (800c8f0 <_fflush_r+0x70>)
 800c8da:	429c      	cmp	r4, r3
 800c8dc:	d101      	bne.n	800c8e2 <_fflush_r+0x62>
 800c8de:	68ac      	ldr	r4, [r5, #8]
 800c8e0:	e7df      	b.n	800c8a2 <_fflush_r+0x22>
 800c8e2:	4b04      	ldr	r3, [pc, #16]	; (800c8f4 <_fflush_r+0x74>)
 800c8e4:	429c      	cmp	r4, r3
 800c8e6:	bf08      	it	eq
 800c8e8:	68ec      	ldreq	r4, [r5, #12]
 800c8ea:	e7da      	b.n	800c8a2 <_fflush_r+0x22>
 800c8ec:	0800dbe8 	.word	0x0800dbe8
 800c8f0:	0800dc08 	.word	0x0800dc08
 800c8f4:	0800dbc8 	.word	0x0800dbc8

0800c8f8 <_localeconv_r>:
 800c8f8:	4800      	ldr	r0, [pc, #0]	; (800c8fc <_localeconv_r+0x4>)
 800c8fa:	4770      	bx	lr
 800c8fc:	20000184 	.word	0x20000184

0800c900 <_lseek_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	4d07      	ldr	r5, [pc, #28]	; (800c920 <_lseek_r+0x20>)
 800c904:	4604      	mov	r4, r0
 800c906:	4608      	mov	r0, r1
 800c908:	4611      	mov	r1, r2
 800c90a:	2200      	movs	r2, #0
 800c90c:	602a      	str	r2, [r5, #0]
 800c90e:	461a      	mov	r2, r3
 800c910:	f7f6 fee8 	bl	80036e4 <_lseek>
 800c914:	1c43      	adds	r3, r0, #1
 800c916:	d102      	bne.n	800c91e <_lseek_r+0x1e>
 800c918:	682b      	ldr	r3, [r5, #0]
 800c91a:	b103      	cbz	r3, 800c91e <_lseek_r+0x1e>
 800c91c:	6023      	str	r3, [r4, #0]
 800c91e:	bd38      	pop	{r3, r4, r5, pc}
 800c920:	20005664 	.word	0x20005664

0800c924 <malloc>:
 800c924:	4b02      	ldr	r3, [pc, #8]	; (800c930 <malloc+0xc>)
 800c926:	4601      	mov	r1, r0
 800c928:	6818      	ldr	r0, [r3, #0]
 800c92a:	f7fe bac9 	b.w	800aec0 <_malloc_r>
 800c92e:	bf00      	nop
 800c930:	20000030 	.word	0x20000030

0800c934 <__malloc_lock>:
 800c934:	4801      	ldr	r0, [pc, #4]	; (800c93c <__malloc_lock+0x8>)
 800c936:	f7fe ba8a 	b.w	800ae4e <__retarget_lock_acquire_recursive>
 800c93a:	bf00      	nop
 800c93c:	20005658 	.word	0x20005658

0800c940 <__malloc_unlock>:
 800c940:	4801      	ldr	r0, [pc, #4]	; (800c948 <__malloc_unlock+0x8>)
 800c942:	f7fe ba85 	b.w	800ae50 <__retarget_lock_release_recursive>
 800c946:	bf00      	nop
 800c948:	20005658 	.word	0x20005658

0800c94c <_Balloc>:
 800c94c:	b570      	push	{r4, r5, r6, lr}
 800c94e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c950:	4604      	mov	r4, r0
 800c952:	460d      	mov	r5, r1
 800c954:	b976      	cbnz	r6, 800c974 <_Balloc+0x28>
 800c956:	2010      	movs	r0, #16
 800c958:	f7ff ffe4 	bl	800c924 <malloc>
 800c95c:	4602      	mov	r2, r0
 800c95e:	6260      	str	r0, [r4, #36]	; 0x24
 800c960:	b920      	cbnz	r0, 800c96c <_Balloc+0x20>
 800c962:	4b18      	ldr	r3, [pc, #96]	; (800c9c4 <_Balloc+0x78>)
 800c964:	4818      	ldr	r0, [pc, #96]	; (800c9c8 <_Balloc+0x7c>)
 800c966:	2166      	movs	r1, #102	; 0x66
 800c968:	f000 fd44 	bl	800d3f4 <__assert_func>
 800c96c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c970:	6006      	str	r6, [r0, #0]
 800c972:	60c6      	str	r6, [r0, #12]
 800c974:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c976:	68f3      	ldr	r3, [r6, #12]
 800c978:	b183      	cbz	r3, 800c99c <_Balloc+0x50>
 800c97a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c982:	b9b8      	cbnz	r0, 800c9b4 <_Balloc+0x68>
 800c984:	2101      	movs	r1, #1
 800c986:	fa01 f605 	lsl.w	r6, r1, r5
 800c98a:	1d72      	adds	r2, r6, #5
 800c98c:	0092      	lsls	r2, r2, #2
 800c98e:	4620      	mov	r0, r4
 800c990:	f000 fb60 	bl	800d054 <_calloc_r>
 800c994:	b160      	cbz	r0, 800c9b0 <_Balloc+0x64>
 800c996:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c99a:	e00e      	b.n	800c9ba <_Balloc+0x6e>
 800c99c:	2221      	movs	r2, #33	; 0x21
 800c99e:	2104      	movs	r1, #4
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	f000 fb57 	bl	800d054 <_calloc_r>
 800c9a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9a8:	60f0      	str	r0, [r6, #12]
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1e4      	bne.n	800c97a <_Balloc+0x2e>
 800c9b0:	2000      	movs	r0, #0
 800c9b2:	bd70      	pop	{r4, r5, r6, pc}
 800c9b4:	6802      	ldr	r2, [r0, #0]
 800c9b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c9c0:	e7f7      	b.n	800c9b2 <_Balloc+0x66>
 800c9c2:	bf00      	nop
 800c9c4:	0800dc6d 	.word	0x0800dc6d
 800c9c8:	0800dcf0 	.word	0x0800dcf0

0800c9cc <_Bfree>:
 800c9cc:	b570      	push	{r4, r5, r6, lr}
 800c9ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c9d0:	4605      	mov	r5, r0
 800c9d2:	460c      	mov	r4, r1
 800c9d4:	b976      	cbnz	r6, 800c9f4 <_Bfree+0x28>
 800c9d6:	2010      	movs	r0, #16
 800c9d8:	f7ff ffa4 	bl	800c924 <malloc>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	6268      	str	r0, [r5, #36]	; 0x24
 800c9e0:	b920      	cbnz	r0, 800c9ec <_Bfree+0x20>
 800c9e2:	4b09      	ldr	r3, [pc, #36]	; (800ca08 <_Bfree+0x3c>)
 800c9e4:	4809      	ldr	r0, [pc, #36]	; (800ca0c <_Bfree+0x40>)
 800c9e6:	218a      	movs	r1, #138	; 0x8a
 800c9e8:	f000 fd04 	bl	800d3f4 <__assert_func>
 800c9ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9f0:	6006      	str	r6, [r0, #0]
 800c9f2:	60c6      	str	r6, [r0, #12]
 800c9f4:	b13c      	cbz	r4, 800ca06 <_Bfree+0x3a>
 800c9f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c9f8:	6862      	ldr	r2, [r4, #4]
 800c9fa:	68db      	ldr	r3, [r3, #12]
 800c9fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca00:	6021      	str	r1, [r4, #0]
 800ca02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca06:	bd70      	pop	{r4, r5, r6, pc}
 800ca08:	0800dc6d 	.word	0x0800dc6d
 800ca0c:	0800dcf0 	.word	0x0800dcf0

0800ca10 <__multadd>:
 800ca10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca14:	690d      	ldr	r5, [r1, #16]
 800ca16:	4607      	mov	r7, r0
 800ca18:	460c      	mov	r4, r1
 800ca1a:	461e      	mov	r6, r3
 800ca1c:	f101 0c14 	add.w	ip, r1, #20
 800ca20:	2000      	movs	r0, #0
 800ca22:	f8dc 3000 	ldr.w	r3, [ip]
 800ca26:	b299      	uxth	r1, r3
 800ca28:	fb02 6101 	mla	r1, r2, r1, r6
 800ca2c:	0c1e      	lsrs	r6, r3, #16
 800ca2e:	0c0b      	lsrs	r3, r1, #16
 800ca30:	fb02 3306 	mla	r3, r2, r6, r3
 800ca34:	b289      	uxth	r1, r1
 800ca36:	3001      	adds	r0, #1
 800ca38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ca3c:	4285      	cmp	r5, r0
 800ca3e:	f84c 1b04 	str.w	r1, [ip], #4
 800ca42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ca46:	dcec      	bgt.n	800ca22 <__multadd+0x12>
 800ca48:	b30e      	cbz	r6, 800ca8e <__multadd+0x7e>
 800ca4a:	68a3      	ldr	r3, [r4, #8]
 800ca4c:	42ab      	cmp	r3, r5
 800ca4e:	dc19      	bgt.n	800ca84 <__multadd+0x74>
 800ca50:	6861      	ldr	r1, [r4, #4]
 800ca52:	4638      	mov	r0, r7
 800ca54:	3101      	adds	r1, #1
 800ca56:	f7ff ff79 	bl	800c94c <_Balloc>
 800ca5a:	4680      	mov	r8, r0
 800ca5c:	b928      	cbnz	r0, 800ca6a <__multadd+0x5a>
 800ca5e:	4602      	mov	r2, r0
 800ca60:	4b0c      	ldr	r3, [pc, #48]	; (800ca94 <__multadd+0x84>)
 800ca62:	480d      	ldr	r0, [pc, #52]	; (800ca98 <__multadd+0x88>)
 800ca64:	21b5      	movs	r1, #181	; 0xb5
 800ca66:	f000 fcc5 	bl	800d3f4 <__assert_func>
 800ca6a:	6922      	ldr	r2, [r4, #16]
 800ca6c:	3202      	adds	r2, #2
 800ca6e:	f104 010c 	add.w	r1, r4, #12
 800ca72:	0092      	lsls	r2, r2, #2
 800ca74:	300c      	adds	r0, #12
 800ca76:	f7fe f9ec 	bl	800ae52 <memcpy>
 800ca7a:	4621      	mov	r1, r4
 800ca7c:	4638      	mov	r0, r7
 800ca7e:	f7ff ffa5 	bl	800c9cc <_Bfree>
 800ca82:	4644      	mov	r4, r8
 800ca84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ca88:	3501      	adds	r5, #1
 800ca8a:	615e      	str	r6, [r3, #20]
 800ca8c:	6125      	str	r5, [r4, #16]
 800ca8e:	4620      	mov	r0, r4
 800ca90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca94:	0800dcdf 	.word	0x0800dcdf
 800ca98:	0800dcf0 	.word	0x0800dcf0

0800ca9c <__hi0bits>:
 800ca9c:	0c03      	lsrs	r3, r0, #16
 800ca9e:	041b      	lsls	r3, r3, #16
 800caa0:	b9d3      	cbnz	r3, 800cad8 <__hi0bits+0x3c>
 800caa2:	0400      	lsls	r0, r0, #16
 800caa4:	2310      	movs	r3, #16
 800caa6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800caaa:	bf04      	itt	eq
 800caac:	0200      	lsleq	r0, r0, #8
 800caae:	3308      	addeq	r3, #8
 800cab0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cab4:	bf04      	itt	eq
 800cab6:	0100      	lsleq	r0, r0, #4
 800cab8:	3304      	addeq	r3, #4
 800caba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cabe:	bf04      	itt	eq
 800cac0:	0080      	lsleq	r0, r0, #2
 800cac2:	3302      	addeq	r3, #2
 800cac4:	2800      	cmp	r0, #0
 800cac6:	db05      	blt.n	800cad4 <__hi0bits+0x38>
 800cac8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cacc:	f103 0301 	add.w	r3, r3, #1
 800cad0:	bf08      	it	eq
 800cad2:	2320      	moveq	r3, #32
 800cad4:	4618      	mov	r0, r3
 800cad6:	4770      	bx	lr
 800cad8:	2300      	movs	r3, #0
 800cada:	e7e4      	b.n	800caa6 <__hi0bits+0xa>

0800cadc <__lo0bits>:
 800cadc:	6803      	ldr	r3, [r0, #0]
 800cade:	f013 0207 	ands.w	r2, r3, #7
 800cae2:	4601      	mov	r1, r0
 800cae4:	d00b      	beq.n	800cafe <__lo0bits+0x22>
 800cae6:	07da      	lsls	r2, r3, #31
 800cae8:	d423      	bmi.n	800cb32 <__lo0bits+0x56>
 800caea:	0798      	lsls	r0, r3, #30
 800caec:	bf49      	itett	mi
 800caee:	085b      	lsrmi	r3, r3, #1
 800caf0:	089b      	lsrpl	r3, r3, #2
 800caf2:	2001      	movmi	r0, #1
 800caf4:	600b      	strmi	r3, [r1, #0]
 800caf6:	bf5c      	itt	pl
 800caf8:	600b      	strpl	r3, [r1, #0]
 800cafa:	2002      	movpl	r0, #2
 800cafc:	4770      	bx	lr
 800cafe:	b298      	uxth	r0, r3
 800cb00:	b9a8      	cbnz	r0, 800cb2e <__lo0bits+0x52>
 800cb02:	0c1b      	lsrs	r3, r3, #16
 800cb04:	2010      	movs	r0, #16
 800cb06:	b2da      	uxtb	r2, r3
 800cb08:	b90a      	cbnz	r2, 800cb0e <__lo0bits+0x32>
 800cb0a:	3008      	adds	r0, #8
 800cb0c:	0a1b      	lsrs	r3, r3, #8
 800cb0e:	071a      	lsls	r2, r3, #28
 800cb10:	bf04      	itt	eq
 800cb12:	091b      	lsreq	r3, r3, #4
 800cb14:	3004      	addeq	r0, #4
 800cb16:	079a      	lsls	r2, r3, #30
 800cb18:	bf04      	itt	eq
 800cb1a:	089b      	lsreq	r3, r3, #2
 800cb1c:	3002      	addeq	r0, #2
 800cb1e:	07da      	lsls	r2, r3, #31
 800cb20:	d403      	bmi.n	800cb2a <__lo0bits+0x4e>
 800cb22:	085b      	lsrs	r3, r3, #1
 800cb24:	f100 0001 	add.w	r0, r0, #1
 800cb28:	d005      	beq.n	800cb36 <__lo0bits+0x5a>
 800cb2a:	600b      	str	r3, [r1, #0]
 800cb2c:	4770      	bx	lr
 800cb2e:	4610      	mov	r0, r2
 800cb30:	e7e9      	b.n	800cb06 <__lo0bits+0x2a>
 800cb32:	2000      	movs	r0, #0
 800cb34:	4770      	bx	lr
 800cb36:	2020      	movs	r0, #32
 800cb38:	4770      	bx	lr
	...

0800cb3c <__i2b>:
 800cb3c:	b510      	push	{r4, lr}
 800cb3e:	460c      	mov	r4, r1
 800cb40:	2101      	movs	r1, #1
 800cb42:	f7ff ff03 	bl	800c94c <_Balloc>
 800cb46:	4602      	mov	r2, r0
 800cb48:	b928      	cbnz	r0, 800cb56 <__i2b+0x1a>
 800cb4a:	4b05      	ldr	r3, [pc, #20]	; (800cb60 <__i2b+0x24>)
 800cb4c:	4805      	ldr	r0, [pc, #20]	; (800cb64 <__i2b+0x28>)
 800cb4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cb52:	f000 fc4f 	bl	800d3f4 <__assert_func>
 800cb56:	2301      	movs	r3, #1
 800cb58:	6144      	str	r4, [r0, #20]
 800cb5a:	6103      	str	r3, [r0, #16]
 800cb5c:	bd10      	pop	{r4, pc}
 800cb5e:	bf00      	nop
 800cb60:	0800dcdf 	.word	0x0800dcdf
 800cb64:	0800dcf0 	.word	0x0800dcf0

0800cb68 <__multiply>:
 800cb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb6c:	4691      	mov	r9, r2
 800cb6e:	690a      	ldr	r2, [r1, #16]
 800cb70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	bfb8      	it	lt
 800cb78:	460b      	movlt	r3, r1
 800cb7a:	460c      	mov	r4, r1
 800cb7c:	bfbc      	itt	lt
 800cb7e:	464c      	movlt	r4, r9
 800cb80:	4699      	movlt	r9, r3
 800cb82:	6927      	ldr	r7, [r4, #16]
 800cb84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cb88:	68a3      	ldr	r3, [r4, #8]
 800cb8a:	6861      	ldr	r1, [r4, #4]
 800cb8c:	eb07 060a 	add.w	r6, r7, sl
 800cb90:	42b3      	cmp	r3, r6
 800cb92:	b085      	sub	sp, #20
 800cb94:	bfb8      	it	lt
 800cb96:	3101      	addlt	r1, #1
 800cb98:	f7ff fed8 	bl	800c94c <_Balloc>
 800cb9c:	b930      	cbnz	r0, 800cbac <__multiply+0x44>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	4b44      	ldr	r3, [pc, #272]	; (800ccb4 <__multiply+0x14c>)
 800cba2:	4845      	ldr	r0, [pc, #276]	; (800ccb8 <__multiply+0x150>)
 800cba4:	f240 115d 	movw	r1, #349	; 0x15d
 800cba8:	f000 fc24 	bl	800d3f4 <__assert_func>
 800cbac:	f100 0514 	add.w	r5, r0, #20
 800cbb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cbb4:	462b      	mov	r3, r5
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	4543      	cmp	r3, r8
 800cbba:	d321      	bcc.n	800cc00 <__multiply+0x98>
 800cbbc:	f104 0314 	add.w	r3, r4, #20
 800cbc0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cbc4:	f109 0314 	add.w	r3, r9, #20
 800cbc8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cbcc:	9202      	str	r2, [sp, #8]
 800cbce:	1b3a      	subs	r2, r7, r4
 800cbd0:	3a15      	subs	r2, #21
 800cbd2:	f022 0203 	bic.w	r2, r2, #3
 800cbd6:	3204      	adds	r2, #4
 800cbd8:	f104 0115 	add.w	r1, r4, #21
 800cbdc:	428f      	cmp	r7, r1
 800cbde:	bf38      	it	cc
 800cbe0:	2204      	movcc	r2, #4
 800cbe2:	9201      	str	r2, [sp, #4]
 800cbe4:	9a02      	ldr	r2, [sp, #8]
 800cbe6:	9303      	str	r3, [sp, #12]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d80c      	bhi.n	800cc06 <__multiply+0x9e>
 800cbec:	2e00      	cmp	r6, #0
 800cbee:	dd03      	ble.n	800cbf8 <__multiply+0x90>
 800cbf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d05a      	beq.n	800ccae <__multiply+0x146>
 800cbf8:	6106      	str	r6, [r0, #16]
 800cbfa:	b005      	add	sp, #20
 800cbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc00:	f843 2b04 	str.w	r2, [r3], #4
 800cc04:	e7d8      	b.n	800cbb8 <__multiply+0x50>
 800cc06:	f8b3 a000 	ldrh.w	sl, [r3]
 800cc0a:	f1ba 0f00 	cmp.w	sl, #0
 800cc0e:	d024      	beq.n	800cc5a <__multiply+0xf2>
 800cc10:	f104 0e14 	add.w	lr, r4, #20
 800cc14:	46a9      	mov	r9, r5
 800cc16:	f04f 0c00 	mov.w	ip, #0
 800cc1a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cc1e:	f8d9 1000 	ldr.w	r1, [r9]
 800cc22:	fa1f fb82 	uxth.w	fp, r2
 800cc26:	b289      	uxth	r1, r1
 800cc28:	fb0a 110b 	mla	r1, sl, fp, r1
 800cc2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cc30:	f8d9 2000 	ldr.w	r2, [r9]
 800cc34:	4461      	add	r1, ip
 800cc36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cc3a:	fb0a c20b 	mla	r2, sl, fp, ip
 800cc3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cc42:	b289      	uxth	r1, r1
 800cc44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cc48:	4577      	cmp	r7, lr
 800cc4a:	f849 1b04 	str.w	r1, [r9], #4
 800cc4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cc52:	d8e2      	bhi.n	800cc1a <__multiply+0xb2>
 800cc54:	9a01      	ldr	r2, [sp, #4]
 800cc56:	f845 c002 	str.w	ip, [r5, r2]
 800cc5a:	9a03      	ldr	r2, [sp, #12]
 800cc5c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cc60:	3304      	adds	r3, #4
 800cc62:	f1b9 0f00 	cmp.w	r9, #0
 800cc66:	d020      	beq.n	800ccaa <__multiply+0x142>
 800cc68:	6829      	ldr	r1, [r5, #0]
 800cc6a:	f104 0c14 	add.w	ip, r4, #20
 800cc6e:	46ae      	mov	lr, r5
 800cc70:	f04f 0a00 	mov.w	sl, #0
 800cc74:	f8bc b000 	ldrh.w	fp, [ip]
 800cc78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cc7c:	fb09 220b 	mla	r2, r9, fp, r2
 800cc80:	4492      	add	sl, r2
 800cc82:	b289      	uxth	r1, r1
 800cc84:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cc88:	f84e 1b04 	str.w	r1, [lr], #4
 800cc8c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cc90:	f8be 1000 	ldrh.w	r1, [lr]
 800cc94:	0c12      	lsrs	r2, r2, #16
 800cc96:	fb09 1102 	mla	r1, r9, r2, r1
 800cc9a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cc9e:	4567      	cmp	r7, ip
 800cca0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cca4:	d8e6      	bhi.n	800cc74 <__multiply+0x10c>
 800cca6:	9a01      	ldr	r2, [sp, #4]
 800cca8:	50a9      	str	r1, [r5, r2]
 800ccaa:	3504      	adds	r5, #4
 800ccac:	e79a      	b.n	800cbe4 <__multiply+0x7c>
 800ccae:	3e01      	subs	r6, #1
 800ccb0:	e79c      	b.n	800cbec <__multiply+0x84>
 800ccb2:	bf00      	nop
 800ccb4:	0800dcdf 	.word	0x0800dcdf
 800ccb8:	0800dcf0 	.word	0x0800dcf0

0800ccbc <__pow5mult>:
 800ccbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccc0:	4615      	mov	r5, r2
 800ccc2:	f012 0203 	ands.w	r2, r2, #3
 800ccc6:	4606      	mov	r6, r0
 800ccc8:	460f      	mov	r7, r1
 800ccca:	d007      	beq.n	800ccdc <__pow5mult+0x20>
 800cccc:	4c25      	ldr	r4, [pc, #148]	; (800cd64 <__pow5mult+0xa8>)
 800ccce:	3a01      	subs	r2, #1
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ccd6:	f7ff fe9b 	bl	800ca10 <__multadd>
 800ccda:	4607      	mov	r7, r0
 800ccdc:	10ad      	asrs	r5, r5, #2
 800ccde:	d03d      	beq.n	800cd5c <__pow5mult+0xa0>
 800cce0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cce2:	b97c      	cbnz	r4, 800cd04 <__pow5mult+0x48>
 800cce4:	2010      	movs	r0, #16
 800cce6:	f7ff fe1d 	bl	800c924 <malloc>
 800ccea:	4602      	mov	r2, r0
 800ccec:	6270      	str	r0, [r6, #36]	; 0x24
 800ccee:	b928      	cbnz	r0, 800ccfc <__pow5mult+0x40>
 800ccf0:	4b1d      	ldr	r3, [pc, #116]	; (800cd68 <__pow5mult+0xac>)
 800ccf2:	481e      	ldr	r0, [pc, #120]	; (800cd6c <__pow5mult+0xb0>)
 800ccf4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ccf8:	f000 fb7c 	bl	800d3f4 <__assert_func>
 800ccfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd00:	6004      	str	r4, [r0, #0]
 800cd02:	60c4      	str	r4, [r0, #12]
 800cd04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cd08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd0c:	b94c      	cbnz	r4, 800cd22 <__pow5mult+0x66>
 800cd0e:	f240 2171 	movw	r1, #625	; 0x271
 800cd12:	4630      	mov	r0, r6
 800cd14:	f7ff ff12 	bl	800cb3c <__i2b>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd1e:	4604      	mov	r4, r0
 800cd20:	6003      	str	r3, [r0, #0]
 800cd22:	f04f 0900 	mov.w	r9, #0
 800cd26:	07eb      	lsls	r3, r5, #31
 800cd28:	d50a      	bpl.n	800cd40 <__pow5mult+0x84>
 800cd2a:	4639      	mov	r1, r7
 800cd2c:	4622      	mov	r2, r4
 800cd2e:	4630      	mov	r0, r6
 800cd30:	f7ff ff1a 	bl	800cb68 <__multiply>
 800cd34:	4639      	mov	r1, r7
 800cd36:	4680      	mov	r8, r0
 800cd38:	4630      	mov	r0, r6
 800cd3a:	f7ff fe47 	bl	800c9cc <_Bfree>
 800cd3e:	4647      	mov	r7, r8
 800cd40:	106d      	asrs	r5, r5, #1
 800cd42:	d00b      	beq.n	800cd5c <__pow5mult+0xa0>
 800cd44:	6820      	ldr	r0, [r4, #0]
 800cd46:	b938      	cbnz	r0, 800cd58 <__pow5mult+0x9c>
 800cd48:	4622      	mov	r2, r4
 800cd4a:	4621      	mov	r1, r4
 800cd4c:	4630      	mov	r0, r6
 800cd4e:	f7ff ff0b 	bl	800cb68 <__multiply>
 800cd52:	6020      	str	r0, [r4, #0]
 800cd54:	f8c0 9000 	str.w	r9, [r0]
 800cd58:	4604      	mov	r4, r0
 800cd5a:	e7e4      	b.n	800cd26 <__pow5mult+0x6a>
 800cd5c:	4638      	mov	r0, r7
 800cd5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd62:	bf00      	nop
 800cd64:	0800de40 	.word	0x0800de40
 800cd68:	0800dc6d 	.word	0x0800dc6d
 800cd6c:	0800dcf0 	.word	0x0800dcf0

0800cd70 <__lshift>:
 800cd70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd74:	460c      	mov	r4, r1
 800cd76:	6849      	ldr	r1, [r1, #4]
 800cd78:	6923      	ldr	r3, [r4, #16]
 800cd7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cd7e:	68a3      	ldr	r3, [r4, #8]
 800cd80:	4607      	mov	r7, r0
 800cd82:	4691      	mov	r9, r2
 800cd84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cd88:	f108 0601 	add.w	r6, r8, #1
 800cd8c:	42b3      	cmp	r3, r6
 800cd8e:	db0b      	blt.n	800cda8 <__lshift+0x38>
 800cd90:	4638      	mov	r0, r7
 800cd92:	f7ff fddb 	bl	800c94c <_Balloc>
 800cd96:	4605      	mov	r5, r0
 800cd98:	b948      	cbnz	r0, 800cdae <__lshift+0x3e>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	4b2a      	ldr	r3, [pc, #168]	; (800ce48 <__lshift+0xd8>)
 800cd9e:	482b      	ldr	r0, [pc, #172]	; (800ce4c <__lshift+0xdc>)
 800cda0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cda4:	f000 fb26 	bl	800d3f4 <__assert_func>
 800cda8:	3101      	adds	r1, #1
 800cdaa:	005b      	lsls	r3, r3, #1
 800cdac:	e7ee      	b.n	800cd8c <__lshift+0x1c>
 800cdae:	2300      	movs	r3, #0
 800cdb0:	f100 0114 	add.w	r1, r0, #20
 800cdb4:	f100 0210 	add.w	r2, r0, #16
 800cdb8:	4618      	mov	r0, r3
 800cdba:	4553      	cmp	r3, sl
 800cdbc:	db37      	blt.n	800ce2e <__lshift+0xbe>
 800cdbe:	6920      	ldr	r0, [r4, #16]
 800cdc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cdc4:	f104 0314 	add.w	r3, r4, #20
 800cdc8:	f019 091f 	ands.w	r9, r9, #31
 800cdcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cdd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cdd4:	d02f      	beq.n	800ce36 <__lshift+0xc6>
 800cdd6:	f1c9 0e20 	rsb	lr, r9, #32
 800cdda:	468a      	mov	sl, r1
 800cddc:	f04f 0c00 	mov.w	ip, #0
 800cde0:	681a      	ldr	r2, [r3, #0]
 800cde2:	fa02 f209 	lsl.w	r2, r2, r9
 800cde6:	ea42 020c 	orr.w	r2, r2, ip
 800cdea:	f84a 2b04 	str.w	r2, [sl], #4
 800cdee:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdf2:	4298      	cmp	r0, r3
 800cdf4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cdf8:	d8f2      	bhi.n	800cde0 <__lshift+0x70>
 800cdfa:	1b03      	subs	r3, r0, r4
 800cdfc:	3b15      	subs	r3, #21
 800cdfe:	f023 0303 	bic.w	r3, r3, #3
 800ce02:	3304      	adds	r3, #4
 800ce04:	f104 0215 	add.w	r2, r4, #21
 800ce08:	4290      	cmp	r0, r2
 800ce0a:	bf38      	it	cc
 800ce0c:	2304      	movcc	r3, #4
 800ce0e:	f841 c003 	str.w	ip, [r1, r3]
 800ce12:	f1bc 0f00 	cmp.w	ip, #0
 800ce16:	d001      	beq.n	800ce1c <__lshift+0xac>
 800ce18:	f108 0602 	add.w	r6, r8, #2
 800ce1c:	3e01      	subs	r6, #1
 800ce1e:	4638      	mov	r0, r7
 800ce20:	612e      	str	r6, [r5, #16]
 800ce22:	4621      	mov	r1, r4
 800ce24:	f7ff fdd2 	bl	800c9cc <_Bfree>
 800ce28:	4628      	mov	r0, r5
 800ce2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce2e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce32:	3301      	adds	r3, #1
 800ce34:	e7c1      	b.n	800cdba <__lshift+0x4a>
 800ce36:	3904      	subs	r1, #4
 800ce38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce3c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce40:	4298      	cmp	r0, r3
 800ce42:	d8f9      	bhi.n	800ce38 <__lshift+0xc8>
 800ce44:	e7ea      	b.n	800ce1c <__lshift+0xac>
 800ce46:	bf00      	nop
 800ce48:	0800dcdf 	.word	0x0800dcdf
 800ce4c:	0800dcf0 	.word	0x0800dcf0

0800ce50 <__mcmp>:
 800ce50:	b530      	push	{r4, r5, lr}
 800ce52:	6902      	ldr	r2, [r0, #16]
 800ce54:	690c      	ldr	r4, [r1, #16]
 800ce56:	1b12      	subs	r2, r2, r4
 800ce58:	d10e      	bne.n	800ce78 <__mcmp+0x28>
 800ce5a:	f100 0314 	add.w	r3, r0, #20
 800ce5e:	3114      	adds	r1, #20
 800ce60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ce64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ce68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ce6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ce70:	42a5      	cmp	r5, r4
 800ce72:	d003      	beq.n	800ce7c <__mcmp+0x2c>
 800ce74:	d305      	bcc.n	800ce82 <__mcmp+0x32>
 800ce76:	2201      	movs	r2, #1
 800ce78:	4610      	mov	r0, r2
 800ce7a:	bd30      	pop	{r4, r5, pc}
 800ce7c:	4283      	cmp	r3, r0
 800ce7e:	d3f3      	bcc.n	800ce68 <__mcmp+0x18>
 800ce80:	e7fa      	b.n	800ce78 <__mcmp+0x28>
 800ce82:	f04f 32ff 	mov.w	r2, #4294967295
 800ce86:	e7f7      	b.n	800ce78 <__mcmp+0x28>

0800ce88 <__mdiff>:
 800ce88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce8c:	460c      	mov	r4, r1
 800ce8e:	4606      	mov	r6, r0
 800ce90:	4611      	mov	r1, r2
 800ce92:	4620      	mov	r0, r4
 800ce94:	4690      	mov	r8, r2
 800ce96:	f7ff ffdb 	bl	800ce50 <__mcmp>
 800ce9a:	1e05      	subs	r5, r0, #0
 800ce9c:	d110      	bne.n	800cec0 <__mdiff+0x38>
 800ce9e:	4629      	mov	r1, r5
 800cea0:	4630      	mov	r0, r6
 800cea2:	f7ff fd53 	bl	800c94c <_Balloc>
 800cea6:	b930      	cbnz	r0, 800ceb6 <__mdiff+0x2e>
 800cea8:	4b3a      	ldr	r3, [pc, #232]	; (800cf94 <__mdiff+0x10c>)
 800ceaa:	4602      	mov	r2, r0
 800ceac:	f240 2132 	movw	r1, #562	; 0x232
 800ceb0:	4839      	ldr	r0, [pc, #228]	; (800cf98 <__mdiff+0x110>)
 800ceb2:	f000 fa9f 	bl	800d3f4 <__assert_func>
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cebc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cec0:	bfa4      	itt	ge
 800cec2:	4643      	movge	r3, r8
 800cec4:	46a0      	movge	r8, r4
 800cec6:	4630      	mov	r0, r6
 800cec8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cecc:	bfa6      	itte	ge
 800cece:	461c      	movge	r4, r3
 800ced0:	2500      	movge	r5, #0
 800ced2:	2501      	movlt	r5, #1
 800ced4:	f7ff fd3a 	bl	800c94c <_Balloc>
 800ced8:	b920      	cbnz	r0, 800cee4 <__mdiff+0x5c>
 800ceda:	4b2e      	ldr	r3, [pc, #184]	; (800cf94 <__mdiff+0x10c>)
 800cedc:	4602      	mov	r2, r0
 800cede:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cee2:	e7e5      	b.n	800ceb0 <__mdiff+0x28>
 800cee4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cee8:	6926      	ldr	r6, [r4, #16]
 800ceea:	60c5      	str	r5, [r0, #12]
 800ceec:	f104 0914 	add.w	r9, r4, #20
 800cef0:	f108 0514 	add.w	r5, r8, #20
 800cef4:	f100 0e14 	add.w	lr, r0, #20
 800cef8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cefc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cf00:	f108 0210 	add.w	r2, r8, #16
 800cf04:	46f2      	mov	sl, lr
 800cf06:	2100      	movs	r1, #0
 800cf08:	f859 3b04 	ldr.w	r3, [r9], #4
 800cf0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cf10:	fa1f f883 	uxth.w	r8, r3
 800cf14:	fa11 f18b 	uxtah	r1, r1, fp
 800cf18:	0c1b      	lsrs	r3, r3, #16
 800cf1a:	eba1 0808 	sub.w	r8, r1, r8
 800cf1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cf22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cf26:	fa1f f888 	uxth.w	r8, r8
 800cf2a:	1419      	asrs	r1, r3, #16
 800cf2c:	454e      	cmp	r6, r9
 800cf2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cf32:	f84a 3b04 	str.w	r3, [sl], #4
 800cf36:	d8e7      	bhi.n	800cf08 <__mdiff+0x80>
 800cf38:	1b33      	subs	r3, r6, r4
 800cf3a:	3b15      	subs	r3, #21
 800cf3c:	f023 0303 	bic.w	r3, r3, #3
 800cf40:	3304      	adds	r3, #4
 800cf42:	3415      	adds	r4, #21
 800cf44:	42a6      	cmp	r6, r4
 800cf46:	bf38      	it	cc
 800cf48:	2304      	movcc	r3, #4
 800cf4a:	441d      	add	r5, r3
 800cf4c:	4473      	add	r3, lr
 800cf4e:	469e      	mov	lr, r3
 800cf50:	462e      	mov	r6, r5
 800cf52:	4566      	cmp	r6, ip
 800cf54:	d30e      	bcc.n	800cf74 <__mdiff+0xec>
 800cf56:	f10c 0203 	add.w	r2, ip, #3
 800cf5a:	1b52      	subs	r2, r2, r5
 800cf5c:	f022 0203 	bic.w	r2, r2, #3
 800cf60:	3d03      	subs	r5, #3
 800cf62:	45ac      	cmp	ip, r5
 800cf64:	bf38      	it	cc
 800cf66:	2200      	movcc	r2, #0
 800cf68:	441a      	add	r2, r3
 800cf6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cf6e:	b17b      	cbz	r3, 800cf90 <__mdiff+0x108>
 800cf70:	6107      	str	r7, [r0, #16]
 800cf72:	e7a3      	b.n	800cebc <__mdiff+0x34>
 800cf74:	f856 8b04 	ldr.w	r8, [r6], #4
 800cf78:	fa11 f288 	uxtah	r2, r1, r8
 800cf7c:	1414      	asrs	r4, r2, #16
 800cf7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cf82:	b292      	uxth	r2, r2
 800cf84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cf88:	f84e 2b04 	str.w	r2, [lr], #4
 800cf8c:	1421      	asrs	r1, r4, #16
 800cf8e:	e7e0      	b.n	800cf52 <__mdiff+0xca>
 800cf90:	3f01      	subs	r7, #1
 800cf92:	e7ea      	b.n	800cf6a <__mdiff+0xe2>
 800cf94:	0800dcdf 	.word	0x0800dcdf
 800cf98:	0800dcf0 	.word	0x0800dcf0

0800cf9c <__d2b>:
 800cf9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cfa0:	4689      	mov	r9, r1
 800cfa2:	2101      	movs	r1, #1
 800cfa4:	ec57 6b10 	vmov	r6, r7, d0
 800cfa8:	4690      	mov	r8, r2
 800cfaa:	f7ff fccf 	bl	800c94c <_Balloc>
 800cfae:	4604      	mov	r4, r0
 800cfb0:	b930      	cbnz	r0, 800cfc0 <__d2b+0x24>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	4b25      	ldr	r3, [pc, #148]	; (800d04c <__d2b+0xb0>)
 800cfb6:	4826      	ldr	r0, [pc, #152]	; (800d050 <__d2b+0xb4>)
 800cfb8:	f240 310a 	movw	r1, #778	; 0x30a
 800cfbc:	f000 fa1a 	bl	800d3f4 <__assert_func>
 800cfc0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cfc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cfc8:	bb35      	cbnz	r5, 800d018 <__d2b+0x7c>
 800cfca:	2e00      	cmp	r6, #0
 800cfcc:	9301      	str	r3, [sp, #4]
 800cfce:	d028      	beq.n	800d022 <__d2b+0x86>
 800cfd0:	4668      	mov	r0, sp
 800cfd2:	9600      	str	r6, [sp, #0]
 800cfd4:	f7ff fd82 	bl	800cadc <__lo0bits>
 800cfd8:	9900      	ldr	r1, [sp, #0]
 800cfda:	b300      	cbz	r0, 800d01e <__d2b+0x82>
 800cfdc:	9a01      	ldr	r2, [sp, #4]
 800cfde:	f1c0 0320 	rsb	r3, r0, #32
 800cfe2:	fa02 f303 	lsl.w	r3, r2, r3
 800cfe6:	430b      	orrs	r3, r1
 800cfe8:	40c2      	lsrs	r2, r0
 800cfea:	6163      	str	r3, [r4, #20]
 800cfec:	9201      	str	r2, [sp, #4]
 800cfee:	9b01      	ldr	r3, [sp, #4]
 800cff0:	61a3      	str	r3, [r4, #24]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	bf14      	ite	ne
 800cff6:	2202      	movne	r2, #2
 800cff8:	2201      	moveq	r2, #1
 800cffa:	6122      	str	r2, [r4, #16]
 800cffc:	b1d5      	cbz	r5, 800d034 <__d2b+0x98>
 800cffe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d002:	4405      	add	r5, r0
 800d004:	f8c9 5000 	str.w	r5, [r9]
 800d008:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d00c:	f8c8 0000 	str.w	r0, [r8]
 800d010:	4620      	mov	r0, r4
 800d012:	b003      	add	sp, #12
 800d014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d01c:	e7d5      	b.n	800cfca <__d2b+0x2e>
 800d01e:	6161      	str	r1, [r4, #20]
 800d020:	e7e5      	b.n	800cfee <__d2b+0x52>
 800d022:	a801      	add	r0, sp, #4
 800d024:	f7ff fd5a 	bl	800cadc <__lo0bits>
 800d028:	9b01      	ldr	r3, [sp, #4]
 800d02a:	6163      	str	r3, [r4, #20]
 800d02c:	2201      	movs	r2, #1
 800d02e:	6122      	str	r2, [r4, #16]
 800d030:	3020      	adds	r0, #32
 800d032:	e7e3      	b.n	800cffc <__d2b+0x60>
 800d034:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d038:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d03c:	f8c9 0000 	str.w	r0, [r9]
 800d040:	6918      	ldr	r0, [r3, #16]
 800d042:	f7ff fd2b 	bl	800ca9c <__hi0bits>
 800d046:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d04a:	e7df      	b.n	800d00c <__d2b+0x70>
 800d04c:	0800dcdf 	.word	0x0800dcdf
 800d050:	0800dcf0 	.word	0x0800dcf0

0800d054 <_calloc_r>:
 800d054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d056:	fba1 2402 	umull	r2, r4, r1, r2
 800d05a:	b94c      	cbnz	r4, 800d070 <_calloc_r+0x1c>
 800d05c:	4611      	mov	r1, r2
 800d05e:	9201      	str	r2, [sp, #4]
 800d060:	f7fd ff2e 	bl	800aec0 <_malloc_r>
 800d064:	9a01      	ldr	r2, [sp, #4]
 800d066:	4605      	mov	r5, r0
 800d068:	b930      	cbnz	r0, 800d078 <_calloc_r+0x24>
 800d06a:	4628      	mov	r0, r5
 800d06c:	b003      	add	sp, #12
 800d06e:	bd30      	pop	{r4, r5, pc}
 800d070:	220c      	movs	r2, #12
 800d072:	6002      	str	r2, [r0, #0]
 800d074:	2500      	movs	r5, #0
 800d076:	e7f8      	b.n	800d06a <_calloc_r+0x16>
 800d078:	4621      	mov	r1, r4
 800d07a:	f7fd fef8 	bl	800ae6e <memset>
 800d07e:	e7f4      	b.n	800d06a <_calloc_r+0x16>

0800d080 <_free_r>:
 800d080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d082:	2900      	cmp	r1, #0
 800d084:	d044      	beq.n	800d110 <_free_r+0x90>
 800d086:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d08a:	9001      	str	r0, [sp, #4]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	f1a1 0404 	sub.w	r4, r1, #4
 800d092:	bfb8      	it	lt
 800d094:	18e4      	addlt	r4, r4, r3
 800d096:	f7ff fc4d 	bl	800c934 <__malloc_lock>
 800d09a:	4a1e      	ldr	r2, [pc, #120]	; (800d114 <_free_r+0x94>)
 800d09c:	9801      	ldr	r0, [sp, #4]
 800d09e:	6813      	ldr	r3, [r2, #0]
 800d0a0:	b933      	cbnz	r3, 800d0b0 <_free_r+0x30>
 800d0a2:	6063      	str	r3, [r4, #4]
 800d0a4:	6014      	str	r4, [r2, #0]
 800d0a6:	b003      	add	sp, #12
 800d0a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0ac:	f7ff bc48 	b.w	800c940 <__malloc_unlock>
 800d0b0:	42a3      	cmp	r3, r4
 800d0b2:	d908      	bls.n	800d0c6 <_free_r+0x46>
 800d0b4:	6825      	ldr	r5, [r4, #0]
 800d0b6:	1961      	adds	r1, r4, r5
 800d0b8:	428b      	cmp	r3, r1
 800d0ba:	bf01      	itttt	eq
 800d0bc:	6819      	ldreq	r1, [r3, #0]
 800d0be:	685b      	ldreq	r3, [r3, #4]
 800d0c0:	1949      	addeq	r1, r1, r5
 800d0c2:	6021      	streq	r1, [r4, #0]
 800d0c4:	e7ed      	b.n	800d0a2 <_free_r+0x22>
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	b10b      	cbz	r3, 800d0d0 <_free_r+0x50>
 800d0cc:	42a3      	cmp	r3, r4
 800d0ce:	d9fa      	bls.n	800d0c6 <_free_r+0x46>
 800d0d0:	6811      	ldr	r1, [r2, #0]
 800d0d2:	1855      	adds	r5, r2, r1
 800d0d4:	42a5      	cmp	r5, r4
 800d0d6:	d10b      	bne.n	800d0f0 <_free_r+0x70>
 800d0d8:	6824      	ldr	r4, [r4, #0]
 800d0da:	4421      	add	r1, r4
 800d0dc:	1854      	adds	r4, r2, r1
 800d0de:	42a3      	cmp	r3, r4
 800d0e0:	6011      	str	r1, [r2, #0]
 800d0e2:	d1e0      	bne.n	800d0a6 <_free_r+0x26>
 800d0e4:	681c      	ldr	r4, [r3, #0]
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	6053      	str	r3, [r2, #4]
 800d0ea:	4421      	add	r1, r4
 800d0ec:	6011      	str	r1, [r2, #0]
 800d0ee:	e7da      	b.n	800d0a6 <_free_r+0x26>
 800d0f0:	d902      	bls.n	800d0f8 <_free_r+0x78>
 800d0f2:	230c      	movs	r3, #12
 800d0f4:	6003      	str	r3, [r0, #0]
 800d0f6:	e7d6      	b.n	800d0a6 <_free_r+0x26>
 800d0f8:	6825      	ldr	r5, [r4, #0]
 800d0fa:	1961      	adds	r1, r4, r5
 800d0fc:	428b      	cmp	r3, r1
 800d0fe:	bf04      	itt	eq
 800d100:	6819      	ldreq	r1, [r3, #0]
 800d102:	685b      	ldreq	r3, [r3, #4]
 800d104:	6063      	str	r3, [r4, #4]
 800d106:	bf04      	itt	eq
 800d108:	1949      	addeq	r1, r1, r5
 800d10a:	6021      	streq	r1, [r4, #0]
 800d10c:	6054      	str	r4, [r2, #4]
 800d10e:	e7ca      	b.n	800d0a6 <_free_r+0x26>
 800d110:	b003      	add	sp, #12
 800d112:	bd30      	pop	{r4, r5, pc}
 800d114:	2000565c 	.word	0x2000565c

0800d118 <__ssputs_r>:
 800d118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d11c:	688e      	ldr	r6, [r1, #8]
 800d11e:	429e      	cmp	r6, r3
 800d120:	4682      	mov	sl, r0
 800d122:	460c      	mov	r4, r1
 800d124:	4690      	mov	r8, r2
 800d126:	461f      	mov	r7, r3
 800d128:	d838      	bhi.n	800d19c <__ssputs_r+0x84>
 800d12a:	898a      	ldrh	r2, [r1, #12]
 800d12c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d130:	d032      	beq.n	800d198 <__ssputs_r+0x80>
 800d132:	6825      	ldr	r5, [r4, #0]
 800d134:	6909      	ldr	r1, [r1, #16]
 800d136:	eba5 0901 	sub.w	r9, r5, r1
 800d13a:	6965      	ldr	r5, [r4, #20]
 800d13c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d140:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d144:	3301      	adds	r3, #1
 800d146:	444b      	add	r3, r9
 800d148:	106d      	asrs	r5, r5, #1
 800d14a:	429d      	cmp	r5, r3
 800d14c:	bf38      	it	cc
 800d14e:	461d      	movcc	r5, r3
 800d150:	0553      	lsls	r3, r2, #21
 800d152:	d531      	bpl.n	800d1b8 <__ssputs_r+0xa0>
 800d154:	4629      	mov	r1, r5
 800d156:	f7fd feb3 	bl	800aec0 <_malloc_r>
 800d15a:	4606      	mov	r6, r0
 800d15c:	b950      	cbnz	r0, 800d174 <__ssputs_r+0x5c>
 800d15e:	230c      	movs	r3, #12
 800d160:	f8ca 3000 	str.w	r3, [sl]
 800d164:	89a3      	ldrh	r3, [r4, #12]
 800d166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d16a:	81a3      	strh	r3, [r4, #12]
 800d16c:	f04f 30ff 	mov.w	r0, #4294967295
 800d170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d174:	6921      	ldr	r1, [r4, #16]
 800d176:	464a      	mov	r2, r9
 800d178:	f7fd fe6b 	bl	800ae52 <memcpy>
 800d17c:	89a3      	ldrh	r3, [r4, #12]
 800d17e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d186:	81a3      	strh	r3, [r4, #12]
 800d188:	6126      	str	r6, [r4, #16]
 800d18a:	6165      	str	r5, [r4, #20]
 800d18c:	444e      	add	r6, r9
 800d18e:	eba5 0509 	sub.w	r5, r5, r9
 800d192:	6026      	str	r6, [r4, #0]
 800d194:	60a5      	str	r5, [r4, #8]
 800d196:	463e      	mov	r6, r7
 800d198:	42be      	cmp	r6, r7
 800d19a:	d900      	bls.n	800d19e <__ssputs_r+0x86>
 800d19c:	463e      	mov	r6, r7
 800d19e:	6820      	ldr	r0, [r4, #0]
 800d1a0:	4632      	mov	r2, r6
 800d1a2:	4641      	mov	r1, r8
 800d1a4:	f000 f968 	bl	800d478 <memmove>
 800d1a8:	68a3      	ldr	r3, [r4, #8]
 800d1aa:	1b9b      	subs	r3, r3, r6
 800d1ac:	60a3      	str	r3, [r4, #8]
 800d1ae:	6823      	ldr	r3, [r4, #0]
 800d1b0:	4433      	add	r3, r6
 800d1b2:	6023      	str	r3, [r4, #0]
 800d1b4:	2000      	movs	r0, #0
 800d1b6:	e7db      	b.n	800d170 <__ssputs_r+0x58>
 800d1b8:	462a      	mov	r2, r5
 800d1ba:	f000 f977 	bl	800d4ac <_realloc_r>
 800d1be:	4606      	mov	r6, r0
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	d1e1      	bne.n	800d188 <__ssputs_r+0x70>
 800d1c4:	6921      	ldr	r1, [r4, #16]
 800d1c6:	4650      	mov	r0, sl
 800d1c8:	f7ff ff5a 	bl	800d080 <_free_r>
 800d1cc:	e7c7      	b.n	800d15e <__ssputs_r+0x46>
	...

0800d1d0 <_svfiprintf_r>:
 800d1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d4:	4698      	mov	r8, r3
 800d1d6:	898b      	ldrh	r3, [r1, #12]
 800d1d8:	061b      	lsls	r3, r3, #24
 800d1da:	b09d      	sub	sp, #116	; 0x74
 800d1dc:	4607      	mov	r7, r0
 800d1de:	460d      	mov	r5, r1
 800d1e0:	4614      	mov	r4, r2
 800d1e2:	d50e      	bpl.n	800d202 <_svfiprintf_r+0x32>
 800d1e4:	690b      	ldr	r3, [r1, #16]
 800d1e6:	b963      	cbnz	r3, 800d202 <_svfiprintf_r+0x32>
 800d1e8:	2140      	movs	r1, #64	; 0x40
 800d1ea:	f7fd fe69 	bl	800aec0 <_malloc_r>
 800d1ee:	6028      	str	r0, [r5, #0]
 800d1f0:	6128      	str	r0, [r5, #16]
 800d1f2:	b920      	cbnz	r0, 800d1fe <_svfiprintf_r+0x2e>
 800d1f4:	230c      	movs	r3, #12
 800d1f6:	603b      	str	r3, [r7, #0]
 800d1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1fc:	e0d1      	b.n	800d3a2 <_svfiprintf_r+0x1d2>
 800d1fe:	2340      	movs	r3, #64	; 0x40
 800d200:	616b      	str	r3, [r5, #20]
 800d202:	2300      	movs	r3, #0
 800d204:	9309      	str	r3, [sp, #36]	; 0x24
 800d206:	2320      	movs	r3, #32
 800d208:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d20c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d210:	2330      	movs	r3, #48	; 0x30
 800d212:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d3bc <_svfiprintf_r+0x1ec>
 800d216:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d21a:	f04f 0901 	mov.w	r9, #1
 800d21e:	4623      	mov	r3, r4
 800d220:	469a      	mov	sl, r3
 800d222:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d226:	b10a      	cbz	r2, 800d22c <_svfiprintf_r+0x5c>
 800d228:	2a25      	cmp	r2, #37	; 0x25
 800d22a:	d1f9      	bne.n	800d220 <_svfiprintf_r+0x50>
 800d22c:	ebba 0b04 	subs.w	fp, sl, r4
 800d230:	d00b      	beq.n	800d24a <_svfiprintf_r+0x7a>
 800d232:	465b      	mov	r3, fp
 800d234:	4622      	mov	r2, r4
 800d236:	4629      	mov	r1, r5
 800d238:	4638      	mov	r0, r7
 800d23a:	f7ff ff6d 	bl	800d118 <__ssputs_r>
 800d23e:	3001      	adds	r0, #1
 800d240:	f000 80aa 	beq.w	800d398 <_svfiprintf_r+0x1c8>
 800d244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d246:	445a      	add	r2, fp
 800d248:	9209      	str	r2, [sp, #36]	; 0x24
 800d24a:	f89a 3000 	ldrb.w	r3, [sl]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	f000 80a2 	beq.w	800d398 <_svfiprintf_r+0x1c8>
 800d254:	2300      	movs	r3, #0
 800d256:	f04f 32ff 	mov.w	r2, #4294967295
 800d25a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d25e:	f10a 0a01 	add.w	sl, sl, #1
 800d262:	9304      	str	r3, [sp, #16]
 800d264:	9307      	str	r3, [sp, #28]
 800d266:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d26a:	931a      	str	r3, [sp, #104]	; 0x68
 800d26c:	4654      	mov	r4, sl
 800d26e:	2205      	movs	r2, #5
 800d270:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d274:	4851      	ldr	r0, [pc, #324]	; (800d3bc <_svfiprintf_r+0x1ec>)
 800d276:	f7f2 ffb3 	bl	80001e0 <memchr>
 800d27a:	9a04      	ldr	r2, [sp, #16]
 800d27c:	b9d8      	cbnz	r0, 800d2b6 <_svfiprintf_r+0xe6>
 800d27e:	06d0      	lsls	r0, r2, #27
 800d280:	bf44      	itt	mi
 800d282:	2320      	movmi	r3, #32
 800d284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d288:	0711      	lsls	r1, r2, #28
 800d28a:	bf44      	itt	mi
 800d28c:	232b      	movmi	r3, #43	; 0x2b
 800d28e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d292:	f89a 3000 	ldrb.w	r3, [sl]
 800d296:	2b2a      	cmp	r3, #42	; 0x2a
 800d298:	d015      	beq.n	800d2c6 <_svfiprintf_r+0xf6>
 800d29a:	9a07      	ldr	r2, [sp, #28]
 800d29c:	4654      	mov	r4, sl
 800d29e:	2000      	movs	r0, #0
 800d2a0:	f04f 0c0a 	mov.w	ip, #10
 800d2a4:	4621      	mov	r1, r4
 800d2a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2aa:	3b30      	subs	r3, #48	; 0x30
 800d2ac:	2b09      	cmp	r3, #9
 800d2ae:	d94e      	bls.n	800d34e <_svfiprintf_r+0x17e>
 800d2b0:	b1b0      	cbz	r0, 800d2e0 <_svfiprintf_r+0x110>
 800d2b2:	9207      	str	r2, [sp, #28]
 800d2b4:	e014      	b.n	800d2e0 <_svfiprintf_r+0x110>
 800d2b6:	eba0 0308 	sub.w	r3, r0, r8
 800d2ba:	fa09 f303 	lsl.w	r3, r9, r3
 800d2be:	4313      	orrs	r3, r2
 800d2c0:	9304      	str	r3, [sp, #16]
 800d2c2:	46a2      	mov	sl, r4
 800d2c4:	e7d2      	b.n	800d26c <_svfiprintf_r+0x9c>
 800d2c6:	9b03      	ldr	r3, [sp, #12]
 800d2c8:	1d19      	adds	r1, r3, #4
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	9103      	str	r1, [sp, #12]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	bfbb      	ittet	lt
 800d2d2:	425b      	neglt	r3, r3
 800d2d4:	f042 0202 	orrlt.w	r2, r2, #2
 800d2d8:	9307      	strge	r3, [sp, #28]
 800d2da:	9307      	strlt	r3, [sp, #28]
 800d2dc:	bfb8      	it	lt
 800d2de:	9204      	strlt	r2, [sp, #16]
 800d2e0:	7823      	ldrb	r3, [r4, #0]
 800d2e2:	2b2e      	cmp	r3, #46	; 0x2e
 800d2e4:	d10c      	bne.n	800d300 <_svfiprintf_r+0x130>
 800d2e6:	7863      	ldrb	r3, [r4, #1]
 800d2e8:	2b2a      	cmp	r3, #42	; 0x2a
 800d2ea:	d135      	bne.n	800d358 <_svfiprintf_r+0x188>
 800d2ec:	9b03      	ldr	r3, [sp, #12]
 800d2ee:	1d1a      	adds	r2, r3, #4
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	9203      	str	r2, [sp, #12]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	bfb8      	it	lt
 800d2f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2fc:	3402      	adds	r4, #2
 800d2fe:	9305      	str	r3, [sp, #20]
 800d300:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d3cc <_svfiprintf_r+0x1fc>
 800d304:	7821      	ldrb	r1, [r4, #0]
 800d306:	2203      	movs	r2, #3
 800d308:	4650      	mov	r0, sl
 800d30a:	f7f2 ff69 	bl	80001e0 <memchr>
 800d30e:	b140      	cbz	r0, 800d322 <_svfiprintf_r+0x152>
 800d310:	2340      	movs	r3, #64	; 0x40
 800d312:	eba0 000a 	sub.w	r0, r0, sl
 800d316:	fa03 f000 	lsl.w	r0, r3, r0
 800d31a:	9b04      	ldr	r3, [sp, #16]
 800d31c:	4303      	orrs	r3, r0
 800d31e:	3401      	adds	r4, #1
 800d320:	9304      	str	r3, [sp, #16]
 800d322:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d326:	4826      	ldr	r0, [pc, #152]	; (800d3c0 <_svfiprintf_r+0x1f0>)
 800d328:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d32c:	2206      	movs	r2, #6
 800d32e:	f7f2 ff57 	bl	80001e0 <memchr>
 800d332:	2800      	cmp	r0, #0
 800d334:	d038      	beq.n	800d3a8 <_svfiprintf_r+0x1d8>
 800d336:	4b23      	ldr	r3, [pc, #140]	; (800d3c4 <_svfiprintf_r+0x1f4>)
 800d338:	bb1b      	cbnz	r3, 800d382 <_svfiprintf_r+0x1b2>
 800d33a:	9b03      	ldr	r3, [sp, #12]
 800d33c:	3307      	adds	r3, #7
 800d33e:	f023 0307 	bic.w	r3, r3, #7
 800d342:	3308      	adds	r3, #8
 800d344:	9303      	str	r3, [sp, #12]
 800d346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d348:	4433      	add	r3, r6
 800d34a:	9309      	str	r3, [sp, #36]	; 0x24
 800d34c:	e767      	b.n	800d21e <_svfiprintf_r+0x4e>
 800d34e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d352:	460c      	mov	r4, r1
 800d354:	2001      	movs	r0, #1
 800d356:	e7a5      	b.n	800d2a4 <_svfiprintf_r+0xd4>
 800d358:	2300      	movs	r3, #0
 800d35a:	3401      	adds	r4, #1
 800d35c:	9305      	str	r3, [sp, #20]
 800d35e:	4619      	mov	r1, r3
 800d360:	f04f 0c0a 	mov.w	ip, #10
 800d364:	4620      	mov	r0, r4
 800d366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d36a:	3a30      	subs	r2, #48	; 0x30
 800d36c:	2a09      	cmp	r2, #9
 800d36e:	d903      	bls.n	800d378 <_svfiprintf_r+0x1a8>
 800d370:	2b00      	cmp	r3, #0
 800d372:	d0c5      	beq.n	800d300 <_svfiprintf_r+0x130>
 800d374:	9105      	str	r1, [sp, #20]
 800d376:	e7c3      	b.n	800d300 <_svfiprintf_r+0x130>
 800d378:	fb0c 2101 	mla	r1, ip, r1, r2
 800d37c:	4604      	mov	r4, r0
 800d37e:	2301      	movs	r3, #1
 800d380:	e7f0      	b.n	800d364 <_svfiprintf_r+0x194>
 800d382:	ab03      	add	r3, sp, #12
 800d384:	9300      	str	r3, [sp, #0]
 800d386:	462a      	mov	r2, r5
 800d388:	4b0f      	ldr	r3, [pc, #60]	; (800d3c8 <_svfiprintf_r+0x1f8>)
 800d38a:	a904      	add	r1, sp, #16
 800d38c:	4638      	mov	r0, r7
 800d38e:	f7fd feab 	bl	800b0e8 <_printf_float>
 800d392:	1c42      	adds	r2, r0, #1
 800d394:	4606      	mov	r6, r0
 800d396:	d1d6      	bne.n	800d346 <_svfiprintf_r+0x176>
 800d398:	89ab      	ldrh	r3, [r5, #12]
 800d39a:	065b      	lsls	r3, r3, #25
 800d39c:	f53f af2c 	bmi.w	800d1f8 <_svfiprintf_r+0x28>
 800d3a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3a2:	b01d      	add	sp, #116	; 0x74
 800d3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3a8:	ab03      	add	r3, sp, #12
 800d3aa:	9300      	str	r3, [sp, #0]
 800d3ac:	462a      	mov	r2, r5
 800d3ae:	4b06      	ldr	r3, [pc, #24]	; (800d3c8 <_svfiprintf_r+0x1f8>)
 800d3b0:	a904      	add	r1, sp, #16
 800d3b2:	4638      	mov	r0, r7
 800d3b4:	f7fe f93c 	bl	800b630 <_printf_i>
 800d3b8:	e7eb      	b.n	800d392 <_svfiprintf_r+0x1c2>
 800d3ba:	bf00      	nop
 800d3bc:	0800de4c 	.word	0x0800de4c
 800d3c0:	0800de56 	.word	0x0800de56
 800d3c4:	0800b0e9 	.word	0x0800b0e9
 800d3c8:	0800d119 	.word	0x0800d119
 800d3cc:	0800de52 	.word	0x0800de52

0800d3d0 <_read_r>:
 800d3d0:	b538      	push	{r3, r4, r5, lr}
 800d3d2:	4d07      	ldr	r5, [pc, #28]	; (800d3f0 <_read_r+0x20>)
 800d3d4:	4604      	mov	r4, r0
 800d3d6:	4608      	mov	r0, r1
 800d3d8:	4611      	mov	r1, r2
 800d3da:	2200      	movs	r2, #0
 800d3dc:	602a      	str	r2, [r5, #0]
 800d3de:	461a      	mov	r2, r3
 800d3e0:	f7f6 f920 	bl	8003624 <_read>
 800d3e4:	1c43      	adds	r3, r0, #1
 800d3e6:	d102      	bne.n	800d3ee <_read_r+0x1e>
 800d3e8:	682b      	ldr	r3, [r5, #0]
 800d3ea:	b103      	cbz	r3, 800d3ee <_read_r+0x1e>
 800d3ec:	6023      	str	r3, [r4, #0]
 800d3ee:	bd38      	pop	{r3, r4, r5, pc}
 800d3f0:	20005664 	.word	0x20005664

0800d3f4 <__assert_func>:
 800d3f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3f6:	4614      	mov	r4, r2
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	4b09      	ldr	r3, [pc, #36]	; (800d420 <__assert_func+0x2c>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	4605      	mov	r5, r0
 800d400:	68d8      	ldr	r0, [r3, #12]
 800d402:	b14c      	cbz	r4, 800d418 <__assert_func+0x24>
 800d404:	4b07      	ldr	r3, [pc, #28]	; (800d424 <__assert_func+0x30>)
 800d406:	9100      	str	r1, [sp, #0]
 800d408:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d40c:	4906      	ldr	r1, [pc, #24]	; (800d428 <__assert_func+0x34>)
 800d40e:	462b      	mov	r3, r5
 800d410:	f000 f80e 	bl	800d430 <fiprintf>
 800d414:	f000 faa0 	bl	800d958 <abort>
 800d418:	4b04      	ldr	r3, [pc, #16]	; (800d42c <__assert_func+0x38>)
 800d41a:	461c      	mov	r4, r3
 800d41c:	e7f3      	b.n	800d406 <__assert_func+0x12>
 800d41e:	bf00      	nop
 800d420:	20000030 	.word	0x20000030
 800d424:	0800de5d 	.word	0x0800de5d
 800d428:	0800de6a 	.word	0x0800de6a
 800d42c:	0800de98 	.word	0x0800de98

0800d430 <fiprintf>:
 800d430:	b40e      	push	{r1, r2, r3}
 800d432:	b503      	push	{r0, r1, lr}
 800d434:	4601      	mov	r1, r0
 800d436:	ab03      	add	r3, sp, #12
 800d438:	4805      	ldr	r0, [pc, #20]	; (800d450 <fiprintf+0x20>)
 800d43a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d43e:	6800      	ldr	r0, [r0, #0]
 800d440:	9301      	str	r3, [sp, #4]
 800d442:	f000 f88b 	bl	800d55c <_vfiprintf_r>
 800d446:	b002      	add	sp, #8
 800d448:	f85d eb04 	ldr.w	lr, [sp], #4
 800d44c:	b003      	add	sp, #12
 800d44e:	4770      	bx	lr
 800d450:	20000030 	.word	0x20000030

0800d454 <__ascii_mbtowc>:
 800d454:	b082      	sub	sp, #8
 800d456:	b901      	cbnz	r1, 800d45a <__ascii_mbtowc+0x6>
 800d458:	a901      	add	r1, sp, #4
 800d45a:	b142      	cbz	r2, 800d46e <__ascii_mbtowc+0x1a>
 800d45c:	b14b      	cbz	r3, 800d472 <__ascii_mbtowc+0x1e>
 800d45e:	7813      	ldrb	r3, [r2, #0]
 800d460:	600b      	str	r3, [r1, #0]
 800d462:	7812      	ldrb	r2, [r2, #0]
 800d464:	1e10      	subs	r0, r2, #0
 800d466:	bf18      	it	ne
 800d468:	2001      	movne	r0, #1
 800d46a:	b002      	add	sp, #8
 800d46c:	4770      	bx	lr
 800d46e:	4610      	mov	r0, r2
 800d470:	e7fb      	b.n	800d46a <__ascii_mbtowc+0x16>
 800d472:	f06f 0001 	mvn.w	r0, #1
 800d476:	e7f8      	b.n	800d46a <__ascii_mbtowc+0x16>

0800d478 <memmove>:
 800d478:	4288      	cmp	r0, r1
 800d47a:	b510      	push	{r4, lr}
 800d47c:	eb01 0402 	add.w	r4, r1, r2
 800d480:	d902      	bls.n	800d488 <memmove+0x10>
 800d482:	4284      	cmp	r4, r0
 800d484:	4623      	mov	r3, r4
 800d486:	d807      	bhi.n	800d498 <memmove+0x20>
 800d488:	1e43      	subs	r3, r0, #1
 800d48a:	42a1      	cmp	r1, r4
 800d48c:	d008      	beq.n	800d4a0 <memmove+0x28>
 800d48e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d492:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d496:	e7f8      	b.n	800d48a <memmove+0x12>
 800d498:	4402      	add	r2, r0
 800d49a:	4601      	mov	r1, r0
 800d49c:	428a      	cmp	r2, r1
 800d49e:	d100      	bne.n	800d4a2 <memmove+0x2a>
 800d4a0:	bd10      	pop	{r4, pc}
 800d4a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4aa:	e7f7      	b.n	800d49c <memmove+0x24>

0800d4ac <_realloc_r>:
 800d4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4b0:	4680      	mov	r8, r0
 800d4b2:	4614      	mov	r4, r2
 800d4b4:	460e      	mov	r6, r1
 800d4b6:	b921      	cbnz	r1, 800d4c2 <_realloc_r+0x16>
 800d4b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4bc:	4611      	mov	r1, r2
 800d4be:	f7fd bcff 	b.w	800aec0 <_malloc_r>
 800d4c2:	b92a      	cbnz	r2, 800d4d0 <_realloc_r+0x24>
 800d4c4:	f7ff fddc 	bl	800d080 <_free_r>
 800d4c8:	4625      	mov	r5, r4
 800d4ca:	4628      	mov	r0, r5
 800d4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4d0:	f000 faae 	bl	800da30 <_malloc_usable_size_r>
 800d4d4:	4284      	cmp	r4, r0
 800d4d6:	4607      	mov	r7, r0
 800d4d8:	d802      	bhi.n	800d4e0 <_realloc_r+0x34>
 800d4da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d4de:	d812      	bhi.n	800d506 <_realloc_r+0x5a>
 800d4e0:	4621      	mov	r1, r4
 800d4e2:	4640      	mov	r0, r8
 800d4e4:	f7fd fcec 	bl	800aec0 <_malloc_r>
 800d4e8:	4605      	mov	r5, r0
 800d4ea:	2800      	cmp	r0, #0
 800d4ec:	d0ed      	beq.n	800d4ca <_realloc_r+0x1e>
 800d4ee:	42bc      	cmp	r4, r7
 800d4f0:	4622      	mov	r2, r4
 800d4f2:	4631      	mov	r1, r6
 800d4f4:	bf28      	it	cs
 800d4f6:	463a      	movcs	r2, r7
 800d4f8:	f7fd fcab 	bl	800ae52 <memcpy>
 800d4fc:	4631      	mov	r1, r6
 800d4fe:	4640      	mov	r0, r8
 800d500:	f7ff fdbe 	bl	800d080 <_free_r>
 800d504:	e7e1      	b.n	800d4ca <_realloc_r+0x1e>
 800d506:	4635      	mov	r5, r6
 800d508:	e7df      	b.n	800d4ca <_realloc_r+0x1e>

0800d50a <__sfputc_r>:
 800d50a:	6893      	ldr	r3, [r2, #8]
 800d50c:	3b01      	subs	r3, #1
 800d50e:	2b00      	cmp	r3, #0
 800d510:	b410      	push	{r4}
 800d512:	6093      	str	r3, [r2, #8]
 800d514:	da08      	bge.n	800d528 <__sfputc_r+0x1e>
 800d516:	6994      	ldr	r4, [r2, #24]
 800d518:	42a3      	cmp	r3, r4
 800d51a:	db01      	blt.n	800d520 <__sfputc_r+0x16>
 800d51c:	290a      	cmp	r1, #10
 800d51e:	d103      	bne.n	800d528 <__sfputc_r+0x1e>
 800d520:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d524:	f000 b94a 	b.w	800d7bc <__swbuf_r>
 800d528:	6813      	ldr	r3, [r2, #0]
 800d52a:	1c58      	adds	r0, r3, #1
 800d52c:	6010      	str	r0, [r2, #0]
 800d52e:	7019      	strb	r1, [r3, #0]
 800d530:	4608      	mov	r0, r1
 800d532:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d536:	4770      	bx	lr

0800d538 <__sfputs_r>:
 800d538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d53a:	4606      	mov	r6, r0
 800d53c:	460f      	mov	r7, r1
 800d53e:	4614      	mov	r4, r2
 800d540:	18d5      	adds	r5, r2, r3
 800d542:	42ac      	cmp	r4, r5
 800d544:	d101      	bne.n	800d54a <__sfputs_r+0x12>
 800d546:	2000      	movs	r0, #0
 800d548:	e007      	b.n	800d55a <__sfputs_r+0x22>
 800d54a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d54e:	463a      	mov	r2, r7
 800d550:	4630      	mov	r0, r6
 800d552:	f7ff ffda 	bl	800d50a <__sfputc_r>
 800d556:	1c43      	adds	r3, r0, #1
 800d558:	d1f3      	bne.n	800d542 <__sfputs_r+0xa>
 800d55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d55c <_vfiprintf_r>:
 800d55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d560:	460d      	mov	r5, r1
 800d562:	b09d      	sub	sp, #116	; 0x74
 800d564:	4614      	mov	r4, r2
 800d566:	4698      	mov	r8, r3
 800d568:	4606      	mov	r6, r0
 800d56a:	b118      	cbz	r0, 800d574 <_vfiprintf_r+0x18>
 800d56c:	6983      	ldr	r3, [r0, #24]
 800d56e:	b90b      	cbnz	r3, 800d574 <_vfiprintf_r+0x18>
 800d570:	f7fd fbaa 	bl	800acc8 <__sinit>
 800d574:	4b89      	ldr	r3, [pc, #548]	; (800d79c <_vfiprintf_r+0x240>)
 800d576:	429d      	cmp	r5, r3
 800d578:	d11b      	bne.n	800d5b2 <_vfiprintf_r+0x56>
 800d57a:	6875      	ldr	r5, [r6, #4]
 800d57c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d57e:	07d9      	lsls	r1, r3, #31
 800d580:	d405      	bmi.n	800d58e <_vfiprintf_r+0x32>
 800d582:	89ab      	ldrh	r3, [r5, #12]
 800d584:	059a      	lsls	r2, r3, #22
 800d586:	d402      	bmi.n	800d58e <_vfiprintf_r+0x32>
 800d588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d58a:	f7fd fc60 	bl	800ae4e <__retarget_lock_acquire_recursive>
 800d58e:	89ab      	ldrh	r3, [r5, #12]
 800d590:	071b      	lsls	r3, r3, #28
 800d592:	d501      	bpl.n	800d598 <_vfiprintf_r+0x3c>
 800d594:	692b      	ldr	r3, [r5, #16]
 800d596:	b9eb      	cbnz	r3, 800d5d4 <_vfiprintf_r+0x78>
 800d598:	4629      	mov	r1, r5
 800d59a:	4630      	mov	r0, r6
 800d59c:	f000 f96e 	bl	800d87c <__swsetup_r>
 800d5a0:	b1c0      	cbz	r0, 800d5d4 <_vfiprintf_r+0x78>
 800d5a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5a4:	07dc      	lsls	r4, r3, #31
 800d5a6:	d50e      	bpl.n	800d5c6 <_vfiprintf_r+0x6a>
 800d5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ac:	b01d      	add	sp, #116	; 0x74
 800d5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b2:	4b7b      	ldr	r3, [pc, #492]	; (800d7a0 <_vfiprintf_r+0x244>)
 800d5b4:	429d      	cmp	r5, r3
 800d5b6:	d101      	bne.n	800d5bc <_vfiprintf_r+0x60>
 800d5b8:	68b5      	ldr	r5, [r6, #8]
 800d5ba:	e7df      	b.n	800d57c <_vfiprintf_r+0x20>
 800d5bc:	4b79      	ldr	r3, [pc, #484]	; (800d7a4 <_vfiprintf_r+0x248>)
 800d5be:	429d      	cmp	r5, r3
 800d5c0:	bf08      	it	eq
 800d5c2:	68f5      	ldreq	r5, [r6, #12]
 800d5c4:	e7da      	b.n	800d57c <_vfiprintf_r+0x20>
 800d5c6:	89ab      	ldrh	r3, [r5, #12]
 800d5c8:	0598      	lsls	r0, r3, #22
 800d5ca:	d4ed      	bmi.n	800d5a8 <_vfiprintf_r+0x4c>
 800d5cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5ce:	f7fd fc3f 	bl	800ae50 <__retarget_lock_release_recursive>
 800d5d2:	e7e9      	b.n	800d5a8 <_vfiprintf_r+0x4c>
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d5d8:	2320      	movs	r3, #32
 800d5da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5de:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5e2:	2330      	movs	r3, #48	; 0x30
 800d5e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d7a8 <_vfiprintf_r+0x24c>
 800d5e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5ec:	f04f 0901 	mov.w	r9, #1
 800d5f0:	4623      	mov	r3, r4
 800d5f2:	469a      	mov	sl, r3
 800d5f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5f8:	b10a      	cbz	r2, 800d5fe <_vfiprintf_r+0xa2>
 800d5fa:	2a25      	cmp	r2, #37	; 0x25
 800d5fc:	d1f9      	bne.n	800d5f2 <_vfiprintf_r+0x96>
 800d5fe:	ebba 0b04 	subs.w	fp, sl, r4
 800d602:	d00b      	beq.n	800d61c <_vfiprintf_r+0xc0>
 800d604:	465b      	mov	r3, fp
 800d606:	4622      	mov	r2, r4
 800d608:	4629      	mov	r1, r5
 800d60a:	4630      	mov	r0, r6
 800d60c:	f7ff ff94 	bl	800d538 <__sfputs_r>
 800d610:	3001      	adds	r0, #1
 800d612:	f000 80aa 	beq.w	800d76a <_vfiprintf_r+0x20e>
 800d616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d618:	445a      	add	r2, fp
 800d61a:	9209      	str	r2, [sp, #36]	; 0x24
 800d61c:	f89a 3000 	ldrb.w	r3, [sl]
 800d620:	2b00      	cmp	r3, #0
 800d622:	f000 80a2 	beq.w	800d76a <_vfiprintf_r+0x20e>
 800d626:	2300      	movs	r3, #0
 800d628:	f04f 32ff 	mov.w	r2, #4294967295
 800d62c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d630:	f10a 0a01 	add.w	sl, sl, #1
 800d634:	9304      	str	r3, [sp, #16]
 800d636:	9307      	str	r3, [sp, #28]
 800d638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d63c:	931a      	str	r3, [sp, #104]	; 0x68
 800d63e:	4654      	mov	r4, sl
 800d640:	2205      	movs	r2, #5
 800d642:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d646:	4858      	ldr	r0, [pc, #352]	; (800d7a8 <_vfiprintf_r+0x24c>)
 800d648:	f7f2 fdca 	bl	80001e0 <memchr>
 800d64c:	9a04      	ldr	r2, [sp, #16]
 800d64e:	b9d8      	cbnz	r0, 800d688 <_vfiprintf_r+0x12c>
 800d650:	06d1      	lsls	r1, r2, #27
 800d652:	bf44      	itt	mi
 800d654:	2320      	movmi	r3, #32
 800d656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d65a:	0713      	lsls	r3, r2, #28
 800d65c:	bf44      	itt	mi
 800d65e:	232b      	movmi	r3, #43	; 0x2b
 800d660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d664:	f89a 3000 	ldrb.w	r3, [sl]
 800d668:	2b2a      	cmp	r3, #42	; 0x2a
 800d66a:	d015      	beq.n	800d698 <_vfiprintf_r+0x13c>
 800d66c:	9a07      	ldr	r2, [sp, #28]
 800d66e:	4654      	mov	r4, sl
 800d670:	2000      	movs	r0, #0
 800d672:	f04f 0c0a 	mov.w	ip, #10
 800d676:	4621      	mov	r1, r4
 800d678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d67c:	3b30      	subs	r3, #48	; 0x30
 800d67e:	2b09      	cmp	r3, #9
 800d680:	d94e      	bls.n	800d720 <_vfiprintf_r+0x1c4>
 800d682:	b1b0      	cbz	r0, 800d6b2 <_vfiprintf_r+0x156>
 800d684:	9207      	str	r2, [sp, #28]
 800d686:	e014      	b.n	800d6b2 <_vfiprintf_r+0x156>
 800d688:	eba0 0308 	sub.w	r3, r0, r8
 800d68c:	fa09 f303 	lsl.w	r3, r9, r3
 800d690:	4313      	orrs	r3, r2
 800d692:	9304      	str	r3, [sp, #16]
 800d694:	46a2      	mov	sl, r4
 800d696:	e7d2      	b.n	800d63e <_vfiprintf_r+0xe2>
 800d698:	9b03      	ldr	r3, [sp, #12]
 800d69a:	1d19      	adds	r1, r3, #4
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	9103      	str	r1, [sp, #12]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	bfbb      	ittet	lt
 800d6a4:	425b      	neglt	r3, r3
 800d6a6:	f042 0202 	orrlt.w	r2, r2, #2
 800d6aa:	9307      	strge	r3, [sp, #28]
 800d6ac:	9307      	strlt	r3, [sp, #28]
 800d6ae:	bfb8      	it	lt
 800d6b0:	9204      	strlt	r2, [sp, #16]
 800d6b2:	7823      	ldrb	r3, [r4, #0]
 800d6b4:	2b2e      	cmp	r3, #46	; 0x2e
 800d6b6:	d10c      	bne.n	800d6d2 <_vfiprintf_r+0x176>
 800d6b8:	7863      	ldrb	r3, [r4, #1]
 800d6ba:	2b2a      	cmp	r3, #42	; 0x2a
 800d6bc:	d135      	bne.n	800d72a <_vfiprintf_r+0x1ce>
 800d6be:	9b03      	ldr	r3, [sp, #12]
 800d6c0:	1d1a      	adds	r2, r3, #4
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	9203      	str	r2, [sp, #12]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	bfb8      	it	lt
 800d6ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6ce:	3402      	adds	r4, #2
 800d6d0:	9305      	str	r3, [sp, #20]
 800d6d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d7b8 <_vfiprintf_r+0x25c>
 800d6d6:	7821      	ldrb	r1, [r4, #0]
 800d6d8:	2203      	movs	r2, #3
 800d6da:	4650      	mov	r0, sl
 800d6dc:	f7f2 fd80 	bl	80001e0 <memchr>
 800d6e0:	b140      	cbz	r0, 800d6f4 <_vfiprintf_r+0x198>
 800d6e2:	2340      	movs	r3, #64	; 0x40
 800d6e4:	eba0 000a 	sub.w	r0, r0, sl
 800d6e8:	fa03 f000 	lsl.w	r0, r3, r0
 800d6ec:	9b04      	ldr	r3, [sp, #16]
 800d6ee:	4303      	orrs	r3, r0
 800d6f0:	3401      	adds	r4, #1
 800d6f2:	9304      	str	r3, [sp, #16]
 800d6f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6f8:	482c      	ldr	r0, [pc, #176]	; (800d7ac <_vfiprintf_r+0x250>)
 800d6fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6fe:	2206      	movs	r2, #6
 800d700:	f7f2 fd6e 	bl	80001e0 <memchr>
 800d704:	2800      	cmp	r0, #0
 800d706:	d03f      	beq.n	800d788 <_vfiprintf_r+0x22c>
 800d708:	4b29      	ldr	r3, [pc, #164]	; (800d7b0 <_vfiprintf_r+0x254>)
 800d70a:	bb1b      	cbnz	r3, 800d754 <_vfiprintf_r+0x1f8>
 800d70c:	9b03      	ldr	r3, [sp, #12]
 800d70e:	3307      	adds	r3, #7
 800d710:	f023 0307 	bic.w	r3, r3, #7
 800d714:	3308      	adds	r3, #8
 800d716:	9303      	str	r3, [sp, #12]
 800d718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d71a:	443b      	add	r3, r7
 800d71c:	9309      	str	r3, [sp, #36]	; 0x24
 800d71e:	e767      	b.n	800d5f0 <_vfiprintf_r+0x94>
 800d720:	fb0c 3202 	mla	r2, ip, r2, r3
 800d724:	460c      	mov	r4, r1
 800d726:	2001      	movs	r0, #1
 800d728:	e7a5      	b.n	800d676 <_vfiprintf_r+0x11a>
 800d72a:	2300      	movs	r3, #0
 800d72c:	3401      	adds	r4, #1
 800d72e:	9305      	str	r3, [sp, #20]
 800d730:	4619      	mov	r1, r3
 800d732:	f04f 0c0a 	mov.w	ip, #10
 800d736:	4620      	mov	r0, r4
 800d738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d73c:	3a30      	subs	r2, #48	; 0x30
 800d73e:	2a09      	cmp	r2, #9
 800d740:	d903      	bls.n	800d74a <_vfiprintf_r+0x1ee>
 800d742:	2b00      	cmp	r3, #0
 800d744:	d0c5      	beq.n	800d6d2 <_vfiprintf_r+0x176>
 800d746:	9105      	str	r1, [sp, #20]
 800d748:	e7c3      	b.n	800d6d2 <_vfiprintf_r+0x176>
 800d74a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d74e:	4604      	mov	r4, r0
 800d750:	2301      	movs	r3, #1
 800d752:	e7f0      	b.n	800d736 <_vfiprintf_r+0x1da>
 800d754:	ab03      	add	r3, sp, #12
 800d756:	9300      	str	r3, [sp, #0]
 800d758:	462a      	mov	r2, r5
 800d75a:	4b16      	ldr	r3, [pc, #88]	; (800d7b4 <_vfiprintf_r+0x258>)
 800d75c:	a904      	add	r1, sp, #16
 800d75e:	4630      	mov	r0, r6
 800d760:	f7fd fcc2 	bl	800b0e8 <_printf_float>
 800d764:	4607      	mov	r7, r0
 800d766:	1c78      	adds	r0, r7, #1
 800d768:	d1d6      	bne.n	800d718 <_vfiprintf_r+0x1bc>
 800d76a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d76c:	07d9      	lsls	r1, r3, #31
 800d76e:	d405      	bmi.n	800d77c <_vfiprintf_r+0x220>
 800d770:	89ab      	ldrh	r3, [r5, #12]
 800d772:	059a      	lsls	r2, r3, #22
 800d774:	d402      	bmi.n	800d77c <_vfiprintf_r+0x220>
 800d776:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d778:	f7fd fb6a 	bl	800ae50 <__retarget_lock_release_recursive>
 800d77c:	89ab      	ldrh	r3, [r5, #12]
 800d77e:	065b      	lsls	r3, r3, #25
 800d780:	f53f af12 	bmi.w	800d5a8 <_vfiprintf_r+0x4c>
 800d784:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d786:	e711      	b.n	800d5ac <_vfiprintf_r+0x50>
 800d788:	ab03      	add	r3, sp, #12
 800d78a:	9300      	str	r3, [sp, #0]
 800d78c:	462a      	mov	r2, r5
 800d78e:	4b09      	ldr	r3, [pc, #36]	; (800d7b4 <_vfiprintf_r+0x258>)
 800d790:	a904      	add	r1, sp, #16
 800d792:	4630      	mov	r0, r6
 800d794:	f7fd ff4c 	bl	800b630 <_printf_i>
 800d798:	e7e4      	b.n	800d764 <_vfiprintf_r+0x208>
 800d79a:	bf00      	nop
 800d79c:	0800dbe8 	.word	0x0800dbe8
 800d7a0:	0800dc08 	.word	0x0800dc08
 800d7a4:	0800dbc8 	.word	0x0800dbc8
 800d7a8:	0800de4c 	.word	0x0800de4c
 800d7ac:	0800de56 	.word	0x0800de56
 800d7b0:	0800b0e9 	.word	0x0800b0e9
 800d7b4:	0800d539 	.word	0x0800d539
 800d7b8:	0800de52 	.word	0x0800de52

0800d7bc <__swbuf_r>:
 800d7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7be:	460e      	mov	r6, r1
 800d7c0:	4614      	mov	r4, r2
 800d7c2:	4605      	mov	r5, r0
 800d7c4:	b118      	cbz	r0, 800d7ce <__swbuf_r+0x12>
 800d7c6:	6983      	ldr	r3, [r0, #24]
 800d7c8:	b90b      	cbnz	r3, 800d7ce <__swbuf_r+0x12>
 800d7ca:	f7fd fa7d 	bl	800acc8 <__sinit>
 800d7ce:	4b21      	ldr	r3, [pc, #132]	; (800d854 <__swbuf_r+0x98>)
 800d7d0:	429c      	cmp	r4, r3
 800d7d2:	d12b      	bne.n	800d82c <__swbuf_r+0x70>
 800d7d4:	686c      	ldr	r4, [r5, #4]
 800d7d6:	69a3      	ldr	r3, [r4, #24]
 800d7d8:	60a3      	str	r3, [r4, #8]
 800d7da:	89a3      	ldrh	r3, [r4, #12]
 800d7dc:	071a      	lsls	r2, r3, #28
 800d7de:	d52f      	bpl.n	800d840 <__swbuf_r+0x84>
 800d7e0:	6923      	ldr	r3, [r4, #16]
 800d7e2:	b36b      	cbz	r3, 800d840 <__swbuf_r+0x84>
 800d7e4:	6923      	ldr	r3, [r4, #16]
 800d7e6:	6820      	ldr	r0, [r4, #0]
 800d7e8:	1ac0      	subs	r0, r0, r3
 800d7ea:	6963      	ldr	r3, [r4, #20]
 800d7ec:	b2f6      	uxtb	r6, r6
 800d7ee:	4283      	cmp	r3, r0
 800d7f0:	4637      	mov	r7, r6
 800d7f2:	dc04      	bgt.n	800d7fe <__swbuf_r+0x42>
 800d7f4:	4621      	mov	r1, r4
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	f7ff f842 	bl	800c880 <_fflush_r>
 800d7fc:	bb30      	cbnz	r0, 800d84c <__swbuf_r+0x90>
 800d7fe:	68a3      	ldr	r3, [r4, #8]
 800d800:	3b01      	subs	r3, #1
 800d802:	60a3      	str	r3, [r4, #8]
 800d804:	6823      	ldr	r3, [r4, #0]
 800d806:	1c5a      	adds	r2, r3, #1
 800d808:	6022      	str	r2, [r4, #0]
 800d80a:	701e      	strb	r6, [r3, #0]
 800d80c:	6963      	ldr	r3, [r4, #20]
 800d80e:	3001      	adds	r0, #1
 800d810:	4283      	cmp	r3, r0
 800d812:	d004      	beq.n	800d81e <__swbuf_r+0x62>
 800d814:	89a3      	ldrh	r3, [r4, #12]
 800d816:	07db      	lsls	r3, r3, #31
 800d818:	d506      	bpl.n	800d828 <__swbuf_r+0x6c>
 800d81a:	2e0a      	cmp	r6, #10
 800d81c:	d104      	bne.n	800d828 <__swbuf_r+0x6c>
 800d81e:	4621      	mov	r1, r4
 800d820:	4628      	mov	r0, r5
 800d822:	f7ff f82d 	bl	800c880 <_fflush_r>
 800d826:	b988      	cbnz	r0, 800d84c <__swbuf_r+0x90>
 800d828:	4638      	mov	r0, r7
 800d82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d82c:	4b0a      	ldr	r3, [pc, #40]	; (800d858 <__swbuf_r+0x9c>)
 800d82e:	429c      	cmp	r4, r3
 800d830:	d101      	bne.n	800d836 <__swbuf_r+0x7a>
 800d832:	68ac      	ldr	r4, [r5, #8]
 800d834:	e7cf      	b.n	800d7d6 <__swbuf_r+0x1a>
 800d836:	4b09      	ldr	r3, [pc, #36]	; (800d85c <__swbuf_r+0xa0>)
 800d838:	429c      	cmp	r4, r3
 800d83a:	bf08      	it	eq
 800d83c:	68ec      	ldreq	r4, [r5, #12]
 800d83e:	e7ca      	b.n	800d7d6 <__swbuf_r+0x1a>
 800d840:	4621      	mov	r1, r4
 800d842:	4628      	mov	r0, r5
 800d844:	f000 f81a 	bl	800d87c <__swsetup_r>
 800d848:	2800      	cmp	r0, #0
 800d84a:	d0cb      	beq.n	800d7e4 <__swbuf_r+0x28>
 800d84c:	f04f 37ff 	mov.w	r7, #4294967295
 800d850:	e7ea      	b.n	800d828 <__swbuf_r+0x6c>
 800d852:	bf00      	nop
 800d854:	0800dbe8 	.word	0x0800dbe8
 800d858:	0800dc08 	.word	0x0800dc08
 800d85c:	0800dbc8 	.word	0x0800dbc8

0800d860 <__ascii_wctomb>:
 800d860:	b149      	cbz	r1, 800d876 <__ascii_wctomb+0x16>
 800d862:	2aff      	cmp	r2, #255	; 0xff
 800d864:	bf85      	ittet	hi
 800d866:	238a      	movhi	r3, #138	; 0x8a
 800d868:	6003      	strhi	r3, [r0, #0]
 800d86a:	700a      	strbls	r2, [r1, #0]
 800d86c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d870:	bf98      	it	ls
 800d872:	2001      	movls	r0, #1
 800d874:	4770      	bx	lr
 800d876:	4608      	mov	r0, r1
 800d878:	4770      	bx	lr
	...

0800d87c <__swsetup_r>:
 800d87c:	4b32      	ldr	r3, [pc, #200]	; (800d948 <__swsetup_r+0xcc>)
 800d87e:	b570      	push	{r4, r5, r6, lr}
 800d880:	681d      	ldr	r5, [r3, #0]
 800d882:	4606      	mov	r6, r0
 800d884:	460c      	mov	r4, r1
 800d886:	b125      	cbz	r5, 800d892 <__swsetup_r+0x16>
 800d888:	69ab      	ldr	r3, [r5, #24]
 800d88a:	b913      	cbnz	r3, 800d892 <__swsetup_r+0x16>
 800d88c:	4628      	mov	r0, r5
 800d88e:	f7fd fa1b 	bl	800acc8 <__sinit>
 800d892:	4b2e      	ldr	r3, [pc, #184]	; (800d94c <__swsetup_r+0xd0>)
 800d894:	429c      	cmp	r4, r3
 800d896:	d10f      	bne.n	800d8b8 <__swsetup_r+0x3c>
 800d898:	686c      	ldr	r4, [r5, #4]
 800d89a:	89a3      	ldrh	r3, [r4, #12]
 800d89c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d8a0:	0719      	lsls	r1, r3, #28
 800d8a2:	d42c      	bmi.n	800d8fe <__swsetup_r+0x82>
 800d8a4:	06dd      	lsls	r5, r3, #27
 800d8a6:	d411      	bmi.n	800d8cc <__swsetup_r+0x50>
 800d8a8:	2309      	movs	r3, #9
 800d8aa:	6033      	str	r3, [r6, #0]
 800d8ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d8b0:	81a3      	strh	r3, [r4, #12]
 800d8b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8b6:	e03e      	b.n	800d936 <__swsetup_r+0xba>
 800d8b8:	4b25      	ldr	r3, [pc, #148]	; (800d950 <__swsetup_r+0xd4>)
 800d8ba:	429c      	cmp	r4, r3
 800d8bc:	d101      	bne.n	800d8c2 <__swsetup_r+0x46>
 800d8be:	68ac      	ldr	r4, [r5, #8]
 800d8c0:	e7eb      	b.n	800d89a <__swsetup_r+0x1e>
 800d8c2:	4b24      	ldr	r3, [pc, #144]	; (800d954 <__swsetup_r+0xd8>)
 800d8c4:	429c      	cmp	r4, r3
 800d8c6:	bf08      	it	eq
 800d8c8:	68ec      	ldreq	r4, [r5, #12]
 800d8ca:	e7e6      	b.n	800d89a <__swsetup_r+0x1e>
 800d8cc:	0758      	lsls	r0, r3, #29
 800d8ce:	d512      	bpl.n	800d8f6 <__swsetup_r+0x7a>
 800d8d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8d2:	b141      	cbz	r1, 800d8e6 <__swsetup_r+0x6a>
 800d8d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8d8:	4299      	cmp	r1, r3
 800d8da:	d002      	beq.n	800d8e2 <__swsetup_r+0x66>
 800d8dc:	4630      	mov	r0, r6
 800d8de:	f7ff fbcf 	bl	800d080 <_free_r>
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	6363      	str	r3, [r4, #52]	; 0x34
 800d8e6:	89a3      	ldrh	r3, [r4, #12]
 800d8e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d8ec:	81a3      	strh	r3, [r4, #12]
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	6063      	str	r3, [r4, #4]
 800d8f2:	6923      	ldr	r3, [r4, #16]
 800d8f4:	6023      	str	r3, [r4, #0]
 800d8f6:	89a3      	ldrh	r3, [r4, #12]
 800d8f8:	f043 0308 	orr.w	r3, r3, #8
 800d8fc:	81a3      	strh	r3, [r4, #12]
 800d8fe:	6923      	ldr	r3, [r4, #16]
 800d900:	b94b      	cbnz	r3, 800d916 <__swsetup_r+0x9a>
 800d902:	89a3      	ldrh	r3, [r4, #12]
 800d904:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d90c:	d003      	beq.n	800d916 <__swsetup_r+0x9a>
 800d90e:	4621      	mov	r1, r4
 800d910:	4630      	mov	r0, r6
 800d912:	f000 f84d 	bl	800d9b0 <__smakebuf_r>
 800d916:	89a0      	ldrh	r0, [r4, #12]
 800d918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d91c:	f010 0301 	ands.w	r3, r0, #1
 800d920:	d00a      	beq.n	800d938 <__swsetup_r+0xbc>
 800d922:	2300      	movs	r3, #0
 800d924:	60a3      	str	r3, [r4, #8]
 800d926:	6963      	ldr	r3, [r4, #20]
 800d928:	425b      	negs	r3, r3
 800d92a:	61a3      	str	r3, [r4, #24]
 800d92c:	6923      	ldr	r3, [r4, #16]
 800d92e:	b943      	cbnz	r3, 800d942 <__swsetup_r+0xc6>
 800d930:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d934:	d1ba      	bne.n	800d8ac <__swsetup_r+0x30>
 800d936:	bd70      	pop	{r4, r5, r6, pc}
 800d938:	0781      	lsls	r1, r0, #30
 800d93a:	bf58      	it	pl
 800d93c:	6963      	ldrpl	r3, [r4, #20]
 800d93e:	60a3      	str	r3, [r4, #8]
 800d940:	e7f4      	b.n	800d92c <__swsetup_r+0xb0>
 800d942:	2000      	movs	r0, #0
 800d944:	e7f7      	b.n	800d936 <__swsetup_r+0xba>
 800d946:	bf00      	nop
 800d948:	20000030 	.word	0x20000030
 800d94c:	0800dbe8 	.word	0x0800dbe8
 800d950:	0800dc08 	.word	0x0800dc08
 800d954:	0800dbc8 	.word	0x0800dbc8

0800d958 <abort>:
 800d958:	b508      	push	{r3, lr}
 800d95a:	2006      	movs	r0, #6
 800d95c:	f000 f898 	bl	800da90 <raise>
 800d960:	2001      	movs	r0, #1
 800d962:	f7f5 fe55 	bl	8003610 <_exit>

0800d966 <__swhatbuf_r>:
 800d966:	b570      	push	{r4, r5, r6, lr}
 800d968:	460e      	mov	r6, r1
 800d96a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d96e:	2900      	cmp	r1, #0
 800d970:	b096      	sub	sp, #88	; 0x58
 800d972:	4614      	mov	r4, r2
 800d974:	461d      	mov	r5, r3
 800d976:	da08      	bge.n	800d98a <__swhatbuf_r+0x24>
 800d978:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d97c:	2200      	movs	r2, #0
 800d97e:	602a      	str	r2, [r5, #0]
 800d980:	061a      	lsls	r2, r3, #24
 800d982:	d410      	bmi.n	800d9a6 <__swhatbuf_r+0x40>
 800d984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d988:	e00e      	b.n	800d9a8 <__swhatbuf_r+0x42>
 800d98a:	466a      	mov	r2, sp
 800d98c:	f000 f89c 	bl	800dac8 <_fstat_r>
 800d990:	2800      	cmp	r0, #0
 800d992:	dbf1      	blt.n	800d978 <__swhatbuf_r+0x12>
 800d994:	9a01      	ldr	r2, [sp, #4]
 800d996:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d99a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d99e:	425a      	negs	r2, r3
 800d9a0:	415a      	adcs	r2, r3
 800d9a2:	602a      	str	r2, [r5, #0]
 800d9a4:	e7ee      	b.n	800d984 <__swhatbuf_r+0x1e>
 800d9a6:	2340      	movs	r3, #64	; 0x40
 800d9a8:	2000      	movs	r0, #0
 800d9aa:	6023      	str	r3, [r4, #0]
 800d9ac:	b016      	add	sp, #88	; 0x58
 800d9ae:	bd70      	pop	{r4, r5, r6, pc}

0800d9b0 <__smakebuf_r>:
 800d9b0:	898b      	ldrh	r3, [r1, #12]
 800d9b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9b4:	079d      	lsls	r5, r3, #30
 800d9b6:	4606      	mov	r6, r0
 800d9b8:	460c      	mov	r4, r1
 800d9ba:	d507      	bpl.n	800d9cc <__smakebuf_r+0x1c>
 800d9bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d9c0:	6023      	str	r3, [r4, #0]
 800d9c2:	6123      	str	r3, [r4, #16]
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	6163      	str	r3, [r4, #20]
 800d9c8:	b002      	add	sp, #8
 800d9ca:	bd70      	pop	{r4, r5, r6, pc}
 800d9cc:	ab01      	add	r3, sp, #4
 800d9ce:	466a      	mov	r2, sp
 800d9d0:	f7ff ffc9 	bl	800d966 <__swhatbuf_r>
 800d9d4:	9900      	ldr	r1, [sp, #0]
 800d9d6:	4605      	mov	r5, r0
 800d9d8:	4630      	mov	r0, r6
 800d9da:	f7fd fa71 	bl	800aec0 <_malloc_r>
 800d9de:	b948      	cbnz	r0, 800d9f4 <__smakebuf_r+0x44>
 800d9e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9e4:	059a      	lsls	r2, r3, #22
 800d9e6:	d4ef      	bmi.n	800d9c8 <__smakebuf_r+0x18>
 800d9e8:	f023 0303 	bic.w	r3, r3, #3
 800d9ec:	f043 0302 	orr.w	r3, r3, #2
 800d9f0:	81a3      	strh	r3, [r4, #12]
 800d9f2:	e7e3      	b.n	800d9bc <__smakebuf_r+0xc>
 800d9f4:	4b0d      	ldr	r3, [pc, #52]	; (800da2c <__smakebuf_r+0x7c>)
 800d9f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9f8:	89a3      	ldrh	r3, [r4, #12]
 800d9fa:	6020      	str	r0, [r4, #0]
 800d9fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da00:	81a3      	strh	r3, [r4, #12]
 800da02:	9b00      	ldr	r3, [sp, #0]
 800da04:	6163      	str	r3, [r4, #20]
 800da06:	9b01      	ldr	r3, [sp, #4]
 800da08:	6120      	str	r0, [r4, #16]
 800da0a:	b15b      	cbz	r3, 800da24 <__smakebuf_r+0x74>
 800da0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da10:	4630      	mov	r0, r6
 800da12:	f000 f86b 	bl	800daec <_isatty_r>
 800da16:	b128      	cbz	r0, 800da24 <__smakebuf_r+0x74>
 800da18:	89a3      	ldrh	r3, [r4, #12]
 800da1a:	f023 0303 	bic.w	r3, r3, #3
 800da1e:	f043 0301 	orr.w	r3, r3, #1
 800da22:	81a3      	strh	r3, [r4, #12]
 800da24:	89a0      	ldrh	r0, [r4, #12]
 800da26:	4305      	orrs	r5, r0
 800da28:	81a5      	strh	r5, [r4, #12]
 800da2a:	e7cd      	b.n	800d9c8 <__smakebuf_r+0x18>
 800da2c:	0800ac61 	.word	0x0800ac61

0800da30 <_malloc_usable_size_r>:
 800da30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da34:	1f18      	subs	r0, r3, #4
 800da36:	2b00      	cmp	r3, #0
 800da38:	bfbc      	itt	lt
 800da3a:	580b      	ldrlt	r3, [r1, r0]
 800da3c:	18c0      	addlt	r0, r0, r3
 800da3e:	4770      	bx	lr

0800da40 <_raise_r>:
 800da40:	291f      	cmp	r1, #31
 800da42:	b538      	push	{r3, r4, r5, lr}
 800da44:	4604      	mov	r4, r0
 800da46:	460d      	mov	r5, r1
 800da48:	d904      	bls.n	800da54 <_raise_r+0x14>
 800da4a:	2316      	movs	r3, #22
 800da4c:	6003      	str	r3, [r0, #0]
 800da4e:	f04f 30ff 	mov.w	r0, #4294967295
 800da52:	bd38      	pop	{r3, r4, r5, pc}
 800da54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da56:	b112      	cbz	r2, 800da5e <_raise_r+0x1e>
 800da58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da5c:	b94b      	cbnz	r3, 800da72 <_raise_r+0x32>
 800da5e:	4620      	mov	r0, r4
 800da60:	f000 f830 	bl	800dac4 <_getpid_r>
 800da64:	462a      	mov	r2, r5
 800da66:	4601      	mov	r1, r0
 800da68:	4620      	mov	r0, r4
 800da6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da6e:	f000 b817 	b.w	800daa0 <_kill_r>
 800da72:	2b01      	cmp	r3, #1
 800da74:	d00a      	beq.n	800da8c <_raise_r+0x4c>
 800da76:	1c59      	adds	r1, r3, #1
 800da78:	d103      	bne.n	800da82 <_raise_r+0x42>
 800da7a:	2316      	movs	r3, #22
 800da7c:	6003      	str	r3, [r0, #0]
 800da7e:	2001      	movs	r0, #1
 800da80:	e7e7      	b.n	800da52 <_raise_r+0x12>
 800da82:	2400      	movs	r4, #0
 800da84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da88:	4628      	mov	r0, r5
 800da8a:	4798      	blx	r3
 800da8c:	2000      	movs	r0, #0
 800da8e:	e7e0      	b.n	800da52 <_raise_r+0x12>

0800da90 <raise>:
 800da90:	4b02      	ldr	r3, [pc, #8]	; (800da9c <raise+0xc>)
 800da92:	4601      	mov	r1, r0
 800da94:	6818      	ldr	r0, [r3, #0]
 800da96:	f7ff bfd3 	b.w	800da40 <_raise_r>
 800da9a:	bf00      	nop
 800da9c:	20000030 	.word	0x20000030

0800daa0 <_kill_r>:
 800daa0:	b538      	push	{r3, r4, r5, lr}
 800daa2:	4d07      	ldr	r5, [pc, #28]	; (800dac0 <_kill_r+0x20>)
 800daa4:	2300      	movs	r3, #0
 800daa6:	4604      	mov	r4, r0
 800daa8:	4608      	mov	r0, r1
 800daaa:	4611      	mov	r1, r2
 800daac:	602b      	str	r3, [r5, #0]
 800daae:	f7f5 fd9f 	bl	80035f0 <_kill>
 800dab2:	1c43      	adds	r3, r0, #1
 800dab4:	d102      	bne.n	800dabc <_kill_r+0x1c>
 800dab6:	682b      	ldr	r3, [r5, #0]
 800dab8:	b103      	cbz	r3, 800dabc <_kill_r+0x1c>
 800daba:	6023      	str	r3, [r4, #0]
 800dabc:	bd38      	pop	{r3, r4, r5, pc}
 800dabe:	bf00      	nop
 800dac0:	20005664 	.word	0x20005664

0800dac4 <_getpid_r>:
 800dac4:	f7f5 bd8c 	b.w	80035e0 <_getpid>

0800dac8 <_fstat_r>:
 800dac8:	b538      	push	{r3, r4, r5, lr}
 800daca:	4d07      	ldr	r5, [pc, #28]	; (800dae8 <_fstat_r+0x20>)
 800dacc:	2300      	movs	r3, #0
 800dace:	4604      	mov	r4, r0
 800dad0:	4608      	mov	r0, r1
 800dad2:	4611      	mov	r1, r2
 800dad4:	602b      	str	r3, [r5, #0]
 800dad6:	f7f5 fdea 	bl	80036ae <_fstat>
 800dada:	1c43      	adds	r3, r0, #1
 800dadc:	d102      	bne.n	800dae4 <_fstat_r+0x1c>
 800dade:	682b      	ldr	r3, [r5, #0]
 800dae0:	b103      	cbz	r3, 800dae4 <_fstat_r+0x1c>
 800dae2:	6023      	str	r3, [r4, #0]
 800dae4:	bd38      	pop	{r3, r4, r5, pc}
 800dae6:	bf00      	nop
 800dae8:	20005664 	.word	0x20005664

0800daec <_isatty_r>:
 800daec:	b538      	push	{r3, r4, r5, lr}
 800daee:	4d06      	ldr	r5, [pc, #24]	; (800db08 <_isatty_r+0x1c>)
 800daf0:	2300      	movs	r3, #0
 800daf2:	4604      	mov	r4, r0
 800daf4:	4608      	mov	r0, r1
 800daf6:	602b      	str	r3, [r5, #0]
 800daf8:	f7f5 fde9 	bl	80036ce <_isatty>
 800dafc:	1c43      	adds	r3, r0, #1
 800dafe:	d102      	bne.n	800db06 <_isatty_r+0x1a>
 800db00:	682b      	ldr	r3, [r5, #0]
 800db02:	b103      	cbz	r3, 800db06 <_isatty_r+0x1a>
 800db04:	6023      	str	r3, [r4, #0]
 800db06:	bd38      	pop	{r3, r4, r5, pc}
 800db08:	20005664 	.word	0x20005664

0800db0c <_init>:
 800db0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0e:	bf00      	nop
 800db10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db12:	bc08      	pop	{r3}
 800db14:	469e      	mov	lr, r3
 800db16:	4770      	bx	lr

0800db18 <_fini>:
 800db18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db1a:	bf00      	nop
 800db1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db1e:	bc08      	pop	{r3}
 800db20:	469e      	mov	lr, r3
 800db22:	4770      	bx	lr
