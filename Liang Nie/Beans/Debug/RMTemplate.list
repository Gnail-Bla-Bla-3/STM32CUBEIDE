
RMTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010464  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  080105f8  080105f8  000205f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b1c  08010b1c  00030250  2**0
                  CONTENTS
  4 .ARM          00000008  08010b1c  08010b1c  00020b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b24  08010b24  00030250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b24  08010b24  00020b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010b28  08010b28  00020b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  08010b2c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030250  2**0
                  CONTENTS
 10 .bss          000056a4  20000250  20000250  00030250  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200058f4  200058f4  00030250  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030280  2**0
                  CONTENTS, READONLY
 14 .debug_info   000256d5  00000000  00000000  000302c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000053b9  00000000  00000000  00055998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f38  00000000  00000000  0005ad58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000184c  00000000  00000000  0005cc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026a3d  00000000  00000000  0005e4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000260c9  00000000  00000000  00084f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e2836  00000000  00000000  000aafe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000942c  00000000  00000000  0018d818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  00196c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080105dc 	.word	0x080105dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	080105dc 	.word	0x080105dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <BMI088_delay_ms>:


}

void BMI088_delay_ms(uint16_t ms)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]
    while(ms--)
 8000eae:	e003      	b.n	8000eb8 <BMI088_delay_ms+0x14>
    {
        BMI088_delay_us(1000);
 8000eb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb4:	f000 f80a 	bl	8000ecc <BMI088_delay_us>
    while(ms--)
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	1e5a      	subs	r2, r3, #1
 8000ebc:	80fa      	strh	r2, [r7, #6]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f6      	bne.n	8000eb0 <BMI088_delay_ms+0xc>
    }
}
 8000ec2:	bf00      	nop
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <BMI088_delay_us>:

void BMI088_delay_us(uint16_t us)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80fb      	strh	r3, [r7, #6]

    uint32_t ticks = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <BMI088_delay_us+0x84>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	22a8      	movs	r2, #168	; 0xa8
 8000ef4:	fb02 f303 	mul.w	r3, r2, r3
 8000ef8:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <BMI088_delay_us+0x84>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <BMI088_delay_us+0x84>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d0f8      	beq.n	8000f00 <BMI088_delay_us+0x34>
        {
            if (tnow < told)
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d206      	bcs.n	8000f24 <BMI088_delay_us+0x58>
            {
                tcnt += told - tnow;
 8000f16:	69fa      	ldr	r2, [r7, #28]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4413      	add	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
 8000f22:	e007      	b.n	8000f34 <BMI088_delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad2      	subs	r2, r2, r3
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4413      	add	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d200      	bcs.n	8000f42 <BMI088_delay_us+0x76>
        tnow = SysTick->VAL;
 8000f40:	e7de      	b.n	8000f00 <BMI088_delay_us+0x34>
            {
                break;
 8000f42:	bf00      	nop
            }
        }
    }


}
 8000f44:	bf00      	nop
 8000f46:	3724      	adds	r7, #36	; 0x24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e010 	.word	0xe000e010

08000f54 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <BMI088_ACCEL_NS_L+0x18>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <BMI088_ACCEL_NS_L+0x1c>)
 8000f5e:	8811      	ldrh	r1, [r2, #0]
 8000f60:	2200      	movs	r2, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f005 fbc2 	bl	80066ec <HAL_GPIO_WritePin>
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000004 	.word	0x20000004

08000f74 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <BMI088_ACCEL_NS_H+0x18>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <BMI088_ACCEL_NS_H+0x1c>)
 8000f7e:	8811      	ldrh	r1, [r2, #0]
 8000f80:	2201      	movs	r2, #1
 8000f82:	4618      	mov	r0, r3
 8000f84:	f005 fbb2 	bl	80066ec <HAL_GPIO_WritePin>
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000004 	.word	0x20000004

08000f94 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <BMI088_GYRO_NS_L+0x18>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <BMI088_GYRO_NS_L+0x1c>)
 8000f9e:	8811      	ldrh	r1, [r2, #0]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f005 fba2 	bl	80066ec <HAL_GPIO_WritePin>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	2000000c 	.word	0x2000000c

08000fb4 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <BMI088_GYRO_NS_H+0x18>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <BMI088_GYRO_NS_H+0x1c>)
 8000fbe:	8811      	ldrh	r1, [r2, #0]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f005 fb92 	bl	80066ec <HAL_GPIO_WritePin>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	2000000c 	.word	0x2000000c

08000fd4 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 8000fde:	f107 020f 	add.w	r2, r7, #15
 8000fe2:	1df9      	adds	r1, r7, #7
 8000fe4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2301      	movs	r3, #1
 8000fec:	4803      	ldr	r0, [pc, #12]	; (8000ffc <BMI088_read_write_byte+0x28>)
 8000fee:	f007 f877 	bl	80080e0 <HAL_SPI_TransmitReceive>
    return rx_data;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000908 	.word	0x20000908

08001000 <BMI088_accel_init>:

    return error;
}

uint8_t BMI088_accel_init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	71bb      	strb	r3, [r7, #6]
    uint8_t write_reg_num = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	71fb      	strb	r3, [r7, #7]

    //check communication
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 800100e:	f7ff ffa1 	bl	8000f54 <BMI088_ACCEL_NS_L>
 8001012:	2080      	movs	r0, #128	; 0x80
 8001014:	f7ff ffde 	bl	8000fd4 <BMI088_read_write_byte>
 8001018:	2055      	movs	r0, #85	; 0x55
 800101a:	f7ff ffdb 	bl	8000fd4 <BMI088_read_write_byte>
 800101e:	2055      	movs	r0, #85	; 0x55
 8001020:	f7ff ffd8 	bl	8000fd4 <BMI088_read_write_byte>
 8001024:	4603      	mov	r3, r0
 8001026:	71bb      	strb	r3, [r7, #6]
 8001028:	f7ff ffa4 	bl	8000f74 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800102c:	2096      	movs	r0, #150	; 0x96
 800102e:	f7ff ff4d 	bl	8000ecc <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001032:	f7ff ff8f 	bl	8000f54 <BMI088_ACCEL_NS_L>
 8001036:	2080      	movs	r0, #128	; 0x80
 8001038:	f7ff ffcc 	bl	8000fd4 <BMI088_read_write_byte>
 800103c:	2055      	movs	r0, #85	; 0x55
 800103e:	f7ff ffc9 	bl	8000fd4 <BMI088_read_write_byte>
 8001042:	2055      	movs	r0, #85	; 0x55
 8001044:	f7ff ffc6 	bl	8000fd4 <BMI088_read_write_byte>
 8001048:	4603      	mov	r3, r0
 800104a:	71bb      	strb	r3, [r7, #6]
 800104c:	f7ff ff92 	bl	8000f74 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001050:	2096      	movs	r0, #150	; 0x96
 8001052:	f7ff ff3b 	bl	8000ecc <BMI088_delay_us>

    //accel software reset
    BMI088_accel_write_single_reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 8001056:	f7ff ff7d 	bl	8000f54 <BMI088_ACCEL_NS_L>
 800105a:	21b6      	movs	r1, #182	; 0xb6
 800105c:	207e      	movs	r0, #126	; 0x7e
 800105e:	f000 fa21 	bl	80014a4 <BMI088_write_single_reg>
 8001062:	f7ff ff87 	bl	8000f74 <BMI088_ACCEL_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 8001066:	2050      	movs	r0, #80	; 0x50
 8001068:	f7ff ff1c 	bl	8000ea4 <BMI088_delay_ms>

    //check communication is normal after reset
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 800106c:	f7ff ff72 	bl	8000f54 <BMI088_ACCEL_NS_L>
 8001070:	2080      	movs	r0, #128	; 0x80
 8001072:	f7ff ffaf 	bl	8000fd4 <BMI088_read_write_byte>
 8001076:	2055      	movs	r0, #85	; 0x55
 8001078:	f7ff ffac 	bl	8000fd4 <BMI088_read_write_byte>
 800107c:	2055      	movs	r0, #85	; 0x55
 800107e:	f7ff ffa9 	bl	8000fd4 <BMI088_read_write_byte>
 8001082:	4603      	mov	r3, r0
 8001084:	71bb      	strb	r3, [r7, #6]
 8001086:	f7ff ff75 	bl	8000f74 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800108a:	2096      	movs	r0, #150	; 0x96
 800108c:	f7ff ff1e 	bl	8000ecc <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001090:	f7ff ff60 	bl	8000f54 <BMI088_ACCEL_NS_L>
 8001094:	2080      	movs	r0, #128	; 0x80
 8001096:	f7ff ff9d 	bl	8000fd4 <BMI088_read_write_byte>
 800109a:	2055      	movs	r0, #85	; 0x55
 800109c:	f7ff ff9a 	bl	8000fd4 <BMI088_read_write_byte>
 80010a0:	2055      	movs	r0, #85	; 0x55
 80010a2:	f7ff ff97 	bl	8000fd4 <BMI088_read_write_byte>
 80010a6:	4603      	mov	r3, r0
 80010a8:	71bb      	strb	r3, [r7, #6]
 80010aa:	f7ff ff63 	bl	8000f74 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80010ae:	2096      	movs	r0, #150	; 0x96
 80010b0:	f7ff ff0c 	bl	8000ecc <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_ACC_CHIP_ID_VALUE)
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	2b1e      	cmp	r3, #30
 80010b8:	d001      	beq.n	80010be <BMI088_accel_init+0xbe>
    {
        return BMI088_NO_SENSOR;
 80010ba:	23ff      	movs	r3, #255	; 0xff
 80010bc:	e052      	b.n	8001164 <BMI088_accel_init+0x164>
    }

    //set accel sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 80010be:	2300      	movs	r3, #0
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	e04b      	b.n	800115c <BMI088_accel_init+0x15c>
    {

        BMI088_accel_write_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], write_BMI088_accel_reg_data_error[write_reg_num][1]);
 80010c4:	f7ff ff46 	bl	8000f54 <BMI088_ACCEL_NS_L>
 80010c8:	79fa      	ldrb	r2, [r7, #7]
 80010ca:	4928      	ldr	r1, [pc, #160]	; (800116c <BMI088_accel_init+0x16c>)
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	7818      	ldrb	r0, [r3, #0]
 80010d6:	79fa      	ldrb	r2, [r7, #7]
 80010d8:	4924      	ldr	r1, [pc, #144]	; (800116c <BMI088_accel_init+0x16c>)
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	440b      	add	r3, r1
 80010e2:	3301      	adds	r3, #1
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4619      	mov	r1, r3
 80010e8:	f000 f9dc 	bl	80014a4 <BMI088_write_single_reg>
 80010ec:	f7ff ff42 	bl	8000f74 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80010f0:	2096      	movs	r0, #150	; 0x96
 80010f2:	f7ff feeb 	bl	8000ecc <BMI088_delay_us>

        BMI088_accel_read_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], res);
 80010f6:	f7ff ff2d 	bl	8000f54 <BMI088_ACCEL_NS_L>
 80010fa:	79fa      	ldrb	r2, [r7, #7]
 80010fc:	491b      	ldr	r1, [pc, #108]	; (800116c <BMI088_accel_init+0x16c>)
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	440b      	add	r3, r1
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800110c:	b2db      	uxtb	r3, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff60 	bl	8000fd4 <BMI088_read_write_byte>
 8001114:	2055      	movs	r0, #85	; 0x55
 8001116:	f7ff ff5d 	bl	8000fd4 <BMI088_read_write_byte>
 800111a:	2055      	movs	r0, #85	; 0x55
 800111c:	f7ff ff5a 	bl	8000fd4 <BMI088_read_write_byte>
 8001120:	4603      	mov	r3, r0
 8001122:	71bb      	strb	r3, [r7, #6]
 8001124:	f7ff ff26 	bl	8000f74 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001128:	2096      	movs	r0, #150	; 0x96
 800112a:	f7ff fecf 	bl	8000ecc <BMI088_delay_us>

        if (res != write_BMI088_accel_reg_data_error[write_reg_num][1])
 800112e:	79fa      	ldrb	r2, [r7, #7]
 8001130:	490e      	ldr	r1, [pc, #56]	; (800116c <BMI088_accel_init+0x16c>)
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	440b      	add	r3, r1
 800113a:	3301      	adds	r3, #1
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	79ba      	ldrb	r2, [r7, #6]
 8001140:	429a      	cmp	r2, r3
 8001142:	d008      	beq.n	8001156 <BMI088_accel_init+0x156>
        {
            return write_BMI088_accel_reg_data_error[write_reg_num][2];
 8001144:	79fa      	ldrb	r2, [r7, #7]
 8001146:	4909      	ldr	r1, [pc, #36]	; (800116c <BMI088_accel_init+0x16c>)
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	440b      	add	r3, r1
 8001150:	3302      	adds	r3, #2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	e006      	b.n	8001164 <BMI088_accel_init+0x164>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	3301      	adds	r3, #1
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b05      	cmp	r3, #5
 8001160:	d9b0      	bls.n	80010c4 <BMI088_accel_init+0xc4>
        }
    }
    return BMI088_NO_ERROR;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000018 	.word	0x20000018

08001170 <BMI088_gyro_init>:

uint8_t BMI088_gyro_init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	71bb      	strb	r3, [r7, #6]

    //check communication
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800117e:	f7ff ff09 	bl	8000f94 <BMI088_GYRO_NS_L>
 8001182:	1dbb      	adds	r3, r7, #6
 8001184:	4619      	mov	r1, r3
 8001186:	2000      	movs	r0, #0
 8001188:	f000 f9a0 	bl	80014cc <BMI088_read_single_reg>
 800118c:	f7ff ff12 	bl	8000fb4 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001190:	2096      	movs	r0, #150	; 0x96
 8001192:	f7ff fe9b 	bl	8000ecc <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001196:	f7ff fefd 	bl	8000f94 <BMI088_GYRO_NS_L>
 800119a:	1dbb      	adds	r3, r7, #6
 800119c:	4619      	mov	r1, r3
 800119e:	2000      	movs	r0, #0
 80011a0:	f000 f994 	bl	80014cc <BMI088_read_single_reg>
 80011a4:	f7ff ff06 	bl	8000fb4 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80011a8:	2096      	movs	r0, #150	; 0x96
 80011aa:	f7ff fe8f 	bl	8000ecc <BMI088_delay_us>

    //reset the gyro sensor
    BMI088_gyro_write_single_reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 80011ae:	f7ff fef1 	bl	8000f94 <BMI088_GYRO_NS_L>
 80011b2:	21b6      	movs	r1, #182	; 0xb6
 80011b4:	2014      	movs	r0, #20
 80011b6:	f000 f975 	bl	80014a4 <BMI088_write_single_reg>
 80011ba:	f7ff fefb 	bl	8000fb4 <BMI088_GYRO_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 80011be:	2050      	movs	r0, #80	; 0x50
 80011c0:	f7ff fe70 	bl	8000ea4 <BMI088_delay_ms>
    //check commiunication is normal after reset
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80011c4:	f7ff fee6 	bl	8000f94 <BMI088_GYRO_NS_L>
 80011c8:	1dbb      	adds	r3, r7, #6
 80011ca:	4619      	mov	r1, r3
 80011cc:	2000      	movs	r0, #0
 80011ce:	f000 f97d 	bl	80014cc <BMI088_read_single_reg>
 80011d2:	f7ff feef 	bl	8000fb4 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80011d6:	2096      	movs	r0, #150	; 0x96
 80011d8:	f7ff fe78 	bl	8000ecc <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80011dc:	f7ff feda 	bl	8000f94 <BMI088_GYRO_NS_L>
 80011e0:	1dbb      	adds	r3, r7, #6
 80011e2:	4619      	mov	r1, r3
 80011e4:	2000      	movs	r0, #0
 80011e6:	f000 f971 	bl	80014cc <BMI088_read_single_reg>
 80011ea:	f7ff fee3 	bl	8000fb4 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80011ee:	2096      	movs	r0, #150	; 0x96
 80011f0:	f7ff fe6c 	bl	8000ecc <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	d001      	beq.n	80011fe <BMI088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 80011fa:	23ff      	movs	r3, #255	; 0xff
 80011fc:	e049      	b.n	8001292 <BMI088_gyro_init+0x122>
    }

    //set gyro sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 80011fe:	2300      	movs	r3, #0
 8001200:	71fb      	strb	r3, [r7, #7]
 8001202:	e042      	b.n	800128a <BMI088_gyro_init+0x11a>
    {

        BMI088_gyro_write_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], write_BMI088_gyro_reg_data_error[write_reg_num][1]);
 8001204:	f7ff fec6 	bl	8000f94 <BMI088_GYRO_NS_L>
 8001208:	79fa      	ldrb	r2, [r7, #7]
 800120a:	4924      	ldr	r1, [pc, #144]	; (800129c <BMI088_gyro_init+0x12c>)
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	440b      	add	r3, r1
 8001214:	7818      	ldrb	r0, [r3, #0]
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	4920      	ldr	r1, [pc, #128]	; (800129c <BMI088_gyro_init+0x12c>)
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	440b      	add	r3, r1
 8001222:	3301      	adds	r3, #1
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	4619      	mov	r1, r3
 8001228:	f000 f93c 	bl	80014a4 <BMI088_write_single_reg>
 800122c:	f7ff fec2 	bl	8000fb4 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001230:	2096      	movs	r0, #150	; 0x96
 8001232:	f7ff fe4b 	bl	8000ecc <BMI088_delay_us>

        BMI088_gyro_read_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], res);
 8001236:	f7ff fead 	bl	8000f94 <BMI088_GYRO_NS_L>
 800123a:	79fa      	ldrb	r2, [r7, #7]
 800123c:	4917      	ldr	r1, [pc, #92]	; (800129c <BMI088_gyro_init+0x12c>)
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	440b      	add	r3, r1
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	1dba      	adds	r2, r7, #6
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f000 f93d 	bl	80014cc <BMI088_read_single_reg>
 8001252:	f7ff feaf 	bl	8000fb4 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001256:	2096      	movs	r0, #150	; 0x96
 8001258:	f7ff fe38 	bl	8000ecc <BMI088_delay_us>

        if (res != write_BMI088_gyro_reg_data_error[write_reg_num][1])
 800125c:	79fa      	ldrb	r2, [r7, #7]
 800125e:	490f      	ldr	r1, [pc, #60]	; (800129c <BMI088_gyro_init+0x12c>)
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	440b      	add	r3, r1
 8001268:	3301      	adds	r3, #1
 800126a:	781a      	ldrb	r2, [r3, #0]
 800126c:	79bb      	ldrb	r3, [r7, #6]
 800126e:	429a      	cmp	r2, r3
 8001270:	d008      	beq.n	8001284 <BMI088_gyro_init+0x114>
        {
            return write_BMI088_gyro_reg_data_error[write_reg_num][2];
 8001272:	79fa      	ldrb	r2, [r7, #7]
 8001274:	4909      	ldr	r1, [pc, #36]	; (800129c <BMI088_gyro_init+0x12c>)
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	440b      	add	r3, r1
 800127e:	3302      	adds	r3, #2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	e006      	b.n	8001292 <BMI088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	3301      	adds	r3, #1
 8001288:	71fb      	strb	r3, [r7, #7]
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b05      	cmp	r3, #5
 800128e:	d9b9      	bls.n	8001204 <BMI088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000002c 	.word	0x2000002c

080012a0 <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 80012a4:	4a05      	ldr	r2, [pc, #20]	; (80012bc <IMU_get_temp+0x1c>)
 80012a6:	4906      	ldr	r1, [pc, #24]	; (80012c0 <IMU_get_temp+0x20>)
 80012a8:	4806      	ldr	r0, [pc, #24]	; (80012c4 <IMU_get_temp+0x24>)
 80012aa:	f000 f80d 	bl	80012c8 <BMI088_read>
	return temp;
 80012ae:	4b03      	ldr	r3, [pc, #12]	; (80012bc <IMU_get_temp+0x1c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	ee07 3a90 	vmov	s15, r3
}
 80012b6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000284 	.word	0x20000284
 80012c0:	20000278 	.word	0x20000278
 80012c4:	2000026c 	.word	0x2000026c

080012c8 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 80012d4:	4a70      	ldr	r2, [pc, #448]	; (8001498 <BMI088_read+0x1d0>)
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012de:	6018      	str	r0, [r3, #0]
 80012e0:	3304      	adds	r3, #4
 80012e2:	8019      	strh	r1, [r3, #0]
 80012e4:	3302      	adds	r3, #2
 80012e6:	0c0a      	lsrs	r2, r1, #16
 80012e8:	701a      	strb	r2, [r3, #0]
 80012ea:	2300      	movs	r3, #0
 80012ec:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 80012ee:	f7ff fe31 	bl	8000f54 <BMI088_ACCEL_NS_L>
 80012f2:	2092      	movs	r0, #146	; 0x92
 80012f4:	f7ff fe6e 	bl	8000fd4 <BMI088_read_write_byte>
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2206      	movs	r2, #6
 80012fe:	4619      	mov	r1, r3
 8001300:	2012      	movs	r0, #18
 8001302:	f000 f8fb 	bl	80014fc <BMI088_read_muli_reg>
 8001306:	f7ff fe35 	bl	8000f74 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 800130a:	7d7b      	ldrb	r3, [r7, #21]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b21a      	sxth	r2, r3
 8001310:	7d3b      	ldrb	r3, [r7, #20]
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8001318:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001324:	4b5d      	ldr	r3, [pc, #372]	; (800149c <BMI088_read+0x1d4>)
 8001326:	edd3 7a00 	vldr	s15, [r3]
 800132a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8001334:	7dfb      	ldrb	r3, [r7, #23]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b21a      	sxth	r2, r3
 800133a:	7dbb      	ldrb	r3, [r7, #22]
 800133c:	b21b      	sxth	r3, r3
 800133e:	4313      	orrs	r3, r2
 8001340:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8001342:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800134e:	4b53      	ldr	r3, [pc, #332]	; (800149c <BMI088_read+0x1d4>)
 8001350:	edd3 7a00 	vldr	s15, [r3]
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	3304      	adds	r3, #4
 8001358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800135c:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8001360:	7e7b      	ldrb	r3, [r7, #25]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	b21a      	sxth	r2, r3
 8001366:	7e3b      	ldrb	r3, [r7, #24]
 8001368:	b21b      	sxth	r3, r3
 800136a:	4313      	orrs	r3, r2
 800136c:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800136e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800137a:	4b48      	ldr	r3, [pc, #288]	; (800149c <BMI088_read+0x1d4>)
 800137c:	edd3 7a00 	vldr	s15, [r3]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	3308      	adds	r3, #8
 8001384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001388:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 800138c:	f7ff fe02 	bl	8000f94 <BMI088_GYRO_NS_L>
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2208      	movs	r2, #8
 8001396:	4619      	mov	r1, r3
 8001398:	2000      	movs	r0, #0
 800139a:	f000 f8af 	bl	80014fc <BMI088_read_muli_reg>
 800139e:	f7ff fe09 	bl	8000fb4 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 80013a2:	7d3b      	ldrb	r3, [r7, #20]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d140      	bne.n	800142a <BMI088_read+0x162>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 80013a8:	7dfb      	ldrb	r3, [r7, #23]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	7dbb      	ldrb	r3, [r7, #22]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80013b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c2:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <BMI088_read+0x1d8>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 80013d2:	7e7b      	ldrb	r3, [r7, #25]
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	7e3b      	ldrb	r3, [r7, #24]
 80013da:	b21b      	sxth	r3, r3
 80013dc:	4313      	orrs	r3, r2
 80013de:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80013e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ec:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <BMI088_read+0x1d8>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3304      	adds	r3, #4
 80013f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013fa:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 80013fe:	7efb      	ldrb	r3, [r7, #27]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	b21a      	sxth	r2, r3
 8001404:	7ebb      	ldrb	r3, [r7, #26]
 8001406:	b21b      	sxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 800140c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001410:	ee07 3a90 	vmov	s15, r3
 8001414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <BMI088_read+0x1d8>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	3308      	adds	r3, #8
 8001422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001426:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 800142a:	f7ff fd93 	bl	8000f54 <BMI088_ACCEL_NS_L>
 800142e:	20a2      	movs	r0, #162	; 0xa2
 8001430:	f7ff fdd0 	bl	8000fd4 <BMI088_read_write_byte>
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2202      	movs	r2, #2
 800143a:	4619      	mov	r1, r3
 800143c:	2022      	movs	r0, #34	; 0x22
 800143e:	f000 f85d 	bl	80014fc <BMI088_read_muli_reg>
 8001442:	f7ff fd97 	bl	8000f74 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 8001446:	7d3b      	ldrb	r3, [r7, #20]
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	b21a      	sxth	r2, r3
 800144c:	7d7b      	ldrb	r3, [r7, #21]
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	b2db      	uxtb	r3, r3
 8001452:	b21b      	sxth	r3, r3
 8001454:	4313      	orrs	r3, r2
 8001456:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 8001458:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001460:	db04      	blt.n	800146c <BMI088_read+0x1a4>
    {
        bmi088_raw_temp -= 2048;
 8001462:	8bfb      	ldrh	r3, [r7, #30]
 8001464:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001468:	b29b      	uxth	r3, r3
 800146a:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 800146c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001478:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800147c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001480:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8001484:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	edc3 7a00 	vstr	s15, [r3]
}
 800148e:	bf00      	nop
 8001490:	3720      	adds	r7, #32
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	080105f8 	.word	0x080105f8
 800149c:	20000010 	.word	0x20000010
 80014a0:	20000014 	.word	0x20000014

080014a4 <BMI088_write_single_reg>:

#if defined(BMI088_USE_SPI)

static void BMI088_write_single_reg(uint8_t reg, uint8_t data)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	460a      	mov	r2, r1
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	4613      	mov	r3, r2
 80014b2:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg);
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fd8c 	bl	8000fd4 <BMI088_read_write_byte>
    BMI088_read_write_byte(data);
 80014bc:	79bb      	ldrb	r3, [r7, #6]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fd88 	bl	8000fd4 <BMI088_read_write_byte>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <BMI088_read_single_reg>:

static void BMI088_read_single_reg(uint8_t reg, uint8_t *return_data)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
    BMI088_read_write_byte(reg | 0x80);
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fd77 	bl	8000fd4 <BMI088_read_write_byte>
    *return_data = BMI088_read_write_byte(0x55);
 80014e6:	2055      	movs	r0, #85	; 0x55
 80014e8:	f7ff fd74 	bl	8000fd4 <BMI088_read_write_byte>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	701a      	strb	r2, [r3, #0]
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
 8001508:	4613      	mov	r3, r2
 800150a:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fd5d 	bl	8000fd4 <BMI088_read_write_byte>

    while (len != 0)
 800151a:	e00c      	b.n	8001536 <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 800151c:	2055      	movs	r0, #85	; 0x55
 800151e:	f7ff fd59 	bl	8000fd4 <BMI088_read_write_byte>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	701a      	strb	r2, [r3, #0]
        buf++;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	603b      	str	r3, [r7, #0]
        len--;
 8001530:	79bb      	ldrb	r3, [r7, #6]
 8001532:	3b01      	subs	r3, #1
 8001534:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 8001536:	79bb      	ldrb	r3, [r7, #6]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1ef      	bne.n	800151c <BMI088_read_muli_reg+0x20>
    }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_CAN_RxFifo0MsgPendingCallback>:
/**
  * @brief          reading motor feedback from CAN FIFO
  * @param[in]      pointer to CAN handle
  * @retval         none
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b08c      	sub	sp, #48	; 0x30
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	f107 0214 	add.w	r2, r7, #20
 8001558:	2100      	movs	r1, #0
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f003 feaf 	bl	80052be <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8001566:	f080 80d9 	bcs.w	800171c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
 800156a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800156e:	d807      	bhi.n	8001580 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 8001570:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001574:	d066      	beq.n	8001644 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
 8001576:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 800157a:	f000 80a4 	beq.w	80016c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
        		get_b2b_gyro_feedback(&b2bGyro, rx_data);                             // add back numbering code for extra CAN input lines
        	    break;
        	}
        }
        default: {
            break;
 800157e:	e0cd      	b.n	800171c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
            i = rx_header.StdId - CAN_G1M1_ID;                             // get motor id by taking the difference between the first motor's ID (0 indexing) and the current motor's ID
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	3b01      	subs	r3, #1
 8001586:	b2da      	uxtb	r2, r3
 8001588:	4b6a      	ldr	r3, [pc, #424]	; (8001734 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 800158a:	701a      	strb	r2, [r3, #0]
            get_motor_feedback(&motor_feedback[i], rx_data);
 800158c:	4b69      	ldr	r3, [pc, #420]	; (8001734 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	4a69      	ldr	r2, [pc, #420]	; (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8001594:	460b      	mov	r3, r1
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	881a      	ldrh	r2, [r3, #0]
 80015a0:	4b64      	ldr	r3, [pc, #400]	; (8001734 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	b210      	sxth	r0, r2
 80015a8:	4a63      	ldr	r2, [pc, #396]	; (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80015aa:	460b      	mov	r3, r1
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	3308      	adds	r3, #8
 80015b6:	4602      	mov	r2, r0
 80015b8:	801a      	strh	r2, [r3, #0]
 80015ba:	7b3b      	ldrb	r3, [r7, #12]
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b21a      	sxth	r2, r3
 80015c0:	7b7b      	ldrb	r3, [r7, #13]
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	4b5a      	ldr	r3, [pc, #360]	; (8001734 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	b290      	uxth	r0, r2
 80015d0:	4a59      	ldr	r2, [pc, #356]	; (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80015d2:	460b      	mov	r3, r1
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	4602      	mov	r2, r0
 80015de:	801a      	strh	r2, [r3, #0]
 80015e0:	7bbb      	ldrb	r3, [r7, #14]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	4952      	ldr	r1, [pc, #328]	; (8001734 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80015ec:	7809      	ldrb	r1, [r1, #0]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b218      	sxth	r0, r3
 80015f2:	4a51      	ldr	r2, [pc, #324]	; (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80015f4:	460b      	mov	r3, r1
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	3302      	adds	r3, #2
 8001600:	4602      	mov	r2, r0
 8001602:	801a      	strh	r2, [r3, #0]
 8001604:	7c3b      	ldrb	r3, [r7, #16]
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	b21a      	sxth	r2, r3
 800160a:	7c7b      	ldrb	r3, [r7, #17]
 800160c:	b21b      	sxth	r3, r3
 800160e:	4949      	ldr	r1, [pc, #292]	; (8001734 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8001610:	7809      	ldrb	r1, [r1, #0]
 8001612:	4313      	orrs	r3, r2
 8001614:	b218      	sxth	r0, r3
 8001616:	4a48      	ldr	r2, [pc, #288]	; (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8001618:	460b      	mov	r3, r1
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	3304      	adds	r3, #4
 8001624:	4602      	mov	r2, r0
 8001626:	801a      	strh	r2, [r3, #0]
 8001628:	4b42      	ldr	r3, [pc, #264]	; (8001734 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	7cb8      	ldrb	r0, [r7, #18]
 8001630:	4a41      	ldr	r2, [pc, #260]	; (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8001632:	460b      	mov	r3, r1
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	3306      	adds	r3, #6
 800163e:	4602      	mov	r2, r0
 8001640:	701a      	strb	r2, [r3, #0]
            break;
 8001642:	e072      	b.n	800172a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        	if(CAN_b2b_A_ID == boardID) {
 8001644:	4b3d      	ldr	r3, [pc, #244]	; (800173c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	f240 1201 	movw	r2, #257	; 0x101
 800164c:	4293      	cmp	r3, r2
 800164e:	d067      	beq.n	8001720 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>
        		get_b2b_motorCtrl_feedback(&b2bMotorCtrl, rx_data);                             // add back numbering code for extra CAN input lines
 8001650:	7b3b      	ldrb	r3, [r7, #12]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	b21a      	sxth	r2, r3
 8001656:	7b7b      	ldrb	r3, [r7, #13]
 8001658:	b21b      	sxth	r3, r3
 800165a:	4313      	orrs	r3, r2
 800165c:	b21a      	sxth	r2, r3
 800165e:	4b38      	ldr	r3, [pc, #224]	; (8001740 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8001660:	801a      	strh	r2, [r3, #0]
 8001662:	7bbb      	ldrb	r3, [r7, #14]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	b21a      	sxth	r2, r3
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	b21b      	sxth	r3, r3
 800166c:	4313      	orrs	r3, r2
 800166e:	b21a      	sxth	r2, r3
 8001670:	4b33      	ldr	r3, [pc, #204]	; (8001740 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8001672:	805a      	strh	r2, [r3, #2]
 8001674:	7c3b      	ldrb	r3, [r7, #16]
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	b21a      	sxth	r2, r3
 800167a:	7c7b      	ldrb	r3, [r7, #17]
 800167c:	b21b      	sxth	r3, r3
 800167e:	4313      	orrs	r3, r2
 8001680:	b21a      	sxth	r2, r3
 8001682:	4b2f      	ldr	r3, [pc, #188]	; (8001740 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8001684:	809a      	strh	r2, [r3, #4]
 8001686:	7cbb      	ldrb	r3, [r7, #18]
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	b21a      	sxth	r2, r3
 800168c:	7cfb      	ldrb	r3, [r7, #19]
 800168e:	b21b      	sxth	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	b21a      	sxth	r2, r3
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8001696:	80da      	strh	r2, [r3, #6]
        		if (b2bMotorCtrl.motor1_Ctrl >= 3376) {
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 800169a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169e:	f5b3 6f53 	cmp.w	r3, #3376	; 0xd30
 80016a2:	db04      	blt.n	80016ae <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
        			b2bMotorCtrl.motor1_Ctrl = 3376;
 80016a4:	4b26      	ldr	r3, [pc, #152]	; (8001740 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80016a6:	f44f 6253 	mov.w	r2, #3376	; 0xd30
 80016aa:	801a      	strh	r2, [r3, #0]
        		break;
 80016ac:	e03a      	b.n	8001724 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        		} else if (b2bMotorCtrl.motor1_Ctrl <= 2132) {
 80016ae:	4b24      	ldr	r3, [pc, #144]	; (8001740 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80016b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b4:	f640 0254 	movw	r2, #2132	; 0x854
 80016b8:	4293      	cmp	r3, r2
 80016ba:	dc33      	bgt.n	8001724 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        			b2bMotorCtrl.motor1_Ctrl = 2132;
 80016bc:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80016be:	f640 0254 	movw	r2, #2132	; 0x854
 80016c2:	801a      	strh	r2, [r3, #0]
        		break;
 80016c4:	e02e      	b.n	8001724 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        	if(CAN_b2b_B_ID == boardID) {
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	f240 1211 	movw	r2, #273	; 0x111
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d02a      	beq.n	8001728 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>
        		get_b2b_gyro_feedback(&b2bGyro, rx_data);                             // add back numbering code for extra CAN input lines
 80016d2:	7b3b      	ldrb	r3, [r7, #12]
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	7b7b      	ldrb	r3, [r7, #13]
 80016da:	b21b      	sxth	r3, r3
 80016dc:	4313      	orrs	r3, r2
 80016de:	b21a      	sxth	r2, r3
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80016e2:	801a      	strh	r2, [r3, #0]
 80016e4:	7bbb      	ldrb	r3, [r7, #14]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	4313      	orrs	r3, r2
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80016f4:	805a      	strh	r2, [r3, #2]
 80016f6:	7c3b      	ldrb	r3, [r7, #16]
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	7c7b      	ldrb	r3, [r7, #17]
 80016fe:	b21b      	sxth	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b21a      	sxth	r2, r3
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8001706:	809a      	strh	r2, [r3, #4]
 8001708:	7cbb      	ldrb	r3, [r7, #18]
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	b21a      	sxth	r2, r3
 800170e:	7cfb      	ldrb	r3, [r7, #19]
 8001710:	b21b      	sxth	r3, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	b21a      	sxth	r2, r3
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8001718:	80da      	strh	r2, [r3, #6]
        	    break;
 800171a:	e006      	b.n	800172a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
            break;
 800171c:	bf00      	nop
 800171e:	e004      	b.n	800172a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8001720:	bf00      	nop
 8001722:	e002      	b.n	800172a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8001724:	bf00      	nop
 8001726:	e000      	b.n	800172a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8001728:	bf00      	nop
        }
    }
}
 800172a:	bf00      	nop
 800172c:	3730      	adds	r7, #48	; 0x30
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200004c0 	.word	0x200004c0
 8001738:	200002a0 	.word	0x200002a0
 800173c:	20000070 	.word	0x20000070
 8001740:	20000310 	.word	0x20000310
 8001744:	20000318 	.word	0x20000318

08001748 <CAN1_cmd_b2b>:
/**
  * @brief          sends board to board (b2b) communication data
  * @param[in]      yaw: (0x205) 6020 motor control current, range [-30000,30000] 
  * @retval         none
  */
void CAN1_cmd_b2b(can_msg_id_e canID, int16_t data1, int16_t data2, int16_t data3, int16_t data4) {
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	4604      	mov	r4, r0
 8001750:	4608      	mov	r0, r1
 8001752:	4611      	mov	r1, r2
 8001754:	461a      	mov	r2, r3
 8001756:	4623      	mov	r3, r4
 8001758:	80fb      	strh	r3, [r7, #6]
 800175a:	4603      	mov	r3, r0
 800175c:	80bb      	strh	r3, [r7, #4]
 800175e:	460b      	mov	r3, r1
 8001760:	807b      	strh	r3, [r7, #2]
 8001762:	4613      	mov	r3, r2
 8001764:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    b2b_tx_message.StdId = canID;
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	4a20      	ldr	r2, [pc, #128]	; (80017ec <CAN1_cmd_b2b+0xa4>)
 800176a:	6013      	str	r3, [r2, #0]
    b2b_tx_message.IDE = CAN_ID_STD;
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <CAN1_cmd_b2b+0xa4>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
    b2b_tx_message.RTR = CAN_RTR_DATA;
 8001772:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <CAN1_cmd_b2b+0xa4>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
    b2b_tx_message.DLC = 0x08;
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <CAN1_cmd_b2b+0xa4>)
 800177a:	2208      	movs	r2, #8
 800177c:	611a      	str	r2, [r3, #16]
    b2b_can_send_data[0] = (data1 >> 8);
 800177e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001782:	121b      	asrs	r3, r3, #8
 8001784:	b21b      	sxth	r3, r3
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <CAN1_cmd_b2b+0xa8>)
 800178a:	701a      	strb	r2, [r3, #0]
    b2b_can_send_data[1] = data1;
 800178c:	88bb      	ldrh	r3, [r7, #4]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <CAN1_cmd_b2b+0xa8>)
 8001792:	705a      	strb	r2, [r3, #1]
    b2b_can_send_data[2] = (data2 >> 8);
 8001794:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001798:	121b      	asrs	r3, r3, #8
 800179a:	b21b      	sxth	r3, r3
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <CAN1_cmd_b2b+0xa8>)
 80017a0:	709a      	strb	r2, [r3, #2]
    b2b_can_send_data[3] = data2;
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <CAN1_cmd_b2b+0xa8>)
 80017a8:	70da      	strb	r2, [r3, #3]
    b2b_can_send_data[4] = (data3 >> 8);
 80017aa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80017ae:	121b      	asrs	r3, r3, #8
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <CAN1_cmd_b2b+0xa8>)
 80017b6:	711a      	strb	r2, [r3, #4]
    b2b_can_send_data[5] = data3;
 80017b8:	883b      	ldrh	r3, [r7, #0]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <CAN1_cmd_b2b+0xa8>)
 80017be:	715a      	strb	r2, [r3, #5]
    b2b_can_send_data[6] = (data4 >> 8);
 80017c0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80017c4:	121b      	asrs	r3, r3, #8
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <CAN1_cmd_b2b+0xa8>)
 80017cc:	719a      	strb	r2, [r3, #6]
    b2b_can_send_data[7] = data4;
 80017ce:	8c3b      	ldrh	r3, [r7, #32]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <CAN1_cmd_b2b+0xa8>)
 80017d4:	71da      	strb	r2, [r3, #7]
    HAL_CAN_AddTxMessage(&CAN_1, &b2b_tx_message, b2b_can_send_data, &send_mail_box);
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <CAN1_cmd_b2b+0xa8>)
 80017dc:	4903      	ldr	r1, [pc, #12]	; (80017ec <CAN1_cmd_b2b+0xa4>)
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <CAN1_cmd_b2b+0xac>)
 80017e0:	f003 fc92 	bl	8005108 <HAL_CAN_AddTxMessage>
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd90      	pop	{r4, r7, pc}
 80017ec:	20000480 	.word	0x20000480
 80017f0:	20000498 	.word	0x20000498
 80017f4:	20000864 	.word	0x20000864

080017f8 <CAN2_cmd_motors>:
/**
  * @brief          send control information through CAN bus 2
  * @param[in]      canID of the target motor's group and the motor current values for all motors in that group
  * @retval         none
  */
void CAN2_cmd_motors(can_msg_id_e canID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4604      	mov	r4, r0
 8001800:	4608      	mov	r0, r1
 8001802:	4611      	mov	r1, r2
 8001804:	461a      	mov	r2, r3
 8001806:	4623      	mov	r3, r4
 8001808:	80fb      	strh	r3, [r7, #6]
 800180a:	4603      	mov	r3, r0
 800180c:	80bb      	strh	r3, [r7, #4]
 800180e:	460b      	mov	r3, r1
 8001810:	807b      	strh	r3, [r7, #2]
 8001812:	4613      	mov	r3, r2
 8001814:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    motors_tx_message.StdId = canID;
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	4a20      	ldr	r2, [pc, #128]	; (800189c <CAN2_cmd_motors+0xa4>)
 800181a:	6013      	str	r3, [r2, #0]
    motors_tx_message.IDE = CAN_ID_STD;
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <CAN2_cmd_motors+0xa4>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
    motors_tx_message.RTR = CAN_RTR_DATA;
 8001822:	4b1e      	ldr	r3, [pc, #120]	; (800189c <CAN2_cmd_motors+0xa4>)
 8001824:	2200      	movs	r2, #0
 8001826:	60da      	str	r2, [r3, #12]
    motors_tx_message.DLC = 0x08;
 8001828:	4b1c      	ldr	r3, [pc, #112]	; (800189c <CAN2_cmd_motors+0xa4>)
 800182a:	2208      	movs	r2, #8
 800182c:	611a      	str	r2, [r3, #16]
    motors_can_send_data[0] = m1 >> 8;
 800182e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001832:	121b      	asrs	r3, r3, #8
 8001834:	b21b      	sxth	r3, r3
 8001836:	b2da      	uxtb	r2, r3
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <CAN2_cmd_motors+0xa8>)
 800183a:	701a      	strb	r2, [r3, #0]
    motors_can_send_data[1] = m1;
 800183c:	88bb      	ldrh	r3, [r7, #4]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <CAN2_cmd_motors+0xa8>)
 8001842:	705a      	strb	r2, [r3, #1]
    motors_can_send_data[2] = m2 >> 8;
 8001844:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001848:	121b      	asrs	r3, r3, #8
 800184a:	b21b      	sxth	r3, r3
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <CAN2_cmd_motors+0xa8>)
 8001850:	709a      	strb	r2, [r3, #2]
    motors_can_send_data[3] = m2;
 8001852:	887b      	ldrh	r3, [r7, #2]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <CAN2_cmd_motors+0xa8>)
 8001858:	70da      	strb	r2, [r3, #3]
    motors_can_send_data[4] = m3 >> 8;
 800185a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800185e:	121b      	asrs	r3, r3, #8
 8001860:	b21b      	sxth	r3, r3
 8001862:	b2da      	uxtb	r2, r3
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <CAN2_cmd_motors+0xa8>)
 8001866:	711a      	strb	r2, [r3, #4]
    motors_can_send_data[5] = m3;
 8001868:	883b      	ldrh	r3, [r7, #0]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <CAN2_cmd_motors+0xa8>)
 800186e:	715a      	strb	r2, [r3, #5]
    motors_can_send_data[6] = m4 >> 8;
 8001870:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001874:	121b      	asrs	r3, r3, #8
 8001876:	b21b      	sxth	r3, r3
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <CAN2_cmd_motors+0xa8>)
 800187c:	719a      	strb	r2, [r3, #6]
    motors_can_send_data[7] = m4;
 800187e:	8c3b      	ldrh	r3, [r7, #32]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <CAN2_cmd_motors+0xa8>)
 8001884:	71da      	strb	r2, [r3, #7]
    HAL_CAN_AddTxMessage(&CAN_2, &motors_tx_message, motors_can_send_data, &send_mail_box);
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <CAN2_cmd_motors+0xa8>)
 800188c:	4903      	ldr	r1, [pc, #12]	; (800189c <CAN2_cmd_motors+0xa4>)
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <CAN2_cmd_motors+0xac>)
 8001890:	f003 fc3a 	bl	8005108 <HAL_CAN_AddTxMessage>
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bd90      	pop	{r4, r7, pc}
 800189c:	200004a0 	.word	0x200004a0
 80018a0:	200004b8 	.word	0x200004b8
 80018a4:	2000088c 	.word	0x2000088c

080018a8 <set_M3508_current>:
/**
  * @brief          simplification function to make communication with the motor not require the current data for all 4 motors
  * @param[in]      motor ID (1~11) and its target current (-16384 ~ 16384)
  * @retval         none
  */
void set_M3508_current(int8_t motorID, int16_t setCurrent) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	4603      	mov	r3, r0
 80018b0:	460a      	mov	r2, r1
 80018b2:	71fb      	strb	r3, [r7, #7]
 80018b4:	4613      	mov	r3, r2
 80018b6:	80bb      	strh	r3, [r7, #4]
	motorCtrlVal[motorID-1] = setCurrent;
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	3b01      	subs	r3, #1
 80018be:	491c      	ldr	r1, [pc, #112]	; (8001930 <set_M3508_current+0x88>)
 80018c0:	88ba      	ldrh	r2, [r7, #4]
 80018c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	switch(motorID) {
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	dc02      	bgt.n	80018d4 <set_M3508_current+0x2c>
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	dc04      	bgt.n	80018dc <set_M3508_current+0x34>
		case (7):
		case (8): {             // is group 2?
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
		}
		default: {
	        break;
 80018d2:	e027      	b.n	8001924 <set_M3508_current+0x7c>
 80018d4:	3b05      	subs	r3, #5
	switch(motorID) {
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d824      	bhi.n	8001924 <set_M3508_current+0x7c>
 80018da:	e011      	b.n	8001900 <set_M3508_current+0x58>
			CAN2_cmd_motors(CAN_GROUP1_ID, motorCtrlVal[0], motorCtrlVal[1], motorCtrlVal[2], motorCtrlVal[3]);
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <set_M3508_current+0x88>)
 80018de:	f9b3 1000 	ldrsh.w	r1, [r3]
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <set_M3508_current+0x88>)
 80018e4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <set_M3508_current+0x88>)
 80018ea:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <set_M3508_current+0x88>)
 80018f0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	4603      	mov	r3, r0
 80018f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018fc:	f7ff ff7c 	bl	80017f8 <CAN2_cmd_motors>
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <set_M3508_current+0x88>)
 8001902:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <set_M3508_current+0x88>)
 8001908:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <set_M3508_current+0x88>)
 800190e:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <set_M3508_current+0x88>)
 8001914:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	4603      	mov	r3, r0
 800191c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001920:	f7ff ff6a 	bl	80017f8 <CAN2_cmd_motors>
	        break;
 8001924:	bf00      	nop
	    }
	}
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000288 	.word	0x20000288

08001934 <set_GM6020_voltage>:
/**
  * @brief          similar to the above function, but specifically for the GM6020's voltage control mode
  * @param[in]      motor ID (5~11) and its target voltage (-25000 ~ 25000)
  * @retval         none
  */
void set_GM6020_voltage(int8_t motorID, int16_t setVoltage) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af02      	add	r7, sp, #8
 800193a:	4603      	mov	r3, r0
 800193c:	460a      	mov	r2, r1
 800193e:	71fb      	strb	r3, [r7, #7]
 8001940:	4613      	mov	r3, r2
 8001942:	80bb      	strh	r3, [r7, #4]
	motorCtrlVal[motorID-1] = setVoltage;      // -1 for 0 indexing and -4 for group 1, which cannot contain GM6020s
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	3b01      	subs	r3, #1
 800194a:	491a      	ldr	r1, [pc, #104]	; (80019b4 <set_GM6020_voltage+0x80>)
 800194c:	88ba      	ldrh	r2, [r7, #4]
 800194e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	switch(motorID) {
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	2b08      	cmp	r3, #8
 8001958:	dc02      	bgt.n	8001960 <set_GM6020_voltage+0x2c>
 800195a:	2b05      	cmp	r3, #5
 800195c:	da04      	bge.n	8001968 <set_GM6020_voltage+0x34>
		case (10):
		case (11): {          // is group 3?
			CAN2_cmd_motors(CAN_GROUP3_ID, motorCtrlVal[8], motorCtrlVal[9], motorCtrlVal[10], 0);
		}
		default: {
	        break;
 800195e:	e024      	b.n	80019aa <set_GM6020_voltage+0x76>
 8001960:	3b09      	subs	r3, #9
	switch(motorID) {
 8001962:	2b02      	cmp	r3, #2
 8001964:	d821      	bhi.n	80019aa <set_GM6020_voltage+0x76>
 8001966:	e011      	b.n	800198c <set_GM6020_voltage+0x58>
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <set_GM6020_voltage+0x80>)
 800196a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <set_GM6020_voltage+0x80>)
 8001970:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <set_GM6020_voltage+0x80>)
 8001976:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <set_GM6020_voltage+0x80>)
 800197c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	4603      	mov	r3, r0
 8001984:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001988:	f7ff ff36 	bl	80017f8 <CAN2_cmd_motors>
			CAN2_cmd_motors(CAN_GROUP3_ID, motorCtrlVal[8], motorCtrlVal[9], motorCtrlVal[10], 0);
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <set_GM6020_voltage+0x80>)
 800198e:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <set_GM6020_voltage+0x80>)
 8001994:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <set_GM6020_voltage+0x80>)
 800199a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800199e:	2000      	movs	r0, #0
 80019a0:	9000      	str	r0, [sp, #0]
 80019a2:	f240 20ff 	movw	r0, #767	; 0x2ff
 80019a6:	f7ff ff27 	bl	80017f8 <CAN2_cmd_motors>
	        break;
 80019aa:	bf00      	nop
	    }
	}
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000288 	.word	0x20000288

080019b8 <calc_current2RPM_PID>:
	        break;
	    }
	}
}

int32_t calc_current2RPM_PID(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 80019b8:	b490      	push	{r4, r7}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	460a      	mov	r2, r1
 80019c2:	eef0 6a40 	vmov.f32	s13, s0
 80019c6:	eeb0 7a60 	vmov.f32	s14, s1
 80019ca:	eef0 7a41 	vmov.f32	s15, s2
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	4613      	mov	r3, r2
 80019d2:	81bb      	strh	r3, [r7, #12]
 80019d4:	edc7 6a00 	vstr	s13, [r7]
 80019d8:	ed87 7a01 	vstr	s14, [r7, #4]
 80019dc:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_current_val = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	74fb      	strb	r3, [r7, #19]
	iRPM[ID] += RPMtarget - motor_feedback[ID].speed_rpm;      // add to integral term
 80019ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019f0:	4a4a      	ldr	r2, [pc, #296]	; (8001b1c <calc_current2RPM_PID+0x164>)
 80019f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80019f6:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 80019fa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80019fe:	4c48      	ldr	r4, [pc, #288]	; (8001b20 <calc_current2RPM_PID+0x168>)
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4423      	add	r3, r4
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a10:	1ac2      	subs	r2, r0, r3
 8001a12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a16:	440a      	add	r2, r1
 8001a18:	4940      	ldr	r1, [pc, #256]	; (8001b1c <calc_current2RPM_PID+0x164>)
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dRPM[ID] = lastRPM[ID] - motor_feedback[ID].speed_rpm;       // update derivative term
 8001a1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a22:	4a40      	ldr	r2, [pc, #256]	; (8001b24 <calc_current2RPM_PID+0x16c>)
 8001a24:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a28:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001a2c:	483c      	ldr	r0, [pc, #240]	; (8001b20 <calc_current2RPM_PID+0x168>)
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4403      	add	r3, r0
 8001a38:	3302      	adds	r3, #2
 8001a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a44:	1a8a      	subs	r2, r1, r2
 8001a46:	4938      	ldr	r1, [pc, #224]	; (8001b28 <calc_current2RPM_PID+0x170>)
 8001a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errRPM[ID] = RPMtarget - motor_feedback[ID].speed_rpm;     // update proportional term
 8001a4c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001a50:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001a54:	4832      	ldr	r0, [pc, #200]	; (8001b20 <calc_current2RPM_PID+0x168>)
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4403      	add	r3, r0
 8001a60:	3302      	adds	r3, #2
 8001a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a66:	461a      	mov	r2, r3
 8001a68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a6c:	1a8a      	subs	r2, r1, r2
 8001a6e:	492f      	ldr	r1, [pc, #188]	; (8001b2c <calc_current2RPM_PID+0x174>)
 8001a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	lastRPM[ID] = motor_feedback[ID].speed_rpm;
 8001a74:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001a78:	4929      	ldr	r1, [pc, #164]	; (8001b20 <calc_current2RPM_PID+0x168>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	440b      	add	r3, r1
 8001a84:	3302      	adds	r3, #2
 8001a86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4a24      	ldr	r2, [pc, #144]	; (8001b24 <calc_current2RPM_PID+0x16c>)
 8001a92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return_current_val = (preset.kP * errRPM[ID]) + (preset.kI * iRPM[ID]) + (preset.kD * dRPM[ID]);
 8001a96:	ed97 7a00 	vldr	s14, [r7]
 8001a9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a9e:	4a23      	ldr	r2, [pc, #140]	; (8001b2c <calc_current2RPM_PID+0x174>)
 8001aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa4:	ee07 3a90 	vmov	s15, r3
 8001aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab0:	edd7 6a01 	vldr	s13, [r7, #4]
 8001ab4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ab8:	4a18      	ldr	r2, [pc, #96]	; (8001b1c <calc_current2RPM_PID+0x164>)
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ace:	edd7 6a02 	vldr	s13, [r7, #8]
 8001ad2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ad6:	4a14      	ldr	r2, [pc, #80]	; (8001b28 <calc_current2RPM_PID+0x170>)
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	ee07 3a90 	vmov	s15, r3
 8001ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001af0:	ee17 3a90 	vmov	r3, s15
 8001af4:	617b      	str	r3, [r7, #20]
	//apply power limit
	//if (ID == 6) {sendB2bData(CAN_b2b_B_gyro_ID, errRPM[5], 0, 0, 0);}
	if (return_current_val > 16384) {return_current_val = 16384;}
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001afc:	dd02      	ble.n	8001b04 <calc_current2RPM_PID+0x14c>
 8001afe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b02:	617b      	str	r3, [r7, #20]
	if (return_current_val < -16384) {return_current_val = -16384;}
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8001b0a:	da01      	bge.n	8001b10 <calc_current2RPM_PID+0x158>
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <calc_current2RPM_PID+0x178>)
 8001b0e:	617b      	str	r3, [r7, #20]
	return return_current_val;
 8001b10:	697b      	ldr	r3, [r7, #20]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc90      	pop	{r4, r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	20000378 	.word	0x20000378
 8001b20:	200002a0 	.word	0x200002a0
 8001b24:	20000320 	.word	0x20000320
 8001b28:	2000034c 	.word	0x2000034c
 8001b2c:	200003a4 	.word	0x200003a4
 8001b30:	ffffc000 	.word	0xffffc000

08001b34 <calc_M2006_current2RPM_PID>:

int32_t calc_M2006_current2RPM_PID(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	460a      	mov	r2, r1
 8001b3e:	eef0 6a40 	vmov.f32	s13, s0
 8001b42:	eeb0 7a60 	vmov.f32	s14, s1
 8001b46:	eef0 7a41 	vmov.f32	s15, s2
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	81bb      	strh	r3, [r7, #12]
 8001b50:	edc7 6a00 	vstr	s13, [r7]
 8001b54:	ed87 7a01 	vstr	s14, [r7, #4]
 8001b58:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_current_val = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	74fb      	strb	r3, [r7, #19]
	iRPM[ID] += RPMtarget - motor_feedback[ID].speed_rpm;      // add to integral term
 8001b68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b6c:	4a54      	ldr	r2, [pc, #336]	; (8001cc0 <calc_M2006_current2RPM_PID+0x18c>)
 8001b6e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b72:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8001b76:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001b7a:	4c52      	ldr	r4, [pc, #328]	; (8001cc4 <calc_M2006_current2RPM_PID+0x190>)
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4423      	add	r3, r4
 8001b86:	3302      	adds	r3, #2
 8001b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8c:	1ac2      	subs	r2, r0, r3
 8001b8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b92:	440a      	add	r2, r1
 8001b94:	494a      	ldr	r1, [pc, #296]	; (8001cc0 <calc_M2006_current2RPM_PID+0x18c>)
 8001b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dRPM[ID] = lastRPM[ID] - motor_feedback[ID].speed_rpm;       // update derivative term
 8001b9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b9e:	4a4a      	ldr	r2, [pc, #296]	; (8001cc8 <calc_M2006_current2RPM_PID+0x194>)
 8001ba0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ba4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001ba8:	4846      	ldr	r0, [pc, #280]	; (8001cc4 <calc_M2006_current2RPM_PID+0x190>)
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4403      	add	r3, r0
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bc0:	1a8a      	subs	r2, r1, r2
 8001bc2:	4942      	ldr	r1, [pc, #264]	; (8001ccc <calc_M2006_current2RPM_PID+0x198>)
 8001bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errRPM[ID] = RPMtarget - motor_feedback[ID].speed_rpm;     // update proportional term
 8001bc8:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001bcc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001bd0:	483c      	ldr	r0, [pc, #240]	; (8001cc4 <calc_M2006_current2RPM_PID+0x190>)
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4403      	add	r3, r0
 8001bdc:	3302      	adds	r3, #2
 8001bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be2:	461a      	mov	r2, r3
 8001be4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001be8:	1a8a      	subs	r2, r1, r2
 8001bea:	4939      	ldr	r1, [pc, #228]	; (8001cd0 <calc_M2006_current2RPM_PID+0x19c>)
 8001bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	lastRPM[ID] = motor_feedback[ID].speed_rpm;
 8001bf0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001bf4:	4933      	ldr	r1, [pc, #204]	; (8001cc4 <calc_M2006_current2RPM_PID+0x190>)
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	440b      	add	r3, r1
 8001c00:	3302      	adds	r3, #2
 8001c02:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4a2e      	ldr	r2, [pc, #184]	; (8001cc8 <calc_M2006_current2RPM_PID+0x194>)
 8001c0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	//if(iRPM[ID] >= 3000) {iRPM[ID] = 3000;}
	return_current_val = (preset.kP * errRPM[ID]) + (preset.kI * iRPM[ID]) + (preset.kD * dRPM[ID]);
 8001c12:	ed97 7a00 	vldr	s14, [r7]
 8001c16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c1a:	4a2d      	ldr	r2, [pc, #180]	; (8001cd0 <calc_M2006_current2RPM_PID+0x19c>)
 8001c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c20:	ee07 3a90 	vmov	s15, r3
 8001c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c2c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c34:	4a22      	ldr	r2, [pc, #136]	; (8001cc0 <calc_M2006_current2RPM_PID+0x18c>)
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	ee07 3a90 	vmov	s15, r3
 8001c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c4a:	edd7 6a02 	vldr	s13, [r7, #8]
 8001c4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c52:	4a1e      	ldr	r2, [pc, #120]	; (8001ccc <calc_M2006_current2RPM_PID+0x198>)
 8001c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c58:	ee07 3a90 	vmov	s15, r3
 8001c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c6c:	ee17 3a90 	vmov	r3, s15
 8001c70:	617b      	str	r3, [r7, #20]
	sendB2bData(CAN_b2b_B_gyro_ID, motor_feedback[ID].speed_rpm, -5400, 0, 0);
 8001c72:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001c76:	4913      	ldr	r1, [pc, #76]	; (8001cc4 <calc_M2006_current2RPM_PID+0x190>)
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	440b      	add	r3, r1
 8001c82:	3302      	adds	r3, #2
 8001c84:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	4a11      	ldr	r2, [pc, #68]	; (8001cd4 <calc_M2006_current2RPM_PID+0x1a0>)
 8001c90:	f44f 7089 	mov.w	r0, #274	; 0x112
 8001c94:	f000 f990 	bl	8001fb8 <sendB2bData>
	//apply power limit
	if (return_current_val > 10000) {return_current_val = 10000;}
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	dd02      	ble.n	8001ca8 <calc_M2006_current2RPM_PID+0x174>
 8001ca2:	f242 7310 	movw	r3, #10000	; 0x2710
 8001ca6:	617b      	str	r3, [r7, #20]
	if (return_current_val < -10000) {return_current_val = -10000;}
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	4a0b      	ldr	r2, [pc, #44]	; (8001cd8 <calc_M2006_current2RPM_PID+0x1a4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	da01      	bge.n	8001cb4 <calc_M2006_current2RPM_PID+0x180>
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <calc_M2006_current2RPM_PID+0x1a4>)
 8001cb2:	617b      	str	r3, [r7, #20]
	return return_current_val;
 8001cb4:	697b      	ldr	r3, [r7, #20]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	371c      	adds	r7, #28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd90      	pop	{r4, r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000378 	.word	0x20000378
 8001cc4:	200002a0 	.word	0x200002a0
 8001cc8:	20000320 	.word	0x20000320
 8001ccc:	2000034c 	.word	0x2000034c
 8001cd0:	200003a4 	.word	0x200003a4
 8001cd4:	ffffeae8 	.word	0xffffeae8
 8001cd8:	ffffd8f0 	.word	0xffffd8f0

08001cdc <calc_voltage2Position_PID>:
	if (return_current_val > 16384) {return_current_val = 16384;}
	if (return_current_val < -16384) {return_current_val = -16384;}
	return return_current_val;
}

int32_t calc_voltage2Position_PID(int8_t motorID, int16_t position, PID_preset_t preset) {
 8001cdc:	b490      	push	{r4, r7}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	eef0 6a40 	vmov.f32	s13, s0
 8001cea:	eeb0 7a60 	vmov.f32	s14, s1
 8001cee:	eef0 7a41 	vmov.f32	s15, s2
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	81bb      	strh	r3, [r7, #12]
 8001cf8:	edc7 6a00 	vstr	s13, [r7]
 8001cfc:	ed87 7a01 	vstr	s14, [r7, #4]
 8001d00:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_voltage_val = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	74fb      	strb	r3, [r7, #19]
	iPosition[ID] += position - motor_feedback[ID].motor_position;      // add to integral term
 8001d10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001d14:	4a47      	ldr	r2, [pc, #284]	; (8001e34 <calc_voltage2Position_PID+0x158>)
 8001d16:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d1a:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8001d1e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001d22:	4c45      	ldr	r4, [pc, #276]	; (8001e38 <calc_voltage2Position_PID+0x15c>)
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4423      	add	r3, r4
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	1ac2      	subs	r2, r0, r3
 8001d32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001d36:	440a      	add	r2, r1
 8001d38:	493e      	ldr	r1, [pc, #248]	; (8001e34 <calc_voltage2Position_PID+0x158>)
 8001d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dPosition[ID] = lastPosition[ID] - motor_feedback[ID].motor_position;       // update derivative term
 8001d3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001d42:	4a3e      	ldr	r2, [pc, #248]	; (8001e3c <calc_voltage2Position_PID+0x160>)
 8001d44:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d48:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001d4c:	483a      	ldr	r0, [pc, #232]	; (8001e38 <calc_voltage2Position_PID+0x15c>)
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4403      	add	r3, r0
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001d60:	1a8a      	subs	r2, r1, r2
 8001d62:	4937      	ldr	r1, [pc, #220]	; (8001e40 <calc_voltage2Position_PID+0x164>)
 8001d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errPosition[ID] = position - motor_feedback[ID].motor_position;     // update proportional term
 8001d68:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001d6c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001d70:	4831      	ldr	r0, [pc, #196]	; (8001e38 <calc_voltage2Position_PID+0x15c>)
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4403      	add	r3, r0
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001d84:	1a8a      	subs	r2, r1, r2
 8001d86:	492f      	ldr	r1, [pc, #188]	; (8001e44 <calc_voltage2Position_PID+0x168>)
 8001d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	lastPosition[ID] = motor_feedback[ID].motor_position;
 8001d8c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001d90:	4929      	ldr	r1, [pc, #164]	; (8001e38 <calc_voltage2Position_PID+0x15c>)
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	440b      	add	r3, r1
 8001d9c:	881a      	ldrh	r2, [r3, #0]
 8001d9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4a25      	ldr	r2, [pc, #148]	; (8001e3c <calc_voltage2Position_PID+0x160>)
 8001da6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return_voltage_val = (preset.kP * errPosition[ID]) + (preset.kI * iPosition[ID]) + (preset.kD * dPosition[ID]);
 8001daa:	ed97 7a00 	vldr	s14, [r7]
 8001dae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001db2:	4a24      	ldr	r2, [pc, #144]	; (8001e44 <calc_voltage2Position_PID+0x168>)
 8001db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db8:	ee07 3a90 	vmov	s15, r3
 8001dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc4:	edd7 6a01 	vldr	s13, [r7, #4]
 8001dc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001dcc:	4a19      	ldr	r2, [pc, #100]	; (8001e34 <calc_voltage2Position_PID+0x158>)
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	ee07 3a90 	vmov	s15, r3
 8001dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001de2:	edd7 6a02 	vldr	s13, [r7, #8]
 8001de6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001dea:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <calc_voltage2Position_PID+0x164>)
 8001dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df0:	ee07 3a90 	vmov	s15, r3
 8001df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e04:	ee17 3a90 	vmov	r3, s15
 8001e08:	617b      	str	r3, [r7, #20]
	//apply power limit
	if (return_voltage_val > 25000) {return_voltage_val = 25000;}
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001e10:	4293      	cmp	r3, r2
 8001e12:	dd02      	ble.n	8001e1a <calc_voltage2Position_PID+0x13e>
 8001e14:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8001e18:	617b      	str	r3, [r7, #20]
	if (return_voltage_val < -25000) {return_voltage_val = -25000;}
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <calc_voltage2Position_PID+0x16c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	da01      	bge.n	8001e26 <calc_voltage2Position_PID+0x14a>
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <calc_voltage2Position_PID+0x16c>)
 8001e24:	617b      	str	r3, [r7, #20]
	return return_voltage_val;
 8001e26:	697b      	ldr	r3, [r7, #20]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc90      	pop	{r4, r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000428 	.word	0x20000428
 8001e38:	200002a0 	.word	0x200002a0
 8001e3c:	200003d0 	.word	0x200003d0
 8001e40:	200003fc 	.word	0x200003fc
 8001e44:	20000454 	.word	0x20000454
 8001e48:	ffff9e58 	.word	0xffff9e58

08001e4c <setM3508RPM>:

// DO NOT use current ctrl and voltage ctrl concurrently for GM6020

void setM3508RPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	460a      	mov	r2, r1
 8001e56:	eef0 6a40 	vmov.f32	s13, s0
 8001e5a:	eeb0 7a60 	vmov.f32	s14, s1
 8001e5e:	eef0 7a41 	vmov.f32	s15, s2
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	4613      	mov	r3, r2
 8001e66:	81bb      	strh	r3, [r7, #12]
 8001e68:	edc7 6a00 	vstr	s13, [r7]
 8001e6c:	ed87 7a01 	vstr	s14, [r7, #4]
 8001e70:	edc7 7a02 	vstr	s15, [r7, #8]
	set_M3508_current(motorID, calc_current2RPM_PID(motorID, RPMtarget, preset));
 8001e74:	edd7 6a00 	vldr	s13, [r7]
 8001e78:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e80:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e88:	eeb0 0a66 	vmov.f32	s0, s13
 8001e8c:	eef0 0a47 	vmov.f32	s1, s14
 8001e90:	eeb0 1a67 	vmov.f32	s2, s15
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fd8e 	bl	80019b8 <calc_current2RPM_PID>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	b21a      	sxth	r2, r3
 8001ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fcfe 	bl	80018a8 <set_M3508_current>
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <setGM6020voltagePosition>:
void setGM6020currentPosition(int8_t motorID, int16_t position, PID_preset_t preset) {
	set_GM6020_current(motorID, calc_current2Position_PID(motorID, position, preset));

}

void setGM6020voltagePosition(int8_t motorID, int16_t position, PID_preset_t preset) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	460a      	mov	r2, r1
 8001ebe:	eef0 6a40 	vmov.f32	s13, s0
 8001ec2:	eeb0 7a60 	vmov.f32	s14, s1
 8001ec6:	eef0 7a41 	vmov.f32	s15, s2
 8001eca:	73fb      	strb	r3, [r7, #15]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	81bb      	strh	r3, [r7, #12]
 8001ed0:	edc7 6a00 	vstr	s13, [r7]
 8001ed4:	ed87 7a01 	vstr	s14, [r7, #4]
 8001ed8:	edc7 7a02 	vstr	s15, [r7, #8]
	set_GM6020_voltage(motorID, calc_voltage2Position_PID(motorID, position, preset));
 8001edc:	edd7 6a00 	vldr	s13, [r7]
 8001ee0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ee4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ee8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef0:	eeb0 0a66 	vmov.f32	s0, s13
 8001ef4:	eef0 0a47 	vmov.f32	s1, s14
 8001ef8:	eeb0 1a67 	vmov.f32	s2, s15
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff feec 	bl	8001cdc <calc_voltage2Position_PID>
 8001f04:	4603      	mov	r3, r0
 8001f06:	b21a      	sxth	r2, r3
 8001f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fd10 	bl	8001934 <set_GM6020_voltage>
}
 8001f14:	bf00      	nop
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <setM2006RPM>:

void setM2006RPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	460a      	mov	r2, r1
 8001f26:	eef0 6a40 	vmov.f32	s13, s0
 8001f2a:	eeb0 7a60 	vmov.f32	s14, s1
 8001f2e:	eef0 7a41 	vmov.f32	s15, s2
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	4613      	mov	r3, r2
 8001f36:	81bb      	strh	r3, [r7, #12]
 8001f38:	edc7 6a00 	vstr	s13, [r7]
 8001f3c:	ed87 7a01 	vstr	s14, [r7, #4]
 8001f40:	edc7 7a02 	vstr	s15, [r7, #8]
	set_M3508_current(motorID, calc_M2006_current2RPM_PID(motorID, RPMtarget, preset));
 8001f44:	edd7 6a00 	vldr	s13, [r7]
 8001f48:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f50:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f58:	eeb0 0a66 	vmov.f32	s0, s13
 8001f5c:	eef0 0a47 	vmov.f32	s1, s14
 8001f60:	eeb0 1a67 	vmov.f32	s2, s15
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fde4 	bl	8001b34 <calc_M2006_current2RPM_PID>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	b21a      	sxth	r2, r3
 8001f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fc96 	bl	80018a8 <set_M3508_current>
}
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <getMotorRPM>:

uint16_t getMotorPosition(int8_t motorID) {
	return motor_feedback[motorID-1].motor_position;
}

int16_t getMotorRPM(int8_t motorID) {
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
	return motor_feedback[motorID-1].speed_rpm;
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	1e5a      	subs	r2, r3, #1
 8001f94:	4907      	ldr	r1, [pc, #28]	; (8001fb4 <getMotorRPM+0x30>)
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	440b      	add	r3, r1
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	200002a0 	.word	0x200002a0

08001fb8 <sendB2bData>:

void setB2bID (can_msg_id_e canID) {
	boardID = canID;
}

void sendB2bData(can_msg_id_e canID, int16_t data1, int16_t data2, int16_t data3, int16_t data4) {
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	4604      	mov	r4, r0
 8001fc0:	4608      	mov	r0, r1
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4623      	mov	r3, r4
 8001fc8:	80fb      	strh	r3, [r7, #6]
 8001fca:	4603      	mov	r3, r0
 8001fcc:	80bb      	strh	r3, [r7, #4]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	807b      	strh	r3, [r7, #2]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	803b      	strh	r3, [r7, #0]
	CAN1_cmd_b2b(canID, data1, data2, data3, data4);
 8001fd6:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001fda:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001fde:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001fe2:	88f8      	ldrh	r0, [r7, #6]
 8001fe4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	4623      	mov	r3, r4
 8001fec:	f7ff fbac 	bl	8001748 <CAN1_cmd_b2b>
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd90      	pop	{r4, r7, pc}

08001ff8 <usart_Init>:
remote_control_t remote_control;
custom_client_data_t custom_client_data;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 8001ffc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002000:	4905      	ldr	r1, [pc, #20]	; (8002018 <usart_Init+0x20>)
 8002002:	4806      	ldr	r0, [pc, #24]	; (800201c <usart_Init+0x24>)
 8002004:	f007 fb4c 	bl	80096a0 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8002008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800200c:	4904      	ldr	r1, [pc, #16]	; (8002020 <usart_Init+0x28>)
 800200e:	4805      	ldr	r0, [pc, #20]	; (8002024 <usart_Init+0x2c>)
 8002010:	f007 fb46 	bl	80096a0 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	200004c4 	.word	0x200004c4
 800201c:	20000a80 	.word	0x20000a80
 8002020:	200005c4 	.word	0x200005c4
 8002024:	20000b08 	.word	0x20000b08

08002028 <usart_printf>:

void usart_printf(const char *fmt,...) {
 8002028:	b40f      	push	{r0, r1, r2, r3}
 800202a:	b580      	push	{r7, lr}
 800202c:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	4a0c      	ldr	r2, [pc, #48]	; (8002064 <usart_printf+0x3c>)
 8002034:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <usart_printf+0x3c>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68b9      	ldr	r1, [r7, #8]
 800203c:	480a      	ldr	r0, [pc, #40]	; (8002068 <usart_printf+0x40>)
 800203e:	f00c f975 	bl	800e32c <vsiprintf>
 8002042:	4603      	mov	r3, r0
 8002044:	b29a      	uxth	r2, r3
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <usart_printf+0x44>)
 8002048:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <usart_printf+0x44>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	4905      	ldr	r1, [pc, #20]	; (8002068 <usart_printf+0x40>)
 8002052:	4807      	ldr	r0, [pc, #28]	; (8002070 <usart_printf+0x48>)
 8002054:	f007 faa6 	bl	80095a4 <HAL_UART_Transmit_DMA>
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002060:	b004      	add	sp, #16
 8002062:	4770      	bx	lr
 8002064:	200006fc 	.word	0x200006fc
 8002068:	20000700 	.word	0x20000700
 800206c:	20000800 	.word	0x20000800
 8002070:	20000a80 	.word	0x20000a80

08002074 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	807b      	strh	r3, [r7, #2]
	if (huart == &huart6) {
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a2d      	ldr	r2, [pc, #180]	; (8002138 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d152      	bne.n	800212e <HAL_UARTEx_RxEventCallback+0xba>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8002088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800208c:	492b      	ldr	r1, [pc, #172]	; (800213c <HAL_UARTEx_RxEventCallback+0xc8>)
 800208e:	482a      	ldr	r0, [pc, #168]	; (8002138 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002090:	f007 fb06 	bl	80096a0 <HAL_UARTEx_ReceiveToIdle_DMA>
		uint16_t RxBuff16 = ((uint16_t) RxBuff_2[5] << 8) | RxBuff_2[6];
 8002094:	4b29      	ldr	r3, [pc, #164]	; (800213c <HAL_UARTEx_RxEventCallback+0xc8>)
 8002096:	795b      	ldrb	r3, [r3, #5]
 8002098:	021b      	lsls	r3, r3, #8
 800209a:	b21a      	sxth	r2, r3
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <HAL_UARTEx_RxEventCallback+0xc8>)
 800209e:	799b      	ldrb	r3, [r3, #6]
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	4313      	orrs	r3, r2
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	81fb      	strh	r3, [r7, #14]
		//usart_printf("callback triggered at %d | %d | %d | %d || %d \r\n", RxBuff_2[0], RxBuff_2[1], RxBuff_2[2], RxBuff_2[3], RxBuff16);
		switch (RxBuff16) {
 80020a8:	89fb      	ldrh	r3, [r7, #14]
 80020aa:	f240 2202 	movw	r2, #514	; 0x202
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d036      	beq.n	8002120 <HAL_UARTEx_RxEventCallback+0xac>
 80020b2:	f240 2202 	movw	r2, #514	; 0x202
 80020b6:	4293      	cmp	r3, r2
 80020b8:	dc38      	bgt.n	800212c <HAL_UARTEx_RxEventCallback+0xb8>
 80020ba:	f240 2201 	movw	r2, #513	; 0x201
 80020be:	4293      	cmp	r3, r2
 80020c0:	d028      	beq.n	8002114 <HAL_UARTEx_RxEventCallback+0xa0>
 80020c2:	f240 2201 	movw	r2, #513	; 0x201
 80020c6:	4293      	cmp	r3, r2
 80020c8:	dc30      	bgt.n	800212c <HAL_UARTEx_RxEventCallback+0xb8>
 80020ca:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80020ce:	da2d      	bge.n	800212c <HAL_UARTEx_RxEventCallback+0xb8>
 80020d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020d4:	da1e      	bge.n	8002114 <HAL_UARTEx_RxEventCallback+0xa0>
 80020d6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80020da:	dc27      	bgt.n	800212c <HAL_UARTEx_RxEventCallback+0xb8>
 80020dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020e0:	dc18      	bgt.n	8002114 <HAL_UARTEx_RxEventCallback+0xa0>
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d010      	beq.n	8002108 <HAL_UARTEx_RxEventCallback+0x94>
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	dc20      	bgt.n	800212c <HAL_UARTEx_RxEventCallback+0xb8>
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d002      	beq.n	80020f4 <HAL_UARTEx_RxEventCallback+0x80>
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d006      	beq.n	8002100 <HAL_UARTEx_RxEventCallback+0x8c>
		    case MINIMAP_DATA_HEADER: {}
		    case CUSTOM_INFO_HEADER: {}

		    default: {
		    	//usart_printf("no match \r\n");
		        break;
 80020f2:	e01b      	b.n	800212c <HAL_UARTEx_RxEventCallback+0xb8>
		    	memcpy(&game_status, (RxBuff_2 + frame_header_offset), game_status_len);
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_UARTEx_RxEventCallback+0xcc>)
 80020f6:	220b      	movs	r2, #11
 80020f8:	4619      	mov	r1, r3
 80020fa:	4812      	ldr	r0, [pc, #72]	; (8002144 <HAL_UARTEx_RxEventCallback+0xd0>)
 80020fc:	f00c f9f4 	bl	800e4e8 <memcpy>
		    	memcpy(&game_result, (RxBuff_2 + frame_header_offset), game_result_len);
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <HAL_UARTEx_RxEventCallback+0xcc>)
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	4b10      	ldr	r3, [pc, #64]	; (8002148 <HAL_UARTEx_RxEventCallback+0xd4>)
 8002106:	701a      	strb	r2, [r3, #0]
		    	memcpy(&robot_status, (RxBuff_2 + frame_header_offset), robot_status_len);
 8002108:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <HAL_UARTEx_RxEventCallback+0xcc>)
 800210a:	220d      	movs	r2, #13
 800210c:	4619      	mov	r1, r3
 800210e:	480f      	ldr	r0, [pc, #60]	; (800214c <HAL_UARTEx_RxEventCallback+0xd8>)
 8002110:	f00c f9ea 	bl	800e4e8 <memcpy>
		    	memcpy(&robot_status, (RxBuff_2 + frame_header_offset), robot_status_len);
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_UARTEx_RxEventCallback+0xcc>)
 8002116:	220d      	movs	r2, #13
 8002118:	4619      	mov	r1, r3
 800211a:	480c      	ldr	r0, [pc, #48]	; (800214c <HAL_UARTEx_RxEventCallback+0xd8>)
 800211c:	f00c f9e4 	bl	800e4e8 <memcpy>
		    	memcpy(&power_heat_data, (RxBuff_2 + frame_header_offset), power_heat_data_len);
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <HAL_UARTEx_RxEventCallback+0xcc>)
 8002122:	2210      	movs	r2, #16
 8002124:	4619      	mov	r1, r3
 8002126:	480a      	ldr	r0, [pc, #40]	; (8002150 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002128:	f00c f9de 	bl	800e4e8 <memcpy>
		        break;
 800212c:	bf00      	nop
		    }
		}
	}
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000b08 	.word	0x20000b08
 800213c:	200005c4 	.word	0x200005c4
 8002140:	200005cb 	.word	0x200005cb
 8002144:	200006c8 	.word	0x200006c8
 8002148:	200006d8 	.word	0x200006d8
 800214c:	200006dc 	.word	0x200006dc
 8002150:	200006ec 	.word	0x200006ec

08002154 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 800215a:	2301      	movs	r3, #1
 800215c:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8002162:	2301      	movs	r3, #1
 8002164:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 8002166:	2300      	movs	r3, #0
 8002168:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 800217e:	463b      	mov	r3, r7
 8002180:	4619      	mov	r1, r3
 8002182:	480f      	ldr	r0, [pc, #60]	; (80021c0 <can_filter_init+0x6c>)
 8002184:	f002 fe9c 	bl	8004ec0 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8002188:	480d      	ldr	r0, [pc, #52]	; (80021c0 <can_filter_init+0x6c>)
 800218a:	f002 ff79 	bl	8005080 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800218e:	2102      	movs	r1, #2
 8002190:	480b      	ldr	r0, [pc, #44]	; (80021c0 <can_filter_init+0x6c>)
 8002192:	f003 f9a6 	bl	80054e2 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 8002196:	230e      	movs	r3, #14
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
    can_filter_st.FilterBank = 14;
 800219a:	230e      	movs	r3, #14
 800219c:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 800219e:	463b      	mov	r3, r7
 80021a0:	4619      	mov	r1, r3
 80021a2:	4808      	ldr	r0, [pc, #32]	; (80021c4 <can_filter_init+0x70>)
 80021a4:	f002 fe8c 	bl	8004ec0 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 80021a8:	4806      	ldr	r0, [pc, #24]	; (80021c4 <can_filter_init+0x70>)
 80021aa:	f002 ff69 	bl	8005080 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80021ae:	2102      	movs	r1, #2
 80021b0:	4804      	ldr	r0, [pc, #16]	; (80021c4 <can_filter_init+0x70>)
 80021b2:	f003 f996 	bl	80054e2 <HAL_CAN_ActivateNotification>
}
 80021b6:	bf00      	nop
 80021b8:	3728      	adds	r7, #40	; 0x28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000864 	.word	0x20000864
 80021c4:	2000088c 	.word	0x2000088c

080021c8 <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 80021d2:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <imu_pwm_set+0x1c>)
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	6353      	str	r3, [r2, #52]	; 0x34

}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	40014400 	.word	0x40014400

080021e8 <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	4613      	mov	r3, r2
 80021f4:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 80021f6:	4b27      	ldr	r3, [pc, #156]	; (8002294 <RC_init+0xac>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695a      	ldr	r2, [r3, #20]
 80021fc:	4b25      	ldr	r3, [pc, #148]	; (8002294 <RC_init+0xac>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002204:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 8002206:	4b23      	ldr	r3, [pc, #140]	; (8002294 <RC_init+0xac>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	4b21      	ldr	r3, [pc, #132]	; (8002294 <RC_init+0xac>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 0210 	orr.w	r2, r2, #16
 8002214:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 8002216:	4b20      	ldr	r3, [pc, #128]	; (8002298 <RC_init+0xb0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <RC_init+0xb0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0201 	bic.w	r2, r2, #1
 8002224:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8002226:	e007      	b.n	8002238 <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <RC_init+0xb0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <RC_init+0xb0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8002238:	4b17      	ldr	r3, [pc, #92]	; (8002298 <RC_init+0xb0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 8002246:	4b14      	ldr	r3, [pc, #80]	; (8002298 <RC_init+0xb0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a14      	ldr	r2, [pc, #80]	; (800229c <RC_init+0xb4>)
 800224c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 800224e:	4b12      	ldr	r3, [pc, #72]	; (8002298 <RC_init+0xb0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <RC_init+0xb0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 800225e:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <RC_init+0xb0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <RC_init+0xb0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <RC_init+0xb0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002274:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <RC_init+0xb0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <RC_init+0xb0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 0201 	orr.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]
}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20000ac4 	.word	0x20000ac4
 8002298:	20000c0c 	.word	0x20000c0c
 800229c:	40004804 	.word	0x40004804

080022a0 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
    osDelay(500);
 80022a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022ac:	f008 fc56 	bl	800ab5c <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 80022b0:	eddf 0a28 	vldr	s1, [pc, #160]	; 8002354 <imu_temp_control_task+0xb4>
 80022b4:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8002358 <imu_temp_control_task+0xb8>
 80022b8:	4a28      	ldr	r2, [pc, #160]	; (800235c <imu_temp_control_task+0xbc>)
 80022ba:	2100      	movs	r1, #0
 80022bc:	4828      	ldr	r0, [pc, #160]	; (8002360 <imu_temp_control_task+0xc0>)
 80022be:	f001 fa66 	bl	800378e <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80022c2:	4b28      	ldr	r3, [pc, #160]	; (8002364 <imu_temp_control_task+0xc4>)
 80022c4:	2210      	movs	r2, #16
 80022c6:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022c8:	4826      	ldr	r0, [pc, #152]	; (8002364 <imu_temp_control_task+0xc4>)
 80022ca:	f005 fe80 	bl	8007fce <HAL_SPI_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <imu_temp_control_task+0x38>
    {
        Error_Handler();
 80022d4:	f001 fa56 	bl	8003784 <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 80022d8:	2000      	movs	r0, #0
 80022da:	f009 fd47 	bl	800bd6c <pcTaskGetName>
 80022de:	4603      	mov	r3, r0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f009 fdd5 	bl	800be90 <xTaskGetHandle>
 80022e6:	4603      	mov	r3, r0
 80022e8:	4a1f      	ldr	r2, [pc, #124]	; (8002368 <imu_temp_control_task+0xc8>)
 80022ea:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <imu_temp_control_task+0xcc>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 80022f2:	bf00      	nop
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295
 80022f8:	2001      	movs	r0, #1
 80022fa:	f00a f9eb 	bl	800c6d4 <ulTaskNotifyTake>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b01      	cmp	r3, #1
 8002302:	d1f7      	bne.n	80022f4 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8002304:	f7fe ffcc 	bl	80012a0 <IMU_get_temp>
 8002308:	eef0 7a40 	vmov.f32	s15, s0
 800230c:	eddf 0a18 	vldr	s1, [pc, #96]	; 8002370 <imu_temp_control_task+0xd0>
 8002310:	eeb0 0a67 	vmov.f32	s0, s15
 8002314:	4812      	ldr	r0, [pc, #72]	; (8002360 <imu_temp_control_task+0xc0>)
 8002316:	f001 fa91 	bl	800383c <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <imu_temp_control_task+0xc0>)
 800231c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002320:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002328:	d503      	bpl.n	8002332 <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <imu_temp_control_task+0xc0>)
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <imu_temp_control_task+0xc0>)
 8002334:	edd3 7a08 	vldr	s15, [r3, #32]
 8002338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800233c:	ee17 3a90 	vmov	r3, s15
 8002340:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8002342:	89fb      	ldrh	r3, [r7, #14]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff3f 	bl	80021c8 <imu_pwm_set>
        osDelay(5);
 800234a:	2005      	movs	r0, #5
 800234c:	f008 fc06 	bl	800ab5c <osDelay>
    {
 8002350:	e7cf      	b.n	80022f2 <imu_temp_control_task+0x52>
 8002352:	bf00      	nop
 8002354:	45898000 	.word	0x45898000
 8002358:	458ca000 	.word	0x458ca000
 800235c:	080106dc 	.word	0x080106dc
 8002360:	2000080c 	.word	0x2000080c
 8002364:	20000908 	.word	0x20000908
 8002368:	20000804 	.word	0x20000804
 800236c:	20000808 	.word	0x20000808
 8002370:	42200000 	.word	0x42200000

08002374 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_GPIO_EXTI_Callback+0x54>)
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	88fa      	ldrh	r2, [r7, #6]
 8002384:	429a      	cmp	r2, r3
 8002386:	d11b      	bne.n	80023c0 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8002388:	4b10      	ldr	r3, [pc, #64]	; (80023cc <HAL_GPIO_EXTI_Callback+0x58>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d016      	beq.n	80023c0 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002392:	f00a f913 	bl	800c5bc <xTaskGetSchedulerState>
 8002396:	4603      	mov	r3, r0
 8002398:	2b01      	cmp	r3, #1
 800239a:	d011      	beq.n	80023c0 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <HAL_GPIO_EXTI_Callback+0x5c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	490c      	ldr	r1, [pc, #48]	; (80023d4 <HAL_GPIO_EXTI_Callback+0x60>)
 80023a2:	4618      	mov	r0, r3
 80023a4:	f00a f9e2 	bl	800c76c <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <HAL_GPIO_EXTI_Callback+0x60>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d007      	beq.n	80023c0 <HAL_GPIO_EXTI_Callback+0x4c>
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_GPIO_EXTI_Callback+0x64>)
 80023b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	f3bf 8f4f 	dsb	sy
 80023bc:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	2000000e 	.word	0x2000000e
 80023cc:	20000808 	.word	0x20000808
 80023d0:	20000804 	.word	0x20000804
 80023d4:	20000854 	.word	0x20000854
 80023d8:	e000ed04 	.word	0xe000ed04

080023dc <ist8310_init>:
/**
  * @brief          initialize ist8310
  * @param[in]      none
  * @retval         error value
  */
uint8_t ist8310_init(void) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
    static const uint8_t wait_time = 150;
    static const uint8_t sleepTime = 50;
    uint8_t res = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	71bb      	strb	r3, [r7, #6]
    uint8_t writeNum = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	71fb      	strb	r3, [r7, #7]

    ist8310_GPIO_init();
 80023ea:	f000 f8c1 	bl	8002570 <ist8310_GPIO_init>
    ist8310_com_init();
 80023ee:	f000 f8c6 	bl	800257e <ist8310_com_init>

    ist8310_RST_L();
 80023f2:	f000 f97f 	bl	80026f4 <ist8310_RST_L>
    ist8310_delay_ms(sleepTime);
 80023f6:	4b32      	ldr	r3, [pc, #200]	; (80024c0 <ist8310_init+0xe4>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 f919 	bl	8002634 <ist8310_delay_ms>
    ist8310_RST_H();
 8002402:	f000 f96b 	bl	80026dc <ist8310_RST_H>
    ist8310_delay_ms(sleepTime);
 8002406:	4b2e      	ldr	r3, [pc, #184]	; (80024c0 <ist8310_init+0xe4>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	4618      	mov	r0, r3
 800240e:	f000 f911 	bl	8002634 <ist8310_delay_ms>

    res = ist8310_IIC_read_single_reg(IST8310_WHO_AM_I);
 8002412:	2000      	movs	r0, #0
 8002414:	f000 f8ba 	bl	800258c <ist8310_IIC_read_single_reg>
 8002418:	4603      	mov	r3, r0
 800241a:	71bb      	strb	r3, [r7, #6]
    if (res != IST8310_WHO_AM_I_VALUE) {
 800241c:	79bb      	ldrb	r3, [r7, #6]
 800241e:	2b10      	cmp	r3, #16
 8002420:	d001      	beq.n	8002426 <ist8310_init+0x4a>
        return IST8310_NO_SENSOR;
 8002422:	2340      	movs	r3, #64	; 0x40
 8002424:	e047      	b.n	80024b6 <ist8310_init+0xda>
    }
    //set mpu6500 sonsor config and check
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 8002426:	2300      	movs	r3, #0
 8002428:	71fb      	strb	r3, [r7, #7]
 800242a:	e040      	b.n	80024ae <ist8310_init+0xd2>
        ist8310_IIC_write_single_reg(ist8310_write_reg_data_error[writeNum][0], ist8310_write_reg_data_error[writeNum][1]);
 800242c:	79fa      	ldrb	r2, [r7, #7]
 800242e:	4925      	ldr	r1, [pc, #148]	; (80024c4 <ist8310_init+0xe8>)
 8002430:	4613      	mov	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4413      	add	r3, r2
 8002436:	440b      	add	r3, r1
 8002438:	7818      	ldrb	r0, [r3, #0]
 800243a:	79fa      	ldrb	r2, [r7, #7]
 800243c:	4921      	ldr	r1, [pc, #132]	; (80024c4 <ist8310_init+0xe8>)
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4413      	add	r3, r2
 8002444:	440b      	add	r3, r1
 8002446:	3301      	adds	r3, #1
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	4619      	mov	r1, r3
 800244c:	f000 f8ba 	bl	80025c4 <ist8310_IIC_write_single_reg>
        ist8310_delay_us(wait_time);
 8002450:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <ist8310_init+0xec>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	b29b      	uxth	r3, r3
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f8fa 	bl	8002650 <ist8310_delay_us>
        res = ist8310_IIC_read_single_reg(ist8310_write_reg_data_error[writeNum][0]);
 800245c:	79fa      	ldrb	r2, [r7, #7]
 800245e:	4919      	ldr	r1, [pc, #100]	; (80024c4 <ist8310_init+0xe8>)
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	440b      	add	r3, r1
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f88e 	bl	800258c <ist8310_IIC_read_single_reg>
 8002470:	4603      	mov	r3, r0
 8002472:	71bb      	strb	r3, [r7, #6]
        ist8310_delay_us(wait_time);
 8002474:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <ist8310_init+0xec>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	b29b      	uxth	r3, r3
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f8e8 	bl	8002650 <ist8310_delay_us>
        if (res != ist8310_write_reg_data_error[writeNum][1]) {
 8002480:	79fa      	ldrb	r2, [r7, #7]
 8002482:	4910      	ldr	r1, [pc, #64]	; (80024c4 <ist8310_init+0xe8>)
 8002484:	4613      	mov	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	440b      	add	r3, r1
 800248c:	3301      	adds	r3, #1
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	79ba      	ldrb	r2, [r7, #6]
 8002492:	429a      	cmp	r2, r3
 8002494:	d008      	beq.n	80024a8 <ist8310_init+0xcc>
            return ist8310_write_reg_data_error[writeNum][2];
 8002496:	79fa      	ldrb	r2, [r7, #7]
 8002498:	490a      	ldr	r1, [pc, #40]	; (80024c4 <ist8310_init+0xe8>)
 800249a:	4613      	mov	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4413      	add	r3, r2
 80024a0:	440b      	add	r3, r1
 80024a2:	3302      	adds	r3, #2
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	e006      	b.n	80024b6 <ist8310_init+0xda>
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	3301      	adds	r3, #1
 80024ac:	71fb      	strb	r3, [r7, #7]
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d9bb      	bls.n	800242c <ist8310_init+0x50>
        }
    }
    return IST8310_NO_ERROR;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	080106f4 	.word	0x080106f4
 80024c4:	080106e8 	.word	0x080106e8
 80024c8:	080106f5 	.word	0x080106f5

080024cc <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 80024d8:	f107 0308 	add.w	r3, r7, #8
 80024dc:	2206      	movs	r2, #6
 80024de:	4619      	mov	r1, r3
 80024e0:	2003      	movs	r0, #3
 80024e2:	f000 f88b 	bl	80025fc <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 80024e6:	7a7b      	ldrb	r3, [r7, #9]
 80024e8:	021b      	lsls	r3, r3, #8
 80024ea:	b21a      	sxth	r2, r3
 80024ec:	7a3b      	ldrb	r3, [r7, #8]
 80024ee:	b21b      	sxth	r3, r3
 80024f0:	4313      	orrs	r3, r2
 80024f2:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 80024f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024f8:	ee07 3a90 	vmov	s15, r3
 80024fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002500:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800256c <ist8310_read_mag+0xa0>
 8002504:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 800250e:	7afb      	ldrb	r3, [r7, #11]
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	b21a      	sxth	r2, r3
 8002514:	7abb      	ldrb	r3, [r7, #10]
 8002516:	b21b      	sxth	r3, r3
 8002518:	4313      	orrs	r3, r2
 800251a:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 800251c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3304      	adds	r3, #4
 800252c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800256c <ist8310_read_mag+0xa0>
 8002530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002534:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 8002538:	7b7b      	ldrb	r3, [r7, #13]
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	b21a      	sxth	r2, r3
 800253e:	7b3b      	ldrb	r3, [r7, #12]
 8002540:	b21b      	sxth	r3, r3
 8002542:	4313      	orrs	r3, r2
 8002544:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 8002546:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3308      	adds	r3, #8
 8002556:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800256c <ist8310_read_mag+0xa0>
 800255a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800255e:	edc3 7a00 	vstr	s15, [r3]
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	3e99999a 	.word	0x3e99999a

08002570 <ist8310_GPIO_init>:
  * @brief          initialize ist8310 gpio.
  * @param[in]      none
  * @retval         none
  */
void ist8310_GPIO_init(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <ist8310_com_init>:
  * @brief          initialize ist8310 communication interface
  * @param[in]      none
  * @retval         none
  */
void ist8310_com_init(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <ist8310_IIC_read_single_reg>:
  * @brief          read a byte of ist8310 by i2c
  * @param[in]      register address
  * @retval         value of the register
  */
uint8_t ist8310_IIC_read_single_reg(uint8_t reg)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af04      	add	r7, sp, #16
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&res,1,10);
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	b29a      	uxth	r2, r3
 800259e:	230a      	movs	r3, #10
 80025a0:	9302      	str	r3, [sp, #8]
 80025a2:	2301      	movs	r3, #1
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	f107 030f 	add.w	r3, r7, #15
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2301      	movs	r3, #1
 80025ae:	211c      	movs	r1, #28
 80025b0:	4803      	ldr	r0, [pc, #12]	; (80025c0 <ist8310_IIC_read_single_reg+0x34>)
 80025b2:	f004 fb0b 	bl	8006bcc <HAL_I2C_Mem_Read>
    return res;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	200008b4 	.word	0x200008b4

080025c4 <ist8310_IIC_write_single_reg>:
  * @param[in]      register address
  * @param[in]      write value
  * @retval         value of the register
  */
void ist8310_IIC_write_single_reg(uint8_t reg, uint8_t data)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af04      	add	r7, sp, #16
 80025ca:	4603      	mov	r3, r0
 80025cc:	460a      	mov	r2, r1
 80025ce:	71fb      	strb	r3, [r7, #7]
 80025d0:	4613      	mov	r3, r2
 80025d2:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&data,1,10);
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	230a      	movs	r3, #10
 80025da:	9302      	str	r3, [sp, #8]
 80025dc:	2301      	movs	r3, #1
 80025de:	9301      	str	r3, [sp, #4]
 80025e0:	1dbb      	adds	r3, r7, #6
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	2301      	movs	r3, #1
 80025e6:	211c      	movs	r1, #28
 80025e8:	4803      	ldr	r0, [pc, #12]	; (80025f8 <ist8310_IIC_write_single_reg+0x34>)
 80025ea:	f004 f9f5 	bl	80069d8 <HAL_I2C_Mem_Write>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	200008b4 	.word	0x200008b4

080025fc <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af04      	add	r7, sp, #16
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	71fb      	strb	r3, [r7, #7]
 8002608:	4613      	mov	r3, r2
 800260a:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	b29a      	uxth	r2, r3
 8002610:	79bb      	ldrb	r3, [r7, #6]
 8002612:	b29b      	uxth	r3, r3
 8002614:	210a      	movs	r1, #10
 8002616:	9102      	str	r1, [sp, #8]
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2301      	movs	r3, #1
 8002620:	211c      	movs	r1, #28
 8002622:	4803      	ldr	r0, [pc, #12]	; (8002630 <ist8310_IIC_read_muli_reg+0x34>)
 8002624:	f004 fad2 	bl	8006bcc <HAL_I2C_Mem_Read>
}
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	200008b4 	.word	0x200008b4

08002634 <ist8310_delay_ms>:
  * @brief          delay x millisecond
  * @param[in]      ms: ms millisecond
  * @retval         none
  */
void ist8310_delay_ms(uint16_t ms)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	4618      	mov	r0, r3
 8002642:	f002 fb1d 	bl	8004c80 <HAL_Delay>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <ist8310_delay_us>:
  * @brief          delay x microsecond
  * @param[in]      us: us microsecond
  * @retval         none
  */
void ist8310_delay_us(uint16_t us)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	80fb      	strh	r3, [r7, #6]
    uint32_t ticks = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
    uint32_t told = 0, tnow = 0, tcnt = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <ist8310_delay_us+0x88>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	60fb      	str	r3, [r7, #12]
    ticks = us * 72;
 8002674:	88fa      	ldrh	r2, [r7, #6]
 8002676:	4613      	mov	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4413      	add	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8002680:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <ist8310_delay_us+0x88>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8002686:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <ist8310_delay_us+0x88>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	429a      	cmp	r2, r3
 8002692:	d0f8      	beq.n	8002686 <ist8310_delay_us+0x36>
        {
            if (tnow < told)
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	429a      	cmp	r2, r3
 800269a:	d206      	bcs.n	80026aa <ist8310_delay_us+0x5a>
            {
                tcnt += told - tnow;
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4413      	add	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	e007      	b.n	80026ba <ist8310_delay_us+0x6a>
            }
            else
            {
                tcnt += reload - tnow + told;
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad2      	subs	r2, r2, r3
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	4413      	add	r3, r2
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4413      	add	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d200      	bcs.n	80026c8 <ist8310_delay_us+0x78>
        tnow = SysTick->VAL;
 80026c6:	e7de      	b.n	8002686 <ist8310_delay_us+0x36>
            {
                break;
 80026c8:	bf00      	nop
            }
        }
    }
}
 80026ca:	bf00      	nop
 80026cc:	3724      	adds	r7, #36	; 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000e010 	.word	0xe000e010

080026dc <ist8310_RST_H>:
  * @brief          set the RSTN PIN to 1
  * @param[in]      none
  * @retval         none
  */
void ist8310_RST_H(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 80026e0:	2201      	movs	r2, #1
 80026e2:	2140      	movs	r1, #64	; 0x40
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <ist8310_RST_H+0x14>)
 80026e6:	f004 f801 	bl	80066ec <HAL_GPIO_WritePin>
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40021800 	.word	0x40021800

080026f4 <ist8310_RST_L>:
  * @brief          set the RSTN PIN to 0
  * @param[in]      none
  * @retval         none
  */
extern void ist8310_RST_L(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80026f8:	2200      	movs	r2, #0
 80026fa:	2140      	movs	r1, #64	; 0x40
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <ist8310_RST_L+0x14>)
 80026fe:	f003 fff5 	bl	80066ec <HAL_GPIO_WritePin>
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40021800 	.word	0x40021800

0800270c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002710:	f002 fa44 	bl	8004b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002714:	f000 f864 	bl	80027e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002718:	f000 fc76 	bl	8003008 <MX_GPIO_Init>
  MX_DMA_Init();
 800271c:	f000 fc26 	bl	8002f6c <MX_DMA_Init>
  MX_CAN1_Init();
 8002720:	f000 f8ca 	bl	80028b8 <MX_CAN1_Init>
  MX_CAN2_Init();
 8002724:	f000 f8fe 	bl	8002924 <MX_CAN2_Init>
  MX_SPI1_Init();
 8002728:	f000 f960 	bl	80029ec <MX_SPI1_Init>
  MX_TIM4_Init();
 800272c:	f000 fa3c 	bl	8002ba8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002730:	f000 fb9c 	bl	8002e6c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002734:	f000 fbf0 	bl	8002f18 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8002738:	f000 f98e 	bl	8002a58 <MX_TIM1_Init>
  MX_TIM8_Init();
 800273c:	f000 faac 	bl	8002c98 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8002740:	f000 fbbe 	bl	8002ec0 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8002744:	f000 fb44 	bl	8002dd0 <MX_TIM10_Init>
  MX_I2C3_Init();
 8002748:	f000 f922 	bl	8002990 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 800274c:	f7ff fd02 	bl	8002154 <can_filter_init>
  remote_control_init();
 8002750:	f001 f9bc 	bl	8003acc <remote_control_init>
  usart_Init();
 8002754:	f7ff fc50 	bl	8001ff8 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 8002758:	f001 f9c6 	bl	8003ae8 <get_remote_control_point>
 800275c:	4603      	mov	r3, r0
 800275e:	4a13      	ldr	r2, [pc, #76]	; (80027ac <main+0xa0>)
 8002760:	6013      	str	r3, [r2, #0]

  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002762:	f008 f91f 	bl	800a9a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 8002766:	4a12      	ldr	r2, [pc, #72]	; (80027b0 <main+0xa4>)
 8002768:	2100      	movs	r1, #0
 800276a:	4812      	ldr	r0, [pc, #72]	; (80027b4 <main+0xa8>)
 800276c:	f008 f964 	bl	800aa38 <osThreadNew>
 8002770:	4603      	mov	r3, r0
 8002772:	4a11      	ldr	r2, [pc, #68]	; (80027b8 <main+0xac>)
 8002774:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 8002776:	4a11      	ldr	r2, [pc, #68]	; (80027bc <main+0xb0>)
 8002778:	2100      	movs	r1, #0
 800277a:	4811      	ldr	r0, [pc, #68]	; (80027c0 <main+0xb4>)
 800277c:	f008 f95c 	bl	800aa38 <osThreadNew>
 8002780:	4603      	mov	r3, r0
 8002782:	4a10      	ldr	r2, [pc, #64]	; (80027c4 <main+0xb8>)
 8002784:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8002786:	4a10      	ldr	r2, [pc, #64]	; (80027c8 <main+0xbc>)
 8002788:	2100      	movs	r1, #0
 800278a:	4810      	ldr	r0, [pc, #64]	; (80027cc <main+0xc0>)
 800278c:	f008 f954 	bl	800aa38 <osThreadNew>
 8002790:	4603      	mov	r3, r0
 8002792:	4a0f      	ldr	r2, [pc, #60]	; (80027d0 <main+0xc4>)
 8002794:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 8002796:	4a0f      	ldr	r2, [pc, #60]	; (80027d4 <main+0xc8>)
 8002798:	2100      	movs	r1, #0
 800279a:	480f      	ldr	r0, [pc, #60]	; (80027d8 <main+0xcc>)
 800279c:	f008 f94c 	bl	800aa38 <osThreadNew>
 80027a0:	4603      	mov	r3, r0
 80027a2:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <main+0xd0>)
 80027a4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80027a6:	f008 f921 	bl	800a9ec <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027aa:	e7fe      	b.n	80027aa <main+0x9e>
 80027ac:	20000d3c 	.word	0x20000d3c
 80027b0:	080106f8 	.word	0x080106f8
 80027b4:	0800322d 	.word	0x0800322d
 80027b8:	20000d2c 	.word	0x20000d2c
 80027bc:	0801071c 	.word	0x0801071c
 80027c0:	080032e1 	.word	0x080032e1
 80027c4:	20000d30 	.word	0x20000d30
 80027c8:	08010740 	.word	0x08010740
 80027cc:	080022a1 	.word	0x080022a1
 80027d0:	20000d34 	.word	0x20000d34
 80027d4:	08010764 	.word	0x08010764
 80027d8:	08003775 	.word	0x08003775
 80027dc:	20000d38 	.word	0x20000d38

080027e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b094      	sub	sp, #80	; 0x50
 80027e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027e6:	f107 0320 	add.w	r3, r7, #32
 80027ea:	2230      	movs	r2, #48	; 0x30
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f00b fda6 	bl	800e340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002804:	2300      	movs	r3, #0
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <SystemClock_Config+0xd0>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	4a28      	ldr	r2, [pc, #160]	; (80028b0 <SystemClock_Config+0xd0>)
 800280e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002812:	6413      	str	r3, [r2, #64]	; 0x40
 8002814:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <SystemClock_Config+0xd0>)
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002820:	2300      	movs	r3, #0
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <SystemClock_Config+0xd4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a22      	ldr	r2, [pc, #136]	; (80028b4 <SystemClock_Config+0xd4>)
 800282a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <SystemClock_Config+0xd4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800283c:	2301      	movs	r3, #1
 800283e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002846:	2302      	movs	r3, #2
 8002848:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800284a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800284e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002850:	2306      	movs	r3, #6
 8002852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002854:	23a8      	movs	r3, #168	; 0xa8
 8002856:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002858:	2302      	movs	r3, #2
 800285a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800285c:	2304      	movs	r3, #4
 800285e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002860:	f107 0320 	add.w	r3, r7, #32
 8002864:	4618      	mov	r0, r3
 8002866:	f004 ff33 	bl	80076d0 <HAL_RCC_OscConfig>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002870:	f000 ff88 	bl	8003784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002874:	230f      	movs	r3, #15
 8002876:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002878:	2302      	movs	r3, #2
 800287a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002880:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002884:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800288a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	2105      	movs	r1, #5
 8002892:	4618      	mov	r0, r3
 8002894:	f005 f994 	bl	8007bc0 <HAL_RCC_ClockConfig>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800289e:	f000 ff71 	bl	8003784 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80028a2:	f005 fa73 	bl	8007d8c <HAL_RCC_EnableCSS>
}
 80028a6:	bf00      	nop
 80028a8:	3750      	adds	r7, #80	; 0x50
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40007000 	.word	0x40007000

080028b8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80028bc:	4b17      	ldr	r3, [pc, #92]	; (800291c <MX_CAN1_Init+0x64>)
 80028be:	4a18      	ldr	r2, [pc, #96]	; (8002920 <MX_CAN1_Init+0x68>)
 80028c0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80028c2:	4b16      	ldr	r3, [pc, #88]	; (800291c <MX_CAN1_Init+0x64>)
 80028c4:	2203      	movs	r2, #3
 80028c6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80028c8:	4b14      	ldr	r3, [pc, #80]	; (800291c <MX_CAN1_Init+0x64>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80028ce:	4b13      	ldr	r3, [pc, #76]	; (800291c <MX_CAN1_Init+0x64>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80028d4:	4b11      	ldr	r3, [pc, #68]	; (800291c <MX_CAN1_Init+0x64>)
 80028d6:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80028da:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80028dc:	4b0f      	ldr	r3, [pc, #60]	; (800291c <MX_CAN1_Init+0x64>)
 80028de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80028e2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80028e4:	4b0d      	ldr	r3, [pc, #52]	; (800291c <MX_CAN1_Init+0x64>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80028ea:	4b0c      	ldr	r3, [pc, #48]	; (800291c <MX_CAN1_Init+0x64>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80028f0:	4b0a      	ldr	r3, [pc, #40]	; (800291c <MX_CAN1_Init+0x64>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <MX_CAN1_Init+0x64>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80028fc:	4b07      	ldr	r3, [pc, #28]	; (800291c <MX_CAN1_Init+0x64>)
 80028fe:	2200      	movs	r2, #0
 8002900:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <MX_CAN1_Init+0x64>)
 8002904:	2200      	movs	r2, #0
 8002906:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002908:	4804      	ldr	r0, [pc, #16]	; (800291c <MX_CAN1_Init+0x64>)
 800290a:	f002 f9dd 	bl	8004cc8 <HAL_CAN_Init>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002914:	f000 ff36 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002918:	bf00      	nop
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000864 	.word	0x20000864
 8002920:	40006400 	.word	0x40006400

08002924 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002928:	4b17      	ldr	r3, [pc, #92]	; (8002988 <MX_CAN2_Init+0x64>)
 800292a:	4a18      	ldr	r2, [pc, #96]	; (800298c <MX_CAN2_Init+0x68>)
 800292c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800292e:	4b16      	ldr	r3, [pc, #88]	; (8002988 <MX_CAN2_Init+0x64>)
 8002930:	2203      	movs	r2, #3
 8002932:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002934:	4b14      	ldr	r3, [pc, #80]	; (8002988 <MX_CAN2_Init+0x64>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <MX_CAN2_Init+0x64>)
 800293c:	2200      	movs	r2, #0
 800293e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <MX_CAN2_Init+0x64>)
 8002942:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8002946:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002948:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <MX_CAN2_Init+0x64>)
 800294a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800294e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002950:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <MX_CAN2_Init+0x64>)
 8002952:	2200      	movs	r2, #0
 8002954:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002956:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <MX_CAN2_Init+0x64>)
 8002958:	2200      	movs	r2, #0
 800295a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <MX_CAN2_Init+0x64>)
 800295e:	2200      	movs	r2, #0
 8002960:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <MX_CAN2_Init+0x64>)
 8002964:	2200      	movs	r2, #0
 8002966:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002968:	4b07      	ldr	r3, [pc, #28]	; (8002988 <MX_CAN2_Init+0x64>)
 800296a:	2200      	movs	r2, #0
 800296c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <MX_CAN2_Init+0x64>)
 8002970:	2200      	movs	r2, #0
 8002972:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002974:	4804      	ldr	r0, [pc, #16]	; (8002988 <MX_CAN2_Init+0x64>)
 8002976:	f002 f9a7 	bl	8004cc8 <HAL_CAN_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002980:	f000 ff00 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}
 8002988:	2000088c 	.word	0x2000088c
 800298c:	40006800 	.word	0x40006800

08002990 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <MX_I2C3_Init+0x50>)
 8002996:	4a13      	ldr	r2, [pc, #76]	; (80029e4 <MX_I2C3_Init+0x54>)
 8002998:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <MX_I2C3_Init+0x50>)
 800299c:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <MX_I2C3_Init+0x58>)
 800299e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <MX_I2C3_Init+0x50>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80029a6:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <MX_I2C3_Init+0x50>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <MX_I2C3_Init+0x50>)
 80029ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029b2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029b4:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <MX_I2C3_Init+0x50>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <MX_I2C3_Init+0x50>)
 80029bc:	2200      	movs	r2, #0
 80029be:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <MX_I2C3_Init+0x50>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <MX_I2C3_Init+0x50>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80029cc:	4804      	ldr	r0, [pc, #16]	; (80029e0 <MX_I2C3_Init+0x50>)
 80029ce:	f003 febf 	bl	8006750 <HAL_I2C_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80029d8:	f000 fed4 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	200008b4 	.word	0x200008b4
 80029e4:	40005c00 	.word	0x40005c00
 80029e8:	00061a80 	.word	0x00061a80

080029ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029f0:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <MX_SPI1_Init+0x64>)
 80029f2:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <MX_SPI1_Init+0x68>)
 80029f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029f6:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <MX_SPI1_Init+0x64>)
 80029f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029fe:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <MX_SPI1_Init+0x64>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <MX_SPI1_Init+0x64>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002a0a:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <MX_SPI1_Init+0x64>)
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002a10:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <MX_SPI1_Init+0x64>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a16:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <MX_SPI1_Init+0x64>)
 8002a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <MX_SPI1_Init+0x64>)
 8002a20:	2238      	movs	r2, #56	; 0x38
 8002a22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <MX_SPI1_Init+0x64>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <MX_SPI1_Init+0x64>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a30:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <MX_SPI1_Init+0x64>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <MX_SPI1_Init+0x64>)
 8002a38:	220a      	movs	r2, #10
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a3c:	4804      	ldr	r0, [pc, #16]	; (8002a50 <MX_SPI1_Init+0x64>)
 8002a3e:	f005 fac6 	bl	8007fce <HAL_SPI_Init>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a48:	f000 fe9c 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000908 	.word	0x20000908
 8002a54:	40013000 	.word	0x40013000

08002a58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b092      	sub	sp, #72	; 0x48
 8002a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
 8002a78:	615a      	str	r2, [r3, #20]
 8002a7a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	2220      	movs	r2, #32
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f00b fc5c 	bl	800e340 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a88:	4b45      	ldr	r3, [pc, #276]	; (8002ba0 <MX_TIM1_Init+0x148>)
 8002a8a:	4a46      	ldr	r2, [pc, #280]	; (8002ba4 <MX_TIM1_Init+0x14c>)
 8002a8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8002a8e:	4b44      	ldr	r3, [pc, #272]	; (8002ba0 <MX_TIM1_Init+0x148>)
 8002a90:	2253      	movs	r2, #83	; 0x53
 8002a92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a94:	4b42      	ldr	r3, [pc, #264]	; (8002ba0 <MX_TIM1_Init+0x148>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8002a9a:	4b41      	ldr	r3, [pc, #260]	; (8002ba0 <MX_TIM1_Init+0x148>)
 8002a9c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002aa0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa2:	4b3f      	ldr	r3, [pc, #252]	; (8002ba0 <MX_TIM1_Init+0x148>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002aa8:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <MX_TIM1_Init+0x148>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aae:	4b3c      	ldr	r3, [pc, #240]	; (8002ba0 <MX_TIM1_Init+0x148>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ab4:	483a      	ldr	r0, [pc, #232]	; (8002ba0 <MX_TIM1_Init+0x148>)
 8002ab6:	f005 fe37 	bl	8008728 <HAL_TIM_PWM_Init>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002ac0:	f000 fe60 	bl	8003784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002acc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4833      	ldr	r0, [pc, #204]	; (8002ba0 <MX_TIM1_Init+0x148>)
 8002ad4:	f006 fc4a 	bl	800936c <HAL_TIMEx_MasterConfigSynchronization>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002ade:	f000 fe51 	bl	8003784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ae2:	2360      	movs	r3, #96	; 0x60
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aea:	2300      	movs	r3, #0
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002aee:	2300      	movs	r3, #0
 8002af0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002afa:	2300      	movs	r3, #0
 8002afc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b02:	2200      	movs	r2, #0
 8002b04:	4619      	mov	r1, r3
 8002b06:	4826      	ldr	r0, [pc, #152]	; (8002ba0 <MX_TIM1_Init+0x148>)
 8002b08:	f005 ff96 	bl	8008a38 <HAL_TIM_PWM_ConfigChannel>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002b12:	f000 fe37 	bl	8003784 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4820      	ldr	r0, [pc, #128]	; (8002ba0 <MX_TIM1_Init+0x148>)
 8002b20:	f005 ff8a 	bl	8008a38 <HAL_TIM_PWM_ConfigChannel>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002b2a:	f000 fe2b 	bl	8003784 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b32:	2208      	movs	r2, #8
 8002b34:	4619      	mov	r1, r3
 8002b36:	481a      	ldr	r0, [pc, #104]	; (8002ba0 <MX_TIM1_Init+0x148>)
 8002b38:	f005 ff7e 	bl	8008a38 <HAL_TIM_PWM_ConfigChannel>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002b42:	f000 fe1f 	bl	8003784 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b4a:	220c      	movs	r2, #12
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4814      	ldr	r0, [pc, #80]	; (8002ba0 <MX_TIM1_Init+0x148>)
 8002b50:	f005 ff72 	bl	8008a38 <HAL_TIM_PWM_ConfigChannel>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8002b5a:	f000 fe13 	bl	8003784 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b76:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4807      	ldr	r0, [pc, #28]	; (8002ba0 <MX_TIM1_Init+0x148>)
 8002b82:	f006 fc6f 	bl	8009464 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8002b8c:	f000 fdfa 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b90:	4803      	ldr	r0, [pc, #12]	; (8002ba0 <MX_TIM1_Init+0x148>)
 8002b92:	f001 fba5 	bl	80042e0 <HAL_TIM_MspPostInit>

}
 8002b96:	bf00      	nop
 8002b98:	3748      	adds	r7, #72	; 0x48
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000960 	.word	0x20000960
 8002ba4:	40010000 	.word	0x40010000

08002ba8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08e      	sub	sp, #56	; 0x38
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
 8002bb8:	609a      	str	r2, [r3, #8]
 8002bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bbc:	f107 0320 	add.w	r3, r7, #32
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]
 8002bd4:	615a      	str	r2, [r3, #20]
 8002bd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002bd8:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <MX_TIM4_Init+0xe8>)
 8002bda:	4a2e      	ldr	r2, [pc, #184]	; (8002c94 <MX_TIM4_Init+0xec>)
 8002bdc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002bde:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <MX_TIM4_Init+0xe8>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be4:	4b2a      	ldr	r3, [pc, #168]	; (8002c90 <MX_TIM4_Init+0xe8>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 8002bea:	4b29      	ldr	r3, [pc, #164]	; (8002c90 <MX_TIM4_Init+0xe8>)
 8002bec:	f245 2207 	movw	r2, #20999	; 0x5207
 8002bf0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bf2:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <MX_TIM4_Init+0xe8>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bf8:	4b25      	ldr	r3, [pc, #148]	; (8002c90 <MX_TIM4_Init+0xe8>)
 8002bfa:	2280      	movs	r2, #128	; 0x80
 8002bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002bfe:	4824      	ldr	r0, [pc, #144]	; (8002c90 <MX_TIM4_Init+0xe8>)
 8002c00:	f005 fcda 	bl	80085b8 <HAL_TIM_Base_Init>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002c0a:	f000 fdbb 	bl	8003784 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c18:	4619      	mov	r1, r3
 8002c1a:	481d      	ldr	r0, [pc, #116]	; (8002c90 <MX_TIM4_Init+0xe8>)
 8002c1c:	f005 ffce 	bl	8008bbc <HAL_TIM_ConfigClockSource>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002c26:	f000 fdad 	bl	8003784 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002c2a:	4819      	ldr	r0, [pc, #100]	; (8002c90 <MX_TIM4_Init+0xe8>)
 8002c2c:	f005 fd7c 	bl	8008728 <HAL_TIM_PWM_Init>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002c36:	f000 fda5 	bl	8003784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c42:	f107 0320 	add.w	r3, r7, #32
 8002c46:	4619      	mov	r1, r3
 8002c48:	4811      	ldr	r0, [pc, #68]	; (8002c90 <MX_TIM4_Init+0xe8>)
 8002c4a:	f006 fb8f 	bl	800936c <HAL_TIMEx_MasterConfigSynchronization>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002c54:	f000 fd96 	bl	8003784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c58:	2360      	movs	r3, #96	; 0x60
 8002c5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8002c5c:	f642 1303 	movw	r3, #10499	; 0x2903
 8002c60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4807      	ldr	r0, [pc, #28]	; (8002c90 <MX_TIM4_Init+0xe8>)
 8002c72:	f005 fee1 	bl	8008a38 <HAL_TIM_PWM_ConfigChannel>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002c7c:	f000 fd82 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002c80:	4803      	ldr	r0, [pc, #12]	; (8002c90 <MX_TIM4_Init+0xe8>)
 8002c82:	f001 fb2d 	bl	80042e0 <HAL_TIM_MspPostInit>

}
 8002c86:	bf00      	nop
 8002c88:	3738      	adds	r7, #56	; 0x38
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200009a8 	.word	0x200009a8
 8002c94:	40000800 	.word	0x40000800

08002c98 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b092      	sub	sp, #72	; 0x48
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
 8002cb8:	615a      	str	r2, [r3, #20]
 8002cba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002cbc:	1d3b      	adds	r3, r7, #4
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f00b fb3c 	bl	800e340 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002cc8:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <MX_TIM8_Init+0x130>)
 8002cca:	4a40      	ldr	r2, [pc, #256]	; (8002dcc <MX_TIM8_Init+0x134>)
 8002ccc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8002cce:	4b3e      	ldr	r3, [pc, #248]	; (8002dc8 <MX_TIM8_Init+0x130>)
 8002cd0:	2253      	movs	r2, #83	; 0x53
 8002cd2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd4:	4b3c      	ldr	r3, [pc, #240]	; (8002dc8 <MX_TIM8_Init+0x130>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8002cda:	4b3b      	ldr	r3, [pc, #236]	; (8002dc8 <MX_TIM8_Init+0x130>)
 8002cdc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002ce0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce2:	4b39      	ldr	r3, [pc, #228]	; (8002dc8 <MX_TIM8_Init+0x130>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ce8:	4b37      	ldr	r3, [pc, #220]	; (8002dc8 <MX_TIM8_Init+0x130>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cee:	4b36      	ldr	r3, [pc, #216]	; (8002dc8 <MX_TIM8_Init+0x130>)
 8002cf0:	2280      	movs	r2, #128	; 0x80
 8002cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002cf4:	4834      	ldr	r0, [pc, #208]	; (8002dc8 <MX_TIM8_Init+0x130>)
 8002cf6:	f005 fd17 	bl	8008728 <HAL_TIM_PWM_Init>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002d00:	f000 fd40 	bl	8003784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d04:	2300      	movs	r3, #0
 8002d06:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002d0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d10:	4619      	mov	r1, r3
 8002d12:	482d      	ldr	r0, [pc, #180]	; (8002dc8 <MX_TIM8_Init+0x130>)
 8002d14:	f006 fb2a 	bl	800936c <HAL_TIMEx_MasterConfigSynchronization>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002d1e:	f000 fd31 	bl	8003784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d22:	2360      	movs	r3, #96	; 0x60
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d36:	2300      	movs	r3, #0
 8002d38:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d42:	2200      	movs	r2, #0
 8002d44:	4619      	mov	r1, r3
 8002d46:	4820      	ldr	r0, [pc, #128]	; (8002dc8 <MX_TIM8_Init+0x130>)
 8002d48:	f005 fe76 	bl	8008a38 <HAL_TIM_PWM_ConfigChannel>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002d52:	f000 fd17 	bl	8003784 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d5a:	2204      	movs	r2, #4
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	481a      	ldr	r0, [pc, #104]	; (8002dc8 <MX_TIM8_Init+0x130>)
 8002d60:	f005 fe6a 	bl	8008a38 <HAL_TIM_PWM_ConfigChannel>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002d6a:	f000 fd0b 	bl	8003784 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d72:	2208      	movs	r2, #8
 8002d74:	4619      	mov	r1, r3
 8002d76:	4814      	ldr	r0, [pc, #80]	; (8002dc8 <MX_TIM8_Init+0x130>)
 8002d78:	f005 fe5e 	bl	8008a38 <HAL_TIM_PWM_ConfigChannel>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002d82:	f000 fcff 	bl	8003784 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002da0:	2300      	movs	r3, #0
 8002da2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002da4:	1d3b      	adds	r3, r7, #4
 8002da6:	4619      	mov	r1, r3
 8002da8:	4807      	ldr	r0, [pc, #28]	; (8002dc8 <MX_TIM8_Init+0x130>)
 8002daa:	f006 fb5b 	bl	8009464 <HAL_TIMEx_ConfigBreakDeadTime>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8002db4:	f000 fce6 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002db8:	4803      	ldr	r0, [pc, #12]	; (8002dc8 <MX_TIM8_Init+0x130>)
 8002dba:	f001 fa91 	bl	80042e0 <HAL_TIM_MspPostInit>

}
 8002dbe:	bf00      	nop
 8002dc0:	3748      	adds	r7, #72	; 0x48
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	200009f0 	.word	0x200009f0
 8002dcc:	40010400 	.word	0x40010400

08002dd0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]
 8002de4:	615a      	str	r2, [r3, #20]
 8002de6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002de8:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <MX_TIM10_Init+0x94>)
 8002dea:	4a1f      	ldr	r2, [pc, #124]	; (8002e68 <MX_TIM10_Init+0x98>)
 8002dec:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002dee:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <MX_TIM10_Init+0x94>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <MX_TIM10_Init+0x94>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8002dfa:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <MX_TIM10_Init+0x94>)
 8002dfc:	f241 3287 	movw	r2, #4999	; 0x1387
 8002e00:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e02:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <MX_TIM10_Init+0x94>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e08:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <MX_TIM10_Init+0x94>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002e0e:	4815      	ldr	r0, [pc, #84]	; (8002e64 <MX_TIM10_Init+0x94>)
 8002e10:	f005 fbd2 	bl	80085b8 <HAL_TIM_Base_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002e1a:	f000 fcb3 	bl	8003784 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002e1e:	4811      	ldr	r0, [pc, #68]	; (8002e64 <MX_TIM10_Init+0x94>)
 8002e20:	f005 fc82 	bl	8008728 <HAL_TIM_PWM_Init>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002e2a:	f000 fcab 	bl	8003784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e2e:	2360      	movs	r3, #96	; 0x60
 8002e30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e3e:	1d3b      	adds	r3, r7, #4
 8002e40:	2200      	movs	r2, #0
 8002e42:	4619      	mov	r1, r3
 8002e44:	4807      	ldr	r0, [pc, #28]	; (8002e64 <MX_TIM10_Init+0x94>)
 8002e46:	f005 fdf7 	bl	8008a38 <HAL_TIM_PWM_ConfigChannel>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002e50:	f000 fc98 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002e54:	4803      	ldr	r0, [pc, #12]	; (8002e64 <MX_TIM10_Init+0x94>)
 8002e56:	f001 fa43 	bl	80042e0 <HAL_TIM_MspPostInit>

}
 8002e5a:	bf00      	nop
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000a38 	.word	0x20000a38
 8002e68:	40014400 	.word	0x40014400

08002e6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <MX_USART1_UART_Init+0x4c>)
 8002e72:	4a12      	ldr	r2, [pc, #72]	; (8002ebc <MX_USART1_UART_Init+0x50>)
 8002e74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <MX_USART1_UART_Init+0x4c>)
 8002e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <MX_USART1_UART_Init+0x4c>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <MX_USART1_UART_Init+0x4c>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e8a:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <MX_USART1_UART_Init+0x4c>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <MX_USART1_UART_Init+0x4c>)
 8002e92:	220c      	movs	r2, #12
 8002e94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e96:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <MX_USART1_UART_Init+0x4c>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <MX_USART1_UART_Init+0x4c>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ea2:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <MX_USART1_UART_Init+0x4c>)
 8002ea4:	f006 fb30 	bl	8009508 <HAL_UART_Init>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002eae:	f000 fc69 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000a80 	.word	0x20000a80
 8002ebc:	40011000 	.word	0x40011000

08002ec0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ec6:	4a12      	ldr	r2, [pc, #72]	; (8002f10 <MX_USART3_UART_Init+0x50>)
 8002ec8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8002eca:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ecc:	4a11      	ldr	r2, [pc, #68]	; (8002f14 <MX_USART3_UART_Init+0x54>)
 8002ece:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ed0:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ede:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ee2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ee6:	220c      	movs	r2, #12
 8002ee8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eea:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ef6:	4805      	ldr	r0, [pc, #20]	; (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ef8:	f006 fb06 	bl	8009508 <HAL_UART_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f02:	f000 fc3f 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000ac4 	.word	0x20000ac4
 8002f10:	40004800 	.word	0x40004800
 8002f14:	000186a0 	.word	0x000186a0

08002f18 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002f1c:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <MX_USART6_UART_Init+0x4c>)
 8002f1e:	4a12      	ldr	r2, [pc, #72]	; (8002f68 <MX_USART6_UART_Init+0x50>)
 8002f20:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <MX_USART6_UART_Init+0x4c>)
 8002f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f28:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <MX_USART6_UART_Init+0x4c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <MX_USART6_UART_Init+0x4c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002f36:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <MX_USART6_UART_Init+0x4c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <MX_USART6_UART_Init+0x4c>)
 8002f3e:	220c      	movs	r2, #12
 8002f40:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <MX_USART6_UART_Init+0x4c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <MX_USART6_UART_Init+0x4c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002f4e:	4805      	ldr	r0, [pc, #20]	; (8002f64 <MX_USART6_UART_Init+0x4c>)
 8002f50:	f006 fada 	bl	8009508 <HAL_UART_Init>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002f5a:	f000 fc13 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000b08 	.word	0x20000b08
 8002f68:	40011400 	.word	0x40011400

08002f6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	4b23      	ldr	r3, [pc, #140]	; (8003004 <MX_DMA_Init+0x98>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	4a22      	ldr	r2, [pc, #136]	; (8003004 <MX_DMA_Init+0x98>)
 8002f7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f80:	6313      	str	r3, [r2, #48]	; 0x30
 8002f82:	4b20      	ldr	r3, [pc, #128]	; (8003004 <MX_DMA_Init+0x98>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f8a:	607b      	str	r3, [r7, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	603b      	str	r3, [r7, #0]
 8002f92:	4b1c      	ldr	r3, [pc, #112]	; (8003004 <MX_DMA_Init+0x98>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <MX_DMA_Init+0x98>)
 8002f98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <MX_DMA_Init+0x98>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002faa:	2200      	movs	r2, #0
 8002fac:	2105      	movs	r1, #5
 8002fae:	200c      	movs	r0, #12
 8002fb0:	f002 fdc7 	bl	8005b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002fb4:	200c      	movs	r0, #12
 8002fb6:	f002 fde0 	bl	8005b7a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2105      	movs	r1, #5
 8002fbe:	2039      	movs	r0, #57	; 0x39
 8002fc0:	f002 fdbf 	bl	8005b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002fc4:	2039      	movs	r0, #57	; 0x39
 8002fc6:	f002 fdd8 	bl	8005b7a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2105      	movs	r1, #5
 8002fce:	203a      	movs	r0, #58	; 0x3a
 8002fd0:	f002 fdb7 	bl	8005b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002fd4:	203a      	movs	r0, #58	; 0x3a
 8002fd6:	f002 fdd0 	bl	8005b7a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2105      	movs	r1, #5
 8002fde:	2045      	movs	r0, #69	; 0x45
 8002fe0:	f002 fdaf 	bl	8005b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002fe4:	2045      	movs	r0, #69	; 0x45
 8002fe6:	f002 fdc8 	bl	8005b7a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002fea:	2200      	movs	r2, #0
 8002fec:	2105      	movs	r1, #5
 8002fee:	2046      	movs	r0, #70	; 0x46
 8002ff0:	f002 fda7 	bl	8005b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002ff4:	2046      	movs	r0, #70	; 0x46
 8002ff6:	f002 fdc0 	bl	8005b7a <HAL_NVIC_EnableIRQ>

}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40023800 	.word	0x40023800

08003008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08e      	sub	sp, #56	; 0x38
 800300c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	605a      	str	r2, [r3, #4]
 8003018:	609a      	str	r2, [r3, #8]
 800301a:	60da      	str	r2, [r3, #12]
 800301c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	623b      	str	r3, [r7, #32]
 8003022:	4b7c      	ldr	r3, [pc, #496]	; (8003214 <MX_GPIO_Init+0x20c>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	4a7b      	ldr	r2, [pc, #492]	; (8003214 <MX_GPIO_Init+0x20c>)
 8003028:	f043 0302 	orr.w	r3, r3, #2
 800302c:	6313      	str	r3, [r2, #48]	; 0x30
 800302e:	4b79      	ldr	r3, [pc, #484]	; (8003214 <MX_GPIO_Init+0x20c>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	623b      	str	r3, [r7, #32]
 8003038:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
 800303e:	4b75      	ldr	r3, [pc, #468]	; (8003214 <MX_GPIO_Init+0x20c>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a74      	ldr	r2, [pc, #464]	; (8003214 <MX_GPIO_Init+0x20c>)
 8003044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	4b72      	ldr	r3, [pc, #456]	; (8003214 <MX_GPIO_Init+0x20c>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	61bb      	str	r3, [r7, #24]
 800305a:	4b6e      	ldr	r3, [pc, #440]	; (8003214 <MX_GPIO_Init+0x20c>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4a6d      	ldr	r2, [pc, #436]	; (8003214 <MX_GPIO_Init+0x20c>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6313      	str	r3, [r2, #48]	; 0x30
 8003066:	4b6b      	ldr	r3, [pc, #428]	; (8003214 <MX_GPIO_Init+0x20c>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	61bb      	str	r3, [r7, #24]
 8003070:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	4b67      	ldr	r3, [pc, #412]	; (8003214 <MX_GPIO_Init+0x20c>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	4a66      	ldr	r2, [pc, #408]	; (8003214 <MX_GPIO_Init+0x20c>)
 800307c:	f043 0308 	orr.w	r3, r3, #8
 8003080:	6313      	str	r3, [r2, #48]	; 0x30
 8003082:	4b64      	ldr	r3, [pc, #400]	; (8003214 <MX_GPIO_Init+0x20c>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	4b60      	ldr	r3, [pc, #384]	; (8003214 <MX_GPIO_Init+0x20c>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	4a5f      	ldr	r2, [pc, #380]	; (8003214 <MX_GPIO_Init+0x20c>)
 8003098:	f043 0304 	orr.w	r3, r3, #4
 800309c:	6313      	str	r3, [r2, #48]	; 0x30
 800309e:	4b5d      	ldr	r3, [pc, #372]	; (8003214 <MX_GPIO_Init+0x20c>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	4b59      	ldr	r3, [pc, #356]	; (8003214 <MX_GPIO_Init+0x20c>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	4a58      	ldr	r2, [pc, #352]	; (8003214 <MX_GPIO_Init+0x20c>)
 80030b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ba:	4b56      	ldr	r3, [pc, #344]	; (8003214 <MX_GPIO_Init+0x20c>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	4b52      	ldr	r3, [pc, #328]	; (8003214 <MX_GPIO_Init+0x20c>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	4a51      	ldr	r2, [pc, #324]	; (8003214 <MX_GPIO_Init+0x20c>)
 80030d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d4:	6313      	str	r3, [r2, #48]	; 0x30
 80030d6:	4b4f      	ldr	r3, [pc, #316]	; (8003214 <MX_GPIO_Init+0x20c>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	4b4b      	ldr	r3, [pc, #300]	; (8003214 <MX_GPIO_Init+0x20c>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	4a4a      	ldr	r2, [pc, #296]	; (8003214 <MX_GPIO_Init+0x20c>)
 80030ec:	f043 0320 	orr.w	r3, r3, #32
 80030f0:	6313      	str	r3, [r2, #48]	; 0x30
 80030f2:	4b48      	ldr	r3, [pc, #288]	; (8003214 <MX_GPIO_Init+0x20c>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	607b      	str	r3, [r7, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	603b      	str	r3, [r7, #0]
 8003102:	4b44      	ldr	r3, [pc, #272]	; (8003214 <MX_GPIO_Init+0x20c>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	4a43      	ldr	r2, [pc, #268]	; (8003214 <MX_GPIO_Init+0x20c>)
 8003108:	f043 0310 	orr.w	r3, r3, #16
 800310c:	6313      	str	r3, [r2, #48]	; 0x30
 800310e:	4b41      	ldr	r3, [pc, #260]	; (8003214 <MX_GPIO_Init+0x20c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800311a:	2200      	movs	r2, #0
 800311c:	2140      	movs	r1, #64	; 0x40
 800311e:	483e      	ldr	r0, [pc, #248]	; (8003218 <MX_GPIO_Init+0x210>)
 8003120:	f003 fae4 	bl	80066ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10, GPIO_PIN_RESET);
 8003124:	2200      	movs	r2, #0
 8003126:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800312a:	483c      	ldr	r0, [pc, #240]	; (800321c <MX_GPIO_Init+0x214>)
 800312c:	f003 fade 	bl	80066ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003130:	2200      	movs	r2, #0
 8003132:	2110      	movs	r1, #16
 8003134:	483a      	ldr	r0, [pc, #232]	; (8003220 <MX_GPIO_Init+0x218>)
 8003136:	f003 fad9 	bl	80066ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800313a:	2200      	movs	r2, #0
 800313c:	2101      	movs	r1, #1
 800313e:	4839      	ldr	r0, [pc, #228]	; (8003224 <MX_GPIO_Init+0x21c>)
 8003140:	f003 fad4 	bl	80066ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003144:	2340      	movs	r3, #64	; 0x40
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003148:	2301      	movs	r3, #1
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	2300      	movs	r3, #0
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003150:	2300      	movs	r3, #0
 8003152:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003158:	4619      	mov	r1, r3
 800315a:	482f      	ldr	r0, [pc, #188]	; (8003218 <MX_GPIO_Init+0x210>)
 800315c:	f003 f92a 	bl	80063b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH12 PH11 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8003160:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003166:	2301      	movs	r3, #1
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316a:	2300      	movs	r3, #0
 800316c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316e:	2300      	movs	r3, #0
 8003170:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003176:	4619      	mov	r1, r3
 8003178:	4828      	ldr	r0, [pc, #160]	; (800321c <MX_GPIO_Init+0x214>)
 800317a:	f003 f91b 	bl	80063b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800317e:	2308      	movs	r3, #8
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003182:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003186:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003188:	2300      	movs	r3, #0
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800318c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003190:	4619      	mov	r1, r3
 8003192:	4821      	ldr	r0, [pc, #132]	; (8003218 <MX_GPIO_Init+0x210>)
 8003194:	f003 f90e 	bl	80063b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003198:	2310      	movs	r3, #16
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800319c:	2301      	movs	r3, #1
 800319e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a4:	2300      	movs	r3, #0
 80031a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ac:	4619      	mov	r1, r3
 80031ae:	481c      	ldr	r0, [pc, #112]	; (8003220 <MX_GPIO_Init+0x218>)
 80031b0:	f003 f900 	bl	80063b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 80031b4:	2330      	movs	r3, #48	; 0x30
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80031bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031c6:	4619      	mov	r1, r3
 80031c8:	4817      	ldr	r0, [pc, #92]	; (8003228 <MX_GPIO_Init+0x220>)
 80031ca:	f003 f8f3 	bl	80063b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031ce:	2301      	movs	r3, #1
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031d2:	2301      	movs	r3, #1
 80031d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031da:	2300      	movs	r3, #0
 80031dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031e2:	4619      	mov	r1, r3
 80031e4:	480f      	ldr	r0, [pc, #60]	; (8003224 <MX_GPIO_Init+0x21c>)
 80031e6:	f003 f8e5 	bl	80063b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2105      	movs	r1, #5
 80031ee:	2009      	movs	r0, #9
 80031f0:	f002 fca7 	bl	8005b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80031f4:	2009      	movs	r0, #9
 80031f6:	f002 fcc0 	bl	8005b7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2105      	movs	r1, #5
 80031fe:	200a      	movs	r0, #10
 8003200:	f002 fc9f 	bl	8005b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003204:	200a      	movs	r0, #10
 8003206:	f002 fcb8 	bl	8005b7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800320a:	bf00      	nop
 800320c:	3738      	adds	r7, #56	; 0x38
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	40021800 	.word	0x40021800
 800321c:	40021c00 	.word	0x40021c00
 8003220:	40020000 	.word	0x40020000
 8003224:	40020400 	.word	0x40020400
 8003228:	40020800 	.word	0x40020800

0800322c <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
 8003234:	2201      	movs	r2, #1
 8003236:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800323a:	4824      	ldr	r0, [pc, #144]	; (80032cc <TaskMain+0xa0>)
 800323c:	f003 fa56 	bl	80066ec <HAL_GPIO_WritePin>
	__HAL_TIM_PRESCALER(&htim4, 2);
 8003240:	4b23      	ldr	r3, [pc, #140]	; (80032d0 <TaskMain+0xa4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2202      	movs	r2, #2
 8003246:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003248:	2108      	movs	r1, #8
 800324a:	4821      	ldr	r0, [pc, #132]	; (80032d0 <TaskMain+0xa4>)
 800324c:	f005 fabc 	bl	80087c8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim4);
 8003250:	481f      	ldr	r0, [pc, #124]	; (80032d0 <TaskMain+0xa4>)
 8003252:	f005 fa01 	bl	8008658 <HAL_TIM_Base_Start>
	if (BMI088_accel_init()) {
 8003256:	f7fd fed3 	bl	8001000 <BMI088_accel_init>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <TaskMain+0x3a>
		usart_printf("WARNING - BMI088 accelerometer init failed \r\n");
 8003260:	481c      	ldr	r0, [pc, #112]	; (80032d4 <TaskMain+0xa8>)
 8003262:	f7fe fee1 	bl	8002028 <usart_printf>
	}
	if (BMI088_gyro_init()) {
 8003266:	f7fd ff83 	bl	8001170 <BMI088_gyro_init>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <TaskMain+0x4a>
		usart_printf("WARNING - BMI088 gyroscope init failed \r\n");
 8003270:	4819      	ldr	r0, [pc, #100]	; (80032d8 <TaskMain+0xac>)
 8003272:	f7fe fed9 	bl	8002028 <usart_printf>
	}
	if (ist8310_init()) {
 8003276:	f7ff f8b1 	bl	80023dc <ist8310_init>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <TaskMain+0x5a>
		usart_printf("WARNING - IST8310 compass init failed \r\n");
 8003280:	4816      	ldr	r0, [pc, #88]	; (80032dc <TaskMain+0xb0>)
 8003282:	f7fe fed1 	bl	8002028 <usart_printf>
	}
	osDelay(150);
 8003286:	2096      	movs	r0, #150	; 0x96
 8003288:	f007 fc68 	bl	800ab5c <osDelay>
	__HAL_TIM_PRESCALER(&htim4, 0);
 800328c:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <TaskMain+0xa4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2200      	movs	r2, #0
 8003292:	629a      	str	r2, [r3, #40]	; 0x28
	osDelay(150);
 8003294:	2096      	movs	r0, #150	; 0x96
 8003296:	f007 fc61 	bl	800ab5c <osDelay>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 800329a:	2108      	movs	r1, #8
 800329c:	480c      	ldr	r0, [pc, #48]	; (80032d0 <TaskMain+0xa4>)
 800329e:	f005 fb5b 	bl	8008958 <HAL_TIM_PWM_Stop>

	for(;;) {
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 0);
 80032a2:	2200      	movs	r2, #0
 80032a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032a8:	4808      	ldr	r0, [pc, #32]	; (80032cc <TaskMain+0xa0>)
 80032aa:	f003 fa1f 	bl	80066ec <HAL_GPIO_WritePin>
		//set_motor_voltage(5, 4000);
		osDelay(500);
 80032ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032b2:	f007 fc53 	bl	800ab5c <osDelay>
		//sendB2bData(CAN_b2b_A_ID, 1, 1, 1, 1);
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
 80032b6:	2201      	movs	r2, #1
 80032b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032bc:	4803      	ldr	r0, [pc, #12]	; (80032cc <TaskMain+0xa0>)
 80032be:	f003 fa15 	bl	80066ec <HAL_GPIO_WritePin>
		//set_motor_voltage(5, -4000);
		osDelay(500);
 80032c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032c6:	f007 fc49 	bl	800ab5c <osDelay>
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 0);
 80032ca:	e7ea      	b.n	80032a2 <TaskMain+0x76>
 80032cc:	40021c00 	.word	0x40021c00
 80032d0:	200009a8 	.word	0x200009a8
 80032d4:	08010634 	.word	0x08010634
 80032d8:	08010664 	.word	0x08010664
 80032dc:	08010690 	.word	0x08010690

080032e0 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08a      	sub	sp, #40	; 0x28
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskChassis */
    int16_t rcRPM[4] = {0,0,0,0};                              // maps rc percentage reading to motors, assuming we're running M3508s at max 469RPM
 80032e8:	f107 0308 	add.w	r3, r7, #8
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	605a      	str	r2, [r3, #4]
    int16_t rcPitch = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	82fb      	strh	r3, [r7, #22]
    float calcChassisPower = 0;                                 // range: 3376 ~ 2132
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	613b      	str	r3, [r7, #16]
    int8_t jammed = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	77fb      	strb	r3, [r7, #31]
    int8_t indexerStopped = 1;
 8003300:	2301      	movs	r3, #1
 8003302:	77bb      	strb	r3, [r7, #30]
    int8_t indexerTargetReached = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	777b      	strb	r3, [r7, #29]
    //int16_t targetRPM[4] = {0,0,0,0};
  /* Infinite loop */
    for(;;) {
	    for (int i = 0; i < 4; i++) {
 8003308:	2300      	movs	r3, #0
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	e01b      	b.n	8003346 <TaskChassis+0x66>
	        rcRPM[i] = getRCchannel(i) * 13.645f;              // 13.645 = 469 / 187 / 660 * 3591, 660 = max reading in one direction
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	b25b      	sxtb	r3, r3
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fd9e 	bl	8003e54 <getRCchannel>
 8003318:	4603      	mov	r3, r0
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003322:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8003620 <TaskChassis+0x340>
 8003326:	ee67 7a87 	vmul.f32	s15, s15, s14
 800332a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800332e:	ee17 3a90 	vmov	r3, s15
 8003332:	b21a      	sxth	r2, r3
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	3320      	adds	r3, #32
 800333a:	443b      	add	r3, r7
 800333c:	f823 2c18 	strh.w	r2, [r3, #-24]
	    for (int i = 0; i < 4; i++) {
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	3301      	adds	r3, #1
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	2b03      	cmp	r3, #3
 800334a:	dde0      	ble.n	800330e <TaskChassis+0x2e>
	    }
	    rcPitch = getRCchannel(1) * 0.94f + 2754;
 800334c:	2001      	movs	r0, #1
 800334e:	f000 fd81 	bl	8003e54 <getRCchannel>
 8003352:	4603      	mov	r3, r0
 8003354:	ee07 3a90 	vmov	s15, r3
 8003358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800335c:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8003624 <TaskChassis+0x344>
 8003360:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003364:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8003628 <TaskChassis+0x348>
 8003368:	ee77 7a87 	vadd.f32	s15, s15, s14
 800336c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003370:	ee17 3a90 	vmov	r3, s15
 8003374:	82fb      	strh	r3, [r7, #22]

	    chassisTargetRPM.motorRPM[0] = rcRPM[3] + rcRPM[0] + rcRPM[2];
 8003376:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800337a:	b29a      	uxth	r2, r3
 800337c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003380:	b29b      	uxth	r3, r3
 8003382:	4413      	add	r3, r2
 8003384:	b29a      	uxth	r2, r3
 8003386:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800338a:	b29b      	uxth	r3, r3
 800338c:	4413      	add	r3, r2
 800338e:	b29b      	uxth	r3, r3
 8003390:	b21a      	sxth	r2, r3
 8003392:	4ba6      	ldr	r3, [pc, #664]	; (800362c <TaskChassis+0x34c>)
 8003394:	801a      	strh	r2, [r3, #0]
	    chassisTargetRPM.motorRPM[1] = rcRPM[3] + rcRPM[0] - rcRPM[2];
 8003396:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800339a:	b29a      	uxth	r2, r3
 800339c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	b21a      	sxth	r2, r3
 80033b2:	4b9e      	ldr	r3, [pc, #632]	; (800362c <TaskChassis+0x34c>)
 80033b4:	805a      	strh	r2, [r3, #2]
	    chassisTargetRPM.motorRPM[2] = -rcRPM[3] + rcRPM[0] - rcRPM[2];
 80033b6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	b21a      	sxth	r2, r3
 80033d2:	4b96      	ldr	r3, [pc, #600]	; (800362c <TaskChassis+0x34c>)
 80033d4:	809a      	strh	r2, [r3, #4]
	    chassisTargetRPM.motorRPM[3] = -rcRPM[3] + rcRPM[0] + rcRPM[2];
 80033d6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80033da:	b29a      	uxth	r2, r3
 80033dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	4413      	add	r3, r2
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	b21a      	sxth	r2, r3
 80033f2:	4b8e      	ldr	r3, [pc, #568]	; (800362c <TaskChassis+0x34c>)
 80033f4:	80da      	strh	r2, [r3, #6]
	    //gyroReading[0] = IMU_get_gyro(x);
	    //gyroReading[1] = IMU_get_gyro(y);
	    //gyroReading[2] = IMU_get_gyro(z);
	    //usart_printf("%f %f %f %f \r\n", getMagnetometerData(x), getMagnetometerData(y), getMagnetometerData(z), IMU_get_temp());
	    //usart_printf("%d \r\n", targetMotorRPM.motorRPM[0]);
	    calcChassisPower = power_heat_data.chassis_voltage * power_heat_data.chassis_current / 1000000;
 80033f6:	4b8e      	ldr	r3, [pc, #568]	; (8003630 <TaskChassis+0x350>)
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	4b8c      	ldr	r3, [pc, #560]	; (8003630 <TaskChassis+0x350>)
 80033fe:	885b      	ldrh	r3, [r3, #2]
 8003400:	fb02 f303 	mul.w	r3, r2, r3
 8003404:	4a8b      	ldr	r2, [pc, #556]	; (8003634 <TaskChassis+0x354>)
 8003406:	fb82 1203 	smull	r1, r2, r2, r3
 800340a:	1492      	asrs	r2, r2, #18
 800340c:	17db      	asrs	r3, r3, #31
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003418:	edc7 7a04 	vstr	s15, [r7, #16]
	    //if (calcChassisPower >= 30) {
	    //chassisTargetCurrent = applyPowerlimit(chassis, chassisTargetRPM, calcChassisPower);

	    //CAN1_cmd_b2b(CAN_b2b_A_ID, 1, 1, 1, 1);

	    if (boardID == CAN_b2b_A_ID) {
 800341c:	4b86      	ldr	r3, [pc, #536]	; (8003638 <TaskChassis+0x358>)
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	f240 1201 	movw	r2, #257	; 0x101
 8003424:	4293      	cmp	r3, r2
 8003426:	d164      	bne.n	80034f2 <TaskChassis+0x212>
	    	setM3508RPM(1, chassisTargetRPM.motorRPM[0], chassisPreset);
 8003428:	4b80      	ldr	r3, [pc, #512]	; (800362c <TaskChassis+0x34c>)
 800342a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800342e:	4b83      	ldr	r3, [pc, #524]	; (800363c <TaskChassis+0x35c>)
 8003430:	edd3 6a00 	vldr	s13, [r3]
 8003434:	ed93 7a01 	vldr	s14, [r3, #4]
 8003438:	edd3 7a02 	vldr	s15, [r3, #8]
 800343c:	eeb0 0a66 	vmov.f32	s0, s13
 8003440:	eef0 0a47 	vmov.f32	s1, s14
 8003444:	eeb0 1a67 	vmov.f32	s2, s15
 8003448:	4611      	mov	r1, r2
 800344a:	2001      	movs	r0, #1
 800344c:	f7fe fcfe 	bl	8001e4c <setM3508RPM>
	    	setM3508RPM(2, chassisTargetRPM.motorRPM[1], chassisPreset);
 8003450:	4b76      	ldr	r3, [pc, #472]	; (800362c <TaskChassis+0x34c>)
 8003452:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003456:	4b79      	ldr	r3, [pc, #484]	; (800363c <TaskChassis+0x35c>)
 8003458:	edd3 6a00 	vldr	s13, [r3]
 800345c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003460:	edd3 7a02 	vldr	s15, [r3, #8]
 8003464:	eeb0 0a66 	vmov.f32	s0, s13
 8003468:	eef0 0a47 	vmov.f32	s1, s14
 800346c:	eeb0 1a67 	vmov.f32	s2, s15
 8003470:	4611      	mov	r1, r2
 8003472:	2002      	movs	r0, #2
 8003474:	f7fe fcea 	bl	8001e4c <setM3508RPM>
	    	setM3508RPM(3, chassisTargetRPM.motorRPM[2], chassisPreset);
 8003478:	4b6c      	ldr	r3, [pc, #432]	; (800362c <TaskChassis+0x34c>)
 800347a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800347e:	4b6f      	ldr	r3, [pc, #444]	; (800363c <TaskChassis+0x35c>)
 8003480:	edd3 6a00 	vldr	s13, [r3]
 8003484:	ed93 7a01 	vldr	s14, [r3, #4]
 8003488:	edd3 7a02 	vldr	s15, [r3, #8]
 800348c:	eeb0 0a66 	vmov.f32	s0, s13
 8003490:	eef0 0a47 	vmov.f32	s1, s14
 8003494:	eeb0 1a67 	vmov.f32	s2, s15
 8003498:	4611      	mov	r1, r2
 800349a:	2003      	movs	r0, #3
 800349c:	f7fe fcd6 	bl	8001e4c <setM3508RPM>
	    	setM3508RPM(4, chassisTargetRPM.motorRPM[3], chassisPreset);
 80034a0:	4b62      	ldr	r3, [pc, #392]	; (800362c <TaskChassis+0x34c>)
 80034a2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80034a6:	4b65      	ldr	r3, [pc, #404]	; (800363c <TaskChassis+0x35c>)
 80034a8:	edd3 6a00 	vldr	s13, [r3]
 80034ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80034b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80034b4:	eeb0 0a66 	vmov.f32	s0, s13
 80034b8:	eef0 0a47 	vmov.f32	s1, s14
 80034bc:	eeb0 1a67 	vmov.f32	s2, s15
 80034c0:	4611      	mov	r1, r2
 80034c2:	2004      	movs	r0, #4
 80034c4:	f7fe fcc2 	bl	8001e4c <setM3508RPM>
	    	usart_printf("%d \r\n", b2bGyro.gyro_x);
 80034c8:	4b5d      	ldr	r3, [pc, #372]	; (8003640 <TaskChassis+0x360>)
 80034ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034ce:	4619      	mov	r1, r3
 80034d0:	485c      	ldr	r0, [pc, #368]	; (8003644 <TaskChassis+0x364>)
 80034d2:	f7fe fda9 	bl	8002028 <usart_printf>
	    	sendB2bData(CAN_b2b_A_motorCtrl_ID, rcPitch, getRCswitch(1), 0, 0);
 80034d6:	2001      	movs	r0, #1
 80034d8:	f000 fcd0 	bl	8003e7c <getRCswitch>
 80034dc:	4603      	mov	r3, r0
 80034de:	b21a      	sxth	r2, r3
 80034e0:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80034e4:	2300      	movs	r3, #0
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	2300      	movs	r3, #0
 80034ea:	f44f 7081 	mov.w	r0, #258	; 0x102
 80034ee:	f7fe fd63 	bl	8001fb8 <sendB2bData>
	    	//usart_printf("%d %d\r\n", b2bGyro.gyro_x, b2bGyro.gyro_y);
	    }

	    if (boardID == CAN_b2b_B_ID) {
 80034f2:	4b51      	ldr	r3, [pc, #324]	; (8003638 <TaskChassis+0x358>)
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	f240 1211 	movw	r2, #273	; 0x111
 80034fa:	4293      	cmp	r3, r2
 80034fc:	f040 812e 	bne.w	800375c <TaskChassis+0x47c>
	    	setGM6020voltagePosition(9, b2bMotorCtrl.motor1_Ctrl, yawPresetVoltagePosition);
 8003500:	4b51      	ldr	r3, [pc, #324]	; (8003648 <TaskChassis+0x368>)
 8003502:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003506:	4b51      	ldr	r3, [pc, #324]	; (800364c <TaskChassis+0x36c>)
 8003508:	edd3 6a00 	vldr	s13, [r3]
 800350c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003510:	edd3 7a02 	vldr	s15, [r3, #8]
 8003514:	eeb0 0a66 	vmov.f32	s0, s13
 8003518:	eef0 0a47 	vmov.f32	s1, s14
 800351c:	eeb0 1a67 	vmov.f32	s2, s15
 8003520:	4611      	mov	r1, r2
 8003522:	2009      	movs	r0, #9
 8003524:	f7fe fcc6 	bl	8001eb4 <setGM6020voltagePosition>
	    	//setGM6020voltageRPM(9, 100, yawPresetVoltageRPM);
	    	//CAN2_cmd_motors(CAN_GROUP3C_ID, 5000, 0, 0, 0);
	    	if (b2bMotorCtrl.motor2_Ctrl == 2) {                                         // IMPORTANT: top to bottom: 1 -> 3 -> 2
 8003528:	4b47      	ldr	r3, [pc, #284]	; (8003648 <TaskChassis+0x368>)
 800352a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800352e:	2b02      	cmp	r3, #2
 8003530:	f040 8096 	bne.w	8003660 <TaskChassis+0x380>
	    		//setM2006RPM(6, -5400, indexerPreset);                             // THIS IS FUCKING STUPID
	    		setM3508RPM(7, 8000, shooterPreset);
 8003534:	4b46      	ldr	r3, [pc, #280]	; (8003650 <TaskChassis+0x370>)
 8003536:	edd3 6a00 	vldr	s13, [r3]
 800353a:	ed93 7a01 	vldr	s14, [r3, #4]
 800353e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003542:	eeb0 0a66 	vmov.f32	s0, s13
 8003546:	eef0 0a47 	vmov.f32	s1, s14
 800354a:	eeb0 1a67 	vmov.f32	s2, s15
 800354e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8003552:	2007      	movs	r0, #7
 8003554:	f7fe fc7a 	bl	8001e4c <setM3508RPM>
	    		setM3508RPM(8, -8000, shooterPreset);
 8003558:	4b3d      	ldr	r3, [pc, #244]	; (8003650 <TaskChassis+0x370>)
 800355a:	edd3 6a00 	vldr	s13, [r3]
 800355e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003562:	edd3 7a02 	vldr	s15, [r3, #8]
 8003566:	eeb0 0a66 	vmov.f32	s0, s13
 800356a:	eef0 0a47 	vmov.f32	s1, s14
 800356e:	eeb0 1a67 	vmov.f32	s2, s15
 8003572:	4938      	ldr	r1, [pc, #224]	; (8003654 <TaskChassis+0x374>)
 8003574:	2008      	movs	r0, #8
 8003576:	f7fe fc69 	bl	8001e4c <setM3508RPM>

	    		if (jammed > 0 && indexerStopped == 0) {
 800357a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800357e:	2b00      	cmp	r3, #0
 8003580:	dd1c      	ble.n	80035bc <TaskChassis+0x2dc>
 8003582:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d118      	bne.n	80035bc <TaskChassis+0x2dc>
	    			setM2006RPM(6, 15000, indexerPreset);
 800358a:	4b33      	ldr	r3, [pc, #204]	; (8003658 <TaskChassis+0x378>)
 800358c:	edd3 6a00 	vldr	s13, [r3]
 8003590:	ed93 7a01 	vldr	s14, [r3, #4]
 8003594:	edd3 7a02 	vldr	s15, [r3, #8]
 8003598:	eeb0 0a66 	vmov.f32	s0, s13
 800359c:	eef0 0a47 	vmov.f32	s1, s14
 80035a0:	eeb0 1a67 	vmov.f32	s2, s15
 80035a4:	f643 2198 	movw	r1, #15000	; 0x3a98
 80035a8:	2006      	movs	r0, #6
 80035aa:	f7fe fcb7 	bl	8001f1c <setM2006RPM>
	    			jammed--;
 80035ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	77fb      	strb	r3, [r7, #31]
 80035ba:	e0c6      	b.n	800374a <TaskChassis+0x46a>
	    		} else {
	    			indexerStopped = 0;
 80035bc:	2300      	movs	r3, #0
 80035be:	77bb      	strb	r3, [r7, #30]
	    			setM2006RPM(6, -5400, indexerPreset);
 80035c0:	4b25      	ldr	r3, [pc, #148]	; (8003658 <TaskChassis+0x378>)
 80035c2:	edd3 6a00 	vldr	s13, [r3]
 80035c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80035ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80035ce:	eeb0 0a66 	vmov.f32	s0, s13
 80035d2:	eef0 0a47 	vmov.f32	s1, s14
 80035d6:	eeb0 1a67 	vmov.f32	s2, s15
 80035da:	4920      	ldr	r1, [pc, #128]	; (800365c <TaskChassis+0x37c>)
 80035dc:	2006      	movs	r0, #6
 80035de:	f7fe fc9d 	bl	8001f1c <setM2006RPM>
	    			if (indexerTargetReached == 0 && getMotorRPM(6) <= -10) {
 80035e2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <TaskChassis+0x31e>
 80035ea:	2006      	movs	r0, #6
 80035ec:	f7fe fcca 	bl	8001f84 <getMotorRPM>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f113 0f09 	cmn.w	r3, #9
 80035f6:	da02      	bge.n	80035fe <TaskChassis+0x31e>
	    				indexerTargetReached = 1;
 80035f8:	2301      	movs	r3, #1
 80035fa:	777b      	strb	r3, [r7, #29]
 80035fc:	e0a5      	b.n	800374a <TaskChassis+0x46a>
	    			} else if (getMotorRPM(6) > -1 && indexerTargetReached == 1) {         // jammed
 80035fe:	2006      	movs	r0, #6
 8003600:	f7fe fcc0 	bl	8001f84 <getMotorRPM>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	f2c0 809f 	blt.w	800374a <TaskChassis+0x46a>
 800360c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003610:	2b01      	cmp	r3, #1
 8003612:	f040 809a 	bne.w	800374a <TaskChassis+0x46a>
	    				jammed = 12;
 8003616:	230c      	movs	r3, #12
 8003618:	77fb      	strb	r3, [r7, #31]
	    				indexerTargetReached = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	777b      	strb	r3, [r7, #29]
 800361e:	e094      	b.n	800374a <TaskChassis+0x46a>
 8003620:	415a51ec 	.word	0x415a51ec
 8003624:	3f70a3d7 	.word	0x3f70a3d7
 8003628:	452c2000 	.word	0x452c2000
 800362c:	20000d40 	.word	0x20000d40
 8003630:	200006ec 	.word	0x200006ec
 8003634:	431bde83 	.word	0x431bde83
 8003638:	20000070 	.word	0x20000070
 800363c:	20000040 	.word	0x20000040
 8003640:	20000318 	.word	0x20000318
 8003644:	080106bc 	.word	0x080106bc
 8003648:	20000310 	.word	0x20000310
 800364c:	2000004c 	.word	0x2000004c
 8003650:	20000064 	.word	0x20000064
 8003654:	ffffe0c0 	.word	0xffffe0c0
 8003658:	20000058 	.word	0x20000058
 800365c:	ffffeae8 	.word	0xffffeae8
	    			}
	    		}

	    	} else if (b2bMotorCtrl.motor2_Ctrl == 3) {
 8003660:	4b40      	ldr	r3, [pc, #256]	; (8003764 <TaskChassis+0x484>)
 8003662:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d138      	bne.n	80036dc <TaskChassis+0x3fc>
	    		setM2006RPM(6, 0, indexerPreset);
 800366a:	4b3f      	ldr	r3, [pc, #252]	; (8003768 <TaskChassis+0x488>)
 800366c:	edd3 6a00 	vldr	s13, [r3]
 8003670:	ed93 7a01 	vldr	s14, [r3, #4]
 8003674:	edd3 7a02 	vldr	s15, [r3, #8]
 8003678:	eeb0 0a66 	vmov.f32	s0, s13
 800367c:	eef0 0a47 	vmov.f32	s1, s14
 8003680:	eeb0 1a67 	vmov.f32	s2, s15
 8003684:	2100      	movs	r1, #0
 8003686:	2006      	movs	r0, #6
 8003688:	f7fe fc48 	bl	8001f1c <setM2006RPM>
	    		setM3508RPM(7, 8000, shooterPreset);
 800368c:	4b37      	ldr	r3, [pc, #220]	; (800376c <TaskChassis+0x48c>)
 800368e:	edd3 6a00 	vldr	s13, [r3]
 8003692:	ed93 7a01 	vldr	s14, [r3, #4]
 8003696:	edd3 7a02 	vldr	s15, [r3, #8]
 800369a:	eeb0 0a66 	vmov.f32	s0, s13
 800369e:	eef0 0a47 	vmov.f32	s1, s14
 80036a2:	eeb0 1a67 	vmov.f32	s2, s15
 80036a6:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80036aa:	2007      	movs	r0, #7
 80036ac:	f7fe fbce 	bl	8001e4c <setM3508RPM>
	    		setM3508RPM(8, -8000, shooterPreset);
 80036b0:	4b2e      	ldr	r3, [pc, #184]	; (800376c <TaskChassis+0x48c>)
 80036b2:	edd3 6a00 	vldr	s13, [r3]
 80036b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80036ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80036be:	eeb0 0a66 	vmov.f32	s0, s13
 80036c2:	eef0 0a47 	vmov.f32	s1, s14
 80036c6:	eeb0 1a67 	vmov.f32	s2, s15
 80036ca:	4929      	ldr	r1, [pc, #164]	; (8003770 <TaskChassis+0x490>)
 80036cc:	2008      	movs	r0, #8
 80036ce:	f7fe fbbd 	bl	8001e4c <setM3508RPM>
	    		indexerStopped = 1;
 80036d2:	2301      	movs	r3, #1
 80036d4:	77bb      	strb	r3, [r7, #30]
	    		indexerTargetReached = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	777b      	strb	r3, [r7, #29]
 80036da:	e036      	b.n	800374a <TaskChassis+0x46a>
	    	} else {       // = 1
	    		setM2006RPM(6, 0, indexerPreset);
 80036dc:	4b22      	ldr	r3, [pc, #136]	; (8003768 <TaskChassis+0x488>)
 80036de:	edd3 6a00 	vldr	s13, [r3]
 80036e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80036e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80036ea:	eeb0 0a66 	vmov.f32	s0, s13
 80036ee:	eef0 0a47 	vmov.f32	s1, s14
 80036f2:	eeb0 1a67 	vmov.f32	s2, s15
 80036f6:	2100      	movs	r1, #0
 80036f8:	2006      	movs	r0, #6
 80036fa:	f7fe fc0f 	bl	8001f1c <setM2006RPM>
	    		setM3508RPM(7, 0, shooterPreset);
 80036fe:	4b1b      	ldr	r3, [pc, #108]	; (800376c <TaskChassis+0x48c>)
 8003700:	edd3 6a00 	vldr	s13, [r3]
 8003704:	ed93 7a01 	vldr	s14, [r3, #4]
 8003708:	edd3 7a02 	vldr	s15, [r3, #8]
 800370c:	eeb0 0a66 	vmov.f32	s0, s13
 8003710:	eef0 0a47 	vmov.f32	s1, s14
 8003714:	eeb0 1a67 	vmov.f32	s2, s15
 8003718:	2100      	movs	r1, #0
 800371a:	2007      	movs	r0, #7
 800371c:	f7fe fb96 	bl	8001e4c <setM3508RPM>
	    		setM3508RPM(8, 0, shooterPreset);
 8003720:	4b12      	ldr	r3, [pc, #72]	; (800376c <TaskChassis+0x48c>)
 8003722:	edd3 6a00 	vldr	s13, [r3]
 8003726:	ed93 7a01 	vldr	s14, [r3, #4]
 800372a:	edd3 7a02 	vldr	s15, [r3, #8]
 800372e:	eeb0 0a66 	vmov.f32	s0, s13
 8003732:	eef0 0a47 	vmov.f32	s1, s14
 8003736:	eeb0 1a67 	vmov.f32	s2, s15
 800373a:	2100      	movs	r1, #0
 800373c:	2008      	movs	r0, #8
 800373e:	f7fe fb85 	bl	8001e4c <setM3508RPM>
	    		indexerStopped = 1;
 8003742:	2301      	movs	r3, #1
 8003744:	77bb      	strb	r3, [r7, #30]
	    		indexerTargetReached = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	777b      	strb	r3, [r7, #29]
	    	}
	    	sendB2bData(CAN_b2b_B_gyro_ID, 1, 0, 0, 0);
 800374a:	2300      	movs	r3, #0
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	2300      	movs	r3, #0
 8003750:	2200      	movs	r2, #0
 8003752:	2101      	movs	r1, #1
 8003754:	f44f 7089 	mov.w	r0, #274	; 0x112
 8003758:	f7fe fc2e 	bl	8001fb8 <sendB2bData>
	    //sprintf((char*)txbuf, "%f \r\n", power_heat_data.chassis_power);
	    //HAL_UART_Transmit(&huart1, txbuf, strlen((char*)txbuf), HAL_MAX_DELAY);
	    //txbuf = *((float*)&power_heat_data.chassis_power);
	    //usart_printf("%f %d\r\n", calcChassisPower, 30);

        osDelay(5);
 800375c:	2005      	movs	r0, #5
 800375e:	f007 f9fd 	bl	800ab5c <osDelay>
	    for (int i = 0; i < 4; i++) {
 8003762:	e5d1      	b.n	8003308 <TaskChassis+0x28>
 8003764:	20000310 	.word	0x20000310
 8003768:	20000058 	.word	0x20000058
 800376c:	20000064 	.word	0x20000064
 8003770:	ffffe0c0 	.word	0xffffe0c0

08003774 <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800377c:	2001      	movs	r0, #1
 800377e:	f007 f9ed 	bl	800ab5c <osDelay>
 8003782:	e7fb      	b.n	800377c <TaskTurret+0x8>

08003784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003788:	b672      	cpsid	i
}
 800378a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800378c:	e7fe      	b.n	800378c <Error_Handler+0x8>

0800378e <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 800378e:	b480      	push	{r7}
 8003790:	b087      	sub	sp, #28
 8003792:	af00      	add	r7, sp, #0
 8003794:	6178      	str	r0, [r7, #20]
 8003796:	460b      	mov	r3, r1
 8003798:	60fa      	str	r2, [r7, #12]
 800379a:	ed87 0a02 	vstr	s0, [r7, #8]
 800379e:	edc7 0a01 	vstr	s1, [r7, #4]
 80037a2:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d042      	beq.n	8003830 <PID_init+0xa2>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d03f      	beq.n	8003830 <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	7cfa      	ldrb	r2, [r7, #19]
 80037b4:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	3304      	adds	r3, #4
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	3308      	adds	r3, #8
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	635a      	str	r2, [r3, #52]	; 0x34
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	621a      	str	r2, [r3, #32]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	6a1a      	ldr	r2, [r3, #32]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	62da      	str	r2, [r3, #44]	; 0x2c
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	629a      	str	r2, [r3, #40]	; 0x28
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	625a      	str	r2, [r3, #36]	; 0x24
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	645a      	str	r2, [r3, #68]	; 0x44
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	641a      	str	r2, [r3, #64]	; 0x40
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	63da      	str	r2, [r3, #60]	; 0x3c
 800382e:	e000      	b.n	8003832 <PID_init+0xa4>
        return;
 8003830:	bf00      	nop
}
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	ed87 0a02 	vstr	s0, [r7, #8]
 8003848:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d102      	bne.n	8003858 <PID_calc+0x1c>
    {
        return 0.0f;
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	e130      	b.n	8003aba <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	645a      	str	r2, [r3, #68]	; 0x44
    pid->error[1] = pid->error[0];
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	641a      	str	r2, [r3, #64]	; 0x40
    pid->set = set;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8003874:	ed97 7a01 	vldr	s14, [r7, #4]
 8003878:	edd7 7a02 	vldr	s15, [r7, #8]
 800387c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    if (pid->mode == PID_POSITION)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	f040 8095 	bne.w	80039ba <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	ed93 7a01 	vldr	s14, [r3, #4]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800389c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout += pid->Ki * pid->error[0];
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80038b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80038e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80038f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	edd3 7a05 	vldr	s15, [r3, #20]
 800390e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003916:	dd04      	ble.n	8003922 <PID_calc+0xe6>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	629a      	str	r2, [r3, #40]	; 0x28
 8003920:	e014      	b.n	800394c <PID_calc+0x110>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	edd3 7a05 	vldr	s15, [r3, #20]
 800392e:	eef1 7a67 	vneg.f32	s15, s15
 8003932:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393a:	d507      	bpl.n	800394c <PID_calc+0x110>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003942:	eef1 7a67 	vneg.f32	s15, s15
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003958:	ee37 7a27 	vadd.f32	s14, s14, s15
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	edd3 7a04 	vldr	s15, [r3, #16]
 8003978:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800397c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003980:	dd04      	ble.n	800398c <PID_calc+0x150>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]
 800398a:	e094      	b.n	8003ab6 <PID_calc+0x27a>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	edd3 7a04 	vldr	s15, [r3, #16]
 8003998:	eef1 7a67 	vneg.f32	s15, s15
 800399c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a4:	f140 8087 	bpl.w	8003ab6 <PID_calc+0x27a>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80039ae:	eef1 7a67 	vneg.f32	s15, s15
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	edc3 7a08 	vstr	s15, [r3, #32]
 80039b8:	e07d      	b.n	8003ab6 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d179      	bne.n	8003ab6 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80039d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80039d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout = pid->Ki * pid->error[0];
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80039ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003a14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	ed93 7a08 	vldr	s14, [r3, #32]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003a54:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a80:	dd04      	ble.n	8003a8c <PID_calc+0x250>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	621a      	str	r2, [r3, #32]
 8003a8a:	e014      	b.n	8003ab6 <PID_calc+0x27a>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a98:	eef1 7a67 	vneg.f32	s15, s15
 8003a9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa4:	d507      	bpl.n	8003ab6 <PID_calc+0x27a>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003aac:	eef1 7a67 	vneg.f32	s15, s15
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
}
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 8003ad0:	2224      	movs	r2, #36	; 0x24
 8003ad2:	4903      	ldr	r1, [pc, #12]	; (8003ae0 <remote_control_init+0x14>)
 8003ad4:	4803      	ldr	r0, [pc, #12]	; (8003ae4 <remote_control_init+0x18>)
 8003ad6:	f7fe fb87 	bl	80021e8 <RC_init>
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000d8c 	.word	0x20000d8c
 8003ae4:	20000d68 	.word	0x20000d68

08003ae8 <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 8003aec:	4b02      	ldr	r3, [pc, #8]	; (8003af8 <get_remote_control_point+0x10>)
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	20000d50 	.word	0x20000d50

08003afc <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 8003b02:	4b44      	ldr	r3, [pc, #272]	; (8003c14 <USART3_IRQHandler+0x118>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00b      	beq.n	8003b28 <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8003b10:	2300      	movs	r3, #0
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	4b3f      	ldr	r3, [pc, #252]	; (8003c14 <USART3_IRQHandler+0x118>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	607b      	str	r3, [r7, #4]
 8003b1c:	4b3d      	ldr	r3, [pc, #244]	; (8003c14 <USART3_IRQHandler+0x118>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	607b      	str	r3, [r7, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 8003b26:	e070      	b.n	8003c0a <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8003b28:	4b3b      	ldr	r3, [pc, #236]	; (8003c18 <USART3_IRQHandler+0x11c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d06a      	beq.n	8003c0a <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8003b34:	2300      	movs	r3, #0
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	4b36      	ldr	r3, [pc, #216]	; (8003c14 <USART3_IRQHandler+0x118>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	4b34      	ldr	r3, [pc, #208]	; (8003c14 <USART3_IRQHandler+0x118>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8003b4a:	4b34      	ldr	r3, [pc, #208]	; (8003c1c <USART3_IRQHandler+0x120>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d12d      	bne.n	8003bb4 <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8003b58:	4b30      	ldr	r3, [pc, #192]	; (8003c1c <USART3_IRQHandler+0x120>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4b2f      	ldr	r3, [pc, #188]	; (8003c1c <USART3_IRQHandler+0x120>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0201 	bic.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8003b68:	4b2c      	ldr	r3, [pc, #176]	; (8003c1c <USART3_IRQHandler+0x120>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	4b2a      	ldr	r3, [pc, #168]	; (8003c20 <USART3_IRQHandler+0x124>)
 8003b78:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8003b7a:	4b28      	ldr	r3, [pc, #160]	; (8003c1c <USART3_IRQHandler+0x120>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2224      	movs	r2, #36	; 0x24
 8003b80:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 8003b82:	4b26      	ldr	r3, [pc, #152]	; (8003c1c <USART3_IRQHandler+0x120>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <USART3_IRQHandler+0x120>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003b90:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8003b92:	4b22      	ldr	r3, [pc, #136]	; (8003c1c <USART3_IRQHandler+0x120>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <USART3_IRQHandler+0x120>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0201 	orr.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <USART3_IRQHandler+0x124>)
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	2b12      	cmp	r3, #18
 8003ba8:	d12f      	bne.n	8003c0a <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8003baa:	491e      	ldr	r1, [pc, #120]	; (8003c24 <USART3_IRQHandler+0x128>)
 8003bac:	481e      	ldr	r0, [pc, #120]	; (8003c28 <USART3_IRQHandler+0x12c>)
 8003bae:	f000 f841 	bl	8003c34 <sbus_to_rc>
}
 8003bb2:	e02a      	b.n	8003c0a <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8003bb4:	4b19      	ldr	r3, [pc, #100]	; (8003c1c <USART3_IRQHandler+0x120>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4b18      	ldr	r3, [pc, #96]	; (8003c1c <USART3_IRQHandler+0x120>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0201 	bic.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8003bc4:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <USART3_IRQHandler+0x120>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <USART3_IRQHandler+0x124>)
 8003bd4:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8003bd6:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <USART3_IRQHandler+0x120>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2224      	movs	r2, #36	; 0x24
 8003bdc:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 8003bde:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <USART3_IRQHandler+0x130>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a12      	ldr	r2, [pc, #72]	; (8003c2c <USART3_IRQHandler+0x130>)
 8003be4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003be8:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8003bea:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <USART3_IRQHandler+0x120>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <USART3_IRQHandler+0x120>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0201 	orr.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 8003bfa:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <USART3_IRQHandler+0x124>)
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	2b12      	cmp	r3, #18
 8003c00:	d103      	bne.n	8003c0a <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 8003c02:	4908      	ldr	r1, [pc, #32]	; (8003c24 <USART3_IRQHandler+0x128>)
 8003c04:	480a      	ldr	r0, [pc, #40]	; (8003c30 <USART3_IRQHandler+0x134>)
 8003c06:	f000 f815 	bl	8003c34 <sbus_to_rc>
}
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000ac4 	.word	0x20000ac4
 8003c18:	40004800 	.word	0x40004800
 8003c1c:	20000c0c 	.word	0x20000c0c
 8003c20:	20000db0 	.word	0x20000db0
 8003c24:	20000d50 	.word	0x20000d50
 8003c28:	20000d68 	.word	0x20000d68
 8003c2c:	40026028 	.word	0x40026028
 8003c30:	20000d8c 	.word	0x20000d8c

08003c34 <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 8101 	beq.w	8003e48 <sbus_to_rc+0x214>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80fd 	beq.w	8003e48 <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	b21a      	sxth	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	021b      	lsls	r3, r3, #8
 8003c60:	b21b      	sxth	r3, r3
 8003c62:	4313      	orrs	r3, r2
 8003c64:	b21b      	sxth	r3, r3
 8003c66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c6a:	b21a      	sxth	r2, r3
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3301      	adds	r3, #1
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	08db      	lsrs	r3, r3, #3
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	b21a      	sxth	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3302      	adds	r3, #2
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	015b      	lsls	r3, r3, #5
 8003c88:	b21b      	sxth	r3, r3
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	b21b      	sxth	r3, r3
 8003c8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c92:	b21a      	sxth	r2, r3
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3302      	adds	r3, #2
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	099b      	lsrs	r3, r3, #6
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	b21a      	sxth	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3303      	adds	r3, #3
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	b21b      	sxth	r3, r3
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003cc0:	b21b      	sxth	r3, r3
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8003cc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cca:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	b21a      	sxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3305      	adds	r3, #5
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	01db      	lsls	r3, r3, #7
 8003ce8:	b21b      	sxth	r3, r3
 8003cea:	4313      	orrs	r3, r2
 8003cec:	b21b      	sxth	r3, r3
 8003cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cf2:	b21a      	sxth	r2, r3
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3305      	adds	r3, #5
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f003 0303 	and.w	r3, r3, #3
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3305      	adds	r3, #5
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	109b      	asrs	r3, r3, #2
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3306      	adds	r3, #6
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	b21a      	sxth	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3307      	adds	r3, #7
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	b21b      	sxth	r3, r3
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	b21a      	sxth	r2, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3308      	adds	r3, #8
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	b21a      	sxth	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3309      	adds	r3, #9
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	021b      	lsls	r3, r3, #8
 8003d5a:	b21b      	sxth	r3, r3
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	b21a      	sxth	r2, r3
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	330a      	adds	r3, #10
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	b21a      	sxth	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	330b      	adds	r3, #11
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	021b      	lsls	r3, r3, #8
 8003d78:	b21b      	sxth	r3, r3
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	b21a      	sxth	r2, r3
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	330c      	adds	r3, #12
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	330d      	adds	r3, #13
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	330e      	adds	r3, #14
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	b21a      	sxth	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	330f      	adds	r3, #15
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	b21b      	sxth	r3, r3
 8003db0:	4313      	orrs	r3, r2
 8003db2:	b21b      	sxth	r3, r3
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3310      	adds	r3, #16
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	b21a      	sxth	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3311      	adds	r3, #17
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	021b      	lsls	r3, r3, #8
 8003dce:	b21b      	sxth	r3, r3
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	b21a      	sxth	r2, r3
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dde:	b21b      	sxth	r3, r3
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	b21a      	sxth	r2, r3
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003df4:	b21b      	sxth	r3, r3
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	b21a      	sxth	r2, r3
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003e0a:	b21b      	sxth	r3, r3
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	b21a      	sxth	r2, r3
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003e20:	b21b      	sxth	r3, r3
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	b21a      	sxth	r2, r3
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e36:	b21b      	sxth	r3, r3
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	b21a      	sxth	r2, r3
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	811a      	strh	r2, [r3, #8]
 8003e46:	e000      	b.n	8003e4a <sbus_to_rc+0x216>
        return;
 8003e48:	bf00      	nop
}
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <getRCchannel+0x24>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003e66:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003e6a:	b21b      	sxth	r3, r3
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	20000074 	.word	0x20000074

08003e7c <getRCswitch>:

int8_t getRCswitch(int8_t switchID) {
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.s[switchID];
 8003e86:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <getRCswitch+0x24>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8e:	4413      	add	r3, r2
 8003e90:	7a9b      	ldrb	r3, [r3, #10]
 8003e92:	b25b      	sxtb	r3, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	20000074 	.word	0x20000074

08003ea4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	607b      	str	r3, [r7, #4]
 8003eae:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <HAL_MspInit+0x54>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	4a11      	ldr	r2, [pc, #68]	; (8003ef8 <HAL_MspInit+0x54>)
 8003eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eba:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <HAL_MspInit+0x54>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec2:	607b      	str	r3, [r7, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <HAL_MspInit+0x54>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	4a0a      	ldr	r2, [pc, #40]	; (8003ef8 <HAL_MspInit+0x54>)
 8003ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed6:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <HAL_MspInit+0x54>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	210f      	movs	r1, #15
 8003ee6:	f06f 0001 	mvn.w	r0, #1
 8003eea:	f001 fe2a 	bl	8005b42 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40023800 	.word	0x40023800

08003efc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08c      	sub	sp, #48	; 0x30
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f04:	f107 031c 	add.w	r3, r7, #28
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	609a      	str	r2, [r3, #8]
 8003f10:	60da      	str	r2, [r3, #12]
 8003f12:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a4a      	ldr	r2, [pc, #296]	; (8004044 <HAL_CAN_MspInit+0x148>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d13d      	bne.n	8003f9a <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003f1e:	4b4a      	ldr	r3, [pc, #296]	; (8004048 <HAL_CAN_MspInit+0x14c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3301      	adds	r3, #1
 8003f24:	4a48      	ldr	r2, [pc, #288]	; (8004048 <HAL_CAN_MspInit+0x14c>)
 8003f26:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003f28:	4b47      	ldr	r3, [pc, #284]	; (8004048 <HAL_CAN_MspInit+0x14c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d10d      	bne.n	8003f4c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003f30:	2300      	movs	r3, #0
 8003f32:	61bb      	str	r3, [r7, #24]
 8003f34:	4b45      	ldr	r3, [pc, #276]	; (800404c <HAL_CAN_MspInit+0x150>)
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	4a44      	ldr	r2, [pc, #272]	; (800404c <HAL_CAN_MspInit+0x150>)
 8003f3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8003f40:	4b42      	ldr	r3, [pc, #264]	; (800404c <HAL_CAN_MspInit+0x150>)
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f48:	61bb      	str	r3, [r7, #24]
 8003f4a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	4b3e      	ldr	r3, [pc, #248]	; (800404c <HAL_CAN_MspInit+0x150>)
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	4a3d      	ldr	r2, [pc, #244]	; (800404c <HAL_CAN_MspInit+0x150>)
 8003f56:	f043 0308 	orr.w	r3, r3, #8
 8003f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5c:	4b3b      	ldr	r3, [pc, #236]	; (800404c <HAL_CAN_MspInit+0x150>)
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f74:	2303      	movs	r3, #3
 8003f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003f78:	2309      	movs	r3, #9
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f7c:	f107 031c 	add.w	r3, r7, #28
 8003f80:	4619      	mov	r1, r3
 8003f82:	4833      	ldr	r0, [pc, #204]	; (8004050 <HAL_CAN_MspInit+0x154>)
 8003f84:	f002 fa16 	bl	80063b4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2105      	movs	r1, #5
 8003f8c:	2014      	movs	r0, #20
 8003f8e:	f001 fdd8 	bl	8005b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003f92:	2014      	movs	r0, #20
 8003f94:	f001 fdf1 	bl	8005b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003f98:	e04f      	b.n	800403a <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a2d      	ldr	r2, [pc, #180]	; (8004054 <HAL_CAN_MspInit+0x158>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d14a      	bne.n	800403a <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	4b28      	ldr	r3, [pc, #160]	; (800404c <HAL_CAN_MspInit+0x150>)
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	4a27      	ldr	r2, [pc, #156]	; (800404c <HAL_CAN_MspInit+0x150>)
 8003fae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb4:	4b25      	ldr	r3, [pc, #148]	; (800404c <HAL_CAN_MspInit+0x150>)
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003fc0:	4b21      	ldr	r3, [pc, #132]	; (8004048 <HAL_CAN_MspInit+0x14c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	4a20      	ldr	r2, [pc, #128]	; (8004048 <HAL_CAN_MspInit+0x14c>)
 8003fc8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003fca:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <HAL_CAN_MspInit+0x14c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d10d      	bne.n	8003fee <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	4b1d      	ldr	r3, [pc, #116]	; (800404c <HAL_CAN_MspInit+0x150>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	4a1c      	ldr	r2, [pc, #112]	; (800404c <HAL_CAN_MspInit+0x150>)
 8003fdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fe2:	4b1a      	ldr	r3, [pc, #104]	; (800404c <HAL_CAN_MspInit+0x150>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	4b16      	ldr	r3, [pc, #88]	; (800404c <HAL_CAN_MspInit+0x150>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	4a15      	ldr	r2, [pc, #84]	; (800404c <HAL_CAN_MspInit+0x150>)
 8003ff8:	f043 0302 	orr.w	r3, r3, #2
 8003ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ffe:	4b13      	ldr	r3, [pc, #76]	; (800404c <HAL_CAN_MspInit+0x150>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800400a:	2360      	movs	r3, #96	; 0x60
 800400c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800400e:	2302      	movs	r3, #2
 8004010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004012:	2300      	movs	r3, #0
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004016:	2303      	movs	r3, #3
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800401a:	2309      	movs	r3, #9
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800401e:	f107 031c 	add.w	r3, r7, #28
 8004022:	4619      	mov	r1, r3
 8004024:	480c      	ldr	r0, [pc, #48]	; (8004058 <HAL_CAN_MspInit+0x15c>)
 8004026:	f002 f9c5 	bl	80063b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 800402a:	2200      	movs	r2, #0
 800402c:	2105      	movs	r1, #5
 800402e:	2040      	movs	r0, #64	; 0x40
 8004030:	f001 fd87 	bl	8005b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8004034:	2040      	movs	r0, #64	; 0x40
 8004036:	f001 fda0 	bl	8005b7a <HAL_NVIC_EnableIRQ>
}
 800403a:	bf00      	nop
 800403c:	3730      	adds	r7, #48	; 0x30
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40006400 	.word	0x40006400
 8004048:	20000db4 	.word	0x20000db4
 800404c:	40023800 	.word	0x40023800
 8004050:	40020c00 	.word	0x40020c00
 8004054:	40006800 	.word	0x40006800
 8004058:	40020400 	.word	0x40020400

0800405c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	; 0x28
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004064:	f107 0314 	add.w	r3, r7, #20
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	609a      	str	r2, [r3, #8]
 8004070:	60da      	str	r2, [r3, #12]
 8004072:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a29      	ldr	r2, [pc, #164]	; (8004120 <HAL_I2C_MspInit+0xc4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d14b      	bne.n	8004116 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	4b28      	ldr	r3, [pc, #160]	; (8004124 <HAL_I2C_MspInit+0xc8>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	4a27      	ldr	r2, [pc, #156]	; (8004124 <HAL_I2C_MspInit+0xc8>)
 8004088:	f043 0304 	orr.w	r3, r3, #4
 800408c:	6313      	str	r3, [r2, #48]	; 0x30
 800408e:	4b25      	ldr	r3, [pc, #148]	; (8004124 <HAL_I2C_MspInit+0xc8>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	4b21      	ldr	r3, [pc, #132]	; (8004124 <HAL_I2C_MspInit+0xc8>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	4a20      	ldr	r2, [pc, #128]	; (8004124 <HAL_I2C_MspInit+0xc8>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	6313      	str	r3, [r2, #48]	; 0x30
 80040aa:	4b1e      	ldr	r3, [pc, #120]	; (8004124 <HAL_I2C_MspInit+0xc8>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040bc:	2312      	movs	r3, #18
 80040be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040c4:	2303      	movs	r3, #3
 80040c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80040c8:	2304      	movs	r3, #4
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040cc:	f107 0314 	add.w	r3, r7, #20
 80040d0:	4619      	mov	r1, r3
 80040d2:	4815      	ldr	r0, [pc, #84]	; (8004128 <HAL_I2C_MspInit+0xcc>)
 80040d4:	f002 f96e 	bl	80063b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80040d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040de:	2312      	movs	r3, #18
 80040e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e6:	2303      	movs	r3, #3
 80040e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80040ea:	2304      	movs	r3, #4
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ee:	f107 0314 	add.w	r3, r7, #20
 80040f2:	4619      	mov	r1, r3
 80040f4:	480d      	ldr	r0, [pc, #52]	; (800412c <HAL_I2C_MspInit+0xd0>)
 80040f6:	f002 f95d 	bl	80063b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80040fa:	2300      	movs	r3, #0
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	4b09      	ldr	r3, [pc, #36]	; (8004124 <HAL_I2C_MspInit+0xc8>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	4a08      	ldr	r2, [pc, #32]	; (8004124 <HAL_I2C_MspInit+0xc8>)
 8004104:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004108:	6413      	str	r3, [r2, #64]	; 0x40
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <HAL_I2C_MspInit+0xc8>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004116:	bf00      	nop
 8004118:	3728      	adds	r7, #40	; 0x28
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40005c00 	.word	0x40005c00
 8004124:	40023800 	.word	0x40023800
 8004128:	40020800 	.word	0x40020800
 800412c:	40020000 	.word	0x40020000

08004130 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08a      	sub	sp, #40	; 0x28
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004138:	f107 0314 	add.w	r3, r7, #20
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	60da      	str	r2, [r3, #12]
 8004146:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a28      	ldr	r2, [pc, #160]	; (80041f0 <HAL_SPI_MspInit+0xc0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d149      	bne.n	80041e6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	4b27      	ldr	r3, [pc, #156]	; (80041f4 <HAL_SPI_MspInit+0xc4>)
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	4a26      	ldr	r2, [pc, #152]	; (80041f4 <HAL_SPI_MspInit+0xc4>)
 800415c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004160:	6453      	str	r3, [r2, #68]	; 0x44
 8004162:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <HAL_SPI_MspInit+0xc4>)
 8004164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004166:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800416a:	613b      	str	r3, [r7, #16]
 800416c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	4b20      	ldr	r3, [pc, #128]	; (80041f4 <HAL_SPI_MspInit+0xc4>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <HAL_SPI_MspInit+0xc4>)
 8004178:	f043 0302 	orr.w	r3, r3, #2
 800417c:	6313      	str	r3, [r2, #48]	; 0x30
 800417e:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <HAL_SPI_MspInit+0xc4>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	4b19      	ldr	r3, [pc, #100]	; (80041f4 <HAL_SPI_MspInit+0xc4>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	4a18      	ldr	r2, [pc, #96]	; (80041f4 <HAL_SPI_MspInit+0xc4>)
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	6313      	str	r3, [r2, #48]	; 0x30
 800419a:	4b16      	ldr	r3, [pc, #88]	; (80041f4 <HAL_SPI_MspInit+0xc4>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 80041a6:	2318      	movs	r3, #24
 80041a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041aa:	2302      	movs	r3, #2
 80041ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b2:	2303      	movs	r3, #3
 80041b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80041b6:	2305      	movs	r3, #5
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ba:	f107 0314 	add.w	r3, r7, #20
 80041be:	4619      	mov	r1, r3
 80041c0:	480d      	ldr	r0, [pc, #52]	; (80041f8 <HAL_SPI_MspInit+0xc8>)
 80041c2:	f002 f8f7 	bl	80063b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80041c6:	2380      	movs	r3, #128	; 0x80
 80041c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ca:	2302      	movs	r3, #2
 80041cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041d2:	2303      	movs	r3, #3
 80041d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80041d6:	2305      	movs	r3, #5
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041da:	f107 0314 	add.w	r3, r7, #20
 80041de:	4619      	mov	r1, r3
 80041e0:	4806      	ldr	r0, [pc, #24]	; (80041fc <HAL_SPI_MspInit+0xcc>)
 80041e2:	f002 f8e7 	bl	80063b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80041e6:	bf00      	nop
 80041e8:	3728      	adds	r7, #40	; 0x28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40013000 	.word	0x40013000
 80041f4:	40023800 	.word	0x40023800
 80041f8:	40020400 	.word	0x40020400
 80041fc:	40020000 	.word	0x40020000

08004200 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a15      	ldr	r2, [pc, #84]	; (8004264 <HAL_TIM_PWM_MspInit+0x64>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d10e      	bne.n	8004230 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	4b14      	ldr	r3, [pc, #80]	; (8004268 <HAL_TIM_PWM_MspInit+0x68>)
 8004218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421a:	4a13      	ldr	r2, [pc, #76]	; (8004268 <HAL_TIM_PWM_MspInit+0x68>)
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	6453      	str	r3, [r2, #68]	; 0x44
 8004222:	4b11      	ldr	r3, [pc, #68]	; (8004268 <HAL_TIM_PWM_MspInit+0x68>)
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800422e:	e012      	b.n	8004256 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a0d      	ldr	r2, [pc, #52]	; (800426c <HAL_TIM_PWM_MspInit+0x6c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10d      	bne.n	8004256 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800423a:	2300      	movs	r3, #0
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <HAL_TIM_PWM_MspInit+0x68>)
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	4a09      	ldr	r2, [pc, #36]	; (8004268 <HAL_TIM_PWM_MspInit+0x68>)
 8004244:	f043 0302 	orr.w	r3, r3, #2
 8004248:	6453      	str	r3, [r2, #68]	; 0x44
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <HAL_TIM_PWM_MspInit+0x68>)
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	68bb      	ldr	r3, [r7, #8]
}
 8004256:	bf00      	nop
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40010000 	.word	0x40010000
 8004268:	40023800 	.word	0x40023800
 800426c:	40010400 	.word	0x40010400

08004270 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a15      	ldr	r2, [pc, #84]	; (80042d4 <HAL_TIM_Base_MspInit+0x64>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d10e      	bne.n	80042a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <HAL_TIM_Base_MspInit+0x68>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	4a13      	ldr	r2, [pc, #76]	; (80042d8 <HAL_TIM_Base_MspInit+0x68>)
 800428c:	f043 0304 	orr.w	r3, r3, #4
 8004290:	6413      	str	r3, [r2, #64]	; 0x40
 8004292:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <HAL_TIM_Base_MspInit+0x68>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800429e:	e012      	b.n	80042c6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a0d      	ldr	r2, [pc, #52]	; (80042dc <HAL_TIM_Base_MspInit+0x6c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d10d      	bne.n	80042c6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <HAL_TIM_Base_MspInit+0x68>)
 80042b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b2:	4a09      	ldr	r2, [pc, #36]	; (80042d8 <HAL_TIM_Base_MspInit+0x68>)
 80042b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b8:	6453      	str	r3, [r2, #68]	; 0x44
 80042ba:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <HAL_TIM_Base_MspInit+0x68>)
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	60bb      	str	r3, [r7, #8]
 80042c4:	68bb      	ldr	r3, [r7, #8]
}
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40000800 	.word	0x40000800
 80042d8:	40023800 	.word	0x40023800
 80042dc:	40014400 	.word	0x40014400

080042e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08c      	sub	sp, #48	; 0x30
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e8:	f107 031c 	add.w	r3, r7, #28
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	60da      	str	r2, [r3, #12]
 80042f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a58      	ldr	r2, [pc, #352]	; (8004460 <HAL_TIM_MspPostInit+0x180>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d11f      	bne.n	8004342 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	61bb      	str	r3, [r7, #24]
 8004306:	4b57      	ldr	r3, [pc, #348]	; (8004464 <HAL_TIM_MspPostInit+0x184>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	4a56      	ldr	r2, [pc, #344]	; (8004464 <HAL_TIM_MspPostInit+0x184>)
 800430c:	f043 0310 	orr.w	r3, r3, #16
 8004310:	6313      	str	r3, [r2, #48]	; 0x30
 8004312:	4b54      	ldr	r3, [pc, #336]	; (8004464 <HAL_TIM_MspPostInit+0x184>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	f003 0310 	and.w	r3, r3, #16
 800431a:	61bb      	str	r3, [r7, #24]
 800431c:	69bb      	ldr	r3, [r7, #24]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 800431e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8004322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004324:	2302      	movs	r3, #2
 8004326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004328:	2300      	movs	r3, #0
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800432c:	2300      	movs	r3, #0
 800432e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004330:	2301      	movs	r3, #1
 8004332:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004334:	f107 031c 	add.w	r3, r7, #28
 8004338:	4619      	mov	r1, r3
 800433a:	484b      	ldr	r0, [pc, #300]	; (8004468 <HAL_TIM_MspPostInit+0x188>)
 800433c:	f002 f83a 	bl	80063b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8004340:	e089      	b.n	8004456 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM4)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a49      	ldr	r2, [pc, #292]	; (800446c <HAL_TIM_MspPostInit+0x18c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d11f      	bne.n	800438c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	4b44      	ldr	r3, [pc, #272]	; (8004464 <HAL_TIM_MspPostInit+0x184>)
 8004352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004354:	4a43      	ldr	r2, [pc, #268]	; (8004464 <HAL_TIM_MspPostInit+0x184>)
 8004356:	f043 0308 	orr.w	r3, r3, #8
 800435a:	6313      	str	r3, [r2, #48]	; 0x30
 800435c:	4b41      	ldr	r3, [pc, #260]	; (8004464 <HAL_TIM_MspPostInit+0x184>)
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004368:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800436c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436e:	2302      	movs	r3, #2
 8004370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004372:	2300      	movs	r3, #0
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004376:	2300      	movs	r3, #0
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800437a:	2302      	movs	r3, #2
 800437c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800437e:	f107 031c 	add.w	r3, r7, #28
 8004382:	4619      	mov	r1, r3
 8004384:	483a      	ldr	r0, [pc, #232]	; (8004470 <HAL_TIM_MspPostInit+0x190>)
 8004386:	f002 f815 	bl	80063b4 <HAL_GPIO_Init>
}
 800438a:	e064      	b.n	8004456 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM8)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a38      	ldr	r2, [pc, #224]	; (8004474 <HAL_TIM_MspPostInit+0x194>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d13c      	bne.n	8004410 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	4b32      	ldr	r3, [pc, #200]	; (8004464 <HAL_TIM_MspPostInit+0x184>)
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	4a31      	ldr	r2, [pc, #196]	; (8004464 <HAL_TIM_MspPostInit+0x184>)
 80043a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a4:	6313      	str	r3, [r2, #48]	; 0x30
 80043a6:	4b2f      	ldr	r3, [pc, #188]	; (8004464 <HAL_TIM_MspPostInit+0x184>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <HAL_TIM_MspPostInit+0x184>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	4a2a      	ldr	r2, [pc, #168]	; (8004464 <HAL_TIM_MspPostInit+0x184>)
 80043bc:	f043 0304 	orr.w	r3, r3, #4
 80043c0:	6313      	str	r3, [r2, #48]	; 0x30
 80043c2:	4b28      	ldr	r3, [pc, #160]	; (8004464 <HAL_TIM_MspPostInit+0x184>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80043ce:	23c0      	movs	r3, #192	; 0xc0
 80043d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d2:	2302      	movs	r3, #2
 80043d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043da:	2300      	movs	r3, #0
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80043de:	2303      	movs	r3, #3
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80043e2:	f107 031c 	add.w	r3, r7, #28
 80043e6:	4619      	mov	r1, r3
 80043e8:	4823      	ldr	r0, [pc, #140]	; (8004478 <HAL_TIM_MspPostInit+0x198>)
 80043ea:	f001 ffe3 	bl	80063b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80043ee:	2340      	movs	r3, #64	; 0x40
 80043f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f2:	2302      	movs	r3, #2
 80043f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043fa:	2300      	movs	r3, #0
 80043fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80043fe:	2303      	movs	r3, #3
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004402:	f107 031c 	add.w	r3, r7, #28
 8004406:	4619      	mov	r1, r3
 8004408:	481c      	ldr	r0, [pc, #112]	; (800447c <HAL_TIM_MspPostInit+0x19c>)
 800440a:	f001 ffd3 	bl	80063b4 <HAL_GPIO_Init>
}
 800440e:	e022      	b.n	8004456 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM10)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a1a      	ldr	r2, [pc, #104]	; (8004480 <HAL_TIM_MspPostInit+0x1a0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d11d      	bne.n	8004456 <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800441a:	2300      	movs	r3, #0
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	4b11      	ldr	r3, [pc, #68]	; (8004464 <HAL_TIM_MspPostInit+0x184>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	4a10      	ldr	r2, [pc, #64]	; (8004464 <HAL_TIM_MspPostInit+0x184>)
 8004424:	f043 0320 	orr.w	r3, r3, #32
 8004428:	6313      	str	r3, [r2, #48]	; 0x30
 800442a:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <HAL_TIM_MspPostInit+0x184>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004436:	2340      	movs	r3, #64	; 0x40
 8004438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443a:	2302      	movs	r3, #2
 800443c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800443e:	2301      	movs	r3, #1
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004442:	2302      	movs	r3, #2
 8004444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004446:	2303      	movs	r3, #3
 8004448:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800444a:	f107 031c 	add.w	r3, r7, #28
 800444e:	4619      	mov	r1, r3
 8004450:	480c      	ldr	r0, [pc, #48]	; (8004484 <HAL_TIM_MspPostInit+0x1a4>)
 8004452:	f001 ffaf 	bl	80063b4 <HAL_GPIO_Init>
}
 8004456:	bf00      	nop
 8004458:	3730      	adds	r7, #48	; 0x30
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40010000 	.word	0x40010000
 8004464:	40023800 	.word	0x40023800
 8004468:	40021000 	.word	0x40021000
 800446c:	40000800 	.word	0x40000800
 8004470:	40020c00 	.word	0x40020c00
 8004474:	40010400 	.word	0x40010400
 8004478:	40022000 	.word	0x40022000
 800447c:	40020800 	.word	0x40020800
 8004480:	40014400 	.word	0x40014400
 8004484:	40021400 	.word	0x40021400

08004488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08e      	sub	sp, #56	; 0x38
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	609a      	str	r2, [r3, #8]
 800449c:	60da      	str	r2, [r3, #12]
 800449e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a90      	ldr	r2, [pc, #576]	; (80046e8 <HAL_UART_MspInit+0x260>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	f040 80b2 	bne.w	8004610 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80044ac:	2300      	movs	r3, #0
 80044ae:	623b      	str	r3, [r7, #32]
 80044b0:	4b8e      	ldr	r3, [pc, #568]	; (80046ec <HAL_UART_MspInit+0x264>)
 80044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b4:	4a8d      	ldr	r2, [pc, #564]	; (80046ec <HAL_UART_MspInit+0x264>)
 80044b6:	f043 0310 	orr.w	r3, r3, #16
 80044ba:	6453      	str	r3, [r2, #68]	; 0x44
 80044bc:	4b8b      	ldr	r3, [pc, #556]	; (80046ec <HAL_UART_MspInit+0x264>)
 80044be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	623b      	str	r3, [r7, #32]
 80044c6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	4b87      	ldr	r3, [pc, #540]	; (80046ec <HAL_UART_MspInit+0x264>)
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	4a86      	ldr	r2, [pc, #536]	; (80046ec <HAL_UART_MspInit+0x264>)
 80044d2:	f043 0302 	orr.w	r3, r3, #2
 80044d6:	6313      	str	r3, [r2, #48]	; 0x30
 80044d8:	4b84      	ldr	r3, [pc, #528]	; (80046ec <HAL_UART_MspInit+0x264>)
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044e4:	2300      	movs	r3, #0
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	4b80      	ldr	r3, [pc, #512]	; (80046ec <HAL_UART_MspInit+0x264>)
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	4a7f      	ldr	r2, [pc, #508]	; (80046ec <HAL_UART_MspInit+0x264>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	6313      	str	r3, [r2, #48]	; 0x30
 80044f4:	4b7d      	ldr	r3, [pc, #500]	; (80046ec <HAL_UART_MspInit+0x264>)
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004500:	2380      	movs	r3, #128	; 0x80
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004504:	2302      	movs	r3, #2
 8004506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004508:	2300      	movs	r3, #0
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800450c:	2303      	movs	r3, #3
 800450e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004510:	2307      	movs	r3, #7
 8004512:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004518:	4619      	mov	r1, r3
 800451a:	4875      	ldr	r0, [pc, #468]	; (80046f0 <HAL_UART_MspInit+0x268>)
 800451c:	f001 ff4a 	bl	80063b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004526:	2302      	movs	r3, #2
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452a:	2300      	movs	r3, #0
 800452c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800452e:	2303      	movs	r3, #3
 8004530:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004532:	2307      	movs	r3, #7
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800453a:	4619      	mov	r1, r3
 800453c:	486d      	ldr	r0, [pc, #436]	; (80046f4 <HAL_UART_MspInit+0x26c>)
 800453e:	f001 ff39 	bl	80063b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004542:	4b6d      	ldr	r3, [pc, #436]	; (80046f8 <HAL_UART_MspInit+0x270>)
 8004544:	4a6d      	ldr	r2, [pc, #436]	; (80046fc <HAL_UART_MspInit+0x274>)
 8004546:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004548:	4b6b      	ldr	r3, [pc, #428]	; (80046f8 <HAL_UART_MspInit+0x270>)
 800454a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800454e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004550:	4b69      	ldr	r3, [pc, #420]	; (80046f8 <HAL_UART_MspInit+0x270>)
 8004552:	2240      	movs	r2, #64	; 0x40
 8004554:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004556:	4b68      	ldr	r3, [pc, #416]	; (80046f8 <HAL_UART_MspInit+0x270>)
 8004558:	2200      	movs	r2, #0
 800455a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800455c:	4b66      	ldr	r3, [pc, #408]	; (80046f8 <HAL_UART_MspInit+0x270>)
 800455e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004562:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004564:	4b64      	ldr	r3, [pc, #400]	; (80046f8 <HAL_UART_MspInit+0x270>)
 8004566:	2200      	movs	r2, #0
 8004568:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800456a:	4b63      	ldr	r3, [pc, #396]	; (80046f8 <HAL_UART_MspInit+0x270>)
 800456c:	2200      	movs	r2, #0
 800456e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004570:	4b61      	ldr	r3, [pc, #388]	; (80046f8 <HAL_UART_MspInit+0x270>)
 8004572:	2200      	movs	r2, #0
 8004574:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004576:	4b60      	ldr	r3, [pc, #384]	; (80046f8 <HAL_UART_MspInit+0x270>)
 8004578:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800457c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800457e:	4b5e      	ldr	r3, [pc, #376]	; (80046f8 <HAL_UART_MspInit+0x270>)
 8004580:	2200      	movs	r2, #0
 8004582:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004584:	485c      	ldr	r0, [pc, #368]	; (80046f8 <HAL_UART_MspInit+0x270>)
 8004586:	f001 fb13 	bl	8005bb0 <HAL_DMA_Init>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8004590:	f7ff f8f8 	bl	8003784 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a58      	ldr	r2, [pc, #352]	; (80046f8 <HAL_UART_MspInit+0x270>)
 8004598:	635a      	str	r2, [r3, #52]	; 0x34
 800459a:	4a57      	ldr	r2, [pc, #348]	; (80046f8 <HAL_UART_MspInit+0x270>)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80045a0:	4b57      	ldr	r3, [pc, #348]	; (8004700 <HAL_UART_MspInit+0x278>)
 80045a2:	4a58      	ldr	r2, [pc, #352]	; (8004704 <HAL_UART_MspInit+0x27c>)
 80045a4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80045a6:	4b56      	ldr	r3, [pc, #344]	; (8004700 <HAL_UART_MspInit+0x278>)
 80045a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045ac:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045ae:	4b54      	ldr	r3, [pc, #336]	; (8004700 <HAL_UART_MspInit+0x278>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045b4:	4b52      	ldr	r3, [pc, #328]	; (8004700 <HAL_UART_MspInit+0x278>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045ba:	4b51      	ldr	r3, [pc, #324]	; (8004700 <HAL_UART_MspInit+0x278>)
 80045bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045c2:	4b4f      	ldr	r3, [pc, #316]	; (8004700 <HAL_UART_MspInit+0x278>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045c8:	4b4d      	ldr	r3, [pc, #308]	; (8004700 <HAL_UART_MspInit+0x278>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80045ce:	4b4c      	ldr	r3, [pc, #304]	; (8004700 <HAL_UART_MspInit+0x278>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80045d4:	4b4a      	ldr	r3, [pc, #296]	; (8004700 <HAL_UART_MspInit+0x278>)
 80045d6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80045da:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045dc:	4b48      	ldr	r3, [pc, #288]	; (8004700 <HAL_UART_MspInit+0x278>)
 80045de:	2200      	movs	r2, #0
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80045e2:	4847      	ldr	r0, [pc, #284]	; (8004700 <HAL_UART_MspInit+0x278>)
 80045e4:	f001 fae4 	bl	8005bb0 <HAL_DMA_Init>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80045ee:	f7ff f8c9 	bl	8003784 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a42      	ldr	r2, [pc, #264]	; (8004700 <HAL_UART_MspInit+0x278>)
 80045f6:	639a      	str	r2, [r3, #56]	; 0x38
 80045f8:	4a41      	ldr	r2, [pc, #260]	; (8004700 <HAL_UART_MspInit+0x278>)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80045fe:	2200      	movs	r2, #0
 8004600:	2105      	movs	r1, #5
 8004602:	2025      	movs	r0, #37	; 0x25
 8004604:	f001 fa9d 	bl	8005b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004608:	2025      	movs	r0, #37	; 0x25
 800460a:	f001 fab6 	bl	8005b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800460e:	e11c      	b.n	800484a <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a3c      	ldr	r2, [pc, #240]	; (8004708 <HAL_UART_MspInit+0x280>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d17e      	bne.n	8004718 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	4b33      	ldr	r3, [pc, #204]	; (80046ec <HAL_UART_MspInit+0x264>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	4a32      	ldr	r2, [pc, #200]	; (80046ec <HAL_UART_MspInit+0x264>)
 8004624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004628:	6413      	str	r3, [r2, #64]	; 0x40
 800462a:	4b30      	ldr	r3, [pc, #192]	; (80046ec <HAL_UART_MspInit+0x264>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	4b2c      	ldr	r3, [pc, #176]	; (80046ec <HAL_UART_MspInit+0x264>)
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	4a2b      	ldr	r2, [pc, #172]	; (80046ec <HAL_UART_MspInit+0x264>)
 8004640:	f043 0304 	orr.w	r3, r3, #4
 8004644:	6313      	str	r3, [r2, #48]	; 0x30
 8004646:	4b29      	ldr	r3, [pc, #164]	; (80046ec <HAL_UART_MspInit+0x264>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8004652:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004658:	2302      	movs	r3, #2
 800465a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465c:	2300      	movs	r3, #0
 800465e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004660:	2303      	movs	r3, #3
 8004662:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004664:	2307      	movs	r3, #7
 8004666:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800466c:	4619      	mov	r1, r3
 800466e:	4827      	ldr	r0, [pc, #156]	; (800470c <HAL_UART_MspInit+0x284>)
 8004670:	f001 fea0 	bl	80063b4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004674:	4b26      	ldr	r3, [pc, #152]	; (8004710 <HAL_UART_MspInit+0x288>)
 8004676:	4a27      	ldr	r2, [pc, #156]	; (8004714 <HAL_UART_MspInit+0x28c>)
 8004678:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800467a:	4b25      	ldr	r3, [pc, #148]	; (8004710 <HAL_UART_MspInit+0x288>)
 800467c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004680:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004682:	4b23      	ldr	r3, [pc, #140]	; (8004710 <HAL_UART_MspInit+0x288>)
 8004684:	2200      	movs	r2, #0
 8004686:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004688:	4b21      	ldr	r3, [pc, #132]	; (8004710 <HAL_UART_MspInit+0x288>)
 800468a:	2200      	movs	r2, #0
 800468c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800468e:	4b20      	ldr	r3, [pc, #128]	; (8004710 <HAL_UART_MspInit+0x288>)
 8004690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004694:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004696:	4b1e      	ldr	r3, [pc, #120]	; (8004710 <HAL_UART_MspInit+0x288>)
 8004698:	2200      	movs	r2, #0
 800469a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800469c:	4b1c      	ldr	r3, [pc, #112]	; (8004710 <HAL_UART_MspInit+0x288>)
 800469e:	2200      	movs	r2, #0
 80046a0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80046a2:	4b1b      	ldr	r3, [pc, #108]	; (8004710 <HAL_UART_MspInit+0x288>)
 80046a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046a8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80046aa:	4b19      	ldr	r3, [pc, #100]	; (8004710 <HAL_UART_MspInit+0x288>)
 80046ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80046b0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046b2:	4b17      	ldr	r3, [pc, #92]	; (8004710 <HAL_UART_MspInit+0x288>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80046b8:	4815      	ldr	r0, [pc, #84]	; (8004710 <HAL_UART_MspInit+0x288>)
 80046ba:	f001 fa79 	bl	8005bb0 <HAL_DMA_Init>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <HAL_UART_MspInit+0x240>
      Error_Handler();
 80046c4:	f7ff f85e 	bl	8003784 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a11      	ldr	r2, [pc, #68]	; (8004710 <HAL_UART_MspInit+0x288>)
 80046cc:	639a      	str	r2, [r3, #56]	; 0x38
 80046ce:	4a10      	ldr	r2, [pc, #64]	; (8004710 <HAL_UART_MspInit+0x288>)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80046d4:	2200      	movs	r2, #0
 80046d6:	2105      	movs	r1, #5
 80046d8:	2027      	movs	r0, #39	; 0x27
 80046da:	f001 fa32 	bl	8005b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80046de:	2027      	movs	r0, #39	; 0x27
 80046e0:	f001 fa4b 	bl	8005b7a <HAL_NVIC_EnableIRQ>
}
 80046e4:	e0b1      	b.n	800484a <HAL_UART_MspInit+0x3c2>
 80046e6:	bf00      	nop
 80046e8:	40011000 	.word	0x40011000
 80046ec:	40023800 	.word	0x40023800
 80046f0:	40020400 	.word	0x40020400
 80046f4:	40020000 	.word	0x40020000
 80046f8:	20000b4c 	.word	0x20000b4c
 80046fc:	400264b8 	.word	0x400264b8
 8004700:	20000bac 	.word	0x20000bac
 8004704:	40026440 	.word	0x40026440
 8004708:	40004800 	.word	0x40004800
 800470c:	40020800 	.word	0x40020800
 8004710:	20000c0c 	.word	0x20000c0c
 8004714:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a4d      	ldr	r2, [pc, #308]	; (8004854 <HAL_UART_MspInit+0x3cc>)
 800471e:	4293      	cmp	r3, r2
 8004720:	f040 8093 	bne.w	800484a <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	4b4b      	ldr	r3, [pc, #300]	; (8004858 <HAL_UART_MspInit+0x3d0>)
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	4a4a      	ldr	r2, [pc, #296]	; (8004858 <HAL_UART_MspInit+0x3d0>)
 800472e:	f043 0320 	orr.w	r3, r3, #32
 8004732:	6453      	str	r3, [r2, #68]	; 0x44
 8004734:	4b48      	ldr	r3, [pc, #288]	; (8004858 <HAL_UART_MspInit+0x3d0>)
 8004736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004738:	f003 0320 	and.w	r3, r3, #32
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004740:	2300      	movs	r3, #0
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	4b44      	ldr	r3, [pc, #272]	; (8004858 <HAL_UART_MspInit+0x3d0>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	4a43      	ldr	r2, [pc, #268]	; (8004858 <HAL_UART_MspInit+0x3d0>)
 800474a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800474e:	6313      	str	r3, [r2, #48]	; 0x30
 8004750:	4b41      	ldr	r3, [pc, #260]	; (8004858 <HAL_UART_MspInit+0x3d0>)
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 800475c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004762:	2302      	movs	r3, #2
 8004764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004766:	2300      	movs	r3, #0
 8004768:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800476a:	2303      	movs	r3, #3
 800476c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800476e:	2308      	movs	r3, #8
 8004770:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004776:	4619      	mov	r1, r3
 8004778:	4838      	ldr	r0, [pc, #224]	; (800485c <HAL_UART_MspInit+0x3d4>)
 800477a:	f001 fe1b 	bl	80063b4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800477e:	4b38      	ldr	r3, [pc, #224]	; (8004860 <HAL_UART_MspInit+0x3d8>)
 8004780:	4a38      	ldr	r2, [pc, #224]	; (8004864 <HAL_UART_MspInit+0x3dc>)
 8004782:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004784:	4b36      	ldr	r3, [pc, #216]	; (8004860 <HAL_UART_MspInit+0x3d8>)
 8004786:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800478a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800478c:	4b34      	ldr	r3, [pc, #208]	; (8004860 <HAL_UART_MspInit+0x3d8>)
 800478e:	2200      	movs	r2, #0
 8004790:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004792:	4b33      	ldr	r3, [pc, #204]	; (8004860 <HAL_UART_MspInit+0x3d8>)
 8004794:	2200      	movs	r2, #0
 8004796:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004798:	4b31      	ldr	r3, [pc, #196]	; (8004860 <HAL_UART_MspInit+0x3d8>)
 800479a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800479e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047a0:	4b2f      	ldr	r3, [pc, #188]	; (8004860 <HAL_UART_MspInit+0x3d8>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047a6:	4b2e      	ldr	r3, [pc, #184]	; (8004860 <HAL_UART_MspInit+0x3d8>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80047ac:	4b2c      	ldr	r3, [pc, #176]	; (8004860 <HAL_UART_MspInit+0x3d8>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80047b2:	4b2b      	ldr	r3, [pc, #172]	; (8004860 <HAL_UART_MspInit+0x3d8>)
 80047b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80047b8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047ba:	4b29      	ldr	r3, [pc, #164]	; (8004860 <HAL_UART_MspInit+0x3d8>)
 80047bc:	2200      	movs	r2, #0
 80047be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80047c0:	4827      	ldr	r0, [pc, #156]	; (8004860 <HAL_UART_MspInit+0x3d8>)
 80047c2:	f001 f9f5 	bl	8005bb0 <HAL_DMA_Init>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <HAL_UART_MspInit+0x348>
      Error_Handler();
 80047cc:	f7fe ffda 	bl	8003784 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a23      	ldr	r2, [pc, #140]	; (8004860 <HAL_UART_MspInit+0x3d8>)
 80047d4:	639a      	str	r2, [r3, #56]	; 0x38
 80047d6:	4a22      	ldr	r2, [pc, #136]	; (8004860 <HAL_UART_MspInit+0x3d8>)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80047dc:	4b22      	ldr	r3, [pc, #136]	; (8004868 <HAL_UART_MspInit+0x3e0>)
 80047de:	4a23      	ldr	r2, [pc, #140]	; (800486c <HAL_UART_MspInit+0x3e4>)
 80047e0:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80047e2:	4b21      	ldr	r3, [pc, #132]	; (8004868 <HAL_UART_MspInit+0x3e0>)
 80047e4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80047e8:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047ea:	4b1f      	ldr	r3, [pc, #124]	; (8004868 <HAL_UART_MspInit+0x3e0>)
 80047ec:	2240      	movs	r2, #64	; 0x40
 80047ee:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047f0:	4b1d      	ldr	r3, [pc, #116]	; (8004868 <HAL_UART_MspInit+0x3e0>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047f6:	4b1c      	ldr	r3, [pc, #112]	; (8004868 <HAL_UART_MspInit+0x3e0>)
 80047f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047fc:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047fe:	4b1a      	ldr	r3, [pc, #104]	; (8004868 <HAL_UART_MspInit+0x3e0>)
 8004800:	2200      	movs	r2, #0
 8004802:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004804:	4b18      	ldr	r3, [pc, #96]	; (8004868 <HAL_UART_MspInit+0x3e0>)
 8004806:	2200      	movs	r2, #0
 8004808:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800480a:	4b17      	ldr	r3, [pc, #92]	; (8004868 <HAL_UART_MspInit+0x3e0>)
 800480c:	2200      	movs	r2, #0
 800480e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004810:	4b15      	ldr	r3, [pc, #84]	; (8004868 <HAL_UART_MspInit+0x3e0>)
 8004812:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004816:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004818:	4b13      	ldr	r3, [pc, #76]	; (8004868 <HAL_UART_MspInit+0x3e0>)
 800481a:	2200      	movs	r2, #0
 800481c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800481e:	4812      	ldr	r0, [pc, #72]	; (8004868 <HAL_UART_MspInit+0x3e0>)
 8004820:	f001 f9c6 	bl	8005bb0 <HAL_DMA_Init>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 800482a:	f7fe ffab 	bl	8003784 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a0d      	ldr	r2, [pc, #52]	; (8004868 <HAL_UART_MspInit+0x3e0>)
 8004832:	635a      	str	r2, [r3, #52]	; 0x34
 8004834:	4a0c      	ldr	r2, [pc, #48]	; (8004868 <HAL_UART_MspInit+0x3e0>)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800483a:	2200      	movs	r2, #0
 800483c:	2105      	movs	r1, #5
 800483e:	2047      	movs	r0, #71	; 0x47
 8004840:	f001 f97f 	bl	8005b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004844:	2047      	movs	r0, #71	; 0x47
 8004846:	f001 f998 	bl	8005b7a <HAL_NVIC_EnableIRQ>
}
 800484a:	bf00      	nop
 800484c:	3738      	adds	r7, #56	; 0x38
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40011400 	.word	0x40011400
 8004858:	40023800 	.word	0x40023800
 800485c:	40021800 	.word	0x40021800
 8004860:	20000c6c 	.word	0x20000c6c
 8004864:	40026428 	.word	0x40026428
 8004868:	20000ccc 	.word	0x20000ccc
 800486c:	400264a0 	.word	0x400264a0

08004870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004874:	f003 fb90 	bl	8007f98 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004878:	e7fe      	b.n	8004878 <NMI_Handler+0x8>

0800487a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800487a:	b480      	push	{r7}
 800487c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800487e:	e7fe      	b.n	800487e <HardFault_Handler+0x4>

08004880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004884:	e7fe      	b.n	8004884 <MemManage_Handler+0x4>

08004886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004886:	b480      	push	{r7}
 8004888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800488a:	e7fe      	b.n	800488a <BusFault_Handler+0x4>

0800488c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004890:	e7fe      	b.n	8004890 <UsageFault_Handler+0x4>

08004892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004892:	b480      	push	{r7}
 8004894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004896:	bf00      	nop
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048a4:	f000 f9cc 	bl	8004c40 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80048a8:	f007 fe88 	bl	800c5bc <xTaskGetSchedulerState>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d001      	beq.n	80048b6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80048b2:	f008 fd51 	bl	800d358 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048b6:	bf00      	nop
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80048c0:	2008      	movs	r0, #8
 80048c2:	f001 ff2d 	bl	8006720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 80048c6:	4802      	ldr	r0, [pc, #8]	; (80048d0 <EXTI3_IRQHandler+0x14>)
 80048c8:	f7fd fe00 	bl	80024cc <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 80048cc:	bf00      	nop
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000858 	.word	0x20000858

080048d4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 80048d8:	2010      	movs	r0, #16
 80048da:	f001 ff21 	bl	8006720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80048de:	bf00      	nop
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80048e8:	4802      	ldr	r0, [pc, #8]	; (80048f4 <DMA1_Stream1_IRQHandler+0x10>)
 80048ea:	f001 faf9 	bl	8005ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000c0c 	.word	0x20000c0c

080048f8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80048fc:	4802      	ldr	r0, [pc, #8]	; (8004908 <CAN1_RX0_IRQHandler+0x10>)
 80048fe:	f000 fe16 	bl	800552e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004902:	bf00      	nop
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20000864 	.word	0x20000864

0800490c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004910:	4802      	ldr	r0, [pc, #8]	; (800491c <USART1_IRQHandler+0x10>)
 8004912:	f004 ff2b 	bl	800976c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004916:	bf00      	nop
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000a80 	.word	0x20000a80

08004920 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004924:	4802      	ldr	r0, [pc, #8]	; (8004930 <DMA2_Stream1_IRQHandler+0x10>)
 8004926:	f001 fadb 	bl	8005ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800492a:	bf00      	nop
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000c6c 	.word	0x20000c6c

08004934 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004938:	4802      	ldr	r0, [pc, #8]	; (8004944 <DMA2_Stream2_IRQHandler+0x10>)
 800493a:	f001 fad1 	bl	8005ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800493e:	bf00      	nop
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000bac 	.word	0x20000bac

08004948 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800494c:	4802      	ldr	r0, [pc, #8]	; (8004958 <CAN2_RX0_IRQHandler+0x10>)
 800494e:	f000 fdee 	bl	800552e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004952:	bf00      	nop
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	2000088c 	.word	0x2000088c

0800495c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8004960:	4802      	ldr	r0, [pc, #8]	; (800496c <DMA2_Stream6_IRQHandler+0x10>)
 8004962:	f001 fabd 	bl	8005ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004966:	bf00      	nop
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20000ccc 	.word	0x20000ccc

08004970 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004974:	4802      	ldr	r0, [pc, #8]	; (8004980 <DMA2_Stream7_IRQHandler+0x10>)
 8004976:	f001 fab3 	bl	8005ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800497a:	bf00      	nop
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000b4c 	.word	0x20000b4c

08004984 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004988:	4802      	ldr	r0, [pc, #8]	; (8004994 <USART6_IRQHandler+0x10>)
 800498a:	f004 feef 	bl	800976c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800498e:	bf00      	nop
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000b08 	.word	0x20000b08

08004998 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  return 1;
 800499c:	2301      	movs	r3, #1
}
 800499e:	4618      	mov	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <_kill>:

int _kill(int pid, int sig)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80049b2:	f009 fd6d 	bl	800e490 <__errno>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2216      	movs	r2, #22
 80049ba:	601a      	str	r2, [r3, #0]
  return -1;
 80049bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <_exit>:

void _exit (int status)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80049d0:	f04f 31ff 	mov.w	r1, #4294967295
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7ff ffe7 	bl	80049a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80049da:	e7fe      	b.n	80049da <_exit+0x12>

080049dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e00a      	b.n	8004a04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80049ee:	f3af 8000 	nop.w
 80049f2:	4601      	mov	r1, r0
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	60ba      	str	r2, [r7, #8]
 80049fa:	b2ca      	uxtb	r2, r1
 80049fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	3301      	adds	r3, #1
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	dbf0      	blt.n	80049ee <_read+0x12>
  }

  return len;
 8004a0c:	687b      	ldr	r3, [r7, #4]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b086      	sub	sp, #24
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]
 8004a26:	e009      	b.n	8004a3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	60ba      	str	r2, [r7, #8]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	dbf1      	blt.n	8004a28 <_write+0x12>
  }
  return len;
 8004a44:	687b      	ldr	r3, [r7, #4]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <_close>:

int _close(int file)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
 8004a6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a76:	605a      	str	r2, [r3, #4]
  return 0;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <_isatty>:

int _isatty(int file)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004a8e:	2301      	movs	r3, #1
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
	...

08004ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ac0:	4a14      	ldr	r2, [pc, #80]	; (8004b14 <_sbrk+0x5c>)
 8004ac2:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <_sbrk+0x60>)
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004acc:	4b13      	ldr	r3, [pc, #76]	; (8004b1c <_sbrk+0x64>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ad4:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <_sbrk+0x64>)
 8004ad6:	4a12      	ldr	r2, [pc, #72]	; (8004b20 <_sbrk+0x68>)
 8004ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ada:	4b10      	ldr	r3, [pc, #64]	; (8004b1c <_sbrk+0x64>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d207      	bcs.n	8004af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ae8:	f009 fcd2 	bl	800e490 <__errno>
 8004aec:	4603      	mov	r3, r0
 8004aee:	220c      	movs	r2, #12
 8004af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004af2:	f04f 33ff 	mov.w	r3, #4294967295
 8004af6:	e009      	b.n	8004b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004af8:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <_sbrk+0x64>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004afe:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <_sbrk+0x64>)
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4413      	add	r3, r2
 8004b06:	4a05      	ldr	r2, [pc, #20]	; (8004b1c <_sbrk+0x64>)
 8004b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	20020000 	.word	0x20020000
 8004b18:	00000400 	.word	0x00000400
 8004b1c:	20000db8 	.word	0x20000db8
 8004b20:	200058f8 	.word	0x200058f8

08004b24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <SystemInit+0x20>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2e:	4a05      	ldr	r2, [pc, #20]	; (8004b44 <SystemInit+0x20>)
 8004b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b38:	bf00      	nop
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	e000ed00 	.word	0xe000ed00

08004b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b4c:	480d      	ldr	r0, [pc, #52]	; (8004b84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004b4e:	490e      	ldr	r1, [pc, #56]	; (8004b88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004b50:	4a0e      	ldr	r2, [pc, #56]	; (8004b8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b54:	e002      	b.n	8004b5c <LoopCopyDataInit>

08004b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b5a:	3304      	adds	r3, #4

08004b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b60:	d3f9      	bcc.n	8004b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b62:	4a0b      	ldr	r2, [pc, #44]	; (8004b90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004b64:	4c0b      	ldr	r4, [pc, #44]	; (8004b94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b68:	e001      	b.n	8004b6e <LoopFillZerobss>

08004b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b6c:	3204      	adds	r2, #4

08004b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b70:	d3fb      	bcc.n	8004b6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b72:	f7ff ffd7 	bl	8004b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b76:	f009 fc91 	bl	800e49c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b7a:	f7fd fdc7 	bl	800270c <main>
  bx  lr    
 8004b7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004b80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b88:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8004b8c:	08010b2c 	.word	0x08010b2c
  ldr r2, =_sbss
 8004b90:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8004b94:	200058f4 	.word	0x200058f4

08004b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b98:	e7fe      	b.n	8004b98 <ADC_IRQHandler>
	...

08004b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ba0:	4b0e      	ldr	r3, [pc, #56]	; (8004bdc <HAL_Init+0x40>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a0d      	ldr	r2, [pc, #52]	; (8004bdc <HAL_Init+0x40>)
 8004ba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004baa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004bac:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <HAL_Init+0x40>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <HAL_Init+0x40>)
 8004bb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bb8:	4b08      	ldr	r3, [pc, #32]	; (8004bdc <HAL_Init+0x40>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a07      	ldr	r2, [pc, #28]	; (8004bdc <HAL_Init+0x40>)
 8004bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bc4:	2003      	movs	r0, #3
 8004bc6:	f000 ffb1 	bl	8005b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bca:	200f      	movs	r0, #15
 8004bcc:	f000 f808 	bl	8004be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004bd0:	f7ff f968 	bl	8003ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	40023c00 	.word	0x40023c00

08004be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004be8:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <HAL_InitTick+0x54>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <HAL_InitTick+0x58>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 ffc9 	bl	8005b96 <HAL_SYSTICK_Config>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e00e      	b.n	8004c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b0f      	cmp	r3, #15
 8004c12:	d80a      	bhi.n	8004c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c14:	2200      	movs	r2, #0
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	f000 ff91 	bl	8005b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c20:	4a06      	ldr	r2, [pc, #24]	; (8004c3c <HAL_InitTick+0x5c>)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	e000      	b.n	8004c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	20000078 	.word	0x20000078
 8004c38:	20000080 	.word	0x20000080
 8004c3c:	2000007c 	.word	0x2000007c

08004c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c44:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <HAL_IncTick+0x20>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <HAL_IncTick+0x24>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4413      	add	r3, r2
 8004c50:	4a04      	ldr	r2, [pc, #16]	; (8004c64 <HAL_IncTick+0x24>)
 8004c52:	6013      	str	r3, [r2, #0]
}
 8004c54:	bf00      	nop
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20000080 	.word	0x20000080
 8004c64:	20000dbc 	.word	0x20000dbc

08004c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c6c:	4b03      	ldr	r3, [pc, #12]	; (8004c7c <HAL_GetTick+0x14>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	20000dbc 	.word	0x20000dbc

08004c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c88:	f7ff ffee 	bl	8004c68 <HAL_GetTick>
 8004c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d005      	beq.n	8004ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c9a:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <HAL_Delay+0x44>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ca6:	bf00      	nop
 8004ca8:	f7ff ffde 	bl	8004c68 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d8f7      	bhi.n	8004ca8 <HAL_Delay+0x28>
  {
  }
}
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000080 	.word	0x20000080

08004cc8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e0ed      	b.n	8004eb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff f908 	bl	8003efc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cfc:	f7ff ffb4 	bl	8004c68 <HAL_GetTick>
 8004d00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d02:	e012      	b.n	8004d2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d04:	f7ff ffb0 	bl	8004c68 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b0a      	cmp	r3, #10
 8004d10:	d90b      	bls.n	8004d2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2205      	movs	r2, #5
 8004d22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e0c5      	b.n	8004eb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0e5      	beq.n	8004d04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0202 	bic.w	r2, r2, #2
 8004d46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d48:	f7ff ff8e 	bl	8004c68 <HAL_GetTick>
 8004d4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d4e:	e012      	b.n	8004d76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d50:	f7ff ff8a 	bl	8004c68 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b0a      	cmp	r3, #10
 8004d5c:	d90b      	bls.n	8004d76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2205      	movs	r2, #5
 8004d6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e09f      	b.n	8004eb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e5      	bne.n	8004d50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	7e1b      	ldrb	r3, [r3, #24]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d108      	bne.n	8004d9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	e007      	b.n	8004dae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	7e5b      	ldrb	r3, [r3, #25]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d108      	bne.n	8004dc8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	e007      	b.n	8004dd8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	7e9b      	ldrb	r3, [r3, #26]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d108      	bne.n	8004df2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0220 	orr.w	r2, r2, #32
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e007      	b.n	8004e02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0220 	bic.w	r2, r2, #32
 8004e00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	7edb      	ldrb	r3, [r3, #27]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d108      	bne.n	8004e1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0210 	bic.w	r2, r2, #16
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	e007      	b.n	8004e2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0210 	orr.w	r2, r2, #16
 8004e2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	7f1b      	ldrb	r3, [r3, #28]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d108      	bne.n	8004e46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0208 	orr.w	r2, r2, #8
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	e007      	b.n	8004e56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0208 	bic.w	r2, r2, #8
 8004e54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	7f5b      	ldrb	r3, [r3, #29]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d108      	bne.n	8004e70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f042 0204 	orr.w	r2, r2, #4
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	e007      	b.n	8004e80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0204 	bic.w	r2, r2, #4
 8004e7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	ea42 0103 	orr.w	r1, r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	1e5a      	subs	r2, r3, #1
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ed6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d003      	beq.n	8004ee6 <HAL_CAN_ConfigFilter+0x26>
 8004ede:	7cfb      	ldrb	r3, [r7, #19]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	f040 80be 	bne.w	8005062 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004ee6:	4b65      	ldr	r3, [pc, #404]	; (800507c <HAL_CAN_ConfigFilter+0x1bc>)
 8004ee8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ef0:	f043 0201 	orr.w	r2, r3, #1
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f00:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	431a      	orrs	r2, r3
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f003 031f 	and.w	r3, r3, #31
 8004f26:	2201      	movs	r2, #1
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	43db      	mvns	r3, r3
 8004f38:	401a      	ands	r2, r3
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d123      	bne.n	8004f90 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	43db      	mvns	r3, r3
 8004f52:	401a      	ands	r2, r3
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004f6a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	3248      	adds	r2, #72	; 0x48
 8004f70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f86:	6979      	ldr	r1, [r7, #20]
 8004f88:	3348      	adds	r3, #72	; 0x48
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	440b      	add	r3, r1
 8004f8e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d122      	bne.n	8004fde <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004fb8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	3248      	adds	r2, #72	; 0x48
 8004fbe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004fd2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004fd4:	6979      	ldr	r1, [r7, #20]
 8004fd6:	3348      	adds	r3, #72	; 0x48
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	440b      	add	r3, r1
 8004fdc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d109      	bne.n	8004ffa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	401a      	ands	r2, r3
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004ff8:	e007      	b.n	800500a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	431a      	orrs	r2, r3
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d109      	bne.n	8005026 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	43db      	mvns	r3, r3
 800501c:	401a      	ands	r2, r3
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005024:	e007      	b.n	8005036 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	431a      	orrs	r2, r3
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d107      	bne.n	800504e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	431a      	orrs	r2, r3
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005054:	f023 0201 	bic.w	r2, r3, #1
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	e006      	b.n	8005070 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
  }
}
 8005070:	4618      	mov	r0, r3
 8005072:	371c      	adds	r7, #28
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	40006400 	.word	0x40006400

08005080 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b01      	cmp	r3, #1
 8005092:	d12e      	bne.n	80050f2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0201 	bic.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050ac:	f7ff fddc 	bl	8004c68 <HAL_GetTick>
 80050b0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80050b2:	e012      	b.n	80050da <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80050b4:	f7ff fdd8 	bl	8004c68 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b0a      	cmp	r3, #10
 80050c0:	d90b      	bls.n	80050da <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2205      	movs	r2, #5
 80050d2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e012      	b.n	8005100 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e5      	bne.n	80050b4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	e006      	b.n	8005100 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
  }
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005108:	b480      	push	{r7}
 800510a:	b089      	sub	sp, #36	; 0x24
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800511c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005126:	7ffb      	ldrb	r3, [r7, #31]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d003      	beq.n	8005134 <HAL_CAN_AddTxMessage+0x2c>
 800512c:	7ffb      	ldrb	r3, [r7, #31]
 800512e:	2b02      	cmp	r3, #2
 8005130:	f040 80b8 	bne.w	80052a4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10a      	bne.n	8005154 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005144:	2b00      	cmp	r3, #0
 8005146:	d105      	bne.n	8005154 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 80a0 	beq.w	8005294 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	0e1b      	lsrs	r3, r3, #24
 8005158:	f003 0303 	and.w	r3, r3, #3
 800515c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b02      	cmp	r3, #2
 8005162:	d907      	bls.n	8005174 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e09e      	b.n	80052b2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005174:	2201      	movs	r2, #1
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	409a      	lsls	r2, r3
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10d      	bne.n	80051a2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005190:	68f9      	ldr	r1, [r7, #12]
 8005192:	6809      	ldr	r1, [r1, #0]
 8005194:	431a      	orrs	r2, r3
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	3318      	adds	r3, #24
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	440b      	add	r3, r1
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	e00f      	b.n	80051c2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80051ac:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80051b2:	68f9      	ldr	r1, [r7, #12]
 80051b4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80051b6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	3318      	adds	r3, #24
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	440b      	add	r3, r1
 80051c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6819      	ldr	r1, [r3, #0]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	691a      	ldr	r2, [r3, #16]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	3318      	adds	r3, #24
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	440b      	add	r3, r1
 80051d2:	3304      	adds	r3, #4
 80051d4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	7d1b      	ldrb	r3, [r3, #20]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d111      	bne.n	8005202 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	3318      	adds	r3, #24
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	4413      	add	r3, r2
 80051ea:	3304      	adds	r3, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	6811      	ldr	r1, [r2, #0]
 80051f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	3318      	adds	r3, #24
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	440b      	add	r3, r1
 80051fe:	3304      	adds	r3, #4
 8005200:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3307      	adds	r3, #7
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	061a      	lsls	r2, r3, #24
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	3306      	adds	r3, #6
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	041b      	lsls	r3, r3, #16
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3305      	adds	r3, #5
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	021b      	lsls	r3, r3, #8
 800521c:	4313      	orrs	r3, r2
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	3204      	adds	r2, #4
 8005222:	7812      	ldrb	r2, [r2, #0]
 8005224:	4610      	mov	r0, r2
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	6811      	ldr	r1, [r2, #0]
 800522a:	ea43 0200 	orr.w	r2, r3, r0
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	440b      	add	r3, r1
 8005234:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005238:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3303      	adds	r3, #3
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	061a      	lsls	r2, r3, #24
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	3302      	adds	r3, #2
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	041b      	lsls	r3, r3, #16
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3301      	adds	r3, #1
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	4313      	orrs	r3, r2
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	7812      	ldrb	r2, [r2, #0]
 800525a:	4610      	mov	r0, r2
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	6811      	ldr	r1, [r2, #0]
 8005260:	ea43 0200 	orr.w	r2, r3, r0
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	440b      	add	r3, r1
 800526a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800526e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	3318      	adds	r3, #24
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	4413      	add	r3, r2
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	6811      	ldr	r1, [r2, #0]
 8005282:	f043 0201 	orr.w	r2, r3, #1
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	3318      	adds	r3, #24
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	440b      	add	r3, r1
 800528e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005290:	2300      	movs	r3, #0
 8005292:	e00e      	b.n	80052b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e006      	b.n	80052b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
  }
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3724      	adds	r7, #36	; 0x24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80052be:	b480      	push	{r7}
 80052c0:	b087      	sub	sp, #28
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
 80052ca:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052d2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d003      	beq.n	80052e2 <HAL_CAN_GetRxMessage+0x24>
 80052da:	7dfb      	ldrb	r3, [r7, #23]
 80052dc:	2b02      	cmp	r3, #2
 80052de:	f040 80f3 	bne.w	80054c8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10e      	bne.n	8005306 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d116      	bne.n	8005324 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e0e7      	b.n	80054d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	f003 0303 	and.w	r3, r3, #3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d107      	bne.n	8005324 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e0d8      	b.n	80054d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	331b      	adds	r3, #27
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	4413      	add	r3, r2
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0204 	and.w	r2, r3, #4
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10c      	bne.n	800535c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	331b      	adds	r3, #27
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	4413      	add	r3, r2
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	0d5b      	lsrs	r3, r3, #21
 8005352:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	e00b      	b.n	8005374 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	331b      	adds	r3, #27
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	4413      	add	r3, r2
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	08db      	lsrs	r3, r3, #3
 800536c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	331b      	adds	r3, #27
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	4413      	add	r3, r2
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0202 	and.w	r2, r3, #2
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	331b      	adds	r3, #27
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	4413      	add	r3, r2
 8005396:	3304      	adds	r3, #4
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 020f 	and.w	r2, r3, #15
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	331b      	adds	r3, #27
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	4413      	add	r3, r2
 80053ae:	3304      	adds	r3, #4
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	0a1b      	lsrs	r3, r3, #8
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	331b      	adds	r3, #27
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	4413      	add	r3, r2
 80053c6:	3304      	adds	r3, #4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	0c1b      	lsrs	r3, r3, #16
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	4413      	add	r3, r2
 80053dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	0a1a      	lsrs	r2, r3, #8
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	3301      	adds	r3, #1
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	4413      	add	r3, r2
 800540c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	0c1a      	lsrs	r2, r3, #16
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	3302      	adds	r3, #2
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	4413      	add	r3, r2
 8005426:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	0e1a      	lsrs	r2, r3, #24
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	3303      	adds	r3, #3
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	011b      	lsls	r3, r3, #4
 800543e:	4413      	add	r3, r2
 8005440:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	3304      	adds	r3, #4
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	4413      	add	r3, r2
 8005458:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	0a1a      	lsrs	r2, r3, #8
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	3305      	adds	r3, #5
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	4413      	add	r3, r2
 8005472:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	0c1a      	lsrs	r2, r3, #16
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	3306      	adds	r3, #6
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	4413      	add	r3, r2
 800548c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	0e1a      	lsrs	r2, r3, #24
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	3307      	adds	r3, #7
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d108      	bne.n	80054b4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0220 	orr.w	r2, r2, #32
 80054b0:	60da      	str	r2, [r3, #12]
 80054b2:	e007      	b.n	80054c4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691a      	ldr	r2, [r3, #16]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0220 	orr.w	r2, r2, #32
 80054c2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	e006      	b.n	80054d6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
  }
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	371c      	adds	r7, #28
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b085      	sub	sp, #20
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054f2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d002      	beq.n	8005500 <HAL_CAN_ActivateNotification+0x1e>
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d109      	bne.n	8005514 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6959      	ldr	r1, [r3, #20]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	e006      	b.n	8005522 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
  }
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b08a      	sub	sp, #40	; 0x28
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005536:	2300      	movs	r3, #0
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d07c      	beq.n	800566e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d023      	beq.n	80055c6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2201      	movs	r2, #1
 8005584:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f983 	bl	800589c <HAL_CAN_TxMailbox0CompleteCallback>
 8005596:	e016      	b.n	80055c6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d004      	beq.n	80055ac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
 80055aa:	e00c      	b.n	80055c6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d004      	beq.n	80055c0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
 80055be:	e002      	b.n	80055c6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f989 	bl	80058d8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d024      	beq.n	800561a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f963 	bl	80058b0 <HAL_CAN_TxMailbox1CompleteCallback>
 80055ea:	e016      	b.n	800561a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
 80055fe:	e00c      	b.n	800561a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005606:	2b00      	cmp	r3, #0
 8005608:	d004      	beq.n	8005614 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
 8005612:	e002      	b.n	800561a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f969 	bl	80058ec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d024      	beq.n	800566e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800562c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f943 	bl	80058c4 <HAL_CAN_TxMailbox2CompleteCallback>
 800563e:	e016      	b.n	800566e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d004      	beq.n	8005654 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
 8005652:	e00c      	b.n	800566e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d004      	beq.n	8005668 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005664:	627b      	str	r3, [r7, #36]	; 0x24
 8005666:	e002      	b.n	800566e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f949 	bl	8005900 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00c      	beq.n	8005692 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f003 0310 	and.w	r3, r3, #16
 800567e:	2b00      	cmp	r3, #0
 8005680:	d007      	beq.n	8005692 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005688:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2210      	movs	r2, #16
 8005690:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00b      	beq.n	80056b4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d006      	beq.n	80056b4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2208      	movs	r2, #8
 80056ac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f930 	bl	8005914 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d009      	beq.n	80056d2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0303 	and.w	r3, r3, #3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7fb ff3b 	bl	8001548 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00c      	beq.n	80056f6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f003 0310 	and.w	r3, r3, #16
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d007      	beq.n	80056f6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2210      	movs	r2, #16
 80056f4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d006      	beq.n	8005718 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2208      	movs	r2, #8
 8005710:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f912 	bl	800593c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	f003 0310 	and.w	r3, r3, #16
 800571e:	2b00      	cmp	r3, #0
 8005720:	d009      	beq.n	8005736 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f8f9 	bl	8005928 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00b      	beq.n	8005758 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f003 0310 	and.w	r3, r3, #16
 8005746:	2b00      	cmp	r3, #0
 8005748:	d006      	beq.n	8005758 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2210      	movs	r2, #16
 8005750:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f8fc 	bl	8005950 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00b      	beq.n	800577a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	2b00      	cmp	r3, #0
 800576a:	d006      	beq.n	800577a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2208      	movs	r2, #8
 8005772:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f8f5 	bl	8005964 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d07b      	beq.n	800587c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f003 0304 	and.w	r3, r3, #4
 800578a:	2b00      	cmp	r3, #0
 800578c:	d072      	beq.n	8005874 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005794:	2b00      	cmp	r3, #0
 8005796:	d008      	beq.n	80057aa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	f043 0301 	orr.w	r3, r3, #1
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d008      	beq.n	80057c6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	f043 0302 	orr.w	r3, r3, #2
 80057c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d008      	beq.n	80057e2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	f043 0304 	orr.w	r3, r3, #4
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d043      	beq.n	8005874 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d03e      	beq.n	8005874 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057fc:	2b60      	cmp	r3, #96	; 0x60
 80057fe:	d02b      	beq.n	8005858 <HAL_CAN_IRQHandler+0x32a>
 8005800:	2b60      	cmp	r3, #96	; 0x60
 8005802:	d82e      	bhi.n	8005862 <HAL_CAN_IRQHandler+0x334>
 8005804:	2b50      	cmp	r3, #80	; 0x50
 8005806:	d022      	beq.n	800584e <HAL_CAN_IRQHandler+0x320>
 8005808:	2b50      	cmp	r3, #80	; 0x50
 800580a:	d82a      	bhi.n	8005862 <HAL_CAN_IRQHandler+0x334>
 800580c:	2b40      	cmp	r3, #64	; 0x40
 800580e:	d019      	beq.n	8005844 <HAL_CAN_IRQHandler+0x316>
 8005810:	2b40      	cmp	r3, #64	; 0x40
 8005812:	d826      	bhi.n	8005862 <HAL_CAN_IRQHandler+0x334>
 8005814:	2b30      	cmp	r3, #48	; 0x30
 8005816:	d010      	beq.n	800583a <HAL_CAN_IRQHandler+0x30c>
 8005818:	2b30      	cmp	r3, #48	; 0x30
 800581a:	d822      	bhi.n	8005862 <HAL_CAN_IRQHandler+0x334>
 800581c:	2b10      	cmp	r3, #16
 800581e:	d002      	beq.n	8005826 <HAL_CAN_IRQHandler+0x2f8>
 8005820:	2b20      	cmp	r3, #32
 8005822:	d005      	beq.n	8005830 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005824:	e01d      	b.n	8005862 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	f043 0308 	orr.w	r3, r3, #8
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800582e:	e019      	b.n	8005864 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	f043 0310 	orr.w	r3, r3, #16
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005838:	e014      	b.n	8005864 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	f043 0320 	orr.w	r3, r3, #32
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005842:	e00f      	b.n	8005864 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800584c:	e00a      	b.n	8005864 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005856:	e005      	b.n	8005864 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005860:	e000      	b.n	8005864 <HAL_CAN_IRQHandler+0x336>
            break;
 8005862:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005872:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2204      	movs	r2, #4
 800587a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	2b00      	cmp	r3, #0
 8005880:	d008      	beq.n	8005894 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f872 	bl	8005978 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005894:	bf00      	nop
 8005896:	3728      	adds	r7, #40	; 0x28
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800599c:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <__NVIC_SetPriorityGrouping+0x44>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059a8:	4013      	ands	r3, r2
 80059aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059be:	4a04      	ldr	r2, [pc, #16]	; (80059d0 <__NVIC_SetPriorityGrouping+0x44>)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	60d3      	str	r3, [r2, #12]
}
 80059c4:	bf00      	nop
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	e000ed00 	.word	0xe000ed00

080059d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059d8:	4b04      	ldr	r3, [pc, #16]	; (80059ec <__NVIC_GetPriorityGrouping+0x18>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	0a1b      	lsrs	r3, r3, #8
 80059de:	f003 0307 	and.w	r3, r3, #7
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	e000ed00 	.word	0xe000ed00

080059f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	db0b      	blt.n	8005a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a02:	79fb      	ldrb	r3, [r7, #7]
 8005a04:	f003 021f 	and.w	r2, r3, #31
 8005a08:	4907      	ldr	r1, [pc, #28]	; (8005a28 <__NVIC_EnableIRQ+0x38>)
 8005a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a0e:	095b      	lsrs	r3, r3, #5
 8005a10:	2001      	movs	r0, #1
 8005a12:	fa00 f202 	lsl.w	r2, r0, r2
 8005a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	e000e100 	.word	0xe000e100

08005a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	6039      	str	r1, [r7, #0]
 8005a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	db0a      	blt.n	8005a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	490c      	ldr	r1, [pc, #48]	; (8005a78 <__NVIC_SetPriority+0x4c>)
 8005a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a4a:	0112      	lsls	r2, r2, #4
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	440b      	add	r3, r1
 8005a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a54:	e00a      	b.n	8005a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	4908      	ldr	r1, [pc, #32]	; (8005a7c <__NVIC_SetPriority+0x50>)
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	3b04      	subs	r3, #4
 8005a64:	0112      	lsls	r2, r2, #4
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	440b      	add	r3, r1
 8005a6a:	761a      	strb	r2, [r3, #24]
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	e000e100 	.word	0xe000e100
 8005a7c:	e000ed00 	.word	0xe000ed00

08005a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b089      	sub	sp, #36	; 0x24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f003 0307 	and.w	r3, r3, #7
 8005a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	f1c3 0307 	rsb	r3, r3, #7
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	bf28      	it	cs
 8005a9e:	2304      	movcs	r3, #4
 8005aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	2b06      	cmp	r3, #6
 8005aa8:	d902      	bls.n	8005ab0 <NVIC_EncodePriority+0x30>
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	3b03      	subs	r3, #3
 8005aae:	e000      	b.n	8005ab2 <NVIC_EncodePriority+0x32>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	fa02 f303 	lsl.w	r3, r2, r3
 8005abe:	43da      	mvns	r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	401a      	ands	r2, r3
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad2:	43d9      	mvns	r1, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ad8:	4313      	orrs	r3, r2
         );
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3724      	adds	r7, #36	; 0x24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
	...

08005ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005af8:	d301      	bcc.n	8005afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005afa:	2301      	movs	r3, #1
 8005afc:	e00f      	b.n	8005b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005afe:	4a0a      	ldr	r2, [pc, #40]	; (8005b28 <SysTick_Config+0x40>)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b06:	210f      	movs	r1, #15
 8005b08:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0c:	f7ff ff8e 	bl	8005a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <SysTick_Config+0x40>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b16:	4b04      	ldr	r3, [pc, #16]	; (8005b28 <SysTick_Config+0x40>)
 8005b18:	2207      	movs	r2, #7
 8005b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	e000e010 	.word	0xe000e010

08005b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff ff29 	bl	800598c <__NVIC_SetPriorityGrouping>
}
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b086      	sub	sp, #24
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	4603      	mov	r3, r0
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	607a      	str	r2, [r7, #4]
 8005b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b54:	f7ff ff3e 	bl	80059d4 <__NVIC_GetPriorityGrouping>
 8005b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	68b9      	ldr	r1, [r7, #8]
 8005b5e:	6978      	ldr	r0, [r7, #20]
 8005b60:	f7ff ff8e 	bl	8005a80 <NVIC_EncodePriority>
 8005b64:	4602      	mov	r2, r0
 8005b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b6a:	4611      	mov	r1, r2
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff ff5d 	bl	8005a2c <__NVIC_SetPriority>
}
 8005b72:	bf00      	nop
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	4603      	mov	r3, r0
 8005b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff ff31 	bl	80059f0 <__NVIC_EnableIRQ>
}
 8005b8e:	bf00      	nop
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b082      	sub	sp, #8
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7ff ffa2 	bl	8005ae8 <SysTick_Config>
 8005ba4:	4603      	mov	r3, r0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005bbc:	f7ff f854 	bl	8004c68 <HAL_GetTick>
 8005bc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e099      	b.n	8005d00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0201 	bic.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bec:	e00f      	b.n	8005c0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bee:	f7ff f83b 	bl	8004c68 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b05      	cmp	r3, #5
 8005bfa:	d908      	bls.n	8005c0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2203      	movs	r2, #3
 8005c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e078      	b.n	8005d00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e8      	bne.n	8005bee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4b38      	ldr	r3, [pc, #224]	; (8005d08 <HAL_DMA_Init+0x158>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d107      	bne.n	8005c78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c70:	4313      	orrs	r3, r2
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f023 0307 	bic.w	r3, r3, #7
 8005c8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d117      	bne.n	8005cd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00e      	beq.n	8005cd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fb01 	bl	80062bc <DMA_CheckFifoParam>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d008      	beq.n	8005cd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2240      	movs	r2, #64	; 0x40
 8005cc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e016      	b.n	8005d00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fab8 	bl	8006250 <DMA_CalcBaseAndBitshift>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce8:	223f      	movs	r2, #63	; 0x3f
 8005cea:	409a      	lsls	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	f010803f 	.word	0xf010803f

08005d0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d101      	bne.n	8005d32 <HAL_DMA_Start_IT+0x26>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e040      	b.n	8005db4 <HAL_DMA_Start_IT+0xa8>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d12f      	bne.n	8005da6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2202      	movs	r2, #2
 8005d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 fa4a 	bl	80061f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d64:	223f      	movs	r2, #63	; 0x3f
 8005d66:	409a      	lsls	r2, r3
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0216 	orr.w	r2, r2, #22
 8005d7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d007      	beq.n	8005d94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0208 	orr.w	r2, r2, #8
 8005d92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0201 	orr.w	r2, r2, #1
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	e005      	b.n	8005db2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005dae:	2302      	movs	r3, #2
 8005db0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005dca:	f7fe ff4d 	bl	8004c68 <HAL_GetTick>
 8005dce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d008      	beq.n	8005dee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2280      	movs	r2, #128	; 0x80
 8005de0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e052      	b.n	8005e94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0216 	bic.w	r2, r2, #22
 8005dfc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d103      	bne.n	8005e1e <HAL_DMA_Abort+0x62>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d007      	beq.n	8005e2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0208 	bic.w	r2, r2, #8
 8005e2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0201 	bic.w	r2, r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e3e:	e013      	b.n	8005e68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e40:	f7fe ff12 	bl	8004c68 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b05      	cmp	r3, #5
 8005e4c:	d90c      	bls.n	8005e68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2203      	movs	r2, #3
 8005e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e015      	b.n	8005e94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1e4      	bne.n	8005e40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e7a:	223f      	movs	r2, #63	; 0x3f
 8005e7c:	409a      	lsls	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d004      	beq.n	8005eba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2280      	movs	r2, #128	; 0x80
 8005eb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e00c      	b.n	8005ed4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2205      	movs	r2, #5
 8005ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0201 	bic.w	r2, r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005eec:	4b8e      	ldr	r3, [pc, #568]	; (8006128 <HAL_DMA_IRQHandler+0x248>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a8e      	ldr	r2, [pc, #568]	; (800612c <HAL_DMA_IRQHandler+0x24c>)
 8005ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef6:	0a9b      	lsrs	r3, r3, #10
 8005ef8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0a:	2208      	movs	r2, #8
 8005f0c:	409a      	lsls	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4013      	ands	r3, r2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d01a      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d013      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0204 	bic.w	r2, r2, #4
 8005f32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f38:	2208      	movs	r2, #8
 8005f3a:	409a      	lsls	r2, r3
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f44:	f043 0201 	orr.w	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f50:	2201      	movs	r2, #1
 8005f52:	409a      	lsls	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4013      	ands	r3, r2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d012      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00b      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6e:	2201      	movs	r2, #1
 8005f70:	409a      	lsls	r2, r3
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7a:	f043 0202 	orr.w	r2, r3, #2
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f86:	2204      	movs	r2, #4
 8005f88:	409a      	lsls	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d012      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00b      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa4:	2204      	movs	r2, #4
 8005fa6:	409a      	lsls	r2, r3
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb0:	f043 0204 	orr.w	r2, r3, #4
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fbc:	2210      	movs	r2, #16
 8005fbe:	409a      	lsls	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d043      	beq.n	8006050 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0308 	and.w	r3, r3, #8
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d03c      	beq.n	8006050 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fda:	2210      	movs	r2, #16
 8005fdc:	409a      	lsls	r2, r3
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d018      	beq.n	8006022 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d108      	bne.n	8006010 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	d024      	beq.n	8006050 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	4798      	blx	r3
 800600e:	e01f      	b.n	8006050 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01b      	beq.n	8006050 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	4798      	blx	r3
 8006020:	e016      	b.n	8006050 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602c:	2b00      	cmp	r3, #0
 800602e:	d107      	bne.n	8006040 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0208 	bic.w	r2, r2, #8
 800603e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006054:	2220      	movs	r2, #32
 8006056:	409a      	lsls	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4013      	ands	r3, r2
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 808f 	beq.w	8006180 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 8087 	beq.w	8006180 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006076:	2220      	movs	r2, #32
 8006078:	409a      	lsls	r2, r3
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b05      	cmp	r3, #5
 8006088:	d136      	bne.n	80060f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0216 	bic.w	r2, r2, #22
 8006098:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695a      	ldr	r2, [r3, #20]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d103      	bne.n	80060ba <HAL_DMA_IRQHandler+0x1da>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0208 	bic.w	r2, r2, #8
 80060c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ce:	223f      	movs	r2, #63	; 0x3f
 80060d0:	409a      	lsls	r2, r3
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d07e      	beq.n	80061ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	4798      	blx	r3
        }
        return;
 80060f6:	e079      	b.n	80061ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d01d      	beq.n	8006142 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10d      	bne.n	8006130 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006118:	2b00      	cmp	r3, #0
 800611a:	d031      	beq.n	8006180 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	4798      	blx	r3
 8006124:	e02c      	b.n	8006180 <HAL_DMA_IRQHandler+0x2a0>
 8006126:	bf00      	nop
 8006128:	20000078 	.word	0x20000078
 800612c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006134:	2b00      	cmp	r3, #0
 8006136:	d023      	beq.n	8006180 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4798      	blx	r3
 8006140:	e01e      	b.n	8006180 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10f      	bne.n	8006170 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0210 	bic.w	r2, r2, #16
 800615e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006184:	2b00      	cmp	r3, #0
 8006186:	d032      	beq.n	80061ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	d022      	beq.n	80061da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2205      	movs	r2, #5
 8006198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0201 	bic.w	r2, r2, #1
 80061aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	3301      	adds	r3, #1
 80061b0:	60bb      	str	r3, [r7, #8]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d307      	bcc.n	80061c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1f2      	bne.n	80061ac <HAL_DMA_IRQHandler+0x2cc>
 80061c6:	e000      	b.n	80061ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80061c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d005      	beq.n	80061ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	4798      	blx	r3
 80061ea:	e000      	b.n	80061ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80061ec:	bf00      	nop
    }
  }
}
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006210:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	2b40      	cmp	r3, #64	; 0x40
 8006220:	d108      	bne.n	8006234 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006232:	e007      	b.n	8006244 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	60da      	str	r2, [r3, #12]
}
 8006244:	bf00      	nop
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	3b10      	subs	r3, #16
 8006260:	4a14      	ldr	r2, [pc, #80]	; (80062b4 <DMA_CalcBaseAndBitshift+0x64>)
 8006262:	fba2 2303 	umull	r2, r3, r2, r3
 8006266:	091b      	lsrs	r3, r3, #4
 8006268:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800626a:	4a13      	ldr	r2, [pc, #76]	; (80062b8 <DMA_CalcBaseAndBitshift+0x68>)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4413      	add	r3, r2
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	461a      	mov	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b03      	cmp	r3, #3
 800627c:	d909      	bls.n	8006292 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006286:	f023 0303 	bic.w	r3, r3, #3
 800628a:	1d1a      	adds	r2, r3, #4
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	659a      	str	r2, [r3, #88]	; 0x58
 8006290:	e007      	b.n	80062a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800629a:	f023 0303 	bic.w	r3, r3, #3
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	aaaaaaab 	.word	0xaaaaaaab
 80062b8:	080107a0 	.word	0x080107a0

080062bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d11f      	bne.n	8006316 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d856      	bhi.n	800638a <DMA_CheckFifoParam+0xce>
 80062dc:	a201      	add	r2, pc, #4	; (adr r2, 80062e4 <DMA_CheckFifoParam+0x28>)
 80062de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e2:	bf00      	nop
 80062e4:	080062f5 	.word	0x080062f5
 80062e8:	08006307 	.word	0x08006307
 80062ec:	080062f5 	.word	0x080062f5
 80062f0:	0800638b 	.word	0x0800638b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d046      	beq.n	800638e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006304:	e043      	b.n	800638e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800630e:	d140      	bne.n	8006392 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006314:	e03d      	b.n	8006392 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800631e:	d121      	bne.n	8006364 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	2b03      	cmp	r3, #3
 8006324:	d837      	bhi.n	8006396 <DMA_CheckFifoParam+0xda>
 8006326:	a201      	add	r2, pc, #4	; (adr r2, 800632c <DMA_CheckFifoParam+0x70>)
 8006328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632c:	0800633d 	.word	0x0800633d
 8006330:	08006343 	.word	0x08006343
 8006334:	0800633d 	.word	0x0800633d
 8006338:	08006355 	.word	0x08006355
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	73fb      	strb	r3, [r7, #15]
      break;
 8006340:	e030      	b.n	80063a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006346:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d025      	beq.n	800639a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006352:	e022      	b.n	800639a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800635c:	d11f      	bne.n	800639e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006362:	e01c      	b.n	800639e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2b02      	cmp	r3, #2
 8006368:	d903      	bls.n	8006372 <DMA_CheckFifoParam+0xb6>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b03      	cmp	r3, #3
 800636e:	d003      	beq.n	8006378 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006370:	e018      	b.n	80063a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	73fb      	strb	r3, [r7, #15]
      break;
 8006376:	e015      	b.n	80063a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00e      	beq.n	80063a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	73fb      	strb	r3, [r7, #15]
      break;
 8006388:	e00b      	b.n	80063a2 <DMA_CheckFifoParam+0xe6>
      break;
 800638a:	bf00      	nop
 800638c:	e00a      	b.n	80063a4 <DMA_CheckFifoParam+0xe8>
      break;
 800638e:	bf00      	nop
 8006390:	e008      	b.n	80063a4 <DMA_CheckFifoParam+0xe8>
      break;
 8006392:	bf00      	nop
 8006394:	e006      	b.n	80063a4 <DMA_CheckFifoParam+0xe8>
      break;
 8006396:	bf00      	nop
 8006398:	e004      	b.n	80063a4 <DMA_CheckFifoParam+0xe8>
      break;
 800639a:	bf00      	nop
 800639c:	e002      	b.n	80063a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800639e:	bf00      	nop
 80063a0:	e000      	b.n	80063a4 <DMA_CheckFifoParam+0xe8>
      break;
 80063a2:	bf00      	nop
    }
  } 
  
  return status; 
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop

080063b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b089      	sub	sp, #36	; 0x24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063ca:	2300      	movs	r3, #0
 80063cc:	61fb      	str	r3, [r7, #28]
 80063ce:	e16b      	b.n	80066a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80063d0:	2201      	movs	r2, #1
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	fa02 f303 	lsl.w	r3, r2, r3
 80063d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	4013      	ands	r3, r2
 80063e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	f040 815a 	bne.w	80066a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d005      	beq.n	8006406 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006402:	2b02      	cmp	r3, #2
 8006404:	d130      	bne.n	8006468 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	2203      	movs	r2, #3
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	43db      	mvns	r3, r3
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	4013      	ands	r3, r2
 800641c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	fa02 f303 	lsl.w	r3, r2, r3
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	4313      	orrs	r3, r2
 800642e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800643c:	2201      	movs	r2, #1
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	fa02 f303 	lsl.w	r3, r2, r3
 8006444:	43db      	mvns	r3, r3
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	4013      	ands	r3, r2
 800644a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	091b      	lsrs	r3, r3, #4
 8006452:	f003 0201 	and.w	r2, r3, #1
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	fa02 f303 	lsl.w	r3, r2, r3
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	4313      	orrs	r3, r2
 8006460:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f003 0303 	and.w	r3, r3, #3
 8006470:	2b03      	cmp	r3, #3
 8006472:	d017      	beq.n	80064a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	005b      	lsls	r3, r3, #1
 800647e:	2203      	movs	r2, #3
 8006480:	fa02 f303 	lsl.w	r3, r2, r3
 8006484:	43db      	mvns	r3, r3
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	4013      	ands	r3, r2
 800648a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	fa02 f303 	lsl.w	r3, r2, r3
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	4313      	orrs	r3, r2
 800649c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f003 0303 	and.w	r3, r3, #3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d123      	bne.n	80064f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	08da      	lsrs	r2, r3, #3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	3208      	adds	r2, #8
 80064b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	f003 0307 	and.w	r3, r3, #7
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	220f      	movs	r2, #15
 80064c8:	fa02 f303 	lsl.w	r3, r2, r3
 80064cc:	43db      	mvns	r3, r3
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	4013      	ands	r3, r2
 80064d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	691a      	ldr	r2, [r3, #16]
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f003 0307 	and.w	r3, r3, #7
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	08da      	lsrs	r2, r3, #3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3208      	adds	r2, #8
 80064f2:	69b9      	ldr	r1, [r7, #24]
 80064f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	2203      	movs	r2, #3
 8006504:	fa02 f303 	lsl.w	r3, r2, r3
 8006508:	43db      	mvns	r3, r3
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	4013      	ands	r3, r2
 800650e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f003 0203 	and.w	r2, r3, #3
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	4313      	orrs	r3, r2
 8006524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 80b4 	beq.w	80066a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800653a:	2300      	movs	r3, #0
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	4b60      	ldr	r3, [pc, #384]	; (80066c0 <HAL_GPIO_Init+0x30c>)
 8006540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006542:	4a5f      	ldr	r2, [pc, #380]	; (80066c0 <HAL_GPIO_Init+0x30c>)
 8006544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006548:	6453      	str	r3, [r2, #68]	; 0x44
 800654a:	4b5d      	ldr	r3, [pc, #372]	; (80066c0 <HAL_GPIO_Init+0x30c>)
 800654c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006556:	4a5b      	ldr	r2, [pc, #364]	; (80066c4 <HAL_GPIO_Init+0x310>)
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	089b      	lsrs	r3, r3, #2
 800655c:	3302      	adds	r3, #2
 800655e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	f003 0303 	and.w	r3, r3, #3
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	220f      	movs	r2, #15
 800656e:	fa02 f303 	lsl.w	r3, r2, r3
 8006572:	43db      	mvns	r3, r3
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	4013      	ands	r3, r2
 8006578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a52      	ldr	r2, [pc, #328]	; (80066c8 <HAL_GPIO_Init+0x314>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d02b      	beq.n	80065da <HAL_GPIO_Init+0x226>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a51      	ldr	r2, [pc, #324]	; (80066cc <HAL_GPIO_Init+0x318>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d025      	beq.n	80065d6 <HAL_GPIO_Init+0x222>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a50      	ldr	r2, [pc, #320]	; (80066d0 <HAL_GPIO_Init+0x31c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d01f      	beq.n	80065d2 <HAL_GPIO_Init+0x21e>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a4f      	ldr	r2, [pc, #316]	; (80066d4 <HAL_GPIO_Init+0x320>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d019      	beq.n	80065ce <HAL_GPIO_Init+0x21a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a4e      	ldr	r2, [pc, #312]	; (80066d8 <HAL_GPIO_Init+0x324>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d013      	beq.n	80065ca <HAL_GPIO_Init+0x216>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a4d      	ldr	r2, [pc, #308]	; (80066dc <HAL_GPIO_Init+0x328>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00d      	beq.n	80065c6 <HAL_GPIO_Init+0x212>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a4c      	ldr	r2, [pc, #304]	; (80066e0 <HAL_GPIO_Init+0x32c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d007      	beq.n	80065c2 <HAL_GPIO_Init+0x20e>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a4b      	ldr	r2, [pc, #300]	; (80066e4 <HAL_GPIO_Init+0x330>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d101      	bne.n	80065be <HAL_GPIO_Init+0x20a>
 80065ba:	2307      	movs	r3, #7
 80065bc:	e00e      	b.n	80065dc <HAL_GPIO_Init+0x228>
 80065be:	2308      	movs	r3, #8
 80065c0:	e00c      	b.n	80065dc <HAL_GPIO_Init+0x228>
 80065c2:	2306      	movs	r3, #6
 80065c4:	e00a      	b.n	80065dc <HAL_GPIO_Init+0x228>
 80065c6:	2305      	movs	r3, #5
 80065c8:	e008      	b.n	80065dc <HAL_GPIO_Init+0x228>
 80065ca:	2304      	movs	r3, #4
 80065cc:	e006      	b.n	80065dc <HAL_GPIO_Init+0x228>
 80065ce:	2303      	movs	r3, #3
 80065d0:	e004      	b.n	80065dc <HAL_GPIO_Init+0x228>
 80065d2:	2302      	movs	r3, #2
 80065d4:	e002      	b.n	80065dc <HAL_GPIO_Init+0x228>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e000      	b.n	80065dc <HAL_GPIO_Init+0x228>
 80065da:	2300      	movs	r3, #0
 80065dc:	69fa      	ldr	r2, [r7, #28]
 80065de:	f002 0203 	and.w	r2, r2, #3
 80065e2:	0092      	lsls	r2, r2, #2
 80065e4:	4093      	lsls	r3, r2
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065ec:	4935      	ldr	r1, [pc, #212]	; (80066c4 <HAL_GPIO_Init+0x310>)
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	089b      	lsrs	r3, r3, #2
 80065f2:	3302      	adds	r3, #2
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80065fa:	4b3b      	ldr	r3, [pc, #236]	; (80066e8 <HAL_GPIO_Init+0x334>)
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	43db      	mvns	r3, r3
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	4013      	ands	r3, r2
 8006608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006616:	69ba      	ldr	r2, [r7, #24]
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	4313      	orrs	r3, r2
 800661c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800661e:	4a32      	ldr	r2, [pc, #200]	; (80066e8 <HAL_GPIO_Init+0x334>)
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006624:	4b30      	ldr	r3, [pc, #192]	; (80066e8 <HAL_GPIO_Init+0x334>)
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	43db      	mvns	r3, r3
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	4013      	ands	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	4313      	orrs	r3, r2
 8006646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006648:	4a27      	ldr	r2, [pc, #156]	; (80066e8 <HAL_GPIO_Init+0x334>)
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800664e:	4b26      	ldr	r3, [pc, #152]	; (80066e8 <HAL_GPIO_Init+0x334>)
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	43db      	mvns	r3, r3
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	4013      	ands	r3, r2
 800665c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	4313      	orrs	r3, r2
 8006670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006672:	4a1d      	ldr	r2, [pc, #116]	; (80066e8 <HAL_GPIO_Init+0x334>)
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006678:	4b1b      	ldr	r3, [pc, #108]	; (80066e8 <HAL_GPIO_Init+0x334>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	43db      	mvns	r3, r3
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	4013      	ands	r3, r2
 8006686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d003      	beq.n	800669c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	4313      	orrs	r3, r2
 800669a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800669c:	4a12      	ldr	r2, [pc, #72]	; (80066e8 <HAL_GPIO_Init+0x334>)
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	3301      	adds	r3, #1
 80066a6:	61fb      	str	r3, [r7, #28]
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	2b0f      	cmp	r3, #15
 80066ac:	f67f ae90 	bls.w	80063d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80066b0:	bf00      	nop
 80066b2:	bf00      	nop
 80066b4:	3724      	adds	r7, #36	; 0x24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40023800 	.word	0x40023800
 80066c4:	40013800 	.word	0x40013800
 80066c8:	40020000 	.word	0x40020000
 80066cc:	40020400 	.word	0x40020400
 80066d0:	40020800 	.word	0x40020800
 80066d4:	40020c00 	.word	0x40020c00
 80066d8:	40021000 	.word	0x40021000
 80066dc:	40021400 	.word	0x40021400
 80066e0:	40021800 	.word	0x40021800
 80066e4:	40021c00 	.word	0x40021c00
 80066e8:	40013c00 	.word	0x40013c00

080066ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	460b      	mov	r3, r1
 80066f6:	807b      	strh	r3, [r7, #2]
 80066f8:	4613      	mov	r3, r2
 80066fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066fc:	787b      	ldrb	r3, [r7, #1]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006702:	887a      	ldrh	r2, [r7, #2]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006708:	e003      	b.n	8006712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800670a:	887b      	ldrh	r3, [r7, #2]
 800670c:	041a      	lsls	r2, r3, #16
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	619a      	str	r2, [r3, #24]
}
 8006712:	bf00      	nop
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
	...

08006720 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	4603      	mov	r3, r0
 8006728:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800672a:	4b08      	ldr	r3, [pc, #32]	; (800674c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800672c:	695a      	ldr	r2, [r3, #20]
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	4013      	ands	r3, r2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d006      	beq.n	8006744 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006736:	4a05      	ldr	r2, [pc, #20]	; (800674c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006738:	88fb      	ldrh	r3, [r7, #6]
 800673a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800673c:	88fb      	ldrh	r3, [r7, #6]
 800673e:	4618      	mov	r0, r3
 8006740:	f7fb fe18 	bl	8002374 <HAL_GPIO_EXTI_Callback>
  }
}
 8006744:	bf00      	nop
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	40013c00 	.word	0x40013c00

08006750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e12b      	b.n	80069ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fd fc70 	bl	800405c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2224      	movs	r2, #36	; 0x24
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0201 	bic.w	r2, r2, #1
 8006792:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80067b4:	f001 fbc8 	bl	8007f48 <HAL_RCC_GetPCLK1Freq>
 80067b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	4a81      	ldr	r2, [pc, #516]	; (80069c4 <HAL_I2C_Init+0x274>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d807      	bhi.n	80067d4 <HAL_I2C_Init+0x84>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4a80      	ldr	r2, [pc, #512]	; (80069c8 <HAL_I2C_Init+0x278>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	bf94      	ite	ls
 80067cc:	2301      	movls	r3, #1
 80067ce:	2300      	movhi	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	e006      	b.n	80067e2 <HAL_I2C_Init+0x92>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4a7d      	ldr	r2, [pc, #500]	; (80069cc <HAL_I2C_Init+0x27c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	bf94      	ite	ls
 80067dc:	2301      	movls	r3, #1
 80067de:	2300      	movhi	r3, #0
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e0e7      	b.n	80069ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4a78      	ldr	r2, [pc, #480]	; (80069d0 <HAL_I2C_Init+0x280>)
 80067ee:	fba2 2303 	umull	r2, r3, r2, r3
 80067f2:	0c9b      	lsrs	r3, r3, #18
 80067f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	430a      	orrs	r2, r1
 8006808:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	4a6a      	ldr	r2, [pc, #424]	; (80069c4 <HAL_I2C_Init+0x274>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d802      	bhi.n	8006824 <HAL_I2C_Init+0xd4>
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	3301      	adds	r3, #1
 8006822:	e009      	b.n	8006838 <HAL_I2C_Init+0xe8>
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800682a:	fb02 f303 	mul.w	r3, r2, r3
 800682e:	4a69      	ldr	r2, [pc, #420]	; (80069d4 <HAL_I2C_Init+0x284>)
 8006830:	fba2 2303 	umull	r2, r3, r2, r3
 8006834:	099b      	lsrs	r3, r3, #6
 8006836:	3301      	adds	r3, #1
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6812      	ldr	r2, [r2, #0]
 800683c:	430b      	orrs	r3, r1
 800683e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800684a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	495c      	ldr	r1, [pc, #368]	; (80069c4 <HAL_I2C_Init+0x274>)
 8006854:	428b      	cmp	r3, r1
 8006856:	d819      	bhi.n	800688c <HAL_I2C_Init+0x13c>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	1e59      	subs	r1, r3, #1
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	fbb1 f3f3 	udiv	r3, r1, r3
 8006866:	1c59      	adds	r1, r3, #1
 8006868:	f640 73fc 	movw	r3, #4092	; 0xffc
 800686c:	400b      	ands	r3, r1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00a      	beq.n	8006888 <HAL_I2C_Init+0x138>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	1e59      	subs	r1, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006880:	3301      	adds	r3, #1
 8006882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006886:	e051      	b.n	800692c <HAL_I2C_Init+0x1dc>
 8006888:	2304      	movs	r3, #4
 800688a:	e04f      	b.n	800692c <HAL_I2C_Init+0x1dc>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d111      	bne.n	80068b8 <HAL_I2C_Init+0x168>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	1e58      	subs	r0, r3, #1
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6859      	ldr	r1, [r3, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	440b      	add	r3, r1
 80068a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80068a6:	3301      	adds	r3, #1
 80068a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bf0c      	ite	eq
 80068b0:	2301      	moveq	r3, #1
 80068b2:	2300      	movne	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	e012      	b.n	80068de <HAL_I2C_Init+0x18e>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	1e58      	subs	r0, r3, #1
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6859      	ldr	r1, [r3, #4]
 80068c0:	460b      	mov	r3, r1
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	440b      	add	r3, r1
 80068c6:	0099      	lsls	r1, r3, #2
 80068c8:	440b      	add	r3, r1
 80068ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80068ce:	3301      	adds	r3, #1
 80068d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	bf0c      	ite	eq
 80068d8:	2301      	moveq	r3, #1
 80068da:	2300      	movne	r3, #0
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <HAL_I2C_Init+0x196>
 80068e2:	2301      	movs	r3, #1
 80068e4:	e022      	b.n	800692c <HAL_I2C_Init+0x1dc>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10e      	bne.n	800690c <HAL_I2C_Init+0x1bc>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	1e58      	subs	r0, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6859      	ldr	r1, [r3, #4]
 80068f6:	460b      	mov	r3, r1
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	440b      	add	r3, r1
 80068fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006900:	3301      	adds	r3, #1
 8006902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800690a:	e00f      	b.n	800692c <HAL_I2C_Init+0x1dc>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	1e58      	subs	r0, r3, #1
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6859      	ldr	r1, [r3, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	440b      	add	r3, r1
 800691a:	0099      	lsls	r1, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006922:	3301      	adds	r3, #1
 8006924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006928:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	6809      	ldr	r1, [r1, #0]
 8006930:	4313      	orrs	r3, r2
 8006932:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69da      	ldr	r2, [r3, #28]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800695a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6911      	ldr	r1, [r2, #16]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	68d2      	ldr	r2, [r2, #12]
 8006966:	4311      	orrs	r1, r2
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6812      	ldr	r2, [r2, #0]
 800696c:	430b      	orrs	r3, r1
 800696e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	695a      	ldr	r2, [r3, #20]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	430a      	orrs	r2, r1
 800698a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0201 	orr.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	000186a0 	.word	0x000186a0
 80069c8:	001e847f 	.word	0x001e847f
 80069cc:	003d08ff 	.word	0x003d08ff
 80069d0:	431bde83 	.word	0x431bde83
 80069d4:	10624dd3 	.word	0x10624dd3

080069d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af02      	add	r7, sp, #8
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	4608      	mov	r0, r1
 80069e2:	4611      	mov	r1, r2
 80069e4:	461a      	mov	r2, r3
 80069e6:	4603      	mov	r3, r0
 80069e8:	817b      	strh	r3, [r7, #10]
 80069ea:	460b      	mov	r3, r1
 80069ec:	813b      	strh	r3, [r7, #8]
 80069ee:	4613      	mov	r3, r2
 80069f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069f2:	f7fe f939 	bl	8004c68 <HAL_GetTick>
 80069f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	f040 80d9 	bne.w	8006bb8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	2319      	movs	r3, #25
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	496d      	ldr	r1, [pc, #436]	; (8006bc4 <HAL_I2C_Mem_Write+0x1ec>)
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 fc7f 	bl	8007314 <I2C_WaitOnFlagUntilTimeout>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	e0cc      	b.n	8006bba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d101      	bne.n	8006a2e <HAL_I2C_Mem_Write+0x56>
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	e0c5      	b.n	8006bba <HAL_I2C_Mem_Write+0x1e2>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d007      	beq.n	8006a54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0201 	orr.w	r2, r2, #1
 8006a52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2221      	movs	r2, #33	; 0x21
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2240      	movs	r2, #64	; 0x40
 8006a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a3a      	ldr	r2, [r7, #32]
 8006a7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4a4d      	ldr	r2, [pc, #308]	; (8006bc8 <HAL_I2C_Mem_Write+0x1f0>)
 8006a94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a96:	88f8      	ldrh	r0, [r7, #6]
 8006a98:	893a      	ldrh	r2, [r7, #8]
 8006a9a:	8979      	ldrh	r1, [r7, #10]
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 fab6 	bl	8007018 <I2C_RequestMemoryWrite>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d052      	beq.n	8006b58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e081      	b.n	8006bba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 fd00 	bl	80074c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00d      	beq.n	8006ae2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d107      	bne.n	8006ade <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006adc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e06b      	b.n	8006bba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae6:	781a      	ldrb	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006afc:	3b01      	subs	r3, #1
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b04      	cmp	r3, #4
 8006b1e:	d11b      	bne.n	8006b58 <HAL_I2C_Mem_Write+0x180>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d017      	beq.n	8006b58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	781a      	ldrb	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b42:	3b01      	subs	r3, #1
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1aa      	bne.n	8006ab6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 fcec 	bl	8007542 <I2C_WaitOnBTFFlagUntilTimeout>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00d      	beq.n	8006b8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	2b04      	cmp	r3, #4
 8006b76:	d107      	bne.n	8006b88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e016      	b.n	8006bba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	e000      	b.n	8006bba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006bb8:	2302      	movs	r3, #2
  }
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3718      	adds	r7, #24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	00100002 	.word	0x00100002
 8006bc8:	ffff0000 	.word	0xffff0000

08006bcc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08c      	sub	sp, #48	; 0x30
 8006bd0:	af02      	add	r7, sp, #8
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	461a      	mov	r2, r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	817b      	strh	r3, [r7, #10]
 8006bde:	460b      	mov	r3, r1
 8006be0:	813b      	strh	r3, [r7, #8]
 8006be2:	4613      	mov	r3, r2
 8006be4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006be6:	f7fe f83f 	bl	8004c68 <HAL_GetTick>
 8006bea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b20      	cmp	r3, #32
 8006bf6:	f040 8208 	bne.w	800700a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	2319      	movs	r3, #25
 8006c00:	2201      	movs	r2, #1
 8006c02:	497b      	ldr	r1, [pc, #492]	; (8006df0 <HAL_I2C_Mem_Read+0x224>)
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 fb85 	bl	8007314 <I2C_WaitOnFlagUntilTimeout>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006c10:	2302      	movs	r3, #2
 8006c12:	e1fb      	b.n	800700c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d101      	bne.n	8006c22 <HAL_I2C_Mem_Read+0x56>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	e1f4      	b.n	800700c <HAL_I2C_Mem_Read+0x440>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d007      	beq.n	8006c48 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f042 0201 	orr.w	r2, r2, #1
 8006c46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2222      	movs	r2, #34	; 0x22
 8006c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2240      	movs	r2, #64	; 0x40
 8006c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006c78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4a5b      	ldr	r2, [pc, #364]	; (8006df4 <HAL_I2C_Mem_Read+0x228>)
 8006c88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c8a:	88f8      	ldrh	r0, [r7, #6]
 8006c8c:	893a      	ldrh	r2, [r7, #8]
 8006c8e:	8979      	ldrh	r1, [r7, #10]
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	9301      	str	r3, [sp, #4]
 8006c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	4603      	mov	r3, r0
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 fa52 	bl	8007144 <I2C_RequestMemoryRead>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e1b0      	b.n	800700c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d113      	bne.n	8006cda <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	623b      	str	r3, [r7, #32]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	623b      	str	r3, [r7, #32]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	623b      	str	r3, [r7, #32]
 8006cc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	e184      	b.n	8006fe4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d11b      	bne.n	8006d1a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61fb      	str	r3, [r7, #28]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	61fb      	str	r3, [r7, #28]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	61fb      	str	r3, [r7, #28]
 8006d06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	e164      	b.n	8006fe4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d11b      	bne.n	8006d5a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d42:	2300      	movs	r3, #0
 8006d44:	61bb      	str	r3, [r7, #24]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	61bb      	str	r3, [r7, #24]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	61bb      	str	r3, [r7, #24]
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	e144      	b.n	8006fe4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	617b      	str	r3, [r7, #20]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	617b      	str	r3, [r7, #20]
 8006d6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006d70:	e138      	b.n	8006fe4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	f200 80f1 	bhi.w	8006f5e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d123      	bne.n	8006dcc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 fc1b 	bl	80075c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e139      	b.n	800700c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691a      	ldr	r2, [r3, #16]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dca:	e10b      	b.n	8006fe4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d14e      	bne.n	8006e72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dda:	2200      	movs	r2, #0
 8006ddc:	4906      	ldr	r1, [pc, #24]	; (8006df8 <HAL_I2C_Mem_Read+0x22c>)
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 fa98 	bl	8007314 <I2C_WaitOnFlagUntilTimeout>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d008      	beq.n	8006dfc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e10e      	b.n	800700c <HAL_I2C_Mem_Read+0x440>
 8006dee:	bf00      	nop
 8006df0:	00100002 	.word	0x00100002
 8006df4:	ffff0000 	.word	0xffff0000
 8006df8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	691a      	ldr	r2, [r3, #16]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	1c5a      	adds	r2, r3, #1
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	3b01      	subs	r3, #1
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	691a      	ldr	r2, [r3, #16]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e70:	e0b8      	b.n	8006fe4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	2200      	movs	r2, #0
 8006e7a:	4966      	ldr	r1, [pc, #408]	; (8007014 <HAL_I2C_Mem_Read+0x448>)
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 fa49 	bl	8007314 <I2C_WaitOnFlagUntilTimeout>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e0bf      	b.n	800700c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	691a      	ldr	r2, [r3, #16]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	1c5a      	adds	r2, r3, #1
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	494f      	ldr	r1, [pc, #316]	; (8007014 <HAL_I2C_Mem_Read+0x448>)
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 fa1b 	bl	8007314 <I2C_WaitOnFlagUntilTimeout>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e091      	b.n	800700c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ef6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	691a      	ldr	r2, [r3, #16]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	3b01      	subs	r3, #1
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	691a      	ldr	r2, [r3, #16]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	b2d2      	uxtb	r2, r2
 8006f36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f46:	3b01      	subs	r3, #1
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	3b01      	subs	r3, #1
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f5c:	e042      	b.n	8006fe4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f000 fb2e 	bl	80075c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e04c      	b.n	800700c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	691a      	ldr	r2, [r3, #16]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7c:	b2d2      	uxtb	r2, r2
 8006f7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	f003 0304 	and.w	r3, r3, #4
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d118      	bne.n	8006fe4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	691a      	ldr	r2, [r3, #16]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	b2d2      	uxtb	r2, r2
 8006fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f47f aec2 	bne.w	8006d72 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	e000      	b.n	800700c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800700a:	2302      	movs	r3, #2
  }
}
 800700c:	4618      	mov	r0, r3
 800700e:	3728      	adds	r7, #40	; 0x28
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	00010004 	.word	0x00010004

08007018 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b088      	sub	sp, #32
 800701c:	af02      	add	r7, sp, #8
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	4608      	mov	r0, r1
 8007022:	4611      	mov	r1, r2
 8007024:	461a      	mov	r2, r3
 8007026:	4603      	mov	r3, r0
 8007028:	817b      	strh	r3, [r7, #10]
 800702a:	460b      	mov	r3, r1
 800702c:	813b      	strh	r3, [r7, #8]
 800702e:	4613      	mov	r3, r2
 8007030:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007040:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	2200      	movs	r2, #0
 800704a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f000 f960 	bl	8007314 <I2C_WaitOnFlagUntilTimeout>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00d      	beq.n	8007076 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007068:	d103      	bne.n	8007072 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007070:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e05f      	b.n	8007136 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007076:	897b      	ldrh	r3, [r7, #10]
 8007078:	b2db      	uxtb	r3, r3
 800707a:	461a      	mov	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007084:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	6a3a      	ldr	r2, [r7, #32]
 800708a:	492d      	ldr	r1, [pc, #180]	; (8007140 <I2C_RequestMemoryWrite+0x128>)
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 f998 	bl	80073c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e04c      	b.n	8007136 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800709c:	2300      	movs	r3, #0
 800709e:	617b      	str	r3, [r7, #20]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	617b      	str	r3, [r7, #20]
 80070b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070b4:	6a39      	ldr	r1, [r7, #32]
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 fa02 	bl	80074c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00d      	beq.n	80070de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	d107      	bne.n	80070da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e02b      	b.n	8007136 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070de:	88fb      	ldrh	r3, [r7, #6]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d105      	bne.n	80070f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070e4:	893b      	ldrh	r3, [r7, #8]
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	611a      	str	r2, [r3, #16]
 80070ee:	e021      	b.n	8007134 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80070f0:	893b      	ldrh	r3, [r7, #8]
 80070f2:	0a1b      	lsrs	r3, r3, #8
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007100:	6a39      	ldr	r1, [r7, #32]
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 f9dc 	bl	80074c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00d      	beq.n	800712a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	2b04      	cmp	r3, #4
 8007114:	d107      	bne.n	8007126 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007124:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e005      	b.n	8007136 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800712a:	893b      	ldrh	r3, [r7, #8]
 800712c:	b2da      	uxtb	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	00010002 	.word	0x00010002

08007144 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b088      	sub	sp, #32
 8007148:	af02      	add	r7, sp, #8
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	4608      	mov	r0, r1
 800714e:	4611      	mov	r1, r2
 8007150:	461a      	mov	r2, r3
 8007152:	4603      	mov	r3, r0
 8007154:	817b      	strh	r3, [r7, #10]
 8007156:	460b      	mov	r3, r1
 8007158:	813b      	strh	r3, [r7, #8]
 800715a:	4613      	mov	r3, r2
 800715c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800716c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800717c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	2200      	movs	r2, #0
 8007186:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 f8c2 	bl	8007314 <I2C_WaitOnFlagUntilTimeout>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00d      	beq.n	80071b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071a4:	d103      	bne.n	80071ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e0aa      	b.n	8007308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071b2:	897b      	ldrh	r3, [r7, #10]
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	461a      	mov	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	6a3a      	ldr	r2, [r7, #32]
 80071c6:	4952      	ldr	r1, [pc, #328]	; (8007310 <I2C_RequestMemoryRead+0x1cc>)
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f000 f8fa 	bl	80073c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e097      	b.n	8007308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	617b      	str	r3, [r7, #20]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	617b      	str	r3, [r7, #20]
 80071ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071f0:	6a39      	ldr	r1, [r7, #32]
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 f964 	bl	80074c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00d      	beq.n	800721a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	2b04      	cmp	r3, #4
 8007204:	d107      	bne.n	8007216 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007214:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e076      	b.n	8007308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800721a:	88fb      	ldrh	r3, [r7, #6]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d105      	bne.n	800722c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007220:	893b      	ldrh	r3, [r7, #8]
 8007222:	b2da      	uxtb	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	611a      	str	r2, [r3, #16]
 800722a:	e021      	b.n	8007270 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800722c:	893b      	ldrh	r3, [r7, #8]
 800722e:	0a1b      	lsrs	r3, r3, #8
 8007230:	b29b      	uxth	r3, r3
 8007232:	b2da      	uxtb	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800723a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800723c:	6a39      	ldr	r1, [r7, #32]
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 f93e 	bl	80074c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00d      	beq.n	8007266 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724e:	2b04      	cmp	r3, #4
 8007250:	d107      	bne.n	8007262 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007260:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e050      	b.n	8007308 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007266:	893b      	ldrh	r3, [r7, #8]
 8007268:	b2da      	uxtb	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007272:	6a39      	ldr	r1, [r7, #32]
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 f923 	bl	80074c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00d      	beq.n	800729c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007284:	2b04      	cmp	r3, #4
 8007286:	d107      	bne.n	8007298 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007296:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e035      	b.n	8007308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 f82b 	bl	8007314 <I2C_WaitOnFlagUntilTimeout>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00d      	beq.n	80072e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d2:	d103      	bne.n	80072dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e013      	b.n	8007308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80072e0:	897b      	ldrh	r3, [r7, #10]
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	f043 0301 	orr.w	r3, r3, #1
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	6a3a      	ldr	r2, [r7, #32]
 80072f4:	4906      	ldr	r1, [pc, #24]	; (8007310 <I2C_RequestMemoryRead+0x1cc>)
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 f863 	bl	80073c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e000      	b.n	8007308 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3718      	adds	r7, #24
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	00010002 	.word	0x00010002

08007314 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	603b      	str	r3, [r7, #0]
 8007320:	4613      	mov	r3, r2
 8007322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007324:	e025      	b.n	8007372 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732c:	d021      	beq.n	8007372 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800732e:	f7fd fc9b 	bl	8004c68 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	429a      	cmp	r2, r3
 800733c:	d302      	bcc.n	8007344 <I2C_WaitOnFlagUntilTimeout+0x30>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d116      	bne.n	8007372 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2220      	movs	r2, #32
 800734e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735e:	f043 0220 	orr.w	r2, r3, #32
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e023      	b.n	80073ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	0c1b      	lsrs	r3, r3, #16
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b01      	cmp	r3, #1
 800737a:	d10d      	bne.n	8007398 <I2C_WaitOnFlagUntilTimeout+0x84>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	43da      	mvns	r2, r3
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4013      	ands	r3, r2
 8007388:	b29b      	uxth	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	bf0c      	ite	eq
 800738e:	2301      	moveq	r3, #1
 8007390:	2300      	movne	r3, #0
 8007392:	b2db      	uxtb	r3, r3
 8007394:	461a      	mov	r2, r3
 8007396:	e00c      	b.n	80073b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	43da      	mvns	r2, r3
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	4013      	ands	r3, r2
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	bf0c      	ite	eq
 80073aa:	2301      	moveq	r3, #1
 80073ac:	2300      	movne	r3, #0
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	461a      	mov	r2, r3
 80073b2:	79fb      	ldrb	r3, [r7, #7]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d0b6      	beq.n	8007326 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b084      	sub	sp, #16
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	607a      	str	r2, [r7, #4]
 80073ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073d0:	e051      	b.n	8007476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073e0:	d123      	bne.n	800742a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2220      	movs	r2, #32
 8007406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	f043 0204 	orr.w	r2, r3, #4
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e046      	b.n	80074b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007430:	d021      	beq.n	8007476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007432:	f7fd fc19 	bl	8004c68 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	429a      	cmp	r2, r3
 8007440:	d302      	bcc.n	8007448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d116      	bne.n	8007476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2220      	movs	r2, #32
 8007452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	f043 0220 	orr.w	r2, r3, #32
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e020      	b.n	80074b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	0c1b      	lsrs	r3, r3, #16
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b01      	cmp	r3, #1
 800747e:	d10c      	bne.n	800749a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	43da      	mvns	r2, r3
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	4013      	ands	r3, r2
 800748c:	b29b      	uxth	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	bf14      	ite	ne
 8007492:	2301      	movne	r3, #1
 8007494:	2300      	moveq	r3, #0
 8007496:	b2db      	uxtb	r3, r3
 8007498:	e00b      	b.n	80074b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	43da      	mvns	r2, r3
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	4013      	ands	r3, r2
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	bf14      	ite	ne
 80074ac:	2301      	movne	r3, #1
 80074ae:	2300      	moveq	r3, #0
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d18d      	bne.n	80073d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074cc:	e02d      	b.n	800752a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 f8ce 	bl	8007670 <I2C_IsAcknowledgeFailed>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e02d      	b.n	800753a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e4:	d021      	beq.n	800752a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074e6:	f7fd fbbf 	bl	8004c68 <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d302      	bcc.n	80074fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d116      	bne.n	800752a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2220      	movs	r2, #32
 8007506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007516:	f043 0220 	orr.w	r2, r3, #32
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e007      	b.n	800753a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007534:	2b80      	cmp	r3, #128	; 0x80
 8007536:	d1ca      	bne.n	80074ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	60f8      	str	r0, [r7, #12]
 800754a:	60b9      	str	r1, [r7, #8]
 800754c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800754e:	e02d      	b.n	80075ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 f88d 	bl	8007670 <I2C_IsAcknowledgeFailed>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e02d      	b.n	80075bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007566:	d021      	beq.n	80075ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007568:	f7fd fb7e 	bl	8004c68 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	429a      	cmp	r2, r3
 8007576:	d302      	bcc.n	800757e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d116      	bne.n	80075ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2220      	movs	r2, #32
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	f043 0220 	orr.w	r2, r3, #32
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e007      	b.n	80075bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	f003 0304 	and.w	r3, r3, #4
 80075b6:	2b04      	cmp	r3, #4
 80075b8:	d1ca      	bne.n	8007550 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075d0:	e042      	b.n	8007658 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	f003 0310 	and.w	r3, r3, #16
 80075dc:	2b10      	cmp	r3, #16
 80075de:	d119      	bne.n	8007614 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f06f 0210 	mvn.w	r2, #16
 80075e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2220      	movs	r2, #32
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e029      	b.n	8007668 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007614:	f7fd fb28 	bl	8004c68 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	429a      	cmp	r2, r3
 8007622:	d302      	bcc.n	800762a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d116      	bne.n	8007658 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2220      	movs	r2, #32
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007644:	f043 0220 	orr.w	r2, r3, #32
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e007      	b.n	8007668 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007662:	2b40      	cmp	r3, #64	; 0x40
 8007664:	d1b5      	bne.n	80075d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007686:	d11b      	bne.n	80076c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007690:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2220      	movs	r2, #32
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ac:	f043 0204 	orr.w	r2, r3, #4
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e000      	b.n	80076c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
	...

080076d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e267      	b.n	8007bb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d075      	beq.n	80077da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076ee:	4b88      	ldr	r3, [pc, #544]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f003 030c 	and.w	r3, r3, #12
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d00c      	beq.n	8007714 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076fa:	4b85      	ldr	r3, [pc, #532]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007702:	2b08      	cmp	r3, #8
 8007704:	d112      	bne.n	800772c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007706:	4b82      	ldr	r3, [pc, #520]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800770e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007712:	d10b      	bne.n	800772c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007714:	4b7e      	ldr	r3, [pc, #504]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d05b      	beq.n	80077d8 <HAL_RCC_OscConfig+0x108>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d157      	bne.n	80077d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e242      	b.n	8007bb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007734:	d106      	bne.n	8007744 <HAL_RCC_OscConfig+0x74>
 8007736:	4b76      	ldr	r3, [pc, #472]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a75      	ldr	r2, [pc, #468]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 800773c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007740:	6013      	str	r3, [r2, #0]
 8007742:	e01d      	b.n	8007780 <HAL_RCC_OscConfig+0xb0>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800774c:	d10c      	bne.n	8007768 <HAL_RCC_OscConfig+0x98>
 800774e:	4b70      	ldr	r3, [pc, #448]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a6f      	ldr	r2, [pc, #444]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 8007754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	4b6d      	ldr	r3, [pc, #436]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a6c      	ldr	r2, [pc, #432]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 8007760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	e00b      	b.n	8007780 <HAL_RCC_OscConfig+0xb0>
 8007768:	4b69      	ldr	r3, [pc, #420]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a68      	ldr	r2, [pc, #416]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 800776e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	4b66      	ldr	r3, [pc, #408]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a65      	ldr	r2, [pc, #404]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 800777a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800777e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d013      	beq.n	80077b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007788:	f7fd fa6e 	bl	8004c68 <HAL_GetTick>
 800778c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800778e:	e008      	b.n	80077a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007790:	f7fd fa6a 	bl	8004c68 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	2b64      	cmp	r3, #100	; 0x64
 800779c:	d901      	bls.n	80077a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e207      	b.n	8007bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077a2:	4b5b      	ldr	r3, [pc, #364]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0f0      	beq.n	8007790 <HAL_RCC_OscConfig+0xc0>
 80077ae:	e014      	b.n	80077da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077b0:	f7fd fa5a 	bl	8004c68 <HAL_GetTick>
 80077b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077b6:	e008      	b.n	80077ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077b8:	f7fd fa56 	bl	8004c68 <HAL_GetTick>
 80077bc:	4602      	mov	r2, r0
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	2b64      	cmp	r3, #100	; 0x64
 80077c4:	d901      	bls.n	80077ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e1f3      	b.n	8007bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077ca:	4b51      	ldr	r3, [pc, #324]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1f0      	bne.n	80077b8 <HAL_RCC_OscConfig+0xe8>
 80077d6:	e000      	b.n	80077da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d063      	beq.n	80078ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077e6:	4b4a      	ldr	r3, [pc, #296]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f003 030c 	and.w	r3, r3, #12
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00b      	beq.n	800780a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077f2:	4b47      	ldr	r3, [pc, #284]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077fa:	2b08      	cmp	r3, #8
 80077fc:	d11c      	bne.n	8007838 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077fe:	4b44      	ldr	r3, [pc, #272]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d116      	bne.n	8007838 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800780a:	4b41      	ldr	r3, [pc, #260]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0302 	and.w	r3, r3, #2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d005      	beq.n	8007822 <HAL_RCC_OscConfig+0x152>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d001      	beq.n	8007822 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e1c7      	b.n	8007bb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007822:	4b3b      	ldr	r3, [pc, #236]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	4937      	ldr	r1, [pc, #220]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 8007832:	4313      	orrs	r3, r2
 8007834:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007836:	e03a      	b.n	80078ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d020      	beq.n	8007882 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007840:	4b34      	ldr	r3, [pc, #208]	; (8007914 <HAL_RCC_OscConfig+0x244>)
 8007842:	2201      	movs	r2, #1
 8007844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007846:	f7fd fa0f 	bl	8004c68 <HAL_GetTick>
 800784a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800784c:	e008      	b.n	8007860 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800784e:	f7fd fa0b 	bl	8004c68 <HAL_GetTick>
 8007852:	4602      	mov	r2, r0
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	2b02      	cmp	r3, #2
 800785a:	d901      	bls.n	8007860 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e1a8      	b.n	8007bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007860:	4b2b      	ldr	r3, [pc, #172]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	2b00      	cmp	r3, #0
 800786a:	d0f0      	beq.n	800784e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800786c:	4b28      	ldr	r3, [pc, #160]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	00db      	lsls	r3, r3, #3
 800787a:	4925      	ldr	r1, [pc, #148]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 800787c:	4313      	orrs	r3, r2
 800787e:	600b      	str	r3, [r1, #0]
 8007880:	e015      	b.n	80078ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007882:	4b24      	ldr	r3, [pc, #144]	; (8007914 <HAL_RCC_OscConfig+0x244>)
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007888:	f7fd f9ee 	bl	8004c68 <HAL_GetTick>
 800788c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800788e:	e008      	b.n	80078a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007890:	f7fd f9ea 	bl	8004c68 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	2b02      	cmp	r3, #2
 800789c:	d901      	bls.n	80078a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e187      	b.n	8007bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078a2:	4b1b      	ldr	r3, [pc, #108]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1f0      	bne.n	8007890 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0308 	and.w	r3, r3, #8
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d036      	beq.n	8007928 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d016      	beq.n	80078f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078c2:	4b15      	ldr	r3, [pc, #84]	; (8007918 <HAL_RCC_OscConfig+0x248>)
 80078c4:	2201      	movs	r2, #1
 80078c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078c8:	f7fd f9ce 	bl	8004c68 <HAL_GetTick>
 80078cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078ce:	e008      	b.n	80078e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078d0:	f7fd f9ca 	bl	8004c68 <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d901      	bls.n	80078e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e167      	b.n	8007bb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078e2:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <HAL_RCC_OscConfig+0x240>)
 80078e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d0f0      	beq.n	80078d0 <HAL_RCC_OscConfig+0x200>
 80078ee:	e01b      	b.n	8007928 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078f0:	4b09      	ldr	r3, [pc, #36]	; (8007918 <HAL_RCC_OscConfig+0x248>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078f6:	f7fd f9b7 	bl	8004c68 <HAL_GetTick>
 80078fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078fc:	e00e      	b.n	800791c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078fe:	f7fd f9b3 	bl	8004c68 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	2b02      	cmp	r3, #2
 800790a:	d907      	bls.n	800791c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e150      	b.n	8007bb2 <HAL_RCC_OscConfig+0x4e2>
 8007910:	40023800 	.word	0x40023800
 8007914:	42470000 	.word	0x42470000
 8007918:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800791c:	4b88      	ldr	r3, [pc, #544]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 800791e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007920:	f003 0302 	and.w	r3, r3, #2
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1ea      	bne.n	80078fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 8097 	beq.w	8007a64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007936:	2300      	movs	r3, #0
 8007938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800793a:	4b81      	ldr	r3, [pc, #516]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10f      	bne.n	8007966 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007946:	2300      	movs	r3, #0
 8007948:	60bb      	str	r3, [r7, #8]
 800794a:	4b7d      	ldr	r3, [pc, #500]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 800794c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794e:	4a7c      	ldr	r2, [pc, #496]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 8007950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007954:	6413      	str	r3, [r2, #64]	; 0x40
 8007956:	4b7a      	ldr	r3, [pc, #488]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800795e:	60bb      	str	r3, [r7, #8]
 8007960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007962:	2301      	movs	r3, #1
 8007964:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007966:	4b77      	ldr	r3, [pc, #476]	; (8007b44 <HAL_RCC_OscConfig+0x474>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800796e:	2b00      	cmp	r3, #0
 8007970:	d118      	bne.n	80079a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007972:	4b74      	ldr	r3, [pc, #464]	; (8007b44 <HAL_RCC_OscConfig+0x474>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a73      	ldr	r2, [pc, #460]	; (8007b44 <HAL_RCC_OscConfig+0x474>)
 8007978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800797c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800797e:	f7fd f973 	bl	8004c68 <HAL_GetTick>
 8007982:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007984:	e008      	b.n	8007998 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007986:	f7fd f96f 	bl	8004c68 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	2b02      	cmp	r3, #2
 8007992:	d901      	bls.n	8007998 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e10c      	b.n	8007bb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007998:	4b6a      	ldr	r3, [pc, #424]	; (8007b44 <HAL_RCC_OscConfig+0x474>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d0f0      	beq.n	8007986 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d106      	bne.n	80079ba <HAL_RCC_OscConfig+0x2ea>
 80079ac:	4b64      	ldr	r3, [pc, #400]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 80079ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b0:	4a63      	ldr	r2, [pc, #396]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 80079b2:	f043 0301 	orr.w	r3, r3, #1
 80079b6:	6713      	str	r3, [r2, #112]	; 0x70
 80079b8:	e01c      	b.n	80079f4 <HAL_RCC_OscConfig+0x324>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	2b05      	cmp	r3, #5
 80079c0:	d10c      	bne.n	80079dc <HAL_RCC_OscConfig+0x30c>
 80079c2:	4b5f      	ldr	r3, [pc, #380]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 80079c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c6:	4a5e      	ldr	r2, [pc, #376]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 80079c8:	f043 0304 	orr.w	r3, r3, #4
 80079cc:	6713      	str	r3, [r2, #112]	; 0x70
 80079ce:	4b5c      	ldr	r3, [pc, #368]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 80079d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d2:	4a5b      	ldr	r2, [pc, #364]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 80079d4:	f043 0301 	orr.w	r3, r3, #1
 80079d8:	6713      	str	r3, [r2, #112]	; 0x70
 80079da:	e00b      	b.n	80079f4 <HAL_RCC_OscConfig+0x324>
 80079dc:	4b58      	ldr	r3, [pc, #352]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 80079de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e0:	4a57      	ldr	r2, [pc, #348]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 80079e2:	f023 0301 	bic.w	r3, r3, #1
 80079e6:	6713      	str	r3, [r2, #112]	; 0x70
 80079e8:	4b55      	ldr	r3, [pc, #340]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 80079ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ec:	4a54      	ldr	r2, [pc, #336]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 80079ee:	f023 0304 	bic.w	r3, r3, #4
 80079f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d015      	beq.n	8007a28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079fc:	f7fd f934 	bl	8004c68 <HAL_GetTick>
 8007a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a02:	e00a      	b.n	8007a1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a04:	f7fd f930 	bl	8004c68 <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d901      	bls.n	8007a1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e0cb      	b.n	8007bb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a1a:	4b49      	ldr	r3, [pc, #292]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 8007a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0ee      	beq.n	8007a04 <HAL_RCC_OscConfig+0x334>
 8007a26:	e014      	b.n	8007a52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a28:	f7fd f91e 	bl	8004c68 <HAL_GetTick>
 8007a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a2e:	e00a      	b.n	8007a46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a30:	f7fd f91a 	bl	8004c68 <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d901      	bls.n	8007a46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e0b5      	b.n	8007bb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a46:	4b3e      	ldr	r3, [pc, #248]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 8007a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1ee      	bne.n	8007a30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a52:	7dfb      	ldrb	r3, [r7, #23]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d105      	bne.n	8007a64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a58:	4b39      	ldr	r3, [pc, #228]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5c:	4a38      	ldr	r2, [pc, #224]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 8007a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 80a1 	beq.w	8007bb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a6e:	4b34      	ldr	r3, [pc, #208]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f003 030c 	and.w	r3, r3, #12
 8007a76:	2b08      	cmp	r3, #8
 8007a78:	d05c      	beq.n	8007b34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d141      	bne.n	8007b06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a82:	4b31      	ldr	r3, [pc, #196]	; (8007b48 <HAL_RCC_OscConfig+0x478>)
 8007a84:	2200      	movs	r2, #0
 8007a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a88:	f7fd f8ee 	bl	8004c68 <HAL_GetTick>
 8007a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a8e:	e008      	b.n	8007aa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a90:	f7fd f8ea 	bl	8004c68 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d901      	bls.n	8007aa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e087      	b.n	8007bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aa2:	4b27      	ldr	r3, [pc, #156]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1f0      	bne.n	8007a90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	69da      	ldr	r2, [r3, #28]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	019b      	lsls	r3, r3, #6
 8007abe:	431a      	orrs	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac4:	085b      	lsrs	r3, r3, #1
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	041b      	lsls	r3, r3, #16
 8007aca:	431a      	orrs	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad0:	061b      	lsls	r3, r3, #24
 8007ad2:	491b      	ldr	r1, [pc, #108]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ad8:	4b1b      	ldr	r3, [pc, #108]	; (8007b48 <HAL_RCC_OscConfig+0x478>)
 8007ada:	2201      	movs	r2, #1
 8007adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ade:	f7fd f8c3 	bl	8004c68 <HAL_GetTick>
 8007ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ae4:	e008      	b.n	8007af8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ae6:	f7fd f8bf 	bl	8004c68 <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d901      	bls.n	8007af8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e05c      	b.n	8007bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007af8:	4b11      	ldr	r3, [pc, #68]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d0f0      	beq.n	8007ae6 <HAL_RCC_OscConfig+0x416>
 8007b04:	e054      	b.n	8007bb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b06:	4b10      	ldr	r3, [pc, #64]	; (8007b48 <HAL_RCC_OscConfig+0x478>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b0c:	f7fd f8ac 	bl	8004c68 <HAL_GetTick>
 8007b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b12:	e008      	b.n	8007b26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b14:	f7fd f8a8 	bl	8004c68 <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e045      	b.n	8007bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b26:	4b06      	ldr	r3, [pc, #24]	; (8007b40 <HAL_RCC_OscConfig+0x470>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1f0      	bne.n	8007b14 <HAL_RCC_OscConfig+0x444>
 8007b32:	e03d      	b.n	8007bb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d107      	bne.n	8007b4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e038      	b.n	8007bb2 <HAL_RCC_OscConfig+0x4e2>
 8007b40:	40023800 	.word	0x40023800
 8007b44:	40007000 	.word	0x40007000
 8007b48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b4c:	4b1b      	ldr	r3, [pc, #108]	; (8007bbc <HAL_RCC_OscConfig+0x4ec>)
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d028      	beq.n	8007bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d121      	bne.n	8007bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d11a      	bne.n	8007bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d111      	bne.n	8007bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b92:	085b      	lsrs	r3, r3, #1
 8007b94:	3b01      	subs	r3, #1
 8007b96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d107      	bne.n	8007bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d001      	beq.n	8007bb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e000      	b.n	8007bb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3718      	adds	r7, #24
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	40023800 	.word	0x40023800

08007bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e0cc      	b.n	8007d6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007bd4:	4b68      	ldr	r3, [pc, #416]	; (8007d78 <HAL_RCC_ClockConfig+0x1b8>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0307 	and.w	r3, r3, #7
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d90c      	bls.n	8007bfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007be2:	4b65      	ldr	r3, [pc, #404]	; (8007d78 <HAL_RCC_ClockConfig+0x1b8>)
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	b2d2      	uxtb	r2, r2
 8007be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bea:	4b63      	ldr	r3, [pc, #396]	; (8007d78 <HAL_RCC_ClockConfig+0x1b8>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0307 	and.w	r3, r3, #7
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d001      	beq.n	8007bfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e0b8      	b.n	8007d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0302 	and.w	r3, r3, #2
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d020      	beq.n	8007c4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d005      	beq.n	8007c20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c14:	4b59      	ldr	r3, [pc, #356]	; (8007d7c <HAL_RCC_ClockConfig+0x1bc>)
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	4a58      	ldr	r2, [pc, #352]	; (8007d7c <HAL_RCC_ClockConfig+0x1bc>)
 8007c1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0308 	and.w	r3, r3, #8
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d005      	beq.n	8007c38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c2c:	4b53      	ldr	r3, [pc, #332]	; (8007d7c <HAL_RCC_ClockConfig+0x1bc>)
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	4a52      	ldr	r2, [pc, #328]	; (8007d7c <HAL_RCC_ClockConfig+0x1bc>)
 8007c32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c38:	4b50      	ldr	r3, [pc, #320]	; (8007d7c <HAL_RCC_ClockConfig+0x1bc>)
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	494d      	ldr	r1, [pc, #308]	; (8007d7c <HAL_RCC_ClockConfig+0x1bc>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d044      	beq.n	8007ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d107      	bne.n	8007c6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c5e:	4b47      	ldr	r3, [pc, #284]	; (8007d7c <HAL_RCC_ClockConfig+0x1bc>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d119      	bne.n	8007c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e07f      	b.n	8007d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d003      	beq.n	8007c7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d107      	bne.n	8007c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c7e:	4b3f      	ldr	r3, [pc, #252]	; (8007d7c <HAL_RCC_ClockConfig+0x1bc>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d109      	bne.n	8007c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e06f      	b.n	8007d6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c8e:	4b3b      	ldr	r3, [pc, #236]	; (8007d7c <HAL_RCC_ClockConfig+0x1bc>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e067      	b.n	8007d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c9e:	4b37      	ldr	r3, [pc, #220]	; (8007d7c <HAL_RCC_ClockConfig+0x1bc>)
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f023 0203 	bic.w	r2, r3, #3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	4934      	ldr	r1, [pc, #208]	; (8007d7c <HAL_RCC_ClockConfig+0x1bc>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007cb0:	f7fc ffda 	bl	8004c68 <HAL_GetTick>
 8007cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cb6:	e00a      	b.n	8007cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cb8:	f7fc ffd6 	bl	8004c68 <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d901      	bls.n	8007cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e04f      	b.n	8007d6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cce:	4b2b      	ldr	r3, [pc, #172]	; (8007d7c <HAL_RCC_ClockConfig+0x1bc>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f003 020c 	and.w	r2, r3, #12
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d1eb      	bne.n	8007cb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ce0:	4b25      	ldr	r3, [pc, #148]	; (8007d78 <HAL_RCC_ClockConfig+0x1b8>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 0307 	and.w	r3, r3, #7
 8007ce8:	683a      	ldr	r2, [r7, #0]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d20c      	bcs.n	8007d08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cee:	4b22      	ldr	r3, [pc, #136]	; (8007d78 <HAL_RCC_ClockConfig+0x1b8>)
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	b2d2      	uxtb	r2, r2
 8007cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cf6:	4b20      	ldr	r3, [pc, #128]	; (8007d78 <HAL_RCC_ClockConfig+0x1b8>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0307 	and.w	r3, r3, #7
 8007cfe:	683a      	ldr	r2, [r7, #0]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d001      	beq.n	8007d08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e032      	b.n	8007d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d008      	beq.n	8007d26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d14:	4b19      	ldr	r3, [pc, #100]	; (8007d7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	4916      	ldr	r1, [pc, #88]	; (8007d7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0308 	and.w	r3, r3, #8
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d009      	beq.n	8007d46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d32:	4b12      	ldr	r3, [pc, #72]	; (8007d7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	00db      	lsls	r3, r3, #3
 8007d40:	490e      	ldr	r1, [pc, #56]	; (8007d7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d46:	f000 f82d 	bl	8007da4 <HAL_RCC_GetSysClockFreq>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	4b0b      	ldr	r3, [pc, #44]	; (8007d7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	091b      	lsrs	r3, r3, #4
 8007d52:	f003 030f 	and.w	r3, r3, #15
 8007d56:	490a      	ldr	r1, [pc, #40]	; (8007d80 <HAL_RCC_ClockConfig+0x1c0>)
 8007d58:	5ccb      	ldrb	r3, [r1, r3]
 8007d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d5e:	4a09      	ldr	r2, [pc, #36]	; (8007d84 <HAL_RCC_ClockConfig+0x1c4>)
 8007d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d62:	4b09      	ldr	r3, [pc, #36]	; (8007d88 <HAL_RCC_ClockConfig+0x1c8>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fc ff3a 	bl	8004be0 <HAL_InitTick>

  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	40023c00 	.word	0x40023c00
 8007d7c:	40023800 	.word	0x40023800
 8007d80:	08010788 	.word	0x08010788
 8007d84:	20000078 	.word	0x20000078
 8007d88:	2000007c 	.word	0x2000007c

08007d8c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007d90:	4b03      	ldr	r3, [pc, #12]	; (8007da0 <HAL_RCC_EnableCSS+0x14>)
 8007d92:	2201      	movs	r2, #1
 8007d94:	601a      	str	r2, [r3, #0]
}
 8007d96:	bf00      	nop
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	4247004c 	.word	0x4247004c

08007da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007da8:	b090      	sub	sp, #64	; 0x40
 8007daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	637b      	str	r3, [r7, #52]	; 0x34
 8007db0:	2300      	movs	r3, #0
 8007db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007db4:	2300      	movs	r3, #0
 8007db6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dbc:	4b59      	ldr	r3, [pc, #356]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f003 030c 	and.w	r3, r3, #12
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	d00d      	beq.n	8007de4 <HAL_RCC_GetSysClockFreq+0x40>
 8007dc8:	2b08      	cmp	r3, #8
 8007dca:	f200 80a1 	bhi.w	8007f10 <HAL_RCC_GetSysClockFreq+0x16c>
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d002      	beq.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8007dd2:	2b04      	cmp	r3, #4
 8007dd4:	d003      	beq.n	8007dde <HAL_RCC_GetSysClockFreq+0x3a>
 8007dd6:	e09b      	b.n	8007f10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007dd8:	4b53      	ldr	r3, [pc, #332]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x184>)
 8007dda:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007ddc:	e09b      	b.n	8007f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007dde:	4b53      	ldr	r3, [pc, #332]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8007de0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007de2:	e098      	b.n	8007f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007de4:	4b4f      	ldr	r3, [pc, #316]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007dee:	4b4d      	ldr	r3, [pc, #308]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d028      	beq.n	8007e4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dfa:	4b4a      	ldr	r3, [pc, #296]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	099b      	lsrs	r3, r3, #6
 8007e00:	2200      	movs	r2, #0
 8007e02:	623b      	str	r3, [r7, #32]
 8007e04:	627a      	str	r2, [r7, #36]	; 0x24
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	4b47      	ldr	r3, [pc, #284]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8007e10:	fb03 f201 	mul.w	r2, r3, r1
 8007e14:	2300      	movs	r3, #0
 8007e16:	fb00 f303 	mul.w	r3, r0, r3
 8007e1a:	4413      	add	r3, r2
 8007e1c:	4a43      	ldr	r2, [pc, #268]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8007e1e:	fba0 1202 	umull	r1, r2, r0, r2
 8007e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e24:	460a      	mov	r2, r1
 8007e26:	62ba      	str	r2, [r7, #40]	; 0x28
 8007e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e2a:	4413      	add	r3, r2
 8007e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e30:	2200      	movs	r2, #0
 8007e32:	61bb      	str	r3, [r7, #24]
 8007e34:	61fa      	str	r2, [r7, #28]
 8007e36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e3e:	f7f8 feb3 	bl	8000ba8 <__aeabi_uldivmod>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	4613      	mov	r3, r2
 8007e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e4a:	e053      	b.n	8007ef4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e4c:	4b35      	ldr	r3, [pc, #212]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	099b      	lsrs	r3, r3, #6
 8007e52:	2200      	movs	r2, #0
 8007e54:	613b      	str	r3, [r7, #16]
 8007e56:	617a      	str	r2, [r7, #20]
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007e5e:	f04f 0b00 	mov.w	fp, #0
 8007e62:	4652      	mov	r2, sl
 8007e64:	465b      	mov	r3, fp
 8007e66:	f04f 0000 	mov.w	r0, #0
 8007e6a:	f04f 0100 	mov.w	r1, #0
 8007e6e:	0159      	lsls	r1, r3, #5
 8007e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e74:	0150      	lsls	r0, r2, #5
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	ebb2 080a 	subs.w	r8, r2, sl
 8007e7e:	eb63 090b 	sbc.w	r9, r3, fp
 8007e82:	f04f 0200 	mov.w	r2, #0
 8007e86:	f04f 0300 	mov.w	r3, #0
 8007e8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007e8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007e92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007e96:	ebb2 0408 	subs.w	r4, r2, r8
 8007e9a:	eb63 0509 	sbc.w	r5, r3, r9
 8007e9e:	f04f 0200 	mov.w	r2, #0
 8007ea2:	f04f 0300 	mov.w	r3, #0
 8007ea6:	00eb      	lsls	r3, r5, #3
 8007ea8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007eac:	00e2      	lsls	r2, r4, #3
 8007eae:	4614      	mov	r4, r2
 8007eb0:	461d      	mov	r5, r3
 8007eb2:	eb14 030a 	adds.w	r3, r4, sl
 8007eb6:	603b      	str	r3, [r7, #0]
 8007eb8:	eb45 030b 	adc.w	r3, r5, fp
 8007ebc:	607b      	str	r3, [r7, #4]
 8007ebe:	f04f 0200 	mov.w	r2, #0
 8007ec2:	f04f 0300 	mov.w	r3, #0
 8007ec6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007eca:	4629      	mov	r1, r5
 8007ecc:	028b      	lsls	r3, r1, #10
 8007ece:	4621      	mov	r1, r4
 8007ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	028a      	lsls	r2, r1, #10
 8007ed8:	4610      	mov	r0, r2
 8007eda:	4619      	mov	r1, r3
 8007edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ede:	2200      	movs	r2, #0
 8007ee0:	60bb      	str	r3, [r7, #8]
 8007ee2:	60fa      	str	r2, [r7, #12]
 8007ee4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ee8:	f7f8 fe5e 	bl	8000ba8 <__aeabi_uldivmod>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ef4:	4b0b      	ldr	r3, [pc, #44]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	0c1b      	lsrs	r3, r3, #16
 8007efa:	f003 0303 	and.w	r3, r3, #3
 8007efe:	3301      	adds	r3, #1
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f0e:	e002      	b.n	8007f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f10:	4b05      	ldr	r3, [pc, #20]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x184>)
 8007f12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3740      	adds	r7, #64	; 0x40
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f22:	bf00      	nop
 8007f24:	40023800 	.word	0x40023800
 8007f28:	00f42400 	.word	0x00f42400
 8007f2c:	00b71b00 	.word	0x00b71b00

08007f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f30:	b480      	push	{r7}
 8007f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f34:	4b03      	ldr	r3, [pc, #12]	; (8007f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f36:	681b      	ldr	r3, [r3, #0]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	20000078 	.word	0x20000078

08007f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f4c:	f7ff fff0 	bl	8007f30 <HAL_RCC_GetHCLKFreq>
 8007f50:	4602      	mov	r2, r0
 8007f52:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	0a9b      	lsrs	r3, r3, #10
 8007f58:	f003 0307 	and.w	r3, r3, #7
 8007f5c:	4903      	ldr	r1, [pc, #12]	; (8007f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f5e:	5ccb      	ldrb	r3, [r1, r3]
 8007f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	40023800 	.word	0x40023800
 8007f6c:	08010798 	.word	0x08010798

08007f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f74:	f7ff ffdc 	bl	8007f30 <HAL_RCC_GetHCLKFreq>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	0b5b      	lsrs	r3, r3, #13
 8007f80:	f003 0307 	and.w	r3, r3, #7
 8007f84:	4903      	ldr	r1, [pc, #12]	; (8007f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f86:	5ccb      	ldrb	r3, [r1, r3]
 8007f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	40023800 	.word	0x40023800
 8007f94:	08010798 	.word	0x08010798

08007f98 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007f9c:	4b06      	ldr	r3, [pc, #24]	; (8007fb8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa4:	2b80      	cmp	r3, #128	; 0x80
 8007fa6:	d104      	bne.n	8007fb2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007fa8:	f000 f80a 	bl	8007fc0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007fac:	4b03      	ldr	r3, [pc, #12]	; (8007fbc <HAL_RCC_NMI_IRQHandler+0x24>)
 8007fae:	2280      	movs	r2, #128	; 0x80
 8007fb0:	701a      	strb	r2, [r3, #0]
  }
}
 8007fb2:	bf00      	nop
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	40023800 	.word	0x40023800
 8007fbc:	4002380e 	.word	0x4002380e

08007fc0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8007fc4:	bf00      	nop
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b082      	sub	sp, #8
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e07b      	b.n	80080d8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d108      	bne.n	8007ffa <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ff0:	d009      	beq.n	8008006 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	61da      	str	r2, [r3, #28]
 8007ff8:	e005      	b.n	8008006 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b00      	cmp	r3, #0
 8008016:	d106      	bne.n	8008026 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7fc f885 	bl	8004130 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2202      	movs	r2, #2
 800802a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800803c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800804e:	431a      	orrs	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008058:	431a      	orrs	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	f003 0302 	and.w	r3, r3, #2
 8008062:	431a      	orrs	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	431a      	orrs	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008076:	431a      	orrs	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	69db      	ldr	r3, [r3, #28]
 800807c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008080:	431a      	orrs	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800808a:	ea42 0103 	orr.w	r1, r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008092:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	0c1b      	lsrs	r3, r3, #16
 80080a4:	f003 0104 	and.w	r1, r3, #4
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ac:	f003 0210 	and.w	r2, r3, #16
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	430a      	orrs	r2, r1
 80080b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	69da      	ldr	r2, [r3, #28]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08c      	sub	sp, #48	; 0x30
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80080ee:	2301      	movs	r3, #1
 80080f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d101      	bne.n	8008106 <HAL_SPI_TransmitReceive+0x26>
 8008102:	2302      	movs	r3, #2
 8008104:	e18a      	b.n	800841c <HAL_SPI_TransmitReceive+0x33c>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800810e:	f7fc fdab 	bl	8004c68 <HAL_GetTick>
 8008112:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800811a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008124:	887b      	ldrh	r3, [r7, #2]
 8008126:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008128:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800812c:	2b01      	cmp	r3, #1
 800812e:	d00f      	beq.n	8008150 <HAL_SPI_TransmitReceive+0x70>
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008136:	d107      	bne.n	8008148 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d103      	bne.n	8008148 <HAL_SPI_TransmitReceive+0x68>
 8008140:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008144:	2b04      	cmp	r3, #4
 8008146:	d003      	beq.n	8008150 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008148:	2302      	movs	r3, #2
 800814a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800814e:	e15b      	b.n	8008408 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d005      	beq.n	8008162 <HAL_SPI_TransmitReceive+0x82>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <HAL_SPI_TransmitReceive+0x82>
 800815c:	887b      	ldrh	r3, [r7, #2]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d103      	bne.n	800816a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008168:	e14e      	b.n	8008408 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b04      	cmp	r3, #4
 8008174:	d003      	beq.n	800817e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2205      	movs	r2, #5
 800817a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	887a      	ldrh	r2, [r7, #2]
 800818e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	887a      	ldrh	r2, [r7, #2]
 8008194:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	887a      	ldrh	r2, [r7, #2]
 80081a0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	887a      	ldrh	r2, [r7, #2]
 80081a6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081be:	2b40      	cmp	r3, #64	; 0x40
 80081c0:	d007      	beq.n	80081d2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081da:	d178      	bne.n	80082ce <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d002      	beq.n	80081ea <HAL_SPI_TransmitReceive+0x10a>
 80081e4:	8b7b      	ldrh	r3, [r7, #26]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d166      	bne.n	80082b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ee:	881a      	ldrh	r2, [r3, #0]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fa:	1c9a      	adds	r2, r3, #2
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008204:	b29b      	uxth	r3, r3
 8008206:	3b01      	subs	r3, #1
 8008208:	b29a      	uxth	r2, r3
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800820e:	e053      	b.n	80082b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f003 0302 	and.w	r3, r3, #2
 800821a:	2b02      	cmp	r3, #2
 800821c:	d11b      	bne.n	8008256 <HAL_SPI_TransmitReceive+0x176>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008222:	b29b      	uxth	r3, r3
 8008224:	2b00      	cmp	r3, #0
 8008226:	d016      	beq.n	8008256 <HAL_SPI_TransmitReceive+0x176>
 8008228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822a:	2b01      	cmp	r3, #1
 800822c:	d113      	bne.n	8008256 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008232:	881a      	ldrh	r2, [r3, #0]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823e:	1c9a      	adds	r2, r3, #2
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008248:	b29b      	uxth	r3, r3
 800824a:	3b01      	subs	r3, #1
 800824c:	b29a      	uxth	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008252:	2300      	movs	r3, #0
 8008254:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b01      	cmp	r3, #1
 8008262:	d119      	bne.n	8008298 <HAL_SPI_TransmitReceive+0x1b8>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008268:	b29b      	uxth	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d014      	beq.n	8008298 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68da      	ldr	r2, [r3, #12]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008278:	b292      	uxth	r2, r2
 800827a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008280:	1c9a      	adds	r2, r3, #2
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800828a:	b29b      	uxth	r3, r3
 800828c:	3b01      	subs	r3, #1
 800828e:	b29a      	uxth	r2, r3
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008294:	2301      	movs	r3, #1
 8008296:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008298:	f7fc fce6 	bl	8004c68 <HAL_GetTick>
 800829c:	4602      	mov	r2, r0
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d807      	bhi.n	80082b8 <HAL_SPI_TransmitReceive+0x1d8>
 80082a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ae:	d003      	beq.n	80082b8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80082b6:	e0a7      	b.n	8008408 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082bc:	b29b      	uxth	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1a6      	bne.n	8008210 <HAL_SPI_TransmitReceive+0x130>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1a1      	bne.n	8008210 <HAL_SPI_TransmitReceive+0x130>
 80082cc:	e07c      	b.n	80083c8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d002      	beq.n	80082dc <HAL_SPI_TransmitReceive+0x1fc>
 80082d6:	8b7b      	ldrh	r3, [r7, #26]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d16b      	bne.n	80083b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	330c      	adds	r3, #12
 80082e6:	7812      	ldrb	r2, [r2, #0]
 80082e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ee:	1c5a      	adds	r2, r3, #1
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	3b01      	subs	r3, #1
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008302:	e057      	b.n	80083b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f003 0302 	and.w	r3, r3, #2
 800830e:	2b02      	cmp	r3, #2
 8008310:	d11c      	bne.n	800834c <HAL_SPI_TransmitReceive+0x26c>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008316:	b29b      	uxth	r3, r3
 8008318:	2b00      	cmp	r3, #0
 800831a:	d017      	beq.n	800834c <HAL_SPI_TransmitReceive+0x26c>
 800831c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831e:	2b01      	cmp	r3, #1
 8008320:	d114      	bne.n	800834c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	330c      	adds	r3, #12
 800832c:	7812      	ldrb	r2, [r2, #0]
 800832e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008334:	1c5a      	adds	r2, r3, #1
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800833e:	b29b      	uxth	r3, r3
 8008340:	3b01      	subs	r3, #1
 8008342:	b29a      	uxth	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008348:	2300      	movs	r3, #0
 800834a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b01      	cmp	r3, #1
 8008358:	d119      	bne.n	800838e <HAL_SPI_TransmitReceive+0x2ae>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800835e:	b29b      	uxth	r3, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	d014      	beq.n	800838e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68da      	ldr	r2, [r3, #12]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836e:	b2d2      	uxtb	r2, r2
 8008370:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008376:	1c5a      	adds	r2, r3, #1
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008380:	b29b      	uxth	r3, r3
 8008382:	3b01      	subs	r3, #1
 8008384:	b29a      	uxth	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800838a:	2301      	movs	r3, #1
 800838c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800838e:	f7fc fc6b 	bl	8004c68 <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800839a:	429a      	cmp	r2, r3
 800839c:	d803      	bhi.n	80083a6 <HAL_SPI_TransmitReceive+0x2c6>
 800839e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a4:	d102      	bne.n	80083ac <HAL_SPI_TransmitReceive+0x2cc>
 80083a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d103      	bne.n	80083b4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80083b2:	e029      	b.n	8008408 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1a2      	bne.n	8008304 <HAL_SPI_TransmitReceive+0x224>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d19d      	bne.n	8008304 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 f8b1 	bl	8008534 <SPI_EndRxTxTransaction>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d006      	beq.n	80083e6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2220      	movs	r2, #32
 80083e2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80083e4:	e010      	b.n	8008408 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10b      	bne.n	8008406 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083ee:	2300      	movs	r3, #0
 80083f0:	617b      	str	r3, [r7, #20]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	617b      	str	r3, [r7, #20]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	617b      	str	r3, [r7, #20]
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	e000      	b.n	8008408 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008406:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008418:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800841c:	4618      	mov	r0, r3
 800841e:	3730      	adds	r7, #48	; 0x30
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b088      	sub	sp, #32
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	603b      	str	r3, [r7, #0]
 8008430:	4613      	mov	r3, r2
 8008432:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008434:	f7fc fc18 	bl	8004c68 <HAL_GetTick>
 8008438:	4602      	mov	r2, r0
 800843a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843c:	1a9b      	subs	r3, r3, r2
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	4413      	add	r3, r2
 8008442:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008444:	f7fc fc10 	bl	8004c68 <HAL_GetTick>
 8008448:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800844a:	4b39      	ldr	r3, [pc, #228]	; (8008530 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	015b      	lsls	r3, r3, #5
 8008450:	0d1b      	lsrs	r3, r3, #20
 8008452:	69fa      	ldr	r2, [r7, #28]
 8008454:	fb02 f303 	mul.w	r3, r2, r3
 8008458:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800845a:	e054      	b.n	8008506 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008462:	d050      	beq.n	8008506 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008464:	f7fc fc00 	bl	8004c68 <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	69fa      	ldr	r2, [r7, #28]
 8008470:	429a      	cmp	r2, r3
 8008472:	d902      	bls.n	800847a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d13d      	bne.n	80084f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008488:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008492:	d111      	bne.n	80084b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800849c:	d004      	beq.n	80084a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084a6:	d107      	bne.n	80084b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084c0:	d10f      	bne.n	80084e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e017      	b.n	8008526 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d101      	bne.n	8008500 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	3b01      	subs	r3, #1
 8008504:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	689a      	ldr	r2, [r3, #8]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	4013      	ands	r3, r2
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	429a      	cmp	r2, r3
 8008514:	bf0c      	ite	eq
 8008516:	2301      	moveq	r3, #1
 8008518:	2300      	movne	r3, #0
 800851a:	b2db      	uxtb	r3, r3
 800851c:	461a      	mov	r2, r3
 800851e:	79fb      	ldrb	r3, [r7, #7]
 8008520:	429a      	cmp	r2, r3
 8008522:	d19b      	bne.n	800845c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3720      	adds	r7, #32
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20000078 	.word	0x20000078

08008534 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b088      	sub	sp, #32
 8008538:	af02      	add	r7, sp, #8
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008540:	4b1b      	ldr	r3, [pc, #108]	; (80085b0 <SPI_EndRxTxTransaction+0x7c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a1b      	ldr	r2, [pc, #108]	; (80085b4 <SPI_EndRxTxTransaction+0x80>)
 8008546:	fba2 2303 	umull	r2, r3, r2, r3
 800854a:	0d5b      	lsrs	r3, r3, #21
 800854c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008550:	fb02 f303 	mul.w	r3, r2, r3
 8008554:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800855e:	d112      	bne.n	8008586 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2200      	movs	r2, #0
 8008568:	2180      	movs	r1, #128	; 0x80
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f7ff ff5a 	bl	8008424 <SPI_WaitFlagStateUntilTimeout>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d016      	beq.n	80085a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800857a:	f043 0220 	orr.w	r2, r3, #32
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e00f      	b.n	80085a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00a      	beq.n	80085a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	3b01      	subs	r3, #1
 8008590:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800859c:	2b80      	cmp	r3, #128	; 0x80
 800859e:	d0f2      	beq.n	8008586 <SPI_EndRxTxTransaction+0x52>
 80085a0:	e000      	b.n	80085a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80085a2:	bf00      	nop
  }

  return HAL_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3718      	adds	r7, #24
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	20000078 	.word	0x20000078
 80085b4:	165e9f81 	.word	0x165e9f81

080085b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d101      	bne.n	80085ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e041      	b.n	800864e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d106      	bne.n	80085e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7fb fe46 	bl	8004270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3304      	adds	r3, #4
 80085f4:	4619      	mov	r1, r3
 80085f6:	4610      	mov	r0, r2
 80085f8:	f000 fba8 	bl	8008d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
	...

08008658 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b01      	cmp	r3, #1
 800866a:	d001      	beq.n	8008670 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e046      	b.n	80086fe <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2202      	movs	r2, #2
 8008674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a23      	ldr	r2, [pc, #140]	; (800870c <HAL_TIM_Base_Start+0xb4>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d022      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800868a:	d01d      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a1f      	ldr	r2, [pc, #124]	; (8008710 <HAL_TIM_Base_Start+0xb8>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d018      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a1e      	ldr	r2, [pc, #120]	; (8008714 <HAL_TIM_Base_Start+0xbc>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d013      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a1c      	ldr	r2, [pc, #112]	; (8008718 <HAL_TIM_Base_Start+0xc0>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d00e      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a1b      	ldr	r2, [pc, #108]	; (800871c <HAL_TIM_Base_Start+0xc4>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d009      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a19      	ldr	r2, [pc, #100]	; (8008720 <HAL_TIM_Base_Start+0xc8>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d004      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a18      	ldr	r2, [pc, #96]	; (8008724 <HAL_TIM_Base_Start+0xcc>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d111      	bne.n	80086ec <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f003 0307 	and.w	r3, r3, #7
 80086d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2b06      	cmp	r3, #6
 80086d8:	d010      	beq.n	80086fc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f042 0201 	orr.w	r2, r2, #1
 80086e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ea:	e007      	b.n	80086fc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f042 0201 	orr.w	r2, r2, #1
 80086fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3714      	adds	r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	40010000 	.word	0x40010000
 8008710:	40000400 	.word	0x40000400
 8008714:	40000800 	.word	0x40000800
 8008718:	40000c00 	.word	0x40000c00
 800871c:	40010400 	.word	0x40010400
 8008720:	40014000 	.word	0x40014000
 8008724:	40001800 	.word	0x40001800

08008728 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e041      	b.n	80087be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d106      	bne.n	8008754 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7fb fd56 	bl	8004200 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2202      	movs	r2, #2
 8008758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3304      	adds	r3, #4
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	f000 faf0 	bl	8008d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d109      	bne.n	80087ec <HAL_TIM_PWM_Start+0x24>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	bf14      	ite	ne
 80087e4:	2301      	movne	r3, #1
 80087e6:	2300      	moveq	r3, #0
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	e022      	b.n	8008832 <HAL_TIM_PWM_Start+0x6a>
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	2b04      	cmp	r3, #4
 80087f0:	d109      	bne.n	8008806 <HAL_TIM_PWM_Start+0x3e>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	bf14      	ite	ne
 80087fe:	2301      	movne	r3, #1
 8008800:	2300      	moveq	r3, #0
 8008802:	b2db      	uxtb	r3, r3
 8008804:	e015      	b.n	8008832 <HAL_TIM_PWM_Start+0x6a>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	2b08      	cmp	r3, #8
 800880a:	d109      	bne.n	8008820 <HAL_TIM_PWM_Start+0x58>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b01      	cmp	r3, #1
 8008816:	bf14      	ite	ne
 8008818:	2301      	movne	r3, #1
 800881a:	2300      	moveq	r3, #0
 800881c:	b2db      	uxtb	r3, r3
 800881e:	e008      	b.n	8008832 <HAL_TIM_PWM_Start+0x6a>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008826:	b2db      	uxtb	r3, r3
 8008828:	2b01      	cmp	r3, #1
 800882a:	bf14      	ite	ne
 800882c:	2301      	movne	r3, #1
 800882e:	2300      	moveq	r3, #0
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b00      	cmp	r3, #0
 8008834:	d001      	beq.n	800883a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e07c      	b.n	8008934 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d104      	bne.n	800884a <HAL_TIM_PWM_Start+0x82>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2202      	movs	r2, #2
 8008844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008848:	e013      	b.n	8008872 <HAL_TIM_PWM_Start+0xaa>
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	2b04      	cmp	r3, #4
 800884e:	d104      	bne.n	800885a <HAL_TIM_PWM_Start+0x92>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008858:	e00b      	b.n	8008872 <HAL_TIM_PWM_Start+0xaa>
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b08      	cmp	r3, #8
 800885e:	d104      	bne.n	800886a <HAL_TIM_PWM_Start+0xa2>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2202      	movs	r2, #2
 8008864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008868:	e003      	b.n	8008872 <HAL_TIM_PWM_Start+0xaa>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2202      	movs	r2, #2
 800886e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2201      	movs	r2, #1
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	4618      	mov	r0, r3
 800887c:	f000 fd50 	bl	8009320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a2d      	ldr	r2, [pc, #180]	; (800893c <HAL_TIM_PWM_Start+0x174>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d004      	beq.n	8008894 <HAL_TIM_PWM_Start+0xcc>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a2c      	ldr	r2, [pc, #176]	; (8008940 <HAL_TIM_PWM_Start+0x178>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d101      	bne.n	8008898 <HAL_TIM_PWM_Start+0xd0>
 8008894:	2301      	movs	r3, #1
 8008896:	e000      	b.n	800889a <HAL_TIM_PWM_Start+0xd2>
 8008898:	2300      	movs	r3, #0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d007      	beq.n	80088ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a22      	ldr	r2, [pc, #136]	; (800893c <HAL_TIM_PWM_Start+0x174>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d022      	beq.n	80088fe <HAL_TIM_PWM_Start+0x136>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088c0:	d01d      	beq.n	80088fe <HAL_TIM_PWM_Start+0x136>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a1f      	ldr	r2, [pc, #124]	; (8008944 <HAL_TIM_PWM_Start+0x17c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d018      	beq.n	80088fe <HAL_TIM_PWM_Start+0x136>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a1d      	ldr	r2, [pc, #116]	; (8008948 <HAL_TIM_PWM_Start+0x180>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d013      	beq.n	80088fe <HAL_TIM_PWM_Start+0x136>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a1c      	ldr	r2, [pc, #112]	; (800894c <HAL_TIM_PWM_Start+0x184>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d00e      	beq.n	80088fe <HAL_TIM_PWM_Start+0x136>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a16      	ldr	r2, [pc, #88]	; (8008940 <HAL_TIM_PWM_Start+0x178>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d009      	beq.n	80088fe <HAL_TIM_PWM_Start+0x136>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a18      	ldr	r2, [pc, #96]	; (8008950 <HAL_TIM_PWM_Start+0x188>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d004      	beq.n	80088fe <HAL_TIM_PWM_Start+0x136>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a16      	ldr	r2, [pc, #88]	; (8008954 <HAL_TIM_PWM_Start+0x18c>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d111      	bne.n	8008922 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f003 0307 	and.w	r3, r3, #7
 8008908:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2b06      	cmp	r3, #6
 800890e:	d010      	beq.n	8008932 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f042 0201 	orr.w	r2, r2, #1
 800891e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008920:	e007      	b.n	8008932 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f042 0201 	orr.w	r2, r2, #1
 8008930:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	40010000 	.word	0x40010000
 8008940:	40010400 	.word	0x40010400
 8008944:	40000400 	.word	0x40000400
 8008948:	40000800 	.word	0x40000800
 800894c:	40000c00 	.word	0x40000c00
 8008950:	40014000 	.word	0x40014000
 8008954:	40001800 	.word	0x40001800

08008958 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2200      	movs	r2, #0
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	4618      	mov	r0, r3
 800896c:	f000 fcd8 	bl	8009320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a2e      	ldr	r2, [pc, #184]	; (8008a30 <HAL_TIM_PWM_Stop+0xd8>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d004      	beq.n	8008984 <HAL_TIM_PWM_Stop+0x2c>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a2d      	ldr	r2, [pc, #180]	; (8008a34 <HAL_TIM_PWM_Stop+0xdc>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d101      	bne.n	8008988 <HAL_TIM_PWM_Stop+0x30>
 8008984:	2301      	movs	r3, #1
 8008986:	e000      	b.n	800898a <HAL_TIM_PWM_Stop+0x32>
 8008988:	2300      	movs	r3, #0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d017      	beq.n	80089be <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6a1a      	ldr	r2, [r3, #32]
 8008994:	f241 1311 	movw	r3, #4369	; 0x1111
 8008998:	4013      	ands	r3, r2
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10f      	bne.n	80089be <HAL_TIM_PWM_Stop+0x66>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6a1a      	ldr	r2, [r3, #32]
 80089a4:	f240 4344 	movw	r3, #1092	; 0x444
 80089a8:	4013      	ands	r3, r2
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d107      	bne.n	80089be <HAL_TIM_PWM_Stop+0x66>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	6a1a      	ldr	r2, [r3, #32]
 80089c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80089c8:	4013      	ands	r3, r2
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10f      	bne.n	80089ee <HAL_TIM_PWM_Stop+0x96>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	6a1a      	ldr	r2, [r3, #32]
 80089d4:	f240 4344 	movw	r3, #1092	; 0x444
 80089d8:	4013      	ands	r3, r2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d107      	bne.n	80089ee <HAL_TIM_PWM_Stop+0x96>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f022 0201 	bic.w	r2, r2, #1
 80089ec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d104      	bne.n	80089fe <HAL_TIM_PWM_Stop+0xa6>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089fc:	e013      	b.n	8008a26 <HAL_TIM_PWM_Stop+0xce>
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2b04      	cmp	r3, #4
 8008a02:	d104      	bne.n	8008a0e <HAL_TIM_PWM_Stop+0xb6>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a0c:	e00b      	b.n	8008a26 <HAL_TIM_PWM_Stop+0xce>
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	2b08      	cmp	r3, #8
 8008a12:	d104      	bne.n	8008a1e <HAL_TIM_PWM_Stop+0xc6>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a1c:	e003      	b.n	8008a26 <HAL_TIM_PWM_Stop+0xce>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	40010000 	.word	0x40010000
 8008a34:	40010400 	.word	0x40010400

08008a38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d101      	bne.n	8008a56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008a52:	2302      	movs	r3, #2
 8008a54:	e0ae      	b.n	8008bb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b0c      	cmp	r3, #12
 8008a62:	f200 809f 	bhi.w	8008ba4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008a66:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6c:	08008aa1 	.word	0x08008aa1
 8008a70:	08008ba5 	.word	0x08008ba5
 8008a74:	08008ba5 	.word	0x08008ba5
 8008a78:	08008ba5 	.word	0x08008ba5
 8008a7c:	08008ae1 	.word	0x08008ae1
 8008a80:	08008ba5 	.word	0x08008ba5
 8008a84:	08008ba5 	.word	0x08008ba5
 8008a88:	08008ba5 	.word	0x08008ba5
 8008a8c:	08008b23 	.word	0x08008b23
 8008a90:	08008ba5 	.word	0x08008ba5
 8008a94:	08008ba5 	.word	0x08008ba5
 8008a98:	08008ba5 	.word	0x08008ba5
 8008a9c:	08008b63 	.word	0x08008b63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68b9      	ldr	r1, [r7, #8]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 f9f0 	bl	8008e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	699a      	ldr	r2, [r3, #24]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f042 0208 	orr.w	r2, r2, #8
 8008aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	699a      	ldr	r2, [r3, #24]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f022 0204 	bic.w	r2, r2, #4
 8008aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6999      	ldr	r1, [r3, #24]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	691a      	ldr	r2, [r3, #16]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	430a      	orrs	r2, r1
 8008adc:	619a      	str	r2, [r3, #24]
      break;
 8008ade:	e064      	b.n	8008baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68b9      	ldr	r1, [r7, #8]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 fa40 	bl	8008f6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	699a      	ldr	r2, [r3, #24]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	699a      	ldr	r2, [r3, #24]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6999      	ldr	r1, [r3, #24]
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	021a      	lsls	r2, r3, #8
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	430a      	orrs	r2, r1
 8008b1e:	619a      	str	r2, [r3, #24]
      break;
 8008b20:	e043      	b.n	8008baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	68b9      	ldr	r1, [r7, #8]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 fa95 	bl	8009058 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	69da      	ldr	r2, [r3, #28]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f042 0208 	orr.w	r2, r2, #8
 8008b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	69da      	ldr	r2, [r3, #28]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f022 0204 	bic.w	r2, r2, #4
 8008b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	69d9      	ldr	r1, [r3, #28]
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	691a      	ldr	r2, [r3, #16]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	430a      	orrs	r2, r1
 8008b5e:	61da      	str	r2, [r3, #28]
      break;
 8008b60:	e023      	b.n	8008baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68b9      	ldr	r1, [r7, #8]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f000 fae9 	bl	8009140 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	69da      	ldr	r2, [r3, #28]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	69da      	ldr	r2, [r3, #28]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	69d9      	ldr	r1, [r3, #28]
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	021a      	lsls	r2, r3, #8
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	430a      	orrs	r2, r1
 8008ba0:	61da      	str	r2, [r3, #28]
      break;
 8008ba2:	e002      	b.n	8008baa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ba8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3718      	adds	r7, #24
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d101      	bne.n	8008bd8 <HAL_TIM_ConfigClockSource+0x1c>
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	e0b4      	b.n	8008d42 <HAL_TIM_ConfigClockSource+0x186>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2202      	movs	r2, #2
 8008be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c10:	d03e      	beq.n	8008c90 <HAL_TIM_ConfigClockSource+0xd4>
 8008c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c16:	f200 8087 	bhi.w	8008d28 <HAL_TIM_ConfigClockSource+0x16c>
 8008c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c1e:	f000 8086 	beq.w	8008d2e <HAL_TIM_ConfigClockSource+0x172>
 8008c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c26:	d87f      	bhi.n	8008d28 <HAL_TIM_ConfigClockSource+0x16c>
 8008c28:	2b70      	cmp	r3, #112	; 0x70
 8008c2a:	d01a      	beq.n	8008c62 <HAL_TIM_ConfigClockSource+0xa6>
 8008c2c:	2b70      	cmp	r3, #112	; 0x70
 8008c2e:	d87b      	bhi.n	8008d28 <HAL_TIM_ConfigClockSource+0x16c>
 8008c30:	2b60      	cmp	r3, #96	; 0x60
 8008c32:	d050      	beq.n	8008cd6 <HAL_TIM_ConfigClockSource+0x11a>
 8008c34:	2b60      	cmp	r3, #96	; 0x60
 8008c36:	d877      	bhi.n	8008d28 <HAL_TIM_ConfigClockSource+0x16c>
 8008c38:	2b50      	cmp	r3, #80	; 0x50
 8008c3a:	d03c      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0xfa>
 8008c3c:	2b50      	cmp	r3, #80	; 0x50
 8008c3e:	d873      	bhi.n	8008d28 <HAL_TIM_ConfigClockSource+0x16c>
 8008c40:	2b40      	cmp	r3, #64	; 0x40
 8008c42:	d058      	beq.n	8008cf6 <HAL_TIM_ConfigClockSource+0x13a>
 8008c44:	2b40      	cmp	r3, #64	; 0x40
 8008c46:	d86f      	bhi.n	8008d28 <HAL_TIM_ConfigClockSource+0x16c>
 8008c48:	2b30      	cmp	r3, #48	; 0x30
 8008c4a:	d064      	beq.n	8008d16 <HAL_TIM_ConfigClockSource+0x15a>
 8008c4c:	2b30      	cmp	r3, #48	; 0x30
 8008c4e:	d86b      	bhi.n	8008d28 <HAL_TIM_ConfigClockSource+0x16c>
 8008c50:	2b20      	cmp	r3, #32
 8008c52:	d060      	beq.n	8008d16 <HAL_TIM_ConfigClockSource+0x15a>
 8008c54:	2b20      	cmp	r3, #32
 8008c56:	d867      	bhi.n	8008d28 <HAL_TIM_ConfigClockSource+0x16c>
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d05c      	beq.n	8008d16 <HAL_TIM_ConfigClockSource+0x15a>
 8008c5c:	2b10      	cmp	r3, #16
 8008c5e:	d05a      	beq.n	8008d16 <HAL_TIM_ConfigClockSource+0x15a>
 8008c60:	e062      	b.n	8008d28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6818      	ldr	r0, [r3, #0]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	6899      	ldr	r1, [r3, #8]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	f000 fb35 	bl	80092e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	609a      	str	r2, [r3, #8]
      break;
 8008c8e:	e04f      	b.n	8008d30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6818      	ldr	r0, [r3, #0]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	6899      	ldr	r1, [r3, #8]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	f000 fb1e 	bl	80092e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689a      	ldr	r2, [r3, #8]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008cb2:	609a      	str	r2, [r3, #8]
      break;
 8008cb4:	e03c      	b.n	8008d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6818      	ldr	r0, [r3, #0]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	6859      	ldr	r1, [r3, #4]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	f000 fa92 	bl	80091ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2150      	movs	r1, #80	; 0x50
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 faeb 	bl	80092aa <TIM_ITRx_SetConfig>
      break;
 8008cd4:	e02c      	b.n	8008d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6818      	ldr	r0, [r3, #0]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	6859      	ldr	r1, [r3, #4]
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	f000 fab1 	bl	800924a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2160      	movs	r1, #96	; 0x60
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 fadb 	bl	80092aa <TIM_ITRx_SetConfig>
      break;
 8008cf4:	e01c      	b.n	8008d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6818      	ldr	r0, [r3, #0]
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	6859      	ldr	r1, [r3, #4]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	461a      	mov	r2, r3
 8008d04:	f000 fa72 	bl	80091ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2140      	movs	r1, #64	; 0x40
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 facb 	bl	80092aa <TIM_ITRx_SetConfig>
      break;
 8008d14:	e00c      	b.n	8008d30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4610      	mov	r0, r2
 8008d22:	f000 fac2 	bl	80092aa <TIM_ITRx_SetConfig>
      break;
 8008d26:	e003      	b.n	8008d30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d2c:	e000      	b.n	8008d30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008d2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
	...

08008d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a40      	ldr	r2, [pc, #256]	; (8008e60 <TIM_Base_SetConfig+0x114>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d013      	beq.n	8008d8c <TIM_Base_SetConfig+0x40>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d6a:	d00f      	beq.n	8008d8c <TIM_Base_SetConfig+0x40>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a3d      	ldr	r2, [pc, #244]	; (8008e64 <TIM_Base_SetConfig+0x118>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d00b      	beq.n	8008d8c <TIM_Base_SetConfig+0x40>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a3c      	ldr	r2, [pc, #240]	; (8008e68 <TIM_Base_SetConfig+0x11c>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d007      	beq.n	8008d8c <TIM_Base_SetConfig+0x40>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a3b      	ldr	r2, [pc, #236]	; (8008e6c <TIM_Base_SetConfig+0x120>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d003      	beq.n	8008d8c <TIM_Base_SetConfig+0x40>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a3a      	ldr	r2, [pc, #232]	; (8008e70 <TIM_Base_SetConfig+0x124>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d108      	bne.n	8008d9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a2f      	ldr	r2, [pc, #188]	; (8008e60 <TIM_Base_SetConfig+0x114>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d02b      	beq.n	8008dfe <TIM_Base_SetConfig+0xb2>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dac:	d027      	beq.n	8008dfe <TIM_Base_SetConfig+0xb2>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a2c      	ldr	r2, [pc, #176]	; (8008e64 <TIM_Base_SetConfig+0x118>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d023      	beq.n	8008dfe <TIM_Base_SetConfig+0xb2>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a2b      	ldr	r2, [pc, #172]	; (8008e68 <TIM_Base_SetConfig+0x11c>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d01f      	beq.n	8008dfe <TIM_Base_SetConfig+0xb2>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a2a      	ldr	r2, [pc, #168]	; (8008e6c <TIM_Base_SetConfig+0x120>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d01b      	beq.n	8008dfe <TIM_Base_SetConfig+0xb2>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a29      	ldr	r2, [pc, #164]	; (8008e70 <TIM_Base_SetConfig+0x124>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d017      	beq.n	8008dfe <TIM_Base_SetConfig+0xb2>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a28      	ldr	r2, [pc, #160]	; (8008e74 <TIM_Base_SetConfig+0x128>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d013      	beq.n	8008dfe <TIM_Base_SetConfig+0xb2>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a27      	ldr	r2, [pc, #156]	; (8008e78 <TIM_Base_SetConfig+0x12c>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d00f      	beq.n	8008dfe <TIM_Base_SetConfig+0xb2>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a26      	ldr	r2, [pc, #152]	; (8008e7c <TIM_Base_SetConfig+0x130>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d00b      	beq.n	8008dfe <TIM_Base_SetConfig+0xb2>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a25      	ldr	r2, [pc, #148]	; (8008e80 <TIM_Base_SetConfig+0x134>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d007      	beq.n	8008dfe <TIM_Base_SetConfig+0xb2>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a24      	ldr	r2, [pc, #144]	; (8008e84 <TIM_Base_SetConfig+0x138>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d003      	beq.n	8008dfe <TIM_Base_SetConfig+0xb2>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a23      	ldr	r2, [pc, #140]	; (8008e88 <TIM_Base_SetConfig+0x13c>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d108      	bne.n	8008e10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	695b      	ldr	r3, [r3, #20]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	689a      	ldr	r2, [r3, #8]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a0a      	ldr	r2, [pc, #40]	; (8008e60 <TIM_Base_SetConfig+0x114>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d003      	beq.n	8008e44 <TIM_Base_SetConfig+0xf8>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a0c      	ldr	r2, [pc, #48]	; (8008e70 <TIM_Base_SetConfig+0x124>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d103      	bne.n	8008e4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	691a      	ldr	r2, [r3, #16]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	615a      	str	r2, [r3, #20]
}
 8008e52:	bf00      	nop
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	40010000 	.word	0x40010000
 8008e64:	40000400 	.word	0x40000400
 8008e68:	40000800 	.word	0x40000800
 8008e6c:	40000c00 	.word	0x40000c00
 8008e70:	40010400 	.word	0x40010400
 8008e74:	40014000 	.word	0x40014000
 8008e78:	40014400 	.word	0x40014400
 8008e7c:	40014800 	.word	0x40014800
 8008e80:	40001800 	.word	0x40001800
 8008e84:	40001c00 	.word	0x40001c00
 8008e88:	40002000 	.word	0x40002000

08008e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	f023 0201 	bic.w	r2, r3, #1
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f023 0303 	bic.w	r3, r3, #3
 8008ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	f023 0302 	bic.w	r3, r3, #2
 8008ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a20      	ldr	r2, [pc, #128]	; (8008f64 <TIM_OC1_SetConfig+0xd8>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d003      	beq.n	8008ef0 <TIM_OC1_SetConfig+0x64>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a1f      	ldr	r2, [pc, #124]	; (8008f68 <TIM_OC1_SetConfig+0xdc>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d10c      	bne.n	8008f0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f023 0308 	bic.w	r3, r3, #8
 8008ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	f023 0304 	bic.w	r3, r3, #4
 8008f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a15      	ldr	r2, [pc, #84]	; (8008f64 <TIM_OC1_SetConfig+0xd8>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d003      	beq.n	8008f1a <TIM_OC1_SetConfig+0x8e>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a14      	ldr	r2, [pc, #80]	; (8008f68 <TIM_OC1_SetConfig+0xdc>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d111      	bne.n	8008f3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	621a      	str	r2, [r3, #32]
}
 8008f58:	bf00      	nop
 8008f5a:	371c      	adds	r7, #28
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	40010000 	.word	0x40010000
 8008f68:	40010400 	.word	0x40010400

08008f6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	f023 0210 	bic.w	r2, r3, #16
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a1b      	ldr	r3, [r3, #32]
 8008f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	021b      	lsls	r3, r3, #8
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	f023 0320 	bic.w	r3, r3, #32
 8008fb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	011b      	lsls	r3, r3, #4
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a22      	ldr	r2, [pc, #136]	; (8009050 <TIM_OC2_SetConfig+0xe4>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d003      	beq.n	8008fd4 <TIM_OC2_SetConfig+0x68>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a21      	ldr	r2, [pc, #132]	; (8009054 <TIM_OC2_SetConfig+0xe8>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d10d      	bne.n	8008ff0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	011b      	lsls	r3, r3, #4
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a17      	ldr	r2, [pc, #92]	; (8009050 <TIM_OC2_SetConfig+0xe4>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d003      	beq.n	8009000 <TIM_OC2_SetConfig+0x94>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a16      	ldr	r2, [pc, #88]	; (8009054 <TIM_OC2_SetConfig+0xe8>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d113      	bne.n	8009028 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009006:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800900e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	695b      	ldr	r3, [r3, #20]
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	693a      	ldr	r2, [r7, #16]
 8009018:	4313      	orrs	r3, r2
 800901a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	699b      	ldr	r3, [r3, #24]
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	693a      	ldr	r2, [r7, #16]
 8009024:	4313      	orrs	r3, r2
 8009026:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	693a      	ldr	r2, [r7, #16]
 800902c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	685a      	ldr	r2, [r3, #4]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	621a      	str	r2, [r3, #32]
}
 8009042:	bf00      	nop
 8009044:	371c      	adds	r7, #28
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	40010000 	.word	0x40010000
 8009054:	40010400 	.word	0x40010400

08009058 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	69db      	ldr	r3, [r3, #28]
 800907e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f023 0303 	bic.w	r3, r3, #3
 800908e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	4313      	orrs	r3, r2
 8009098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	021b      	lsls	r3, r3, #8
 80090a8:	697a      	ldr	r2, [r7, #20]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a21      	ldr	r2, [pc, #132]	; (8009138 <TIM_OC3_SetConfig+0xe0>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d003      	beq.n	80090be <TIM_OC3_SetConfig+0x66>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a20      	ldr	r2, [pc, #128]	; (800913c <TIM_OC3_SetConfig+0xe4>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d10d      	bne.n	80090da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	021b      	lsls	r3, r3, #8
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a16      	ldr	r2, [pc, #88]	; (8009138 <TIM_OC3_SetConfig+0xe0>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d003      	beq.n	80090ea <TIM_OC3_SetConfig+0x92>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a15      	ldr	r2, [pc, #84]	; (800913c <TIM_OC3_SetConfig+0xe4>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d113      	bne.n	8009112 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	695b      	ldr	r3, [r3, #20]
 80090fe:	011b      	lsls	r3, r3, #4
 8009100:	693a      	ldr	r2, [r7, #16]
 8009102:	4313      	orrs	r3, r2
 8009104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	011b      	lsls	r3, r3, #4
 800910c:	693a      	ldr	r2, [r7, #16]
 800910e:	4313      	orrs	r3, r2
 8009110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	697a      	ldr	r2, [r7, #20]
 800912a:	621a      	str	r2, [r3, #32]
}
 800912c:	bf00      	nop
 800912e:	371c      	adds	r7, #28
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	40010000 	.word	0x40010000
 800913c:	40010400 	.word	0x40010400

08009140 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009140:	b480      	push	{r7}
 8009142:	b087      	sub	sp, #28
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	69db      	ldr	r3, [r3, #28]
 8009166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800916e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	021b      	lsls	r3, r3, #8
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	4313      	orrs	r3, r2
 8009182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800918a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	031b      	lsls	r3, r3, #12
 8009192:	693a      	ldr	r2, [r7, #16]
 8009194:	4313      	orrs	r3, r2
 8009196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a12      	ldr	r2, [pc, #72]	; (80091e4 <TIM_OC4_SetConfig+0xa4>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d003      	beq.n	80091a8 <TIM_OC4_SetConfig+0x68>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a11      	ldr	r2, [pc, #68]	; (80091e8 <TIM_OC4_SetConfig+0xa8>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d109      	bne.n	80091bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	695b      	ldr	r3, [r3, #20]
 80091b4:	019b      	lsls	r3, r3, #6
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	4313      	orrs	r3, r2
 80091ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	693a      	ldr	r2, [r7, #16]
 80091d4:	621a      	str	r2, [r3, #32]
}
 80091d6:	bf00      	nop
 80091d8:	371c      	adds	r7, #28
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	40010000 	.word	0x40010000
 80091e8:	40010400 	.word	0x40010400

080091ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b087      	sub	sp, #28
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6a1b      	ldr	r3, [r3, #32]
 80091fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6a1b      	ldr	r3, [r3, #32]
 8009202:	f023 0201 	bic.w	r2, r3, #1
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	699b      	ldr	r3, [r3, #24]
 800920e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	011b      	lsls	r3, r3, #4
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	4313      	orrs	r3, r2
 8009220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f023 030a 	bic.w	r3, r3, #10
 8009228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	4313      	orrs	r3, r2
 8009230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	621a      	str	r2, [r3, #32]
}
 800923e:	bf00      	nop
 8009240:	371c      	adds	r7, #28
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800924a:	b480      	push	{r7}
 800924c:	b087      	sub	sp, #28
 800924e:	af00      	add	r7, sp, #0
 8009250:	60f8      	str	r0, [r7, #12]
 8009252:	60b9      	str	r1, [r7, #8]
 8009254:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6a1b      	ldr	r3, [r3, #32]
 800925a:	f023 0210 	bic.w	r2, r3, #16
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	699b      	ldr	r3, [r3, #24]
 8009266:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6a1b      	ldr	r3, [r3, #32]
 800926c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009274:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	031b      	lsls	r3, r3, #12
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	4313      	orrs	r3, r2
 800927e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009286:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	011b      	lsls	r3, r3, #4
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	4313      	orrs	r3, r2
 8009290:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	693a      	ldr	r2, [r7, #16]
 800929c:	621a      	str	r2, [r3, #32]
}
 800929e:	bf00      	nop
 80092a0:	371c      	adds	r7, #28
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092aa:	b480      	push	{r7}
 80092ac:	b085      	sub	sp, #20
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	f043 0307 	orr.w	r3, r3, #7
 80092cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	609a      	str	r2, [r3, #8]
}
 80092d4:	bf00      	nop
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b087      	sub	sp, #28
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	607a      	str	r2, [r7, #4]
 80092ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	021a      	lsls	r2, r3, #8
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	431a      	orrs	r2, r3
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	4313      	orrs	r3, r2
 8009308:	697a      	ldr	r2, [r7, #20]
 800930a:	4313      	orrs	r3, r2
 800930c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	609a      	str	r2, [r3, #8]
}
 8009314:	bf00      	nop
 8009316:	371c      	adds	r7, #28
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009320:	b480      	push	{r7}
 8009322:	b087      	sub	sp, #28
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	f003 031f 	and.w	r3, r3, #31
 8009332:	2201      	movs	r2, #1
 8009334:	fa02 f303 	lsl.w	r3, r2, r3
 8009338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6a1a      	ldr	r2, [r3, #32]
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	43db      	mvns	r3, r3
 8009342:	401a      	ands	r2, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6a1a      	ldr	r2, [r3, #32]
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	f003 031f 	and.w	r3, r3, #31
 8009352:	6879      	ldr	r1, [r7, #4]
 8009354:	fa01 f303 	lsl.w	r3, r1, r3
 8009358:	431a      	orrs	r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	621a      	str	r2, [r3, #32]
}
 800935e:	bf00      	nop
 8009360:	371c      	adds	r7, #28
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
	...

0800936c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800937c:	2b01      	cmp	r3, #1
 800937e:	d101      	bne.n	8009384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009380:	2302      	movs	r3, #2
 8009382:	e05a      	b.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2202      	movs	r2, #2
 8009390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a21      	ldr	r2, [pc, #132]	; (8009448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d022      	beq.n	800940e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093d0:	d01d      	beq.n	800940e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a1d      	ldr	r2, [pc, #116]	; (800944c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d018      	beq.n	800940e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a1b      	ldr	r2, [pc, #108]	; (8009450 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d013      	beq.n	800940e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a1a      	ldr	r2, [pc, #104]	; (8009454 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d00e      	beq.n	800940e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a18      	ldr	r2, [pc, #96]	; (8009458 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d009      	beq.n	800940e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a17      	ldr	r2, [pc, #92]	; (800945c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d004      	beq.n	800940e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a15      	ldr	r2, [pc, #84]	; (8009460 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d10c      	bne.n	8009428 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	4313      	orrs	r3, r2
 800941e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3714      	adds	r7, #20
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	40010000 	.word	0x40010000
 800944c:	40000400 	.word	0x40000400
 8009450:	40000800 	.word	0x40000800
 8009454:	40000c00 	.word	0x40000c00
 8009458:	40010400 	.word	0x40010400
 800945c:	40014000 	.word	0x40014000
 8009460:	40001800 	.word	0x40001800

08009464 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800946e:	2300      	movs	r3, #0
 8009470:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009478:	2b01      	cmp	r3, #1
 800947a:	d101      	bne.n	8009480 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800947c:	2302      	movs	r3, #2
 800947e:	e03d      	b.n	80094fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	4313      	orrs	r3, r2
 8009494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4313      	orrs	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	4313      	orrs	r3, r2
 80094da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	69db      	ldr	r3, [r3, #28]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3714      	adds	r7, #20
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d101      	bne.n	800951a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e03f      	b.n	800959a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b00      	cmp	r3, #0
 8009524:	d106      	bne.n	8009534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f7fa ffaa 	bl	8004488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2224      	movs	r2, #36	; 0x24
 8009538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68da      	ldr	r2, [r3, #12]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800954a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 ff81 	bl	800a454 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	691a      	ldr	r2, [r3, #16]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	695a      	ldr	r2, [r3, #20]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68da      	ldr	r2, [r3, #12]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2220      	movs	r2, #32
 800958c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2220      	movs	r2, #32
 8009594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
	...

080095a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b08c      	sub	sp, #48	; 0x30
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	4613      	mov	r3, r2
 80095b0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b20      	cmp	r3, #32
 80095bc:	d165      	bne.n	800968a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d002      	beq.n	80095ca <HAL_UART_Transmit_DMA+0x26>
 80095c4:	88fb      	ldrh	r3, [r7, #6]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e05e      	b.n	800968c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d101      	bne.n	80095dc <HAL_UART_Transmit_DMA+0x38>
 80095d8:	2302      	movs	r3, #2
 80095da:	e057      	b.n	800968c <HAL_UART_Transmit_DMA+0xe8>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	88fa      	ldrh	r2, [r7, #6]
 80095ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	88fa      	ldrh	r2, [r7, #6]
 80095f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2221      	movs	r2, #33	; 0x21
 8009600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009608:	4a22      	ldr	r2, [pc, #136]	; (8009694 <HAL_UART_Transmit_DMA+0xf0>)
 800960a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009610:	4a21      	ldr	r2, [pc, #132]	; (8009698 <HAL_UART_Transmit_DMA+0xf4>)
 8009612:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009618:	4a20      	ldr	r2, [pc, #128]	; (800969c <HAL_UART_Transmit_DMA+0xf8>)
 800961a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009620:	2200      	movs	r2, #0
 8009622:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009624:	f107 0308 	add.w	r3, r7, #8
 8009628:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800962e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009630:	6819      	ldr	r1, [r3, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	3304      	adds	r3, #4
 8009638:	461a      	mov	r2, r3
 800963a:	88fb      	ldrh	r3, [r7, #6]
 800963c:	f7fc fb66 	bl	8005d0c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009648:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3314      	adds	r3, #20
 8009658:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	e853 3f00 	ldrex	r3, [r3]
 8009660:	617b      	str	r3, [r7, #20]
   return(result);
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009668:	62bb      	str	r3, [r7, #40]	; 0x28
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3314      	adds	r3, #20
 8009670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009672:	627a      	str	r2, [r7, #36]	; 0x24
 8009674:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009676:	6a39      	ldr	r1, [r7, #32]
 8009678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800967a:	e841 2300 	strex	r3, r2, [r1]
 800967e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1e5      	bne.n	8009652 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	e000      	b.n	800968c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800968a:	2302      	movs	r3, #2
  }
}
 800968c:	4618      	mov	r0, r3
 800968e:	3730      	adds	r7, #48	; 0x30
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	08009ced 	.word	0x08009ced
 8009698:	08009d87 	.word	0x08009d87
 800969c:	08009eff 	.word	0x08009eff

080096a0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b08c      	sub	sp, #48	; 0x30
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	4613      	mov	r3, r2
 80096ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b20      	cmp	r3, #32
 80096b8:	d152      	bne.n	8009760 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80096c0:	88fb      	ldrh	r3, [r7, #6]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e04b      	b.n	8009762 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d101      	bne.n	80096d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80096d4:	2302      	movs	r3, #2
 80096d6:	e044      	b.n	8009762 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2201      	movs	r2, #1
 80096e4:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80096e6:	88fb      	ldrh	r3, [r7, #6]
 80096e8:	461a      	mov	r2, r3
 80096ea:	68b9      	ldr	r1, [r7, #8]
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f000 fc51 	bl	8009f94 <UART_Start_Receive_DMA>
 80096f2:	4603      	mov	r3, r0
 80096f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80096f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d12c      	bne.n	800975a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009704:	2b01      	cmp	r3, #1
 8009706:	d125      	bne.n	8009754 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009708:	2300      	movs	r3, #0
 800970a:	613b      	str	r3, [r7, #16]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	613b      	str	r3, [r7, #16]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	613b      	str	r3, [r7, #16]
 800971c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	330c      	adds	r3, #12
 8009724:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	e853 3f00 	ldrex	r3, [r3]
 800972c:	617b      	str	r3, [r7, #20]
   return(result);
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f043 0310 	orr.w	r3, r3, #16
 8009734:	62bb      	str	r3, [r7, #40]	; 0x28
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	330c      	adds	r3, #12
 800973c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800973e:	627a      	str	r2, [r7, #36]	; 0x24
 8009740:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009742:	6a39      	ldr	r1, [r7, #32]
 8009744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009746:	e841 2300 	strex	r3, r2, [r1]
 800974a:	61fb      	str	r3, [r7, #28]
   return(result);
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1e5      	bne.n	800971e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8009752:	e002      	b.n	800975a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800975a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800975e:	e000      	b.n	8009762 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8009760:	2302      	movs	r3, #2
  }
}
 8009762:	4618      	mov	r0, r3
 8009764:	3730      	adds	r7, #48	; 0x30
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
	...

0800976c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b0ba      	sub	sp, #232	; 0xe8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009792:	2300      	movs	r3, #0
 8009794:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009798:	2300      	movs	r3, #0
 800979a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800979e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097a2:	f003 030f 	and.w	r3, r3, #15
 80097a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80097aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10f      	bne.n	80097d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80097b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097b6:	f003 0320 	and.w	r3, r3, #32
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d009      	beq.n	80097d2 <HAL_UART_IRQHandler+0x66>
 80097be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097c2:	f003 0320 	and.w	r3, r3, #32
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d003      	beq.n	80097d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fd87 	bl	800a2de <UART_Receive_IT>
      return;
 80097d0:	e256      	b.n	8009c80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80097d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f000 80de 	beq.w	8009998 <HAL_UART_IRQHandler+0x22c>
 80097dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d106      	bne.n	80097f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80097e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f000 80d1 	beq.w	8009998 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80097f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097fa:	f003 0301 	and.w	r3, r3, #1
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00b      	beq.n	800981a <HAL_UART_IRQHandler+0xae>
 8009802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800980a:	2b00      	cmp	r3, #0
 800980c:	d005      	beq.n	800981a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009812:	f043 0201 	orr.w	r2, r3, #1
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800981a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800981e:	f003 0304 	and.w	r3, r3, #4
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00b      	beq.n	800983e <HAL_UART_IRQHandler+0xd2>
 8009826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	2b00      	cmp	r3, #0
 8009830:	d005      	beq.n	800983e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009836:	f043 0202 	orr.w	r2, r3, #2
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800983e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009842:	f003 0302 	and.w	r3, r3, #2
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00b      	beq.n	8009862 <HAL_UART_IRQHandler+0xf6>
 800984a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	2b00      	cmp	r3, #0
 8009854:	d005      	beq.n	8009862 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985a:	f043 0204 	orr.w	r2, r3, #4
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009866:	f003 0308 	and.w	r3, r3, #8
 800986a:	2b00      	cmp	r3, #0
 800986c:	d011      	beq.n	8009892 <HAL_UART_IRQHandler+0x126>
 800986e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009872:	f003 0320 	and.w	r3, r3, #32
 8009876:	2b00      	cmp	r3, #0
 8009878:	d105      	bne.n	8009886 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800987a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	2b00      	cmp	r3, #0
 8009884:	d005      	beq.n	8009892 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988a:	f043 0208 	orr.w	r2, r3, #8
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009896:	2b00      	cmp	r3, #0
 8009898:	f000 81ed 	beq.w	8009c76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800989c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098a0:	f003 0320 	and.w	r3, r3, #32
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d008      	beq.n	80098ba <HAL_UART_IRQHandler+0x14e>
 80098a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098ac:	f003 0320 	and.w	r3, r3, #32
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d002      	beq.n	80098ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fd12 	bl	800a2de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	695b      	ldr	r3, [r3, #20]
 80098c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c4:	2b40      	cmp	r3, #64	; 0x40
 80098c6:	bf0c      	ite	eq
 80098c8:	2301      	moveq	r3, #1
 80098ca:	2300      	movne	r3, #0
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d6:	f003 0308 	and.w	r3, r3, #8
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d103      	bne.n	80098e6 <HAL_UART_IRQHandler+0x17a>
 80098de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d04f      	beq.n	8009986 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fc1a 	bl	800a120 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098f6:	2b40      	cmp	r3, #64	; 0x40
 80098f8:	d141      	bne.n	800997e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	3314      	adds	r3, #20
 8009900:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009904:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009908:	e853 3f00 	ldrex	r3, [r3]
 800990c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009910:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3314      	adds	r3, #20
 8009922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009926:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800992a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009936:	e841 2300 	strex	r3, r2, [r1]
 800993a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800993e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1d9      	bne.n	80098fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800994a:	2b00      	cmp	r3, #0
 800994c:	d013      	beq.n	8009976 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009952:	4a7d      	ldr	r2, [pc, #500]	; (8009b48 <HAL_UART_IRQHandler+0x3dc>)
 8009954:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995a:	4618      	mov	r0, r3
 800995c:	f7fc fa9e 	bl	8005e9c <HAL_DMA_Abort_IT>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d016      	beq.n	8009994 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800996a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009970:	4610      	mov	r0, r2
 8009972:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009974:	e00e      	b.n	8009994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 f9ae 	bl	8009cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800997c:	e00a      	b.n	8009994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f9aa 	bl	8009cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009984:	e006      	b.n	8009994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f9a6 	bl	8009cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009992:	e170      	b.n	8009c76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009994:	bf00      	nop
    return;
 8009996:	e16e      	b.n	8009c76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800999c:	2b01      	cmp	r3, #1
 800999e:	f040 814a 	bne.w	8009c36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80099a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099a6:	f003 0310 	and.w	r3, r3, #16
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f000 8143 	beq.w	8009c36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80099b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099b4:	f003 0310 	and.w	r3, r3, #16
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 813c 	beq.w	8009c36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80099be:	2300      	movs	r3, #0
 80099c0:	60bb      	str	r3, [r7, #8]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	60bb      	str	r3, [r7, #8]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	60bb      	str	r3, [r7, #8]
 80099d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099de:	2b40      	cmp	r3, #64	; 0x40
 80099e0:	f040 80b4 	bne.w	8009b4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80099f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f000 8140 	beq.w	8009c7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80099fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a02:	429a      	cmp	r2, r3
 8009a04:	f080 8139 	bcs.w	8009c7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a14:	69db      	ldr	r3, [r3, #28]
 8009a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a1a:	f000 8088 	beq.w	8009b2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	330c      	adds	r3, #12
 8009a24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a2c:	e853 3f00 	ldrex	r3, [r3]
 8009a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	330c      	adds	r3, #12
 8009a46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009a4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009a4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009a56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009a5a:	e841 2300 	strex	r3, r2, [r1]
 8009a5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1d9      	bne.n	8009a1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3314      	adds	r3, #20
 8009a70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a7c:	f023 0301 	bic.w	r3, r3, #1
 8009a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	3314      	adds	r3, #20
 8009a8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009a8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a9a:	e841 2300 	strex	r3, r2, [r1]
 8009a9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1e1      	bne.n	8009a6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	3314      	adds	r3, #20
 8009aac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ab0:	e853 3f00 	ldrex	r3, [r3]
 8009ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009abc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	3314      	adds	r3, #20
 8009ac6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009aca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009acc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ace:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ad0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ad2:	e841 2300 	strex	r3, r2, [r1]
 8009ad6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1e3      	bne.n	8009aa6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2220      	movs	r2, #32
 8009ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	330c      	adds	r3, #12
 8009af2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009af6:	e853 3f00 	ldrex	r3, [r3]
 8009afa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009afe:	f023 0310 	bic.w	r3, r3, #16
 8009b02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	330c      	adds	r3, #12
 8009b0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009b10:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b18:	e841 2300 	strex	r3, r2, [r1]
 8009b1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1e3      	bne.n	8009aec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fc f947 	bl	8005dbc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7f8 fa98 	bl	8002074 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009b44:	e099      	b.n	8009c7a <HAL_UART_IRQHandler+0x50e>
 8009b46:	bf00      	nop
 8009b48:	0800a1e7 	.word	0x0800a1e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f000 808b 	beq.w	8009c7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009b68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 8086 	beq.w	8009c7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	330c      	adds	r3, #12
 8009b78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b7c:	e853 3f00 	ldrex	r3, [r3]
 8009b80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	330c      	adds	r3, #12
 8009b92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009b96:	647a      	str	r2, [r7, #68]	; 0x44
 8009b98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b9e:	e841 2300 	strex	r3, r2, [r1]
 8009ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1e3      	bne.n	8009b72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	3314      	adds	r3, #20
 8009bb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb4:	e853 3f00 	ldrex	r3, [r3]
 8009bb8:	623b      	str	r3, [r7, #32]
   return(result);
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	f023 0301 	bic.w	r3, r3, #1
 8009bc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	3314      	adds	r3, #20
 8009bca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009bce:	633a      	str	r2, [r7, #48]	; 0x30
 8009bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bd6:	e841 2300 	strex	r3, r2, [r1]
 8009bda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1e3      	bne.n	8009baa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2220      	movs	r2, #32
 8009be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	330c      	adds	r3, #12
 8009bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	e853 3f00 	ldrex	r3, [r3]
 8009bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f023 0310 	bic.w	r3, r3, #16
 8009c06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	330c      	adds	r3, #12
 8009c10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009c14:	61fa      	str	r2, [r7, #28]
 8009c16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c18:	69b9      	ldr	r1, [r7, #24]
 8009c1a:	69fa      	ldr	r2, [r7, #28]
 8009c1c:	e841 2300 	strex	r3, r2, [r1]
 8009c20:	617b      	str	r3, [r7, #20]
   return(result);
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d1e3      	bne.n	8009bf0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7f8 fa20 	bl	8002074 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c34:	e023      	b.n	8009c7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d009      	beq.n	8009c56 <HAL_UART_IRQHandler+0x4ea>
 8009c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d003      	beq.n	8009c56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fadd 	bl	800a20e <UART_Transmit_IT>
    return;
 8009c54:	e014      	b.n	8009c80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00e      	beq.n	8009c80 <HAL_UART_IRQHandler+0x514>
 8009c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d008      	beq.n	8009c80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fb1d 	bl	800a2ae <UART_EndTransmit_IT>
    return;
 8009c74:	e004      	b.n	8009c80 <HAL_UART_IRQHandler+0x514>
    return;
 8009c76:	bf00      	nop
 8009c78:	e002      	b.n	8009c80 <HAL_UART_IRQHandler+0x514>
      return;
 8009c7a:	bf00      	nop
 8009c7c:	e000      	b.n	8009c80 <HAL_UART_IRQHandler+0x514>
      return;
 8009c7e:	bf00      	nop
  }
}
 8009c80:	37e8      	adds	r7, #232	; 0xe8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop

08009c88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009ca4:	bf00      	nop
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b090      	sub	sp, #64	; 0x40
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d137      	bne.n	8009d78 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	3314      	adds	r3, #20
 8009d14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	e853 3f00 	ldrex	r3, [r3]
 8009d1c:	623b      	str	r3, [r7, #32]
   return(result);
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d24:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3314      	adds	r3, #20
 8009d2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d2e:	633a      	str	r2, [r7, #48]	; 0x30
 8009d30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d36:	e841 2300 	strex	r3, r2, [r1]
 8009d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1e5      	bne.n	8009d0e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	330c      	adds	r3, #12
 8009d48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	e853 3f00 	ldrex	r3, [r3]
 8009d50:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d58:	637b      	str	r3, [r7, #52]	; 0x34
 8009d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	330c      	adds	r3, #12
 8009d60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d62:	61fa      	str	r2, [r7, #28]
 8009d64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d66:	69b9      	ldr	r1, [r7, #24]
 8009d68:	69fa      	ldr	r2, [r7, #28]
 8009d6a:	e841 2300 	strex	r3, r2, [r1]
 8009d6e:	617b      	str	r3, [r7, #20]
   return(result);
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1e5      	bne.n	8009d42 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d76:	e002      	b.n	8009d7e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009d78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009d7a:	f7ff ff85 	bl	8009c88 <HAL_UART_TxCpltCallback>
}
 8009d7e:	bf00      	nop
 8009d80:	3740      	adds	r7, #64	; 0x40
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b084      	sub	sp, #16
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d92:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f7ff ff81 	bl	8009c9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d9a:	bf00      	nop
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b09c      	sub	sp, #112	; 0x70
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dae:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d172      	bne.n	8009ea4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	330c      	adds	r3, #12
 8009dca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dce:	e853 3f00 	ldrex	r3, [r3]
 8009dd2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dda:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	330c      	adds	r3, #12
 8009de2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009de4:	65ba      	str	r2, [r7, #88]	; 0x58
 8009de6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009dea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009dec:	e841 2300 	strex	r3, r2, [r1]
 8009df0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1e5      	bne.n	8009dc4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	3314      	adds	r3, #20
 8009dfe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e02:	e853 3f00 	ldrex	r3, [r3]
 8009e06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e0a:	f023 0301 	bic.w	r3, r3, #1
 8009e0e:	667b      	str	r3, [r7, #100]	; 0x64
 8009e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3314      	adds	r3, #20
 8009e16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009e18:	647a      	str	r2, [r7, #68]	; 0x44
 8009e1a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e20:	e841 2300 	strex	r3, r2, [r1]
 8009e24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1e5      	bne.n	8009df8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	3314      	adds	r3, #20
 8009e32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e36:	e853 3f00 	ldrex	r3, [r3]
 8009e3a:	623b      	str	r3, [r7, #32]
   return(result);
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e42:	663b      	str	r3, [r7, #96]	; 0x60
 8009e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	3314      	adds	r3, #20
 8009e4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009e4c:	633a      	str	r2, [r7, #48]	; 0x30
 8009e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e54:	e841 2300 	strex	r3, r2, [r1]
 8009e58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d1e5      	bne.n	8009e2c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e62:	2220      	movs	r2, #32
 8009e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d119      	bne.n	8009ea4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	330c      	adds	r3, #12
 8009e76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	e853 3f00 	ldrex	r3, [r3]
 8009e7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f023 0310 	bic.w	r3, r3, #16
 8009e86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	330c      	adds	r3, #12
 8009e8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e90:	61fa      	str	r2, [r7, #28]
 8009e92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e94:	69b9      	ldr	r1, [r7, #24]
 8009e96:	69fa      	ldr	r2, [r7, #28]
 8009e98:	e841 2300 	strex	r3, r2, [r1]
 8009e9c:	617b      	str	r3, [r7, #20]
   return(result);
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1e5      	bne.n	8009e70 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d106      	bne.n	8009eba <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009eb4:	f7f8 f8de 	bl	8002074 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009eb8:	e002      	b.n	8009ec0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009eba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009ebc:	f7ff fef8 	bl	8009cb0 <HAL_UART_RxCpltCallback>
}
 8009ec0:	bf00      	nop
 8009ec2:	3770      	adds	r7, #112	; 0x70
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d108      	bne.n	8009ef0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009ee2:	085b      	lsrs	r3, r3, #1
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f7f8 f8c3 	bl	8002074 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009eee:	e002      	b.n	8009ef6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f7ff fee7 	bl	8009cc4 <HAL_UART_RxHalfCpltCallback>
}
 8009ef6:	bf00      	nop
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b084      	sub	sp, #16
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009f06:	2300      	movs	r3, #0
 8009f08:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f1a:	2b80      	cmp	r3, #128	; 0x80
 8009f1c:	bf0c      	ite	eq
 8009f1e:	2301      	moveq	r3, #1
 8009f20:	2300      	movne	r3, #0
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b21      	cmp	r3, #33	; 0x21
 8009f30:	d108      	bne.n	8009f44 <UART_DMAError+0x46>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d005      	beq.n	8009f44 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009f3e:	68b8      	ldr	r0, [r7, #8]
 8009f40:	f000 f8c6 	bl	800a0d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4e:	2b40      	cmp	r3, #64	; 0x40
 8009f50:	bf0c      	ite	eq
 8009f52:	2301      	moveq	r3, #1
 8009f54:	2300      	movne	r3, #0
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	2b22      	cmp	r3, #34	; 0x22
 8009f64:	d108      	bne.n	8009f78 <UART_DMAError+0x7a>
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d005      	beq.n	8009f78 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009f72:	68b8      	ldr	r0, [r7, #8]
 8009f74:	f000 f8d4 	bl	800a120 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7c:	f043 0210 	orr.w	r2, r3, #16
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f84:	68b8      	ldr	r0, [r7, #8]
 8009f86:	f7ff fea7 	bl	8009cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f8a:	bf00      	nop
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
	...

08009f94 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b098      	sub	sp, #96	; 0x60
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009fa2:	68ba      	ldr	r2, [r7, #8]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	88fa      	ldrh	r2, [r7, #6]
 8009fac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2222      	movs	r2, #34	; 0x22
 8009fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc0:	4a40      	ldr	r2, [pc, #256]	; (800a0c4 <UART_Start_Receive_DMA+0x130>)
 8009fc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc8:	4a3f      	ldr	r2, [pc, #252]	; (800a0c8 <UART_Start_Receive_DMA+0x134>)
 8009fca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd0:	4a3e      	ldr	r2, [pc, #248]	; (800a0cc <UART_Start_Receive_DMA+0x138>)
 8009fd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd8:	2200      	movs	r2, #0
 8009fda:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009fdc:	f107 0308 	add.w	r3, r7, #8
 8009fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	3304      	adds	r3, #4
 8009fec:	4619      	mov	r1, r3
 8009fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	88fb      	ldrh	r3, [r7, #6]
 8009ff4:	f7fb fe8a 	bl	8005d0c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	613b      	str	r3, [r7, #16]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	613b      	str	r3, [r7, #16]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	613b      	str	r3, [r7, #16]
 800a00c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d019      	beq.n	800a052 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	330c      	adds	r3, #12
 800a024:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a028:	e853 3f00 	ldrex	r3, [r3]
 800a02c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a034:	65bb      	str	r3, [r7, #88]	; 0x58
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	330c      	adds	r3, #12
 800a03c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a03e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a040:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a042:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a044:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a046:	e841 2300 	strex	r3, r2, [r1]
 800a04a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a04c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1e5      	bne.n	800a01e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	3314      	adds	r3, #20
 800a058:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05c:	e853 3f00 	ldrex	r3, [r3]
 800a060:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a064:	f043 0301 	orr.w	r3, r3, #1
 800a068:	657b      	str	r3, [r7, #84]	; 0x54
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	3314      	adds	r3, #20
 800a070:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a072:	63ba      	str	r2, [r7, #56]	; 0x38
 800a074:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a076:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a07a:	e841 2300 	strex	r3, r2, [r1]
 800a07e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1e5      	bne.n	800a052 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	3314      	adds	r3, #20
 800a08c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	e853 3f00 	ldrex	r3, [r3]
 800a094:	617b      	str	r3, [r7, #20]
   return(result);
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a09c:	653b      	str	r3, [r7, #80]	; 0x50
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3314      	adds	r3, #20
 800a0a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a0a6:	627a      	str	r2, [r7, #36]	; 0x24
 800a0a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0aa:	6a39      	ldr	r1, [r7, #32]
 800a0ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ae:	e841 2300 	strex	r3, r2, [r1]
 800a0b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1e5      	bne.n	800a086 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3760      	adds	r7, #96	; 0x60
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	08009da3 	.word	0x08009da3
 800a0c8:	08009ec9 	.word	0x08009ec9
 800a0cc:	08009eff 	.word	0x08009eff

0800a0d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b089      	sub	sp, #36	; 0x24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	330c      	adds	r3, #12
 800a0de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	e853 3f00 	ldrex	r3, [r3]
 800a0e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a0ee:	61fb      	str	r3, [r7, #28]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	330c      	adds	r3, #12
 800a0f6:	69fa      	ldr	r2, [r7, #28]
 800a0f8:	61ba      	str	r2, [r7, #24]
 800a0fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fc:	6979      	ldr	r1, [r7, #20]
 800a0fe:	69ba      	ldr	r2, [r7, #24]
 800a100:	e841 2300 	strex	r3, r2, [r1]
 800a104:	613b      	str	r3, [r7, #16]
   return(result);
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1e5      	bne.n	800a0d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2220      	movs	r2, #32
 800a110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a114:	bf00      	nop
 800a116:	3724      	adds	r7, #36	; 0x24
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a120:	b480      	push	{r7}
 800a122:	b095      	sub	sp, #84	; 0x54
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	330c      	adds	r3, #12
 800a12e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a132:	e853 3f00 	ldrex	r3, [r3]
 800a136:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a13e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	330c      	adds	r3, #12
 800a146:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a148:	643a      	str	r2, [r7, #64]	; 0x40
 800a14a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a14e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a150:	e841 2300 	strex	r3, r2, [r1]
 800a154:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1e5      	bne.n	800a128 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	3314      	adds	r3, #20
 800a162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a164:	6a3b      	ldr	r3, [r7, #32]
 800a166:	e853 3f00 	ldrex	r3, [r3]
 800a16a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	f023 0301 	bic.w	r3, r3, #1
 800a172:	64bb      	str	r3, [r7, #72]	; 0x48
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	3314      	adds	r3, #20
 800a17a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a17c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a17e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a184:	e841 2300 	strex	r3, r2, [r1]
 800a188:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1e5      	bne.n	800a15c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a194:	2b01      	cmp	r3, #1
 800a196:	d119      	bne.n	800a1cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	330c      	adds	r3, #12
 800a19e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	e853 3f00 	ldrex	r3, [r3]
 800a1a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	f023 0310 	bic.w	r3, r3, #16
 800a1ae:	647b      	str	r3, [r7, #68]	; 0x44
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	330c      	adds	r3, #12
 800a1b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1b8:	61ba      	str	r2, [r7, #24]
 800a1ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1bc:	6979      	ldr	r1, [r7, #20]
 800a1be:	69ba      	ldr	r2, [r7, #24]
 800a1c0:	e841 2300 	strex	r3, r2, [r1]
 800a1c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d1e5      	bne.n	800a198 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2220      	movs	r2, #32
 800a1d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a1da:	bf00      	nop
 800a1dc:	3754      	adds	r7, #84	; 0x54
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f7ff fd69 	bl	8009cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a206:	bf00      	nop
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a20e:	b480      	push	{r7}
 800a210:	b085      	sub	sp, #20
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	2b21      	cmp	r3, #33	; 0x21
 800a220:	d13e      	bne.n	800a2a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a22a:	d114      	bne.n	800a256 <UART_Transmit_IT+0x48>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d110      	bne.n	800a256 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a1b      	ldr	r3, [r3, #32]
 800a238:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	881b      	ldrh	r3, [r3, #0]
 800a23e:	461a      	mov	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a248:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a1b      	ldr	r3, [r3, #32]
 800a24e:	1c9a      	adds	r2, r3, #2
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	621a      	str	r2, [r3, #32]
 800a254:	e008      	b.n	800a268 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	1c59      	adds	r1, r3, #1
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	6211      	str	r1, [r2, #32]
 800a260:	781a      	ldrb	r2, [r3, #0]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	3b01      	subs	r3, #1
 800a270:	b29b      	uxth	r3, r3
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	4619      	mov	r1, r3
 800a276:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10f      	bne.n	800a29c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68da      	ldr	r2, [r3, #12]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a28a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	68da      	ldr	r2, [r3, #12]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a29a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a29c:	2300      	movs	r3, #0
 800a29e:	e000      	b.n	800a2a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a2a0:	2302      	movs	r3, #2
  }
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3714      	adds	r7, #20
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr

0800a2ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b082      	sub	sp, #8
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	68da      	ldr	r2, [r3, #12]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2220      	movs	r2, #32
 800a2ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f7ff fcda 	bl	8009c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b08c      	sub	sp, #48	; 0x30
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	2b22      	cmp	r3, #34	; 0x22
 800a2f0:	f040 80ab 	bne.w	800a44a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2fc:	d117      	bne.n	800a32e <UART_Receive_IT+0x50>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d113      	bne.n	800a32e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a306:	2300      	movs	r3, #0
 800a308:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	b29b      	uxth	r3, r3
 800a318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a320:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a326:	1c9a      	adds	r2, r3, #2
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	629a      	str	r2, [r3, #40]	; 0x28
 800a32c:	e026      	b.n	800a37c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a332:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a334:	2300      	movs	r3, #0
 800a336:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a340:	d007      	beq.n	800a352 <UART_Receive_IT+0x74>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10a      	bne.n	800a360 <UART_Receive_IT+0x82>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d106      	bne.n	800a360 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	b2da      	uxtb	r2, r3
 800a35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35c:	701a      	strb	r2, [r3, #0]
 800a35e:	e008      	b.n	800a372 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	b2db      	uxtb	r3, r3
 800a368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a370:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a376:	1c5a      	adds	r2, r3, #1
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a380:	b29b      	uxth	r3, r3
 800a382:	3b01      	subs	r3, #1
 800a384:	b29b      	uxth	r3, r3
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	4619      	mov	r1, r3
 800a38a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d15a      	bne.n	800a446 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	68da      	ldr	r2, [r3, #12]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f022 0220 	bic.w	r2, r2, #32
 800a39e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	68da      	ldr	r2, [r3, #12]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a3ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	695a      	ldr	r2, [r3, #20]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f022 0201 	bic.w	r2, r2, #1
 800a3be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2220      	movs	r2, #32
 800a3c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d135      	bne.n	800a43c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	330c      	adds	r3, #12
 800a3dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	e853 3f00 	ldrex	r3, [r3]
 800a3e4:	613b      	str	r3, [r7, #16]
   return(result);
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	f023 0310 	bic.w	r3, r3, #16
 800a3ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	330c      	adds	r3, #12
 800a3f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3f6:	623a      	str	r2, [r7, #32]
 800a3f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fa:	69f9      	ldr	r1, [r7, #28]
 800a3fc:	6a3a      	ldr	r2, [r7, #32]
 800a3fe:	e841 2300 	strex	r3, r2, [r1]
 800a402:	61bb      	str	r3, [r7, #24]
   return(result);
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1e5      	bne.n	800a3d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 0310 	and.w	r3, r3, #16
 800a414:	2b10      	cmp	r3, #16
 800a416:	d10a      	bne.n	800a42e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a418:	2300      	movs	r3, #0
 800a41a:	60fb      	str	r3, [r7, #12]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	60fb      	str	r3, [r7, #12]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	60fb      	str	r3, [r7, #12]
 800a42c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f7f7 fe1d 	bl	8002074 <HAL_UARTEx_RxEventCallback>
 800a43a:	e002      	b.n	800a442 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f7ff fc37 	bl	8009cb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a442:	2300      	movs	r3, #0
 800a444:	e002      	b.n	800a44c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a446:	2300      	movs	r3, #0
 800a448:	e000      	b.n	800a44c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a44a:	2302      	movs	r3, #2
  }
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3730      	adds	r7, #48	; 0x30
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a458:	b0c0      	sub	sp, #256	; 0x100
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a46c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a470:	68d9      	ldr	r1, [r3, #12]
 800a472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	ea40 0301 	orr.w	r3, r0, r1
 800a47c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a47e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a482:	689a      	ldr	r2, [r3, #8]
 800a484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	431a      	orrs	r2, r3
 800a48c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a490:	695b      	ldr	r3, [r3, #20]
 800a492:	431a      	orrs	r2, r3
 800a494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a498:	69db      	ldr	r3, [r3, #28]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a4a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a4ac:	f021 010c 	bic.w	r1, r1, #12
 800a4b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a4ba:	430b      	orrs	r3, r1
 800a4bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a4be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	695b      	ldr	r3, [r3, #20]
 800a4c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a4ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4ce:	6999      	ldr	r1, [r3, #24]
 800a4d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	ea40 0301 	orr.w	r3, r0, r1
 800a4da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a4dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	4b8f      	ldr	r3, [pc, #572]	; (800a720 <UART_SetConfig+0x2cc>)
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d005      	beq.n	800a4f4 <UART_SetConfig+0xa0>
 800a4e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	4b8d      	ldr	r3, [pc, #564]	; (800a724 <UART_SetConfig+0x2d0>)
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d104      	bne.n	800a4fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a4f4:	f7fd fd3c 	bl	8007f70 <HAL_RCC_GetPCLK2Freq>
 800a4f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a4fc:	e003      	b.n	800a506 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a4fe:	f7fd fd23 	bl	8007f48 <HAL_RCC_GetPCLK1Freq>
 800a502:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a50a:	69db      	ldr	r3, [r3, #28]
 800a50c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a510:	f040 810c 	bne.w	800a72c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a518:	2200      	movs	r2, #0
 800a51a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a51e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a522:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a526:	4622      	mov	r2, r4
 800a528:	462b      	mov	r3, r5
 800a52a:	1891      	adds	r1, r2, r2
 800a52c:	65b9      	str	r1, [r7, #88]	; 0x58
 800a52e:	415b      	adcs	r3, r3
 800a530:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a532:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a536:	4621      	mov	r1, r4
 800a538:	eb12 0801 	adds.w	r8, r2, r1
 800a53c:	4629      	mov	r1, r5
 800a53e:	eb43 0901 	adc.w	r9, r3, r1
 800a542:	f04f 0200 	mov.w	r2, #0
 800a546:	f04f 0300 	mov.w	r3, #0
 800a54a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a54e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a552:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a556:	4690      	mov	r8, r2
 800a558:	4699      	mov	r9, r3
 800a55a:	4623      	mov	r3, r4
 800a55c:	eb18 0303 	adds.w	r3, r8, r3
 800a560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a564:	462b      	mov	r3, r5
 800a566:	eb49 0303 	adc.w	r3, r9, r3
 800a56a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a56e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a57a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a57e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a582:	460b      	mov	r3, r1
 800a584:	18db      	adds	r3, r3, r3
 800a586:	653b      	str	r3, [r7, #80]	; 0x50
 800a588:	4613      	mov	r3, r2
 800a58a:	eb42 0303 	adc.w	r3, r2, r3
 800a58e:	657b      	str	r3, [r7, #84]	; 0x54
 800a590:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a594:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a598:	f7f6 fb06 	bl	8000ba8 <__aeabi_uldivmod>
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	4b61      	ldr	r3, [pc, #388]	; (800a728 <UART_SetConfig+0x2d4>)
 800a5a2:	fba3 2302 	umull	r2, r3, r3, r2
 800a5a6:	095b      	lsrs	r3, r3, #5
 800a5a8:	011c      	lsls	r4, r3, #4
 800a5aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a5b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a5b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a5bc:	4642      	mov	r2, r8
 800a5be:	464b      	mov	r3, r9
 800a5c0:	1891      	adds	r1, r2, r2
 800a5c2:	64b9      	str	r1, [r7, #72]	; 0x48
 800a5c4:	415b      	adcs	r3, r3
 800a5c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a5cc:	4641      	mov	r1, r8
 800a5ce:	eb12 0a01 	adds.w	sl, r2, r1
 800a5d2:	4649      	mov	r1, r9
 800a5d4:	eb43 0b01 	adc.w	fp, r3, r1
 800a5d8:	f04f 0200 	mov.w	r2, #0
 800a5dc:	f04f 0300 	mov.w	r3, #0
 800a5e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a5e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a5e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a5ec:	4692      	mov	sl, r2
 800a5ee:	469b      	mov	fp, r3
 800a5f0:	4643      	mov	r3, r8
 800a5f2:	eb1a 0303 	adds.w	r3, sl, r3
 800a5f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a5fa:	464b      	mov	r3, r9
 800a5fc:	eb4b 0303 	adc.w	r3, fp, r3
 800a600:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a610:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a614:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a618:	460b      	mov	r3, r1
 800a61a:	18db      	adds	r3, r3, r3
 800a61c:	643b      	str	r3, [r7, #64]	; 0x40
 800a61e:	4613      	mov	r3, r2
 800a620:	eb42 0303 	adc.w	r3, r2, r3
 800a624:	647b      	str	r3, [r7, #68]	; 0x44
 800a626:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a62a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a62e:	f7f6 fabb 	bl	8000ba8 <__aeabi_uldivmod>
 800a632:	4602      	mov	r2, r0
 800a634:	460b      	mov	r3, r1
 800a636:	4611      	mov	r1, r2
 800a638:	4b3b      	ldr	r3, [pc, #236]	; (800a728 <UART_SetConfig+0x2d4>)
 800a63a:	fba3 2301 	umull	r2, r3, r3, r1
 800a63e:	095b      	lsrs	r3, r3, #5
 800a640:	2264      	movs	r2, #100	; 0x64
 800a642:	fb02 f303 	mul.w	r3, r2, r3
 800a646:	1acb      	subs	r3, r1, r3
 800a648:	00db      	lsls	r3, r3, #3
 800a64a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a64e:	4b36      	ldr	r3, [pc, #216]	; (800a728 <UART_SetConfig+0x2d4>)
 800a650:	fba3 2302 	umull	r2, r3, r3, r2
 800a654:	095b      	lsrs	r3, r3, #5
 800a656:	005b      	lsls	r3, r3, #1
 800a658:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a65c:	441c      	add	r4, r3
 800a65e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a662:	2200      	movs	r2, #0
 800a664:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a668:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a66c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a670:	4642      	mov	r2, r8
 800a672:	464b      	mov	r3, r9
 800a674:	1891      	adds	r1, r2, r2
 800a676:	63b9      	str	r1, [r7, #56]	; 0x38
 800a678:	415b      	adcs	r3, r3
 800a67a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a67c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a680:	4641      	mov	r1, r8
 800a682:	1851      	adds	r1, r2, r1
 800a684:	6339      	str	r1, [r7, #48]	; 0x30
 800a686:	4649      	mov	r1, r9
 800a688:	414b      	adcs	r3, r1
 800a68a:	637b      	str	r3, [r7, #52]	; 0x34
 800a68c:	f04f 0200 	mov.w	r2, #0
 800a690:	f04f 0300 	mov.w	r3, #0
 800a694:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a698:	4659      	mov	r1, fp
 800a69a:	00cb      	lsls	r3, r1, #3
 800a69c:	4651      	mov	r1, sl
 800a69e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a6a2:	4651      	mov	r1, sl
 800a6a4:	00ca      	lsls	r2, r1, #3
 800a6a6:	4610      	mov	r0, r2
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	4642      	mov	r2, r8
 800a6ae:	189b      	adds	r3, r3, r2
 800a6b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a6b4:	464b      	mov	r3, r9
 800a6b6:	460a      	mov	r2, r1
 800a6b8:	eb42 0303 	adc.w	r3, r2, r3
 800a6bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a6c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a6cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a6d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	18db      	adds	r3, r3, r3
 800a6d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6da:	4613      	mov	r3, r2
 800a6dc:	eb42 0303 	adc.w	r3, r2, r3
 800a6e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a6e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a6ea:	f7f6 fa5d 	bl	8000ba8 <__aeabi_uldivmod>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	4b0d      	ldr	r3, [pc, #52]	; (800a728 <UART_SetConfig+0x2d4>)
 800a6f4:	fba3 1302 	umull	r1, r3, r3, r2
 800a6f8:	095b      	lsrs	r3, r3, #5
 800a6fa:	2164      	movs	r1, #100	; 0x64
 800a6fc:	fb01 f303 	mul.w	r3, r1, r3
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	00db      	lsls	r3, r3, #3
 800a704:	3332      	adds	r3, #50	; 0x32
 800a706:	4a08      	ldr	r2, [pc, #32]	; (800a728 <UART_SetConfig+0x2d4>)
 800a708:	fba2 2303 	umull	r2, r3, r2, r3
 800a70c:	095b      	lsrs	r3, r3, #5
 800a70e:	f003 0207 	and.w	r2, r3, #7
 800a712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4422      	add	r2, r4
 800a71a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a71c:	e106      	b.n	800a92c <UART_SetConfig+0x4d8>
 800a71e:	bf00      	nop
 800a720:	40011000 	.word	0x40011000
 800a724:	40011400 	.word	0x40011400
 800a728:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a72c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a730:	2200      	movs	r2, #0
 800a732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a736:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a73a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a73e:	4642      	mov	r2, r8
 800a740:	464b      	mov	r3, r9
 800a742:	1891      	adds	r1, r2, r2
 800a744:	6239      	str	r1, [r7, #32]
 800a746:	415b      	adcs	r3, r3
 800a748:	627b      	str	r3, [r7, #36]	; 0x24
 800a74a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a74e:	4641      	mov	r1, r8
 800a750:	1854      	adds	r4, r2, r1
 800a752:	4649      	mov	r1, r9
 800a754:	eb43 0501 	adc.w	r5, r3, r1
 800a758:	f04f 0200 	mov.w	r2, #0
 800a75c:	f04f 0300 	mov.w	r3, #0
 800a760:	00eb      	lsls	r3, r5, #3
 800a762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a766:	00e2      	lsls	r2, r4, #3
 800a768:	4614      	mov	r4, r2
 800a76a:	461d      	mov	r5, r3
 800a76c:	4643      	mov	r3, r8
 800a76e:	18e3      	adds	r3, r4, r3
 800a770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a774:	464b      	mov	r3, r9
 800a776:	eb45 0303 	adc.w	r3, r5, r3
 800a77a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a77e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a78a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a78e:	f04f 0200 	mov.w	r2, #0
 800a792:	f04f 0300 	mov.w	r3, #0
 800a796:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a79a:	4629      	mov	r1, r5
 800a79c:	008b      	lsls	r3, r1, #2
 800a79e:	4621      	mov	r1, r4
 800a7a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a7a4:	4621      	mov	r1, r4
 800a7a6:	008a      	lsls	r2, r1, #2
 800a7a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a7ac:	f7f6 f9fc 	bl	8000ba8 <__aeabi_uldivmod>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	4b60      	ldr	r3, [pc, #384]	; (800a938 <UART_SetConfig+0x4e4>)
 800a7b6:	fba3 2302 	umull	r2, r3, r3, r2
 800a7ba:	095b      	lsrs	r3, r3, #5
 800a7bc:	011c      	lsls	r4, r3, #4
 800a7be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a7c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a7cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a7d0:	4642      	mov	r2, r8
 800a7d2:	464b      	mov	r3, r9
 800a7d4:	1891      	adds	r1, r2, r2
 800a7d6:	61b9      	str	r1, [r7, #24]
 800a7d8:	415b      	adcs	r3, r3
 800a7da:	61fb      	str	r3, [r7, #28]
 800a7dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a7e0:	4641      	mov	r1, r8
 800a7e2:	1851      	adds	r1, r2, r1
 800a7e4:	6139      	str	r1, [r7, #16]
 800a7e6:	4649      	mov	r1, r9
 800a7e8:	414b      	adcs	r3, r1
 800a7ea:	617b      	str	r3, [r7, #20]
 800a7ec:	f04f 0200 	mov.w	r2, #0
 800a7f0:	f04f 0300 	mov.w	r3, #0
 800a7f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a7f8:	4659      	mov	r1, fp
 800a7fa:	00cb      	lsls	r3, r1, #3
 800a7fc:	4651      	mov	r1, sl
 800a7fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a802:	4651      	mov	r1, sl
 800a804:	00ca      	lsls	r2, r1, #3
 800a806:	4610      	mov	r0, r2
 800a808:	4619      	mov	r1, r3
 800a80a:	4603      	mov	r3, r0
 800a80c:	4642      	mov	r2, r8
 800a80e:	189b      	adds	r3, r3, r2
 800a810:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a814:	464b      	mov	r3, r9
 800a816:	460a      	mov	r2, r1
 800a818:	eb42 0303 	adc.w	r3, r2, r3
 800a81c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	67bb      	str	r3, [r7, #120]	; 0x78
 800a82a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a82c:	f04f 0200 	mov.w	r2, #0
 800a830:	f04f 0300 	mov.w	r3, #0
 800a834:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a838:	4649      	mov	r1, r9
 800a83a:	008b      	lsls	r3, r1, #2
 800a83c:	4641      	mov	r1, r8
 800a83e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a842:	4641      	mov	r1, r8
 800a844:	008a      	lsls	r2, r1, #2
 800a846:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a84a:	f7f6 f9ad 	bl	8000ba8 <__aeabi_uldivmod>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	4611      	mov	r1, r2
 800a854:	4b38      	ldr	r3, [pc, #224]	; (800a938 <UART_SetConfig+0x4e4>)
 800a856:	fba3 2301 	umull	r2, r3, r3, r1
 800a85a:	095b      	lsrs	r3, r3, #5
 800a85c:	2264      	movs	r2, #100	; 0x64
 800a85e:	fb02 f303 	mul.w	r3, r2, r3
 800a862:	1acb      	subs	r3, r1, r3
 800a864:	011b      	lsls	r3, r3, #4
 800a866:	3332      	adds	r3, #50	; 0x32
 800a868:	4a33      	ldr	r2, [pc, #204]	; (800a938 <UART_SetConfig+0x4e4>)
 800a86a:	fba2 2303 	umull	r2, r3, r2, r3
 800a86e:	095b      	lsrs	r3, r3, #5
 800a870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a874:	441c      	add	r4, r3
 800a876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a87a:	2200      	movs	r2, #0
 800a87c:	673b      	str	r3, [r7, #112]	; 0x70
 800a87e:	677a      	str	r2, [r7, #116]	; 0x74
 800a880:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a884:	4642      	mov	r2, r8
 800a886:	464b      	mov	r3, r9
 800a888:	1891      	adds	r1, r2, r2
 800a88a:	60b9      	str	r1, [r7, #8]
 800a88c:	415b      	adcs	r3, r3
 800a88e:	60fb      	str	r3, [r7, #12]
 800a890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a894:	4641      	mov	r1, r8
 800a896:	1851      	adds	r1, r2, r1
 800a898:	6039      	str	r1, [r7, #0]
 800a89a:	4649      	mov	r1, r9
 800a89c:	414b      	adcs	r3, r1
 800a89e:	607b      	str	r3, [r7, #4]
 800a8a0:	f04f 0200 	mov.w	r2, #0
 800a8a4:	f04f 0300 	mov.w	r3, #0
 800a8a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a8ac:	4659      	mov	r1, fp
 800a8ae:	00cb      	lsls	r3, r1, #3
 800a8b0:	4651      	mov	r1, sl
 800a8b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a8b6:	4651      	mov	r1, sl
 800a8b8:	00ca      	lsls	r2, r1, #3
 800a8ba:	4610      	mov	r0, r2
 800a8bc:	4619      	mov	r1, r3
 800a8be:	4603      	mov	r3, r0
 800a8c0:	4642      	mov	r2, r8
 800a8c2:	189b      	adds	r3, r3, r2
 800a8c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8c6:	464b      	mov	r3, r9
 800a8c8:	460a      	mov	r2, r1
 800a8ca:	eb42 0303 	adc.w	r3, r2, r3
 800a8ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a8d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	663b      	str	r3, [r7, #96]	; 0x60
 800a8da:	667a      	str	r2, [r7, #100]	; 0x64
 800a8dc:	f04f 0200 	mov.w	r2, #0
 800a8e0:	f04f 0300 	mov.w	r3, #0
 800a8e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a8e8:	4649      	mov	r1, r9
 800a8ea:	008b      	lsls	r3, r1, #2
 800a8ec:	4641      	mov	r1, r8
 800a8ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8f2:	4641      	mov	r1, r8
 800a8f4:	008a      	lsls	r2, r1, #2
 800a8f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a8fa:	f7f6 f955 	bl	8000ba8 <__aeabi_uldivmod>
 800a8fe:	4602      	mov	r2, r0
 800a900:	460b      	mov	r3, r1
 800a902:	4b0d      	ldr	r3, [pc, #52]	; (800a938 <UART_SetConfig+0x4e4>)
 800a904:	fba3 1302 	umull	r1, r3, r3, r2
 800a908:	095b      	lsrs	r3, r3, #5
 800a90a:	2164      	movs	r1, #100	; 0x64
 800a90c:	fb01 f303 	mul.w	r3, r1, r3
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	011b      	lsls	r3, r3, #4
 800a914:	3332      	adds	r3, #50	; 0x32
 800a916:	4a08      	ldr	r2, [pc, #32]	; (800a938 <UART_SetConfig+0x4e4>)
 800a918:	fba2 2303 	umull	r2, r3, r2, r3
 800a91c:	095b      	lsrs	r3, r3, #5
 800a91e:	f003 020f 	and.w	r2, r3, #15
 800a922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4422      	add	r2, r4
 800a92a:	609a      	str	r2, [r3, #8]
}
 800a92c:	bf00      	nop
 800a92e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a932:	46bd      	mov	sp, r7
 800a934:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a938:	51eb851f 	.word	0x51eb851f

0800a93c <__NVIC_SetPriority>:
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	4603      	mov	r3, r0
 800a944:	6039      	str	r1, [r7, #0]
 800a946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	db0a      	blt.n	800a966 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	b2da      	uxtb	r2, r3
 800a954:	490c      	ldr	r1, [pc, #48]	; (800a988 <__NVIC_SetPriority+0x4c>)
 800a956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a95a:	0112      	lsls	r2, r2, #4
 800a95c:	b2d2      	uxtb	r2, r2
 800a95e:	440b      	add	r3, r1
 800a960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a964:	e00a      	b.n	800a97c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	4908      	ldr	r1, [pc, #32]	; (800a98c <__NVIC_SetPriority+0x50>)
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	f003 030f 	and.w	r3, r3, #15
 800a972:	3b04      	subs	r3, #4
 800a974:	0112      	lsls	r2, r2, #4
 800a976:	b2d2      	uxtb	r2, r2
 800a978:	440b      	add	r3, r1
 800a97a:	761a      	strb	r2, [r3, #24]
}
 800a97c:	bf00      	nop
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	e000e100 	.word	0xe000e100
 800a98c:	e000ed00 	.word	0xe000ed00

0800a990 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a990:	b580      	push	{r7, lr}
 800a992:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a994:	2100      	movs	r1, #0
 800a996:	f06f 0004 	mvn.w	r0, #4
 800a99a:	f7ff ffcf 	bl	800a93c <__NVIC_SetPriority>
#endif
}
 800a99e:	bf00      	nop
 800a9a0:	bd80      	pop	{r7, pc}
	...

0800a9a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9aa:	f3ef 8305 	mrs	r3, IPSR
 800a9ae:	603b      	str	r3, [r7, #0]
  return(result);
 800a9b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d003      	beq.n	800a9be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a9b6:	f06f 0305 	mvn.w	r3, #5
 800a9ba:	607b      	str	r3, [r7, #4]
 800a9bc:	e00c      	b.n	800a9d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a9be:	4b0a      	ldr	r3, [pc, #40]	; (800a9e8 <osKernelInitialize+0x44>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d105      	bne.n	800a9d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a9c6:	4b08      	ldr	r3, [pc, #32]	; (800a9e8 <osKernelInitialize+0x44>)
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	607b      	str	r3, [r7, #4]
 800a9d0:	e002      	b.n	800a9d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a9d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a9d8:	687b      	ldr	r3, [r7, #4]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	370c      	adds	r7, #12
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	20000dc0 	.word	0x20000dc0

0800a9ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9f2:	f3ef 8305 	mrs	r3, IPSR
 800a9f6:	603b      	str	r3, [r7, #0]
  return(result);
 800a9f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d003      	beq.n	800aa06 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a9fe:	f06f 0305 	mvn.w	r3, #5
 800aa02:	607b      	str	r3, [r7, #4]
 800aa04:	e010      	b.n	800aa28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800aa06:	4b0b      	ldr	r3, [pc, #44]	; (800aa34 <osKernelStart+0x48>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d109      	bne.n	800aa22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800aa0e:	f7ff ffbf 	bl	800a990 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aa12:	4b08      	ldr	r3, [pc, #32]	; (800aa34 <osKernelStart+0x48>)
 800aa14:	2202      	movs	r2, #2
 800aa16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aa18:	f001 f87c 	bl	800bb14 <vTaskStartScheduler>
      stat = osOK;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	607b      	str	r3, [r7, #4]
 800aa20:	e002      	b.n	800aa28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800aa22:	f04f 33ff 	mov.w	r3, #4294967295
 800aa26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aa28:	687b      	ldr	r3, [r7, #4]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	20000dc0 	.word	0x20000dc0

0800aa38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b08e      	sub	sp, #56	; 0x38
 800aa3c:	af04      	add	r7, sp, #16
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aa44:	2300      	movs	r3, #0
 800aa46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa48:	f3ef 8305 	mrs	r3, IPSR
 800aa4c:	617b      	str	r3, [r7, #20]
  return(result);
 800aa4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d17e      	bne.n	800ab52 <osThreadNew+0x11a>
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d07b      	beq.n	800ab52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800aa5a:	2380      	movs	r3, #128	; 0x80
 800aa5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800aa5e:	2318      	movs	r3, #24
 800aa60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800aa62:	2300      	movs	r3, #0
 800aa64:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800aa66:	f04f 33ff 	mov.w	r3, #4294967295
 800aa6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d045      	beq.n	800aafe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d002      	beq.n	800aa80 <osThreadNew+0x48>
        name = attr->name;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	699b      	ldr	r3, [r3, #24]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d002      	beq.n	800aa8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d008      	beq.n	800aaa6 <osThreadNew+0x6e>
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	2b38      	cmp	r3, #56	; 0x38
 800aa98:	d805      	bhi.n	800aaa6 <osThreadNew+0x6e>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	f003 0301 	and.w	r3, r3, #1
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d001      	beq.n	800aaaa <osThreadNew+0x72>
        return (NULL);
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	e054      	b.n	800ab54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	695b      	ldr	r3, [r3, #20]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d003      	beq.n	800aaba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	695b      	ldr	r3, [r3, #20]
 800aab6:	089b      	lsrs	r3, r3, #2
 800aab8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d00e      	beq.n	800aae0 <osThreadNew+0xa8>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	2ba7      	cmp	r3, #167	; 0xa7
 800aac8:	d90a      	bls.n	800aae0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d006      	beq.n	800aae0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	695b      	ldr	r3, [r3, #20]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d002      	beq.n	800aae0 <osThreadNew+0xa8>
        mem = 1;
 800aada:	2301      	movs	r3, #1
 800aadc:	61bb      	str	r3, [r7, #24]
 800aade:	e010      	b.n	800ab02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10c      	bne.n	800ab02 <osThreadNew+0xca>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d108      	bne.n	800ab02 <osThreadNew+0xca>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d104      	bne.n	800ab02 <osThreadNew+0xca>
          mem = 0;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	61bb      	str	r3, [r7, #24]
 800aafc:	e001      	b.n	800ab02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800aafe:	2300      	movs	r3, #0
 800ab00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d110      	bne.n	800ab2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ab10:	9202      	str	r2, [sp, #8]
 800ab12:	9301      	str	r3, [sp, #4]
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	9300      	str	r3, [sp, #0]
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	6a3a      	ldr	r2, [r7, #32]
 800ab1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f000 fe0c 	bl	800b73c <xTaskCreateStatic>
 800ab24:	4603      	mov	r3, r0
 800ab26:	613b      	str	r3, [r7, #16]
 800ab28:	e013      	b.n	800ab52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d110      	bne.n	800ab52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ab30:	6a3b      	ldr	r3, [r7, #32]
 800ab32:	b29a      	uxth	r2, r3
 800ab34:	f107 0310 	add.w	r3, r7, #16
 800ab38:	9301      	str	r3, [sp, #4]
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	9300      	str	r3, [sp, #0]
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab42:	68f8      	ldr	r0, [r7, #12]
 800ab44:	f000 fe57 	bl	800b7f6 <xTaskCreate>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d001      	beq.n	800ab52 <osThreadNew+0x11a>
            hTask = NULL;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ab52:	693b      	ldr	r3, [r7, #16]
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3728      	adds	r7, #40	; 0x28
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab64:	f3ef 8305 	mrs	r3, IPSR
 800ab68:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab6a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d003      	beq.n	800ab78 <osDelay+0x1c>
    stat = osErrorISR;
 800ab70:	f06f 0305 	mvn.w	r3, #5
 800ab74:	60fb      	str	r3, [r7, #12]
 800ab76:	e007      	b.n	800ab88 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d002      	beq.n	800ab88 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 ff92 	bl	800baac <vTaskDelay>
    }
  }

  return (stat);
 800ab88:	68fb      	ldr	r3, [r7, #12]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
	...

0800ab94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ab94:	b480      	push	{r7}
 800ab96:	b085      	sub	sp, #20
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4a07      	ldr	r2, [pc, #28]	; (800abc0 <vApplicationGetIdleTaskMemory+0x2c>)
 800aba4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	4a06      	ldr	r2, [pc, #24]	; (800abc4 <vApplicationGetIdleTaskMemory+0x30>)
 800abaa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2280      	movs	r2, #128	; 0x80
 800abb0:	601a      	str	r2, [r3, #0]
}
 800abb2:	bf00      	nop
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	20000dc4 	.word	0x20000dc4
 800abc4:	20000e6c 	.word	0x20000e6c

0800abc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	4a07      	ldr	r2, [pc, #28]	; (800abf4 <vApplicationGetTimerTaskMemory+0x2c>)
 800abd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	4a06      	ldr	r2, [pc, #24]	; (800abf8 <vApplicationGetTimerTaskMemory+0x30>)
 800abde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abe6:	601a      	str	r2, [r3, #0]
}
 800abe8:	bf00      	nop
 800abea:	3714      	adds	r7, #20
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr
 800abf4:	2000106c 	.word	0x2000106c
 800abf8:	20001114 	.word	0x20001114

0800abfc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800abfc:	b480      	push	{r7}
 800abfe:	b083      	sub	sp, #12
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f103 0208 	add.w	r2, r3, #8
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f04f 32ff 	mov.w	r2, #4294967295
 800ac14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f103 0208 	add.w	r2, r3, #8
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f103 0208 	add.w	r2, r3, #8
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ac30:	bf00      	nop
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ac4a:	bf00      	nop
 800ac4c:	370c      	adds	r7, #12
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac56:	b480      	push	{r7}
 800ac58:	b085      	sub	sp, #20
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	689a      	ldr	r2, [r3, #8]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	683a      	ldr	r2, [r7, #0]
 800ac7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	1c5a      	adds	r2, r3, #1
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	601a      	str	r2, [r3, #0]
}
 800ac92:	bf00      	nop
 800ac94:	3714      	adds	r7, #20
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b085      	sub	sp, #20
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
 800aca6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb4:	d103      	bne.n	800acbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	60fb      	str	r3, [r7, #12]
 800acbc:	e00c      	b.n	800acd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	3308      	adds	r3, #8
 800acc2:	60fb      	str	r3, [r7, #12]
 800acc4:	e002      	b.n	800accc <vListInsert+0x2e>
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	60fb      	str	r3, [r7, #12]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	68ba      	ldr	r2, [r7, #8]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d2f6      	bcs.n	800acc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	685a      	ldr	r2, [r3, #4]
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	683a      	ldr	r2, [r7, #0]
 800ace6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	68fa      	ldr	r2, [r7, #12]
 800acec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	683a      	ldr	r2, [r7, #0]
 800acf2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	1c5a      	adds	r2, r3, #1
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	601a      	str	r2, [r3, #0]
}
 800ad04:	bf00      	nop
 800ad06:	3714      	adds	r7, #20
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	691b      	ldr	r3, [r3, #16]
 800ad1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	6892      	ldr	r2, [r2, #8]
 800ad26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	6852      	ldr	r2, [r2, #4]
 800ad30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d103      	bne.n	800ad44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	689a      	ldr	r2, [r3, #8]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	1e5a      	subs	r2, r3, #1
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3714      	adds	r7, #20
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10a      	bne.n	800ad8e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ad78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7c:	f383 8811 	msr	BASEPRI, r3
 800ad80:	f3bf 8f6f 	isb	sy
 800ad84:	f3bf 8f4f 	dsb	sy
 800ad88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ad8a:	bf00      	nop
 800ad8c:	e7fe      	b.n	800ad8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ad8e:	f002 fa51 	bl	800d234 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad9a:	68f9      	ldr	r1, [r7, #12]
 800ad9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ad9e:	fb01 f303 	mul.w	r3, r1, r3
 800ada2:	441a      	add	r2, r3
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adbe:	3b01      	subs	r3, #1
 800adc0:	68f9      	ldr	r1, [r7, #12]
 800adc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800adc4:	fb01 f303 	mul.w	r3, r1, r3
 800adc8:	441a      	add	r2, r3
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	22ff      	movs	r2, #255	; 0xff
 800add2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	22ff      	movs	r2, #255	; 0xff
 800adda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d114      	bne.n	800ae0e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d01a      	beq.n	800ae22 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	3310      	adds	r3, #16
 800adf0:	4618      	mov	r0, r3
 800adf2:	f001 fa21 	bl	800c238 <xTaskRemoveFromEventList>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d012      	beq.n	800ae22 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800adfc:	4b0c      	ldr	r3, [pc, #48]	; (800ae30 <xQueueGenericReset+0xcc>)
 800adfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae02:	601a      	str	r2, [r3, #0]
 800ae04:	f3bf 8f4f 	dsb	sy
 800ae08:	f3bf 8f6f 	isb	sy
 800ae0c:	e009      	b.n	800ae22 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	3310      	adds	r3, #16
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7ff fef2 	bl	800abfc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	3324      	adds	r3, #36	; 0x24
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7ff feed 	bl	800abfc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ae22:	f002 fa37 	bl	800d294 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ae26:	2301      	movs	r3, #1
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	e000ed04 	.word	0xe000ed04

0800ae34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b08e      	sub	sp, #56	; 0x38
 800ae38:	af02      	add	r7, sp, #8
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	607a      	str	r2, [r7, #4]
 800ae40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d10a      	bne.n	800ae5e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ae48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4c:	f383 8811 	msr	BASEPRI, r3
 800ae50:	f3bf 8f6f 	isb	sy
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae5a:	bf00      	nop
 800ae5c:	e7fe      	b.n	800ae5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10a      	bne.n	800ae7a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ae64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae76:	bf00      	nop
 800ae78:	e7fe      	b.n	800ae78 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d002      	beq.n	800ae86 <xQueueGenericCreateStatic+0x52>
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <xQueueGenericCreateStatic+0x56>
 800ae86:	2301      	movs	r3, #1
 800ae88:	e000      	b.n	800ae8c <xQueueGenericCreateStatic+0x58>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10a      	bne.n	800aea6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	623b      	str	r3, [r7, #32]
}
 800aea2:	bf00      	nop
 800aea4:	e7fe      	b.n	800aea4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d102      	bne.n	800aeb2 <xQueueGenericCreateStatic+0x7e>
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d101      	bne.n	800aeb6 <xQueueGenericCreateStatic+0x82>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e000      	b.n	800aeb8 <xQueueGenericCreateStatic+0x84>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10a      	bne.n	800aed2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800aebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec0:	f383 8811 	msr	BASEPRI, r3
 800aec4:	f3bf 8f6f 	isb	sy
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	61fb      	str	r3, [r7, #28]
}
 800aece:	bf00      	nop
 800aed0:	e7fe      	b.n	800aed0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aed2:	2350      	movs	r3, #80	; 0x50
 800aed4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	2b50      	cmp	r3, #80	; 0x50
 800aeda:	d00a      	beq.n	800aef2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800aedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee0:	f383 8811 	msr	BASEPRI, r3
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	f3bf 8f4f 	dsb	sy
 800aeec:	61bb      	str	r3, [r7, #24]
}
 800aeee:	bf00      	nop
 800aef0:	e7fe      	b.n	800aef0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aef2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d00d      	beq.n	800af1a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af00:	2201      	movs	r2, #1
 800af02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af06:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800af0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	4613      	mov	r3, r2
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	68b9      	ldr	r1, [r7, #8]
 800af14:	68f8      	ldr	r0, [r7, #12]
 800af16:	f000 f805 	bl	800af24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800af1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3730      	adds	r7, #48	; 0x30
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
 800af30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d103      	bne.n	800af40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	69ba      	ldr	r2, [r7, #24]
 800af3c:	601a      	str	r2, [r3, #0]
 800af3e:	e002      	b.n	800af46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800af4c:	69bb      	ldr	r3, [r7, #24]
 800af4e:	68ba      	ldr	r2, [r7, #8]
 800af50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800af52:	2101      	movs	r1, #1
 800af54:	69b8      	ldr	r0, [r7, #24]
 800af56:	f7ff ff05 	bl	800ad64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	78fa      	ldrb	r2, [r7, #3]
 800af5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800af62:	bf00      	nop
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
	...

0800af6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b08e      	sub	sp, #56	; 0x38
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
 800af78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800af7a:	2300      	movs	r3, #0
 800af7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10a      	bne.n	800af9e <xQueueGenericSend+0x32>
	__asm volatile
 800af88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8c:	f383 8811 	msr	BASEPRI, r3
 800af90:	f3bf 8f6f 	isb	sy
 800af94:	f3bf 8f4f 	dsb	sy
 800af98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af9a:	bf00      	nop
 800af9c:	e7fe      	b.n	800af9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d103      	bne.n	800afac <xQueueGenericSend+0x40>
 800afa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d101      	bne.n	800afb0 <xQueueGenericSend+0x44>
 800afac:	2301      	movs	r3, #1
 800afae:	e000      	b.n	800afb2 <xQueueGenericSend+0x46>
 800afb0:	2300      	movs	r3, #0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d10a      	bne.n	800afcc <xQueueGenericSend+0x60>
	__asm volatile
 800afb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afba:	f383 8811 	msr	BASEPRI, r3
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afc8:	bf00      	nop
 800afca:	e7fe      	b.n	800afca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	2b02      	cmp	r3, #2
 800afd0:	d103      	bne.n	800afda <xQueueGenericSend+0x6e>
 800afd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d101      	bne.n	800afde <xQueueGenericSend+0x72>
 800afda:	2301      	movs	r3, #1
 800afdc:	e000      	b.n	800afe0 <xQueueGenericSend+0x74>
 800afde:	2300      	movs	r3, #0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d10a      	bne.n	800affa <xQueueGenericSend+0x8e>
	__asm volatile
 800afe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe8:	f383 8811 	msr	BASEPRI, r3
 800afec:	f3bf 8f6f 	isb	sy
 800aff0:	f3bf 8f4f 	dsb	sy
 800aff4:	623b      	str	r3, [r7, #32]
}
 800aff6:	bf00      	nop
 800aff8:	e7fe      	b.n	800aff8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800affa:	f001 fadf 	bl	800c5bc <xTaskGetSchedulerState>
 800affe:	4603      	mov	r3, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	d102      	bne.n	800b00a <xQueueGenericSend+0x9e>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d101      	bne.n	800b00e <xQueueGenericSend+0xa2>
 800b00a:	2301      	movs	r3, #1
 800b00c:	e000      	b.n	800b010 <xQueueGenericSend+0xa4>
 800b00e:	2300      	movs	r3, #0
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10a      	bne.n	800b02a <xQueueGenericSend+0xbe>
	__asm volatile
 800b014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	61fb      	str	r3, [r7, #28]
}
 800b026:	bf00      	nop
 800b028:	e7fe      	b.n	800b028 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b02a:	f002 f903 	bl	800d234 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b036:	429a      	cmp	r2, r3
 800b038:	d302      	bcc.n	800b040 <xQueueGenericSend+0xd4>
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d129      	bne.n	800b094 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b040:	683a      	ldr	r2, [r7, #0]
 800b042:	68b9      	ldr	r1, [r7, #8]
 800b044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b046:	f000 fa0b 	bl	800b460 <prvCopyDataToQueue>
 800b04a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b050:	2b00      	cmp	r3, #0
 800b052:	d010      	beq.n	800b076 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b056:	3324      	adds	r3, #36	; 0x24
 800b058:	4618      	mov	r0, r3
 800b05a:	f001 f8ed 	bl	800c238 <xTaskRemoveFromEventList>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d013      	beq.n	800b08c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b064:	4b3f      	ldr	r3, [pc, #252]	; (800b164 <xQueueGenericSend+0x1f8>)
 800b066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	f3bf 8f6f 	isb	sy
 800b074:	e00a      	b.n	800b08c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d007      	beq.n	800b08c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b07c:	4b39      	ldr	r3, [pc, #228]	; (800b164 <xQueueGenericSend+0x1f8>)
 800b07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b082:	601a      	str	r2, [r3, #0]
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b08c:	f002 f902 	bl	800d294 <vPortExitCritical>
				return pdPASS;
 800b090:	2301      	movs	r3, #1
 800b092:	e063      	b.n	800b15c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d103      	bne.n	800b0a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b09a:	f002 f8fb 	bl	800d294 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	e05c      	b.n	800b15c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d106      	bne.n	800b0b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b0a8:	f107 0314 	add.w	r3, r7, #20
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f001 f927 	bl	800c300 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b0b6:	f002 f8ed 	bl	800d294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b0ba:	f000 fd9b 	bl	800bbf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0be:	f002 f8b9 	bl	800d234 <vPortEnterCritical>
 800b0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0c8:	b25b      	sxtb	r3, r3
 800b0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ce:	d103      	bne.n	800b0d8 <xQueueGenericSend+0x16c>
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0de:	b25b      	sxtb	r3, r3
 800b0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e4:	d103      	bne.n	800b0ee <xQueueGenericSend+0x182>
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0ee:	f002 f8d1 	bl	800d294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0f2:	1d3a      	adds	r2, r7, #4
 800b0f4:	f107 0314 	add.w	r3, r7, #20
 800b0f8:	4611      	mov	r1, r2
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f001 f916 	bl	800c32c <xTaskCheckForTimeOut>
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d124      	bne.n	800b150 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b108:	f000 faa2 	bl	800b650 <prvIsQueueFull>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d018      	beq.n	800b144 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b114:	3310      	adds	r3, #16
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	4611      	mov	r1, r2
 800b11a:	4618      	mov	r0, r3
 800b11c:	f001 f83c 	bl	800c198 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b122:	f000 fa2d 	bl	800b580 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b126:	f000 fd73 	bl	800bc10 <xTaskResumeAll>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f47f af7c 	bne.w	800b02a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b132:	4b0c      	ldr	r3, [pc, #48]	; (800b164 <xQueueGenericSend+0x1f8>)
 800b134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b138:	601a      	str	r2, [r3, #0]
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	f3bf 8f6f 	isb	sy
 800b142:	e772      	b.n	800b02a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b146:	f000 fa1b 	bl	800b580 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b14a:	f000 fd61 	bl	800bc10 <xTaskResumeAll>
 800b14e:	e76c      	b.n	800b02a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b152:	f000 fa15 	bl	800b580 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b156:	f000 fd5b 	bl	800bc10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b15a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3738      	adds	r7, #56	; 0x38
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	e000ed04 	.word	0xe000ed04

0800b168 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b090      	sub	sp, #64	; 0x40
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	607a      	str	r2, [r7, #4]
 800b174:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d10a      	bne.n	800b196 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b184:	f383 8811 	msr	BASEPRI, r3
 800b188:	f3bf 8f6f 	isb	sy
 800b18c:	f3bf 8f4f 	dsb	sy
 800b190:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b192:	bf00      	nop
 800b194:	e7fe      	b.n	800b194 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d103      	bne.n	800b1a4 <xQueueGenericSendFromISR+0x3c>
 800b19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d101      	bne.n	800b1a8 <xQueueGenericSendFromISR+0x40>
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e000      	b.n	800b1aa <xQueueGenericSendFromISR+0x42>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d10a      	bne.n	800b1c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b1c0:	bf00      	nop
 800b1c2:	e7fe      	b.n	800b1c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	2b02      	cmp	r3, #2
 800b1c8:	d103      	bne.n	800b1d2 <xQueueGenericSendFromISR+0x6a>
 800b1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d101      	bne.n	800b1d6 <xQueueGenericSendFromISR+0x6e>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e000      	b.n	800b1d8 <xQueueGenericSendFromISR+0x70>
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d10a      	bne.n	800b1f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e0:	f383 8811 	msr	BASEPRI, r3
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	623b      	str	r3, [r7, #32]
}
 800b1ee:	bf00      	nop
 800b1f0:	e7fe      	b.n	800b1f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1f2:	f002 f901 	bl	800d3f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b1f6:	f3ef 8211 	mrs	r2, BASEPRI
 800b1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fe:	f383 8811 	msr	BASEPRI, r3
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	f3bf 8f4f 	dsb	sy
 800b20a:	61fa      	str	r2, [r7, #28]
 800b20c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b20e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b210:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d302      	bcc.n	800b224 <xQueueGenericSendFromISR+0xbc>
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	2b02      	cmp	r3, #2
 800b222:	d12f      	bne.n	800b284 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b226:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b22a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b232:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b234:	683a      	ldr	r2, [r7, #0]
 800b236:	68b9      	ldr	r1, [r7, #8]
 800b238:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b23a:	f000 f911 	bl	800b460 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b23e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b246:	d112      	bne.n	800b26e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d016      	beq.n	800b27e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	3324      	adds	r3, #36	; 0x24
 800b254:	4618      	mov	r0, r3
 800b256:	f000 ffef 	bl	800c238 <xTaskRemoveFromEventList>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00e      	beq.n	800b27e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00b      	beq.n	800b27e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2201      	movs	r2, #1
 800b26a:	601a      	str	r2, [r3, #0]
 800b26c:	e007      	b.n	800b27e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b26e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b272:	3301      	adds	r3, #1
 800b274:	b2db      	uxtb	r3, r3
 800b276:	b25a      	sxtb	r2, r3
 800b278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b27e:	2301      	movs	r3, #1
 800b280:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b282:	e001      	b.n	800b288 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b284:	2300      	movs	r3, #0
 800b286:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b28a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b292:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b296:	4618      	mov	r0, r3
 800b298:	3740      	adds	r7, #64	; 0x40
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
	...

0800b2a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b08c      	sub	sp, #48	; 0x30
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d10a      	bne.n	800b2d0 <xQueueReceive+0x30>
	__asm volatile
 800b2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	623b      	str	r3, [r7, #32]
}
 800b2cc:	bf00      	nop
 800b2ce:	e7fe      	b.n	800b2ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d103      	bne.n	800b2de <xQueueReceive+0x3e>
 800b2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d101      	bne.n	800b2e2 <xQueueReceive+0x42>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e000      	b.n	800b2e4 <xQueueReceive+0x44>
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d10a      	bne.n	800b2fe <xQueueReceive+0x5e>
	__asm volatile
 800b2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ec:	f383 8811 	msr	BASEPRI, r3
 800b2f0:	f3bf 8f6f 	isb	sy
 800b2f4:	f3bf 8f4f 	dsb	sy
 800b2f8:	61fb      	str	r3, [r7, #28]
}
 800b2fa:	bf00      	nop
 800b2fc:	e7fe      	b.n	800b2fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2fe:	f001 f95d 	bl	800c5bc <xTaskGetSchedulerState>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	d102      	bne.n	800b30e <xQueueReceive+0x6e>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d101      	bne.n	800b312 <xQueueReceive+0x72>
 800b30e:	2301      	movs	r3, #1
 800b310:	e000      	b.n	800b314 <xQueueReceive+0x74>
 800b312:	2300      	movs	r3, #0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d10a      	bne.n	800b32e <xQueueReceive+0x8e>
	__asm volatile
 800b318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31c:	f383 8811 	msr	BASEPRI, r3
 800b320:	f3bf 8f6f 	isb	sy
 800b324:	f3bf 8f4f 	dsb	sy
 800b328:	61bb      	str	r3, [r7, #24]
}
 800b32a:	bf00      	nop
 800b32c:	e7fe      	b.n	800b32c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b32e:	f001 ff81 	bl	800d234 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b336:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d01f      	beq.n	800b37e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b33e:	68b9      	ldr	r1, [r7, #8]
 800b340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b342:	f000 f8f7 	bl	800b534 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b348:	1e5a      	subs	r2, r3, #1
 800b34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00f      	beq.n	800b376 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b358:	3310      	adds	r3, #16
 800b35a:	4618      	mov	r0, r3
 800b35c:	f000 ff6c 	bl	800c238 <xTaskRemoveFromEventList>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d007      	beq.n	800b376 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b366:	4b3d      	ldr	r3, [pc, #244]	; (800b45c <xQueueReceive+0x1bc>)
 800b368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b36c:	601a      	str	r2, [r3, #0]
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b376:	f001 ff8d 	bl	800d294 <vPortExitCritical>
				return pdPASS;
 800b37a:	2301      	movs	r3, #1
 800b37c:	e069      	b.n	800b452 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d103      	bne.n	800b38c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b384:	f001 ff86 	bl	800d294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b388:	2300      	movs	r3, #0
 800b38a:	e062      	b.n	800b452 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d106      	bne.n	800b3a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b392:	f107 0310 	add.w	r3, r7, #16
 800b396:	4618      	mov	r0, r3
 800b398:	f000 ffb2 	bl	800c300 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b39c:	2301      	movs	r3, #1
 800b39e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3a0:	f001 ff78 	bl	800d294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3a4:	f000 fc26 	bl	800bbf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3a8:	f001 ff44 	bl	800d234 <vPortEnterCritical>
 800b3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3b2:	b25b      	sxtb	r3, r3
 800b3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b8:	d103      	bne.n	800b3c2 <xQueueReceive+0x122>
 800b3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3c8:	b25b      	sxtb	r3, r3
 800b3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ce:	d103      	bne.n	800b3d8 <xQueueReceive+0x138>
 800b3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3d8:	f001 ff5c 	bl	800d294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3dc:	1d3a      	adds	r2, r7, #4
 800b3de:	f107 0310 	add.w	r3, r7, #16
 800b3e2:	4611      	mov	r1, r2
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f000 ffa1 	bl	800c32c <xTaskCheckForTimeOut>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d123      	bne.n	800b438 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3f2:	f000 f917 	bl	800b624 <prvIsQueueEmpty>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d017      	beq.n	800b42c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fe:	3324      	adds	r3, #36	; 0x24
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	4611      	mov	r1, r2
 800b404:	4618      	mov	r0, r3
 800b406:	f000 fec7 	bl	800c198 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b40a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b40c:	f000 f8b8 	bl	800b580 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b410:	f000 fbfe 	bl	800bc10 <xTaskResumeAll>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d189      	bne.n	800b32e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b41a:	4b10      	ldr	r3, [pc, #64]	; (800b45c <xQueueReceive+0x1bc>)
 800b41c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b420:	601a      	str	r2, [r3, #0]
 800b422:	f3bf 8f4f 	dsb	sy
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	e780      	b.n	800b32e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b42c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b42e:	f000 f8a7 	bl	800b580 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b432:	f000 fbed 	bl	800bc10 <xTaskResumeAll>
 800b436:	e77a      	b.n	800b32e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b43a:	f000 f8a1 	bl	800b580 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b43e:	f000 fbe7 	bl	800bc10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b444:	f000 f8ee 	bl	800b624 <prvIsQueueEmpty>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f43f af6f 	beq.w	800b32e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b450:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b452:	4618      	mov	r0, r3
 800b454:	3730      	adds	r7, #48	; 0x30
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	e000ed04 	.word	0xe000ed04

0800b460 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b46c:	2300      	movs	r3, #0
 800b46e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b474:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d10d      	bne.n	800b49a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d14d      	bne.n	800b522 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	4618      	mov	r0, r3
 800b48c:	f001 f8b4 	bl	800c5f8 <xTaskPriorityDisinherit>
 800b490:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2200      	movs	r2, #0
 800b496:	609a      	str	r2, [r3, #8]
 800b498:	e043      	b.n	800b522 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d119      	bne.n	800b4d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	6858      	ldr	r0, [r3, #4]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	68b9      	ldr	r1, [r7, #8]
 800b4ac:	f003 f81c 	bl	800e4e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	685a      	ldr	r2, [r3, #4]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b8:	441a      	add	r2, r3
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	685a      	ldr	r2, [r3, #4]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	689b      	ldr	r3, [r3, #8]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d32b      	bcc.n	800b522 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	605a      	str	r2, [r3, #4]
 800b4d2:	e026      	b.n	800b522 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	68d8      	ldr	r0, [r3, #12]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4dc:	461a      	mov	r2, r3
 800b4de:	68b9      	ldr	r1, [r7, #8]
 800b4e0:	f003 f802 	bl	800e4e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	68da      	ldr	r2, [r3, #12]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ec:	425b      	negs	r3, r3
 800b4ee:	441a      	add	r2, r3
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	68da      	ldr	r2, [r3, #12]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d207      	bcs.n	800b510 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	689a      	ldr	r2, [r3, #8]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b508:	425b      	negs	r3, r3
 800b50a:	441a      	add	r2, r3
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2b02      	cmp	r3, #2
 800b514:	d105      	bne.n	800b522 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d002      	beq.n	800b522 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	3b01      	subs	r3, #1
 800b520:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	1c5a      	adds	r2, r3, #1
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b52a:	697b      	ldr	r3, [r7, #20]
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3718      	adds	r7, #24
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b542:	2b00      	cmp	r3, #0
 800b544:	d018      	beq.n	800b578 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	68da      	ldr	r2, [r3, #12]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b54e:	441a      	add	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	68da      	ldr	r2, [r3, #12]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d303      	bcc.n	800b568 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	68d9      	ldr	r1, [r3, #12]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b570:	461a      	mov	r2, r3
 800b572:	6838      	ldr	r0, [r7, #0]
 800b574:	f002 ffb8 	bl	800e4e8 <memcpy>
	}
}
 800b578:	bf00      	nop
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b588:	f001 fe54 	bl	800d234 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b592:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b594:	e011      	b.n	800b5ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d012      	beq.n	800b5c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	3324      	adds	r3, #36	; 0x24
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f000 fe48 	bl	800c238 <xTaskRemoveFromEventList>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d001      	beq.n	800b5b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b5ae:	f000 ff1f 	bl	800c3f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b5b2:	7bfb      	ldrb	r3, [r7, #15]
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	dce9      	bgt.n	800b596 <prvUnlockQueue+0x16>
 800b5c2:	e000      	b.n	800b5c6 <prvUnlockQueue+0x46>
					break;
 800b5c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	22ff      	movs	r2, #255	; 0xff
 800b5ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b5ce:	f001 fe61 	bl	800d294 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b5d2:	f001 fe2f 	bl	800d234 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b5de:	e011      	b.n	800b604 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d012      	beq.n	800b60e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	3310      	adds	r3, #16
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f000 fe23 	bl	800c238 <xTaskRemoveFromEventList>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d001      	beq.n	800b5fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b5f8:	f000 fefa 	bl	800c3f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b5fc:	7bbb      	ldrb	r3, [r7, #14]
 800b5fe:	3b01      	subs	r3, #1
 800b600:	b2db      	uxtb	r3, r3
 800b602:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b604:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	dce9      	bgt.n	800b5e0 <prvUnlockQueue+0x60>
 800b60c:	e000      	b.n	800b610 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b60e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	22ff      	movs	r2, #255	; 0xff
 800b614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b618:	f001 fe3c 	bl	800d294 <vPortExitCritical>
}
 800b61c:	bf00      	nop
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b62c:	f001 fe02 	bl	800d234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b634:	2b00      	cmp	r3, #0
 800b636:	d102      	bne.n	800b63e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b638:	2301      	movs	r3, #1
 800b63a:	60fb      	str	r3, [r7, #12]
 800b63c:	e001      	b.n	800b642 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b63e:	2300      	movs	r3, #0
 800b640:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b642:	f001 fe27 	bl	800d294 <vPortExitCritical>

	return xReturn;
 800b646:	68fb      	ldr	r3, [r7, #12]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b658:	f001 fdec 	bl	800d234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b664:	429a      	cmp	r2, r3
 800b666:	d102      	bne.n	800b66e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b668:	2301      	movs	r3, #1
 800b66a:	60fb      	str	r3, [r7, #12]
 800b66c:	e001      	b.n	800b672 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b66e:	2300      	movs	r3, #0
 800b670:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b672:	f001 fe0f 	bl	800d294 <vPortExitCritical>

	return xReturn;
 800b676:	68fb      	ldr	r3, [r7, #12]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3710      	adds	r7, #16
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b680:	b480      	push	{r7}
 800b682:	b085      	sub	sp, #20
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b68a:	2300      	movs	r3, #0
 800b68c:	60fb      	str	r3, [r7, #12]
 800b68e:	e014      	b.n	800b6ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b690:	4a0f      	ldr	r2, [pc, #60]	; (800b6d0 <vQueueAddToRegistry+0x50>)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d10b      	bne.n	800b6b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b69c:	490c      	ldr	r1, [pc, #48]	; (800b6d0 <vQueueAddToRegistry+0x50>)
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	683a      	ldr	r2, [r7, #0]
 800b6a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b6a6:	4a0a      	ldr	r2, [pc, #40]	; (800b6d0 <vQueueAddToRegistry+0x50>)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	00db      	lsls	r3, r3, #3
 800b6ac:	4413      	add	r3, r2
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b6b2:	e006      	b.n	800b6c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	60fb      	str	r3, [r7, #12]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2b07      	cmp	r3, #7
 800b6be:	d9e7      	bls.n	800b690 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b6c0:	bf00      	nop
 800b6c2:	bf00      	nop
 800b6c4:	3714      	adds	r7, #20
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	20001514 	.word	0x20001514

0800b6d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b6e4:	f001 fda6 	bl	800d234 <vPortEnterCritical>
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6ee:	b25b      	sxtb	r3, r3
 800b6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f4:	d103      	bne.n	800b6fe <vQueueWaitForMessageRestricted+0x2a>
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b704:	b25b      	sxtb	r3, r3
 800b706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b70a:	d103      	bne.n	800b714 <vQueueWaitForMessageRestricted+0x40>
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	2200      	movs	r2, #0
 800b710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b714:	f001 fdbe 	bl	800d294 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d106      	bne.n	800b72e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	3324      	adds	r3, #36	; 0x24
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	68b9      	ldr	r1, [r7, #8]
 800b728:	4618      	mov	r0, r3
 800b72a:	f000 fd59 	bl	800c1e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b72e:	6978      	ldr	r0, [r7, #20]
 800b730:	f7ff ff26 	bl	800b580 <prvUnlockQueue>
	}
 800b734:	bf00      	nop
 800b736:	3718      	adds	r7, #24
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b08e      	sub	sp, #56	; 0x38
 800b740:	af04      	add	r7, sp, #16
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	607a      	str	r2, [r7, #4]
 800b748:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d10a      	bne.n	800b766 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b754:	f383 8811 	msr	BASEPRI, r3
 800b758:	f3bf 8f6f 	isb	sy
 800b75c:	f3bf 8f4f 	dsb	sy
 800b760:	623b      	str	r3, [r7, #32]
}
 800b762:	bf00      	nop
 800b764:	e7fe      	b.n	800b764 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d10a      	bne.n	800b782 <xTaskCreateStatic+0x46>
	__asm volatile
 800b76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b770:	f383 8811 	msr	BASEPRI, r3
 800b774:	f3bf 8f6f 	isb	sy
 800b778:	f3bf 8f4f 	dsb	sy
 800b77c:	61fb      	str	r3, [r7, #28]
}
 800b77e:	bf00      	nop
 800b780:	e7fe      	b.n	800b780 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b782:	23a8      	movs	r3, #168	; 0xa8
 800b784:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	2ba8      	cmp	r3, #168	; 0xa8
 800b78a:	d00a      	beq.n	800b7a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800b78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b790:	f383 8811 	msr	BASEPRI, r3
 800b794:	f3bf 8f6f 	isb	sy
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	61bb      	str	r3, [r7, #24]
}
 800b79e:	bf00      	nop
 800b7a0:	e7fe      	b.n	800b7a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b7a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d01e      	beq.n	800b7e8 <xTaskCreateStatic+0xac>
 800b7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d01b      	beq.n	800b7e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7bc:	2202      	movs	r2, #2
 800b7be:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	9303      	str	r3, [sp, #12]
 800b7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c8:	9302      	str	r3, [sp, #8]
 800b7ca:	f107 0314 	add.w	r3, r7, #20
 800b7ce:	9301      	str	r3, [sp, #4]
 800b7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d2:	9300      	str	r3, [sp, #0]
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	68b9      	ldr	r1, [r7, #8]
 800b7da:	68f8      	ldr	r0, [r7, #12]
 800b7dc:	f000 f850 	bl	800b880 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b7e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7e2:	f000 f8f3 	bl	800b9cc <prvAddNewTaskToReadyList>
 800b7e6:	e001      	b.n	800b7ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b7ec:	697b      	ldr	r3, [r7, #20]
	}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3728      	adds	r7, #40	; 0x28
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b08c      	sub	sp, #48	; 0x30
 800b7fa:	af04      	add	r7, sp, #16
 800b7fc:	60f8      	str	r0, [r7, #12]
 800b7fe:	60b9      	str	r1, [r7, #8]
 800b800:	603b      	str	r3, [r7, #0]
 800b802:	4613      	mov	r3, r2
 800b804:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b806:	88fb      	ldrh	r3, [r7, #6]
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	4618      	mov	r0, r3
 800b80c:	f001 fe34 	bl	800d478 <pvPortMalloc>
 800b810:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00e      	beq.n	800b836 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b818:	20a8      	movs	r0, #168	; 0xa8
 800b81a:	f001 fe2d 	bl	800d478 <pvPortMalloc>
 800b81e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b820:	69fb      	ldr	r3, [r7, #28]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d003      	beq.n	800b82e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	697a      	ldr	r2, [r7, #20]
 800b82a:	631a      	str	r2, [r3, #48]	; 0x30
 800b82c:	e005      	b.n	800b83a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b82e:	6978      	ldr	r0, [r7, #20]
 800b830:	f001 feee 	bl	800d610 <vPortFree>
 800b834:	e001      	b.n	800b83a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b836:	2300      	movs	r3, #0
 800b838:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d017      	beq.n	800b870 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	2200      	movs	r2, #0
 800b844:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b848:	88fa      	ldrh	r2, [r7, #6]
 800b84a:	2300      	movs	r3, #0
 800b84c:	9303      	str	r3, [sp, #12]
 800b84e:	69fb      	ldr	r3, [r7, #28]
 800b850:	9302      	str	r3, [sp, #8]
 800b852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b854:	9301      	str	r3, [sp, #4]
 800b856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b858:	9300      	str	r3, [sp, #0]
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	68b9      	ldr	r1, [r7, #8]
 800b85e:	68f8      	ldr	r0, [r7, #12]
 800b860:	f000 f80e 	bl	800b880 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b864:	69f8      	ldr	r0, [r7, #28]
 800b866:	f000 f8b1 	bl	800b9cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b86a:	2301      	movs	r3, #1
 800b86c:	61bb      	str	r3, [r7, #24]
 800b86e:	e002      	b.n	800b876 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b870:	f04f 33ff 	mov.w	r3, #4294967295
 800b874:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b876:	69bb      	ldr	r3, [r7, #24]
	}
 800b878:	4618      	mov	r0, r3
 800b87a:	3720      	adds	r7, #32
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b088      	sub	sp, #32
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
 800b88c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b890:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	461a      	mov	r2, r3
 800b898:	21a5      	movs	r1, #165	; 0xa5
 800b89a:	f002 fd51 	bl	800e340 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	4413      	add	r3, r2
 800b8ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	f023 0307 	bic.w	r3, r3, #7
 800b8b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b8b8:	69bb      	ldr	r3, [r7, #24]
 800b8ba:	f003 0307 	and.w	r3, r3, #7
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d00a      	beq.n	800b8d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c6:	f383 8811 	msr	BASEPRI, r3
 800b8ca:	f3bf 8f6f 	isb	sy
 800b8ce:	f3bf 8f4f 	dsb	sy
 800b8d2:	617b      	str	r3, [r7, #20]
}
 800b8d4:	bf00      	nop
 800b8d6:	e7fe      	b.n	800b8d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d01f      	beq.n	800b91e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b8de:	2300      	movs	r3, #0
 800b8e0:	61fb      	str	r3, [r7, #28]
 800b8e2:	e012      	b.n	800b90a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b8e4:	68ba      	ldr	r2, [r7, #8]
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	7819      	ldrb	r1, [r3, #0]
 800b8ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	3334      	adds	r3, #52	; 0x34
 800b8f4:	460a      	mov	r2, r1
 800b8f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b8f8:	68ba      	ldr	r2, [r7, #8]
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d006      	beq.n	800b912 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	3301      	adds	r3, #1
 800b908:	61fb      	str	r3, [r7, #28]
 800b90a:	69fb      	ldr	r3, [r7, #28]
 800b90c:	2b0f      	cmp	r3, #15
 800b90e:	d9e9      	bls.n	800b8e4 <prvInitialiseNewTask+0x64>
 800b910:	e000      	b.n	800b914 <prvInitialiseNewTask+0x94>
			{
				break;
 800b912:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b916:	2200      	movs	r2, #0
 800b918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b91c:	e003      	b.n	800b926 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b920:	2200      	movs	r2, #0
 800b922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b928:	2b37      	cmp	r3, #55	; 0x37
 800b92a:	d901      	bls.n	800b930 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b92c:	2337      	movs	r3, #55	; 0x37
 800b92e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b934:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b93a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93e:	2200      	movs	r2, #0
 800b940:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b944:	3304      	adds	r3, #4
 800b946:	4618      	mov	r0, r3
 800b948:	f7ff f978 	bl	800ac3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94e:	3318      	adds	r3, #24
 800b950:	4618      	mov	r0, r3
 800b952:	f7ff f973 	bl	800ac3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b95a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b964:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b96a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96e:	2200      	movs	r2, #0
 800b970:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b976:	2200      	movs	r2, #0
 800b978:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97e:	3354      	adds	r3, #84	; 0x54
 800b980:	224c      	movs	r2, #76	; 0x4c
 800b982:	2100      	movs	r1, #0
 800b984:	4618      	mov	r0, r3
 800b986:	f002 fcdb 	bl	800e340 <memset>
 800b98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98c:	4a0c      	ldr	r2, [pc, #48]	; (800b9c0 <prvInitialiseNewTask+0x140>)
 800b98e:	659a      	str	r2, [r3, #88]	; 0x58
 800b990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b992:	4a0c      	ldr	r2, [pc, #48]	; (800b9c4 <prvInitialiseNewTask+0x144>)
 800b994:	65da      	str	r2, [r3, #92]	; 0x5c
 800b996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b998:	4a0b      	ldr	r2, [pc, #44]	; (800b9c8 <prvInitialiseNewTask+0x148>)
 800b99a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b99c:	683a      	ldr	r2, [r7, #0]
 800b99e:	68f9      	ldr	r1, [r7, #12]
 800b9a0:	69b8      	ldr	r0, [r7, #24]
 800b9a2:	f001 fb19 	bl	800cfd8 <pxPortInitialiseStack>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d002      	beq.n	800b9b8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9b8:	bf00      	nop
 800b9ba:	3720      	adds	r7, #32
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	200057a8 	.word	0x200057a8
 800b9c4:	20005810 	.word	0x20005810
 800b9c8:	20005878 	.word	0x20005878

0800b9cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b9d4:	f001 fc2e 	bl	800d234 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b9d8:	4b2d      	ldr	r3, [pc, #180]	; (800ba90 <prvAddNewTaskToReadyList+0xc4>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	4a2c      	ldr	r2, [pc, #176]	; (800ba90 <prvAddNewTaskToReadyList+0xc4>)
 800b9e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b9e2:	4b2c      	ldr	r3, [pc, #176]	; (800ba94 <prvAddNewTaskToReadyList+0xc8>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d109      	bne.n	800b9fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b9ea:	4a2a      	ldr	r2, [pc, #168]	; (800ba94 <prvAddNewTaskToReadyList+0xc8>)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b9f0:	4b27      	ldr	r3, [pc, #156]	; (800ba90 <prvAddNewTaskToReadyList+0xc4>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d110      	bne.n	800ba1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b9f8:	f000 fd1e 	bl	800c438 <prvInitialiseTaskLists>
 800b9fc:	e00d      	b.n	800ba1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b9fe:	4b26      	ldr	r3, [pc, #152]	; (800ba98 <prvAddNewTaskToReadyList+0xcc>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d109      	bne.n	800ba1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba06:	4b23      	ldr	r3, [pc, #140]	; (800ba94 <prvAddNewTaskToReadyList+0xc8>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d802      	bhi.n	800ba1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ba14:	4a1f      	ldr	r2, [pc, #124]	; (800ba94 <prvAddNewTaskToReadyList+0xc8>)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba1a:	4b20      	ldr	r3, [pc, #128]	; (800ba9c <prvAddNewTaskToReadyList+0xd0>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	4a1e      	ldr	r2, [pc, #120]	; (800ba9c <prvAddNewTaskToReadyList+0xd0>)
 800ba22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ba24:	4b1d      	ldr	r3, [pc, #116]	; (800ba9c <prvAddNewTaskToReadyList+0xd0>)
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba30:	4b1b      	ldr	r3, [pc, #108]	; (800baa0 <prvAddNewTaskToReadyList+0xd4>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d903      	bls.n	800ba40 <prvAddNewTaskToReadyList+0x74>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3c:	4a18      	ldr	r2, [pc, #96]	; (800baa0 <prvAddNewTaskToReadyList+0xd4>)
 800ba3e:	6013      	str	r3, [r2, #0]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba44:	4613      	mov	r3, r2
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	4413      	add	r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	4a15      	ldr	r2, [pc, #84]	; (800baa4 <prvAddNewTaskToReadyList+0xd8>)
 800ba4e:	441a      	add	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	3304      	adds	r3, #4
 800ba54:	4619      	mov	r1, r3
 800ba56:	4610      	mov	r0, r2
 800ba58:	f7ff f8fd 	bl	800ac56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ba5c:	f001 fc1a 	bl	800d294 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ba60:	4b0d      	ldr	r3, [pc, #52]	; (800ba98 <prvAddNewTaskToReadyList+0xcc>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d00e      	beq.n	800ba86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ba68:	4b0a      	ldr	r3, [pc, #40]	; (800ba94 <prvAddNewTaskToReadyList+0xc8>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d207      	bcs.n	800ba86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ba76:	4b0c      	ldr	r3, [pc, #48]	; (800baa8 <prvAddNewTaskToReadyList+0xdc>)
 800ba78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba7c:	601a      	str	r2, [r3, #0]
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba86:	bf00      	nop
 800ba88:	3708      	adds	r7, #8
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	20001a28 	.word	0x20001a28
 800ba94:	20001554 	.word	0x20001554
 800ba98:	20001a34 	.word	0x20001a34
 800ba9c:	20001a44 	.word	0x20001a44
 800baa0:	20001a30 	.word	0x20001a30
 800baa4:	20001558 	.word	0x20001558
 800baa8:	e000ed04 	.word	0xe000ed04

0800baac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bab4:	2300      	movs	r3, #0
 800bab6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d017      	beq.n	800baee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800babe:	4b13      	ldr	r3, [pc, #76]	; (800bb0c <vTaskDelay+0x60>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d00a      	beq.n	800badc <vTaskDelay+0x30>
	__asm volatile
 800bac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baca:	f383 8811 	msr	BASEPRI, r3
 800bace:	f3bf 8f6f 	isb	sy
 800bad2:	f3bf 8f4f 	dsb	sy
 800bad6:	60bb      	str	r3, [r7, #8]
}
 800bad8:	bf00      	nop
 800bada:	e7fe      	b.n	800bada <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800badc:	f000 f88a 	bl	800bbf4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bae0:	2100      	movs	r1, #0
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 fed6 	bl	800c894 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bae8:	f000 f892 	bl	800bc10 <xTaskResumeAll>
 800baec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d107      	bne.n	800bb04 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800baf4:	4b06      	ldr	r3, [pc, #24]	; (800bb10 <vTaskDelay+0x64>)
 800baf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bafa:	601a      	str	r2, [r3, #0]
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb04:	bf00      	nop
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	20001a50 	.word	0x20001a50
 800bb10:	e000ed04 	.word	0xe000ed04

0800bb14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b08a      	sub	sp, #40	; 0x28
 800bb18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bb22:	463a      	mov	r2, r7
 800bb24:	1d39      	adds	r1, r7, #4
 800bb26:	f107 0308 	add.w	r3, r7, #8
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7ff f832 	bl	800ab94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bb30:	6839      	ldr	r1, [r7, #0]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	9202      	str	r2, [sp, #8]
 800bb38:	9301      	str	r3, [sp, #4]
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	2300      	movs	r3, #0
 800bb40:	460a      	mov	r2, r1
 800bb42:	4924      	ldr	r1, [pc, #144]	; (800bbd4 <vTaskStartScheduler+0xc0>)
 800bb44:	4824      	ldr	r0, [pc, #144]	; (800bbd8 <vTaskStartScheduler+0xc4>)
 800bb46:	f7ff fdf9 	bl	800b73c <xTaskCreateStatic>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	4a23      	ldr	r2, [pc, #140]	; (800bbdc <vTaskStartScheduler+0xc8>)
 800bb4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bb50:	4b22      	ldr	r3, [pc, #136]	; (800bbdc <vTaskStartScheduler+0xc8>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d002      	beq.n	800bb5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	617b      	str	r3, [r7, #20]
 800bb5c:	e001      	b.n	800bb62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d102      	bne.n	800bb6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bb68:	f000 fee8 	bl	800c93c <xTimerCreateTimerTask>
 800bb6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d11b      	bne.n	800bbac <vTaskStartScheduler+0x98>
	__asm volatile
 800bb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb78:	f383 8811 	msr	BASEPRI, r3
 800bb7c:	f3bf 8f6f 	isb	sy
 800bb80:	f3bf 8f4f 	dsb	sy
 800bb84:	613b      	str	r3, [r7, #16]
}
 800bb86:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bb88:	4b15      	ldr	r3, [pc, #84]	; (800bbe0 <vTaskStartScheduler+0xcc>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	3354      	adds	r3, #84	; 0x54
 800bb8e:	4a15      	ldr	r2, [pc, #84]	; (800bbe4 <vTaskStartScheduler+0xd0>)
 800bb90:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bb92:	4b15      	ldr	r3, [pc, #84]	; (800bbe8 <vTaskStartScheduler+0xd4>)
 800bb94:	f04f 32ff 	mov.w	r2, #4294967295
 800bb98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bb9a:	4b14      	ldr	r3, [pc, #80]	; (800bbec <vTaskStartScheduler+0xd8>)
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bba0:	4b13      	ldr	r3, [pc, #76]	; (800bbf0 <vTaskStartScheduler+0xdc>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bba6:	f001 faa3 	bl	800d0f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bbaa:	e00e      	b.n	800bbca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbb2:	d10a      	bne.n	800bbca <vTaskStartScheduler+0xb6>
	__asm volatile
 800bbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb8:	f383 8811 	msr	BASEPRI, r3
 800bbbc:	f3bf 8f6f 	isb	sy
 800bbc0:	f3bf 8f4f 	dsb	sy
 800bbc4:	60fb      	str	r3, [r7, #12]
}
 800bbc6:	bf00      	nop
 800bbc8:	e7fe      	b.n	800bbc8 <vTaskStartScheduler+0xb4>
}
 800bbca:	bf00      	nop
 800bbcc:	3718      	adds	r7, #24
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	080106c4 	.word	0x080106c4
 800bbd8:	0800c409 	.word	0x0800c409
 800bbdc:	20001a4c 	.word	0x20001a4c
 800bbe0:	20001554 	.word	0x20001554
 800bbe4:	200000e0 	.word	0x200000e0
 800bbe8:	20001a48 	.word	0x20001a48
 800bbec:	20001a34 	.word	0x20001a34
 800bbf0:	20001a2c 	.word	0x20001a2c

0800bbf4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bbf8:	4b04      	ldr	r3, [pc, #16]	; (800bc0c <vTaskSuspendAll+0x18>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	4a03      	ldr	r2, [pc, #12]	; (800bc0c <vTaskSuspendAll+0x18>)
 800bc00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bc02:	bf00      	nop
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr
 800bc0c:	20001a50 	.word	0x20001a50

0800bc10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bc16:	2300      	movs	r3, #0
 800bc18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bc1e:	4b42      	ldr	r3, [pc, #264]	; (800bd28 <xTaskResumeAll+0x118>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10a      	bne.n	800bc3c <xTaskResumeAll+0x2c>
	__asm volatile
 800bc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	603b      	str	r3, [r7, #0]
}
 800bc38:	bf00      	nop
 800bc3a:	e7fe      	b.n	800bc3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bc3c:	f001 fafa 	bl	800d234 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bc40:	4b39      	ldr	r3, [pc, #228]	; (800bd28 <xTaskResumeAll+0x118>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	3b01      	subs	r3, #1
 800bc46:	4a38      	ldr	r2, [pc, #224]	; (800bd28 <xTaskResumeAll+0x118>)
 800bc48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc4a:	4b37      	ldr	r3, [pc, #220]	; (800bd28 <xTaskResumeAll+0x118>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d162      	bne.n	800bd18 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bc52:	4b36      	ldr	r3, [pc, #216]	; (800bd2c <xTaskResumeAll+0x11c>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d05e      	beq.n	800bd18 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc5a:	e02f      	b.n	800bcbc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc5c:	4b34      	ldr	r3, [pc, #208]	; (800bd30 <xTaskResumeAll+0x120>)
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	3318      	adds	r3, #24
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7ff f851 	bl	800ad10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	3304      	adds	r3, #4
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7ff f84c 	bl	800ad10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc7c:	4b2d      	ldr	r3, [pc, #180]	; (800bd34 <xTaskResumeAll+0x124>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d903      	bls.n	800bc8c <xTaskResumeAll+0x7c>
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc88:	4a2a      	ldr	r2, [pc, #168]	; (800bd34 <xTaskResumeAll+0x124>)
 800bc8a:	6013      	str	r3, [r2, #0]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc90:	4613      	mov	r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4413      	add	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4a27      	ldr	r2, [pc, #156]	; (800bd38 <xTaskResumeAll+0x128>)
 800bc9a:	441a      	add	r2, r3
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	3304      	adds	r3, #4
 800bca0:	4619      	mov	r1, r3
 800bca2:	4610      	mov	r0, r2
 800bca4:	f7fe ffd7 	bl	800ac56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcac:	4b23      	ldr	r3, [pc, #140]	; (800bd3c <xTaskResumeAll+0x12c>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d302      	bcc.n	800bcbc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bcb6:	4b22      	ldr	r3, [pc, #136]	; (800bd40 <xTaskResumeAll+0x130>)
 800bcb8:	2201      	movs	r2, #1
 800bcba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bcbc:	4b1c      	ldr	r3, [pc, #112]	; (800bd30 <xTaskResumeAll+0x120>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d1cb      	bne.n	800bc5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d001      	beq.n	800bcce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bcca:	f000 fc57 	bl	800c57c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bcce:	4b1d      	ldr	r3, [pc, #116]	; (800bd44 <xTaskResumeAll+0x134>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d010      	beq.n	800bcfc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bcda:	f000 f93f 	bl	800bf5c <xTaskIncrementTick>
 800bcde:	4603      	mov	r3, r0
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d002      	beq.n	800bcea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bce4:	4b16      	ldr	r3, [pc, #88]	; (800bd40 <xTaskResumeAll+0x130>)
 800bce6:	2201      	movs	r2, #1
 800bce8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	3b01      	subs	r3, #1
 800bcee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d1f1      	bne.n	800bcda <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bcf6:	4b13      	ldr	r3, [pc, #76]	; (800bd44 <xTaskResumeAll+0x134>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bcfc:	4b10      	ldr	r3, [pc, #64]	; (800bd40 <xTaskResumeAll+0x130>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d009      	beq.n	800bd18 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd04:	2301      	movs	r3, #1
 800bd06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bd08:	4b0f      	ldr	r3, [pc, #60]	; (800bd48 <xTaskResumeAll+0x138>)
 800bd0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd0e:	601a      	str	r2, [r3, #0]
 800bd10:	f3bf 8f4f 	dsb	sy
 800bd14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd18:	f001 fabc 	bl	800d294 <vPortExitCritical>

	return xAlreadyYielded;
 800bd1c:	68bb      	ldr	r3, [r7, #8]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	20001a50 	.word	0x20001a50
 800bd2c:	20001a28 	.word	0x20001a28
 800bd30:	200019e8 	.word	0x200019e8
 800bd34:	20001a30 	.word	0x20001a30
 800bd38:	20001558 	.word	0x20001558
 800bd3c:	20001554 	.word	0x20001554
 800bd40:	20001a3c 	.word	0x20001a3c
 800bd44:	20001a38 	.word	0x20001a38
 800bd48:	e000ed04 	.word	0xe000ed04

0800bd4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bd52:	4b05      	ldr	r3, [pc, #20]	; (800bd68 <xTaskGetTickCount+0x1c>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bd58:	687b      	ldr	r3, [r7, #4]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	370c      	adds	r7, #12
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr
 800bd66:	bf00      	nop
 800bd68:	20001a2c 	.word	0x20001a2c

0800bd6c <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b085      	sub	sp, #20
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d102      	bne.n	800bd80 <pcTaskGetName+0x14>
 800bd7a:	4b0d      	ldr	r3, [pc, #52]	; (800bdb0 <pcTaskGetName+0x44>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	e000      	b.n	800bd82 <pcTaskGetName+0x16>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d10a      	bne.n	800bda0 <pcTaskGetName+0x34>
	__asm volatile
 800bd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8e:	f383 8811 	msr	BASEPRI, r3
 800bd92:	f3bf 8f6f 	isb	sy
 800bd96:	f3bf 8f4f 	dsb	sy
 800bd9a:	60bb      	str	r3, [r7, #8]
}
 800bd9c:	bf00      	nop
 800bd9e:	e7fe      	b.n	800bd9e <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	3334      	adds	r3, #52	; 0x34
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3714      	adds	r7, #20
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr
 800bdb0:	20001554 	.word	0x20001554

0800bdb4 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b08b      	sub	sp, #44	; 0x2c
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	627b      	str	r3, [r7, #36]	; 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d05b      	beq.n	800be82 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	61bb      	str	r3, [r7, #24]
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	685a      	ldr	r2, [r3, #4]
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	605a      	str	r2, [r3, #4]
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	685a      	ldr	r2, [r3, #4]
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	3308      	adds	r3, #8
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d104      	bne.n	800bdee <prvSearchForNameWithinSingleList+0x3a>
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	685a      	ldr	r2, [r3, #4]
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	605a      	str	r2, [r3, #4]
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	613b      	str	r3, [r7, #16]
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	685a      	ldr	r2, [r3, #4]
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	605a      	str	r2, [r3, #4]
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	685a      	ldr	r2, [r3, #4]
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	3308      	adds	r3, #8
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d104      	bne.n	800be1a <prvSearchForNameWithinSingleList+0x66>
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	685a      	ldr	r2, [r3, #4]
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	605a      	str	r2, [r3, #4]
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	68db      	ldr	r3, [r3, #12]
 800be20:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800be22:	2300      	movs	r3, #0
 800be24:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be26:	2300      	movs	r3, #0
 800be28:	623b      	str	r3, [r7, #32]
 800be2a:	e01c      	b.n	800be66 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800be2c:	68fa      	ldr	r2, [r7, #12]
 800be2e:	6a3b      	ldr	r3, [r7, #32]
 800be30:	4413      	add	r3, r2
 800be32:	3334      	adds	r3, #52	; 0x34
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800be38:	683a      	ldr	r2, [r7, #0]
 800be3a:	6a3b      	ldr	r3, [r7, #32]
 800be3c:	4413      	add	r3, r2
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	7afa      	ldrb	r2, [r7, #11]
 800be42:	429a      	cmp	r2, r3
 800be44:	d002      	beq.n	800be4c <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800be46:	2301      	movs	r3, #1
 800be48:	61fb      	str	r3, [r7, #28]
 800be4a:	e006      	b.n	800be5a <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800be4c:	7afb      	ldrb	r3, [r7, #11]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d103      	bne.n	800be5a <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	627b      	str	r3, [r7, #36]	; 0x24
						xBreakLoop = pdTRUE;
 800be56:	2301      	movs	r3, #1
 800be58:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d106      	bne.n	800be6e <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be60:	6a3b      	ldr	r3, [r7, #32]
 800be62:	3301      	adds	r3, #1
 800be64:	623b      	str	r3, [r7, #32]
 800be66:	6a3b      	ldr	r3, [r7, #32]
 800be68:	2b0f      	cmp	r3, #15
 800be6a:	d9df      	bls.n	800be2c <prvSearchForNameWithinSingleList+0x78>
 800be6c:	e000      	b.n	800be70 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800be6e:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800be70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be72:	2b00      	cmp	r3, #0
 800be74:	d104      	bne.n	800be80 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d1bb      	bne.n	800bdf6 <prvSearchForNameWithinSingleList+0x42>
 800be7e:	e000      	b.n	800be82 <prvSearchForNameWithinSingleList+0xce>
					break;
 800be80:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800be82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800be84:	4618      	mov	r0, r3
 800be86:	372c      	adds	r7, #44	; 0x2c
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800be98:	2338      	movs	r3, #56	; 0x38
 800be9a:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f7f4 f9e7 	bl	8000270 <strlen>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b0f      	cmp	r3, #15
 800bea6:	d90a      	bls.n	800bebe <xTaskGetHandle+0x2e>
	__asm volatile
 800bea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beac:	f383 8811 	msr	BASEPRI, r3
 800beb0:	f3bf 8f6f 	isb	sy
 800beb4:	f3bf 8f4f 	dsb	sy
 800beb8:	60fb      	str	r3, [r7, #12]
}
 800beba:	bf00      	nop
 800bebc:	e7fe      	b.n	800bebc <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800bebe:	f7ff fe99 	bl	800bbf4 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	3b01      	subs	r3, #1
 800bec6:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800bec8:	697a      	ldr	r2, [r7, #20]
 800beca:	4613      	mov	r3, r2
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	4413      	add	r3, r2
 800bed0:	009b      	lsls	r3, r3, #2
 800bed2:	4a1d      	ldr	r2, [pc, #116]	; (800bf48 <xTaskGetHandle+0xb8>)
 800bed4:	4413      	add	r3, r2
 800bed6:	6879      	ldr	r1, [r7, #4]
 800bed8:	4618      	mov	r0, r3
 800beda:	f7ff ff6b 	bl	800bdb4 <prvSearchForNameWithinSingleList>
 800bede:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d103      	bne.n	800beee <xTaskGetHandle+0x5e>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1ea      	bne.n	800bec2 <xTaskGetHandle+0x32>
 800beec:	e000      	b.n	800bef0 <xTaskGetHandle+0x60>
					break;
 800beee:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d106      	bne.n	800bf04 <xTaskGetHandle+0x74>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800bef6:	4b15      	ldr	r3, [pc, #84]	; (800bf4c <xTaskGetHandle+0xbc>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	6879      	ldr	r1, [r7, #4]
 800befc:	4618      	mov	r0, r3
 800befe:	f7ff ff59 	bl	800bdb4 <prvSearchForNameWithinSingleList>
 800bf02:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d106      	bne.n	800bf18 <xTaskGetHandle+0x88>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800bf0a:	4b11      	ldr	r3, [pc, #68]	; (800bf50 <xTaskGetHandle+0xc0>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	6879      	ldr	r1, [r7, #4]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7ff ff4f 	bl	800bdb4 <prvSearchForNameWithinSingleList>
 800bf16:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d104      	bne.n	800bf28 <xTaskGetHandle+0x98>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800bf1e:	6879      	ldr	r1, [r7, #4]
 800bf20:	480c      	ldr	r0, [pc, #48]	; (800bf54 <xTaskGetHandle+0xc4>)
 800bf22:	f7ff ff47 	bl	800bdb4 <prvSearchForNameWithinSingleList>
 800bf26:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d104      	bne.n	800bf38 <xTaskGetHandle+0xa8>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800bf2e:	6879      	ldr	r1, [r7, #4]
 800bf30:	4809      	ldr	r0, [pc, #36]	; (800bf58 <xTaskGetHandle+0xc8>)
 800bf32:	f7ff ff3f 	bl	800bdb4 <prvSearchForNameWithinSingleList>
 800bf36:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800bf38:	f7ff fe6a 	bl	800bc10 <xTaskResumeAll>

		return pxTCB;
 800bf3c:	693b      	ldr	r3, [r7, #16]
	}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3718      	adds	r7, #24
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	20001558 	.word	0x20001558
 800bf4c:	200019e0 	.word	0x200019e0
 800bf50:	200019e4 	.word	0x200019e4
 800bf54:	20001a14 	.word	0x20001a14
 800bf58:	200019fc 	.word	0x200019fc

0800bf5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b086      	sub	sp, #24
 800bf60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bf62:	2300      	movs	r3, #0
 800bf64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf66:	4b4f      	ldr	r3, [pc, #316]	; (800c0a4 <xTaskIncrementTick+0x148>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	f040 808f 	bne.w	800c08e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bf70:	4b4d      	ldr	r3, [pc, #308]	; (800c0a8 <xTaskIncrementTick+0x14c>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	3301      	adds	r3, #1
 800bf76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bf78:	4a4b      	ldr	r2, [pc, #300]	; (800c0a8 <xTaskIncrementTick+0x14c>)
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d120      	bne.n	800bfc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf84:	4b49      	ldr	r3, [pc, #292]	; (800c0ac <xTaskIncrementTick+0x150>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d00a      	beq.n	800bfa4 <xTaskIncrementTick+0x48>
	__asm volatile
 800bf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf92:	f383 8811 	msr	BASEPRI, r3
 800bf96:	f3bf 8f6f 	isb	sy
 800bf9a:	f3bf 8f4f 	dsb	sy
 800bf9e:	603b      	str	r3, [r7, #0]
}
 800bfa0:	bf00      	nop
 800bfa2:	e7fe      	b.n	800bfa2 <xTaskIncrementTick+0x46>
 800bfa4:	4b41      	ldr	r3, [pc, #260]	; (800c0ac <xTaskIncrementTick+0x150>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	60fb      	str	r3, [r7, #12]
 800bfaa:	4b41      	ldr	r3, [pc, #260]	; (800c0b0 <xTaskIncrementTick+0x154>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4a3f      	ldr	r2, [pc, #252]	; (800c0ac <xTaskIncrementTick+0x150>)
 800bfb0:	6013      	str	r3, [r2, #0]
 800bfb2:	4a3f      	ldr	r2, [pc, #252]	; (800c0b0 <xTaskIncrementTick+0x154>)
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6013      	str	r3, [r2, #0]
 800bfb8:	4b3e      	ldr	r3, [pc, #248]	; (800c0b4 <xTaskIncrementTick+0x158>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	4a3d      	ldr	r2, [pc, #244]	; (800c0b4 <xTaskIncrementTick+0x158>)
 800bfc0:	6013      	str	r3, [r2, #0]
 800bfc2:	f000 fadb 	bl	800c57c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bfc6:	4b3c      	ldr	r3, [pc, #240]	; (800c0b8 <xTaskIncrementTick+0x15c>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	693a      	ldr	r2, [r7, #16]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d349      	bcc.n	800c064 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfd0:	4b36      	ldr	r3, [pc, #216]	; (800c0ac <xTaskIncrementTick+0x150>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d104      	bne.n	800bfe4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfda:	4b37      	ldr	r3, [pc, #220]	; (800c0b8 <xTaskIncrementTick+0x15c>)
 800bfdc:	f04f 32ff 	mov.w	r2, #4294967295
 800bfe0:	601a      	str	r2, [r3, #0]
					break;
 800bfe2:	e03f      	b.n	800c064 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfe4:	4b31      	ldr	r3, [pc, #196]	; (800c0ac <xTaskIncrementTick+0x150>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bff4:	693a      	ldr	r2, [r7, #16]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d203      	bcs.n	800c004 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bffc:	4a2e      	ldr	r2, [pc, #184]	; (800c0b8 <xTaskIncrementTick+0x15c>)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c002:	e02f      	b.n	800c064 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	3304      	adds	r3, #4
 800c008:	4618      	mov	r0, r3
 800c00a:	f7fe fe81 	bl	800ad10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c012:	2b00      	cmp	r3, #0
 800c014:	d004      	beq.n	800c020 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	3318      	adds	r3, #24
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fe fe78 	bl	800ad10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c024:	4b25      	ldr	r3, [pc, #148]	; (800c0bc <xTaskIncrementTick+0x160>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d903      	bls.n	800c034 <xTaskIncrementTick+0xd8>
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c030:	4a22      	ldr	r2, [pc, #136]	; (800c0bc <xTaskIncrementTick+0x160>)
 800c032:	6013      	str	r3, [r2, #0]
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c038:	4613      	mov	r3, r2
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	4413      	add	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	4a1f      	ldr	r2, [pc, #124]	; (800c0c0 <xTaskIncrementTick+0x164>)
 800c042:	441a      	add	r2, r3
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	3304      	adds	r3, #4
 800c048:	4619      	mov	r1, r3
 800c04a:	4610      	mov	r0, r2
 800c04c:	f7fe fe03 	bl	800ac56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c054:	4b1b      	ldr	r3, [pc, #108]	; (800c0c4 <xTaskIncrementTick+0x168>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d3b8      	bcc.n	800bfd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c05e:	2301      	movs	r3, #1
 800c060:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c062:	e7b5      	b.n	800bfd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c064:	4b17      	ldr	r3, [pc, #92]	; (800c0c4 <xTaskIncrementTick+0x168>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c06a:	4915      	ldr	r1, [pc, #84]	; (800c0c0 <xTaskIncrementTick+0x164>)
 800c06c:	4613      	mov	r3, r2
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	4413      	add	r3, r2
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	440b      	add	r3, r1
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d901      	bls.n	800c080 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c07c:	2301      	movs	r3, #1
 800c07e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c080:	4b11      	ldr	r3, [pc, #68]	; (800c0c8 <xTaskIncrementTick+0x16c>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d007      	beq.n	800c098 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c088:	2301      	movs	r3, #1
 800c08a:	617b      	str	r3, [r7, #20]
 800c08c:	e004      	b.n	800c098 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c08e:	4b0f      	ldr	r3, [pc, #60]	; (800c0cc <xTaskIncrementTick+0x170>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	3301      	adds	r3, #1
 800c094:	4a0d      	ldr	r2, [pc, #52]	; (800c0cc <xTaskIncrementTick+0x170>)
 800c096:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c098:	697b      	ldr	r3, [r7, #20]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3718      	adds	r7, #24
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	20001a50 	.word	0x20001a50
 800c0a8:	20001a2c 	.word	0x20001a2c
 800c0ac:	200019e0 	.word	0x200019e0
 800c0b0:	200019e4 	.word	0x200019e4
 800c0b4:	20001a40 	.word	0x20001a40
 800c0b8:	20001a48 	.word	0x20001a48
 800c0bc:	20001a30 	.word	0x20001a30
 800c0c0:	20001558 	.word	0x20001558
 800c0c4:	20001554 	.word	0x20001554
 800c0c8:	20001a3c 	.word	0x20001a3c
 800c0cc:	20001a38 	.word	0x20001a38

0800c0d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b085      	sub	sp, #20
 800c0d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c0d6:	4b2a      	ldr	r3, [pc, #168]	; (800c180 <vTaskSwitchContext+0xb0>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d003      	beq.n	800c0e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c0de:	4b29      	ldr	r3, [pc, #164]	; (800c184 <vTaskSwitchContext+0xb4>)
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c0e4:	e046      	b.n	800c174 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c0e6:	4b27      	ldr	r3, [pc, #156]	; (800c184 <vTaskSwitchContext+0xb4>)
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0ec:	4b26      	ldr	r3, [pc, #152]	; (800c188 <vTaskSwitchContext+0xb8>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	60fb      	str	r3, [r7, #12]
 800c0f2:	e010      	b.n	800c116 <vTaskSwitchContext+0x46>
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10a      	bne.n	800c110 <vTaskSwitchContext+0x40>
	__asm volatile
 800c0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fe:	f383 8811 	msr	BASEPRI, r3
 800c102:	f3bf 8f6f 	isb	sy
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	607b      	str	r3, [r7, #4]
}
 800c10c:	bf00      	nop
 800c10e:	e7fe      	b.n	800c10e <vTaskSwitchContext+0x3e>
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	3b01      	subs	r3, #1
 800c114:	60fb      	str	r3, [r7, #12]
 800c116:	491d      	ldr	r1, [pc, #116]	; (800c18c <vTaskSwitchContext+0xbc>)
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	4613      	mov	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	4413      	add	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	440b      	add	r3, r1
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d0e4      	beq.n	800c0f4 <vTaskSwitchContext+0x24>
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	4613      	mov	r3, r2
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	4413      	add	r3, r2
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	4a15      	ldr	r2, [pc, #84]	; (800c18c <vTaskSwitchContext+0xbc>)
 800c136:	4413      	add	r3, r2
 800c138:	60bb      	str	r3, [r7, #8]
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	685a      	ldr	r2, [r3, #4]
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	605a      	str	r2, [r3, #4]
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	685a      	ldr	r2, [r3, #4]
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	3308      	adds	r3, #8
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d104      	bne.n	800c15a <vTaskSwitchContext+0x8a>
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	685a      	ldr	r2, [r3, #4]
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	605a      	str	r2, [r3, #4]
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	4a0b      	ldr	r2, [pc, #44]	; (800c190 <vTaskSwitchContext+0xc0>)
 800c162:	6013      	str	r3, [r2, #0]
 800c164:	4a08      	ldr	r2, [pc, #32]	; (800c188 <vTaskSwitchContext+0xb8>)
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c16a:	4b09      	ldr	r3, [pc, #36]	; (800c190 <vTaskSwitchContext+0xc0>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	3354      	adds	r3, #84	; 0x54
 800c170:	4a08      	ldr	r2, [pc, #32]	; (800c194 <vTaskSwitchContext+0xc4>)
 800c172:	6013      	str	r3, [r2, #0]
}
 800c174:	bf00      	nop
 800c176:	3714      	adds	r7, #20
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr
 800c180:	20001a50 	.word	0x20001a50
 800c184:	20001a3c 	.word	0x20001a3c
 800c188:	20001a30 	.word	0x20001a30
 800c18c:	20001558 	.word	0x20001558
 800c190:	20001554 	.word	0x20001554
 800c194:	200000e0 	.word	0x200000e0

0800c198 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d10a      	bne.n	800c1be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ac:	f383 8811 	msr	BASEPRI, r3
 800c1b0:	f3bf 8f6f 	isb	sy
 800c1b4:	f3bf 8f4f 	dsb	sy
 800c1b8:	60fb      	str	r3, [r7, #12]
}
 800c1ba:	bf00      	nop
 800c1bc:	e7fe      	b.n	800c1bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c1be:	4b07      	ldr	r3, [pc, #28]	; (800c1dc <vTaskPlaceOnEventList+0x44>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	3318      	adds	r3, #24
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7fe fd69 	bl	800ac9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c1cc:	2101      	movs	r1, #1
 800c1ce:	6838      	ldr	r0, [r7, #0]
 800c1d0:	f000 fb60 	bl	800c894 <prvAddCurrentTaskToDelayedList>
}
 800c1d4:	bf00      	nop
 800c1d6:	3710      	adds	r7, #16
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}
 800c1dc:	20001554 	.word	0x20001554

0800c1e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	60b9      	str	r1, [r7, #8]
 800c1ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10a      	bne.n	800c208 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f6:	f383 8811 	msr	BASEPRI, r3
 800c1fa:	f3bf 8f6f 	isb	sy
 800c1fe:	f3bf 8f4f 	dsb	sy
 800c202:	617b      	str	r3, [r7, #20]
}
 800c204:	bf00      	nop
 800c206:	e7fe      	b.n	800c206 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c208:	4b0a      	ldr	r3, [pc, #40]	; (800c234 <vTaskPlaceOnEventListRestricted+0x54>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	3318      	adds	r3, #24
 800c20e:	4619      	mov	r1, r3
 800c210:	68f8      	ldr	r0, [r7, #12]
 800c212:	f7fe fd20 	bl	800ac56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d002      	beq.n	800c222 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c21c:	f04f 33ff 	mov.w	r3, #4294967295
 800c220:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c222:	6879      	ldr	r1, [r7, #4]
 800c224:	68b8      	ldr	r0, [r7, #8]
 800c226:	f000 fb35 	bl	800c894 <prvAddCurrentTaskToDelayedList>
	}
 800c22a:	bf00      	nop
 800c22c:	3718      	adds	r7, #24
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	20001554 	.word	0x20001554

0800c238 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b086      	sub	sp, #24
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d10a      	bne.n	800c264 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	60fb      	str	r3, [r7, #12]
}
 800c260:	bf00      	nop
 800c262:	e7fe      	b.n	800c262 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	3318      	adds	r3, #24
 800c268:	4618      	mov	r0, r3
 800c26a:	f7fe fd51 	bl	800ad10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c26e:	4b1e      	ldr	r3, [pc, #120]	; (800c2e8 <xTaskRemoveFromEventList+0xb0>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d11d      	bne.n	800c2b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	3304      	adds	r3, #4
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fe fd48 	bl	800ad10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c284:	4b19      	ldr	r3, [pc, #100]	; (800c2ec <xTaskRemoveFromEventList+0xb4>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d903      	bls.n	800c294 <xTaskRemoveFromEventList+0x5c>
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c290:	4a16      	ldr	r2, [pc, #88]	; (800c2ec <xTaskRemoveFromEventList+0xb4>)
 800c292:	6013      	str	r3, [r2, #0]
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c298:	4613      	mov	r3, r2
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	4413      	add	r3, r2
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	4a13      	ldr	r2, [pc, #76]	; (800c2f0 <xTaskRemoveFromEventList+0xb8>)
 800c2a2:	441a      	add	r2, r3
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	3304      	adds	r3, #4
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	4610      	mov	r0, r2
 800c2ac:	f7fe fcd3 	bl	800ac56 <vListInsertEnd>
 800c2b0:	e005      	b.n	800c2be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	3318      	adds	r3, #24
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	480e      	ldr	r0, [pc, #56]	; (800c2f4 <xTaskRemoveFromEventList+0xbc>)
 800c2ba:	f7fe fccc 	bl	800ac56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2c2:	4b0d      	ldr	r3, [pc, #52]	; (800c2f8 <xTaskRemoveFromEventList+0xc0>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d905      	bls.n	800c2d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c2d0:	4b0a      	ldr	r3, [pc, #40]	; (800c2fc <xTaskRemoveFromEventList+0xc4>)
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	601a      	str	r2, [r3, #0]
 800c2d6:	e001      	b.n	800c2dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c2dc:	697b      	ldr	r3, [r7, #20]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3718      	adds	r7, #24
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	20001a50 	.word	0x20001a50
 800c2ec:	20001a30 	.word	0x20001a30
 800c2f0:	20001558 	.word	0x20001558
 800c2f4:	200019e8 	.word	0x200019e8
 800c2f8:	20001554 	.word	0x20001554
 800c2fc:	20001a3c 	.word	0x20001a3c

0800c300 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c308:	4b06      	ldr	r3, [pc, #24]	; (800c324 <vTaskInternalSetTimeOutState+0x24>)
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c310:	4b05      	ldr	r3, [pc, #20]	; (800c328 <vTaskInternalSetTimeOutState+0x28>)
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	605a      	str	r2, [r3, #4]
}
 800c318:	bf00      	nop
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr
 800c324:	20001a40 	.word	0x20001a40
 800c328:	20001a2c 	.word	0x20001a2c

0800c32c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b088      	sub	sp, #32
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d10a      	bne.n	800c352 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c340:	f383 8811 	msr	BASEPRI, r3
 800c344:	f3bf 8f6f 	isb	sy
 800c348:	f3bf 8f4f 	dsb	sy
 800c34c:	613b      	str	r3, [r7, #16]
}
 800c34e:	bf00      	nop
 800c350:	e7fe      	b.n	800c350 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d10a      	bne.n	800c36e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35c:	f383 8811 	msr	BASEPRI, r3
 800c360:	f3bf 8f6f 	isb	sy
 800c364:	f3bf 8f4f 	dsb	sy
 800c368:	60fb      	str	r3, [r7, #12]
}
 800c36a:	bf00      	nop
 800c36c:	e7fe      	b.n	800c36c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c36e:	f000 ff61 	bl	800d234 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c372:	4b1d      	ldr	r3, [pc, #116]	; (800c3e8 <xTaskCheckForTimeOut+0xbc>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	69ba      	ldr	r2, [r7, #24]
 800c37e:	1ad3      	subs	r3, r2, r3
 800c380:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c38a:	d102      	bne.n	800c392 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c38c:	2300      	movs	r3, #0
 800c38e:	61fb      	str	r3, [r7, #28]
 800c390:	e023      	b.n	800c3da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	4b15      	ldr	r3, [pc, #84]	; (800c3ec <xTaskCheckForTimeOut+0xc0>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d007      	beq.n	800c3ae <xTaskCheckForTimeOut+0x82>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	69ba      	ldr	r2, [r7, #24]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d302      	bcc.n	800c3ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	61fb      	str	r3, [r7, #28]
 800c3ac:	e015      	b.n	800c3da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	697a      	ldr	r2, [r7, #20]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d20b      	bcs.n	800c3d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	1ad2      	subs	r2, r2, r3
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f7ff ff9b 	bl	800c300 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	61fb      	str	r3, [r7, #28]
 800c3ce:	e004      	b.n	800c3da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c3da:	f000 ff5b 	bl	800d294 <vPortExitCritical>

	return xReturn;
 800c3de:	69fb      	ldr	r3, [r7, #28]
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3720      	adds	r7, #32
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	20001a2c 	.word	0x20001a2c
 800c3ec:	20001a40 	.word	0x20001a40

0800c3f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c3f4:	4b03      	ldr	r3, [pc, #12]	; (800c404 <vTaskMissedYield+0x14>)
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	601a      	str	r2, [r3, #0]
}
 800c3fa:	bf00      	nop
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr
 800c404:	20001a3c 	.word	0x20001a3c

0800c408 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c410:	f000 f852 	bl	800c4b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c414:	4b06      	ldr	r3, [pc, #24]	; (800c430 <prvIdleTask+0x28>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d9f9      	bls.n	800c410 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c41c:	4b05      	ldr	r3, [pc, #20]	; (800c434 <prvIdleTask+0x2c>)
 800c41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c422:	601a      	str	r2, [r3, #0]
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c42c:	e7f0      	b.n	800c410 <prvIdleTask+0x8>
 800c42e:	bf00      	nop
 800c430:	20001558 	.word	0x20001558
 800c434:	e000ed04 	.word	0xe000ed04

0800c438 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c43e:	2300      	movs	r3, #0
 800c440:	607b      	str	r3, [r7, #4]
 800c442:	e00c      	b.n	800c45e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	4613      	mov	r3, r2
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	4413      	add	r3, r2
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	4a12      	ldr	r2, [pc, #72]	; (800c498 <prvInitialiseTaskLists+0x60>)
 800c450:	4413      	add	r3, r2
 800c452:	4618      	mov	r0, r3
 800c454:	f7fe fbd2 	bl	800abfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	3301      	adds	r3, #1
 800c45c:	607b      	str	r3, [r7, #4]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2b37      	cmp	r3, #55	; 0x37
 800c462:	d9ef      	bls.n	800c444 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c464:	480d      	ldr	r0, [pc, #52]	; (800c49c <prvInitialiseTaskLists+0x64>)
 800c466:	f7fe fbc9 	bl	800abfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c46a:	480d      	ldr	r0, [pc, #52]	; (800c4a0 <prvInitialiseTaskLists+0x68>)
 800c46c:	f7fe fbc6 	bl	800abfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c470:	480c      	ldr	r0, [pc, #48]	; (800c4a4 <prvInitialiseTaskLists+0x6c>)
 800c472:	f7fe fbc3 	bl	800abfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c476:	480c      	ldr	r0, [pc, #48]	; (800c4a8 <prvInitialiseTaskLists+0x70>)
 800c478:	f7fe fbc0 	bl	800abfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c47c:	480b      	ldr	r0, [pc, #44]	; (800c4ac <prvInitialiseTaskLists+0x74>)
 800c47e:	f7fe fbbd 	bl	800abfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c482:	4b0b      	ldr	r3, [pc, #44]	; (800c4b0 <prvInitialiseTaskLists+0x78>)
 800c484:	4a05      	ldr	r2, [pc, #20]	; (800c49c <prvInitialiseTaskLists+0x64>)
 800c486:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c488:	4b0a      	ldr	r3, [pc, #40]	; (800c4b4 <prvInitialiseTaskLists+0x7c>)
 800c48a:	4a05      	ldr	r2, [pc, #20]	; (800c4a0 <prvInitialiseTaskLists+0x68>)
 800c48c:	601a      	str	r2, [r3, #0]
}
 800c48e:	bf00      	nop
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	20001558 	.word	0x20001558
 800c49c:	200019b8 	.word	0x200019b8
 800c4a0:	200019cc 	.word	0x200019cc
 800c4a4:	200019e8 	.word	0x200019e8
 800c4a8:	200019fc 	.word	0x200019fc
 800c4ac:	20001a14 	.word	0x20001a14
 800c4b0:	200019e0 	.word	0x200019e0
 800c4b4:	200019e4 	.word	0x200019e4

0800c4b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c4be:	e019      	b.n	800c4f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c4c0:	f000 feb8 	bl	800d234 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4c4:	4b10      	ldr	r3, [pc, #64]	; (800c508 <prvCheckTasksWaitingTermination+0x50>)
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	3304      	adds	r3, #4
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7fe fc1d 	bl	800ad10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c4d6:	4b0d      	ldr	r3, [pc, #52]	; (800c50c <prvCheckTasksWaitingTermination+0x54>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	4a0b      	ldr	r2, [pc, #44]	; (800c50c <prvCheckTasksWaitingTermination+0x54>)
 800c4de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c4e0:	4b0b      	ldr	r3, [pc, #44]	; (800c510 <prvCheckTasksWaitingTermination+0x58>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	4a0a      	ldr	r2, [pc, #40]	; (800c510 <prvCheckTasksWaitingTermination+0x58>)
 800c4e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c4ea:	f000 fed3 	bl	800d294 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f000 f810 	bl	800c514 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c4f4:	4b06      	ldr	r3, [pc, #24]	; (800c510 <prvCheckTasksWaitingTermination+0x58>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1e1      	bne.n	800c4c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c4fc:	bf00      	nop
 800c4fe:	bf00      	nop
 800c500:	3708      	adds	r7, #8
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	200019fc 	.word	0x200019fc
 800c50c:	20001a28 	.word	0x20001a28
 800c510:	20001a10 	.word	0x20001a10

0800c514 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	3354      	adds	r3, #84	; 0x54
 800c520:	4618      	mov	r0, r3
 800c522:	f001 ff29 	bl	800e378 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d108      	bne.n	800c542 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c534:	4618      	mov	r0, r3
 800c536:	f001 f86b 	bl	800d610 <vPortFree>
				vPortFree( pxTCB );
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f001 f868 	bl	800d610 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c540:	e018      	b.n	800c574 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d103      	bne.n	800c554 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f001 f85f 	bl	800d610 <vPortFree>
	}
 800c552:	e00f      	b.n	800c574 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c55a:	2b02      	cmp	r3, #2
 800c55c:	d00a      	beq.n	800c574 <prvDeleteTCB+0x60>
	__asm volatile
 800c55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
 800c56e:	60fb      	str	r3, [r7, #12]
}
 800c570:	bf00      	nop
 800c572:	e7fe      	b.n	800c572 <prvDeleteTCB+0x5e>
	}
 800c574:	bf00      	nop
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c57c:	b480      	push	{r7}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c582:	4b0c      	ldr	r3, [pc, #48]	; (800c5b4 <prvResetNextTaskUnblockTime+0x38>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d104      	bne.n	800c596 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c58c:	4b0a      	ldr	r3, [pc, #40]	; (800c5b8 <prvResetNextTaskUnblockTime+0x3c>)
 800c58e:	f04f 32ff 	mov.w	r2, #4294967295
 800c592:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c594:	e008      	b.n	800c5a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c596:	4b07      	ldr	r3, [pc, #28]	; (800c5b4 <prvResetNextTaskUnblockTime+0x38>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	4a04      	ldr	r2, [pc, #16]	; (800c5b8 <prvResetNextTaskUnblockTime+0x3c>)
 800c5a6:	6013      	str	r3, [r2, #0]
}
 800c5a8:	bf00      	nop
 800c5aa:	370c      	adds	r7, #12
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr
 800c5b4:	200019e0 	.word	0x200019e0
 800c5b8:	20001a48 	.word	0x20001a48

0800c5bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c5c2:	4b0b      	ldr	r3, [pc, #44]	; (800c5f0 <xTaskGetSchedulerState+0x34>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d102      	bne.n	800c5d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	607b      	str	r3, [r7, #4]
 800c5ce:	e008      	b.n	800c5e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5d0:	4b08      	ldr	r3, [pc, #32]	; (800c5f4 <xTaskGetSchedulerState+0x38>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d102      	bne.n	800c5de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c5d8:	2302      	movs	r3, #2
 800c5da:	607b      	str	r3, [r7, #4]
 800c5dc:	e001      	b.n	800c5e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c5e2:	687b      	ldr	r3, [r7, #4]
	}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	370c      	adds	r7, #12
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr
 800c5f0:	20001a34 	.word	0x20001a34
 800c5f4:	20001a50 	.word	0x20001a50

0800c5f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c604:	2300      	movs	r3, #0
 800c606:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d056      	beq.n	800c6bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c60e:	4b2e      	ldr	r3, [pc, #184]	; (800c6c8 <xTaskPriorityDisinherit+0xd0>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	693a      	ldr	r2, [r7, #16]
 800c614:	429a      	cmp	r2, r3
 800c616:	d00a      	beq.n	800c62e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61c:	f383 8811 	msr	BASEPRI, r3
 800c620:	f3bf 8f6f 	isb	sy
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	60fb      	str	r3, [r7, #12]
}
 800c62a:	bf00      	nop
 800c62c:	e7fe      	b.n	800c62c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c632:	2b00      	cmp	r3, #0
 800c634:	d10a      	bne.n	800c64c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63a:	f383 8811 	msr	BASEPRI, r3
 800c63e:	f3bf 8f6f 	isb	sy
 800c642:	f3bf 8f4f 	dsb	sy
 800c646:	60bb      	str	r3, [r7, #8]
}
 800c648:	bf00      	nop
 800c64a:	e7fe      	b.n	800c64a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c650:	1e5a      	subs	r2, r3, #1
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c65e:	429a      	cmp	r2, r3
 800c660:	d02c      	beq.n	800c6bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c666:	2b00      	cmp	r3, #0
 800c668:	d128      	bne.n	800c6bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	3304      	adds	r3, #4
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fe fb4e 	bl	800ad10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c680:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c68c:	4b0f      	ldr	r3, [pc, #60]	; (800c6cc <xTaskPriorityDisinherit+0xd4>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	429a      	cmp	r2, r3
 800c692:	d903      	bls.n	800c69c <xTaskPriorityDisinherit+0xa4>
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c698:	4a0c      	ldr	r2, [pc, #48]	; (800c6cc <xTaskPriorityDisinherit+0xd4>)
 800c69a:	6013      	str	r3, [r2, #0]
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	4413      	add	r3, r2
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	4a09      	ldr	r2, [pc, #36]	; (800c6d0 <xTaskPriorityDisinherit+0xd8>)
 800c6aa:	441a      	add	r2, r3
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	3304      	adds	r3, #4
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	4610      	mov	r0, r2
 800c6b4:	f7fe facf 	bl	800ac56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c6bc:	697b      	ldr	r3, [r7, #20]
	}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3718      	adds	r7, #24
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	20001554 	.word	0x20001554
 800c6cc:	20001a30 	.word	0x20001a30
 800c6d0:	20001558 	.word	0x20001558

0800c6d4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c6de:	f000 fda9 	bl	800d234 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c6e2:	4b20      	ldr	r3, [pc, #128]	; (800c764 <ulTaskNotifyTake+0x90>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d113      	bne.n	800c716 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c6ee:	4b1d      	ldr	r3, [pc, #116]	; (800c764 <ulTaskNotifyTake+0x90>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00b      	beq.n	800c716 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c6fe:	2101      	movs	r1, #1
 800c700:	6838      	ldr	r0, [r7, #0]
 800c702:	f000 f8c7 	bl	800c894 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c706:	4b18      	ldr	r3, [pc, #96]	; (800c768 <ulTaskNotifyTake+0x94>)
 800c708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c70c:	601a      	str	r2, [r3, #0]
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c716:	f000 fdbd 	bl	800d294 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c71a:	f000 fd8b 	bl	800d234 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c71e:	4b11      	ldr	r3, [pc, #68]	; (800c764 <ulTaskNotifyTake+0x90>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c726:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00e      	beq.n	800c74c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d005      	beq.n	800c740 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c734:	4b0b      	ldr	r3, [pc, #44]	; (800c764 <ulTaskNotifyTake+0x90>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2200      	movs	r2, #0
 800c73a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800c73e:	e005      	b.n	800c74c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c740:	4b08      	ldr	r3, [pc, #32]	; (800c764 <ulTaskNotifyTake+0x90>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	3a01      	subs	r2, #1
 800c748:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c74c:	4b05      	ldr	r3, [pc, #20]	; (800c764 <ulTaskNotifyTake+0x90>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	2200      	movs	r2, #0
 800c752:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 800c756:	f000 fd9d 	bl	800d294 <vPortExitCritical>

		return ulReturn;
 800c75a:	68fb      	ldr	r3, [r7, #12]
	}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3710      	adds	r7, #16
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	20001554 	.word	0x20001554
 800c768:	e000ed04 	.word	0xe000ed04

0800c76c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b08a      	sub	sp, #40	; 0x28
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d10a      	bne.n	800c792 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800c77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c780:	f383 8811 	msr	BASEPRI, r3
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	f3bf 8f4f 	dsb	sy
 800c78c:	61bb      	str	r3, [r7, #24]
}
 800c78e:	bf00      	nop
 800c790:	e7fe      	b.n	800c790 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c792:	f000 fe31 	bl	800d3f8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800c79a:	f3ef 8211 	mrs	r2, BASEPRI
 800c79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	617a      	str	r2, [r7, #20]
 800c7b0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c7b2:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7b4:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b8:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800c7bc:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c0:	2202      	movs	r2, #2
 800c7c2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800c7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c7cc:	1c5a      	adds	r2, r3, #1
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c7d4:	7ffb      	ldrb	r3, [r7, #31]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d146      	bne.n	800c868 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d00a      	beq.n	800c7f8 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	60fb      	str	r3, [r7, #12]
}
 800c7f4:	bf00      	nop
 800c7f6:	e7fe      	b.n	800c7f6 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7f8:	4b20      	ldr	r3, [pc, #128]	; (800c87c <vTaskNotifyGiveFromISR+0x110>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d11d      	bne.n	800c83c <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c802:	3304      	adds	r3, #4
 800c804:	4618      	mov	r0, r3
 800c806:	f7fe fa83 	bl	800ad10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c80e:	4b1c      	ldr	r3, [pc, #112]	; (800c880 <vTaskNotifyGiveFromISR+0x114>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	429a      	cmp	r2, r3
 800c814:	d903      	bls.n	800c81e <vTaskNotifyGiveFromISR+0xb2>
 800c816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81a:	4a19      	ldr	r2, [pc, #100]	; (800c880 <vTaskNotifyGiveFromISR+0x114>)
 800c81c:	6013      	str	r3, [r2, #0]
 800c81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c822:	4613      	mov	r3, r2
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	4413      	add	r3, r2
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	4a16      	ldr	r2, [pc, #88]	; (800c884 <vTaskNotifyGiveFromISR+0x118>)
 800c82c:	441a      	add	r2, r3
 800c82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c830:	3304      	adds	r3, #4
 800c832:	4619      	mov	r1, r3
 800c834:	4610      	mov	r0, r2
 800c836:	f7fe fa0e 	bl	800ac56 <vListInsertEnd>
 800c83a:	e005      	b.n	800c848 <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83e:	3318      	adds	r3, #24
 800c840:	4619      	mov	r1, r3
 800c842:	4811      	ldr	r0, [pc, #68]	; (800c888 <vTaskNotifyGiveFromISR+0x11c>)
 800c844:	f7fe fa07 	bl	800ac56 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c84c:	4b0f      	ldr	r3, [pc, #60]	; (800c88c <vTaskNotifyGiveFromISR+0x120>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c852:	429a      	cmp	r2, r3
 800c854:	d908      	bls.n	800c868 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d002      	beq.n	800c862 <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	2201      	movs	r2, #1
 800c860:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c862:	4b0b      	ldr	r3, [pc, #44]	; (800c890 <vTaskNotifyGiveFromISR+0x124>)
 800c864:	2201      	movs	r2, #1
 800c866:	601a      	str	r2, [r3, #0]
 800c868:	6a3b      	ldr	r3, [r7, #32]
 800c86a:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	f383 8811 	msr	BASEPRI, r3
}
 800c872:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800c874:	bf00      	nop
 800c876:	3728      	adds	r7, #40	; 0x28
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	20001a50 	.word	0x20001a50
 800c880:	20001a30 	.word	0x20001a30
 800c884:	20001558 	.word	0x20001558
 800c888:	200019e8 	.word	0x200019e8
 800c88c:	20001554 	.word	0x20001554
 800c890:	20001a3c 	.word	0x20001a3c

0800c894 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b084      	sub	sp, #16
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c89e:	4b21      	ldr	r3, [pc, #132]	; (800c924 <prvAddCurrentTaskToDelayedList+0x90>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8a4:	4b20      	ldr	r3, [pc, #128]	; (800c928 <prvAddCurrentTaskToDelayedList+0x94>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	3304      	adds	r3, #4
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7fe fa30 	bl	800ad10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8b6:	d10a      	bne.n	800c8ce <prvAddCurrentTaskToDelayedList+0x3a>
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d007      	beq.n	800c8ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c8be:	4b1a      	ldr	r3, [pc, #104]	; (800c928 <prvAddCurrentTaskToDelayedList+0x94>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	3304      	adds	r3, #4
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	4819      	ldr	r0, [pc, #100]	; (800c92c <prvAddCurrentTaskToDelayedList+0x98>)
 800c8c8:	f7fe f9c5 	bl	800ac56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c8cc:	e026      	b.n	800c91c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c8ce:	68fa      	ldr	r2, [r7, #12]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c8d6:	4b14      	ldr	r3, [pc, #80]	; (800c928 <prvAddCurrentTaskToDelayedList+0x94>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	68ba      	ldr	r2, [r7, #8]
 800c8dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c8de:	68ba      	ldr	r2, [r7, #8]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d209      	bcs.n	800c8fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c8e6:	4b12      	ldr	r3, [pc, #72]	; (800c930 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c8e8:	681a      	ldr	r2, [r3, #0]
 800c8ea:	4b0f      	ldr	r3, [pc, #60]	; (800c928 <prvAddCurrentTaskToDelayedList+0x94>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	3304      	adds	r3, #4
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	4610      	mov	r0, r2
 800c8f4:	f7fe f9d3 	bl	800ac9e <vListInsert>
}
 800c8f8:	e010      	b.n	800c91c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c8fa:	4b0e      	ldr	r3, [pc, #56]	; (800c934 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	4b0a      	ldr	r3, [pc, #40]	; (800c928 <prvAddCurrentTaskToDelayedList+0x94>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	3304      	adds	r3, #4
 800c904:	4619      	mov	r1, r3
 800c906:	4610      	mov	r0, r2
 800c908:	f7fe f9c9 	bl	800ac9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c90c:	4b0a      	ldr	r3, [pc, #40]	; (800c938 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	68ba      	ldr	r2, [r7, #8]
 800c912:	429a      	cmp	r2, r3
 800c914:	d202      	bcs.n	800c91c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c916:	4a08      	ldr	r2, [pc, #32]	; (800c938 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	6013      	str	r3, [r2, #0]
}
 800c91c:	bf00      	nop
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	20001a2c 	.word	0x20001a2c
 800c928:	20001554 	.word	0x20001554
 800c92c:	20001a14 	.word	0x20001a14
 800c930:	200019e4 	.word	0x200019e4
 800c934:	200019e0 	.word	0x200019e0
 800c938:	20001a48 	.word	0x20001a48

0800c93c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b08a      	sub	sp, #40	; 0x28
 800c940:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c942:	2300      	movs	r3, #0
 800c944:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c946:	f000 fb07 	bl	800cf58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c94a:	4b1c      	ldr	r3, [pc, #112]	; (800c9bc <xTimerCreateTimerTask+0x80>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d021      	beq.n	800c996 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c952:	2300      	movs	r3, #0
 800c954:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c956:	2300      	movs	r3, #0
 800c958:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c95a:	1d3a      	adds	r2, r7, #4
 800c95c:	f107 0108 	add.w	r1, r7, #8
 800c960:	f107 030c 	add.w	r3, r7, #12
 800c964:	4618      	mov	r0, r3
 800c966:	f7fe f92f 	bl	800abc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c96a:	6879      	ldr	r1, [r7, #4]
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	68fa      	ldr	r2, [r7, #12]
 800c970:	9202      	str	r2, [sp, #8]
 800c972:	9301      	str	r3, [sp, #4]
 800c974:	2302      	movs	r3, #2
 800c976:	9300      	str	r3, [sp, #0]
 800c978:	2300      	movs	r3, #0
 800c97a:	460a      	mov	r2, r1
 800c97c:	4910      	ldr	r1, [pc, #64]	; (800c9c0 <xTimerCreateTimerTask+0x84>)
 800c97e:	4811      	ldr	r0, [pc, #68]	; (800c9c4 <xTimerCreateTimerTask+0x88>)
 800c980:	f7fe fedc 	bl	800b73c <xTaskCreateStatic>
 800c984:	4603      	mov	r3, r0
 800c986:	4a10      	ldr	r2, [pc, #64]	; (800c9c8 <xTimerCreateTimerTask+0x8c>)
 800c988:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c98a:	4b0f      	ldr	r3, [pc, #60]	; (800c9c8 <xTimerCreateTimerTask+0x8c>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d001      	beq.n	800c996 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c992:	2301      	movs	r3, #1
 800c994:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d10a      	bne.n	800c9b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a0:	f383 8811 	msr	BASEPRI, r3
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	613b      	str	r3, [r7, #16]
}
 800c9ae:	bf00      	nop
 800c9b0:	e7fe      	b.n	800c9b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c9b2:	697b      	ldr	r3, [r7, #20]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3718      	adds	r7, #24
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	20001a84 	.word	0x20001a84
 800c9c0:	080106cc 	.word	0x080106cc
 800c9c4:	0800cb01 	.word	0x0800cb01
 800c9c8:	20001a88 	.word	0x20001a88

0800c9cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b08a      	sub	sp, #40	; 0x28
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	60f8      	str	r0, [r7, #12]
 800c9d4:	60b9      	str	r1, [r7, #8]
 800c9d6:	607a      	str	r2, [r7, #4]
 800c9d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d10a      	bne.n	800c9fa <xTimerGenericCommand+0x2e>
	__asm volatile
 800c9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e8:	f383 8811 	msr	BASEPRI, r3
 800c9ec:	f3bf 8f6f 	isb	sy
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	623b      	str	r3, [r7, #32]
}
 800c9f6:	bf00      	nop
 800c9f8:	e7fe      	b.n	800c9f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c9fa:	4b1a      	ldr	r3, [pc, #104]	; (800ca64 <xTimerGenericCommand+0x98>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d02a      	beq.n	800ca58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	2b05      	cmp	r3, #5
 800ca12:	dc18      	bgt.n	800ca46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca14:	f7ff fdd2 	bl	800c5bc <xTaskGetSchedulerState>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	2b02      	cmp	r3, #2
 800ca1c:	d109      	bne.n	800ca32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ca1e:	4b11      	ldr	r3, [pc, #68]	; (800ca64 <xTimerGenericCommand+0x98>)
 800ca20:	6818      	ldr	r0, [r3, #0]
 800ca22:	f107 0110 	add.w	r1, r7, #16
 800ca26:	2300      	movs	r3, #0
 800ca28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca2a:	f7fe fa9f 	bl	800af6c <xQueueGenericSend>
 800ca2e:	6278      	str	r0, [r7, #36]	; 0x24
 800ca30:	e012      	b.n	800ca58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ca32:	4b0c      	ldr	r3, [pc, #48]	; (800ca64 <xTimerGenericCommand+0x98>)
 800ca34:	6818      	ldr	r0, [r3, #0]
 800ca36:	f107 0110 	add.w	r1, r7, #16
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	f7fe fa95 	bl	800af6c <xQueueGenericSend>
 800ca42:	6278      	str	r0, [r7, #36]	; 0x24
 800ca44:	e008      	b.n	800ca58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ca46:	4b07      	ldr	r3, [pc, #28]	; (800ca64 <xTimerGenericCommand+0x98>)
 800ca48:	6818      	ldr	r0, [r3, #0]
 800ca4a:	f107 0110 	add.w	r1, r7, #16
 800ca4e:	2300      	movs	r3, #0
 800ca50:	683a      	ldr	r2, [r7, #0]
 800ca52:	f7fe fb89 	bl	800b168 <xQueueGenericSendFromISR>
 800ca56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ca58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3728      	adds	r7, #40	; 0x28
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	20001a84 	.word	0x20001a84

0800ca68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b088      	sub	sp, #32
 800ca6c:	af02      	add	r7, sp, #8
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca72:	4b22      	ldr	r3, [pc, #136]	; (800cafc <prvProcessExpiredTimer+0x94>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	3304      	adds	r3, #4
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fe f945 	bl	800ad10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca8c:	f003 0304 	and.w	r3, r3, #4
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d022      	beq.n	800cada <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	699a      	ldr	r2, [r3, #24]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	18d1      	adds	r1, r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	683a      	ldr	r2, [r7, #0]
 800caa0:	6978      	ldr	r0, [r7, #20]
 800caa2:	f000 f8d1 	bl	800cc48 <prvInsertTimerInActiveList>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d01f      	beq.n	800caec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800caac:	2300      	movs	r3, #0
 800caae:	9300      	str	r3, [sp, #0]
 800cab0:	2300      	movs	r3, #0
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	2100      	movs	r1, #0
 800cab6:	6978      	ldr	r0, [r7, #20]
 800cab8:	f7ff ff88 	bl	800c9cc <xTimerGenericCommand>
 800cabc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d113      	bne.n	800caec <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac8:	f383 8811 	msr	BASEPRI, r3
 800cacc:	f3bf 8f6f 	isb	sy
 800cad0:	f3bf 8f4f 	dsb	sy
 800cad4:	60fb      	str	r3, [r7, #12]
}
 800cad6:	bf00      	nop
 800cad8:	e7fe      	b.n	800cad8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cae0:	f023 0301 	bic.w	r3, r3, #1
 800cae4:	b2da      	uxtb	r2, r3
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	6a1b      	ldr	r3, [r3, #32]
 800caf0:	6978      	ldr	r0, [r7, #20]
 800caf2:	4798      	blx	r3
}
 800caf4:	bf00      	nop
 800caf6:	3718      	adds	r7, #24
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	20001a7c 	.word	0x20001a7c

0800cb00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b084      	sub	sp, #16
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb08:	f107 0308 	add.w	r3, r7, #8
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f000 f857 	bl	800cbc0 <prvGetNextExpireTime>
 800cb12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	4619      	mov	r1, r3
 800cb18:	68f8      	ldr	r0, [r7, #12]
 800cb1a:	f000 f803 	bl	800cb24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cb1e:	f000 f8d5 	bl	800cccc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb22:	e7f1      	b.n	800cb08 <prvTimerTask+0x8>

0800cb24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cb2e:	f7ff f861 	bl	800bbf4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb32:	f107 0308 	add.w	r3, r7, #8
 800cb36:	4618      	mov	r0, r3
 800cb38:	f000 f866 	bl	800cc08 <prvSampleTimeNow>
 800cb3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d130      	bne.n	800cba6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d10a      	bne.n	800cb60 <prvProcessTimerOrBlockTask+0x3c>
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d806      	bhi.n	800cb60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cb52:	f7ff f85d 	bl	800bc10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cb56:	68f9      	ldr	r1, [r7, #12]
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f7ff ff85 	bl	800ca68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cb5e:	e024      	b.n	800cbaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d008      	beq.n	800cb78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cb66:	4b13      	ldr	r3, [pc, #76]	; (800cbb4 <prvProcessTimerOrBlockTask+0x90>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d101      	bne.n	800cb74 <prvProcessTimerOrBlockTask+0x50>
 800cb70:	2301      	movs	r3, #1
 800cb72:	e000      	b.n	800cb76 <prvProcessTimerOrBlockTask+0x52>
 800cb74:	2300      	movs	r3, #0
 800cb76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cb78:	4b0f      	ldr	r3, [pc, #60]	; (800cbb8 <prvProcessTimerOrBlockTask+0x94>)
 800cb7a:	6818      	ldr	r0, [r3, #0]
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	1ad3      	subs	r3, r2, r3
 800cb82:	683a      	ldr	r2, [r7, #0]
 800cb84:	4619      	mov	r1, r3
 800cb86:	f7fe fda5 	bl	800b6d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cb8a:	f7ff f841 	bl	800bc10 <xTaskResumeAll>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d10a      	bne.n	800cbaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cb94:	4b09      	ldr	r3, [pc, #36]	; (800cbbc <prvProcessTimerOrBlockTask+0x98>)
 800cb96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb9a:	601a      	str	r2, [r3, #0]
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	f3bf 8f6f 	isb	sy
}
 800cba4:	e001      	b.n	800cbaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cba6:	f7ff f833 	bl	800bc10 <xTaskResumeAll>
}
 800cbaa:	bf00      	nop
 800cbac:	3710      	adds	r7, #16
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	20001a80 	.word	0x20001a80
 800cbb8:	20001a84 	.word	0x20001a84
 800cbbc:	e000ed04 	.word	0xe000ed04

0800cbc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b085      	sub	sp, #20
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cbc8:	4b0e      	ldr	r3, [pc, #56]	; (800cc04 <prvGetNextExpireTime+0x44>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d101      	bne.n	800cbd6 <prvGetNextExpireTime+0x16>
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	e000      	b.n	800cbd8 <prvGetNextExpireTime+0x18>
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d105      	bne.n	800cbf0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cbe4:	4b07      	ldr	r3, [pc, #28]	; (800cc04 <prvGetNextExpireTime+0x44>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	60fb      	str	r3, [r7, #12]
 800cbee:	e001      	b.n	800cbf4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3714      	adds	r7, #20
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	20001a7c 	.word	0x20001a7c

0800cc08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cc10:	f7ff f89c 	bl	800bd4c <xTaskGetTickCount>
 800cc14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cc16:	4b0b      	ldr	r3, [pc, #44]	; (800cc44 <prvSampleTimeNow+0x3c>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d205      	bcs.n	800cc2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cc20:	f000 f936 	bl	800ce90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2201      	movs	r2, #1
 800cc28:	601a      	str	r2, [r3, #0]
 800cc2a:	e002      	b.n	800cc32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cc32:	4a04      	ldr	r2, [pc, #16]	; (800cc44 <prvSampleTimeNow+0x3c>)
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cc38:	68fb      	ldr	r3, [r7, #12]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3710      	adds	r7, #16
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	20001a8c 	.word	0x20001a8c

0800cc48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b086      	sub	sp, #24
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	60b9      	str	r1, [r7, #8]
 800cc52:	607a      	str	r2, [r7, #4]
 800cc54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cc56:	2300      	movs	r3, #0
 800cc58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	68ba      	ldr	r2, [r7, #8]
 800cc5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cc66:	68ba      	ldr	r2, [r7, #8]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d812      	bhi.n	800cc94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	1ad2      	subs	r2, r2, r3
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	699b      	ldr	r3, [r3, #24]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d302      	bcc.n	800cc82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	617b      	str	r3, [r7, #20]
 800cc80:	e01b      	b.n	800ccba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cc82:	4b10      	ldr	r3, [pc, #64]	; (800ccc4 <prvInsertTimerInActiveList+0x7c>)
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	3304      	adds	r3, #4
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	4610      	mov	r0, r2
 800cc8e:	f7fe f806 	bl	800ac9e <vListInsert>
 800cc92:	e012      	b.n	800ccba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d206      	bcs.n	800ccaa <prvInsertTimerInActiveList+0x62>
 800cc9c:	68ba      	ldr	r2, [r7, #8]
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d302      	bcc.n	800ccaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cca4:	2301      	movs	r3, #1
 800cca6:	617b      	str	r3, [r7, #20]
 800cca8:	e007      	b.n	800ccba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ccaa:	4b07      	ldr	r3, [pc, #28]	; (800ccc8 <prvInsertTimerInActiveList+0x80>)
 800ccac:	681a      	ldr	r2, [r3, #0]
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	3304      	adds	r3, #4
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	4610      	mov	r0, r2
 800ccb6:	f7fd fff2 	bl	800ac9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ccba:	697b      	ldr	r3, [r7, #20]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3718      	adds	r7, #24
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}
 800ccc4:	20001a80 	.word	0x20001a80
 800ccc8:	20001a7c 	.word	0x20001a7c

0800cccc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b08e      	sub	sp, #56	; 0x38
 800ccd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ccd2:	e0ca      	b.n	800ce6a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	da18      	bge.n	800cd0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ccda:	1d3b      	adds	r3, r7, #4
 800ccdc:	3304      	adds	r3, #4
 800ccde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d10a      	bne.n	800ccfc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccea:	f383 8811 	msr	BASEPRI, r3
 800ccee:	f3bf 8f6f 	isb	sy
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	61fb      	str	r3, [r7, #28]
}
 800ccf8:	bf00      	nop
 800ccfa:	e7fe      	b.n	800ccfa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ccfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd02:	6850      	ldr	r0, [r2, #4]
 800cd04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd06:	6892      	ldr	r2, [r2, #8]
 800cd08:	4611      	mov	r1, r2
 800cd0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	f2c0 80ab 	blt.w	800ce6a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1a:	695b      	ldr	r3, [r3, #20]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d004      	beq.n	800cd2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd22:	3304      	adds	r3, #4
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7fd fff3 	bl	800ad10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd2a:	463b      	mov	r3, r7
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7ff ff6b 	bl	800cc08 <prvSampleTimeNow>
 800cd32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2b09      	cmp	r3, #9
 800cd38:	f200 8096 	bhi.w	800ce68 <prvProcessReceivedCommands+0x19c>
 800cd3c:	a201      	add	r2, pc, #4	; (adr r2, 800cd44 <prvProcessReceivedCommands+0x78>)
 800cd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd42:	bf00      	nop
 800cd44:	0800cd6d 	.word	0x0800cd6d
 800cd48:	0800cd6d 	.word	0x0800cd6d
 800cd4c:	0800cd6d 	.word	0x0800cd6d
 800cd50:	0800cde1 	.word	0x0800cde1
 800cd54:	0800cdf5 	.word	0x0800cdf5
 800cd58:	0800ce3f 	.word	0x0800ce3f
 800cd5c:	0800cd6d 	.word	0x0800cd6d
 800cd60:	0800cd6d 	.word	0x0800cd6d
 800cd64:	0800cde1 	.word	0x0800cde1
 800cd68:	0800cdf5 	.word	0x0800cdf5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd72:	f043 0301 	orr.w	r3, r3, #1
 800cd76:	b2da      	uxtb	r2, r3
 800cd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cd7e:	68ba      	ldr	r2, [r7, #8]
 800cd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd82:	699b      	ldr	r3, [r3, #24]
 800cd84:	18d1      	adds	r1, r2, r3
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd8c:	f7ff ff5c 	bl	800cc48 <prvInsertTimerInActiveList>
 800cd90:	4603      	mov	r3, r0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d069      	beq.n	800ce6a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd98:	6a1b      	ldr	r3, [r3, #32]
 800cd9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cda4:	f003 0304 	and.w	r3, r3, #4
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d05e      	beq.n	800ce6a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cdac:	68ba      	ldr	r2, [r7, #8]
 800cdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb0:	699b      	ldr	r3, [r3, #24]
 800cdb2:	441a      	add	r2, r3
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	9300      	str	r3, [sp, #0]
 800cdb8:	2300      	movs	r3, #0
 800cdba:	2100      	movs	r1, #0
 800cdbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdbe:	f7ff fe05 	bl	800c9cc <xTimerGenericCommand>
 800cdc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cdc4:	6a3b      	ldr	r3, [r7, #32]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d14f      	bne.n	800ce6a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdce:	f383 8811 	msr	BASEPRI, r3
 800cdd2:	f3bf 8f6f 	isb	sy
 800cdd6:	f3bf 8f4f 	dsb	sy
 800cdda:	61bb      	str	r3, [r7, #24]
}
 800cddc:	bf00      	nop
 800cdde:	e7fe      	b.n	800cdde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cde6:	f023 0301 	bic.w	r3, r3, #1
 800cdea:	b2da      	uxtb	r2, r3
 800cdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cdf2:	e03a      	b.n	800ce6a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdfa:	f043 0301 	orr.w	r3, r3, #1
 800cdfe:	b2da      	uxtb	r2, r3
 800ce00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ce06:	68ba      	ldr	r2, [r7, #8]
 800ce08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ce0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0e:	699b      	ldr	r3, [r3, #24]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d10a      	bne.n	800ce2a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ce14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce18:	f383 8811 	msr	BASEPRI, r3
 800ce1c:	f3bf 8f6f 	isb	sy
 800ce20:	f3bf 8f4f 	dsb	sy
 800ce24:	617b      	str	r3, [r7, #20]
}
 800ce26:	bf00      	nop
 800ce28:	e7fe      	b.n	800ce28 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ce2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2c:	699a      	ldr	r2, [r3, #24]
 800ce2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce30:	18d1      	adds	r1, r2, r3
 800ce32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce38:	f7ff ff06 	bl	800cc48 <prvInsertTimerInActiveList>
					break;
 800ce3c:	e015      	b.n	800ce6a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ce3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce44:	f003 0302 	and.w	r3, r3, #2
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d103      	bne.n	800ce54 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ce4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce4e:	f000 fbdf 	bl	800d610 <vPortFree>
 800ce52:	e00a      	b.n	800ce6a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce5a:	f023 0301 	bic.w	r3, r3, #1
 800ce5e:	b2da      	uxtb	r2, r3
 800ce60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ce66:	e000      	b.n	800ce6a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800ce68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ce6a:	4b08      	ldr	r3, [pc, #32]	; (800ce8c <prvProcessReceivedCommands+0x1c0>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	1d39      	adds	r1, r7, #4
 800ce70:	2200      	movs	r2, #0
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7fe fa14 	bl	800b2a0 <xQueueReceive>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	f47f af2a 	bne.w	800ccd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ce80:	bf00      	nop
 800ce82:	bf00      	nop
 800ce84:	3730      	adds	r7, #48	; 0x30
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	20001a84 	.word	0x20001a84

0800ce90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b088      	sub	sp, #32
 800ce94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ce96:	e048      	b.n	800cf2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce98:	4b2d      	ldr	r3, [pc, #180]	; (800cf50 <prvSwitchTimerLists+0xc0>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cea2:	4b2b      	ldr	r3, [pc, #172]	; (800cf50 <prvSwitchTimerLists+0xc0>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	68db      	ldr	r3, [r3, #12]
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	3304      	adds	r3, #4
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7fd ff2d 	bl	800ad10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	6a1b      	ldr	r3, [r3, #32]
 800ceba:	68f8      	ldr	r0, [r7, #12]
 800cebc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cec4:	f003 0304 	and.w	r3, r3, #4
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d02e      	beq.n	800cf2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	699b      	ldr	r3, [r3, #24]
 800ced0:	693a      	ldr	r2, [r7, #16]
 800ced2:	4413      	add	r3, r2
 800ced4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ced6:	68ba      	ldr	r2, [r7, #8]
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d90e      	bls.n	800cefc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	68ba      	ldr	r2, [r7, #8]
 800cee2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	68fa      	ldr	r2, [r7, #12]
 800cee8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ceea:	4b19      	ldr	r3, [pc, #100]	; (800cf50 <prvSwitchTimerLists+0xc0>)
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	3304      	adds	r3, #4
 800cef2:	4619      	mov	r1, r3
 800cef4:	4610      	mov	r0, r2
 800cef6:	f7fd fed2 	bl	800ac9e <vListInsert>
 800cefa:	e016      	b.n	800cf2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cefc:	2300      	movs	r3, #0
 800cefe:	9300      	str	r3, [sp, #0]
 800cf00:	2300      	movs	r3, #0
 800cf02:	693a      	ldr	r2, [r7, #16]
 800cf04:	2100      	movs	r1, #0
 800cf06:	68f8      	ldr	r0, [r7, #12]
 800cf08:	f7ff fd60 	bl	800c9cc <xTimerGenericCommand>
 800cf0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d10a      	bne.n	800cf2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf18:	f383 8811 	msr	BASEPRI, r3
 800cf1c:	f3bf 8f6f 	isb	sy
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	603b      	str	r3, [r7, #0]
}
 800cf26:	bf00      	nop
 800cf28:	e7fe      	b.n	800cf28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf2a:	4b09      	ldr	r3, [pc, #36]	; (800cf50 <prvSwitchTimerLists+0xc0>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d1b1      	bne.n	800ce98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cf34:	4b06      	ldr	r3, [pc, #24]	; (800cf50 <prvSwitchTimerLists+0xc0>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cf3a:	4b06      	ldr	r3, [pc, #24]	; (800cf54 <prvSwitchTimerLists+0xc4>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a04      	ldr	r2, [pc, #16]	; (800cf50 <prvSwitchTimerLists+0xc0>)
 800cf40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cf42:	4a04      	ldr	r2, [pc, #16]	; (800cf54 <prvSwitchTimerLists+0xc4>)
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	6013      	str	r3, [r2, #0]
}
 800cf48:	bf00      	nop
 800cf4a:	3718      	adds	r7, #24
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	20001a7c 	.word	0x20001a7c
 800cf54:	20001a80 	.word	0x20001a80

0800cf58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cf5e:	f000 f969 	bl	800d234 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cf62:	4b15      	ldr	r3, [pc, #84]	; (800cfb8 <prvCheckForValidListAndQueue+0x60>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d120      	bne.n	800cfac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cf6a:	4814      	ldr	r0, [pc, #80]	; (800cfbc <prvCheckForValidListAndQueue+0x64>)
 800cf6c:	f7fd fe46 	bl	800abfc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cf70:	4813      	ldr	r0, [pc, #76]	; (800cfc0 <prvCheckForValidListAndQueue+0x68>)
 800cf72:	f7fd fe43 	bl	800abfc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cf76:	4b13      	ldr	r3, [pc, #76]	; (800cfc4 <prvCheckForValidListAndQueue+0x6c>)
 800cf78:	4a10      	ldr	r2, [pc, #64]	; (800cfbc <prvCheckForValidListAndQueue+0x64>)
 800cf7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cf7c:	4b12      	ldr	r3, [pc, #72]	; (800cfc8 <prvCheckForValidListAndQueue+0x70>)
 800cf7e:	4a10      	ldr	r2, [pc, #64]	; (800cfc0 <prvCheckForValidListAndQueue+0x68>)
 800cf80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cf82:	2300      	movs	r3, #0
 800cf84:	9300      	str	r3, [sp, #0]
 800cf86:	4b11      	ldr	r3, [pc, #68]	; (800cfcc <prvCheckForValidListAndQueue+0x74>)
 800cf88:	4a11      	ldr	r2, [pc, #68]	; (800cfd0 <prvCheckForValidListAndQueue+0x78>)
 800cf8a:	2110      	movs	r1, #16
 800cf8c:	200a      	movs	r0, #10
 800cf8e:	f7fd ff51 	bl	800ae34 <xQueueGenericCreateStatic>
 800cf92:	4603      	mov	r3, r0
 800cf94:	4a08      	ldr	r2, [pc, #32]	; (800cfb8 <prvCheckForValidListAndQueue+0x60>)
 800cf96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cf98:	4b07      	ldr	r3, [pc, #28]	; (800cfb8 <prvCheckForValidListAndQueue+0x60>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d005      	beq.n	800cfac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cfa0:	4b05      	ldr	r3, [pc, #20]	; (800cfb8 <prvCheckForValidListAndQueue+0x60>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	490b      	ldr	r1, [pc, #44]	; (800cfd4 <prvCheckForValidListAndQueue+0x7c>)
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7fe fb6a 	bl	800b680 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cfac:	f000 f972 	bl	800d294 <vPortExitCritical>
}
 800cfb0:	bf00      	nop
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	20001a84 	.word	0x20001a84
 800cfbc:	20001a54 	.word	0x20001a54
 800cfc0:	20001a68 	.word	0x20001a68
 800cfc4:	20001a7c 	.word	0x20001a7c
 800cfc8:	20001a80 	.word	0x20001a80
 800cfcc:	20001b30 	.word	0x20001b30
 800cfd0:	20001a90 	.word	0x20001a90
 800cfd4:	080106d4 	.word	0x080106d4

0800cfd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	3b04      	subs	r3, #4
 800cfe8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	3b04      	subs	r3, #4
 800cff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	f023 0201 	bic.w	r2, r3, #1
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	3b04      	subs	r3, #4
 800d006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d008:	4a0c      	ldr	r2, [pc, #48]	; (800d03c <pxPortInitialiseStack+0x64>)
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	3b14      	subs	r3, #20
 800d012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	3b04      	subs	r3, #4
 800d01e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f06f 0202 	mvn.w	r2, #2
 800d026:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	3b20      	subs	r3, #32
 800d02c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d02e:	68fb      	ldr	r3, [r7, #12]
}
 800d030:	4618      	mov	r0, r3
 800d032:	3714      	adds	r7, #20
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr
 800d03c:	0800d041 	.word	0x0800d041

0800d040 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d040:	b480      	push	{r7}
 800d042:	b085      	sub	sp, #20
 800d044:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d046:	2300      	movs	r3, #0
 800d048:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d04a:	4b12      	ldr	r3, [pc, #72]	; (800d094 <prvTaskExitError+0x54>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d052:	d00a      	beq.n	800d06a <prvTaskExitError+0x2a>
	__asm volatile
 800d054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d058:	f383 8811 	msr	BASEPRI, r3
 800d05c:	f3bf 8f6f 	isb	sy
 800d060:	f3bf 8f4f 	dsb	sy
 800d064:	60fb      	str	r3, [r7, #12]
}
 800d066:	bf00      	nop
 800d068:	e7fe      	b.n	800d068 <prvTaskExitError+0x28>
	__asm volatile
 800d06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06e:	f383 8811 	msr	BASEPRI, r3
 800d072:	f3bf 8f6f 	isb	sy
 800d076:	f3bf 8f4f 	dsb	sy
 800d07a:	60bb      	str	r3, [r7, #8]
}
 800d07c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d07e:	bf00      	nop
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d0fc      	beq.n	800d080 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d086:	bf00      	nop
 800d088:	bf00      	nop
 800d08a:	3714      	adds	r7, #20
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr
 800d094:	20000084 	.word	0x20000084
	...

0800d0a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d0a0:	4b07      	ldr	r3, [pc, #28]	; (800d0c0 <pxCurrentTCBConst2>)
 800d0a2:	6819      	ldr	r1, [r3, #0]
 800d0a4:	6808      	ldr	r0, [r1, #0]
 800d0a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0aa:	f380 8809 	msr	PSP, r0
 800d0ae:	f3bf 8f6f 	isb	sy
 800d0b2:	f04f 0000 	mov.w	r0, #0
 800d0b6:	f380 8811 	msr	BASEPRI, r0
 800d0ba:	4770      	bx	lr
 800d0bc:	f3af 8000 	nop.w

0800d0c0 <pxCurrentTCBConst2>:
 800d0c0:	20001554 	.word	0x20001554
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d0c4:	bf00      	nop
 800d0c6:	bf00      	nop

0800d0c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d0c8:	4808      	ldr	r0, [pc, #32]	; (800d0ec <prvPortStartFirstTask+0x24>)
 800d0ca:	6800      	ldr	r0, [r0, #0]
 800d0cc:	6800      	ldr	r0, [r0, #0]
 800d0ce:	f380 8808 	msr	MSP, r0
 800d0d2:	f04f 0000 	mov.w	r0, #0
 800d0d6:	f380 8814 	msr	CONTROL, r0
 800d0da:	b662      	cpsie	i
 800d0dc:	b661      	cpsie	f
 800d0de:	f3bf 8f4f 	dsb	sy
 800d0e2:	f3bf 8f6f 	isb	sy
 800d0e6:	df00      	svc	0
 800d0e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d0ea:	bf00      	nop
 800d0ec:	e000ed08 	.word	0xe000ed08

0800d0f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b086      	sub	sp, #24
 800d0f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d0f6:	4b46      	ldr	r3, [pc, #280]	; (800d210 <xPortStartScheduler+0x120>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	4a46      	ldr	r2, [pc, #280]	; (800d214 <xPortStartScheduler+0x124>)
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	d10a      	bne.n	800d116 <xPortStartScheduler+0x26>
	__asm volatile
 800d100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d104:	f383 8811 	msr	BASEPRI, r3
 800d108:	f3bf 8f6f 	isb	sy
 800d10c:	f3bf 8f4f 	dsb	sy
 800d110:	613b      	str	r3, [r7, #16]
}
 800d112:	bf00      	nop
 800d114:	e7fe      	b.n	800d114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d116:	4b3e      	ldr	r3, [pc, #248]	; (800d210 <xPortStartScheduler+0x120>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4a3f      	ldr	r2, [pc, #252]	; (800d218 <xPortStartScheduler+0x128>)
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d10a      	bne.n	800d136 <xPortStartScheduler+0x46>
	__asm volatile
 800d120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d124:	f383 8811 	msr	BASEPRI, r3
 800d128:	f3bf 8f6f 	isb	sy
 800d12c:	f3bf 8f4f 	dsb	sy
 800d130:	60fb      	str	r3, [r7, #12]
}
 800d132:	bf00      	nop
 800d134:	e7fe      	b.n	800d134 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d136:	4b39      	ldr	r3, [pc, #228]	; (800d21c <xPortStartScheduler+0x12c>)
 800d138:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	22ff      	movs	r2, #255	; 0xff
 800d146:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d150:	78fb      	ldrb	r3, [r7, #3]
 800d152:	b2db      	uxtb	r3, r3
 800d154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d158:	b2da      	uxtb	r2, r3
 800d15a:	4b31      	ldr	r3, [pc, #196]	; (800d220 <xPortStartScheduler+0x130>)
 800d15c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d15e:	4b31      	ldr	r3, [pc, #196]	; (800d224 <xPortStartScheduler+0x134>)
 800d160:	2207      	movs	r2, #7
 800d162:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d164:	e009      	b.n	800d17a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d166:	4b2f      	ldr	r3, [pc, #188]	; (800d224 <xPortStartScheduler+0x134>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	3b01      	subs	r3, #1
 800d16c:	4a2d      	ldr	r2, [pc, #180]	; (800d224 <xPortStartScheduler+0x134>)
 800d16e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d170:	78fb      	ldrb	r3, [r7, #3]
 800d172:	b2db      	uxtb	r3, r3
 800d174:	005b      	lsls	r3, r3, #1
 800d176:	b2db      	uxtb	r3, r3
 800d178:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d17a:	78fb      	ldrb	r3, [r7, #3]
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d182:	2b80      	cmp	r3, #128	; 0x80
 800d184:	d0ef      	beq.n	800d166 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d186:	4b27      	ldr	r3, [pc, #156]	; (800d224 <xPortStartScheduler+0x134>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f1c3 0307 	rsb	r3, r3, #7
 800d18e:	2b04      	cmp	r3, #4
 800d190:	d00a      	beq.n	800d1a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d196:	f383 8811 	msr	BASEPRI, r3
 800d19a:	f3bf 8f6f 	isb	sy
 800d19e:	f3bf 8f4f 	dsb	sy
 800d1a2:	60bb      	str	r3, [r7, #8]
}
 800d1a4:	bf00      	nop
 800d1a6:	e7fe      	b.n	800d1a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d1a8:	4b1e      	ldr	r3, [pc, #120]	; (800d224 <xPortStartScheduler+0x134>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	021b      	lsls	r3, r3, #8
 800d1ae:	4a1d      	ldr	r2, [pc, #116]	; (800d224 <xPortStartScheduler+0x134>)
 800d1b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d1b2:	4b1c      	ldr	r3, [pc, #112]	; (800d224 <xPortStartScheduler+0x134>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d1ba:	4a1a      	ldr	r2, [pc, #104]	; (800d224 <xPortStartScheduler+0x134>)
 800d1bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	b2da      	uxtb	r2, r3
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d1c6:	4b18      	ldr	r3, [pc, #96]	; (800d228 <xPortStartScheduler+0x138>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4a17      	ldr	r2, [pc, #92]	; (800d228 <xPortStartScheduler+0x138>)
 800d1cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d1d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d1d2:	4b15      	ldr	r3, [pc, #84]	; (800d228 <xPortStartScheduler+0x138>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	4a14      	ldr	r2, [pc, #80]	; (800d228 <xPortStartScheduler+0x138>)
 800d1d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d1dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d1de:	f000 f8dd 	bl	800d39c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d1e2:	4b12      	ldr	r3, [pc, #72]	; (800d22c <xPortStartScheduler+0x13c>)
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d1e8:	f000 f8fc 	bl	800d3e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d1ec:	4b10      	ldr	r3, [pc, #64]	; (800d230 <xPortStartScheduler+0x140>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4a0f      	ldr	r2, [pc, #60]	; (800d230 <xPortStartScheduler+0x140>)
 800d1f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d1f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d1f8:	f7ff ff66 	bl	800d0c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d1fc:	f7fe ff68 	bl	800c0d0 <vTaskSwitchContext>
	prvTaskExitError();
 800d200:	f7ff ff1e 	bl	800d040 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d204:	2300      	movs	r3, #0
}
 800d206:	4618      	mov	r0, r3
 800d208:	3718      	adds	r7, #24
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	e000ed00 	.word	0xe000ed00
 800d214:	410fc271 	.word	0x410fc271
 800d218:	410fc270 	.word	0x410fc270
 800d21c:	e000e400 	.word	0xe000e400
 800d220:	20001b80 	.word	0x20001b80
 800d224:	20001b84 	.word	0x20001b84
 800d228:	e000ed20 	.word	0xe000ed20
 800d22c:	20000084 	.word	0x20000084
 800d230:	e000ef34 	.word	0xe000ef34

0800d234 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
	__asm volatile
 800d23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23e:	f383 8811 	msr	BASEPRI, r3
 800d242:	f3bf 8f6f 	isb	sy
 800d246:	f3bf 8f4f 	dsb	sy
 800d24a:	607b      	str	r3, [r7, #4]
}
 800d24c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d24e:	4b0f      	ldr	r3, [pc, #60]	; (800d28c <vPortEnterCritical+0x58>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	3301      	adds	r3, #1
 800d254:	4a0d      	ldr	r2, [pc, #52]	; (800d28c <vPortEnterCritical+0x58>)
 800d256:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d258:	4b0c      	ldr	r3, [pc, #48]	; (800d28c <vPortEnterCritical+0x58>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d10f      	bne.n	800d280 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d260:	4b0b      	ldr	r3, [pc, #44]	; (800d290 <vPortEnterCritical+0x5c>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	b2db      	uxtb	r3, r3
 800d266:	2b00      	cmp	r3, #0
 800d268:	d00a      	beq.n	800d280 <vPortEnterCritical+0x4c>
	__asm volatile
 800d26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26e:	f383 8811 	msr	BASEPRI, r3
 800d272:	f3bf 8f6f 	isb	sy
 800d276:	f3bf 8f4f 	dsb	sy
 800d27a:	603b      	str	r3, [r7, #0]
}
 800d27c:	bf00      	nop
 800d27e:	e7fe      	b.n	800d27e <vPortEnterCritical+0x4a>
	}
}
 800d280:	bf00      	nop
 800d282:	370c      	adds	r7, #12
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr
 800d28c:	20000084 	.word	0x20000084
 800d290:	e000ed04 	.word	0xe000ed04

0800d294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d29a:	4b12      	ldr	r3, [pc, #72]	; (800d2e4 <vPortExitCritical+0x50>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d10a      	bne.n	800d2b8 <vPortExitCritical+0x24>
	__asm volatile
 800d2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a6:	f383 8811 	msr	BASEPRI, r3
 800d2aa:	f3bf 8f6f 	isb	sy
 800d2ae:	f3bf 8f4f 	dsb	sy
 800d2b2:	607b      	str	r3, [r7, #4]
}
 800d2b4:	bf00      	nop
 800d2b6:	e7fe      	b.n	800d2b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d2b8:	4b0a      	ldr	r3, [pc, #40]	; (800d2e4 <vPortExitCritical+0x50>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	3b01      	subs	r3, #1
 800d2be:	4a09      	ldr	r2, [pc, #36]	; (800d2e4 <vPortExitCritical+0x50>)
 800d2c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d2c2:	4b08      	ldr	r3, [pc, #32]	; (800d2e4 <vPortExitCritical+0x50>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d105      	bne.n	800d2d6 <vPortExitCritical+0x42>
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	f383 8811 	msr	BASEPRI, r3
}
 800d2d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d2d6:	bf00      	nop
 800d2d8:	370c      	adds	r7, #12
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	20000084 	.word	0x20000084
	...

0800d2f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d2f0:	f3ef 8009 	mrs	r0, PSP
 800d2f4:	f3bf 8f6f 	isb	sy
 800d2f8:	4b15      	ldr	r3, [pc, #84]	; (800d350 <pxCurrentTCBConst>)
 800d2fa:	681a      	ldr	r2, [r3, #0]
 800d2fc:	f01e 0f10 	tst.w	lr, #16
 800d300:	bf08      	it	eq
 800d302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d30a:	6010      	str	r0, [r2, #0]
 800d30c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d310:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d314:	f380 8811 	msr	BASEPRI, r0
 800d318:	f3bf 8f4f 	dsb	sy
 800d31c:	f3bf 8f6f 	isb	sy
 800d320:	f7fe fed6 	bl	800c0d0 <vTaskSwitchContext>
 800d324:	f04f 0000 	mov.w	r0, #0
 800d328:	f380 8811 	msr	BASEPRI, r0
 800d32c:	bc09      	pop	{r0, r3}
 800d32e:	6819      	ldr	r1, [r3, #0]
 800d330:	6808      	ldr	r0, [r1, #0]
 800d332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d336:	f01e 0f10 	tst.w	lr, #16
 800d33a:	bf08      	it	eq
 800d33c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d340:	f380 8809 	msr	PSP, r0
 800d344:	f3bf 8f6f 	isb	sy
 800d348:	4770      	bx	lr
 800d34a:	bf00      	nop
 800d34c:	f3af 8000 	nop.w

0800d350 <pxCurrentTCBConst>:
 800d350:	20001554 	.word	0x20001554
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d354:	bf00      	nop
 800d356:	bf00      	nop

0800d358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
	__asm volatile
 800d35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d362:	f383 8811 	msr	BASEPRI, r3
 800d366:	f3bf 8f6f 	isb	sy
 800d36a:	f3bf 8f4f 	dsb	sy
 800d36e:	607b      	str	r3, [r7, #4]
}
 800d370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d372:	f7fe fdf3 	bl	800bf5c <xTaskIncrementTick>
 800d376:	4603      	mov	r3, r0
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d003      	beq.n	800d384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d37c:	4b06      	ldr	r3, [pc, #24]	; (800d398 <xPortSysTickHandler+0x40>)
 800d37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d382:	601a      	str	r2, [r3, #0]
 800d384:	2300      	movs	r3, #0
 800d386:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	f383 8811 	msr	BASEPRI, r3
}
 800d38e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d390:	bf00      	nop
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}
 800d398:	e000ed04 	.word	0xe000ed04

0800d39c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d39c:	b480      	push	{r7}
 800d39e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d3a0:	4b0b      	ldr	r3, [pc, #44]	; (800d3d0 <vPortSetupTimerInterrupt+0x34>)
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d3a6:	4b0b      	ldr	r3, [pc, #44]	; (800d3d4 <vPortSetupTimerInterrupt+0x38>)
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d3ac:	4b0a      	ldr	r3, [pc, #40]	; (800d3d8 <vPortSetupTimerInterrupt+0x3c>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4a0a      	ldr	r2, [pc, #40]	; (800d3dc <vPortSetupTimerInterrupt+0x40>)
 800d3b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d3b6:	099b      	lsrs	r3, r3, #6
 800d3b8:	4a09      	ldr	r2, [pc, #36]	; (800d3e0 <vPortSetupTimerInterrupt+0x44>)
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d3be:	4b04      	ldr	r3, [pc, #16]	; (800d3d0 <vPortSetupTimerInterrupt+0x34>)
 800d3c0:	2207      	movs	r2, #7
 800d3c2:	601a      	str	r2, [r3, #0]
}
 800d3c4:	bf00      	nop
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3cc:	4770      	bx	lr
 800d3ce:	bf00      	nop
 800d3d0:	e000e010 	.word	0xe000e010
 800d3d4:	e000e018 	.word	0xe000e018
 800d3d8:	20000078 	.word	0x20000078
 800d3dc:	10624dd3 	.word	0x10624dd3
 800d3e0:	e000e014 	.word	0xe000e014

0800d3e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d3e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d3f4 <vPortEnableVFP+0x10>
 800d3e8:	6801      	ldr	r1, [r0, #0]
 800d3ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d3ee:	6001      	str	r1, [r0, #0]
 800d3f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d3f2:	bf00      	nop
 800d3f4:	e000ed88 	.word	0xe000ed88

0800d3f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d3fe:	f3ef 8305 	mrs	r3, IPSR
 800d402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2b0f      	cmp	r3, #15
 800d408:	d914      	bls.n	800d434 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d40a:	4a17      	ldr	r2, [pc, #92]	; (800d468 <vPortValidateInterruptPriority+0x70>)
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	4413      	add	r3, r2
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d414:	4b15      	ldr	r3, [pc, #84]	; (800d46c <vPortValidateInterruptPriority+0x74>)
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	7afa      	ldrb	r2, [r7, #11]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d20a      	bcs.n	800d434 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d422:	f383 8811 	msr	BASEPRI, r3
 800d426:	f3bf 8f6f 	isb	sy
 800d42a:	f3bf 8f4f 	dsb	sy
 800d42e:	607b      	str	r3, [r7, #4]
}
 800d430:	bf00      	nop
 800d432:	e7fe      	b.n	800d432 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d434:	4b0e      	ldr	r3, [pc, #56]	; (800d470 <vPortValidateInterruptPriority+0x78>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d43c:	4b0d      	ldr	r3, [pc, #52]	; (800d474 <vPortValidateInterruptPriority+0x7c>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	429a      	cmp	r2, r3
 800d442:	d90a      	bls.n	800d45a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d448:	f383 8811 	msr	BASEPRI, r3
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	603b      	str	r3, [r7, #0]
}
 800d456:	bf00      	nop
 800d458:	e7fe      	b.n	800d458 <vPortValidateInterruptPriority+0x60>
	}
 800d45a:	bf00      	nop
 800d45c:	3714      	adds	r7, #20
 800d45e:	46bd      	mov	sp, r7
 800d460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d464:	4770      	bx	lr
 800d466:	bf00      	nop
 800d468:	e000e3f0 	.word	0xe000e3f0
 800d46c:	20001b80 	.word	0x20001b80
 800d470:	e000ed0c 	.word	0xe000ed0c
 800d474:	20001b84 	.word	0x20001b84

0800d478 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b08a      	sub	sp, #40	; 0x28
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d480:	2300      	movs	r3, #0
 800d482:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d484:	f7fe fbb6 	bl	800bbf4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d488:	4b5b      	ldr	r3, [pc, #364]	; (800d5f8 <pvPortMalloc+0x180>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d101      	bne.n	800d494 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d490:	f000 f920 	bl	800d6d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d494:	4b59      	ldr	r3, [pc, #356]	; (800d5fc <pvPortMalloc+0x184>)
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	4013      	ands	r3, r2
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f040 8093 	bne.w	800d5c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d01d      	beq.n	800d4e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d4a8:	2208      	movs	r2, #8
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f003 0307 	and.w	r3, r3, #7
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d014      	beq.n	800d4e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f023 0307 	bic.w	r3, r3, #7
 800d4c0:	3308      	adds	r3, #8
 800d4c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f003 0307 	and.w	r3, r3, #7
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d00a      	beq.n	800d4e4 <pvPortMalloc+0x6c>
	__asm volatile
 800d4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d2:	f383 8811 	msr	BASEPRI, r3
 800d4d6:	f3bf 8f6f 	isb	sy
 800d4da:	f3bf 8f4f 	dsb	sy
 800d4de:	617b      	str	r3, [r7, #20]
}
 800d4e0:	bf00      	nop
 800d4e2:	e7fe      	b.n	800d4e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d06e      	beq.n	800d5c8 <pvPortMalloc+0x150>
 800d4ea:	4b45      	ldr	r3, [pc, #276]	; (800d600 <pvPortMalloc+0x188>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d869      	bhi.n	800d5c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d4f4:	4b43      	ldr	r3, [pc, #268]	; (800d604 <pvPortMalloc+0x18c>)
 800d4f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d4f8:	4b42      	ldr	r3, [pc, #264]	; (800d604 <pvPortMalloc+0x18c>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d4fe:	e004      	b.n	800d50a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d502:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	687a      	ldr	r2, [r7, #4]
 800d510:	429a      	cmp	r2, r3
 800d512:	d903      	bls.n	800d51c <pvPortMalloc+0xa4>
 800d514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d1f1      	bne.n	800d500 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d51c:	4b36      	ldr	r3, [pc, #216]	; (800d5f8 <pvPortMalloc+0x180>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d522:	429a      	cmp	r2, r3
 800d524:	d050      	beq.n	800d5c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d526:	6a3b      	ldr	r3, [r7, #32]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	2208      	movs	r2, #8
 800d52c:	4413      	add	r3, r2
 800d52e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d532:	681a      	ldr	r2, [r3, #0]
 800d534:	6a3b      	ldr	r3, [r7, #32]
 800d536:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53a:	685a      	ldr	r2, [r3, #4]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	1ad2      	subs	r2, r2, r3
 800d540:	2308      	movs	r3, #8
 800d542:	005b      	lsls	r3, r3, #1
 800d544:	429a      	cmp	r2, r3
 800d546:	d91f      	bls.n	800d588 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	4413      	add	r3, r2
 800d54e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d550:	69bb      	ldr	r3, [r7, #24]
 800d552:	f003 0307 	and.w	r3, r3, #7
 800d556:	2b00      	cmp	r3, #0
 800d558:	d00a      	beq.n	800d570 <pvPortMalloc+0xf8>
	__asm volatile
 800d55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d55e:	f383 8811 	msr	BASEPRI, r3
 800d562:	f3bf 8f6f 	isb	sy
 800d566:	f3bf 8f4f 	dsb	sy
 800d56a:	613b      	str	r3, [r7, #16]
}
 800d56c:	bf00      	nop
 800d56e:	e7fe      	b.n	800d56e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d572:	685a      	ldr	r2, [r3, #4]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	1ad2      	subs	r2, r2, r3
 800d578:	69bb      	ldr	r3, [r7, #24]
 800d57a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d582:	69b8      	ldr	r0, [r7, #24]
 800d584:	f000 f908 	bl	800d798 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d588:	4b1d      	ldr	r3, [pc, #116]	; (800d600 <pvPortMalloc+0x188>)
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	1ad3      	subs	r3, r2, r3
 800d592:	4a1b      	ldr	r2, [pc, #108]	; (800d600 <pvPortMalloc+0x188>)
 800d594:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d596:	4b1a      	ldr	r3, [pc, #104]	; (800d600 <pvPortMalloc+0x188>)
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	4b1b      	ldr	r3, [pc, #108]	; (800d608 <pvPortMalloc+0x190>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d203      	bcs.n	800d5aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d5a2:	4b17      	ldr	r3, [pc, #92]	; (800d600 <pvPortMalloc+0x188>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	4a18      	ldr	r2, [pc, #96]	; (800d608 <pvPortMalloc+0x190>)
 800d5a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ac:	685a      	ldr	r2, [r3, #4]
 800d5ae:	4b13      	ldr	r3, [pc, #76]	; (800d5fc <pvPortMalloc+0x184>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	431a      	orrs	r2, r3
 800d5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d5be:	4b13      	ldr	r3, [pc, #76]	; (800d60c <pvPortMalloc+0x194>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	4a11      	ldr	r2, [pc, #68]	; (800d60c <pvPortMalloc+0x194>)
 800d5c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d5c8:	f7fe fb22 	bl	800bc10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5cc:	69fb      	ldr	r3, [r7, #28]
 800d5ce:	f003 0307 	and.w	r3, r3, #7
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d00a      	beq.n	800d5ec <pvPortMalloc+0x174>
	__asm volatile
 800d5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5da:	f383 8811 	msr	BASEPRI, r3
 800d5de:	f3bf 8f6f 	isb	sy
 800d5e2:	f3bf 8f4f 	dsb	sy
 800d5e6:	60fb      	str	r3, [r7, #12]
}
 800d5e8:	bf00      	nop
 800d5ea:	e7fe      	b.n	800d5ea <pvPortMalloc+0x172>
	return pvReturn;
 800d5ec:	69fb      	ldr	r3, [r7, #28]
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3728      	adds	r7, #40	; 0x28
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	20005790 	.word	0x20005790
 800d5fc:	200057a4 	.word	0x200057a4
 800d600:	20005794 	.word	0x20005794
 800d604:	20005788 	.word	0x20005788
 800d608:	20005798 	.word	0x20005798
 800d60c:	2000579c 	.word	0x2000579c

0800d610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b086      	sub	sp, #24
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d04d      	beq.n	800d6be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d622:	2308      	movs	r3, #8
 800d624:	425b      	negs	r3, r3
 800d626:	697a      	ldr	r2, [r7, #20]
 800d628:	4413      	add	r3, r2
 800d62a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	685a      	ldr	r2, [r3, #4]
 800d634:	4b24      	ldr	r3, [pc, #144]	; (800d6c8 <vPortFree+0xb8>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	4013      	ands	r3, r2
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d10a      	bne.n	800d654 <vPortFree+0x44>
	__asm volatile
 800d63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d642:	f383 8811 	msr	BASEPRI, r3
 800d646:	f3bf 8f6f 	isb	sy
 800d64a:	f3bf 8f4f 	dsb	sy
 800d64e:	60fb      	str	r3, [r7, #12]
}
 800d650:	bf00      	nop
 800d652:	e7fe      	b.n	800d652 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d00a      	beq.n	800d672 <vPortFree+0x62>
	__asm volatile
 800d65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d660:	f383 8811 	msr	BASEPRI, r3
 800d664:	f3bf 8f6f 	isb	sy
 800d668:	f3bf 8f4f 	dsb	sy
 800d66c:	60bb      	str	r3, [r7, #8]
}
 800d66e:	bf00      	nop
 800d670:	e7fe      	b.n	800d670 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	685a      	ldr	r2, [r3, #4]
 800d676:	4b14      	ldr	r3, [pc, #80]	; (800d6c8 <vPortFree+0xb8>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4013      	ands	r3, r2
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d01e      	beq.n	800d6be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d11a      	bne.n	800d6be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	685a      	ldr	r2, [r3, #4]
 800d68c:	4b0e      	ldr	r3, [pc, #56]	; (800d6c8 <vPortFree+0xb8>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	43db      	mvns	r3, r3
 800d692:	401a      	ands	r2, r3
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d698:	f7fe faac 	bl	800bbf4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	685a      	ldr	r2, [r3, #4]
 800d6a0:	4b0a      	ldr	r3, [pc, #40]	; (800d6cc <vPortFree+0xbc>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4413      	add	r3, r2
 800d6a6:	4a09      	ldr	r2, [pc, #36]	; (800d6cc <vPortFree+0xbc>)
 800d6a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d6aa:	6938      	ldr	r0, [r7, #16]
 800d6ac:	f000 f874 	bl	800d798 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d6b0:	4b07      	ldr	r3, [pc, #28]	; (800d6d0 <vPortFree+0xc0>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	4a06      	ldr	r2, [pc, #24]	; (800d6d0 <vPortFree+0xc0>)
 800d6b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d6ba:	f7fe faa9 	bl	800bc10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d6be:	bf00      	nop
 800d6c0:	3718      	adds	r7, #24
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	200057a4 	.word	0x200057a4
 800d6cc:	20005794 	.word	0x20005794
 800d6d0:	200057a0 	.word	0x200057a0

0800d6d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b085      	sub	sp, #20
 800d6d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d6da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d6de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d6e0:	4b27      	ldr	r3, [pc, #156]	; (800d780 <prvHeapInit+0xac>)
 800d6e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f003 0307 	and.w	r3, r3, #7
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d00c      	beq.n	800d708 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	3307      	adds	r3, #7
 800d6f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f023 0307 	bic.w	r3, r3, #7
 800d6fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d6fc:	68ba      	ldr	r2, [r7, #8]
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	1ad3      	subs	r3, r2, r3
 800d702:	4a1f      	ldr	r2, [pc, #124]	; (800d780 <prvHeapInit+0xac>)
 800d704:	4413      	add	r3, r2
 800d706:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d70c:	4a1d      	ldr	r2, [pc, #116]	; (800d784 <prvHeapInit+0xb0>)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d712:	4b1c      	ldr	r3, [pc, #112]	; (800d784 <prvHeapInit+0xb0>)
 800d714:	2200      	movs	r2, #0
 800d716:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	68ba      	ldr	r2, [r7, #8]
 800d71c:	4413      	add	r3, r2
 800d71e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d720:	2208      	movs	r2, #8
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	1a9b      	subs	r3, r3, r2
 800d726:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f023 0307 	bic.w	r3, r3, #7
 800d72e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	4a15      	ldr	r2, [pc, #84]	; (800d788 <prvHeapInit+0xb4>)
 800d734:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d736:	4b14      	ldr	r3, [pc, #80]	; (800d788 <prvHeapInit+0xb4>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2200      	movs	r2, #0
 800d73c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d73e:	4b12      	ldr	r3, [pc, #72]	; (800d788 <prvHeapInit+0xb4>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2200      	movs	r2, #0
 800d744:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	68fa      	ldr	r2, [r7, #12]
 800d74e:	1ad2      	subs	r2, r2, r3
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d754:	4b0c      	ldr	r3, [pc, #48]	; (800d788 <prvHeapInit+0xb4>)
 800d756:	681a      	ldr	r2, [r3, #0]
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	4a0a      	ldr	r2, [pc, #40]	; (800d78c <prvHeapInit+0xb8>)
 800d762:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	4a09      	ldr	r2, [pc, #36]	; (800d790 <prvHeapInit+0xbc>)
 800d76a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d76c:	4b09      	ldr	r3, [pc, #36]	; (800d794 <prvHeapInit+0xc0>)
 800d76e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d772:	601a      	str	r2, [r3, #0]
}
 800d774:	bf00      	nop
 800d776:	3714      	adds	r7, #20
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr
 800d780:	20001b88 	.word	0x20001b88
 800d784:	20005788 	.word	0x20005788
 800d788:	20005790 	.word	0x20005790
 800d78c:	20005798 	.word	0x20005798
 800d790:	20005794 	.word	0x20005794
 800d794:	200057a4 	.word	0x200057a4

0800d798 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d798:	b480      	push	{r7}
 800d79a:	b085      	sub	sp, #20
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d7a0:	4b28      	ldr	r3, [pc, #160]	; (800d844 <prvInsertBlockIntoFreeList+0xac>)
 800d7a2:	60fb      	str	r3, [r7, #12]
 800d7a4:	e002      	b.n	800d7ac <prvInsertBlockIntoFreeList+0x14>
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	60fb      	str	r3, [r7, #12]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d8f7      	bhi.n	800d7a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	68ba      	ldr	r2, [r7, #8]
 800d7c0:	4413      	add	r3, r2
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d108      	bne.n	800d7da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	685a      	ldr	r2, [r3, #4]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	441a      	add	r2, r3
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	68ba      	ldr	r2, [r7, #8]
 800d7e4:	441a      	add	r2, r3
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d118      	bne.n	800d820 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	4b15      	ldr	r3, [pc, #84]	; (800d848 <prvInsertBlockIntoFreeList+0xb0>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d00d      	beq.n	800d816 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	685a      	ldr	r2, [r3, #4]
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	441a      	add	r2, r3
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	681a      	ldr	r2, [r3, #0]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	601a      	str	r2, [r3, #0]
 800d814:	e008      	b.n	800d828 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d816:	4b0c      	ldr	r3, [pc, #48]	; (800d848 <prvInsertBlockIntoFreeList+0xb0>)
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	601a      	str	r2, [r3, #0]
 800d81e:	e003      	b.n	800d828 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d828:	68fa      	ldr	r2, [r7, #12]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d002      	beq.n	800d836 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d836:	bf00      	nop
 800d838:	3714      	adds	r7, #20
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr
 800d842:	bf00      	nop
 800d844:	20005788 	.word	0x20005788
 800d848:	20005790 	.word	0x20005790

0800d84c <__cvt>:
 800d84c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d850:	ec55 4b10 	vmov	r4, r5, d0
 800d854:	2d00      	cmp	r5, #0
 800d856:	460e      	mov	r6, r1
 800d858:	4619      	mov	r1, r3
 800d85a:	462b      	mov	r3, r5
 800d85c:	bfbb      	ittet	lt
 800d85e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d862:	461d      	movlt	r5, r3
 800d864:	2300      	movge	r3, #0
 800d866:	232d      	movlt	r3, #45	; 0x2d
 800d868:	700b      	strb	r3, [r1, #0]
 800d86a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d86c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d870:	4691      	mov	r9, r2
 800d872:	f023 0820 	bic.w	r8, r3, #32
 800d876:	bfbc      	itt	lt
 800d878:	4622      	movlt	r2, r4
 800d87a:	4614      	movlt	r4, r2
 800d87c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d880:	d005      	beq.n	800d88e <__cvt+0x42>
 800d882:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d886:	d100      	bne.n	800d88a <__cvt+0x3e>
 800d888:	3601      	adds	r6, #1
 800d88a:	2102      	movs	r1, #2
 800d88c:	e000      	b.n	800d890 <__cvt+0x44>
 800d88e:	2103      	movs	r1, #3
 800d890:	ab03      	add	r3, sp, #12
 800d892:	9301      	str	r3, [sp, #4]
 800d894:	ab02      	add	r3, sp, #8
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	ec45 4b10 	vmov	d0, r4, r5
 800d89c:	4653      	mov	r3, sl
 800d89e:	4632      	mov	r2, r6
 800d8a0:	f000 feba 	bl	800e618 <_dtoa_r>
 800d8a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d8a8:	4607      	mov	r7, r0
 800d8aa:	d102      	bne.n	800d8b2 <__cvt+0x66>
 800d8ac:	f019 0f01 	tst.w	r9, #1
 800d8b0:	d022      	beq.n	800d8f8 <__cvt+0xac>
 800d8b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d8b6:	eb07 0906 	add.w	r9, r7, r6
 800d8ba:	d110      	bne.n	800d8de <__cvt+0x92>
 800d8bc:	783b      	ldrb	r3, [r7, #0]
 800d8be:	2b30      	cmp	r3, #48	; 0x30
 800d8c0:	d10a      	bne.n	800d8d8 <__cvt+0x8c>
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	4629      	mov	r1, r5
 800d8ca:	f7f3 f8fd 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8ce:	b918      	cbnz	r0, 800d8d8 <__cvt+0x8c>
 800d8d0:	f1c6 0601 	rsb	r6, r6, #1
 800d8d4:	f8ca 6000 	str.w	r6, [sl]
 800d8d8:	f8da 3000 	ldr.w	r3, [sl]
 800d8dc:	4499      	add	r9, r3
 800d8de:	2200      	movs	r2, #0
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	4629      	mov	r1, r5
 800d8e6:	f7f3 f8ef 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8ea:	b108      	cbz	r0, 800d8f0 <__cvt+0xa4>
 800d8ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800d8f0:	2230      	movs	r2, #48	; 0x30
 800d8f2:	9b03      	ldr	r3, [sp, #12]
 800d8f4:	454b      	cmp	r3, r9
 800d8f6:	d307      	bcc.n	800d908 <__cvt+0xbc>
 800d8f8:	9b03      	ldr	r3, [sp, #12]
 800d8fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8fc:	1bdb      	subs	r3, r3, r7
 800d8fe:	4638      	mov	r0, r7
 800d900:	6013      	str	r3, [r2, #0]
 800d902:	b004      	add	sp, #16
 800d904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d908:	1c59      	adds	r1, r3, #1
 800d90a:	9103      	str	r1, [sp, #12]
 800d90c:	701a      	strb	r2, [r3, #0]
 800d90e:	e7f0      	b.n	800d8f2 <__cvt+0xa6>

0800d910 <__exponent>:
 800d910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d912:	4603      	mov	r3, r0
 800d914:	2900      	cmp	r1, #0
 800d916:	bfb8      	it	lt
 800d918:	4249      	neglt	r1, r1
 800d91a:	f803 2b02 	strb.w	r2, [r3], #2
 800d91e:	bfb4      	ite	lt
 800d920:	222d      	movlt	r2, #45	; 0x2d
 800d922:	222b      	movge	r2, #43	; 0x2b
 800d924:	2909      	cmp	r1, #9
 800d926:	7042      	strb	r2, [r0, #1]
 800d928:	dd2a      	ble.n	800d980 <__exponent+0x70>
 800d92a:	f10d 0207 	add.w	r2, sp, #7
 800d92e:	4617      	mov	r7, r2
 800d930:	260a      	movs	r6, #10
 800d932:	4694      	mov	ip, r2
 800d934:	fb91 f5f6 	sdiv	r5, r1, r6
 800d938:	fb06 1415 	mls	r4, r6, r5, r1
 800d93c:	3430      	adds	r4, #48	; 0x30
 800d93e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d942:	460c      	mov	r4, r1
 800d944:	2c63      	cmp	r4, #99	; 0x63
 800d946:	f102 32ff 	add.w	r2, r2, #4294967295
 800d94a:	4629      	mov	r1, r5
 800d94c:	dcf1      	bgt.n	800d932 <__exponent+0x22>
 800d94e:	3130      	adds	r1, #48	; 0x30
 800d950:	f1ac 0402 	sub.w	r4, ip, #2
 800d954:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d958:	1c41      	adds	r1, r0, #1
 800d95a:	4622      	mov	r2, r4
 800d95c:	42ba      	cmp	r2, r7
 800d95e:	d30a      	bcc.n	800d976 <__exponent+0x66>
 800d960:	f10d 0209 	add.w	r2, sp, #9
 800d964:	eba2 020c 	sub.w	r2, r2, ip
 800d968:	42bc      	cmp	r4, r7
 800d96a:	bf88      	it	hi
 800d96c:	2200      	movhi	r2, #0
 800d96e:	4413      	add	r3, r2
 800d970:	1a18      	subs	r0, r3, r0
 800d972:	b003      	add	sp, #12
 800d974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d976:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d97a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d97e:	e7ed      	b.n	800d95c <__exponent+0x4c>
 800d980:	2330      	movs	r3, #48	; 0x30
 800d982:	3130      	adds	r1, #48	; 0x30
 800d984:	7083      	strb	r3, [r0, #2]
 800d986:	70c1      	strb	r1, [r0, #3]
 800d988:	1d03      	adds	r3, r0, #4
 800d98a:	e7f1      	b.n	800d970 <__exponent+0x60>

0800d98c <_printf_float>:
 800d98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d990:	ed2d 8b02 	vpush	{d8}
 800d994:	b08d      	sub	sp, #52	; 0x34
 800d996:	460c      	mov	r4, r1
 800d998:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d99c:	4616      	mov	r6, r2
 800d99e:	461f      	mov	r7, r3
 800d9a0:	4605      	mov	r5, r0
 800d9a2:	f000 fcd5 	bl	800e350 <_localeconv_r>
 800d9a6:	f8d0 a000 	ldr.w	sl, [r0]
 800d9aa:	4650      	mov	r0, sl
 800d9ac:	f7f2 fc60 	bl	8000270 <strlen>
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	930a      	str	r3, [sp, #40]	; 0x28
 800d9b4:	6823      	ldr	r3, [r4, #0]
 800d9b6:	9305      	str	r3, [sp, #20]
 800d9b8:	f8d8 3000 	ldr.w	r3, [r8]
 800d9bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d9c0:	3307      	adds	r3, #7
 800d9c2:	f023 0307 	bic.w	r3, r3, #7
 800d9c6:	f103 0208 	add.w	r2, r3, #8
 800d9ca:	f8c8 2000 	str.w	r2, [r8]
 800d9ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d9d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d9d6:	9307      	str	r3, [sp, #28]
 800d9d8:	f8cd 8018 	str.w	r8, [sp, #24]
 800d9dc:	ee08 0a10 	vmov	s16, r0
 800d9e0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d9e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9e8:	4b9e      	ldr	r3, [pc, #632]	; (800dc64 <_printf_float+0x2d8>)
 800d9ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ee:	f7f3 f89d 	bl	8000b2c <__aeabi_dcmpun>
 800d9f2:	bb88      	cbnz	r0, 800da58 <_printf_float+0xcc>
 800d9f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9f8:	4b9a      	ldr	r3, [pc, #616]	; (800dc64 <_printf_float+0x2d8>)
 800d9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d9fe:	f7f3 f877 	bl	8000af0 <__aeabi_dcmple>
 800da02:	bb48      	cbnz	r0, 800da58 <_printf_float+0xcc>
 800da04:	2200      	movs	r2, #0
 800da06:	2300      	movs	r3, #0
 800da08:	4640      	mov	r0, r8
 800da0a:	4649      	mov	r1, r9
 800da0c:	f7f3 f866 	bl	8000adc <__aeabi_dcmplt>
 800da10:	b110      	cbz	r0, 800da18 <_printf_float+0x8c>
 800da12:	232d      	movs	r3, #45	; 0x2d
 800da14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da18:	4a93      	ldr	r2, [pc, #588]	; (800dc68 <_printf_float+0x2dc>)
 800da1a:	4b94      	ldr	r3, [pc, #592]	; (800dc6c <_printf_float+0x2e0>)
 800da1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800da20:	bf94      	ite	ls
 800da22:	4690      	movls	r8, r2
 800da24:	4698      	movhi	r8, r3
 800da26:	2303      	movs	r3, #3
 800da28:	6123      	str	r3, [r4, #16]
 800da2a:	9b05      	ldr	r3, [sp, #20]
 800da2c:	f023 0304 	bic.w	r3, r3, #4
 800da30:	6023      	str	r3, [r4, #0]
 800da32:	f04f 0900 	mov.w	r9, #0
 800da36:	9700      	str	r7, [sp, #0]
 800da38:	4633      	mov	r3, r6
 800da3a:	aa0b      	add	r2, sp, #44	; 0x2c
 800da3c:	4621      	mov	r1, r4
 800da3e:	4628      	mov	r0, r5
 800da40:	f000 f9da 	bl	800ddf8 <_printf_common>
 800da44:	3001      	adds	r0, #1
 800da46:	f040 8090 	bne.w	800db6a <_printf_float+0x1de>
 800da4a:	f04f 30ff 	mov.w	r0, #4294967295
 800da4e:	b00d      	add	sp, #52	; 0x34
 800da50:	ecbd 8b02 	vpop	{d8}
 800da54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da58:	4642      	mov	r2, r8
 800da5a:	464b      	mov	r3, r9
 800da5c:	4640      	mov	r0, r8
 800da5e:	4649      	mov	r1, r9
 800da60:	f7f3 f864 	bl	8000b2c <__aeabi_dcmpun>
 800da64:	b140      	cbz	r0, 800da78 <_printf_float+0xec>
 800da66:	464b      	mov	r3, r9
 800da68:	2b00      	cmp	r3, #0
 800da6a:	bfbc      	itt	lt
 800da6c:	232d      	movlt	r3, #45	; 0x2d
 800da6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800da72:	4a7f      	ldr	r2, [pc, #508]	; (800dc70 <_printf_float+0x2e4>)
 800da74:	4b7f      	ldr	r3, [pc, #508]	; (800dc74 <_printf_float+0x2e8>)
 800da76:	e7d1      	b.n	800da1c <_printf_float+0x90>
 800da78:	6863      	ldr	r3, [r4, #4]
 800da7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800da7e:	9206      	str	r2, [sp, #24]
 800da80:	1c5a      	adds	r2, r3, #1
 800da82:	d13f      	bne.n	800db04 <_printf_float+0x178>
 800da84:	2306      	movs	r3, #6
 800da86:	6063      	str	r3, [r4, #4]
 800da88:	9b05      	ldr	r3, [sp, #20]
 800da8a:	6861      	ldr	r1, [r4, #4]
 800da8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800da90:	2300      	movs	r3, #0
 800da92:	9303      	str	r3, [sp, #12]
 800da94:	ab0a      	add	r3, sp, #40	; 0x28
 800da96:	e9cd b301 	strd	fp, r3, [sp, #4]
 800da9a:	ab09      	add	r3, sp, #36	; 0x24
 800da9c:	ec49 8b10 	vmov	d0, r8, r9
 800daa0:	9300      	str	r3, [sp, #0]
 800daa2:	6022      	str	r2, [r4, #0]
 800daa4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800daa8:	4628      	mov	r0, r5
 800daaa:	f7ff fecf 	bl	800d84c <__cvt>
 800daae:	9b06      	ldr	r3, [sp, #24]
 800dab0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dab2:	2b47      	cmp	r3, #71	; 0x47
 800dab4:	4680      	mov	r8, r0
 800dab6:	d108      	bne.n	800daca <_printf_float+0x13e>
 800dab8:	1cc8      	adds	r0, r1, #3
 800daba:	db02      	blt.n	800dac2 <_printf_float+0x136>
 800dabc:	6863      	ldr	r3, [r4, #4]
 800dabe:	4299      	cmp	r1, r3
 800dac0:	dd41      	ble.n	800db46 <_printf_float+0x1ba>
 800dac2:	f1ab 0302 	sub.w	r3, fp, #2
 800dac6:	fa5f fb83 	uxtb.w	fp, r3
 800daca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dace:	d820      	bhi.n	800db12 <_printf_float+0x186>
 800dad0:	3901      	subs	r1, #1
 800dad2:	465a      	mov	r2, fp
 800dad4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dad8:	9109      	str	r1, [sp, #36]	; 0x24
 800dada:	f7ff ff19 	bl	800d910 <__exponent>
 800dade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dae0:	1813      	adds	r3, r2, r0
 800dae2:	2a01      	cmp	r2, #1
 800dae4:	4681      	mov	r9, r0
 800dae6:	6123      	str	r3, [r4, #16]
 800dae8:	dc02      	bgt.n	800daf0 <_printf_float+0x164>
 800daea:	6822      	ldr	r2, [r4, #0]
 800daec:	07d2      	lsls	r2, r2, #31
 800daee:	d501      	bpl.n	800daf4 <_printf_float+0x168>
 800daf0:	3301      	adds	r3, #1
 800daf2:	6123      	str	r3, [r4, #16]
 800daf4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d09c      	beq.n	800da36 <_printf_float+0xaa>
 800dafc:	232d      	movs	r3, #45	; 0x2d
 800dafe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db02:	e798      	b.n	800da36 <_printf_float+0xaa>
 800db04:	9a06      	ldr	r2, [sp, #24]
 800db06:	2a47      	cmp	r2, #71	; 0x47
 800db08:	d1be      	bne.n	800da88 <_printf_float+0xfc>
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1bc      	bne.n	800da88 <_printf_float+0xfc>
 800db0e:	2301      	movs	r3, #1
 800db10:	e7b9      	b.n	800da86 <_printf_float+0xfa>
 800db12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800db16:	d118      	bne.n	800db4a <_printf_float+0x1be>
 800db18:	2900      	cmp	r1, #0
 800db1a:	6863      	ldr	r3, [r4, #4]
 800db1c:	dd0b      	ble.n	800db36 <_printf_float+0x1aa>
 800db1e:	6121      	str	r1, [r4, #16]
 800db20:	b913      	cbnz	r3, 800db28 <_printf_float+0x19c>
 800db22:	6822      	ldr	r2, [r4, #0]
 800db24:	07d0      	lsls	r0, r2, #31
 800db26:	d502      	bpl.n	800db2e <_printf_float+0x1a2>
 800db28:	3301      	adds	r3, #1
 800db2a:	440b      	add	r3, r1
 800db2c:	6123      	str	r3, [r4, #16]
 800db2e:	65a1      	str	r1, [r4, #88]	; 0x58
 800db30:	f04f 0900 	mov.w	r9, #0
 800db34:	e7de      	b.n	800daf4 <_printf_float+0x168>
 800db36:	b913      	cbnz	r3, 800db3e <_printf_float+0x1b2>
 800db38:	6822      	ldr	r2, [r4, #0]
 800db3a:	07d2      	lsls	r2, r2, #31
 800db3c:	d501      	bpl.n	800db42 <_printf_float+0x1b6>
 800db3e:	3302      	adds	r3, #2
 800db40:	e7f4      	b.n	800db2c <_printf_float+0x1a0>
 800db42:	2301      	movs	r3, #1
 800db44:	e7f2      	b.n	800db2c <_printf_float+0x1a0>
 800db46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800db4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db4c:	4299      	cmp	r1, r3
 800db4e:	db05      	blt.n	800db5c <_printf_float+0x1d0>
 800db50:	6823      	ldr	r3, [r4, #0]
 800db52:	6121      	str	r1, [r4, #16]
 800db54:	07d8      	lsls	r0, r3, #31
 800db56:	d5ea      	bpl.n	800db2e <_printf_float+0x1a2>
 800db58:	1c4b      	adds	r3, r1, #1
 800db5a:	e7e7      	b.n	800db2c <_printf_float+0x1a0>
 800db5c:	2900      	cmp	r1, #0
 800db5e:	bfd4      	ite	le
 800db60:	f1c1 0202 	rsble	r2, r1, #2
 800db64:	2201      	movgt	r2, #1
 800db66:	4413      	add	r3, r2
 800db68:	e7e0      	b.n	800db2c <_printf_float+0x1a0>
 800db6a:	6823      	ldr	r3, [r4, #0]
 800db6c:	055a      	lsls	r2, r3, #21
 800db6e:	d407      	bmi.n	800db80 <_printf_float+0x1f4>
 800db70:	6923      	ldr	r3, [r4, #16]
 800db72:	4642      	mov	r2, r8
 800db74:	4631      	mov	r1, r6
 800db76:	4628      	mov	r0, r5
 800db78:	47b8      	blx	r7
 800db7a:	3001      	adds	r0, #1
 800db7c:	d12c      	bne.n	800dbd8 <_printf_float+0x24c>
 800db7e:	e764      	b.n	800da4a <_printf_float+0xbe>
 800db80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800db84:	f240 80e0 	bls.w	800dd48 <_printf_float+0x3bc>
 800db88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800db8c:	2200      	movs	r2, #0
 800db8e:	2300      	movs	r3, #0
 800db90:	f7f2 ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800db94:	2800      	cmp	r0, #0
 800db96:	d034      	beq.n	800dc02 <_printf_float+0x276>
 800db98:	4a37      	ldr	r2, [pc, #220]	; (800dc78 <_printf_float+0x2ec>)
 800db9a:	2301      	movs	r3, #1
 800db9c:	4631      	mov	r1, r6
 800db9e:	4628      	mov	r0, r5
 800dba0:	47b8      	blx	r7
 800dba2:	3001      	adds	r0, #1
 800dba4:	f43f af51 	beq.w	800da4a <_printf_float+0xbe>
 800dba8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbac:	429a      	cmp	r2, r3
 800dbae:	db02      	blt.n	800dbb6 <_printf_float+0x22a>
 800dbb0:	6823      	ldr	r3, [r4, #0]
 800dbb2:	07d8      	lsls	r0, r3, #31
 800dbb4:	d510      	bpl.n	800dbd8 <_printf_float+0x24c>
 800dbb6:	ee18 3a10 	vmov	r3, s16
 800dbba:	4652      	mov	r2, sl
 800dbbc:	4631      	mov	r1, r6
 800dbbe:	4628      	mov	r0, r5
 800dbc0:	47b8      	blx	r7
 800dbc2:	3001      	adds	r0, #1
 800dbc4:	f43f af41 	beq.w	800da4a <_printf_float+0xbe>
 800dbc8:	f04f 0800 	mov.w	r8, #0
 800dbcc:	f104 091a 	add.w	r9, r4, #26
 800dbd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbd2:	3b01      	subs	r3, #1
 800dbd4:	4543      	cmp	r3, r8
 800dbd6:	dc09      	bgt.n	800dbec <_printf_float+0x260>
 800dbd8:	6823      	ldr	r3, [r4, #0]
 800dbda:	079b      	lsls	r3, r3, #30
 800dbdc:	f100 8107 	bmi.w	800ddee <_printf_float+0x462>
 800dbe0:	68e0      	ldr	r0, [r4, #12]
 800dbe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbe4:	4298      	cmp	r0, r3
 800dbe6:	bfb8      	it	lt
 800dbe8:	4618      	movlt	r0, r3
 800dbea:	e730      	b.n	800da4e <_printf_float+0xc2>
 800dbec:	2301      	movs	r3, #1
 800dbee:	464a      	mov	r2, r9
 800dbf0:	4631      	mov	r1, r6
 800dbf2:	4628      	mov	r0, r5
 800dbf4:	47b8      	blx	r7
 800dbf6:	3001      	adds	r0, #1
 800dbf8:	f43f af27 	beq.w	800da4a <_printf_float+0xbe>
 800dbfc:	f108 0801 	add.w	r8, r8, #1
 800dc00:	e7e6      	b.n	800dbd0 <_printf_float+0x244>
 800dc02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	dc39      	bgt.n	800dc7c <_printf_float+0x2f0>
 800dc08:	4a1b      	ldr	r2, [pc, #108]	; (800dc78 <_printf_float+0x2ec>)
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	4631      	mov	r1, r6
 800dc0e:	4628      	mov	r0, r5
 800dc10:	47b8      	blx	r7
 800dc12:	3001      	adds	r0, #1
 800dc14:	f43f af19 	beq.w	800da4a <_printf_float+0xbe>
 800dc18:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dc1c:	4313      	orrs	r3, r2
 800dc1e:	d102      	bne.n	800dc26 <_printf_float+0x29a>
 800dc20:	6823      	ldr	r3, [r4, #0]
 800dc22:	07d9      	lsls	r1, r3, #31
 800dc24:	d5d8      	bpl.n	800dbd8 <_printf_float+0x24c>
 800dc26:	ee18 3a10 	vmov	r3, s16
 800dc2a:	4652      	mov	r2, sl
 800dc2c:	4631      	mov	r1, r6
 800dc2e:	4628      	mov	r0, r5
 800dc30:	47b8      	blx	r7
 800dc32:	3001      	adds	r0, #1
 800dc34:	f43f af09 	beq.w	800da4a <_printf_float+0xbe>
 800dc38:	f04f 0900 	mov.w	r9, #0
 800dc3c:	f104 0a1a 	add.w	sl, r4, #26
 800dc40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc42:	425b      	negs	r3, r3
 800dc44:	454b      	cmp	r3, r9
 800dc46:	dc01      	bgt.n	800dc4c <_printf_float+0x2c0>
 800dc48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc4a:	e792      	b.n	800db72 <_printf_float+0x1e6>
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	4652      	mov	r2, sl
 800dc50:	4631      	mov	r1, r6
 800dc52:	4628      	mov	r0, r5
 800dc54:	47b8      	blx	r7
 800dc56:	3001      	adds	r0, #1
 800dc58:	f43f aef7 	beq.w	800da4a <_printf_float+0xbe>
 800dc5c:	f109 0901 	add.w	r9, r9, #1
 800dc60:	e7ee      	b.n	800dc40 <_printf_float+0x2b4>
 800dc62:	bf00      	nop
 800dc64:	7fefffff 	.word	0x7fefffff
 800dc68:	080107a8 	.word	0x080107a8
 800dc6c:	080107ac 	.word	0x080107ac
 800dc70:	080107b0 	.word	0x080107b0
 800dc74:	080107b4 	.word	0x080107b4
 800dc78:	080107b8 	.word	0x080107b8
 800dc7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc80:	429a      	cmp	r2, r3
 800dc82:	bfa8      	it	ge
 800dc84:	461a      	movge	r2, r3
 800dc86:	2a00      	cmp	r2, #0
 800dc88:	4691      	mov	r9, r2
 800dc8a:	dc37      	bgt.n	800dcfc <_printf_float+0x370>
 800dc8c:	f04f 0b00 	mov.w	fp, #0
 800dc90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc94:	f104 021a 	add.w	r2, r4, #26
 800dc98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc9a:	9305      	str	r3, [sp, #20]
 800dc9c:	eba3 0309 	sub.w	r3, r3, r9
 800dca0:	455b      	cmp	r3, fp
 800dca2:	dc33      	bgt.n	800dd0c <_printf_float+0x380>
 800dca4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	db3b      	blt.n	800dd24 <_printf_float+0x398>
 800dcac:	6823      	ldr	r3, [r4, #0]
 800dcae:	07da      	lsls	r2, r3, #31
 800dcb0:	d438      	bmi.n	800dd24 <_printf_float+0x398>
 800dcb2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dcb6:	eba2 0903 	sub.w	r9, r2, r3
 800dcba:	9b05      	ldr	r3, [sp, #20]
 800dcbc:	1ad2      	subs	r2, r2, r3
 800dcbe:	4591      	cmp	r9, r2
 800dcc0:	bfa8      	it	ge
 800dcc2:	4691      	movge	r9, r2
 800dcc4:	f1b9 0f00 	cmp.w	r9, #0
 800dcc8:	dc35      	bgt.n	800dd36 <_printf_float+0x3aa>
 800dcca:	f04f 0800 	mov.w	r8, #0
 800dcce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dcd2:	f104 0a1a 	add.w	sl, r4, #26
 800dcd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dcda:	1a9b      	subs	r3, r3, r2
 800dcdc:	eba3 0309 	sub.w	r3, r3, r9
 800dce0:	4543      	cmp	r3, r8
 800dce2:	f77f af79 	ble.w	800dbd8 <_printf_float+0x24c>
 800dce6:	2301      	movs	r3, #1
 800dce8:	4652      	mov	r2, sl
 800dcea:	4631      	mov	r1, r6
 800dcec:	4628      	mov	r0, r5
 800dcee:	47b8      	blx	r7
 800dcf0:	3001      	adds	r0, #1
 800dcf2:	f43f aeaa 	beq.w	800da4a <_printf_float+0xbe>
 800dcf6:	f108 0801 	add.w	r8, r8, #1
 800dcfa:	e7ec      	b.n	800dcd6 <_printf_float+0x34a>
 800dcfc:	4613      	mov	r3, r2
 800dcfe:	4631      	mov	r1, r6
 800dd00:	4642      	mov	r2, r8
 800dd02:	4628      	mov	r0, r5
 800dd04:	47b8      	blx	r7
 800dd06:	3001      	adds	r0, #1
 800dd08:	d1c0      	bne.n	800dc8c <_printf_float+0x300>
 800dd0a:	e69e      	b.n	800da4a <_printf_float+0xbe>
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	4631      	mov	r1, r6
 800dd10:	4628      	mov	r0, r5
 800dd12:	9205      	str	r2, [sp, #20]
 800dd14:	47b8      	blx	r7
 800dd16:	3001      	adds	r0, #1
 800dd18:	f43f ae97 	beq.w	800da4a <_printf_float+0xbe>
 800dd1c:	9a05      	ldr	r2, [sp, #20]
 800dd1e:	f10b 0b01 	add.w	fp, fp, #1
 800dd22:	e7b9      	b.n	800dc98 <_printf_float+0x30c>
 800dd24:	ee18 3a10 	vmov	r3, s16
 800dd28:	4652      	mov	r2, sl
 800dd2a:	4631      	mov	r1, r6
 800dd2c:	4628      	mov	r0, r5
 800dd2e:	47b8      	blx	r7
 800dd30:	3001      	adds	r0, #1
 800dd32:	d1be      	bne.n	800dcb2 <_printf_float+0x326>
 800dd34:	e689      	b.n	800da4a <_printf_float+0xbe>
 800dd36:	9a05      	ldr	r2, [sp, #20]
 800dd38:	464b      	mov	r3, r9
 800dd3a:	4442      	add	r2, r8
 800dd3c:	4631      	mov	r1, r6
 800dd3e:	4628      	mov	r0, r5
 800dd40:	47b8      	blx	r7
 800dd42:	3001      	adds	r0, #1
 800dd44:	d1c1      	bne.n	800dcca <_printf_float+0x33e>
 800dd46:	e680      	b.n	800da4a <_printf_float+0xbe>
 800dd48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd4a:	2a01      	cmp	r2, #1
 800dd4c:	dc01      	bgt.n	800dd52 <_printf_float+0x3c6>
 800dd4e:	07db      	lsls	r3, r3, #31
 800dd50:	d53a      	bpl.n	800ddc8 <_printf_float+0x43c>
 800dd52:	2301      	movs	r3, #1
 800dd54:	4642      	mov	r2, r8
 800dd56:	4631      	mov	r1, r6
 800dd58:	4628      	mov	r0, r5
 800dd5a:	47b8      	blx	r7
 800dd5c:	3001      	adds	r0, #1
 800dd5e:	f43f ae74 	beq.w	800da4a <_printf_float+0xbe>
 800dd62:	ee18 3a10 	vmov	r3, s16
 800dd66:	4652      	mov	r2, sl
 800dd68:	4631      	mov	r1, r6
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	47b8      	blx	r7
 800dd6e:	3001      	adds	r0, #1
 800dd70:	f43f ae6b 	beq.w	800da4a <_printf_float+0xbe>
 800dd74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd78:	2200      	movs	r2, #0
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800dd80:	f7f2 fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd84:	b9d8      	cbnz	r0, 800ddbe <_printf_float+0x432>
 800dd86:	f10a 33ff 	add.w	r3, sl, #4294967295
 800dd8a:	f108 0201 	add.w	r2, r8, #1
 800dd8e:	4631      	mov	r1, r6
 800dd90:	4628      	mov	r0, r5
 800dd92:	47b8      	blx	r7
 800dd94:	3001      	adds	r0, #1
 800dd96:	d10e      	bne.n	800ddb6 <_printf_float+0x42a>
 800dd98:	e657      	b.n	800da4a <_printf_float+0xbe>
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	4652      	mov	r2, sl
 800dd9e:	4631      	mov	r1, r6
 800dda0:	4628      	mov	r0, r5
 800dda2:	47b8      	blx	r7
 800dda4:	3001      	adds	r0, #1
 800dda6:	f43f ae50 	beq.w	800da4a <_printf_float+0xbe>
 800ddaa:	f108 0801 	add.w	r8, r8, #1
 800ddae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddb0:	3b01      	subs	r3, #1
 800ddb2:	4543      	cmp	r3, r8
 800ddb4:	dcf1      	bgt.n	800dd9a <_printf_float+0x40e>
 800ddb6:	464b      	mov	r3, r9
 800ddb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ddbc:	e6da      	b.n	800db74 <_printf_float+0x1e8>
 800ddbe:	f04f 0800 	mov.w	r8, #0
 800ddc2:	f104 0a1a 	add.w	sl, r4, #26
 800ddc6:	e7f2      	b.n	800ddae <_printf_float+0x422>
 800ddc8:	2301      	movs	r3, #1
 800ddca:	4642      	mov	r2, r8
 800ddcc:	e7df      	b.n	800dd8e <_printf_float+0x402>
 800ddce:	2301      	movs	r3, #1
 800ddd0:	464a      	mov	r2, r9
 800ddd2:	4631      	mov	r1, r6
 800ddd4:	4628      	mov	r0, r5
 800ddd6:	47b8      	blx	r7
 800ddd8:	3001      	adds	r0, #1
 800ddda:	f43f ae36 	beq.w	800da4a <_printf_float+0xbe>
 800ddde:	f108 0801 	add.w	r8, r8, #1
 800dde2:	68e3      	ldr	r3, [r4, #12]
 800dde4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dde6:	1a5b      	subs	r3, r3, r1
 800dde8:	4543      	cmp	r3, r8
 800ddea:	dcf0      	bgt.n	800ddce <_printf_float+0x442>
 800ddec:	e6f8      	b.n	800dbe0 <_printf_float+0x254>
 800ddee:	f04f 0800 	mov.w	r8, #0
 800ddf2:	f104 0919 	add.w	r9, r4, #25
 800ddf6:	e7f4      	b.n	800dde2 <_printf_float+0x456>

0800ddf8 <_printf_common>:
 800ddf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddfc:	4616      	mov	r6, r2
 800ddfe:	4699      	mov	r9, r3
 800de00:	688a      	ldr	r2, [r1, #8]
 800de02:	690b      	ldr	r3, [r1, #16]
 800de04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de08:	4293      	cmp	r3, r2
 800de0a:	bfb8      	it	lt
 800de0c:	4613      	movlt	r3, r2
 800de0e:	6033      	str	r3, [r6, #0]
 800de10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de14:	4607      	mov	r7, r0
 800de16:	460c      	mov	r4, r1
 800de18:	b10a      	cbz	r2, 800de1e <_printf_common+0x26>
 800de1a:	3301      	adds	r3, #1
 800de1c:	6033      	str	r3, [r6, #0]
 800de1e:	6823      	ldr	r3, [r4, #0]
 800de20:	0699      	lsls	r1, r3, #26
 800de22:	bf42      	ittt	mi
 800de24:	6833      	ldrmi	r3, [r6, #0]
 800de26:	3302      	addmi	r3, #2
 800de28:	6033      	strmi	r3, [r6, #0]
 800de2a:	6825      	ldr	r5, [r4, #0]
 800de2c:	f015 0506 	ands.w	r5, r5, #6
 800de30:	d106      	bne.n	800de40 <_printf_common+0x48>
 800de32:	f104 0a19 	add.w	sl, r4, #25
 800de36:	68e3      	ldr	r3, [r4, #12]
 800de38:	6832      	ldr	r2, [r6, #0]
 800de3a:	1a9b      	subs	r3, r3, r2
 800de3c:	42ab      	cmp	r3, r5
 800de3e:	dc26      	bgt.n	800de8e <_printf_common+0x96>
 800de40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800de44:	1e13      	subs	r3, r2, #0
 800de46:	6822      	ldr	r2, [r4, #0]
 800de48:	bf18      	it	ne
 800de4a:	2301      	movne	r3, #1
 800de4c:	0692      	lsls	r2, r2, #26
 800de4e:	d42b      	bmi.n	800dea8 <_printf_common+0xb0>
 800de50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de54:	4649      	mov	r1, r9
 800de56:	4638      	mov	r0, r7
 800de58:	47c0      	blx	r8
 800de5a:	3001      	adds	r0, #1
 800de5c:	d01e      	beq.n	800de9c <_printf_common+0xa4>
 800de5e:	6823      	ldr	r3, [r4, #0]
 800de60:	6922      	ldr	r2, [r4, #16]
 800de62:	f003 0306 	and.w	r3, r3, #6
 800de66:	2b04      	cmp	r3, #4
 800de68:	bf02      	ittt	eq
 800de6a:	68e5      	ldreq	r5, [r4, #12]
 800de6c:	6833      	ldreq	r3, [r6, #0]
 800de6e:	1aed      	subeq	r5, r5, r3
 800de70:	68a3      	ldr	r3, [r4, #8]
 800de72:	bf0c      	ite	eq
 800de74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de78:	2500      	movne	r5, #0
 800de7a:	4293      	cmp	r3, r2
 800de7c:	bfc4      	itt	gt
 800de7e:	1a9b      	subgt	r3, r3, r2
 800de80:	18ed      	addgt	r5, r5, r3
 800de82:	2600      	movs	r6, #0
 800de84:	341a      	adds	r4, #26
 800de86:	42b5      	cmp	r5, r6
 800de88:	d11a      	bne.n	800dec0 <_printf_common+0xc8>
 800de8a:	2000      	movs	r0, #0
 800de8c:	e008      	b.n	800dea0 <_printf_common+0xa8>
 800de8e:	2301      	movs	r3, #1
 800de90:	4652      	mov	r2, sl
 800de92:	4649      	mov	r1, r9
 800de94:	4638      	mov	r0, r7
 800de96:	47c0      	blx	r8
 800de98:	3001      	adds	r0, #1
 800de9a:	d103      	bne.n	800dea4 <_printf_common+0xac>
 800de9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dea4:	3501      	adds	r5, #1
 800dea6:	e7c6      	b.n	800de36 <_printf_common+0x3e>
 800dea8:	18e1      	adds	r1, r4, r3
 800deaa:	1c5a      	adds	r2, r3, #1
 800deac:	2030      	movs	r0, #48	; 0x30
 800deae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800deb2:	4422      	add	r2, r4
 800deb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800deb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800debc:	3302      	adds	r3, #2
 800debe:	e7c7      	b.n	800de50 <_printf_common+0x58>
 800dec0:	2301      	movs	r3, #1
 800dec2:	4622      	mov	r2, r4
 800dec4:	4649      	mov	r1, r9
 800dec6:	4638      	mov	r0, r7
 800dec8:	47c0      	blx	r8
 800deca:	3001      	adds	r0, #1
 800decc:	d0e6      	beq.n	800de9c <_printf_common+0xa4>
 800dece:	3601      	adds	r6, #1
 800ded0:	e7d9      	b.n	800de86 <_printf_common+0x8e>
	...

0800ded4 <_printf_i>:
 800ded4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ded8:	7e0f      	ldrb	r7, [r1, #24]
 800deda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dedc:	2f78      	cmp	r7, #120	; 0x78
 800dede:	4691      	mov	r9, r2
 800dee0:	4680      	mov	r8, r0
 800dee2:	460c      	mov	r4, r1
 800dee4:	469a      	mov	sl, r3
 800dee6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800deea:	d807      	bhi.n	800defc <_printf_i+0x28>
 800deec:	2f62      	cmp	r7, #98	; 0x62
 800deee:	d80a      	bhi.n	800df06 <_printf_i+0x32>
 800def0:	2f00      	cmp	r7, #0
 800def2:	f000 80d4 	beq.w	800e09e <_printf_i+0x1ca>
 800def6:	2f58      	cmp	r7, #88	; 0x58
 800def8:	f000 80c0 	beq.w	800e07c <_printf_i+0x1a8>
 800defc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800df04:	e03a      	b.n	800df7c <_printf_i+0xa8>
 800df06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800df0a:	2b15      	cmp	r3, #21
 800df0c:	d8f6      	bhi.n	800defc <_printf_i+0x28>
 800df0e:	a101      	add	r1, pc, #4	; (adr r1, 800df14 <_printf_i+0x40>)
 800df10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800df14:	0800df6d 	.word	0x0800df6d
 800df18:	0800df81 	.word	0x0800df81
 800df1c:	0800defd 	.word	0x0800defd
 800df20:	0800defd 	.word	0x0800defd
 800df24:	0800defd 	.word	0x0800defd
 800df28:	0800defd 	.word	0x0800defd
 800df2c:	0800df81 	.word	0x0800df81
 800df30:	0800defd 	.word	0x0800defd
 800df34:	0800defd 	.word	0x0800defd
 800df38:	0800defd 	.word	0x0800defd
 800df3c:	0800defd 	.word	0x0800defd
 800df40:	0800e085 	.word	0x0800e085
 800df44:	0800dfad 	.word	0x0800dfad
 800df48:	0800e03f 	.word	0x0800e03f
 800df4c:	0800defd 	.word	0x0800defd
 800df50:	0800defd 	.word	0x0800defd
 800df54:	0800e0a7 	.word	0x0800e0a7
 800df58:	0800defd 	.word	0x0800defd
 800df5c:	0800dfad 	.word	0x0800dfad
 800df60:	0800defd 	.word	0x0800defd
 800df64:	0800defd 	.word	0x0800defd
 800df68:	0800e047 	.word	0x0800e047
 800df6c:	682b      	ldr	r3, [r5, #0]
 800df6e:	1d1a      	adds	r2, r3, #4
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	602a      	str	r2, [r5, #0]
 800df74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800df7c:	2301      	movs	r3, #1
 800df7e:	e09f      	b.n	800e0c0 <_printf_i+0x1ec>
 800df80:	6820      	ldr	r0, [r4, #0]
 800df82:	682b      	ldr	r3, [r5, #0]
 800df84:	0607      	lsls	r7, r0, #24
 800df86:	f103 0104 	add.w	r1, r3, #4
 800df8a:	6029      	str	r1, [r5, #0]
 800df8c:	d501      	bpl.n	800df92 <_printf_i+0xbe>
 800df8e:	681e      	ldr	r6, [r3, #0]
 800df90:	e003      	b.n	800df9a <_printf_i+0xc6>
 800df92:	0646      	lsls	r6, r0, #25
 800df94:	d5fb      	bpl.n	800df8e <_printf_i+0xba>
 800df96:	f9b3 6000 	ldrsh.w	r6, [r3]
 800df9a:	2e00      	cmp	r6, #0
 800df9c:	da03      	bge.n	800dfa6 <_printf_i+0xd2>
 800df9e:	232d      	movs	r3, #45	; 0x2d
 800dfa0:	4276      	negs	r6, r6
 800dfa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfa6:	485a      	ldr	r0, [pc, #360]	; (800e110 <_printf_i+0x23c>)
 800dfa8:	230a      	movs	r3, #10
 800dfaa:	e012      	b.n	800dfd2 <_printf_i+0xfe>
 800dfac:	682b      	ldr	r3, [r5, #0]
 800dfae:	6820      	ldr	r0, [r4, #0]
 800dfb0:	1d19      	adds	r1, r3, #4
 800dfb2:	6029      	str	r1, [r5, #0]
 800dfb4:	0605      	lsls	r5, r0, #24
 800dfb6:	d501      	bpl.n	800dfbc <_printf_i+0xe8>
 800dfb8:	681e      	ldr	r6, [r3, #0]
 800dfba:	e002      	b.n	800dfc2 <_printf_i+0xee>
 800dfbc:	0641      	lsls	r1, r0, #25
 800dfbe:	d5fb      	bpl.n	800dfb8 <_printf_i+0xe4>
 800dfc0:	881e      	ldrh	r6, [r3, #0]
 800dfc2:	4853      	ldr	r0, [pc, #332]	; (800e110 <_printf_i+0x23c>)
 800dfc4:	2f6f      	cmp	r7, #111	; 0x6f
 800dfc6:	bf0c      	ite	eq
 800dfc8:	2308      	moveq	r3, #8
 800dfca:	230a      	movne	r3, #10
 800dfcc:	2100      	movs	r1, #0
 800dfce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dfd2:	6865      	ldr	r5, [r4, #4]
 800dfd4:	60a5      	str	r5, [r4, #8]
 800dfd6:	2d00      	cmp	r5, #0
 800dfd8:	bfa2      	ittt	ge
 800dfda:	6821      	ldrge	r1, [r4, #0]
 800dfdc:	f021 0104 	bicge.w	r1, r1, #4
 800dfe0:	6021      	strge	r1, [r4, #0]
 800dfe2:	b90e      	cbnz	r6, 800dfe8 <_printf_i+0x114>
 800dfe4:	2d00      	cmp	r5, #0
 800dfe6:	d04b      	beq.n	800e080 <_printf_i+0x1ac>
 800dfe8:	4615      	mov	r5, r2
 800dfea:	fbb6 f1f3 	udiv	r1, r6, r3
 800dfee:	fb03 6711 	mls	r7, r3, r1, r6
 800dff2:	5dc7      	ldrb	r7, [r0, r7]
 800dff4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dff8:	4637      	mov	r7, r6
 800dffa:	42bb      	cmp	r3, r7
 800dffc:	460e      	mov	r6, r1
 800dffe:	d9f4      	bls.n	800dfea <_printf_i+0x116>
 800e000:	2b08      	cmp	r3, #8
 800e002:	d10b      	bne.n	800e01c <_printf_i+0x148>
 800e004:	6823      	ldr	r3, [r4, #0]
 800e006:	07de      	lsls	r6, r3, #31
 800e008:	d508      	bpl.n	800e01c <_printf_i+0x148>
 800e00a:	6923      	ldr	r3, [r4, #16]
 800e00c:	6861      	ldr	r1, [r4, #4]
 800e00e:	4299      	cmp	r1, r3
 800e010:	bfde      	ittt	le
 800e012:	2330      	movle	r3, #48	; 0x30
 800e014:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e018:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e01c:	1b52      	subs	r2, r2, r5
 800e01e:	6122      	str	r2, [r4, #16]
 800e020:	f8cd a000 	str.w	sl, [sp]
 800e024:	464b      	mov	r3, r9
 800e026:	aa03      	add	r2, sp, #12
 800e028:	4621      	mov	r1, r4
 800e02a:	4640      	mov	r0, r8
 800e02c:	f7ff fee4 	bl	800ddf8 <_printf_common>
 800e030:	3001      	adds	r0, #1
 800e032:	d14a      	bne.n	800e0ca <_printf_i+0x1f6>
 800e034:	f04f 30ff 	mov.w	r0, #4294967295
 800e038:	b004      	add	sp, #16
 800e03a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e03e:	6823      	ldr	r3, [r4, #0]
 800e040:	f043 0320 	orr.w	r3, r3, #32
 800e044:	6023      	str	r3, [r4, #0]
 800e046:	4833      	ldr	r0, [pc, #204]	; (800e114 <_printf_i+0x240>)
 800e048:	2778      	movs	r7, #120	; 0x78
 800e04a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e04e:	6823      	ldr	r3, [r4, #0]
 800e050:	6829      	ldr	r1, [r5, #0]
 800e052:	061f      	lsls	r7, r3, #24
 800e054:	f851 6b04 	ldr.w	r6, [r1], #4
 800e058:	d402      	bmi.n	800e060 <_printf_i+0x18c>
 800e05a:	065f      	lsls	r7, r3, #25
 800e05c:	bf48      	it	mi
 800e05e:	b2b6      	uxthmi	r6, r6
 800e060:	07df      	lsls	r7, r3, #31
 800e062:	bf48      	it	mi
 800e064:	f043 0320 	orrmi.w	r3, r3, #32
 800e068:	6029      	str	r1, [r5, #0]
 800e06a:	bf48      	it	mi
 800e06c:	6023      	strmi	r3, [r4, #0]
 800e06e:	b91e      	cbnz	r6, 800e078 <_printf_i+0x1a4>
 800e070:	6823      	ldr	r3, [r4, #0]
 800e072:	f023 0320 	bic.w	r3, r3, #32
 800e076:	6023      	str	r3, [r4, #0]
 800e078:	2310      	movs	r3, #16
 800e07a:	e7a7      	b.n	800dfcc <_printf_i+0xf8>
 800e07c:	4824      	ldr	r0, [pc, #144]	; (800e110 <_printf_i+0x23c>)
 800e07e:	e7e4      	b.n	800e04a <_printf_i+0x176>
 800e080:	4615      	mov	r5, r2
 800e082:	e7bd      	b.n	800e000 <_printf_i+0x12c>
 800e084:	682b      	ldr	r3, [r5, #0]
 800e086:	6826      	ldr	r6, [r4, #0]
 800e088:	6961      	ldr	r1, [r4, #20]
 800e08a:	1d18      	adds	r0, r3, #4
 800e08c:	6028      	str	r0, [r5, #0]
 800e08e:	0635      	lsls	r5, r6, #24
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	d501      	bpl.n	800e098 <_printf_i+0x1c4>
 800e094:	6019      	str	r1, [r3, #0]
 800e096:	e002      	b.n	800e09e <_printf_i+0x1ca>
 800e098:	0670      	lsls	r0, r6, #25
 800e09a:	d5fb      	bpl.n	800e094 <_printf_i+0x1c0>
 800e09c:	8019      	strh	r1, [r3, #0]
 800e09e:	2300      	movs	r3, #0
 800e0a0:	6123      	str	r3, [r4, #16]
 800e0a2:	4615      	mov	r5, r2
 800e0a4:	e7bc      	b.n	800e020 <_printf_i+0x14c>
 800e0a6:	682b      	ldr	r3, [r5, #0]
 800e0a8:	1d1a      	adds	r2, r3, #4
 800e0aa:	602a      	str	r2, [r5, #0]
 800e0ac:	681d      	ldr	r5, [r3, #0]
 800e0ae:	6862      	ldr	r2, [r4, #4]
 800e0b0:	2100      	movs	r1, #0
 800e0b2:	4628      	mov	r0, r5
 800e0b4:	f7f2 f88c 	bl	80001d0 <memchr>
 800e0b8:	b108      	cbz	r0, 800e0be <_printf_i+0x1ea>
 800e0ba:	1b40      	subs	r0, r0, r5
 800e0bc:	6060      	str	r0, [r4, #4]
 800e0be:	6863      	ldr	r3, [r4, #4]
 800e0c0:	6123      	str	r3, [r4, #16]
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0c8:	e7aa      	b.n	800e020 <_printf_i+0x14c>
 800e0ca:	6923      	ldr	r3, [r4, #16]
 800e0cc:	462a      	mov	r2, r5
 800e0ce:	4649      	mov	r1, r9
 800e0d0:	4640      	mov	r0, r8
 800e0d2:	47d0      	blx	sl
 800e0d4:	3001      	adds	r0, #1
 800e0d6:	d0ad      	beq.n	800e034 <_printf_i+0x160>
 800e0d8:	6823      	ldr	r3, [r4, #0]
 800e0da:	079b      	lsls	r3, r3, #30
 800e0dc:	d413      	bmi.n	800e106 <_printf_i+0x232>
 800e0de:	68e0      	ldr	r0, [r4, #12]
 800e0e0:	9b03      	ldr	r3, [sp, #12]
 800e0e2:	4298      	cmp	r0, r3
 800e0e4:	bfb8      	it	lt
 800e0e6:	4618      	movlt	r0, r3
 800e0e8:	e7a6      	b.n	800e038 <_printf_i+0x164>
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	4632      	mov	r2, r6
 800e0ee:	4649      	mov	r1, r9
 800e0f0:	4640      	mov	r0, r8
 800e0f2:	47d0      	blx	sl
 800e0f4:	3001      	adds	r0, #1
 800e0f6:	d09d      	beq.n	800e034 <_printf_i+0x160>
 800e0f8:	3501      	adds	r5, #1
 800e0fa:	68e3      	ldr	r3, [r4, #12]
 800e0fc:	9903      	ldr	r1, [sp, #12]
 800e0fe:	1a5b      	subs	r3, r3, r1
 800e100:	42ab      	cmp	r3, r5
 800e102:	dcf2      	bgt.n	800e0ea <_printf_i+0x216>
 800e104:	e7eb      	b.n	800e0de <_printf_i+0x20a>
 800e106:	2500      	movs	r5, #0
 800e108:	f104 0619 	add.w	r6, r4, #25
 800e10c:	e7f5      	b.n	800e0fa <_printf_i+0x226>
 800e10e:	bf00      	nop
 800e110:	080107ba 	.word	0x080107ba
 800e114:	080107cb 	.word	0x080107cb

0800e118 <std>:
 800e118:	2300      	movs	r3, #0
 800e11a:	b510      	push	{r4, lr}
 800e11c:	4604      	mov	r4, r0
 800e11e:	e9c0 3300 	strd	r3, r3, [r0]
 800e122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e126:	6083      	str	r3, [r0, #8]
 800e128:	8181      	strh	r1, [r0, #12]
 800e12a:	6643      	str	r3, [r0, #100]	; 0x64
 800e12c:	81c2      	strh	r2, [r0, #14]
 800e12e:	6183      	str	r3, [r0, #24]
 800e130:	4619      	mov	r1, r3
 800e132:	2208      	movs	r2, #8
 800e134:	305c      	adds	r0, #92	; 0x5c
 800e136:	f000 f903 	bl	800e340 <memset>
 800e13a:	4b05      	ldr	r3, [pc, #20]	; (800e150 <std+0x38>)
 800e13c:	6263      	str	r3, [r4, #36]	; 0x24
 800e13e:	4b05      	ldr	r3, [pc, #20]	; (800e154 <std+0x3c>)
 800e140:	62a3      	str	r3, [r4, #40]	; 0x28
 800e142:	4b05      	ldr	r3, [pc, #20]	; (800e158 <std+0x40>)
 800e144:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e146:	4b05      	ldr	r3, [pc, #20]	; (800e15c <std+0x44>)
 800e148:	6224      	str	r4, [r4, #32]
 800e14a:	6323      	str	r3, [r4, #48]	; 0x30
 800e14c:	bd10      	pop	{r4, pc}
 800e14e:	bf00      	nop
 800e150:	0800e279 	.word	0x0800e279
 800e154:	0800e29b 	.word	0x0800e29b
 800e158:	0800e2d3 	.word	0x0800e2d3
 800e15c:	0800e2f7 	.word	0x0800e2f7

0800e160 <stdio_exit_handler>:
 800e160:	4a02      	ldr	r2, [pc, #8]	; (800e16c <stdio_exit_handler+0xc>)
 800e162:	4903      	ldr	r1, [pc, #12]	; (800e170 <stdio_exit_handler+0x10>)
 800e164:	4803      	ldr	r0, [pc, #12]	; (800e174 <stdio_exit_handler+0x14>)
 800e166:	f000 b869 	b.w	800e23c <_fwalk_sglue>
 800e16a:	bf00      	nop
 800e16c:	20000088 	.word	0x20000088
 800e170:	0800feb1 	.word	0x0800feb1
 800e174:	20000094 	.word	0x20000094

0800e178 <cleanup_stdio>:
 800e178:	6841      	ldr	r1, [r0, #4]
 800e17a:	4b0c      	ldr	r3, [pc, #48]	; (800e1ac <cleanup_stdio+0x34>)
 800e17c:	4299      	cmp	r1, r3
 800e17e:	b510      	push	{r4, lr}
 800e180:	4604      	mov	r4, r0
 800e182:	d001      	beq.n	800e188 <cleanup_stdio+0x10>
 800e184:	f001 fe94 	bl	800feb0 <_fflush_r>
 800e188:	68a1      	ldr	r1, [r4, #8]
 800e18a:	4b09      	ldr	r3, [pc, #36]	; (800e1b0 <cleanup_stdio+0x38>)
 800e18c:	4299      	cmp	r1, r3
 800e18e:	d002      	beq.n	800e196 <cleanup_stdio+0x1e>
 800e190:	4620      	mov	r0, r4
 800e192:	f001 fe8d 	bl	800feb0 <_fflush_r>
 800e196:	68e1      	ldr	r1, [r4, #12]
 800e198:	4b06      	ldr	r3, [pc, #24]	; (800e1b4 <cleanup_stdio+0x3c>)
 800e19a:	4299      	cmp	r1, r3
 800e19c:	d004      	beq.n	800e1a8 <cleanup_stdio+0x30>
 800e19e:	4620      	mov	r0, r4
 800e1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1a4:	f001 be84 	b.w	800feb0 <_fflush_r>
 800e1a8:	bd10      	pop	{r4, pc}
 800e1aa:	bf00      	nop
 800e1ac:	200057a8 	.word	0x200057a8
 800e1b0:	20005810 	.word	0x20005810
 800e1b4:	20005878 	.word	0x20005878

0800e1b8 <global_stdio_init.part.0>:
 800e1b8:	b510      	push	{r4, lr}
 800e1ba:	4b0b      	ldr	r3, [pc, #44]	; (800e1e8 <global_stdio_init.part.0+0x30>)
 800e1bc:	4c0b      	ldr	r4, [pc, #44]	; (800e1ec <global_stdio_init.part.0+0x34>)
 800e1be:	4a0c      	ldr	r2, [pc, #48]	; (800e1f0 <global_stdio_init.part.0+0x38>)
 800e1c0:	601a      	str	r2, [r3, #0]
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	2104      	movs	r1, #4
 800e1c8:	f7ff ffa6 	bl	800e118 <std>
 800e1cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	2109      	movs	r1, #9
 800e1d4:	f7ff ffa0 	bl	800e118 <std>
 800e1d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e1dc:	2202      	movs	r2, #2
 800e1de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1e2:	2112      	movs	r1, #18
 800e1e4:	f7ff bf98 	b.w	800e118 <std>
 800e1e8:	200058e0 	.word	0x200058e0
 800e1ec:	200057a8 	.word	0x200057a8
 800e1f0:	0800e161 	.word	0x0800e161

0800e1f4 <__sfp_lock_acquire>:
 800e1f4:	4801      	ldr	r0, [pc, #4]	; (800e1fc <__sfp_lock_acquire+0x8>)
 800e1f6:	f000 b975 	b.w	800e4e4 <__retarget_lock_acquire_recursive>
 800e1fa:	bf00      	nop
 800e1fc:	200058e9 	.word	0x200058e9

0800e200 <__sfp_lock_release>:
 800e200:	4801      	ldr	r0, [pc, #4]	; (800e208 <__sfp_lock_release+0x8>)
 800e202:	f000 b970 	b.w	800e4e6 <__retarget_lock_release_recursive>
 800e206:	bf00      	nop
 800e208:	200058e9 	.word	0x200058e9

0800e20c <__sinit>:
 800e20c:	b510      	push	{r4, lr}
 800e20e:	4604      	mov	r4, r0
 800e210:	f7ff fff0 	bl	800e1f4 <__sfp_lock_acquire>
 800e214:	6a23      	ldr	r3, [r4, #32]
 800e216:	b11b      	cbz	r3, 800e220 <__sinit+0x14>
 800e218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e21c:	f7ff bff0 	b.w	800e200 <__sfp_lock_release>
 800e220:	4b04      	ldr	r3, [pc, #16]	; (800e234 <__sinit+0x28>)
 800e222:	6223      	str	r3, [r4, #32]
 800e224:	4b04      	ldr	r3, [pc, #16]	; (800e238 <__sinit+0x2c>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d1f5      	bne.n	800e218 <__sinit+0xc>
 800e22c:	f7ff ffc4 	bl	800e1b8 <global_stdio_init.part.0>
 800e230:	e7f2      	b.n	800e218 <__sinit+0xc>
 800e232:	bf00      	nop
 800e234:	0800e179 	.word	0x0800e179
 800e238:	200058e0 	.word	0x200058e0

0800e23c <_fwalk_sglue>:
 800e23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e240:	4607      	mov	r7, r0
 800e242:	4688      	mov	r8, r1
 800e244:	4614      	mov	r4, r2
 800e246:	2600      	movs	r6, #0
 800e248:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e24c:	f1b9 0901 	subs.w	r9, r9, #1
 800e250:	d505      	bpl.n	800e25e <_fwalk_sglue+0x22>
 800e252:	6824      	ldr	r4, [r4, #0]
 800e254:	2c00      	cmp	r4, #0
 800e256:	d1f7      	bne.n	800e248 <_fwalk_sglue+0xc>
 800e258:	4630      	mov	r0, r6
 800e25a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e25e:	89ab      	ldrh	r3, [r5, #12]
 800e260:	2b01      	cmp	r3, #1
 800e262:	d907      	bls.n	800e274 <_fwalk_sglue+0x38>
 800e264:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e268:	3301      	adds	r3, #1
 800e26a:	d003      	beq.n	800e274 <_fwalk_sglue+0x38>
 800e26c:	4629      	mov	r1, r5
 800e26e:	4638      	mov	r0, r7
 800e270:	47c0      	blx	r8
 800e272:	4306      	orrs	r6, r0
 800e274:	3568      	adds	r5, #104	; 0x68
 800e276:	e7e9      	b.n	800e24c <_fwalk_sglue+0x10>

0800e278 <__sread>:
 800e278:	b510      	push	{r4, lr}
 800e27a:	460c      	mov	r4, r1
 800e27c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e280:	f000 f8e2 	bl	800e448 <_read_r>
 800e284:	2800      	cmp	r0, #0
 800e286:	bfab      	itete	ge
 800e288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e28a:	89a3      	ldrhlt	r3, [r4, #12]
 800e28c:	181b      	addge	r3, r3, r0
 800e28e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e292:	bfac      	ite	ge
 800e294:	6563      	strge	r3, [r4, #84]	; 0x54
 800e296:	81a3      	strhlt	r3, [r4, #12]
 800e298:	bd10      	pop	{r4, pc}

0800e29a <__swrite>:
 800e29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e29e:	461f      	mov	r7, r3
 800e2a0:	898b      	ldrh	r3, [r1, #12]
 800e2a2:	05db      	lsls	r3, r3, #23
 800e2a4:	4605      	mov	r5, r0
 800e2a6:	460c      	mov	r4, r1
 800e2a8:	4616      	mov	r6, r2
 800e2aa:	d505      	bpl.n	800e2b8 <__swrite+0x1e>
 800e2ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2b0:	2302      	movs	r3, #2
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	f000 f8b6 	bl	800e424 <_lseek_r>
 800e2b8:	89a3      	ldrh	r3, [r4, #12]
 800e2ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e2c2:	81a3      	strh	r3, [r4, #12]
 800e2c4:	4632      	mov	r2, r6
 800e2c6:	463b      	mov	r3, r7
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ce:	f000 b8cd 	b.w	800e46c <_write_r>

0800e2d2 <__sseek>:
 800e2d2:	b510      	push	{r4, lr}
 800e2d4:	460c      	mov	r4, r1
 800e2d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2da:	f000 f8a3 	bl	800e424 <_lseek_r>
 800e2de:	1c43      	adds	r3, r0, #1
 800e2e0:	89a3      	ldrh	r3, [r4, #12]
 800e2e2:	bf15      	itete	ne
 800e2e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e2e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e2ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e2ee:	81a3      	strheq	r3, [r4, #12]
 800e2f0:	bf18      	it	ne
 800e2f2:	81a3      	strhne	r3, [r4, #12]
 800e2f4:	bd10      	pop	{r4, pc}

0800e2f6 <__sclose>:
 800e2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2fa:	f000 b82d 	b.w	800e358 <_close_r>
	...

0800e300 <_vsiprintf_r>:
 800e300:	b500      	push	{lr}
 800e302:	b09b      	sub	sp, #108	; 0x6c
 800e304:	9100      	str	r1, [sp, #0]
 800e306:	9104      	str	r1, [sp, #16]
 800e308:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e30c:	9105      	str	r1, [sp, #20]
 800e30e:	9102      	str	r1, [sp, #8]
 800e310:	4905      	ldr	r1, [pc, #20]	; (800e328 <_vsiprintf_r+0x28>)
 800e312:	9103      	str	r1, [sp, #12]
 800e314:	4669      	mov	r1, sp
 800e316:	f001 fc47 	bl	800fba8 <_svfiprintf_r>
 800e31a:	9b00      	ldr	r3, [sp, #0]
 800e31c:	2200      	movs	r2, #0
 800e31e:	701a      	strb	r2, [r3, #0]
 800e320:	b01b      	add	sp, #108	; 0x6c
 800e322:	f85d fb04 	ldr.w	pc, [sp], #4
 800e326:	bf00      	nop
 800e328:	ffff0208 	.word	0xffff0208

0800e32c <vsiprintf>:
 800e32c:	4613      	mov	r3, r2
 800e32e:	460a      	mov	r2, r1
 800e330:	4601      	mov	r1, r0
 800e332:	4802      	ldr	r0, [pc, #8]	; (800e33c <vsiprintf+0x10>)
 800e334:	6800      	ldr	r0, [r0, #0]
 800e336:	f7ff bfe3 	b.w	800e300 <_vsiprintf_r>
 800e33a:	bf00      	nop
 800e33c:	200000e0 	.word	0x200000e0

0800e340 <memset>:
 800e340:	4402      	add	r2, r0
 800e342:	4603      	mov	r3, r0
 800e344:	4293      	cmp	r3, r2
 800e346:	d100      	bne.n	800e34a <memset+0xa>
 800e348:	4770      	bx	lr
 800e34a:	f803 1b01 	strb.w	r1, [r3], #1
 800e34e:	e7f9      	b.n	800e344 <memset+0x4>

0800e350 <_localeconv_r>:
 800e350:	4800      	ldr	r0, [pc, #0]	; (800e354 <_localeconv_r+0x4>)
 800e352:	4770      	bx	lr
 800e354:	200001d4 	.word	0x200001d4

0800e358 <_close_r>:
 800e358:	b538      	push	{r3, r4, r5, lr}
 800e35a:	4d06      	ldr	r5, [pc, #24]	; (800e374 <_close_r+0x1c>)
 800e35c:	2300      	movs	r3, #0
 800e35e:	4604      	mov	r4, r0
 800e360:	4608      	mov	r0, r1
 800e362:	602b      	str	r3, [r5, #0]
 800e364:	f7f6 fb73 	bl	8004a4e <_close>
 800e368:	1c43      	adds	r3, r0, #1
 800e36a:	d102      	bne.n	800e372 <_close_r+0x1a>
 800e36c:	682b      	ldr	r3, [r5, #0]
 800e36e:	b103      	cbz	r3, 800e372 <_close_r+0x1a>
 800e370:	6023      	str	r3, [r4, #0]
 800e372:	bd38      	pop	{r3, r4, r5, pc}
 800e374:	200058e4 	.word	0x200058e4

0800e378 <_reclaim_reent>:
 800e378:	4b29      	ldr	r3, [pc, #164]	; (800e420 <_reclaim_reent+0xa8>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4283      	cmp	r3, r0
 800e37e:	b570      	push	{r4, r5, r6, lr}
 800e380:	4604      	mov	r4, r0
 800e382:	d04b      	beq.n	800e41c <_reclaim_reent+0xa4>
 800e384:	69c3      	ldr	r3, [r0, #28]
 800e386:	b143      	cbz	r3, 800e39a <_reclaim_reent+0x22>
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d144      	bne.n	800e418 <_reclaim_reent+0xa0>
 800e38e:	69e3      	ldr	r3, [r4, #28]
 800e390:	6819      	ldr	r1, [r3, #0]
 800e392:	b111      	cbz	r1, 800e39a <_reclaim_reent+0x22>
 800e394:	4620      	mov	r0, r4
 800e396:	f000 ff31 	bl	800f1fc <_free_r>
 800e39a:	6961      	ldr	r1, [r4, #20]
 800e39c:	b111      	cbz	r1, 800e3a4 <_reclaim_reent+0x2c>
 800e39e:	4620      	mov	r0, r4
 800e3a0:	f000 ff2c 	bl	800f1fc <_free_r>
 800e3a4:	69e1      	ldr	r1, [r4, #28]
 800e3a6:	b111      	cbz	r1, 800e3ae <_reclaim_reent+0x36>
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	f000 ff27 	bl	800f1fc <_free_r>
 800e3ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e3b0:	b111      	cbz	r1, 800e3b8 <_reclaim_reent+0x40>
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	f000 ff22 	bl	800f1fc <_free_r>
 800e3b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3ba:	b111      	cbz	r1, 800e3c2 <_reclaim_reent+0x4a>
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f000 ff1d 	bl	800f1fc <_free_r>
 800e3c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e3c4:	b111      	cbz	r1, 800e3cc <_reclaim_reent+0x54>
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	f000 ff18 	bl	800f1fc <_free_r>
 800e3cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e3ce:	b111      	cbz	r1, 800e3d6 <_reclaim_reent+0x5e>
 800e3d0:	4620      	mov	r0, r4
 800e3d2:	f000 ff13 	bl	800f1fc <_free_r>
 800e3d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e3d8:	b111      	cbz	r1, 800e3e0 <_reclaim_reent+0x68>
 800e3da:	4620      	mov	r0, r4
 800e3dc:	f000 ff0e 	bl	800f1fc <_free_r>
 800e3e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e3e2:	b111      	cbz	r1, 800e3ea <_reclaim_reent+0x72>
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	f000 ff09 	bl	800f1fc <_free_r>
 800e3ea:	6a23      	ldr	r3, [r4, #32]
 800e3ec:	b1b3      	cbz	r3, 800e41c <_reclaim_reent+0xa4>
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e3f4:	4718      	bx	r3
 800e3f6:	5949      	ldr	r1, [r1, r5]
 800e3f8:	b941      	cbnz	r1, 800e40c <_reclaim_reent+0x94>
 800e3fa:	3504      	adds	r5, #4
 800e3fc:	69e3      	ldr	r3, [r4, #28]
 800e3fe:	2d80      	cmp	r5, #128	; 0x80
 800e400:	68d9      	ldr	r1, [r3, #12]
 800e402:	d1f8      	bne.n	800e3f6 <_reclaim_reent+0x7e>
 800e404:	4620      	mov	r0, r4
 800e406:	f000 fef9 	bl	800f1fc <_free_r>
 800e40a:	e7c0      	b.n	800e38e <_reclaim_reent+0x16>
 800e40c:	680e      	ldr	r6, [r1, #0]
 800e40e:	4620      	mov	r0, r4
 800e410:	f000 fef4 	bl	800f1fc <_free_r>
 800e414:	4631      	mov	r1, r6
 800e416:	e7ef      	b.n	800e3f8 <_reclaim_reent+0x80>
 800e418:	2500      	movs	r5, #0
 800e41a:	e7ef      	b.n	800e3fc <_reclaim_reent+0x84>
 800e41c:	bd70      	pop	{r4, r5, r6, pc}
 800e41e:	bf00      	nop
 800e420:	200000e0 	.word	0x200000e0

0800e424 <_lseek_r>:
 800e424:	b538      	push	{r3, r4, r5, lr}
 800e426:	4d07      	ldr	r5, [pc, #28]	; (800e444 <_lseek_r+0x20>)
 800e428:	4604      	mov	r4, r0
 800e42a:	4608      	mov	r0, r1
 800e42c:	4611      	mov	r1, r2
 800e42e:	2200      	movs	r2, #0
 800e430:	602a      	str	r2, [r5, #0]
 800e432:	461a      	mov	r2, r3
 800e434:	f7f6 fb32 	bl	8004a9c <_lseek>
 800e438:	1c43      	adds	r3, r0, #1
 800e43a:	d102      	bne.n	800e442 <_lseek_r+0x1e>
 800e43c:	682b      	ldr	r3, [r5, #0]
 800e43e:	b103      	cbz	r3, 800e442 <_lseek_r+0x1e>
 800e440:	6023      	str	r3, [r4, #0]
 800e442:	bd38      	pop	{r3, r4, r5, pc}
 800e444:	200058e4 	.word	0x200058e4

0800e448 <_read_r>:
 800e448:	b538      	push	{r3, r4, r5, lr}
 800e44a:	4d07      	ldr	r5, [pc, #28]	; (800e468 <_read_r+0x20>)
 800e44c:	4604      	mov	r4, r0
 800e44e:	4608      	mov	r0, r1
 800e450:	4611      	mov	r1, r2
 800e452:	2200      	movs	r2, #0
 800e454:	602a      	str	r2, [r5, #0]
 800e456:	461a      	mov	r2, r3
 800e458:	f7f6 fac0 	bl	80049dc <_read>
 800e45c:	1c43      	adds	r3, r0, #1
 800e45e:	d102      	bne.n	800e466 <_read_r+0x1e>
 800e460:	682b      	ldr	r3, [r5, #0]
 800e462:	b103      	cbz	r3, 800e466 <_read_r+0x1e>
 800e464:	6023      	str	r3, [r4, #0]
 800e466:	bd38      	pop	{r3, r4, r5, pc}
 800e468:	200058e4 	.word	0x200058e4

0800e46c <_write_r>:
 800e46c:	b538      	push	{r3, r4, r5, lr}
 800e46e:	4d07      	ldr	r5, [pc, #28]	; (800e48c <_write_r+0x20>)
 800e470:	4604      	mov	r4, r0
 800e472:	4608      	mov	r0, r1
 800e474:	4611      	mov	r1, r2
 800e476:	2200      	movs	r2, #0
 800e478:	602a      	str	r2, [r5, #0]
 800e47a:	461a      	mov	r2, r3
 800e47c:	f7f6 facb 	bl	8004a16 <_write>
 800e480:	1c43      	adds	r3, r0, #1
 800e482:	d102      	bne.n	800e48a <_write_r+0x1e>
 800e484:	682b      	ldr	r3, [r5, #0]
 800e486:	b103      	cbz	r3, 800e48a <_write_r+0x1e>
 800e488:	6023      	str	r3, [r4, #0]
 800e48a:	bd38      	pop	{r3, r4, r5, pc}
 800e48c:	200058e4 	.word	0x200058e4

0800e490 <__errno>:
 800e490:	4b01      	ldr	r3, [pc, #4]	; (800e498 <__errno+0x8>)
 800e492:	6818      	ldr	r0, [r3, #0]
 800e494:	4770      	bx	lr
 800e496:	bf00      	nop
 800e498:	200000e0 	.word	0x200000e0

0800e49c <__libc_init_array>:
 800e49c:	b570      	push	{r4, r5, r6, lr}
 800e49e:	4d0d      	ldr	r5, [pc, #52]	; (800e4d4 <__libc_init_array+0x38>)
 800e4a0:	4c0d      	ldr	r4, [pc, #52]	; (800e4d8 <__libc_init_array+0x3c>)
 800e4a2:	1b64      	subs	r4, r4, r5
 800e4a4:	10a4      	asrs	r4, r4, #2
 800e4a6:	2600      	movs	r6, #0
 800e4a8:	42a6      	cmp	r6, r4
 800e4aa:	d109      	bne.n	800e4c0 <__libc_init_array+0x24>
 800e4ac:	4d0b      	ldr	r5, [pc, #44]	; (800e4dc <__libc_init_array+0x40>)
 800e4ae:	4c0c      	ldr	r4, [pc, #48]	; (800e4e0 <__libc_init_array+0x44>)
 800e4b0:	f002 f894 	bl	80105dc <_init>
 800e4b4:	1b64      	subs	r4, r4, r5
 800e4b6:	10a4      	asrs	r4, r4, #2
 800e4b8:	2600      	movs	r6, #0
 800e4ba:	42a6      	cmp	r6, r4
 800e4bc:	d105      	bne.n	800e4ca <__libc_init_array+0x2e>
 800e4be:	bd70      	pop	{r4, r5, r6, pc}
 800e4c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4c4:	4798      	blx	r3
 800e4c6:	3601      	adds	r6, #1
 800e4c8:	e7ee      	b.n	800e4a8 <__libc_init_array+0xc>
 800e4ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4ce:	4798      	blx	r3
 800e4d0:	3601      	adds	r6, #1
 800e4d2:	e7f2      	b.n	800e4ba <__libc_init_array+0x1e>
 800e4d4:	08010b24 	.word	0x08010b24
 800e4d8:	08010b24 	.word	0x08010b24
 800e4dc:	08010b24 	.word	0x08010b24
 800e4e0:	08010b28 	.word	0x08010b28

0800e4e4 <__retarget_lock_acquire_recursive>:
 800e4e4:	4770      	bx	lr

0800e4e6 <__retarget_lock_release_recursive>:
 800e4e6:	4770      	bx	lr

0800e4e8 <memcpy>:
 800e4e8:	440a      	add	r2, r1
 800e4ea:	4291      	cmp	r1, r2
 800e4ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4f0:	d100      	bne.n	800e4f4 <memcpy+0xc>
 800e4f2:	4770      	bx	lr
 800e4f4:	b510      	push	{r4, lr}
 800e4f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4fe:	4291      	cmp	r1, r2
 800e500:	d1f9      	bne.n	800e4f6 <memcpy+0xe>
 800e502:	bd10      	pop	{r4, pc}

0800e504 <quorem>:
 800e504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e508:	6903      	ldr	r3, [r0, #16]
 800e50a:	690c      	ldr	r4, [r1, #16]
 800e50c:	42a3      	cmp	r3, r4
 800e50e:	4607      	mov	r7, r0
 800e510:	db7e      	blt.n	800e610 <quorem+0x10c>
 800e512:	3c01      	subs	r4, #1
 800e514:	f101 0814 	add.w	r8, r1, #20
 800e518:	f100 0514 	add.w	r5, r0, #20
 800e51c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e520:	9301      	str	r3, [sp, #4]
 800e522:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e526:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e52a:	3301      	adds	r3, #1
 800e52c:	429a      	cmp	r2, r3
 800e52e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e532:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e536:	fbb2 f6f3 	udiv	r6, r2, r3
 800e53a:	d331      	bcc.n	800e5a0 <quorem+0x9c>
 800e53c:	f04f 0e00 	mov.w	lr, #0
 800e540:	4640      	mov	r0, r8
 800e542:	46ac      	mov	ip, r5
 800e544:	46f2      	mov	sl, lr
 800e546:	f850 2b04 	ldr.w	r2, [r0], #4
 800e54a:	b293      	uxth	r3, r2
 800e54c:	fb06 e303 	mla	r3, r6, r3, lr
 800e550:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e554:	0c1a      	lsrs	r2, r3, #16
 800e556:	b29b      	uxth	r3, r3
 800e558:	ebaa 0303 	sub.w	r3, sl, r3
 800e55c:	f8dc a000 	ldr.w	sl, [ip]
 800e560:	fa13 f38a 	uxtah	r3, r3, sl
 800e564:	fb06 220e 	mla	r2, r6, lr, r2
 800e568:	9300      	str	r3, [sp, #0]
 800e56a:	9b00      	ldr	r3, [sp, #0]
 800e56c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e570:	b292      	uxth	r2, r2
 800e572:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e576:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e57a:	f8bd 3000 	ldrh.w	r3, [sp]
 800e57e:	4581      	cmp	r9, r0
 800e580:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e584:	f84c 3b04 	str.w	r3, [ip], #4
 800e588:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e58c:	d2db      	bcs.n	800e546 <quorem+0x42>
 800e58e:	f855 300b 	ldr.w	r3, [r5, fp]
 800e592:	b92b      	cbnz	r3, 800e5a0 <quorem+0x9c>
 800e594:	9b01      	ldr	r3, [sp, #4]
 800e596:	3b04      	subs	r3, #4
 800e598:	429d      	cmp	r5, r3
 800e59a:	461a      	mov	r2, r3
 800e59c:	d32c      	bcc.n	800e5f8 <quorem+0xf4>
 800e59e:	613c      	str	r4, [r7, #16]
 800e5a0:	4638      	mov	r0, r7
 800e5a2:	f001 f9a7 	bl	800f8f4 <__mcmp>
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	db22      	blt.n	800e5f0 <quorem+0xec>
 800e5aa:	3601      	adds	r6, #1
 800e5ac:	4629      	mov	r1, r5
 800e5ae:	2000      	movs	r0, #0
 800e5b0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e5b4:	f8d1 c000 	ldr.w	ip, [r1]
 800e5b8:	b293      	uxth	r3, r2
 800e5ba:	1ac3      	subs	r3, r0, r3
 800e5bc:	0c12      	lsrs	r2, r2, #16
 800e5be:	fa13 f38c 	uxtah	r3, r3, ip
 800e5c2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e5c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e5ca:	b29b      	uxth	r3, r3
 800e5cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5d0:	45c1      	cmp	r9, r8
 800e5d2:	f841 3b04 	str.w	r3, [r1], #4
 800e5d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e5da:	d2e9      	bcs.n	800e5b0 <quorem+0xac>
 800e5dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e5e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e5e4:	b922      	cbnz	r2, 800e5f0 <quorem+0xec>
 800e5e6:	3b04      	subs	r3, #4
 800e5e8:	429d      	cmp	r5, r3
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	d30a      	bcc.n	800e604 <quorem+0x100>
 800e5ee:	613c      	str	r4, [r7, #16]
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	b003      	add	sp, #12
 800e5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5f8:	6812      	ldr	r2, [r2, #0]
 800e5fa:	3b04      	subs	r3, #4
 800e5fc:	2a00      	cmp	r2, #0
 800e5fe:	d1ce      	bne.n	800e59e <quorem+0x9a>
 800e600:	3c01      	subs	r4, #1
 800e602:	e7c9      	b.n	800e598 <quorem+0x94>
 800e604:	6812      	ldr	r2, [r2, #0]
 800e606:	3b04      	subs	r3, #4
 800e608:	2a00      	cmp	r2, #0
 800e60a:	d1f0      	bne.n	800e5ee <quorem+0xea>
 800e60c:	3c01      	subs	r4, #1
 800e60e:	e7eb      	b.n	800e5e8 <quorem+0xe4>
 800e610:	2000      	movs	r0, #0
 800e612:	e7ee      	b.n	800e5f2 <quorem+0xee>
 800e614:	0000      	movs	r0, r0
	...

0800e618 <_dtoa_r>:
 800e618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e61c:	ed2d 8b04 	vpush	{d8-d9}
 800e620:	69c5      	ldr	r5, [r0, #28]
 800e622:	b093      	sub	sp, #76	; 0x4c
 800e624:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e628:	ec57 6b10 	vmov	r6, r7, d0
 800e62c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e630:	9107      	str	r1, [sp, #28]
 800e632:	4604      	mov	r4, r0
 800e634:	920a      	str	r2, [sp, #40]	; 0x28
 800e636:	930d      	str	r3, [sp, #52]	; 0x34
 800e638:	b975      	cbnz	r5, 800e658 <_dtoa_r+0x40>
 800e63a:	2010      	movs	r0, #16
 800e63c:	f000 fe2a 	bl	800f294 <malloc>
 800e640:	4602      	mov	r2, r0
 800e642:	61e0      	str	r0, [r4, #28]
 800e644:	b920      	cbnz	r0, 800e650 <_dtoa_r+0x38>
 800e646:	4bae      	ldr	r3, [pc, #696]	; (800e900 <_dtoa_r+0x2e8>)
 800e648:	21ef      	movs	r1, #239	; 0xef
 800e64a:	48ae      	ldr	r0, [pc, #696]	; (800e904 <_dtoa_r+0x2ec>)
 800e64c:	f001 fc82 	bl	800ff54 <__assert_func>
 800e650:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e654:	6005      	str	r5, [r0, #0]
 800e656:	60c5      	str	r5, [r0, #12]
 800e658:	69e3      	ldr	r3, [r4, #28]
 800e65a:	6819      	ldr	r1, [r3, #0]
 800e65c:	b151      	cbz	r1, 800e674 <_dtoa_r+0x5c>
 800e65e:	685a      	ldr	r2, [r3, #4]
 800e660:	604a      	str	r2, [r1, #4]
 800e662:	2301      	movs	r3, #1
 800e664:	4093      	lsls	r3, r2
 800e666:	608b      	str	r3, [r1, #8]
 800e668:	4620      	mov	r0, r4
 800e66a:	f000 ff07 	bl	800f47c <_Bfree>
 800e66e:	69e3      	ldr	r3, [r4, #28]
 800e670:	2200      	movs	r2, #0
 800e672:	601a      	str	r2, [r3, #0]
 800e674:	1e3b      	subs	r3, r7, #0
 800e676:	bfbb      	ittet	lt
 800e678:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e67c:	9303      	strlt	r3, [sp, #12]
 800e67e:	2300      	movge	r3, #0
 800e680:	2201      	movlt	r2, #1
 800e682:	bfac      	ite	ge
 800e684:	f8c8 3000 	strge.w	r3, [r8]
 800e688:	f8c8 2000 	strlt.w	r2, [r8]
 800e68c:	4b9e      	ldr	r3, [pc, #632]	; (800e908 <_dtoa_r+0x2f0>)
 800e68e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e692:	ea33 0308 	bics.w	r3, r3, r8
 800e696:	d11b      	bne.n	800e6d0 <_dtoa_r+0xb8>
 800e698:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e69a:	f242 730f 	movw	r3, #9999	; 0x270f
 800e69e:	6013      	str	r3, [r2, #0]
 800e6a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e6a4:	4333      	orrs	r3, r6
 800e6a6:	f000 8593 	beq.w	800f1d0 <_dtoa_r+0xbb8>
 800e6aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6ac:	b963      	cbnz	r3, 800e6c8 <_dtoa_r+0xb0>
 800e6ae:	4b97      	ldr	r3, [pc, #604]	; (800e90c <_dtoa_r+0x2f4>)
 800e6b0:	e027      	b.n	800e702 <_dtoa_r+0xea>
 800e6b2:	4b97      	ldr	r3, [pc, #604]	; (800e910 <_dtoa_r+0x2f8>)
 800e6b4:	9300      	str	r3, [sp, #0]
 800e6b6:	3308      	adds	r3, #8
 800e6b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e6ba:	6013      	str	r3, [r2, #0]
 800e6bc:	9800      	ldr	r0, [sp, #0]
 800e6be:	b013      	add	sp, #76	; 0x4c
 800e6c0:	ecbd 8b04 	vpop	{d8-d9}
 800e6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6c8:	4b90      	ldr	r3, [pc, #576]	; (800e90c <_dtoa_r+0x2f4>)
 800e6ca:	9300      	str	r3, [sp, #0]
 800e6cc:	3303      	adds	r3, #3
 800e6ce:	e7f3      	b.n	800e6b8 <_dtoa_r+0xa0>
 800e6d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	ec51 0b17 	vmov	r0, r1, d7
 800e6da:	eeb0 8a47 	vmov.f32	s16, s14
 800e6de:	eef0 8a67 	vmov.f32	s17, s15
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	f7f2 f9f0 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6e8:	4681      	mov	r9, r0
 800e6ea:	b160      	cbz	r0, 800e706 <_dtoa_r+0xee>
 800e6ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	6013      	str	r3, [r2, #0]
 800e6f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	f000 8568 	beq.w	800f1ca <_dtoa_r+0xbb2>
 800e6fa:	4b86      	ldr	r3, [pc, #536]	; (800e914 <_dtoa_r+0x2fc>)
 800e6fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e6fe:	6013      	str	r3, [r2, #0]
 800e700:	3b01      	subs	r3, #1
 800e702:	9300      	str	r3, [sp, #0]
 800e704:	e7da      	b.n	800e6bc <_dtoa_r+0xa4>
 800e706:	aa10      	add	r2, sp, #64	; 0x40
 800e708:	a911      	add	r1, sp, #68	; 0x44
 800e70a:	4620      	mov	r0, r4
 800e70c:	eeb0 0a48 	vmov.f32	s0, s16
 800e710:	eef0 0a68 	vmov.f32	s1, s17
 800e714:	f001 f994 	bl	800fa40 <__d2b>
 800e718:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e71c:	4682      	mov	sl, r0
 800e71e:	2d00      	cmp	r5, #0
 800e720:	d07f      	beq.n	800e822 <_dtoa_r+0x20a>
 800e722:	ee18 3a90 	vmov	r3, s17
 800e726:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e72a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e72e:	ec51 0b18 	vmov	r0, r1, d8
 800e732:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e736:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e73a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e73e:	4619      	mov	r1, r3
 800e740:	2200      	movs	r2, #0
 800e742:	4b75      	ldr	r3, [pc, #468]	; (800e918 <_dtoa_r+0x300>)
 800e744:	f7f1 fda0 	bl	8000288 <__aeabi_dsub>
 800e748:	a367      	add	r3, pc, #412	; (adr r3, 800e8e8 <_dtoa_r+0x2d0>)
 800e74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74e:	f7f1 ff53 	bl	80005f8 <__aeabi_dmul>
 800e752:	a367      	add	r3, pc, #412	; (adr r3, 800e8f0 <_dtoa_r+0x2d8>)
 800e754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e758:	f7f1 fd98 	bl	800028c <__adddf3>
 800e75c:	4606      	mov	r6, r0
 800e75e:	4628      	mov	r0, r5
 800e760:	460f      	mov	r7, r1
 800e762:	f7f1 fedf 	bl	8000524 <__aeabi_i2d>
 800e766:	a364      	add	r3, pc, #400	; (adr r3, 800e8f8 <_dtoa_r+0x2e0>)
 800e768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76c:	f7f1 ff44 	bl	80005f8 <__aeabi_dmul>
 800e770:	4602      	mov	r2, r0
 800e772:	460b      	mov	r3, r1
 800e774:	4630      	mov	r0, r6
 800e776:	4639      	mov	r1, r7
 800e778:	f7f1 fd88 	bl	800028c <__adddf3>
 800e77c:	4606      	mov	r6, r0
 800e77e:	460f      	mov	r7, r1
 800e780:	f7f2 f9ea 	bl	8000b58 <__aeabi_d2iz>
 800e784:	2200      	movs	r2, #0
 800e786:	4683      	mov	fp, r0
 800e788:	2300      	movs	r3, #0
 800e78a:	4630      	mov	r0, r6
 800e78c:	4639      	mov	r1, r7
 800e78e:	f7f2 f9a5 	bl	8000adc <__aeabi_dcmplt>
 800e792:	b148      	cbz	r0, 800e7a8 <_dtoa_r+0x190>
 800e794:	4658      	mov	r0, fp
 800e796:	f7f1 fec5 	bl	8000524 <__aeabi_i2d>
 800e79a:	4632      	mov	r2, r6
 800e79c:	463b      	mov	r3, r7
 800e79e:	f7f2 f993 	bl	8000ac8 <__aeabi_dcmpeq>
 800e7a2:	b908      	cbnz	r0, 800e7a8 <_dtoa_r+0x190>
 800e7a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e7a8:	f1bb 0f16 	cmp.w	fp, #22
 800e7ac:	d857      	bhi.n	800e85e <_dtoa_r+0x246>
 800e7ae:	4b5b      	ldr	r3, [pc, #364]	; (800e91c <_dtoa_r+0x304>)
 800e7b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b8:	ec51 0b18 	vmov	r0, r1, d8
 800e7bc:	f7f2 f98e 	bl	8000adc <__aeabi_dcmplt>
 800e7c0:	2800      	cmp	r0, #0
 800e7c2:	d04e      	beq.n	800e862 <_dtoa_r+0x24a>
 800e7c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	930c      	str	r3, [sp, #48]	; 0x30
 800e7cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e7ce:	1b5b      	subs	r3, r3, r5
 800e7d0:	1e5a      	subs	r2, r3, #1
 800e7d2:	bf45      	ittet	mi
 800e7d4:	f1c3 0301 	rsbmi	r3, r3, #1
 800e7d8:	9305      	strmi	r3, [sp, #20]
 800e7da:	2300      	movpl	r3, #0
 800e7dc:	2300      	movmi	r3, #0
 800e7de:	9206      	str	r2, [sp, #24]
 800e7e0:	bf54      	ite	pl
 800e7e2:	9305      	strpl	r3, [sp, #20]
 800e7e4:	9306      	strmi	r3, [sp, #24]
 800e7e6:	f1bb 0f00 	cmp.w	fp, #0
 800e7ea:	db3c      	blt.n	800e866 <_dtoa_r+0x24e>
 800e7ec:	9b06      	ldr	r3, [sp, #24]
 800e7ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e7f2:	445b      	add	r3, fp
 800e7f4:	9306      	str	r3, [sp, #24]
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	9308      	str	r3, [sp, #32]
 800e7fa:	9b07      	ldr	r3, [sp, #28]
 800e7fc:	2b09      	cmp	r3, #9
 800e7fe:	d868      	bhi.n	800e8d2 <_dtoa_r+0x2ba>
 800e800:	2b05      	cmp	r3, #5
 800e802:	bfc4      	itt	gt
 800e804:	3b04      	subgt	r3, #4
 800e806:	9307      	strgt	r3, [sp, #28]
 800e808:	9b07      	ldr	r3, [sp, #28]
 800e80a:	f1a3 0302 	sub.w	r3, r3, #2
 800e80e:	bfcc      	ite	gt
 800e810:	2500      	movgt	r5, #0
 800e812:	2501      	movle	r5, #1
 800e814:	2b03      	cmp	r3, #3
 800e816:	f200 8085 	bhi.w	800e924 <_dtoa_r+0x30c>
 800e81a:	e8df f003 	tbb	[pc, r3]
 800e81e:	3b2e      	.short	0x3b2e
 800e820:	5839      	.short	0x5839
 800e822:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e826:	441d      	add	r5, r3
 800e828:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e82c:	2b20      	cmp	r3, #32
 800e82e:	bfc1      	itttt	gt
 800e830:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e834:	fa08 f803 	lslgt.w	r8, r8, r3
 800e838:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e83c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e840:	bfd6      	itet	le
 800e842:	f1c3 0320 	rsble	r3, r3, #32
 800e846:	ea48 0003 	orrgt.w	r0, r8, r3
 800e84a:	fa06 f003 	lslle.w	r0, r6, r3
 800e84e:	f7f1 fe59 	bl	8000504 <__aeabi_ui2d>
 800e852:	2201      	movs	r2, #1
 800e854:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e858:	3d01      	subs	r5, #1
 800e85a:	920e      	str	r2, [sp, #56]	; 0x38
 800e85c:	e76f      	b.n	800e73e <_dtoa_r+0x126>
 800e85e:	2301      	movs	r3, #1
 800e860:	e7b3      	b.n	800e7ca <_dtoa_r+0x1b2>
 800e862:	900c      	str	r0, [sp, #48]	; 0x30
 800e864:	e7b2      	b.n	800e7cc <_dtoa_r+0x1b4>
 800e866:	9b05      	ldr	r3, [sp, #20]
 800e868:	eba3 030b 	sub.w	r3, r3, fp
 800e86c:	9305      	str	r3, [sp, #20]
 800e86e:	f1cb 0300 	rsb	r3, fp, #0
 800e872:	9308      	str	r3, [sp, #32]
 800e874:	2300      	movs	r3, #0
 800e876:	930b      	str	r3, [sp, #44]	; 0x2c
 800e878:	e7bf      	b.n	800e7fa <_dtoa_r+0x1e2>
 800e87a:	2300      	movs	r3, #0
 800e87c:	9309      	str	r3, [sp, #36]	; 0x24
 800e87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e880:	2b00      	cmp	r3, #0
 800e882:	dc52      	bgt.n	800e92a <_dtoa_r+0x312>
 800e884:	2301      	movs	r3, #1
 800e886:	9301      	str	r3, [sp, #4]
 800e888:	9304      	str	r3, [sp, #16]
 800e88a:	461a      	mov	r2, r3
 800e88c:	920a      	str	r2, [sp, #40]	; 0x28
 800e88e:	e00b      	b.n	800e8a8 <_dtoa_r+0x290>
 800e890:	2301      	movs	r3, #1
 800e892:	e7f3      	b.n	800e87c <_dtoa_r+0x264>
 800e894:	2300      	movs	r3, #0
 800e896:	9309      	str	r3, [sp, #36]	; 0x24
 800e898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e89a:	445b      	add	r3, fp
 800e89c:	9301      	str	r3, [sp, #4]
 800e89e:	3301      	adds	r3, #1
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	9304      	str	r3, [sp, #16]
 800e8a4:	bfb8      	it	lt
 800e8a6:	2301      	movlt	r3, #1
 800e8a8:	69e0      	ldr	r0, [r4, #28]
 800e8aa:	2100      	movs	r1, #0
 800e8ac:	2204      	movs	r2, #4
 800e8ae:	f102 0614 	add.w	r6, r2, #20
 800e8b2:	429e      	cmp	r6, r3
 800e8b4:	d93d      	bls.n	800e932 <_dtoa_r+0x31a>
 800e8b6:	6041      	str	r1, [r0, #4]
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	f000 fd9f 	bl	800f3fc <_Balloc>
 800e8be:	9000      	str	r0, [sp, #0]
 800e8c0:	2800      	cmp	r0, #0
 800e8c2:	d139      	bne.n	800e938 <_dtoa_r+0x320>
 800e8c4:	4b16      	ldr	r3, [pc, #88]	; (800e920 <_dtoa_r+0x308>)
 800e8c6:	4602      	mov	r2, r0
 800e8c8:	f240 11af 	movw	r1, #431	; 0x1af
 800e8cc:	e6bd      	b.n	800e64a <_dtoa_r+0x32>
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	e7e1      	b.n	800e896 <_dtoa_r+0x27e>
 800e8d2:	2501      	movs	r5, #1
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	9307      	str	r3, [sp, #28]
 800e8d8:	9509      	str	r5, [sp, #36]	; 0x24
 800e8da:	f04f 33ff 	mov.w	r3, #4294967295
 800e8de:	9301      	str	r3, [sp, #4]
 800e8e0:	9304      	str	r3, [sp, #16]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	2312      	movs	r3, #18
 800e8e6:	e7d1      	b.n	800e88c <_dtoa_r+0x274>
 800e8e8:	636f4361 	.word	0x636f4361
 800e8ec:	3fd287a7 	.word	0x3fd287a7
 800e8f0:	8b60c8b3 	.word	0x8b60c8b3
 800e8f4:	3fc68a28 	.word	0x3fc68a28
 800e8f8:	509f79fb 	.word	0x509f79fb
 800e8fc:	3fd34413 	.word	0x3fd34413
 800e900:	080107e9 	.word	0x080107e9
 800e904:	08010800 	.word	0x08010800
 800e908:	7ff00000 	.word	0x7ff00000
 800e90c:	080107e5 	.word	0x080107e5
 800e910:	080107dc 	.word	0x080107dc
 800e914:	080107b9 	.word	0x080107b9
 800e918:	3ff80000 	.word	0x3ff80000
 800e91c:	080108f0 	.word	0x080108f0
 800e920:	08010858 	.word	0x08010858
 800e924:	2301      	movs	r3, #1
 800e926:	9309      	str	r3, [sp, #36]	; 0x24
 800e928:	e7d7      	b.n	800e8da <_dtoa_r+0x2c2>
 800e92a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e92c:	9301      	str	r3, [sp, #4]
 800e92e:	9304      	str	r3, [sp, #16]
 800e930:	e7ba      	b.n	800e8a8 <_dtoa_r+0x290>
 800e932:	3101      	adds	r1, #1
 800e934:	0052      	lsls	r2, r2, #1
 800e936:	e7ba      	b.n	800e8ae <_dtoa_r+0x296>
 800e938:	69e3      	ldr	r3, [r4, #28]
 800e93a:	9a00      	ldr	r2, [sp, #0]
 800e93c:	601a      	str	r2, [r3, #0]
 800e93e:	9b04      	ldr	r3, [sp, #16]
 800e940:	2b0e      	cmp	r3, #14
 800e942:	f200 80a8 	bhi.w	800ea96 <_dtoa_r+0x47e>
 800e946:	2d00      	cmp	r5, #0
 800e948:	f000 80a5 	beq.w	800ea96 <_dtoa_r+0x47e>
 800e94c:	f1bb 0f00 	cmp.w	fp, #0
 800e950:	dd38      	ble.n	800e9c4 <_dtoa_r+0x3ac>
 800e952:	4bc0      	ldr	r3, [pc, #768]	; (800ec54 <_dtoa_r+0x63c>)
 800e954:	f00b 020f 	and.w	r2, fp, #15
 800e958:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e95c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e960:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e964:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e968:	d019      	beq.n	800e99e <_dtoa_r+0x386>
 800e96a:	4bbb      	ldr	r3, [pc, #748]	; (800ec58 <_dtoa_r+0x640>)
 800e96c:	ec51 0b18 	vmov	r0, r1, d8
 800e970:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e974:	f7f1 ff6a 	bl	800084c <__aeabi_ddiv>
 800e978:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e97c:	f008 080f 	and.w	r8, r8, #15
 800e980:	2503      	movs	r5, #3
 800e982:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ec58 <_dtoa_r+0x640>
 800e986:	f1b8 0f00 	cmp.w	r8, #0
 800e98a:	d10a      	bne.n	800e9a2 <_dtoa_r+0x38a>
 800e98c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e990:	4632      	mov	r2, r6
 800e992:	463b      	mov	r3, r7
 800e994:	f7f1 ff5a 	bl	800084c <__aeabi_ddiv>
 800e998:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e99c:	e02b      	b.n	800e9f6 <_dtoa_r+0x3de>
 800e99e:	2502      	movs	r5, #2
 800e9a0:	e7ef      	b.n	800e982 <_dtoa_r+0x36a>
 800e9a2:	f018 0f01 	tst.w	r8, #1
 800e9a6:	d008      	beq.n	800e9ba <_dtoa_r+0x3a2>
 800e9a8:	4630      	mov	r0, r6
 800e9aa:	4639      	mov	r1, r7
 800e9ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e9b0:	f7f1 fe22 	bl	80005f8 <__aeabi_dmul>
 800e9b4:	3501      	adds	r5, #1
 800e9b6:	4606      	mov	r6, r0
 800e9b8:	460f      	mov	r7, r1
 800e9ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e9be:	f109 0908 	add.w	r9, r9, #8
 800e9c2:	e7e0      	b.n	800e986 <_dtoa_r+0x36e>
 800e9c4:	f000 809f 	beq.w	800eb06 <_dtoa_r+0x4ee>
 800e9c8:	f1cb 0600 	rsb	r6, fp, #0
 800e9cc:	4ba1      	ldr	r3, [pc, #644]	; (800ec54 <_dtoa_r+0x63c>)
 800e9ce:	4fa2      	ldr	r7, [pc, #648]	; (800ec58 <_dtoa_r+0x640>)
 800e9d0:	f006 020f 	and.w	r2, r6, #15
 800e9d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9dc:	ec51 0b18 	vmov	r0, r1, d8
 800e9e0:	f7f1 fe0a 	bl	80005f8 <__aeabi_dmul>
 800e9e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9e8:	1136      	asrs	r6, r6, #4
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	2502      	movs	r5, #2
 800e9ee:	2e00      	cmp	r6, #0
 800e9f0:	d17e      	bne.n	800eaf0 <_dtoa_r+0x4d8>
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d1d0      	bne.n	800e998 <_dtoa_r+0x380>
 800e9f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	f000 8084 	beq.w	800eb0a <_dtoa_r+0x4f2>
 800ea02:	4b96      	ldr	r3, [pc, #600]	; (800ec5c <_dtoa_r+0x644>)
 800ea04:	2200      	movs	r2, #0
 800ea06:	4640      	mov	r0, r8
 800ea08:	4649      	mov	r1, r9
 800ea0a:	f7f2 f867 	bl	8000adc <__aeabi_dcmplt>
 800ea0e:	2800      	cmp	r0, #0
 800ea10:	d07b      	beq.n	800eb0a <_dtoa_r+0x4f2>
 800ea12:	9b04      	ldr	r3, [sp, #16]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d078      	beq.n	800eb0a <_dtoa_r+0x4f2>
 800ea18:	9b01      	ldr	r3, [sp, #4]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	dd39      	ble.n	800ea92 <_dtoa_r+0x47a>
 800ea1e:	4b90      	ldr	r3, [pc, #576]	; (800ec60 <_dtoa_r+0x648>)
 800ea20:	2200      	movs	r2, #0
 800ea22:	4640      	mov	r0, r8
 800ea24:	4649      	mov	r1, r9
 800ea26:	f7f1 fde7 	bl	80005f8 <__aeabi_dmul>
 800ea2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea2e:	9e01      	ldr	r6, [sp, #4]
 800ea30:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ea34:	3501      	adds	r5, #1
 800ea36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ea3a:	4628      	mov	r0, r5
 800ea3c:	f7f1 fd72 	bl	8000524 <__aeabi_i2d>
 800ea40:	4642      	mov	r2, r8
 800ea42:	464b      	mov	r3, r9
 800ea44:	f7f1 fdd8 	bl	80005f8 <__aeabi_dmul>
 800ea48:	4b86      	ldr	r3, [pc, #536]	; (800ec64 <_dtoa_r+0x64c>)
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	f7f1 fc1e 	bl	800028c <__adddf3>
 800ea50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ea54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea58:	9303      	str	r3, [sp, #12]
 800ea5a:	2e00      	cmp	r6, #0
 800ea5c:	d158      	bne.n	800eb10 <_dtoa_r+0x4f8>
 800ea5e:	4b82      	ldr	r3, [pc, #520]	; (800ec68 <_dtoa_r+0x650>)
 800ea60:	2200      	movs	r2, #0
 800ea62:	4640      	mov	r0, r8
 800ea64:	4649      	mov	r1, r9
 800ea66:	f7f1 fc0f 	bl	8000288 <__aeabi_dsub>
 800ea6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea6e:	4680      	mov	r8, r0
 800ea70:	4689      	mov	r9, r1
 800ea72:	f7f2 f851 	bl	8000b18 <__aeabi_dcmpgt>
 800ea76:	2800      	cmp	r0, #0
 800ea78:	f040 8296 	bne.w	800efa8 <_dtoa_r+0x990>
 800ea7c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ea80:	4640      	mov	r0, r8
 800ea82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea86:	4649      	mov	r1, r9
 800ea88:	f7f2 f828 	bl	8000adc <__aeabi_dcmplt>
 800ea8c:	2800      	cmp	r0, #0
 800ea8e:	f040 8289 	bne.w	800efa4 <_dtoa_r+0x98c>
 800ea92:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ea96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	f2c0 814e 	blt.w	800ed3a <_dtoa_r+0x722>
 800ea9e:	f1bb 0f0e 	cmp.w	fp, #14
 800eaa2:	f300 814a 	bgt.w	800ed3a <_dtoa_r+0x722>
 800eaa6:	4b6b      	ldr	r3, [pc, #428]	; (800ec54 <_dtoa_r+0x63c>)
 800eaa8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800eaac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	f280 80dc 	bge.w	800ec70 <_dtoa_r+0x658>
 800eab8:	9b04      	ldr	r3, [sp, #16]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	f300 80d8 	bgt.w	800ec70 <_dtoa_r+0x658>
 800eac0:	f040 826f 	bne.w	800efa2 <_dtoa_r+0x98a>
 800eac4:	4b68      	ldr	r3, [pc, #416]	; (800ec68 <_dtoa_r+0x650>)
 800eac6:	2200      	movs	r2, #0
 800eac8:	4640      	mov	r0, r8
 800eaca:	4649      	mov	r1, r9
 800eacc:	f7f1 fd94 	bl	80005f8 <__aeabi_dmul>
 800ead0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ead4:	f7f2 f816 	bl	8000b04 <__aeabi_dcmpge>
 800ead8:	9e04      	ldr	r6, [sp, #16]
 800eada:	4637      	mov	r7, r6
 800eadc:	2800      	cmp	r0, #0
 800eade:	f040 8245 	bne.w	800ef6c <_dtoa_r+0x954>
 800eae2:	9d00      	ldr	r5, [sp, #0]
 800eae4:	2331      	movs	r3, #49	; 0x31
 800eae6:	f805 3b01 	strb.w	r3, [r5], #1
 800eaea:	f10b 0b01 	add.w	fp, fp, #1
 800eaee:	e241      	b.n	800ef74 <_dtoa_r+0x95c>
 800eaf0:	07f2      	lsls	r2, r6, #31
 800eaf2:	d505      	bpl.n	800eb00 <_dtoa_r+0x4e8>
 800eaf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eaf8:	f7f1 fd7e 	bl	80005f8 <__aeabi_dmul>
 800eafc:	3501      	adds	r5, #1
 800eafe:	2301      	movs	r3, #1
 800eb00:	1076      	asrs	r6, r6, #1
 800eb02:	3708      	adds	r7, #8
 800eb04:	e773      	b.n	800e9ee <_dtoa_r+0x3d6>
 800eb06:	2502      	movs	r5, #2
 800eb08:	e775      	b.n	800e9f6 <_dtoa_r+0x3de>
 800eb0a:	9e04      	ldr	r6, [sp, #16]
 800eb0c:	465f      	mov	r7, fp
 800eb0e:	e792      	b.n	800ea36 <_dtoa_r+0x41e>
 800eb10:	9900      	ldr	r1, [sp, #0]
 800eb12:	4b50      	ldr	r3, [pc, #320]	; (800ec54 <_dtoa_r+0x63c>)
 800eb14:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eb18:	4431      	add	r1, r6
 800eb1a:	9102      	str	r1, [sp, #8]
 800eb1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb1e:	eeb0 9a47 	vmov.f32	s18, s14
 800eb22:	eef0 9a67 	vmov.f32	s19, s15
 800eb26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800eb2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eb2e:	2900      	cmp	r1, #0
 800eb30:	d044      	beq.n	800ebbc <_dtoa_r+0x5a4>
 800eb32:	494e      	ldr	r1, [pc, #312]	; (800ec6c <_dtoa_r+0x654>)
 800eb34:	2000      	movs	r0, #0
 800eb36:	f7f1 fe89 	bl	800084c <__aeabi_ddiv>
 800eb3a:	ec53 2b19 	vmov	r2, r3, d9
 800eb3e:	f7f1 fba3 	bl	8000288 <__aeabi_dsub>
 800eb42:	9d00      	ldr	r5, [sp, #0]
 800eb44:	ec41 0b19 	vmov	d9, r0, r1
 800eb48:	4649      	mov	r1, r9
 800eb4a:	4640      	mov	r0, r8
 800eb4c:	f7f2 f804 	bl	8000b58 <__aeabi_d2iz>
 800eb50:	4606      	mov	r6, r0
 800eb52:	f7f1 fce7 	bl	8000524 <__aeabi_i2d>
 800eb56:	4602      	mov	r2, r0
 800eb58:	460b      	mov	r3, r1
 800eb5a:	4640      	mov	r0, r8
 800eb5c:	4649      	mov	r1, r9
 800eb5e:	f7f1 fb93 	bl	8000288 <__aeabi_dsub>
 800eb62:	3630      	adds	r6, #48	; 0x30
 800eb64:	f805 6b01 	strb.w	r6, [r5], #1
 800eb68:	ec53 2b19 	vmov	r2, r3, d9
 800eb6c:	4680      	mov	r8, r0
 800eb6e:	4689      	mov	r9, r1
 800eb70:	f7f1 ffb4 	bl	8000adc <__aeabi_dcmplt>
 800eb74:	2800      	cmp	r0, #0
 800eb76:	d164      	bne.n	800ec42 <_dtoa_r+0x62a>
 800eb78:	4642      	mov	r2, r8
 800eb7a:	464b      	mov	r3, r9
 800eb7c:	4937      	ldr	r1, [pc, #220]	; (800ec5c <_dtoa_r+0x644>)
 800eb7e:	2000      	movs	r0, #0
 800eb80:	f7f1 fb82 	bl	8000288 <__aeabi_dsub>
 800eb84:	ec53 2b19 	vmov	r2, r3, d9
 800eb88:	f7f1 ffa8 	bl	8000adc <__aeabi_dcmplt>
 800eb8c:	2800      	cmp	r0, #0
 800eb8e:	f040 80b6 	bne.w	800ecfe <_dtoa_r+0x6e6>
 800eb92:	9b02      	ldr	r3, [sp, #8]
 800eb94:	429d      	cmp	r5, r3
 800eb96:	f43f af7c 	beq.w	800ea92 <_dtoa_r+0x47a>
 800eb9a:	4b31      	ldr	r3, [pc, #196]	; (800ec60 <_dtoa_r+0x648>)
 800eb9c:	ec51 0b19 	vmov	r0, r1, d9
 800eba0:	2200      	movs	r2, #0
 800eba2:	f7f1 fd29 	bl	80005f8 <__aeabi_dmul>
 800eba6:	4b2e      	ldr	r3, [pc, #184]	; (800ec60 <_dtoa_r+0x648>)
 800eba8:	ec41 0b19 	vmov	d9, r0, r1
 800ebac:	2200      	movs	r2, #0
 800ebae:	4640      	mov	r0, r8
 800ebb0:	4649      	mov	r1, r9
 800ebb2:	f7f1 fd21 	bl	80005f8 <__aeabi_dmul>
 800ebb6:	4680      	mov	r8, r0
 800ebb8:	4689      	mov	r9, r1
 800ebba:	e7c5      	b.n	800eb48 <_dtoa_r+0x530>
 800ebbc:	ec51 0b17 	vmov	r0, r1, d7
 800ebc0:	f7f1 fd1a 	bl	80005f8 <__aeabi_dmul>
 800ebc4:	9b02      	ldr	r3, [sp, #8]
 800ebc6:	9d00      	ldr	r5, [sp, #0]
 800ebc8:	930f      	str	r3, [sp, #60]	; 0x3c
 800ebca:	ec41 0b19 	vmov	d9, r0, r1
 800ebce:	4649      	mov	r1, r9
 800ebd0:	4640      	mov	r0, r8
 800ebd2:	f7f1 ffc1 	bl	8000b58 <__aeabi_d2iz>
 800ebd6:	4606      	mov	r6, r0
 800ebd8:	f7f1 fca4 	bl	8000524 <__aeabi_i2d>
 800ebdc:	3630      	adds	r6, #48	; 0x30
 800ebde:	4602      	mov	r2, r0
 800ebe0:	460b      	mov	r3, r1
 800ebe2:	4640      	mov	r0, r8
 800ebe4:	4649      	mov	r1, r9
 800ebe6:	f7f1 fb4f 	bl	8000288 <__aeabi_dsub>
 800ebea:	f805 6b01 	strb.w	r6, [r5], #1
 800ebee:	9b02      	ldr	r3, [sp, #8]
 800ebf0:	429d      	cmp	r5, r3
 800ebf2:	4680      	mov	r8, r0
 800ebf4:	4689      	mov	r9, r1
 800ebf6:	f04f 0200 	mov.w	r2, #0
 800ebfa:	d124      	bne.n	800ec46 <_dtoa_r+0x62e>
 800ebfc:	4b1b      	ldr	r3, [pc, #108]	; (800ec6c <_dtoa_r+0x654>)
 800ebfe:	ec51 0b19 	vmov	r0, r1, d9
 800ec02:	f7f1 fb43 	bl	800028c <__adddf3>
 800ec06:	4602      	mov	r2, r0
 800ec08:	460b      	mov	r3, r1
 800ec0a:	4640      	mov	r0, r8
 800ec0c:	4649      	mov	r1, r9
 800ec0e:	f7f1 ff83 	bl	8000b18 <__aeabi_dcmpgt>
 800ec12:	2800      	cmp	r0, #0
 800ec14:	d173      	bne.n	800ecfe <_dtoa_r+0x6e6>
 800ec16:	ec53 2b19 	vmov	r2, r3, d9
 800ec1a:	4914      	ldr	r1, [pc, #80]	; (800ec6c <_dtoa_r+0x654>)
 800ec1c:	2000      	movs	r0, #0
 800ec1e:	f7f1 fb33 	bl	8000288 <__aeabi_dsub>
 800ec22:	4602      	mov	r2, r0
 800ec24:	460b      	mov	r3, r1
 800ec26:	4640      	mov	r0, r8
 800ec28:	4649      	mov	r1, r9
 800ec2a:	f7f1 ff57 	bl	8000adc <__aeabi_dcmplt>
 800ec2e:	2800      	cmp	r0, #0
 800ec30:	f43f af2f 	beq.w	800ea92 <_dtoa_r+0x47a>
 800ec34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ec36:	1e6b      	subs	r3, r5, #1
 800ec38:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ec3e:	2b30      	cmp	r3, #48	; 0x30
 800ec40:	d0f8      	beq.n	800ec34 <_dtoa_r+0x61c>
 800ec42:	46bb      	mov	fp, r7
 800ec44:	e04a      	b.n	800ecdc <_dtoa_r+0x6c4>
 800ec46:	4b06      	ldr	r3, [pc, #24]	; (800ec60 <_dtoa_r+0x648>)
 800ec48:	f7f1 fcd6 	bl	80005f8 <__aeabi_dmul>
 800ec4c:	4680      	mov	r8, r0
 800ec4e:	4689      	mov	r9, r1
 800ec50:	e7bd      	b.n	800ebce <_dtoa_r+0x5b6>
 800ec52:	bf00      	nop
 800ec54:	080108f0 	.word	0x080108f0
 800ec58:	080108c8 	.word	0x080108c8
 800ec5c:	3ff00000 	.word	0x3ff00000
 800ec60:	40240000 	.word	0x40240000
 800ec64:	401c0000 	.word	0x401c0000
 800ec68:	40140000 	.word	0x40140000
 800ec6c:	3fe00000 	.word	0x3fe00000
 800ec70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ec74:	9d00      	ldr	r5, [sp, #0]
 800ec76:	4642      	mov	r2, r8
 800ec78:	464b      	mov	r3, r9
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	4639      	mov	r1, r7
 800ec7e:	f7f1 fde5 	bl	800084c <__aeabi_ddiv>
 800ec82:	f7f1 ff69 	bl	8000b58 <__aeabi_d2iz>
 800ec86:	9001      	str	r0, [sp, #4]
 800ec88:	f7f1 fc4c 	bl	8000524 <__aeabi_i2d>
 800ec8c:	4642      	mov	r2, r8
 800ec8e:	464b      	mov	r3, r9
 800ec90:	f7f1 fcb2 	bl	80005f8 <__aeabi_dmul>
 800ec94:	4602      	mov	r2, r0
 800ec96:	460b      	mov	r3, r1
 800ec98:	4630      	mov	r0, r6
 800ec9a:	4639      	mov	r1, r7
 800ec9c:	f7f1 faf4 	bl	8000288 <__aeabi_dsub>
 800eca0:	9e01      	ldr	r6, [sp, #4]
 800eca2:	9f04      	ldr	r7, [sp, #16]
 800eca4:	3630      	adds	r6, #48	; 0x30
 800eca6:	f805 6b01 	strb.w	r6, [r5], #1
 800ecaa:	9e00      	ldr	r6, [sp, #0]
 800ecac:	1bae      	subs	r6, r5, r6
 800ecae:	42b7      	cmp	r7, r6
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	460b      	mov	r3, r1
 800ecb4:	d134      	bne.n	800ed20 <_dtoa_r+0x708>
 800ecb6:	f7f1 fae9 	bl	800028c <__adddf3>
 800ecba:	4642      	mov	r2, r8
 800ecbc:	464b      	mov	r3, r9
 800ecbe:	4606      	mov	r6, r0
 800ecc0:	460f      	mov	r7, r1
 800ecc2:	f7f1 ff29 	bl	8000b18 <__aeabi_dcmpgt>
 800ecc6:	b9c8      	cbnz	r0, 800ecfc <_dtoa_r+0x6e4>
 800ecc8:	4642      	mov	r2, r8
 800ecca:	464b      	mov	r3, r9
 800eccc:	4630      	mov	r0, r6
 800ecce:	4639      	mov	r1, r7
 800ecd0:	f7f1 fefa 	bl	8000ac8 <__aeabi_dcmpeq>
 800ecd4:	b110      	cbz	r0, 800ecdc <_dtoa_r+0x6c4>
 800ecd6:	9b01      	ldr	r3, [sp, #4]
 800ecd8:	07db      	lsls	r3, r3, #31
 800ecda:	d40f      	bmi.n	800ecfc <_dtoa_r+0x6e4>
 800ecdc:	4651      	mov	r1, sl
 800ecde:	4620      	mov	r0, r4
 800ece0:	f000 fbcc 	bl	800f47c <_Bfree>
 800ece4:	2300      	movs	r3, #0
 800ece6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ece8:	702b      	strb	r3, [r5, #0]
 800ecea:	f10b 0301 	add.w	r3, fp, #1
 800ecee:	6013      	str	r3, [r2, #0]
 800ecf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	f43f ace2 	beq.w	800e6bc <_dtoa_r+0xa4>
 800ecf8:	601d      	str	r5, [r3, #0]
 800ecfa:	e4df      	b.n	800e6bc <_dtoa_r+0xa4>
 800ecfc:	465f      	mov	r7, fp
 800ecfe:	462b      	mov	r3, r5
 800ed00:	461d      	mov	r5, r3
 800ed02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed06:	2a39      	cmp	r2, #57	; 0x39
 800ed08:	d106      	bne.n	800ed18 <_dtoa_r+0x700>
 800ed0a:	9a00      	ldr	r2, [sp, #0]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d1f7      	bne.n	800ed00 <_dtoa_r+0x6e8>
 800ed10:	9900      	ldr	r1, [sp, #0]
 800ed12:	2230      	movs	r2, #48	; 0x30
 800ed14:	3701      	adds	r7, #1
 800ed16:	700a      	strb	r2, [r1, #0]
 800ed18:	781a      	ldrb	r2, [r3, #0]
 800ed1a:	3201      	adds	r2, #1
 800ed1c:	701a      	strb	r2, [r3, #0]
 800ed1e:	e790      	b.n	800ec42 <_dtoa_r+0x62a>
 800ed20:	4ba3      	ldr	r3, [pc, #652]	; (800efb0 <_dtoa_r+0x998>)
 800ed22:	2200      	movs	r2, #0
 800ed24:	f7f1 fc68 	bl	80005f8 <__aeabi_dmul>
 800ed28:	2200      	movs	r2, #0
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	4606      	mov	r6, r0
 800ed2e:	460f      	mov	r7, r1
 800ed30:	f7f1 feca 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed34:	2800      	cmp	r0, #0
 800ed36:	d09e      	beq.n	800ec76 <_dtoa_r+0x65e>
 800ed38:	e7d0      	b.n	800ecdc <_dtoa_r+0x6c4>
 800ed3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed3c:	2a00      	cmp	r2, #0
 800ed3e:	f000 80ca 	beq.w	800eed6 <_dtoa_r+0x8be>
 800ed42:	9a07      	ldr	r2, [sp, #28]
 800ed44:	2a01      	cmp	r2, #1
 800ed46:	f300 80ad 	bgt.w	800eea4 <_dtoa_r+0x88c>
 800ed4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed4c:	2a00      	cmp	r2, #0
 800ed4e:	f000 80a5 	beq.w	800ee9c <_dtoa_r+0x884>
 800ed52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ed56:	9e08      	ldr	r6, [sp, #32]
 800ed58:	9d05      	ldr	r5, [sp, #20]
 800ed5a:	9a05      	ldr	r2, [sp, #20]
 800ed5c:	441a      	add	r2, r3
 800ed5e:	9205      	str	r2, [sp, #20]
 800ed60:	9a06      	ldr	r2, [sp, #24]
 800ed62:	2101      	movs	r1, #1
 800ed64:	441a      	add	r2, r3
 800ed66:	4620      	mov	r0, r4
 800ed68:	9206      	str	r2, [sp, #24]
 800ed6a:	f000 fc3d 	bl	800f5e8 <__i2b>
 800ed6e:	4607      	mov	r7, r0
 800ed70:	b165      	cbz	r5, 800ed8c <_dtoa_r+0x774>
 800ed72:	9b06      	ldr	r3, [sp, #24]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	dd09      	ble.n	800ed8c <_dtoa_r+0x774>
 800ed78:	42ab      	cmp	r3, r5
 800ed7a:	9a05      	ldr	r2, [sp, #20]
 800ed7c:	bfa8      	it	ge
 800ed7e:	462b      	movge	r3, r5
 800ed80:	1ad2      	subs	r2, r2, r3
 800ed82:	9205      	str	r2, [sp, #20]
 800ed84:	9a06      	ldr	r2, [sp, #24]
 800ed86:	1aed      	subs	r5, r5, r3
 800ed88:	1ad3      	subs	r3, r2, r3
 800ed8a:	9306      	str	r3, [sp, #24]
 800ed8c:	9b08      	ldr	r3, [sp, #32]
 800ed8e:	b1f3      	cbz	r3, 800edce <_dtoa_r+0x7b6>
 800ed90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	f000 80a3 	beq.w	800eede <_dtoa_r+0x8c6>
 800ed98:	2e00      	cmp	r6, #0
 800ed9a:	dd10      	ble.n	800edbe <_dtoa_r+0x7a6>
 800ed9c:	4639      	mov	r1, r7
 800ed9e:	4632      	mov	r2, r6
 800eda0:	4620      	mov	r0, r4
 800eda2:	f000 fce1 	bl	800f768 <__pow5mult>
 800eda6:	4652      	mov	r2, sl
 800eda8:	4601      	mov	r1, r0
 800edaa:	4607      	mov	r7, r0
 800edac:	4620      	mov	r0, r4
 800edae:	f000 fc31 	bl	800f614 <__multiply>
 800edb2:	4651      	mov	r1, sl
 800edb4:	4680      	mov	r8, r0
 800edb6:	4620      	mov	r0, r4
 800edb8:	f000 fb60 	bl	800f47c <_Bfree>
 800edbc:	46c2      	mov	sl, r8
 800edbe:	9b08      	ldr	r3, [sp, #32]
 800edc0:	1b9a      	subs	r2, r3, r6
 800edc2:	d004      	beq.n	800edce <_dtoa_r+0x7b6>
 800edc4:	4651      	mov	r1, sl
 800edc6:	4620      	mov	r0, r4
 800edc8:	f000 fcce 	bl	800f768 <__pow5mult>
 800edcc:	4682      	mov	sl, r0
 800edce:	2101      	movs	r1, #1
 800edd0:	4620      	mov	r0, r4
 800edd2:	f000 fc09 	bl	800f5e8 <__i2b>
 800edd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800edd8:	2b00      	cmp	r3, #0
 800edda:	4606      	mov	r6, r0
 800eddc:	f340 8081 	ble.w	800eee2 <_dtoa_r+0x8ca>
 800ede0:	461a      	mov	r2, r3
 800ede2:	4601      	mov	r1, r0
 800ede4:	4620      	mov	r0, r4
 800ede6:	f000 fcbf 	bl	800f768 <__pow5mult>
 800edea:	9b07      	ldr	r3, [sp, #28]
 800edec:	2b01      	cmp	r3, #1
 800edee:	4606      	mov	r6, r0
 800edf0:	dd7a      	ble.n	800eee8 <_dtoa_r+0x8d0>
 800edf2:	f04f 0800 	mov.w	r8, #0
 800edf6:	6933      	ldr	r3, [r6, #16]
 800edf8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800edfc:	6918      	ldr	r0, [r3, #16]
 800edfe:	f000 fba5 	bl	800f54c <__hi0bits>
 800ee02:	f1c0 0020 	rsb	r0, r0, #32
 800ee06:	9b06      	ldr	r3, [sp, #24]
 800ee08:	4418      	add	r0, r3
 800ee0a:	f010 001f 	ands.w	r0, r0, #31
 800ee0e:	f000 8094 	beq.w	800ef3a <_dtoa_r+0x922>
 800ee12:	f1c0 0320 	rsb	r3, r0, #32
 800ee16:	2b04      	cmp	r3, #4
 800ee18:	f340 8085 	ble.w	800ef26 <_dtoa_r+0x90e>
 800ee1c:	9b05      	ldr	r3, [sp, #20]
 800ee1e:	f1c0 001c 	rsb	r0, r0, #28
 800ee22:	4403      	add	r3, r0
 800ee24:	9305      	str	r3, [sp, #20]
 800ee26:	9b06      	ldr	r3, [sp, #24]
 800ee28:	4403      	add	r3, r0
 800ee2a:	4405      	add	r5, r0
 800ee2c:	9306      	str	r3, [sp, #24]
 800ee2e:	9b05      	ldr	r3, [sp, #20]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	dd05      	ble.n	800ee40 <_dtoa_r+0x828>
 800ee34:	4651      	mov	r1, sl
 800ee36:	461a      	mov	r2, r3
 800ee38:	4620      	mov	r0, r4
 800ee3a:	f000 fcef 	bl	800f81c <__lshift>
 800ee3e:	4682      	mov	sl, r0
 800ee40:	9b06      	ldr	r3, [sp, #24]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	dd05      	ble.n	800ee52 <_dtoa_r+0x83a>
 800ee46:	4631      	mov	r1, r6
 800ee48:	461a      	mov	r2, r3
 800ee4a:	4620      	mov	r0, r4
 800ee4c:	f000 fce6 	bl	800f81c <__lshift>
 800ee50:	4606      	mov	r6, r0
 800ee52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d072      	beq.n	800ef3e <_dtoa_r+0x926>
 800ee58:	4631      	mov	r1, r6
 800ee5a:	4650      	mov	r0, sl
 800ee5c:	f000 fd4a 	bl	800f8f4 <__mcmp>
 800ee60:	2800      	cmp	r0, #0
 800ee62:	da6c      	bge.n	800ef3e <_dtoa_r+0x926>
 800ee64:	2300      	movs	r3, #0
 800ee66:	4651      	mov	r1, sl
 800ee68:	220a      	movs	r2, #10
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	f000 fb28 	bl	800f4c0 <__multadd>
 800ee70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee72:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ee76:	4682      	mov	sl, r0
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	f000 81b0 	beq.w	800f1de <_dtoa_r+0xbc6>
 800ee7e:	2300      	movs	r3, #0
 800ee80:	4639      	mov	r1, r7
 800ee82:	220a      	movs	r2, #10
 800ee84:	4620      	mov	r0, r4
 800ee86:	f000 fb1b 	bl	800f4c0 <__multadd>
 800ee8a:	9b01      	ldr	r3, [sp, #4]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	4607      	mov	r7, r0
 800ee90:	f300 8096 	bgt.w	800efc0 <_dtoa_r+0x9a8>
 800ee94:	9b07      	ldr	r3, [sp, #28]
 800ee96:	2b02      	cmp	r3, #2
 800ee98:	dc59      	bgt.n	800ef4e <_dtoa_r+0x936>
 800ee9a:	e091      	b.n	800efc0 <_dtoa_r+0x9a8>
 800ee9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eea2:	e758      	b.n	800ed56 <_dtoa_r+0x73e>
 800eea4:	9b04      	ldr	r3, [sp, #16]
 800eea6:	1e5e      	subs	r6, r3, #1
 800eea8:	9b08      	ldr	r3, [sp, #32]
 800eeaa:	42b3      	cmp	r3, r6
 800eeac:	bfbf      	itttt	lt
 800eeae:	9b08      	ldrlt	r3, [sp, #32]
 800eeb0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800eeb2:	9608      	strlt	r6, [sp, #32]
 800eeb4:	1af3      	sublt	r3, r6, r3
 800eeb6:	bfb4      	ite	lt
 800eeb8:	18d2      	addlt	r2, r2, r3
 800eeba:	1b9e      	subge	r6, r3, r6
 800eebc:	9b04      	ldr	r3, [sp, #16]
 800eebe:	bfbc      	itt	lt
 800eec0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800eec2:	2600      	movlt	r6, #0
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	bfb7      	itett	lt
 800eec8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800eecc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800eed0:	1a9d      	sublt	r5, r3, r2
 800eed2:	2300      	movlt	r3, #0
 800eed4:	e741      	b.n	800ed5a <_dtoa_r+0x742>
 800eed6:	9e08      	ldr	r6, [sp, #32]
 800eed8:	9d05      	ldr	r5, [sp, #20]
 800eeda:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800eedc:	e748      	b.n	800ed70 <_dtoa_r+0x758>
 800eede:	9a08      	ldr	r2, [sp, #32]
 800eee0:	e770      	b.n	800edc4 <_dtoa_r+0x7ac>
 800eee2:	9b07      	ldr	r3, [sp, #28]
 800eee4:	2b01      	cmp	r3, #1
 800eee6:	dc19      	bgt.n	800ef1c <_dtoa_r+0x904>
 800eee8:	9b02      	ldr	r3, [sp, #8]
 800eeea:	b9bb      	cbnz	r3, 800ef1c <_dtoa_r+0x904>
 800eeec:	9b03      	ldr	r3, [sp, #12]
 800eeee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eef2:	b99b      	cbnz	r3, 800ef1c <_dtoa_r+0x904>
 800eef4:	9b03      	ldr	r3, [sp, #12]
 800eef6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eefa:	0d1b      	lsrs	r3, r3, #20
 800eefc:	051b      	lsls	r3, r3, #20
 800eefe:	b183      	cbz	r3, 800ef22 <_dtoa_r+0x90a>
 800ef00:	9b05      	ldr	r3, [sp, #20]
 800ef02:	3301      	adds	r3, #1
 800ef04:	9305      	str	r3, [sp, #20]
 800ef06:	9b06      	ldr	r3, [sp, #24]
 800ef08:	3301      	adds	r3, #1
 800ef0a:	9306      	str	r3, [sp, #24]
 800ef0c:	f04f 0801 	mov.w	r8, #1
 800ef10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	f47f af6f 	bne.w	800edf6 <_dtoa_r+0x7de>
 800ef18:	2001      	movs	r0, #1
 800ef1a:	e774      	b.n	800ee06 <_dtoa_r+0x7ee>
 800ef1c:	f04f 0800 	mov.w	r8, #0
 800ef20:	e7f6      	b.n	800ef10 <_dtoa_r+0x8f8>
 800ef22:	4698      	mov	r8, r3
 800ef24:	e7f4      	b.n	800ef10 <_dtoa_r+0x8f8>
 800ef26:	d082      	beq.n	800ee2e <_dtoa_r+0x816>
 800ef28:	9a05      	ldr	r2, [sp, #20]
 800ef2a:	331c      	adds	r3, #28
 800ef2c:	441a      	add	r2, r3
 800ef2e:	9205      	str	r2, [sp, #20]
 800ef30:	9a06      	ldr	r2, [sp, #24]
 800ef32:	441a      	add	r2, r3
 800ef34:	441d      	add	r5, r3
 800ef36:	9206      	str	r2, [sp, #24]
 800ef38:	e779      	b.n	800ee2e <_dtoa_r+0x816>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	e7f4      	b.n	800ef28 <_dtoa_r+0x910>
 800ef3e:	9b04      	ldr	r3, [sp, #16]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	dc37      	bgt.n	800efb4 <_dtoa_r+0x99c>
 800ef44:	9b07      	ldr	r3, [sp, #28]
 800ef46:	2b02      	cmp	r3, #2
 800ef48:	dd34      	ble.n	800efb4 <_dtoa_r+0x99c>
 800ef4a:	9b04      	ldr	r3, [sp, #16]
 800ef4c:	9301      	str	r3, [sp, #4]
 800ef4e:	9b01      	ldr	r3, [sp, #4]
 800ef50:	b963      	cbnz	r3, 800ef6c <_dtoa_r+0x954>
 800ef52:	4631      	mov	r1, r6
 800ef54:	2205      	movs	r2, #5
 800ef56:	4620      	mov	r0, r4
 800ef58:	f000 fab2 	bl	800f4c0 <__multadd>
 800ef5c:	4601      	mov	r1, r0
 800ef5e:	4606      	mov	r6, r0
 800ef60:	4650      	mov	r0, sl
 800ef62:	f000 fcc7 	bl	800f8f4 <__mcmp>
 800ef66:	2800      	cmp	r0, #0
 800ef68:	f73f adbb 	bgt.w	800eae2 <_dtoa_r+0x4ca>
 800ef6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef6e:	9d00      	ldr	r5, [sp, #0]
 800ef70:	ea6f 0b03 	mvn.w	fp, r3
 800ef74:	f04f 0800 	mov.w	r8, #0
 800ef78:	4631      	mov	r1, r6
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	f000 fa7e 	bl	800f47c <_Bfree>
 800ef80:	2f00      	cmp	r7, #0
 800ef82:	f43f aeab 	beq.w	800ecdc <_dtoa_r+0x6c4>
 800ef86:	f1b8 0f00 	cmp.w	r8, #0
 800ef8a:	d005      	beq.n	800ef98 <_dtoa_r+0x980>
 800ef8c:	45b8      	cmp	r8, r7
 800ef8e:	d003      	beq.n	800ef98 <_dtoa_r+0x980>
 800ef90:	4641      	mov	r1, r8
 800ef92:	4620      	mov	r0, r4
 800ef94:	f000 fa72 	bl	800f47c <_Bfree>
 800ef98:	4639      	mov	r1, r7
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	f000 fa6e 	bl	800f47c <_Bfree>
 800efa0:	e69c      	b.n	800ecdc <_dtoa_r+0x6c4>
 800efa2:	2600      	movs	r6, #0
 800efa4:	4637      	mov	r7, r6
 800efa6:	e7e1      	b.n	800ef6c <_dtoa_r+0x954>
 800efa8:	46bb      	mov	fp, r7
 800efaa:	4637      	mov	r7, r6
 800efac:	e599      	b.n	800eae2 <_dtoa_r+0x4ca>
 800efae:	bf00      	nop
 800efb0:	40240000 	.word	0x40240000
 800efb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	f000 80c8 	beq.w	800f14c <_dtoa_r+0xb34>
 800efbc:	9b04      	ldr	r3, [sp, #16]
 800efbe:	9301      	str	r3, [sp, #4]
 800efc0:	2d00      	cmp	r5, #0
 800efc2:	dd05      	ble.n	800efd0 <_dtoa_r+0x9b8>
 800efc4:	4639      	mov	r1, r7
 800efc6:	462a      	mov	r2, r5
 800efc8:	4620      	mov	r0, r4
 800efca:	f000 fc27 	bl	800f81c <__lshift>
 800efce:	4607      	mov	r7, r0
 800efd0:	f1b8 0f00 	cmp.w	r8, #0
 800efd4:	d05b      	beq.n	800f08e <_dtoa_r+0xa76>
 800efd6:	6879      	ldr	r1, [r7, #4]
 800efd8:	4620      	mov	r0, r4
 800efda:	f000 fa0f 	bl	800f3fc <_Balloc>
 800efde:	4605      	mov	r5, r0
 800efe0:	b928      	cbnz	r0, 800efee <_dtoa_r+0x9d6>
 800efe2:	4b83      	ldr	r3, [pc, #524]	; (800f1f0 <_dtoa_r+0xbd8>)
 800efe4:	4602      	mov	r2, r0
 800efe6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800efea:	f7ff bb2e 	b.w	800e64a <_dtoa_r+0x32>
 800efee:	693a      	ldr	r2, [r7, #16]
 800eff0:	3202      	adds	r2, #2
 800eff2:	0092      	lsls	r2, r2, #2
 800eff4:	f107 010c 	add.w	r1, r7, #12
 800eff8:	300c      	adds	r0, #12
 800effa:	f7ff fa75 	bl	800e4e8 <memcpy>
 800effe:	2201      	movs	r2, #1
 800f000:	4629      	mov	r1, r5
 800f002:	4620      	mov	r0, r4
 800f004:	f000 fc0a 	bl	800f81c <__lshift>
 800f008:	9b00      	ldr	r3, [sp, #0]
 800f00a:	3301      	adds	r3, #1
 800f00c:	9304      	str	r3, [sp, #16]
 800f00e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f012:	4413      	add	r3, r2
 800f014:	9308      	str	r3, [sp, #32]
 800f016:	9b02      	ldr	r3, [sp, #8]
 800f018:	f003 0301 	and.w	r3, r3, #1
 800f01c:	46b8      	mov	r8, r7
 800f01e:	9306      	str	r3, [sp, #24]
 800f020:	4607      	mov	r7, r0
 800f022:	9b04      	ldr	r3, [sp, #16]
 800f024:	4631      	mov	r1, r6
 800f026:	3b01      	subs	r3, #1
 800f028:	4650      	mov	r0, sl
 800f02a:	9301      	str	r3, [sp, #4]
 800f02c:	f7ff fa6a 	bl	800e504 <quorem>
 800f030:	4641      	mov	r1, r8
 800f032:	9002      	str	r0, [sp, #8]
 800f034:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f038:	4650      	mov	r0, sl
 800f03a:	f000 fc5b 	bl	800f8f4 <__mcmp>
 800f03e:	463a      	mov	r2, r7
 800f040:	9005      	str	r0, [sp, #20]
 800f042:	4631      	mov	r1, r6
 800f044:	4620      	mov	r0, r4
 800f046:	f000 fc71 	bl	800f92c <__mdiff>
 800f04a:	68c2      	ldr	r2, [r0, #12]
 800f04c:	4605      	mov	r5, r0
 800f04e:	bb02      	cbnz	r2, 800f092 <_dtoa_r+0xa7a>
 800f050:	4601      	mov	r1, r0
 800f052:	4650      	mov	r0, sl
 800f054:	f000 fc4e 	bl	800f8f4 <__mcmp>
 800f058:	4602      	mov	r2, r0
 800f05a:	4629      	mov	r1, r5
 800f05c:	4620      	mov	r0, r4
 800f05e:	9209      	str	r2, [sp, #36]	; 0x24
 800f060:	f000 fa0c 	bl	800f47c <_Bfree>
 800f064:	9b07      	ldr	r3, [sp, #28]
 800f066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f068:	9d04      	ldr	r5, [sp, #16]
 800f06a:	ea43 0102 	orr.w	r1, r3, r2
 800f06e:	9b06      	ldr	r3, [sp, #24]
 800f070:	4319      	orrs	r1, r3
 800f072:	d110      	bne.n	800f096 <_dtoa_r+0xa7e>
 800f074:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f078:	d029      	beq.n	800f0ce <_dtoa_r+0xab6>
 800f07a:	9b05      	ldr	r3, [sp, #20]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	dd02      	ble.n	800f086 <_dtoa_r+0xa6e>
 800f080:	9b02      	ldr	r3, [sp, #8]
 800f082:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f086:	9b01      	ldr	r3, [sp, #4]
 800f088:	f883 9000 	strb.w	r9, [r3]
 800f08c:	e774      	b.n	800ef78 <_dtoa_r+0x960>
 800f08e:	4638      	mov	r0, r7
 800f090:	e7ba      	b.n	800f008 <_dtoa_r+0x9f0>
 800f092:	2201      	movs	r2, #1
 800f094:	e7e1      	b.n	800f05a <_dtoa_r+0xa42>
 800f096:	9b05      	ldr	r3, [sp, #20]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	db04      	blt.n	800f0a6 <_dtoa_r+0xa8e>
 800f09c:	9907      	ldr	r1, [sp, #28]
 800f09e:	430b      	orrs	r3, r1
 800f0a0:	9906      	ldr	r1, [sp, #24]
 800f0a2:	430b      	orrs	r3, r1
 800f0a4:	d120      	bne.n	800f0e8 <_dtoa_r+0xad0>
 800f0a6:	2a00      	cmp	r2, #0
 800f0a8:	dded      	ble.n	800f086 <_dtoa_r+0xa6e>
 800f0aa:	4651      	mov	r1, sl
 800f0ac:	2201      	movs	r2, #1
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f000 fbb4 	bl	800f81c <__lshift>
 800f0b4:	4631      	mov	r1, r6
 800f0b6:	4682      	mov	sl, r0
 800f0b8:	f000 fc1c 	bl	800f8f4 <__mcmp>
 800f0bc:	2800      	cmp	r0, #0
 800f0be:	dc03      	bgt.n	800f0c8 <_dtoa_r+0xab0>
 800f0c0:	d1e1      	bne.n	800f086 <_dtoa_r+0xa6e>
 800f0c2:	f019 0f01 	tst.w	r9, #1
 800f0c6:	d0de      	beq.n	800f086 <_dtoa_r+0xa6e>
 800f0c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f0cc:	d1d8      	bne.n	800f080 <_dtoa_r+0xa68>
 800f0ce:	9a01      	ldr	r2, [sp, #4]
 800f0d0:	2339      	movs	r3, #57	; 0x39
 800f0d2:	7013      	strb	r3, [r2, #0]
 800f0d4:	462b      	mov	r3, r5
 800f0d6:	461d      	mov	r5, r3
 800f0d8:	3b01      	subs	r3, #1
 800f0da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f0de:	2a39      	cmp	r2, #57	; 0x39
 800f0e0:	d06c      	beq.n	800f1bc <_dtoa_r+0xba4>
 800f0e2:	3201      	adds	r2, #1
 800f0e4:	701a      	strb	r2, [r3, #0]
 800f0e6:	e747      	b.n	800ef78 <_dtoa_r+0x960>
 800f0e8:	2a00      	cmp	r2, #0
 800f0ea:	dd07      	ble.n	800f0fc <_dtoa_r+0xae4>
 800f0ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f0f0:	d0ed      	beq.n	800f0ce <_dtoa_r+0xab6>
 800f0f2:	9a01      	ldr	r2, [sp, #4]
 800f0f4:	f109 0301 	add.w	r3, r9, #1
 800f0f8:	7013      	strb	r3, [r2, #0]
 800f0fa:	e73d      	b.n	800ef78 <_dtoa_r+0x960>
 800f0fc:	9b04      	ldr	r3, [sp, #16]
 800f0fe:	9a08      	ldr	r2, [sp, #32]
 800f100:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f104:	4293      	cmp	r3, r2
 800f106:	d043      	beq.n	800f190 <_dtoa_r+0xb78>
 800f108:	4651      	mov	r1, sl
 800f10a:	2300      	movs	r3, #0
 800f10c:	220a      	movs	r2, #10
 800f10e:	4620      	mov	r0, r4
 800f110:	f000 f9d6 	bl	800f4c0 <__multadd>
 800f114:	45b8      	cmp	r8, r7
 800f116:	4682      	mov	sl, r0
 800f118:	f04f 0300 	mov.w	r3, #0
 800f11c:	f04f 020a 	mov.w	r2, #10
 800f120:	4641      	mov	r1, r8
 800f122:	4620      	mov	r0, r4
 800f124:	d107      	bne.n	800f136 <_dtoa_r+0xb1e>
 800f126:	f000 f9cb 	bl	800f4c0 <__multadd>
 800f12a:	4680      	mov	r8, r0
 800f12c:	4607      	mov	r7, r0
 800f12e:	9b04      	ldr	r3, [sp, #16]
 800f130:	3301      	adds	r3, #1
 800f132:	9304      	str	r3, [sp, #16]
 800f134:	e775      	b.n	800f022 <_dtoa_r+0xa0a>
 800f136:	f000 f9c3 	bl	800f4c0 <__multadd>
 800f13a:	4639      	mov	r1, r7
 800f13c:	4680      	mov	r8, r0
 800f13e:	2300      	movs	r3, #0
 800f140:	220a      	movs	r2, #10
 800f142:	4620      	mov	r0, r4
 800f144:	f000 f9bc 	bl	800f4c0 <__multadd>
 800f148:	4607      	mov	r7, r0
 800f14a:	e7f0      	b.n	800f12e <_dtoa_r+0xb16>
 800f14c:	9b04      	ldr	r3, [sp, #16]
 800f14e:	9301      	str	r3, [sp, #4]
 800f150:	9d00      	ldr	r5, [sp, #0]
 800f152:	4631      	mov	r1, r6
 800f154:	4650      	mov	r0, sl
 800f156:	f7ff f9d5 	bl	800e504 <quorem>
 800f15a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f15e:	9b00      	ldr	r3, [sp, #0]
 800f160:	f805 9b01 	strb.w	r9, [r5], #1
 800f164:	1aea      	subs	r2, r5, r3
 800f166:	9b01      	ldr	r3, [sp, #4]
 800f168:	4293      	cmp	r3, r2
 800f16a:	dd07      	ble.n	800f17c <_dtoa_r+0xb64>
 800f16c:	4651      	mov	r1, sl
 800f16e:	2300      	movs	r3, #0
 800f170:	220a      	movs	r2, #10
 800f172:	4620      	mov	r0, r4
 800f174:	f000 f9a4 	bl	800f4c0 <__multadd>
 800f178:	4682      	mov	sl, r0
 800f17a:	e7ea      	b.n	800f152 <_dtoa_r+0xb3a>
 800f17c:	9b01      	ldr	r3, [sp, #4]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	bfc8      	it	gt
 800f182:	461d      	movgt	r5, r3
 800f184:	9b00      	ldr	r3, [sp, #0]
 800f186:	bfd8      	it	le
 800f188:	2501      	movle	r5, #1
 800f18a:	441d      	add	r5, r3
 800f18c:	f04f 0800 	mov.w	r8, #0
 800f190:	4651      	mov	r1, sl
 800f192:	2201      	movs	r2, #1
 800f194:	4620      	mov	r0, r4
 800f196:	f000 fb41 	bl	800f81c <__lshift>
 800f19a:	4631      	mov	r1, r6
 800f19c:	4682      	mov	sl, r0
 800f19e:	f000 fba9 	bl	800f8f4 <__mcmp>
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	dc96      	bgt.n	800f0d4 <_dtoa_r+0xabc>
 800f1a6:	d102      	bne.n	800f1ae <_dtoa_r+0xb96>
 800f1a8:	f019 0f01 	tst.w	r9, #1
 800f1ac:	d192      	bne.n	800f0d4 <_dtoa_r+0xabc>
 800f1ae:	462b      	mov	r3, r5
 800f1b0:	461d      	mov	r5, r3
 800f1b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f1b6:	2a30      	cmp	r2, #48	; 0x30
 800f1b8:	d0fa      	beq.n	800f1b0 <_dtoa_r+0xb98>
 800f1ba:	e6dd      	b.n	800ef78 <_dtoa_r+0x960>
 800f1bc:	9a00      	ldr	r2, [sp, #0]
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d189      	bne.n	800f0d6 <_dtoa_r+0xabe>
 800f1c2:	f10b 0b01 	add.w	fp, fp, #1
 800f1c6:	2331      	movs	r3, #49	; 0x31
 800f1c8:	e796      	b.n	800f0f8 <_dtoa_r+0xae0>
 800f1ca:	4b0a      	ldr	r3, [pc, #40]	; (800f1f4 <_dtoa_r+0xbdc>)
 800f1cc:	f7ff ba99 	b.w	800e702 <_dtoa_r+0xea>
 800f1d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	f47f aa6d 	bne.w	800e6b2 <_dtoa_r+0x9a>
 800f1d8:	4b07      	ldr	r3, [pc, #28]	; (800f1f8 <_dtoa_r+0xbe0>)
 800f1da:	f7ff ba92 	b.w	800e702 <_dtoa_r+0xea>
 800f1de:	9b01      	ldr	r3, [sp, #4]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	dcb5      	bgt.n	800f150 <_dtoa_r+0xb38>
 800f1e4:	9b07      	ldr	r3, [sp, #28]
 800f1e6:	2b02      	cmp	r3, #2
 800f1e8:	f73f aeb1 	bgt.w	800ef4e <_dtoa_r+0x936>
 800f1ec:	e7b0      	b.n	800f150 <_dtoa_r+0xb38>
 800f1ee:	bf00      	nop
 800f1f0:	08010858 	.word	0x08010858
 800f1f4:	080107b8 	.word	0x080107b8
 800f1f8:	080107dc 	.word	0x080107dc

0800f1fc <_free_r>:
 800f1fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1fe:	2900      	cmp	r1, #0
 800f200:	d044      	beq.n	800f28c <_free_r+0x90>
 800f202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f206:	9001      	str	r0, [sp, #4]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	f1a1 0404 	sub.w	r4, r1, #4
 800f20e:	bfb8      	it	lt
 800f210:	18e4      	addlt	r4, r4, r3
 800f212:	f000 f8e7 	bl	800f3e4 <__malloc_lock>
 800f216:	4a1e      	ldr	r2, [pc, #120]	; (800f290 <_free_r+0x94>)
 800f218:	9801      	ldr	r0, [sp, #4]
 800f21a:	6813      	ldr	r3, [r2, #0]
 800f21c:	b933      	cbnz	r3, 800f22c <_free_r+0x30>
 800f21e:	6063      	str	r3, [r4, #4]
 800f220:	6014      	str	r4, [r2, #0]
 800f222:	b003      	add	sp, #12
 800f224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f228:	f000 b8e2 	b.w	800f3f0 <__malloc_unlock>
 800f22c:	42a3      	cmp	r3, r4
 800f22e:	d908      	bls.n	800f242 <_free_r+0x46>
 800f230:	6825      	ldr	r5, [r4, #0]
 800f232:	1961      	adds	r1, r4, r5
 800f234:	428b      	cmp	r3, r1
 800f236:	bf01      	itttt	eq
 800f238:	6819      	ldreq	r1, [r3, #0]
 800f23a:	685b      	ldreq	r3, [r3, #4]
 800f23c:	1949      	addeq	r1, r1, r5
 800f23e:	6021      	streq	r1, [r4, #0]
 800f240:	e7ed      	b.n	800f21e <_free_r+0x22>
 800f242:	461a      	mov	r2, r3
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	b10b      	cbz	r3, 800f24c <_free_r+0x50>
 800f248:	42a3      	cmp	r3, r4
 800f24a:	d9fa      	bls.n	800f242 <_free_r+0x46>
 800f24c:	6811      	ldr	r1, [r2, #0]
 800f24e:	1855      	adds	r5, r2, r1
 800f250:	42a5      	cmp	r5, r4
 800f252:	d10b      	bne.n	800f26c <_free_r+0x70>
 800f254:	6824      	ldr	r4, [r4, #0]
 800f256:	4421      	add	r1, r4
 800f258:	1854      	adds	r4, r2, r1
 800f25a:	42a3      	cmp	r3, r4
 800f25c:	6011      	str	r1, [r2, #0]
 800f25e:	d1e0      	bne.n	800f222 <_free_r+0x26>
 800f260:	681c      	ldr	r4, [r3, #0]
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	6053      	str	r3, [r2, #4]
 800f266:	440c      	add	r4, r1
 800f268:	6014      	str	r4, [r2, #0]
 800f26a:	e7da      	b.n	800f222 <_free_r+0x26>
 800f26c:	d902      	bls.n	800f274 <_free_r+0x78>
 800f26e:	230c      	movs	r3, #12
 800f270:	6003      	str	r3, [r0, #0]
 800f272:	e7d6      	b.n	800f222 <_free_r+0x26>
 800f274:	6825      	ldr	r5, [r4, #0]
 800f276:	1961      	adds	r1, r4, r5
 800f278:	428b      	cmp	r3, r1
 800f27a:	bf04      	itt	eq
 800f27c:	6819      	ldreq	r1, [r3, #0]
 800f27e:	685b      	ldreq	r3, [r3, #4]
 800f280:	6063      	str	r3, [r4, #4]
 800f282:	bf04      	itt	eq
 800f284:	1949      	addeq	r1, r1, r5
 800f286:	6021      	streq	r1, [r4, #0]
 800f288:	6054      	str	r4, [r2, #4]
 800f28a:	e7ca      	b.n	800f222 <_free_r+0x26>
 800f28c:	b003      	add	sp, #12
 800f28e:	bd30      	pop	{r4, r5, pc}
 800f290:	200058ec 	.word	0x200058ec

0800f294 <malloc>:
 800f294:	4b02      	ldr	r3, [pc, #8]	; (800f2a0 <malloc+0xc>)
 800f296:	4601      	mov	r1, r0
 800f298:	6818      	ldr	r0, [r3, #0]
 800f29a:	f000 b823 	b.w	800f2e4 <_malloc_r>
 800f29e:	bf00      	nop
 800f2a0:	200000e0 	.word	0x200000e0

0800f2a4 <sbrk_aligned>:
 800f2a4:	b570      	push	{r4, r5, r6, lr}
 800f2a6:	4e0e      	ldr	r6, [pc, #56]	; (800f2e0 <sbrk_aligned+0x3c>)
 800f2a8:	460c      	mov	r4, r1
 800f2aa:	6831      	ldr	r1, [r6, #0]
 800f2ac:	4605      	mov	r5, r0
 800f2ae:	b911      	cbnz	r1, 800f2b6 <sbrk_aligned+0x12>
 800f2b0:	f000 fe40 	bl	800ff34 <_sbrk_r>
 800f2b4:	6030      	str	r0, [r6, #0]
 800f2b6:	4621      	mov	r1, r4
 800f2b8:	4628      	mov	r0, r5
 800f2ba:	f000 fe3b 	bl	800ff34 <_sbrk_r>
 800f2be:	1c43      	adds	r3, r0, #1
 800f2c0:	d00a      	beq.n	800f2d8 <sbrk_aligned+0x34>
 800f2c2:	1cc4      	adds	r4, r0, #3
 800f2c4:	f024 0403 	bic.w	r4, r4, #3
 800f2c8:	42a0      	cmp	r0, r4
 800f2ca:	d007      	beq.n	800f2dc <sbrk_aligned+0x38>
 800f2cc:	1a21      	subs	r1, r4, r0
 800f2ce:	4628      	mov	r0, r5
 800f2d0:	f000 fe30 	bl	800ff34 <_sbrk_r>
 800f2d4:	3001      	adds	r0, #1
 800f2d6:	d101      	bne.n	800f2dc <sbrk_aligned+0x38>
 800f2d8:	f04f 34ff 	mov.w	r4, #4294967295
 800f2dc:	4620      	mov	r0, r4
 800f2de:	bd70      	pop	{r4, r5, r6, pc}
 800f2e0:	200058f0 	.word	0x200058f0

0800f2e4 <_malloc_r>:
 800f2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2e8:	1ccd      	adds	r5, r1, #3
 800f2ea:	f025 0503 	bic.w	r5, r5, #3
 800f2ee:	3508      	adds	r5, #8
 800f2f0:	2d0c      	cmp	r5, #12
 800f2f2:	bf38      	it	cc
 800f2f4:	250c      	movcc	r5, #12
 800f2f6:	2d00      	cmp	r5, #0
 800f2f8:	4607      	mov	r7, r0
 800f2fa:	db01      	blt.n	800f300 <_malloc_r+0x1c>
 800f2fc:	42a9      	cmp	r1, r5
 800f2fe:	d905      	bls.n	800f30c <_malloc_r+0x28>
 800f300:	230c      	movs	r3, #12
 800f302:	603b      	str	r3, [r7, #0]
 800f304:	2600      	movs	r6, #0
 800f306:	4630      	mov	r0, r6
 800f308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f30c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f3e0 <_malloc_r+0xfc>
 800f310:	f000 f868 	bl	800f3e4 <__malloc_lock>
 800f314:	f8d8 3000 	ldr.w	r3, [r8]
 800f318:	461c      	mov	r4, r3
 800f31a:	bb5c      	cbnz	r4, 800f374 <_malloc_r+0x90>
 800f31c:	4629      	mov	r1, r5
 800f31e:	4638      	mov	r0, r7
 800f320:	f7ff ffc0 	bl	800f2a4 <sbrk_aligned>
 800f324:	1c43      	adds	r3, r0, #1
 800f326:	4604      	mov	r4, r0
 800f328:	d155      	bne.n	800f3d6 <_malloc_r+0xf2>
 800f32a:	f8d8 4000 	ldr.w	r4, [r8]
 800f32e:	4626      	mov	r6, r4
 800f330:	2e00      	cmp	r6, #0
 800f332:	d145      	bne.n	800f3c0 <_malloc_r+0xdc>
 800f334:	2c00      	cmp	r4, #0
 800f336:	d048      	beq.n	800f3ca <_malloc_r+0xe6>
 800f338:	6823      	ldr	r3, [r4, #0]
 800f33a:	4631      	mov	r1, r6
 800f33c:	4638      	mov	r0, r7
 800f33e:	eb04 0903 	add.w	r9, r4, r3
 800f342:	f000 fdf7 	bl	800ff34 <_sbrk_r>
 800f346:	4581      	cmp	r9, r0
 800f348:	d13f      	bne.n	800f3ca <_malloc_r+0xe6>
 800f34a:	6821      	ldr	r1, [r4, #0]
 800f34c:	1a6d      	subs	r5, r5, r1
 800f34e:	4629      	mov	r1, r5
 800f350:	4638      	mov	r0, r7
 800f352:	f7ff ffa7 	bl	800f2a4 <sbrk_aligned>
 800f356:	3001      	adds	r0, #1
 800f358:	d037      	beq.n	800f3ca <_malloc_r+0xe6>
 800f35a:	6823      	ldr	r3, [r4, #0]
 800f35c:	442b      	add	r3, r5
 800f35e:	6023      	str	r3, [r4, #0]
 800f360:	f8d8 3000 	ldr.w	r3, [r8]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d038      	beq.n	800f3da <_malloc_r+0xf6>
 800f368:	685a      	ldr	r2, [r3, #4]
 800f36a:	42a2      	cmp	r2, r4
 800f36c:	d12b      	bne.n	800f3c6 <_malloc_r+0xe2>
 800f36e:	2200      	movs	r2, #0
 800f370:	605a      	str	r2, [r3, #4]
 800f372:	e00f      	b.n	800f394 <_malloc_r+0xb0>
 800f374:	6822      	ldr	r2, [r4, #0]
 800f376:	1b52      	subs	r2, r2, r5
 800f378:	d41f      	bmi.n	800f3ba <_malloc_r+0xd6>
 800f37a:	2a0b      	cmp	r2, #11
 800f37c:	d917      	bls.n	800f3ae <_malloc_r+0xca>
 800f37e:	1961      	adds	r1, r4, r5
 800f380:	42a3      	cmp	r3, r4
 800f382:	6025      	str	r5, [r4, #0]
 800f384:	bf18      	it	ne
 800f386:	6059      	strne	r1, [r3, #4]
 800f388:	6863      	ldr	r3, [r4, #4]
 800f38a:	bf08      	it	eq
 800f38c:	f8c8 1000 	streq.w	r1, [r8]
 800f390:	5162      	str	r2, [r4, r5]
 800f392:	604b      	str	r3, [r1, #4]
 800f394:	4638      	mov	r0, r7
 800f396:	f104 060b 	add.w	r6, r4, #11
 800f39a:	f000 f829 	bl	800f3f0 <__malloc_unlock>
 800f39e:	f026 0607 	bic.w	r6, r6, #7
 800f3a2:	1d23      	adds	r3, r4, #4
 800f3a4:	1af2      	subs	r2, r6, r3
 800f3a6:	d0ae      	beq.n	800f306 <_malloc_r+0x22>
 800f3a8:	1b9b      	subs	r3, r3, r6
 800f3aa:	50a3      	str	r3, [r4, r2]
 800f3ac:	e7ab      	b.n	800f306 <_malloc_r+0x22>
 800f3ae:	42a3      	cmp	r3, r4
 800f3b0:	6862      	ldr	r2, [r4, #4]
 800f3b2:	d1dd      	bne.n	800f370 <_malloc_r+0x8c>
 800f3b4:	f8c8 2000 	str.w	r2, [r8]
 800f3b8:	e7ec      	b.n	800f394 <_malloc_r+0xb0>
 800f3ba:	4623      	mov	r3, r4
 800f3bc:	6864      	ldr	r4, [r4, #4]
 800f3be:	e7ac      	b.n	800f31a <_malloc_r+0x36>
 800f3c0:	4634      	mov	r4, r6
 800f3c2:	6876      	ldr	r6, [r6, #4]
 800f3c4:	e7b4      	b.n	800f330 <_malloc_r+0x4c>
 800f3c6:	4613      	mov	r3, r2
 800f3c8:	e7cc      	b.n	800f364 <_malloc_r+0x80>
 800f3ca:	230c      	movs	r3, #12
 800f3cc:	603b      	str	r3, [r7, #0]
 800f3ce:	4638      	mov	r0, r7
 800f3d0:	f000 f80e 	bl	800f3f0 <__malloc_unlock>
 800f3d4:	e797      	b.n	800f306 <_malloc_r+0x22>
 800f3d6:	6025      	str	r5, [r4, #0]
 800f3d8:	e7dc      	b.n	800f394 <_malloc_r+0xb0>
 800f3da:	605b      	str	r3, [r3, #4]
 800f3dc:	deff      	udf	#255	; 0xff
 800f3de:	bf00      	nop
 800f3e0:	200058ec 	.word	0x200058ec

0800f3e4 <__malloc_lock>:
 800f3e4:	4801      	ldr	r0, [pc, #4]	; (800f3ec <__malloc_lock+0x8>)
 800f3e6:	f7ff b87d 	b.w	800e4e4 <__retarget_lock_acquire_recursive>
 800f3ea:	bf00      	nop
 800f3ec:	200058e8 	.word	0x200058e8

0800f3f0 <__malloc_unlock>:
 800f3f0:	4801      	ldr	r0, [pc, #4]	; (800f3f8 <__malloc_unlock+0x8>)
 800f3f2:	f7ff b878 	b.w	800e4e6 <__retarget_lock_release_recursive>
 800f3f6:	bf00      	nop
 800f3f8:	200058e8 	.word	0x200058e8

0800f3fc <_Balloc>:
 800f3fc:	b570      	push	{r4, r5, r6, lr}
 800f3fe:	69c6      	ldr	r6, [r0, #28]
 800f400:	4604      	mov	r4, r0
 800f402:	460d      	mov	r5, r1
 800f404:	b976      	cbnz	r6, 800f424 <_Balloc+0x28>
 800f406:	2010      	movs	r0, #16
 800f408:	f7ff ff44 	bl	800f294 <malloc>
 800f40c:	4602      	mov	r2, r0
 800f40e:	61e0      	str	r0, [r4, #28]
 800f410:	b920      	cbnz	r0, 800f41c <_Balloc+0x20>
 800f412:	4b18      	ldr	r3, [pc, #96]	; (800f474 <_Balloc+0x78>)
 800f414:	4818      	ldr	r0, [pc, #96]	; (800f478 <_Balloc+0x7c>)
 800f416:	216b      	movs	r1, #107	; 0x6b
 800f418:	f000 fd9c 	bl	800ff54 <__assert_func>
 800f41c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f420:	6006      	str	r6, [r0, #0]
 800f422:	60c6      	str	r6, [r0, #12]
 800f424:	69e6      	ldr	r6, [r4, #28]
 800f426:	68f3      	ldr	r3, [r6, #12]
 800f428:	b183      	cbz	r3, 800f44c <_Balloc+0x50>
 800f42a:	69e3      	ldr	r3, [r4, #28]
 800f42c:	68db      	ldr	r3, [r3, #12]
 800f42e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f432:	b9b8      	cbnz	r0, 800f464 <_Balloc+0x68>
 800f434:	2101      	movs	r1, #1
 800f436:	fa01 f605 	lsl.w	r6, r1, r5
 800f43a:	1d72      	adds	r2, r6, #5
 800f43c:	0092      	lsls	r2, r2, #2
 800f43e:	4620      	mov	r0, r4
 800f440:	f000 fda6 	bl	800ff90 <_calloc_r>
 800f444:	b160      	cbz	r0, 800f460 <_Balloc+0x64>
 800f446:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f44a:	e00e      	b.n	800f46a <_Balloc+0x6e>
 800f44c:	2221      	movs	r2, #33	; 0x21
 800f44e:	2104      	movs	r1, #4
 800f450:	4620      	mov	r0, r4
 800f452:	f000 fd9d 	bl	800ff90 <_calloc_r>
 800f456:	69e3      	ldr	r3, [r4, #28]
 800f458:	60f0      	str	r0, [r6, #12]
 800f45a:	68db      	ldr	r3, [r3, #12]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d1e4      	bne.n	800f42a <_Balloc+0x2e>
 800f460:	2000      	movs	r0, #0
 800f462:	bd70      	pop	{r4, r5, r6, pc}
 800f464:	6802      	ldr	r2, [r0, #0]
 800f466:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f46a:	2300      	movs	r3, #0
 800f46c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f470:	e7f7      	b.n	800f462 <_Balloc+0x66>
 800f472:	bf00      	nop
 800f474:	080107e9 	.word	0x080107e9
 800f478:	08010869 	.word	0x08010869

0800f47c <_Bfree>:
 800f47c:	b570      	push	{r4, r5, r6, lr}
 800f47e:	69c6      	ldr	r6, [r0, #28]
 800f480:	4605      	mov	r5, r0
 800f482:	460c      	mov	r4, r1
 800f484:	b976      	cbnz	r6, 800f4a4 <_Bfree+0x28>
 800f486:	2010      	movs	r0, #16
 800f488:	f7ff ff04 	bl	800f294 <malloc>
 800f48c:	4602      	mov	r2, r0
 800f48e:	61e8      	str	r0, [r5, #28]
 800f490:	b920      	cbnz	r0, 800f49c <_Bfree+0x20>
 800f492:	4b09      	ldr	r3, [pc, #36]	; (800f4b8 <_Bfree+0x3c>)
 800f494:	4809      	ldr	r0, [pc, #36]	; (800f4bc <_Bfree+0x40>)
 800f496:	218f      	movs	r1, #143	; 0x8f
 800f498:	f000 fd5c 	bl	800ff54 <__assert_func>
 800f49c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4a0:	6006      	str	r6, [r0, #0]
 800f4a2:	60c6      	str	r6, [r0, #12]
 800f4a4:	b13c      	cbz	r4, 800f4b6 <_Bfree+0x3a>
 800f4a6:	69eb      	ldr	r3, [r5, #28]
 800f4a8:	6862      	ldr	r2, [r4, #4]
 800f4aa:	68db      	ldr	r3, [r3, #12]
 800f4ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f4b0:	6021      	str	r1, [r4, #0]
 800f4b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f4b6:	bd70      	pop	{r4, r5, r6, pc}
 800f4b8:	080107e9 	.word	0x080107e9
 800f4bc:	08010869 	.word	0x08010869

0800f4c0 <__multadd>:
 800f4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4c4:	690d      	ldr	r5, [r1, #16]
 800f4c6:	4607      	mov	r7, r0
 800f4c8:	460c      	mov	r4, r1
 800f4ca:	461e      	mov	r6, r3
 800f4cc:	f101 0c14 	add.w	ip, r1, #20
 800f4d0:	2000      	movs	r0, #0
 800f4d2:	f8dc 3000 	ldr.w	r3, [ip]
 800f4d6:	b299      	uxth	r1, r3
 800f4d8:	fb02 6101 	mla	r1, r2, r1, r6
 800f4dc:	0c1e      	lsrs	r6, r3, #16
 800f4de:	0c0b      	lsrs	r3, r1, #16
 800f4e0:	fb02 3306 	mla	r3, r2, r6, r3
 800f4e4:	b289      	uxth	r1, r1
 800f4e6:	3001      	adds	r0, #1
 800f4e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f4ec:	4285      	cmp	r5, r0
 800f4ee:	f84c 1b04 	str.w	r1, [ip], #4
 800f4f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f4f6:	dcec      	bgt.n	800f4d2 <__multadd+0x12>
 800f4f8:	b30e      	cbz	r6, 800f53e <__multadd+0x7e>
 800f4fa:	68a3      	ldr	r3, [r4, #8]
 800f4fc:	42ab      	cmp	r3, r5
 800f4fe:	dc19      	bgt.n	800f534 <__multadd+0x74>
 800f500:	6861      	ldr	r1, [r4, #4]
 800f502:	4638      	mov	r0, r7
 800f504:	3101      	adds	r1, #1
 800f506:	f7ff ff79 	bl	800f3fc <_Balloc>
 800f50a:	4680      	mov	r8, r0
 800f50c:	b928      	cbnz	r0, 800f51a <__multadd+0x5a>
 800f50e:	4602      	mov	r2, r0
 800f510:	4b0c      	ldr	r3, [pc, #48]	; (800f544 <__multadd+0x84>)
 800f512:	480d      	ldr	r0, [pc, #52]	; (800f548 <__multadd+0x88>)
 800f514:	21ba      	movs	r1, #186	; 0xba
 800f516:	f000 fd1d 	bl	800ff54 <__assert_func>
 800f51a:	6922      	ldr	r2, [r4, #16]
 800f51c:	3202      	adds	r2, #2
 800f51e:	f104 010c 	add.w	r1, r4, #12
 800f522:	0092      	lsls	r2, r2, #2
 800f524:	300c      	adds	r0, #12
 800f526:	f7fe ffdf 	bl	800e4e8 <memcpy>
 800f52a:	4621      	mov	r1, r4
 800f52c:	4638      	mov	r0, r7
 800f52e:	f7ff ffa5 	bl	800f47c <_Bfree>
 800f532:	4644      	mov	r4, r8
 800f534:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f538:	3501      	adds	r5, #1
 800f53a:	615e      	str	r6, [r3, #20]
 800f53c:	6125      	str	r5, [r4, #16]
 800f53e:	4620      	mov	r0, r4
 800f540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f544:	08010858 	.word	0x08010858
 800f548:	08010869 	.word	0x08010869

0800f54c <__hi0bits>:
 800f54c:	0c03      	lsrs	r3, r0, #16
 800f54e:	041b      	lsls	r3, r3, #16
 800f550:	b9d3      	cbnz	r3, 800f588 <__hi0bits+0x3c>
 800f552:	0400      	lsls	r0, r0, #16
 800f554:	2310      	movs	r3, #16
 800f556:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f55a:	bf04      	itt	eq
 800f55c:	0200      	lsleq	r0, r0, #8
 800f55e:	3308      	addeq	r3, #8
 800f560:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f564:	bf04      	itt	eq
 800f566:	0100      	lsleq	r0, r0, #4
 800f568:	3304      	addeq	r3, #4
 800f56a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f56e:	bf04      	itt	eq
 800f570:	0080      	lsleq	r0, r0, #2
 800f572:	3302      	addeq	r3, #2
 800f574:	2800      	cmp	r0, #0
 800f576:	db05      	blt.n	800f584 <__hi0bits+0x38>
 800f578:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f57c:	f103 0301 	add.w	r3, r3, #1
 800f580:	bf08      	it	eq
 800f582:	2320      	moveq	r3, #32
 800f584:	4618      	mov	r0, r3
 800f586:	4770      	bx	lr
 800f588:	2300      	movs	r3, #0
 800f58a:	e7e4      	b.n	800f556 <__hi0bits+0xa>

0800f58c <__lo0bits>:
 800f58c:	6803      	ldr	r3, [r0, #0]
 800f58e:	f013 0207 	ands.w	r2, r3, #7
 800f592:	d00c      	beq.n	800f5ae <__lo0bits+0x22>
 800f594:	07d9      	lsls	r1, r3, #31
 800f596:	d422      	bmi.n	800f5de <__lo0bits+0x52>
 800f598:	079a      	lsls	r2, r3, #30
 800f59a:	bf49      	itett	mi
 800f59c:	085b      	lsrmi	r3, r3, #1
 800f59e:	089b      	lsrpl	r3, r3, #2
 800f5a0:	6003      	strmi	r3, [r0, #0]
 800f5a2:	2201      	movmi	r2, #1
 800f5a4:	bf5c      	itt	pl
 800f5a6:	6003      	strpl	r3, [r0, #0]
 800f5a8:	2202      	movpl	r2, #2
 800f5aa:	4610      	mov	r0, r2
 800f5ac:	4770      	bx	lr
 800f5ae:	b299      	uxth	r1, r3
 800f5b0:	b909      	cbnz	r1, 800f5b6 <__lo0bits+0x2a>
 800f5b2:	0c1b      	lsrs	r3, r3, #16
 800f5b4:	2210      	movs	r2, #16
 800f5b6:	b2d9      	uxtb	r1, r3
 800f5b8:	b909      	cbnz	r1, 800f5be <__lo0bits+0x32>
 800f5ba:	3208      	adds	r2, #8
 800f5bc:	0a1b      	lsrs	r3, r3, #8
 800f5be:	0719      	lsls	r1, r3, #28
 800f5c0:	bf04      	itt	eq
 800f5c2:	091b      	lsreq	r3, r3, #4
 800f5c4:	3204      	addeq	r2, #4
 800f5c6:	0799      	lsls	r1, r3, #30
 800f5c8:	bf04      	itt	eq
 800f5ca:	089b      	lsreq	r3, r3, #2
 800f5cc:	3202      	addeq	r2, #2
 800f5ce:	07d9      	lsls	r1, r3, #31
 800f5d0:	d403      	bmi.n	800f5da <__lo0bits+0x4e>
 800f5d2:	085b      	lsrs	r3, r3, #1
 800f5d4:	f102 0201 	add.w	r2, r2, #1
 800f5d8:	d003      	beq.n	800f5e2 <__lo0bits+0x56>
 800f5da:	6003      	str	r3, [r0, #0]
 800f5dc:	e7e5      	b.n	800f5aa <__lo0bits+0x1e>
 800f5de:	2200      	movs	r2, #0
 800f5e0:	e7e3      	b.n	800f5aa <__lo0bits+0x1e>
 800f5e2:	2220      	movs	r2, #32
 800f5e4:	e7e1      	b.n	800f5aa <__lo0bits+0x1e>
	...

0800f5e8 <__i2b>:
 800f5e8:	b510      	push	{r4, lr}
 800f5ea:	460c      	mov	r4, r1
 800f5ec:	2101      	movs	r1, #1
 800f5ee:	f7ff ff05 	bl	800f3fc <_Balloc>
 800f5f2:	4602      	mov	r2, r0
 800f5f4:	b928      	cbnz	r0, 800f602 <__i2b+0x1a>
 800f5f6:	4b05      	ldr	r3, [pc, #20]	; (800f60c <__i2b+0x24>)
 800f5f8:	4805      	ldr	r0, [pc, #20]	; (800f610 <__i2b+0x28>)
 800f5fa:	f240 1145 	movw	r1, #325	; 0x145
 800f5fe:	f000 fca9 	bl	800ff54 <__assert_func>
 800f602:	2301      	movs	r3, #1
 800f604:	6144      	str	r4, [r0, #20]
 800f606:	6103      	str	r3, [r0, #16]
 800f608:	bd10      	pop	{r4, pc}
 800f60a:	bf00      	nop
 800f60c:	08010858 	.word	0x08010858
 800f610:	08010869 	.word	0x08010869

0800f614 <__multiply>:
 800f614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f618:	4691      	mov	r9, r2
 800f61a:	690a      	ldr	r2, [r1, #16]
 800f61c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f620:	429a      	cmp	r2, r3
 800f622:	bfb8      	it	lt
 800f624:	460b      	movlt	r3, r1
 800f626:	460c      	mov	r4, r1
 800f628:	bfbc      	itt	lt
 800f62a:	464c      	movlt	r4, r9
 800f62c:	4699      	movlt	r9, r3
 800f62e:	6927      	ldr	r7, [r4, #16]
 800f630:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f634:	68a3      	ldr	r3, [r4, #8]
 800f636:	6861      	ldr	r1, [r4, #4]
 800f638:	eb07 060a 	add.w	r6, r7, sl
 800f63c:	42b3      	cmp	r3, r6
 800f63e:	b085      	sub	sp, #20
 800f640:	bfb8      	it	lt
 800f642:	3101      	addlt	r1, #1
 800f644:	f7ff feda 	bl	800f3fc <_Balloc>
 800f648:	b930      	cbnz	r0, 800f658 <__multiply+0x44>
 800f64a:	4602      	mov	r2, r0
 800f64c:	4b44      	ldr	r3, [pc, #272]	; (800f760 <__multiply+0x14c>)
 800f64e:	4845      	ldr	r0, [pc, #276]	; (800f764 <__multiply+0x150>)
 800f650:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f654:	f000 fc7e 	bl	800ff54 <__assert_func>
 800f658:	f100 0514 	add.w	r5, r0, #20
 800f65c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f660:	462b      	mov	r3, r5
 800f662:	2200      	movs	r2, #0
 800f664:	4543      	cmp	r3, r8
 800f666:	d321      	bcc.n	800f6ac <__multiply+0x98>
 800f668:	f104 0314 	add.w	r3, r4, #20
 800f66c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f670:	f109 0314 	add.w	r3, r9, #20
 800f674:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f678:	9202      	str	r2, [sp, #8]
 800f67a:	1b3a      	subs	r2, r7, r4
 800f67c:	3a15      	subs	r2, #21
 800f67e:	f022 0203 	bic.w	r2, r2, #3
 800f682:	3204      	adds	r2, #4
 800f684:	f104 0115 	add.w	r1, r4, #21
 800f688:	428f      	cmp	r7, r1
 800f68a:	bf38      	it	cc
 800f68c:	2204      	movcc	r2, #4
 800f68e:	9201      	str	r2, [sp, #4]
 800f690:	9a02      	ldr	r2, [sp, #8]
 800f692:	9303      	str	r3, [sp, #12]
 800f694:	429a      	cmp	r2, r3
 800f696:	d80c      	bhi.n	800f6b2 <__multiply+0x9e>
 800f698:	2e00      	cmp	r6, #0
 800f69a:	dd03      	ble.n	800f6a4 <__multiply+0x90>
 800f69c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d05b      	beq.n	800f75c <__multiply+0x148>
 800f6a4:	6106      	str	r6, [r0, #16]
 800f6a6:	b005      	add	sp, #20
 800f6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ac:	f843 2b04 	str.w	r2, [r3], #4
 800f6b0:	e7d8      	b.n	800f664 <__multiply+0x50>
 800f6b2:	f8b3 a000 	ldrh.w	sl, [r3]
 800f6b6:	f1ba 0f00 	cmp.w	sl, #0
 800f6ba:	d024      	beq.n	800f706 <__multiply+0xf2>
 800f6bc:	f104 0e14 	add.w	lr, r4, #20
 800f6c0:	46a9      	mov	r9, r5
 800f6c2:	f04f 0c00 	mov.w	ip, #0
 800f6c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f6ca:	f8d9 1000 	ldr.w	r1, [r9]
 800f6ce:	fa1f fb82 	uxth.w	fp, r2
 800f6d2:	b289      	uxth	r1, r1
 800f6d4:	fb0a 110b 	mla	r1, sl, fp, r1
 800f6d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f6dc:	f8d9 2000 	ldr.w	r2, [r9]
 800f6e0:	4461      	add	r1, ip
 800f6e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f6e6:	fb0a c20b 	mla	r2, sl, fp, ip
 800f6ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f6ee:	b289      	uxth	r1, r1
 800f6f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f6f4:	4577      	cmp	r7, lr
 800f6f6:	f849 1b04 	str.w	r1, [r9], #4
 800f6fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f6fe:	d8e2      	bhi.n	800f6c6 <__multiply+0xb2>
 800f700:	9a01      	ldr	r2, [sp, #4]
 800f702:	f845 c002 	str.w	ip, [r5, r2]
 800f706:	9a03      	ldr	r2, [sp, #12]
 800f708:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f70c:	3304      	adds	r3, #4
 800f70e:	f1b9 0f00 	cmp.w	r9, #0
 800f712:	d021      	beq.n	800f758 <__multiply+0x144>
 800f714:	6829      	ldr	r1, [r5, #0]
 800f716:	f104 0c14 	add.w	ip, r4, #20
 800f71a:	46ae      	mov	lr, r5
 800f71c:	f04f 0a00 	mov.w	sl, #0
 800f720:	f8bc b000 	ldrh.w	fp, [ip]
 800f724:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f728:	fb09 220b 	mla	r2, r9, fp, r2
 800f72c:	4452      	add	r2, sl
 800f72e:	b289      	uxth	r1, r1
 800f730:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f734:	f84e 1b04 	str.w	r1, [lr], #4
 800f738:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f73c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f740:	f8be 1000 	ldrh.w	r1, [lr]
 800f744:	fb09 110a 	mla	r1, r9, sl, r1
 800f748:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f74c:	4567      	cmp	r7, ip
 800f74e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f752:	d8e5      	bhi.n	800f720 <__multiply+0x10c>
 800f754:	9a01      	ldr	r2, [sp, #4]
 800f756:	50a9      	str	r1, [r5, r2]
 800f758:	3504      	adds	r5, #4
 800f75a:	e799      	b.n	800f690 <__multiply+0x7c>
 800f75c:	3e01      	subs	r6, #1
 800f75e:	e79b      	b.n	800f698 <__multiply+0x84>
 800f760:	08010858 	.word	0x08010858
 800f764:	08010869 	.word	0x08010869

0800f768 <__pow5mult>:
 800f768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f76c:	4615      	mov	r5, r2
 800f76e:	f012 0203 	ands.w	r2, r2, #3
 800f772:	4606      	mov	r6, r0
 800f774:	460f      	mov	r7, r1
 800f776:	d007      	beq.n	800f788 <__pow5mult+0x20>
 800f778:	4c25      	ldr	r4, [pc, #148]	; (800f810 <__pow5mult+0xa8>)
 800f77a:	3a01      	subs	r2, #1
 800f77c:	2300      	movs	r3, #0
 800f77e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f782:	f7ff fe9d 	bl	800f4c0 <__multadd>
 800f786:	4607      	mov	r7, r0
 800f788:	10ad      	asrs	r5, r5, #2
 800f78a:	d03d      	beq.n	800f808 <__pow5mult+0xa0>
 800f78c:	69f4      	ldr	r4, [r6, #28]
 800f78e:	b97c      	cbnz	r4, 800f7b0 <__pow5mult+0x48>
 800f790:	2010      	movs	r0, #16
 800f792:	f7ff fd7f 	bl	800f294 <malloc>
 800f796:	4602      	mov	r2, r0
 800f798:	61f0      	str	r0, [r6, #28]
 800f79a:	b928      	cbnz	r0, 800f7a8 <__pow5mult+0x40>
 800f79c:	4b1d      	ldr	r3, [pc, #116]	; (800f814 <__pow5mult+0xac>)
 800f79e:	481e      	ldr	r0, [pc, #120]	; (800f818 <__pow5mult+0xb0>)
 800f7a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f7a4:	f000 fbd6 	bl	800ff54 <__assert_func>
 800f7a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f7ac:	6004      	str	r4, [r0, #0]
 800f7ae:	60c4      	str	r4, [r0, #12]
 800f7b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f7b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f7b8:	b94c      	cbnz	r4, 800f7ce <__pow5mult+0x66>
 800f7ba:	f240 2171 	movw	r1, #625	; 0x271
 800f7be:	4630      	mov	r0, r6
 800f7c0:	f7ff ff12 	bl	800f5e8 <__i2b>
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f7ca:	4604      	mov	r4, r0
 800f7cc:	6003      	str	r3, [r0, #0]
 800f7ce:	f04f 0900 	mov.w	r9, #0
 800f7d2:	07eb      	lsls	r3, r5, #31
 800f7d4:	d50a      	bpl.n	800f7ec <__pow5mult+0x84>
 800f7d6:	4639      	mov	r1, r7
 800f7d8:	4622      	mov	r2, r4
 800f7da:	4630      	mov	r0, r6
 800f7dc:	f7ff ff1a 	bl	800f614 <__multiply>
 800f7e0:	4639      	mov	r1, r7
 800f7e2:	4680      	mov	r8, r0
 800f7e4:	4630      	mov	r0, r6
 800f7e6:	f7ff fe49 	bl	800f47c <_Bfree>
 800f7ea:	4647      	mov	r7, r8
 800f7ec:	106d      	asrs	r5, r5, #1
 800f7ee:	d00b      	beq.n	800f808 <__pow5mult+0xa0>
 800f7f0:	6820      	ldr	r0, [r4, #0]
 800f7f2:	b938      	cbnz	r0, 800f804 <__pow5mult+0x9c>
 800f7f4:	4622      	mov	r2, r4
 800f7f6:	4621      	mov	r1, r4
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	f7ff ff0b 	bl	800f614 <__multiply>
 800f7fe:	6020      	str	r0, [r4, #0]
 800f800:	f8c0 9000 	str.w	r9, [r0]
 800f804:	4604      	mov	r4, r0
 800f806:	e7e4      	b.n	800f7d2 <__pow5mult+0x6a>
 800f808:	4638      	mov	r0, r7
 800f80a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f80e:	bf00      	nop
 800f810:	080109b8 	.word	0x080109b8
 800f814:	080107e9 	.word	0x080107e9
 800f818:	08010869 	.word	0x08010869

0800f81c <__lshift>:
 800f81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f820:	460c      	mov	r4, r1
 800f822:	6849      	ldr	r1, [r1, #4]
 800f824:	6923      	ldr	r3, [r4, #16]
 800f826:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f82a:	68a3      	ldr	r3, [r4, #8]
 800f82c:	4607      	mov	r7, r0
 800f82e:	4691      	mov	r9, r2
 800f830:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f834:	f108 0601 	add.w	r6, r8, #1
 800f838:	42b3      	cmp	r3, r6
 800f83a:	db0b      	blt.n	800f854 <__lshift+0x38>
 800f83c:	4638      	mov	r0, r7
 800f83e:	f7ff fddd 	bl	800f3fc <_Balloc>
 800f842:	4605      	mov	r5, r0
 800f844:	b948      	cbnz	r0, 800f85a <__lshift+0x3e>
 800f846:	4602      	mov	r2, r0
 800f848:	4b28      	ldr	r3, [pc, #160]	; (800f8ec <__lshift+0xd0>)
 800f84a:	4829      	ldr	r0, [pc, #164]	; (800f8f0 <__lshift+0xd4>)
 800f84c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f850:	f000 fb80 	bl	800ff54 <__assert_func>
 800f854:	3101      	adds	r1, #1
 800f856:	005b      	lsls	r3, r3, #1
 800f858:	e7ee      	b.n	800f838 <__lshift+0x1c>
 800f85a:	2300      	movs	r3, #0
 800f85c:	f100 0114 	add.w	r1, r0, #20
 800f860:	f100 0210 	add.w	r2, r0, #16
 800f864:	4618      	mov	r0, r3
 800f866:	4553      	cmp	r3, sl
 800f868:	db33      	blt.n	800f8d2 <__lshift+0xb6>
 800f86a:	6920      	ldr	r0, [r4, #16]
 800f86c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f870:	f104 0314 	add.w	r3, r4, #20
 800f874:	f019 091f 	ands.w	r9, r9, #31
 800f878:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f87c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f880:	d02b      	beq.n	800f8da <__lshift+0xbe>
 800f882:	f1c9 0e20 	rsb	lr, r9, #32
 800f886:	468a      	mov	sl, r1
 800f888:	2200      	movs	r2, #0
 800f88a:	6818      	ldr	r0, [r3, #0]
 800f88c:	fa00 f009 	lsl.w	r0, r0, r9
 800f890:	4310      	orrs	r0, r2
 800f892:	f84a 0b04 	str.w	r0, [sl], #4
 800f896:	f853 2b04 	ldr.w	r2, [r3], #4
 800f89a:	459c      	cmp	ip, r3
 800f89c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f8a0:	d8f3      	bhi.n	800f88a <__lshift+0x6e>
 800f8a2:	ebac 0304 	sub.w	r3, ip, r4
 800f8a6:	3b15      	subs	r3, #21
 800f8a8:	f023 0303 	bic.w	r3, r3, #3
 800f8ac:	3304      	adds	r3, #4
 800f8ae:	f104 0015 	add.w	r0, r4, #21
 800f8b2:	4584      	cmp	ip, r0
 800f8b4:	bf38      	it	cc
 800f8b6:	2304      	movcc	r3, #4
 800f8b8:	50ca      	str	r2, [r1, r3]
 800f8ba:	b10a      	cbz	r2, 800f8c0 <__lshift+0xa4>
 800f8bc:	f108 0602 	add.w	r6, r8, #2
 800f8c0:	3e01      	subs	r6, #1
 800f8c2:	4638      	mov	r0, r7
 800f8c4:	612e      	str	r6, [r5, #16]
 800f8c6:	4621      	mov	r1, r4
 800f8c8:	f7ff fdd8 	bl	800f47c <_Bfree>
 800f8cc:	4628      	mov	r0, r5
 800f8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800f8d6:	3301      	adds	r3, #1
 800f8d8:	e7c5      	b.n	800f866 <__lshift+0x4a>
 800f8da:	3904      	subs	r1, #4
 800f8dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f8e4:	459c      	cmp	ip, r3
 800f8e6:	d8f9      	bhi.n	800f8dc <__lshift+0xc0>
 800f8e8:	e7ea      	b.n	800f8c0 <__lshift+0xa4>
 800f8ea:	bf00      	nop
 800f8ec:	08010858 	.word	0x08010858
 800f8f0:	08010869 	.word	0x08010869

0800f8f4 <__mcmp>:
 800f8f4:	b530      	push	{r4, r5, lr}
 800f8f6:	6902      	ldr	r2, [r0, #16]
 800f8f8:	690c      	ldr	r4, [r1, #16]
 800f8fa:	1b12      	subs	r2, r2, r4
 800f8fc:	d10e      	bne.n	800f91c <__mcmp+0x28>
 800f8fe:	f100 0314 	add.w	r3, r0, #20
 800f902:	3114      	adds	r1, #20
 800f904:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f908:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f90c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f910:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f914:	42a5      	cmp	r5, r4
 800f916:	d003      	beq.n	800f920 <__mcmp+0x2c>
 800f918:	d305      	bcc.n	800f926 <__mcmp+0x32>
 800f91a:	2201      	movs	r2, #1
 800f91c:	4610      	mov	r0, r2
 800f91e:	bd30      	pop	{r4, r5, pc}
 800f920:	4283      	cmp	r3, r0
 800f922:	d3f3      	bcc.n	800f90c <__mcmp+0x18>
 800f924:	e7fa      	b.n	800f91c <__mcmp+0x28>
 800f926:	f04f 32ff 	mov.w	r2, #4294967295
 800f92a:	e7f7      	b.n	800f91c <__mcmp+0x28>

0800f92c <__mdiff>:
 800f92c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f930:	460c      	mov	r4, r1
 800f932:	4606      	mov	r6, r0
 800f934:	4611      	mov	r1, r2
 800f936:	4620      	mov	r0, r4
 800f938:	4690      	mov	r8, r2
 800f93a:	f7ff ffdb 	bl	800f8f4 <__mcmp>
 800f93e:	1e05      	subs	r5, r0, #0
 800f940:	d110      	bne.n	800f964 <__mdiff+0x38>
 800f942:	4629      	mov	r1, r5
 800f944:	4630      	mov	r0, r6
 800f946:	f7ff fd59 	bl	800f3fc <_Balloc>
 800f94a:	b930      	cbnz	r0, 800f95a <__mdiff+0x2e>
 800f94c:	4b3a      	ldr	r3, [pc, #232]	; (800fa38 <__mdiff+0x10c>)
 800f94e:	4602      	mov	r2, r0
 800f950:	f240 2137 	movw	r1, #567	; 0x237
 800f954:	4839      	ldr	r0, [pc, #228]	; (800fa3c <__mdiff+0x110>)
 800f956:	f000 fafd 	bl	800ff54 <__assert_func>
 800f95a:	2301      	movs	r3, #1
 800f95c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f960:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f964:	bfa4      	itt	ge
 800f966:	4643      	movge	r3, r8
 800f968:	46a0      	movge	r8, r4
 800f96a:	4630      	mov	r0, r6
 800f96c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f970:	bfa6      	itte	ge
 800f972:	461c      	movge	r4, r3
 800f974:	2500      	movge	r5, #0
 800f976:	2501      	movlt	r5, #1
 800f978:	f7ff fd40 	bl	800f3fc <_Balloc>
 800f97c:	b920      	cbnz	r0, 800f988 <__mdiff+0x5c>
 800f97e:	4b2e      	ldr	r3, [pc, #184]	; (800fa38 <__mdiff+0x10c>)
 800f980:	4602      	mov	r2, r0
 800f982:	f240 2145 	movw	r1, #581	; 0x245
 800f986:	e7e5      	b.n	800f954 <__mdiff+0x28>
 800f988:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f98c:	6926      	ldr	r6, [r4, #16]
 800f98e:	60c5      	str	r5, [r0, #12]
 800f990:	f104 0914 	add.w	r9, r4, #20
 800f994:	f108 0514 	add.w	r5, r8, #20
 800f998:	f100 0e14 	add.w	lr, r0, #20
 800f99c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f9a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f9a4:	f108 0210 	add.w	r2, r8, #16
 800f9a8:	46f2      	mov	sl, lr
 800f9aa:	2100      	movs	r1, #0
 800f9ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800f9b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f9b4:	fa11 f88b 	uxtah	r8, r1, fp
 800f9b8:	b299      	uxth	r1, r3
 800f9ba:	0c1b      	lsrs	r3, r3, #16
 800f9bc:	eba8 0801 	sub.w	r8, r8, r1
 800f9c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f9c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f9c8:	fa1f f888 	uxth.w	r8, r8
 800f9cc:	1419      	asrs	r1, r3, #16
 800f9ce:	454e      	cmp	r6, r9
 800f9d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f9d4:	f84a 3b04 	str.w	r3, [sl], #4
 800f9d8:	d8e8      	bhi.n	800f9ac <__mdiff+0x80>
 800f9da:	1b33      	subs	r3, r6, r4
 800f9dc:	3b15      	subs	r3, #21
 800f9de:	f023 0303 	bic.w	r3, r3, #3
 800f9e2:	3304      	adds	r3, #4
 800f9e4:	3415      	adds	r4, #21
 800f9e6:	42a6      	cmp	r6, r4
 800f9e8:	bf38      	it	cc
 800f9ea:	2304      	movcc	r3, #4
 800f9ec:	441d      	add	r5, r3
 800f9ee:	4473      	add	r3, lr
 800f9f0:	469e      	mov	lr, r3
 800f9f2:	462e      	mov	r6, r5
 800f9f4:	4566      	cmp	r6, ip
 800f9f6:	d30e      	bcc.n	800fa16 <__mdiff+0xea>
 800f9f8:	f10c 0203 	add.w	r2, ip, #3
 800f9fc:	1b52      	subs	r2, r2, r5
 800f9fe:	f022 0203 	bic.w	r2, r2, #3
 800fa02:	3d03      	subs	r5, #3
 800fa04:	45ac      	cmp	ip, r5
 800fa06:	bf38      	it	cc
 800fa08:	2200      	movcc	r2, #0
 800fa0a:	4413      	add	r3, r2
 800fa0c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fa10:	b17a      	cbz	r2, 800fa32 <__mdiff+0x106>
 800fa12:	6107      	str	r7, [r0, #16]
 800fa14:	e7a4      	b.n	800f960 <__mdiff+0x34>
 800fa16:	f856 8b04 	ldr.w	r8, [r6], #4
 800fa1a:	fa11 f288 	uxtah	r2, r1, r8
 800fa1e:	1414      	asrs	r4, r2, #16
 800fa20:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fa24:	b292      	uxth	r2, r2
 800fa26:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fa2a:	f84e 2b04 	str.w	r2, [lr], #4
 800fa2e:	1421      	asrs	r1, r4, #16
 800fa30:	e7e0      	b.n	800f9f4 <__mdiff+0xc8>
 800fa32:	3f01      	subs	r7, #1
 800fa34:	e7ea      	b.n	800fa0c <__mdiff+0xe0>
 800fa36:	bf00      	nop
 800fa38:	08010858 	.word	0x08010858
 800fa3c:	08010869 	.word	0x08010869

0800fa40 <__d2b>:
 800fa40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fa44:	460f      	mov	r7, r1
 800fa46:	2101      	movs	r1, #1
 800fa48:	ec59 8b10 	vmov	r8, r9, d0
 800fa4c:	4616      	mov	r6, r2
 800fa4e:	f7ff fcd5 	bl	800f3fc <_Balloc>
 800fa52:	4604      	mov	r4, r0
 800fa54:	b930      	cbnz	r0, 800fa64 <__d2b+0x24>
 800fa56:	4602      	mov	r2, r0
 800fa58:	4b24      	ldr	r3, [pc, #144]	; (800faec <__d2b+0xac>)
 800fa5a:	4825      	ldr	r0, [pc, #148]	; (800faf0 <__d2b+0xb0>)
 800fa5c:	f240 310f 	movw	r1, #783	; 0x30f
 800fa60:	f000 fa78 	bl	800ff54 <__assert_func>
 800fa64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fa68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fa6c:	bb2d      	cbnz	r5, 800faba <__d2b+0x7a>
 800fa6e:	9301      	str	r3, [sp, #4]
 800fa70:	f1b8 0300 	subs.w	r3, r8, #0
 800fa74:	d026      	beq.n	800fac4 <__d2b+0x84>
 800fa76:	4668      	mov	r0, sp
 800fa78:	9300      	str	r3, [sp, #0]
 800fa7a:	f7ff fd87 	bl	800f58c <__lo0bits>
 800fa7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fa82:	b1e8      	cbz	r0, 800fac0 <__d2b+0x80>
 800fa84:	f1c0 0320 	rsb	r3, r0, #32
 800fa88:	fa02 f303 	lsl.w	r3, r2, r3
 800fa8c:	430b      	orrs	r3, r1
 800fa8e:	40c2      	lsrs	r2, r0
 800fa90:	6163      	str	r3, [r4, #20]
 800fa92:	9201      	str	r2, [sp, #4]
 800fa94:	9b01      	ldr	r3, [sp, #4]
 800fa96:	61a3      	str	r3, [r4, #24]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	bf14      	ite	ne
 800fa9c:	2202      	movne	r2, #2
 800fa9e:	2201      	moveq	r2, #1
 800faa0:	6122      	str	r2, [r4, #16]
 800faa2:	b1bd      	cbz	r5, 800fad4 <__d2b+0x94>
 800faa4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800faa8:	4405      	add	r5, r0
 800faaa:	603d      	str	r5, [r7, #0]
 800faac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fab0:	6030      	str	r0, [r6, #0]
 800fab2:	4620      	mov	r0, r4
 800fab4:	b003      	add	sp, #12
 800fab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fabe:	e7d6      	b.n	800fa6e <__d2b+0x2e>
 800fac0:	6161      	str	r1, [r4, #20]
 800fac2:	e7e7      	b.n	800fa94 <__d2b+0x54>
 800fac4:	a801      	add	r0, sp, #4
 800fac6:	f7ff fd61 	bl	800f58c <__lo0bits>
 800faca:	9b01      	ldr	r3, [sp, #4]
 800facc:	6163      	str	r3, [r4, #20]
 800face:	3020      	adds	r0, #32
 800fad0:	2201      	movs	r2, #1
 800fad2:	e7e5      	b.n	800faa0 <__d2b+0x60>
 800fad4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fad8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fadc:	6038      	str	r0, [r7, #0]
 800fade:	6918      	ldr	r0, [r3, #16]
 800fae0:	f7ff fd34 	bl	800f54c <__hi0bits>
 800fae4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fae8:	e7e2      	b.n	800fab0 <__d2b+0x70>
 800faea:	bf00      	nop
 800faec:	08010858 	.word	0x08010858
 800faf0:	08010869 	.word	0x08010869

0800faf4 <__ssputs_r>:
 800faf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800faf8:	688e      	ldr	r6, [r1, #8]
 800fafa:	461f      	mov	r7, r3
 800fafc:	42be      	cmp	r6, r7
 800fafe:	680b      	ldr	r3, [r1, #0]
 800fb00:	4682      	mov	sl, r0
 800fb02:	460c      	mov	r4, r1
 800fb04:	4690      	mov	r8, r2
 800fb06:	d82c      	bhi.n	800fb62 <__ssputs_r+0x6e>
 800fb08:	898a      	ldrh	r2, [r1, #12]
 800fb0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fb0e:	d026      	beq.n	800fb5e <__ssputs_r+0x6a>
 800fb10:	6965      	ldr	r5, [r4, #20]
 800fb12:	6909      	ldr	r1, [r1, #16]
 800fb14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fb18:	eba3 0901 	sub.w	r9, r3, r1
 800fb1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fb20:	1c7b      	adds	r3, r7, #1
 800fb22:	444b      	add	r3, r9
 800fb24:	106d      	asrs	r5, r5, #1
 800fb26:	429d      	cmp	r5, r3
 800fb28:	bf38      	it	cc
 800fb2a:	461d      	movcc	r5, r3
 800fb2c:	0553      	lsls	r3, r2, #21
 800fb2e:	d527      	bpl.n	800fb80 <__ssputs_r+0x8c>
 800fb30:	4629      	mov	r1, r5
 800fb32:	f7ff fbd7 	bl	800f2e4 <_malloc_r>
 800fb36:	4606      	mov	r6, r0
 800fb38:	b360      	cbz	r0, 800fb94 <__ssputs_r+0xa0>
 800fb3a:	6921      	ldr	r1, [r4, #16]
 800fb3c:	464a      	mov	r2, r9
 800fb3e:	f7fe fcd3 	bl	800e4e8 <memcpy>
 800fb42:	89a3      	ldrh	r3, [r4, #12]
 800fb44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fb48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb4c:	81a3      	strh	r3, [r4, #12]
 800fb4e:	6126      	str	r6, [r4, #16]
 800fb50:	6165      	str	r5, [r4, #20]
 800fb52:	444e      	add	r6, r9
 800fb54:	eba5 0509 	sub.w	r5, r5, r9
 800fb58:	6026      	str	r6, [r4, #0]
 800fb5a:	60a5      	str	r5, [r4, #8]
 800fb5c:	463e      	mov	r6, r7
 800fb5e:	42be      	cmp	r6, r7
 800fb60:	d900      	bls.n	800fb64 <__ssputs_r+0x70>
 800fb62:	463e      	mov	r6, r7
 800fb64:	6820      	ldr	r0, [r4, #0]
 800fb66:	4632      	mov	r2, r6
 800fb68:	4641      	mov	r1, r8
 800fb6a:	f000 f9c9 	bl	800ff00 <memmove>
 800fb6e:	68a3      	ldr	r3, [r4, #8]
 800fb70:	1b9b      	subs	r3, r3, r6
 800fb72:	60a3      	str	r3, [r4, #8]
 800fb74:	6823      	ldr	r3, [r4, #0]
 800fb76:	4433      	add	r3, r6
 800fb78:	6023      	str	r3, [r4, #0]
 800fb7a:	2000      	movs	r0, #0
 800fb7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb80:	462a      	mov	r2, r5
 800fb82:	f000 fa2d 	bl	800ffe0 <_realloc_r>
 800fb86:	4606      	mov	r6, r0
 800fb88:	2800      	cmp	r0, #0
 800fb8a:	d1e0      	bne.n	800fb4e <__ssputs_r+0x5a>
 800fb8c:	6921      	ldr	r1, [r4, #16]
 800fb8e:	4650      	mov	r0, sl
 800fb90:	f7ff fb34 	bl	800f1fc <_free_r>
 800fb94:	230c      	movs	r3, #12
 800fb96:	f8ca 3000 	str.w	r3, [sl]
 800fb9a:	89a3      	ldrh	r3, [r4, #12]
 800fb9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fba0:	81a3      	strh	r3, [r4, #12]
 800fba2:	f04f 30ff 	mov.w	r0, #4294967295
 800fba6:	e7e9      	b.n	800fb7c <__ssputs_r+0x88>

0800fba8 <_svfiprintf_r>:
 800fba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbac:	4698      	mov	r8, r3
 800fbae:	898b      	ldrh	r3, [r1, #12]
 800fbb0:	061b      	lsls	r3, r3, #24
 800fbb2:	b09d      	sub	sp, #116	; 0x74
 800fbb4:	4607      	mov	r7, r0
 800fbb6:	460d      	mov	r5, r1
 800fbb8:	4614      	mov	r4, r2
 800fbba:	d50e      	bpl.n	800fbda <_svfiprintf_r+0x32>
 800fbbc:	690b      	ldr	r3, [r1, #16]
 800fbbe:	b963      	cbnz	r3, 800fbda <_svfiprintf_r+0x32>
 800fbc0:	2140      	movs	r1, #64	; 0x40
 800fbc2:	f7ff fb8f 	bl	800f2e4 <_malloc_r>
 800fbc6:	6028      	str	r0, [r5, #0]
 800fbc8:	6128      	str	r0, [r5, #16]
 800fbca:	b920      	cbnz	r0, 800fbd6 <_svfiprintf_r+0x2e>
 800fbcc:	230c      	movs	r3, #12
 800fbce:	603b      	str	r3, [r7, #0]
 800fbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800fbd4:	e0d0      	b.n	800fd78 <_svfiprintf_r+0x1d0>
 800fbd6:	2340      	movs	r3, #64	; 0x40
 800fbd8:	616b      	str	r3, [r5, #20]
 800fbda:	2300      	movs	r3, #0
 800fbdc:	9309      	str	r3, [sp, #36]	; 0x24
 800fbde:	2320      	movs	r3, #32
 800fbe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fbe4:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbe8:	2330      	movs	r3, #48	; 0x30
 800fbea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fd90 <_svfiprintf_r+0x1e8>
 800fbee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fbf2:	f04f 0901 	mov.w	r9, #1
 800fbf6:	4623      	mov	r3, r4
 800fbf8:	469a      	mov	sl, r3
 800fbfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbfe:	b10a      	cbz	r2, 800fc04 <_svfiprintf_r+0x5c>
 800fc00:	2a25      	cmp	r2, #37	; 0x25
 800fc02:	d1f9      	bne.n	800fbf8 <_svfiprintf_r+0x50>
 800fc04:	ebba 0b04 	subs.w	fp, sl, r4
 800fc08:	d00b      	beq.n	800fc22 <_svfiprintf_r+0x7a>
 800fc0a:	465b      	mov	r3, fp
 800fc0c:	4622      	mov	r2, r4
 800fc0e:	4629      	mov	r1, r5
 800fc10:	4638      	mov	r0, r7
 800fc12:	f7ff ff6f 	bl	800faf4 <__ssputs_r>
 800fc16:	3001      	adds	r0, #1
 800fc18:	f000 80a9 	beq.w	800fd6e <_svfiprintf_r+0x1c6>
 800fc1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc1e:	445a      	add	r2, fp
 800fc20:	9209      	str	r2, [sp, #36]	; 0x24
 800fc22:	f89a 3000 	ldrb.w	r3, [sl]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	f000 80a1 	beq.w	800fd6e <_svfiprintf_r+0x1c6>
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	f04f 32ff 	mov.w	r2, #4294967295
 800fc32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc36:	f10a 0a01 	add.w	sl, sl, #1
 800fc3a:	9304      	str	r3, [sp, #16]
 800fc3c:	9307      	str	r3, [sp, #28]
 800fc3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc42:	931a      	str	r3, [sp, #104]	; 0x68
 800fc44:	4654      	mov	r4, sl
 800fc46:	2205      	movs	r2, #5
 800fc48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc4c:	4850      	ldr	r0, [pc, #320]	; (800fd90 <_svfiprintf_r+0x1e8>)
 800fc4e:	f7f0 fabf 	bl	80001d0 <memchr>
 800fc52:	9a04      	ldr	r2, [sp, #16]
 800fc54:	b9d8      	cbnz	r0, 800fc8e <_svfiprintf_r+0xe6>
 800fc56:	06d0      	lsls	r0, r2, #27
 800fc58:	bf44      	itt	mi
 800fc5a:	2320      	movmi	r3, #32
 800fc5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc60:	0711      	lsls	r1, r2, #28
 800fc62:	bf44      	itt	mi
 800fc64:	232b      	movmi	r3, #43	; 0x2b
 800fc66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc6a:	f89a 3000 	ldrb.w	r3, [sl]
 800fc6e:	2b2a      	cmp	r3, #42	; 0x2a
 800fc70:	d015      	beq.n	800fc9e <_svfiprintf_r+0xf6>
 800fc72:	9a07      	ldr	r2, [sp, #28]
 800fc74:	4654      	mov	r4, sl
 800fc76:	2000      	movs	r0, #0
 800fc78:	f04f 0c0a 	mov.w	ip, #10
 800fc7c:	4621      	mov	r1, r4
 800fc7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc82:	3b30      	subs	r3, #48	; 0x30
 800fc84:	2b09      	cmp	r3, #9
 800fc86:	d94d      	bls.n	800fd24 <_svfiprintf_r+0x17c>
 800fc88:	b1b0      	cbz	r0, 800fcb8 <_svfiprintf_r+0x110>
 800fc8a:	9207      	str	r2, [sp, #28]
 800fc8c:	e014      	b.n	800fcb8 <_svfiprintf_r+0x110>
 800fc8e:	eba0 0308 	sub.w	r3, r0, r8
 800fc92:	fa09 f303 	lsl.w	r3, r9, r3
 800fc96:	4313      	orrs	r3, r2
 800fc98:	9304      	str	r3, [sp, #16]
 800fc9a:	46a2      	mov	sl, r4
 800fc9c:	e7d2      	b.n	800fc44 <_svfiprintf_r+0x9c>
 800fc9e:	9b03      	ldr	r3, [sp, #12]
 800fca0:	1d19      	adds	r1, r3, #4
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	9103      	str	r1, [sp, #12]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	bfbb      	ittet	lt
 800fcaa:	425b      	neglt	r3, r3
 800fcac:	f042 0202 	orrlt.w	r2, r2, #2
 800fcb0:	9307      	strge	r3, [sp, #28]
 800fcb2:	9307      	strlt	r3, [sp, #28]
 800fcb4:	bfb8      	it	lt
 800fcb6:	9204      	strlt	r2, [sp, #16]
 800fcb8:	7823      	ldrb	r3, [r4, #0]
 800fcba:	2b2e      	cmp	r3, #46	; 0x2e
 800fcbc:	d10c      	bne.n	800fcd8 <_svfiprintf_r+0x130>
 800fcbe:	7863      	ldrb	r3, [r4, #1]
 800fcc0:	2b2a      	cmp	r3, #42	; 0x2a
 800fcc2:	d134      	bne.n	800fd2e <_svfiprintf_r+0x186>
 800fcc4:	9b03      	ldr	r3, [sp, #12]
 800fcc6:	1d1a      	adds	r2, r3, #4
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	9203      	str	r2, [sp, #12]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	bfb8      	it	lt
 800fcd0:	f04f 33ff 	movlt.w	r3, #4294967295
 800fcd4:	3402      	adds	r4, #2
 800fcd6:	9305      	str	r3, [sp, #20]
 800fcd8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fda0 <_svfiprintf_r+0x1f8>
 800fcdc:	7821      	ldrb	r1, [r4, #0]
 800fcde:	2203      	movs	r2, #3
 800fce0:	4650      	mov	r0, sl
 800fce2:	f7f0 fa75 	bl	80001d0 <memchr>
 800fce6:	b138      	cbz	r0, 800fcf8 <_svfiprintf_r+0x150>
 800fce8:	9b04      	ldr	r3, [sp, #16]
 800fcea:	eba0 000a 	sub.w	r0, r0, sl
 800fcee:	2240      	movs	r2, #64	; 0x40
 800fcf0:	4082      	lsls	r2, r0
 800fcf2:	4313      	orrs	r3, r2
 800fcf4:	3401      	adds	r4, #1
 800fcf6:	9304      	str	r3, [sp, #16]
 800fcf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcfc:	4825      	ldr	r0, [pc, #148]	; (800fd94 <_svfiprintf_r+0x1ec>)
 800fcfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd02:	2206      	movs	r2, #6
 800fd04:	f7f0 fa64 	bl	80001d0 <memchr>
 800fd08:	2800      	cmp	r0, #0
 800fd0a:	d038      	beq.n	800fd7e <_svfiprintf_r+0x1d6>
 800fd0c:	4b22      	ldr	r3, [pc, #136]	; (800fd98 <_svfiprintf_r+0x1f0>)
 800fd0e:	bb1b      	cbnz	r3, 800fd58 <_svfiprintf_r+0x1b0>
 800fd10:	9b03      	ldr	r3, [sp, #12]
 800fd12:	3307      	adds	r3, #7
 800fd14:	f023 0307 	bic.w	r3, r3, #7
 800fd18:	3308      	adds	r3, #8
 800fd1a:	9303      	str	r3, [sp, #12]
 800fd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd1e:	4433      	add	r3, r6
 800fd20:	9309      	str	r3, [sp, #36]	; 0x24
 800fd22:	e768      	b.n	800fbf6 <_svfiprintf_r+0x4e>
 800fd24:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd28:	460c      	mov	r4, r1
 800fd2a:	2001      	movs	r0, #1
 800fd2c:	e7a6      	b.n	800fc7c <_svfiprintf_r+0xd4>
 800fd2e:	2300      	movs	r3, #0
 800fd30:	3401      	adds	r4, #1
 800fd32:	9305      	str	r3, [sp, #20]
 800fd34:	4619      	mov	r1, r3
 800fd36:	f04f 0c0a 	mov.w	ip, #10
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd40:	3a30      	subs	r2, #48	; 0x30
 800fd42:	2a09      	cmp	r2, #9
 800fd44:	d903      	bls.n	800fd4e <_svfiprintf_r+0x1a6>
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d0c6      	beq.n	800fcd8 <_svfiprintf_r+0x130>
 800fd4a:	9105      	str	r1, [sp, #20]
 800fd4c:	e7c4      	b.n	800fcd8 <_svfiprintf_r+0x130>
 800fd4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd52:	4604      	mov	r4, r0
 800fd54:	2301      	movs	r3, #1
 800fd56:	e7f0      	b.n	800fd3a <_svfiprintf_r+0x192>
 800fd58:	ab03      	add	r3, sp, #12
 800fd5a:	9300      	str	r3, [sp, #0]
 800fd5c:	462a      	mov	r2, r5
 800fd5e:	4b0f      	ldr	r3, [pc, #60]	; (800fd9c <_svfiprintf_r+0x1f4>)
 800fd60:	a904      	add	r1, sp, #16
 800fd62:	4638      	mov	r0, r7
 800fd64:	f7fd fe12 	bl	800d98c <_printf_float>
 800fd68:	1c42      	adds	r2, r0, #1
 800fd6a:	4606      	mov	r6, r0
 800fd6c:	d1d6      	bne.n	800fd1c <_svfiprintf_r+0x174>
 800fd6e:	89ab      	ldrh	r3, [r5, #12]
 800fd70:	065b      	lsls	r3, r3, #25
 800fd72:	f53f af2d 	bmi.w	800fbd0 <_svfiprintf_r+0x28>
 800fd76:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd78:	b01d      	add	sp, #116	; 0x74
 800fd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd7e:	ab03      	add	r3, sp, #12
 800fd80:	9300      	str	r3, [sp, #0]
 800fd82:	462a      	mov	r2, r5
 800fd84:	4b05      	ldr	r3, [pc, #20]	; (800fd9c <_svfiprintf_r+0x1f4>)
 800fd86:	a904      	add	r1, sp, #16
 800fd88:	4638      	mov	r0, r7
 800fd8a:	f7fe f8a3 	bl	800ded4 <_printf_i>
 800fd8e:	e7eb      	b.n	800fd68 <_svfiprintf_r+0x1c0>
 800fd90:	080109c4 	.word	0x080109c4
 800fd94:	080109ce 	.word	0x080109ce
 800fd98:	0800d98d 	.word	0x0800d98d
 800fd9c:	0800faf5 	.word	0x0800faf5
 800fda0:	080109ca 	.word	0x080109ca

0800fda4 <__sflush_r>:
 800fda4:	898a      	ldrh	r2, [r1, #12]
 800fda6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdaa:	4605      	mov	r5, r0
 800fdac:	0710      	lsls	r0, r2, #28
 800fdae:	460c      	mov	r4, r1
 800fdb0:	d458      	bmi.n	800fe64 <__sflush_r+0xc0>
 800fdb2:	684b      	ldr	r3, [r1, #4]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	dc05      	bgt.n	800fdc4 <__sflush_r+0x20>
 800fdb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	dc02      	bgt.n	800fdc4 <__sflush_r+0x20>
 800fdbe:	2000      	movs	r0, #0
 800fdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdc6:	2e00      	cmp	r6, #0
 800fdc8:	d0f9      	beq.n	800fdbe <__sflush_r+0x1a>
 800fdca:	2300      	movs	r3, #0
 800fdcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fdd0:	682f      	ldr	r7, [r5, #0]
 800fdd2:	6a21      	ldr	r1, [r4, #32]
 800fdd4:	602b      	str	r3, [r5, #0]
 800fdd6:	d032      	beq.n	800fe3e <__sflush_r+0x9a>
 800fdd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fdda:	89a3      	ldrh	r3, [r4, #12]
 800fddc:	075a      	lsls	r2, r3, #29
 800fdde:	d505      	bpl.n	800fdec <__sflush_r+0x48>
 800fde0:	6863      	ldr	r3, [r4, #4]
 800fde2:	1ac0      	subs	r0, r0, r3
 800fde4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fde6:	b10b      	cbz	r3, 800fdec <__sflush_r+0x48>
 800fde8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fdea:	1ac0      	subs	r0, r0, r3
 800fdec:	2300      	movs	r3, #0
 800fdee:	4602      	mov	r2, r0
 800fdf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdf2:	6a21      	ldr	r1, [r4, #32]
 800fdf4:	4628      	mov	r0, r5
 800fdf6:	47b0      	blx	r6
 800fdf8:	1c43      	adds	r3, r0, #1
 800fdfa:	89a3      	ldrh	r3, [r4, #12]
 800fdfc:	d106      	bne.n	800fe0c <__sflush_r+0x68>
 800fdfe:	6829      	ldr	r1, [r5, #0]
 800fe00:	291d      	cmp	r1, #29
 800fe02:	d82b      	bhi.n	800fe5c <__sflush_r+0xb8>
 800fe04:	4a29      	ldr	r2, [pc, #164]	; (800feac <__sflush_r+0x108>)
 800fe06:	410a      	asrs	r2, r1
 800fe08:	07d6      	lsls	r6, r2, #31
 800fe0a:	d427      	bmi.n	800fe5c <__sflush_r+0xb8>
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	6062      	str	r2, [r4, #4]
 800fe10:	04d9      	lsls	r1, r3, #19
 800fe12:	6922      	ldr	r2, [r4, #16]
 800fe14:	6022      	str	r2, [r4, #0]
 800fe16:	d504      	bpl.n	800fe22 <__sflush_r+0x7e>
 800fe18:	1c42      	adds	r2, r0, #1
 800fe1a:	d101      	bne.n	800fe20 <__sflush_r+0x7c>
 800fe1c:	682b      	ldr	r3, [r5, #0]
 800fe1e:	b903      	cbnz	r3, 800fe22 <__sflush_r+0x7e>
 800fe20:	6560      	str	r0, [r4, #84]	; 0x54
 800fe22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe24:	602f      	str	r7, [r5, #0]
 800fe26:	2900      	cmp	r1, #0
 800fe28:	d0c9      	beq.n	800fdbe <__sflush_r+0x1a>
 800fe2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe2e:	4299      	cmp	r1, r3
 800fe30:	d002      	beq.n	800fe38 <__sflush_r+0x94>
 800fe32:	4628      	mov	r0, r5
 800fe34:	f7ff f9e2 	bl	800f1fc <_free_r>
 800fe38:	2000      	movs	r0, #0
 800fe3a:	6360      	str	r0, [r4, #52]	; 0x34
 800fe3c:	e7c0      	b.n	800fdc0 <__sflush_r+0x1c>
 800fe3e:	2301      	movs	r3, #1
 800fe40:	4628      	mov	r0, r5
 800fe42:	47b0      	blx	r6
 800fe44:	1c41      	adds	r1, r0, #1
 800fe46:	d1c8      	bne.n	800fdda <__sflush_r+0x36>
 800fe48:	682b      	ldr	r3, [r5, #0]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d0c5      	beq.n	800fdda <__sflush_r+0x36>
 800fe4e:	2b1d      	cmp	r3, #29
 800fe50:	d001      	beq.n	800fe56 <__sflush_r+0xb2>
 800fe52:	2b16      	cmp	r3, #22
 800fe54:	d101      	bne.n	800fe5a <__sflush_r+0xb6>
 800fe56:	602f      	str	r7, [r5, #0]
 800fe58:	e7b1      	b.n	800fdbe <__sflush_r+0x1a>
 800fe5a:	89a3      	ldrh	r3, [r4, #12]
 800fe5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe60:	81a3      	strh	r3, [r4, #12]
 800fe62:	e7ad      	b.n	800fdc0 <__sflush_r+0x1c>
 800fe64:	690f      	ldr	r7, [r1, #16]
 800fe66:	2f00      	cmp	r7, #0
 800fe68:	d0a9      	beq.n	800fdbe <__sflush_r+0x1a>
 800fe6a:	0793      	lsls	r3, r2, #30
 800fe6c:	680e      	ldr	r6, [r1, #0]
 800fe6e:	bf08      	it	eq
 800fe70:	694b      	ldreq	r3, [r1, #20]
 800fe72:	600f      	str	r7, [r1, #0]
 800fe74:	bf18      	it	ne
 800fe76:	2300      	movne	r3, #0
 800fe78:	eba6 0807 	sub.w	r8, r6, r7
 800fe7c:	608b      	str	r3, [r1, #8]
 800fe7e:	f1b8 0f00 	cmp.w	r8, #0
 800fe82:	dd9c      	ble.n	800fdbe <__sflush_r+0x1a>
 800fe84:	6a21      	ldr	r1, [r4, #32]
 800fe86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe88:	4643      	mov	r3, r8
 800fe8a:	463a      	mov	r2, r7
 800fe8c:	4628      	mov	r0, r5
 800fe8e:	47b0      	blx	r6
 800fe90:	2800      	cmp	r0, #0
 800fe92:	dc06      	bgt.n	800fea2 <__sflush_r+0xfe>
 800fe94:	89a3      	ldrh	r3, [r4, #12]
 800fe96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe9a:	81a3      	strh	r3, [r4, #12]
 800fe9c:	f04f 30ff 	mov.w	r0, #4294967295
 800fea0:	e78e      	b.n	800fdc0 <__sflush_r+0x1c>
 800fea2:	4407      	add	r7, r0
 800fea4:	eba8 0800 	sub.w	r8, r8, r0
 800fea8:	e7e9      	b.n	800fe7e <__sflush_r+0xda>
 800feaa:	bf00      	nop
 800feac:	dfbffffe 	.word	0xdfbffffe

0800feb0 <_fflush_r>:
 800feb0:	b538      	push	{r3, r4, r5, lr}
 800feb2:	690b      	ldr	r3, [r1, #16]
 800feb4:	4605      	mov	r5, r0
 800feb6:	460c      	mov	r4, r1
 800feb8:	b913      	cbnz	r3, 800fec0 <_fflush_r+0x10>
 800feba:	2500      	movs	r5, #0
 800febc:	4628      	mov	r0, r5
 800febe:	bd38      	pop	{r3, r4, r5, pc}
 800fec0:	b118      	cbz	r0, 800feca <_fflush_r+0x1a>
 800fec2:	6a03      	ldr	r3, [r0, #32]
 800fec4:	b90b      	cbnz	r3, 800feca <_fflush_r+0x1a>
 800fec6:	f7fe f9a1 	bl	800e20c <__sinit>
 800feca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d0f3      	beq.n	800feba <_fflush_r+0xa>
 800fed2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fed4:	07d0      	lsls	r0, r2, #31
 800fed6:	d404      	bmi.n	800fee2 <_fflush_r+0x32>
 800fed8:	0599      	lsls	r1, r3, #22
 800feda:	d402      	bmi.n	800fee2 <_fflush_r+0x32>
 800fedc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fede:	f7fe fb01 	bl	800e4e4 <__retarget_lock_acquire_recursive>
 800fee2:	4628      	mov	r0, r5
 800fee4:	4621      	mov	r1, r4
 800fee6:	f7ff ff5d 	bl	800fda4 <__sflush_r>
 800feea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800feec:	07da      	lsls	r2, r3, #31
 800feee:	4605      	mov	r5, r0
 800fef0:	d4e4      	bmi.n	800febc <_fflush_r+0xc>
 800fef2:	89a3      	ldrh	r3, [r4, #12]
 800fef4:	059b      	lsls	r3, r3, #22
 800fef6:	d4e1      	bmi.n	800febc <_fflush_r+0xc>
 800fef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fefa:	f7fe faf4 	bl	800e4e6 <__retarget_lock_release_recursive>
 800fefe:	e7dd      	b.n	800febc <_fflush_r+0xc>

0800ff00 <memmove>:
 800ff00:	4288      	cmp	r0, r1
 800ff02:	b510      	push	{r4, lr}
 800ff04:	eb01 0402 	add.w	r4, r1, r2
 800ff08:	d902      	bls.n	800ff10 <memmove+0x10>
 800ff0a:	4284      	cmp	r4, r0
 800ff0c:	4623      	mov	r3, r4
 800ff0e:	d807      	bhi.n	800ff20 <memmove+0x20>
 800ff10:	1e43      	subs	r3, r0, #1
 800ff12:	42a1      	cmp	r1, r4
 800ff14:	d008      	beq.n	800ff28 <memmove+0x28>
 800ff16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff1e:	e7f8      	b.n	800ff12 <memmove+0x12>
 800ff20:	4402      	add	r2, r0
 800ff22:	4601      	mov	r1, r0
 800ff24:	428a      	cmp	r2, r1
 800ff26:	d100      	bne.n	800ff2a <memmove+0x2a>
 800ff28:	bd10      	pop	{r4, pc}
 800ff2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ff32:	e7f7      	b.n	800ff24 <memmove+0x24>

0800ff34 <_sbrk_r>:
 800ff34:	b538      	push	{r3, r4, r5, lr}
 800ff36:	4d06      	ldr	r5, [pc, #24]	; (800ff50 <_sbrk_r+0x1c>)
 800ff38:	2300      	movs	r3, #0
 800ff3a:	4604      	mov	r4, r0
 800ff3c:	4608      	mov	r0, r1
 800ff3e:	602b      	str	r3, [r5, #0]
 800ff40:	f7f4 fdba 	bl	8004ab8 <_sbrk>
 800ff44:	1c43      	adds	r3, r0, #1
 800ff46:	d102      	bne.n	800ff4e <_sbrk_r+0x1a>
 800ff48:	682b      	ldr	r3, [r5, #0]
 800ff4a:	b103      	cbz	r3, 800ff4e <_sbrk_r+0x1a>
 800ff4c:	6023      	str	r3, [r4, #0]
 800ff4e:	bd38      	pop	{r3, r4, r5, pc}
 800ff50:	200058e4 	.word	0x200058e4

0800ff54 <__assert_func>:
 800ff54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff56:	4614      	mov	r4, r2
 800ff58:	461a      	mov	r2, r3
 800ff5a:	4b09      	ldr	r3, [pc, #36]	; (800ff80 <__assert_func+0x2c>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	4605      	mov	r5, r0
 800ff60:	68d8      	ldr	r0, [r3, #12]
 800ff62:	b14c      	cbz	r4, 800ff78 <__assert_func+0x24>
 800ff64:	4b07      	ldr	r3, [pc, #28]	; (800ff84 <__assert_func+0x30>)
 800ff66:	9100      	str	r1, [sp, #0]
 800ff68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff6c:	4906      	ldr	r1, [pc, #24]	; (800ff88 <__assert_func+0x34>)
 800ff6e:	462b      	mov	r3, r5
 800ff70:	f000 f872 	bl	8010058 <fiprintf>
 800ff74:	f000 f882 	bl	801007c <abort>
 800ff78:	4b04      	ldr	r3, [pc, #16]	; (800ff8c <__assert_func+0x38>)
 800ff7a:	461c      	mov	r4, r3
 800ff7c:	e7f3      	b.n	800ff66 <__assert_func+0x12>
 800ff7e:	bf00      	nop
 800ff80:	200000e0 	.word	0x200000e0
 800ff84:	080109df 	.word	0x080109df
 800ff88:	080109ec 	.word	0x080109ec
 800ff8c:	08010a1a 	.word	0x08010a1a

0800ff90 <_calloc_r>:
 800ff90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff92:	fba1 2402 	umull	r2, r4, r1, r2
 800ff96:	b94c      	cbnz	r4, 800ffac <_calloc_r+0x1c>
 800ff98:	4611      	mov	r1, r2
 800ff9a:	9201      	str	r2, [sp, #4]
 800ff9c:	f7ff f9a2 	bl	800f2e4 <_malloc_r>
 800ffa0:	9a01      	ldr	r2, [sp, #4]
 800ffa2:	4605      	mov	r5, r0
 800ffa4:	b930      	cbnz	r0, 800ffb4 <_calloc_r+0x24>
 800ffa6:	4628      	mov	r0, r5
 800ffa8:	b003      	add	sp, #12
 800ffaa:	bd30      	pop	{r4, r5, pc}
 800ffac:	220c      	movs	r2, #12
 800ffae:	6002      	str	r2, [r0, #0]
 800ffb0:	2500      	movs	r5, #0
 800ffb2:	e7f8      	b.n	800ffa6 <_calloc_r+0x16>
 800ffb4:	4621      	mov	r1, r4
 800ffb6:	f7fe f9c3 	bl	800e340 <memset>
 800ffba:	e7f4      	b.n	800ffa6 <_calloc_r+0x16>

0800ffbc <__ascii_mbtowc>:
 800ffbc:	b082      	sub	sp, #8
 800ffbe:	b901      	cbnz	r1, 800ffc2 <__ascii_mbtowc+0x6>
 800ffc0:	a901      	add	r1, sp, #4
 800ffc2:	b142      	cbz	r2, 800ffd6 <__ascii_mbtowc+0x1a>
 800ffc4:	b14b      	cbz	r3, 800ffda <__ascii_mbtowc+0x1e>
 800ffc6:	7813      	ldrb	r3, [r2, #0]
 800ffc8:	600b      	str	r3, [r1, #0]
 800ffca:	7812      	ldrb	r2, [r2, #0]
 800ffcc:	1e10      	subs	r0, r2, #0
 800ffce:	bf18      	it	ne
 800ffd0:	2001      	movne	r0, #1
 800ffd2:	b002      	add	sp, #8
 800ffd4:	4770      	bx	lr
 800ffd6:	4610      	mov	r0, r2
 800ffd8:	e7fb      	b.n	800ffd2 <__ascii_mbtowc+0x16>
 800ffda:	f06f 0001 	mvn.w	r0, #1
 800ffde:	e7f8      	b.n	800ffd2 <__ascii_mbtowc+0x16>

0800ffe0 <_realloc_r>:
 800ffe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffe4:	4680      	mov	r8, r0
 800ffe6:	4614      	mov	r4, r2
 800ffe8:	460e      	mov	r6, r1
 800ffea:	b921      	cbnz	r1, 800fff6 <_realloc_r+0x16>
 800ffec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fff0:	4611      	mov	r1, r2
 800fff2:	f7ff b977 	b.w	800f2e4 <_malloc_r>
 800fff6:	b92a      	cbnz	r2, 8010004 <_realloc_r+0x24>
 800fff8:	f7ff f900 	bl	800f1fc <_free_r>
 800fffc:	4625      	mov	r5, r4
 800fffe:	4628      	mov	r0, r5
 8010000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010004:	f000 f841 	bl	801008a <_malloc_usable_size_r>
 8010008:	4284      	cmp	r4, r0
 801000a:	4607      	mov	r7, r0
 801000c:	d802      	bhi.n	8010014 <_realloc_r+0x34>
 801000e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010012:	d812      	bhi.n	801003a <_realloc_r+0x5a>
 8010014:	4621      	mov	r1, r4
 8010016:	4640      	mov	r0, r8
 8010018:	f7ff f964 	bl	800f2e4 <_malloc_r>
 801001c:	4605      	mov	r5, r0
 801001e:	2800      	cmp	r0, #0
 8010020:	d0ed      	beq.n	800fffe <_realloc_r+0x1e>
 8010022:	42bc      	cmp	r4, r7
 8010024:	4622      	mov	r2, r4
 8010026:	4631      	mov	r1, r6
 8010028:	bf28      	it	cs
 801002a:	463a      	movcs	r2, r7
 801002c:	f7fe fa5c 	bl	800e4e8 <memcpy>
 8010030:	4631      	mov	r1, r6
 8010032:	4640      	mov	r0, r8
 8010034:	f7ff f8e2 	bl	800f1fc <_free_r>
 8010038:	e7e1      	b.n	800fffe <_realloc_r+0x1e>
 801003a:	4635      	mov	r5, r6
 801003c:	e7df      	b.n	800fffe <_realloc_r+0x1e>

0801003e <__ascii_wctomb>:
 801003e:	b149      	cbz	r1, 8010054 <__ascii_wctomb+0x16>
 8010040:	2aff      	cmp	r2, #255	; 0xff
 8010042:	bf85      	ittet	hi
 8010044:	238a      	movhi	r3, #138	; 0x8a
 8010046:	6003      	strhi	r3, [r0, #0]
 8010048:	700a      	strbls	r2, [r1, #0]
 801004a:	f04f 30ff 	movhi.w	r0, #4294967295
 801004e:	bf98      	it	ls
 8010050:	2001      	movls	r0, #1
 8010052:	4770      	bx	lr
 8010054:	4608      	mov	r0, r1
 8010056:	4770      	bx	lr

08010058 <fiprintf>:
 8010058:	b40e      	push	{r1, r2, r3}
 801005a:	b503      	push	{r0, r1, lr}
 801005c:	4601      	mov	r1, r0
 801005e:	ab03      	add	r3, sp, #12
 8010060:	4805      	ldr	r0, [pc, #20]	; (8010078 <fiprintf+0x20>)
 8010062:	f853 2b04 	ldr.w	r2, [r3], #4
 8010066:	6800      	ldr	r0, [r0, #0]
 8010068:	9301      	str	r3, [sp, #4]
 801006a:	f000 f83f 	bl	80100ec <_vfiprintf_r>
 801006e:	b002      	add	sp, #8
 8010070:	f85d eb04 	ldr.w	lr, [sp], #4
 8010074:	b003      	add	sp, #12
 8010076:	4770      	bx	lr
 8010078:	200000e0 	.word	0x200000e0

0801007c <abort>:
 801007c:	b508      	push	{r3, lr}
 801007e:	2006      	movs	r0, #6
 8010080:	f000 fa0c 	bl	801049c <raise>
 8010084:	2001      	movs	r0, #1
 8010086:	f7f4 fc9f 	bl	80049c8 <_exit>

0801008a <_malloc_usable_size_r>:
 801008a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801008e:	1f18      	subs	r0, r3, #4
 8010090:	2b00      	cmp	r3, #0
 8010092:	bfbc      	itt	lt
 8010094:	580b      	ldrlt	r3, [r1, r0]
 8010096:	18c0      	addlt	r0, r0, r3
 8010098:	4770      	bx	lr

0801009a <__sfputc_r>:
 801009a:	6893      	ldr	r3, [r2, #8]
 801009c:	3b01      	subs	r3, #1
 801009e:	2b00      	cmp	r3, #0
 80100a0:	b410      	push	{r4}
 80100a2:	6093      	str	r3, [r2, #8]
 80100a4:	da08      	bge.n	80100b8 <__sfputc_r+0x1e>
 80100a6:	6994      	ldr	r4, [r2, #24]
 80100a8:	42a3      	cmp	r3, r4
 80100aa:	db01      	blt.n	80100b0 <__sfputc_r+0x16>
 80100ac:	290a      	cmp	r1, #10
 80100ae:	d103      	bne.n	80100b8 <__sfputc_r+0x1e>
 80100b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100b4:	f000 b934 	b.w	8010320 <__swbuf_r>
 80100b8:	6813      	ldr	r3, [r2, #0]
 80100ba:	1c58      	adds	r0, r3, #1
 80100bc:	6010      	str	r0, [r2, #0]
 80100be:	7019      	strb	r1, [r3, #0]
 80100c0:	4608      	mov	r0, r1
 80100c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100c6:	4770      	bx	lr

080100c8 <__sfputs_r>:
 80100c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ca:	4606      	mov	r6, r0
 80100cc:	460f      	mov	r7, r1
 80100ce:	4614      	mov	r4, r2
 80100d0:	18d5      	adds	r5, r2, r3
 80100d2:	42ac      	cmp	r4, r5
 80100d4:	d101      	bne.n	80100da <__sfputs_r+0x12>
 80100d6:	2000      	movs	r0, #0
 80100d8:	e007      	b.n	80100ea <__sfputs_r+0x22>
 80100da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100de:	463a      	mov	r2, r7
 80100e0:	4630      	mov	r0, r6
 80100e2:	f7ff ffda 	bl	801009a <__sfputc_r>
 80100e6:	1c43      	adds	r3, r0, #1
 80100e8:	d1f3      	bne.n	80100d2 <__sfputs_r+0xa>
 80100ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080100ec <_vfiprintf_r>:
 80100ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f0:	460d      	mov	r5, r1
 80100f2:	b09d      	sub	sp, #116	; 0x74
 80100f4:	4614      	mov	r4, r2
 80100f6:	4698      	mov	r8, r3
 80100f8:	4606      	mov	r6, r0
 80100fa:	b118      	cbz	r0, 8010104 <_vfiprintf_r+0x18>
 80100fc:	6a03      	ldr	r3, [r0, #32]
 80100fe:	b90b      	cbnz	r3, 8010104 <_vfiprintf_r+0x18>
 8010100:	f7fe f884 	bl	800e20c <__sinit>
 8010104:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010106:	07d9      	lsls	r1, r3, #31
 8010108:	d405      	bmi.n	8010116 <_vfiprintf_r+0x2a>
 801010a:	89ab      	ldrh	r3, [r5, #12]
 801010c:	059a      	lsls	r2, r3, #22
 801010e:	d402      	bmi.n	8010116 <_vfiprintf_r+0x2a>
 8010110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010112:	f7fe f9e7 	bl	800e4e4 <__retarget_lock_acquire_recursive>
 8010116:	89ab      	ldrh	r3, [r5, #12]
 8010118:	071b      	lsls	r3, r3, #28
 801011a:	d501      	bpl.n	8010120 <_vfiprintf_r+0x34>
 801011c:	692b      	ldr	r3, [r5, #16]
 801011e:	b99b      	cbnz	r3, 8010148 <_vfiprintf_r+0x5c>
 8010120:	4629      	mov	r1, r5
 8010122:	4630      	mov	r0, r6
 8010124:	f000 f93a 	bl	801039c <__swsetup_r>
 8010128:	b170      	cbz	r0, 8010148 <_vfiprintf_r+0x5c>
 801012a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801012c:	07dc      	lsls	r4, r3, #31
 801012e:	d504      	bpl.n	801013a <_vfiprintf_r+0x4e>
 8010130:	f04f 30ff 	mov.w	r0, #4294967295
 8010134:	b01d      	add	sp, #116	; 0x74
 8010136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801013a:	89ab      	ldrh	r3, [r5, #12]
 801013c:	0598      	lsls	r0, r3, #22
 801013e:	d4f7      	bmi.n	8010130 <_vfiprintf_r+0x44>
 8010140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010142:	f7fe f9d0 	bl	800e4e6 <__retarget_lock_release_recursive>
 8010146:	e7f3      	b.n	8010130 <_vfiprintf_r+0x44>
 8010148:	2300      	movs	r3, #0
 801014a:	9309      	str	r3, [sp, #36]	; 0x24
 801014c:	2320      	movs	r3, #32
 801014e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010152:	f8cd 800c 	str.w	r8, [sp, #12]
 8010156:	2330      	movs	r3, #48	; 0x30
 8010158:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801030c <_vfiprintf_r+0x220>
 801015c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010160:	f04f 0901 	mov.w	r9, #1
 8010164:	4623      	mov	r3, r4
 8010166:	469a      	mov	sl, r3
 8010168:	f813 2b01 	ldrb.w	r2, [r3], #1
 801016c:	b10a      	cbz	r2, 8010172 <_vfiprintf_r+0x86>
 801016e:	2a25      	cmp	r2, #37	; 0x25
 8010170:	d1f9      	bne.n	8010166 <_vfiprintf_r+0x7a>
 8010172:	ebba 0b04 	subs.w	fp, sl, r4
 8010176:	d00b      	beq.n	8010190 <_vfiprintf_r+0xa4>
 8010178:	465b      	mov	r3, fp
 801017a:	4622      	mov	r2, r4
 801017c:	4629      	mov	r1, r5
 801017e:	4630      	mov	r0, r6
 8010180:	f7ff ffa2 	bl	80100c8 <__sfputs_r>
 8010184:	3001      	adds	r0, #1
 8010186:	f000 80a9 	beq.w	80102dc <_vfiprintf_r+0x1f0>
 801018a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801018c:	445a      	add	r2, fp
 801018e:	9209      	str	r2, [sp, #36]	; 0x24
 8010190:	f89a 3000 	ldrb.w	r3, [sl]
 8010194:	2b00      	cmp	r3, #0
 8010196:	f000 80a1 	beq.w	80102dc <_vfiprintf_r+0x1f0>
 801019a:	2300      	movs	r3, #0
 801019c:	f04f 32ff 	mov.w	r2, #4294967295
 80101a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101a4:	f10a 0a01 	add.w	sl, sl, #1
 80101a8:	9304      	str	r3, [sp, #16]
 80101aa:	9307      	str	r3, [sp, #28]
 80101ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101b0:	931a      	str	r3, [sp, #104]	; 0x68
 80101b2:	4654      	mov	r4, sl
 80101b4:	2205      	movs	r2, #5
 80101b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101ba:	4854      	ldr	r0, [pc, #336]	; (801030c <_vfiprintf_r+0x220>)
 80101bc:	f7f0 f808 	bl	80001d0 <memchr>
 80101c0:	9a04      	ldr	r2, [sp, #16]
 80101c2:	b9d8      	cbnz	r0, 80101fc <_vfiprintf_r+0x110>
 80101c4:	06d1      	lsls	r1, r2, #27
 80101c6:	bf44      	itt	mi
 80101c8:	2320      	movmi	r3, #32
 80101ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101ce:	0713      	lsls	r3, r2, #28
 80101d0:	bf44      	itt	mi
 80101d2:	232b      	movmi	r3, #43	; 0x2b
 80101d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101d8:	f89a 3000 	ldrb.w	r3, [sl]
 80101dc:	2b2a      	cmp	r3, #42	; 0x2a
 80101de:	d015      	beq.n	801020c <_vfiprintf_r+0x120>
 80101e0:	9a07      	ldr	r2, [sp, #28]
 80101e2:	4654      	mov	r4, sl
 80101e4:	2000      	movs	r0, #0
 80101e6:	f04f 0c0a 	mov.w	ip, #10
 80101ea:	4621      	mov	r1, r4
 80101ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101f0:	3b30      	subs	r3, #48	; 0x30
 80101f2:	2b09      	cmp	r3, #9
 80101f4:	d94d      	bls.n	8010292 <_vfiprintf_r+0x1a6>
 80101f6:	b1b0      	cbz	r0, 8010226 <_vfiprintf_r+0x13a>
 80101f8:	9207      	str	r2, [sp, #28]
 80101fa:	e014      	b.n	8010226 <_vfiprintf_r+0x13a>
 80101fc:	eba0 0308 	sub.w	r3, r0, r8
 8010200:	fa09 f303 	lsl.w	r3, r9, r3
 8010204:	4313      	orrs	r3, r2
 8010206:	9304      	str	r3, [sp, #16]
 8010208:	46a2      	mov	sl, r4
 801020a:	e7d2      	b.n	80101b2 <_vfiprintf_r+0xc6>
 801020c:	9b03      	ldr	r3, [sp, #12]
 801020e:	1d19      	adds	r1, r3, #4
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	9103      	str	r1, [sp, #12]
 8010214:	2b00      	cmp	r3, #0
 8010216:	bfbb      	ittet	lt
 8010218:	425b      	neglt	r3, r3
 801021a:	f042 0202 	orrlt.w	r2, r2, #2
 801021e:	9307      	strge	r3, [sp, #28]
 8010220:	9307      	strlt	r3, [sp, #28]
 8010222:	bfb8      	it	lt
 8010224:	9204      	strlt	r2, [sp, #16]
 8010226:	7823      	ldrb	r3, [r4, #0]
 8010228:	2b2e      	cmp	r3, #46	; 0x2e
 801022a:	d10c      	bne.n	8010246 <_vfiprintf_r+0x15a>
 801022c:	7863      	ldrb	r3, [r4, #1]
 801022e:	2b2a      	cmp	r3, #42	; 0x2a
 8010230:	d134      	bne.n	801029c <_vfiprintf_r+0x1b0>
 8010232:	9b03      	ldr	r3, [sp, #12]
 8010234:	1d1a      	adds	r2, r3, #4
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	9203      	str	r2, [sp, #12]
 801023a:	2b00      	cmp	r3, #0
 801023c:	bfb8      	it	lt
 801023e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010242:	3402      	adds	r4, #2
 8010244:	9305      	str	r3, [sp, #20]
 8010246:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801031c <_vfiprintf_r+0x230>
 801024a:	7821      	ldrb	r1, [r4, #0]
 801024c:	2203      	movs	r2, #3
 801024e:	4650      	mov	r0, sl
 8010250:	f7ef ffbe 	bl	80001d0 <memchr>
 8010254:	b138      	cbz	r0, 8010266 <_vfiprintf_r+0x17a>
 8010256:	9b04      	ldr	r3, [sp, #16]
 8010258:	eba0 000a 	sub.w	r0, r0, sl
 801025c:	2240      	movs	r2, #64	; 0x40
 801025e:	4082      	lsls	r2, r0
 8010260:	4313      	orrs	r3, r2
 8010262:	3401      	adds	r4, #1
 8010264:	9304      	str	r3, [sp, #16]
 8010266:	f814 1b01 	ldrb.w	r1, [r4], #1
 801026a:	4829      	ldr	r0, [pc, #164]	; (8010310 <_vfiprintf_r+0x224>)
 801026c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010270:	2206      	movs	r2, #6
 8010272:	f7ef ffad 	bl	80001d0 <memchr>
 8010276:	2800      	cmp	r0, #0
 8010278:	d03f      	beq.n	80102fa <_vfiprintf_r+0x20e>
 801027a:	4b26      	ldr	r3, [pc, #152]	; (8010314 <_vfiprintf_r+0x228>)
 801027c:	bb1b      	cbnz	r3, 80102c6 <_vfiprintf_r+0x1da>
 801027e:	9b03      	ldr	r3, [sp, #12]
 8010280:	3307      	adds	r3, #7
 8010282:	f023 0307 	bic.w	r3, r3, #7
 8010286:	3308      	adds	r3, #8
 8010288:	9303      	str	r3, [sp, #12]
 801028a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801028c:	443b      	add	r3, r7
 801028e:	9309      	str	r3, [sp, #36]	; 0x24
 8010290:	e768      	b.n	8010164 <_vfiprintf_r+0x78>
 8010292:	fb0c 3202 	mla	r2, ip, r2, r3
 8010296:	460c      	mov	r4, r1
 8010298:	2001      	movs	r0, #1
 801029a:	e7a6      	b.n	80101ea <_vfiprintf_r+0xfe>
 801029c:	2300      	movs	r3, #0
 801029e:	3401      	adds	r4, #1
 80102a0:	9305      	str	r3, [sp, #20]
 80102a2:	4619      	mov	r1, r3
 80102a4:	f04f 0c0a 	mov.w	ip, #10
 80102a8:	4620      	mov	r0, r4
 80102aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102ae:	3a30      	subs	r2, #48	; 0x30
 80102b0:	2a09      	cmp	r2, #9
 80102b2:	d903      	bls.n	80102bc <_vfiprintf_r+0x1d0>
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d0c6      	beq.n	8010246 <_vfiprintf_r+0x15a>
 80102b8:	9105      	str	r1, [sp, #20]
 80102ba:	e7c4      	b.n	8010246 <_vfiprintf_r+0x15a>
 80102bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80102c0:	4604      	mov	r4, r0
 80102c2:	2301      	movs	r3, #1
 80102c4:	e7f0      	b.n	80102a8 <_vfiprintf_r+0x1bc>
 80102c6:	ab03      	add	r3, sp, #12
 80102c8:	9300      	str	r3, [sp, #0]
 80102ca:	462a      	mov	r2, r5
 80102cc:	4b12      	ldr	r3, [pc, #72]	; (8010318 <_vfiprintf_r+0x22c>)
 80102ce:	a904      	add	r1, sp, #16
 80102d0:	4630      	mov	r0, r6
 80102d2:	f7fd fb5b 	bl	800d98c <_printf_float>
 80102d6:	4607      	mov	r7, r0
 80102d8:	1c78      	adds	r0, r7, #1
 80102da:	d1d6      	bne.n	801028a <_vfiprintf_r+0x19e>
 80102dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80102de:	07d9      	lsls	r1, r3, #31
 80102e0:	d405      	bmi.n	80102ee <_vfiprintf_r+0x202>
 80102e2:	89ab      	ldrh	r3, [r5, #12]
 80102e4:	059a      	lsls	r2, r3, #22
 80102e6:	d402      	bmi.n	80102ee <_vfiprintf_r+0x202>
 80102e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80102ea:	f7fe f8fc 	bl	800e4e6 <__retarget_lock_release_recursive>
 80102ee:	89ab      	ldrh	r3, [r5, #12]
 80102f0:	065b      	lsls	r3, r3, #25
 80102f2:	f53f af1d 	bmi.w	8010130 <_vfiprintf_r+0x44>
 80102f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102f8:	e71c      	b.n	8010134 <_vfiprintf_r+0x48>
 80102fa:	ab03      	add	r3, sp, #12
 80102fc:	9300      	str	r3, [sp, #0]
 80102fe:	462a      	mov	r2, r5
 8010300:	4b05      	ldr	r3, [pc, #20]	; (8010318 <_vfiprintf_r+0x22c>)
 8010302:	a904      	add	r1, sp, #16
 8010304:	4630      	mov	r0, r6
 8010306:	f7fd fde5 	bl	800ded4 <_printf_i>
 801030a:	e7e4      	b.n	80102d6 <_vfiprintf_r+0x1ea>
 801030c:	080109c4 	.word	0x080109c4
 8010310:	080109ce 	.word	0x080109ce
 8010314:	0800d98d 	.word	0x0800d98d
 8010318:	080100c9 	.word	0x080100c9
 801031c:	080109ca 	.word	0x080109ca

08010320 <__swbuf_r>:
 8010320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010322:	460e      	mov	r6, r1
 8010324:	4614      	mov	r4, r2
 8010326:	4605      	mov	r5, r0
 8010328:	b118      	cbz	r0, 8010332 <__swbuf_r+0x12>
 801032a:	6a03      	ldr	r3, [r0, #32]
 801032c:	b90b      	cbnz	r3, 8010332 <__swbuf_r+0x12>
 801032e:	f7fd ff6d 	bl	800e20c <__sinit>
 8010332:	69a3      	ldr	r3, [r4, #24]
 8010334:	60a3      	str	r3, [r4, #8]
 8010336:	89a3      	ldrh	r3, [r4, #12]
 8010338:	071a      	lsls	r2, r3, #28
 801033a:	d525      	bpl.n	8010388 <__swbuf_r+0x68>
 801033c:	6923      	ldr	r3, [r4, #16]
 801033e:	b31b      	cbz	r3, 8010388 <__swbuf_r+0x68>
 8010340:	6823      	ldr	r3, [r4, #0]
 8010342:	6922      	ldr	r2, [r4, #16]
 8010344:	1a98      	subs	r0, r3, r2
 8010346:	6963      	ldr	r3, [r4, #20]
 8010348:	b2f6      	uxtb	r6, r6
 801034a:	4283      	cmp	r3, r0
 801034c:	4637      	mov	r7, r6
 801034e:	dc04      	bgt.n	801035a <__swbuf_r+0x3a>
 8010350:	4621      	mov	r1, r4
 8010352:	4628      	mov	r0, r5
 8010354:	f7ff fdac 	bl	800feb0 <_fflush_r>
 8010358:	b9e0      	cbnz	r0, 8010394 <__swbuf_r+0x74>
 801035a:	68a3      	ldr	r3, [r4, #8]
 801035c:	3b01      	subs	r3, #1
 801035e:	60a3      	str	r3, [r4, #8]
 8010360:	6823      	ldr	r3, [r4, #0]
 8010362:	1c5a      	adds	r2, r3, #1
 8010364:	6022      	str	r2, [r4, #0]
 8010366:	701e      	strb	r6, [r3, #0]
 8010368:	6962      	ldr	r2, [r4, #20]
 801036a:	1c43      	adds	r3, r0, #1
 801036c:	429a      	cmp	r2, r3
 801036e:	d004      	beq.n	801037a <__swbuf_r+0x5a>
 8010370:	89a3      	ldrh	r3, [r4, #12]
 8010372:	07db      	lsls	r3, r3, #31
 8010374:	d506      	bpl.n	8010384 <__swbuf_r+0x64>
 8010376:	2e0a      	cmp	r6, #10
 8010378:	d104      	bne.n	8010384 <__swbuf_r+0x64>
 801037a:	4621      	mov	r1, r4
 801037c:	4628      	mov	r0, r5
 801037e:	f7ff fd97 	bl	800feb0 <_fflush_r>
 8010382:	b938      	cbnz	r0, 8010394 <__swbuf_r+0x74>
 8010384:	4638      	mov	r0, r7
 8010386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010388:	4621      	mov	r1, r4
 801038a:	4628      	mov	r0, r5
 801038c:	f000 f806 	bl	801039c <__swsetup_r>
 8010390:	2800      	cmp	r0, #0
 8010392:	d0d5      	beq.n	8010340 <__swbuf_r+0x20>
 8010394:	f04f 37ff 	mov.w	r7, #4294967295
 8010398:	e7f4      	b.n	8010384 <__swbuf_r+0x64>
	...

0801039c <__swsetup_r>:
 801039c:	b538      	push	{r3, r4, r5, lr}
 801039e:	4b2a      	ldr	r3, [pc, #168]	; (8010448 <__swsetup_r+0xac>)
 80103a0:	4605      	mov	r5, r0
 80103a2:	6818      	ldr	r0, [r3, #0]
 80103a4:	460c      	mov	r4, r1
 80103a6:	b118      	cbz	r0, 80103b0 <__swsetup_r+0x14>
 80103a8:	6a03      	ldr	r3, [r0, #32]
 80103aa:	b90b      	cbnz	r3, 80103b0 <__swsetup_r+0x14>
 80103ac:	f7fd ff2e 	bl	800e20c <__sinit>
 80103b0:	89a3      	ldrh	r3, [r4, #12]
 80103b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80103b6:	0718      	lsls	r0, r3, #28
 80103b8:	d422      	bmi.n	8010400 <__swsetup_r+0x64>
 80103ba:	06d9      	lsls	r1, r3, #27
 80103bc:	d407      	bmi.n	80103ce <__swsetup_r+0x32>
 80103be:	2309      	movs	r3, #9
 80103c0:	602b      	str	r3, [r5, #0]
 80103c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80103c6:	81a3      	strh	r3, [r4, #12]
 80103c8:	f04f 30ff 	mov.w	r0, #4294967295
 80103cc:	e034      	b.n	8010438 <__swsetup_r+0x9c>
 80103ce:	0758      	lsls	r0, r3, #29
 80103d0:	d512      	bpl.n	80103f8 <__swsetup_r+0x5c>
 80103d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103d4:	b141      	cbz	r1, 80103e8 <__swsetup_r+0x4c>
 80103d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80103da:	4299      	cmp	r1, r3
 80103dc:	d002      	beq.n	80103e4 <__swsetup_r+0x48>
 80103de:	4628      	mov	r0, r5
 80103e0:	f7fe ff0c 	bl	800f1fc <_free_r>
 80103e4:	2300      	movs	r3, #0
 80103e6:	6363      	str	r3, [r4, #52]	; 0x34
 80103e8:	89a3      	ldrh	r3, [r4, #12]
 80103ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80103ee:	81a3      	strh	r3, [r4, #12]
 80103f0:	2300      	movs	r3, #0
 80103f2:	6063      	str	r3, [r4, #4]
 80103f4:	6923      	ldr	r3, [r4, #16]
 80103f6:	6023      	str	r3, [r4, #0]
 80103f8:	89a3      	ldrh	r3, [r4, #12]
 80103fa:	f043 0308 	orr.w	r3, r3, #8
 80103fe:	81a3      	strh	r3, [r4, #12]
 8010400:	6923      	ldr	r3, [r4, #16]
 8010402:	b94b      	cbnz	r3, 8010418 <__swsetup_r+0x7c>
 8010404:	89a3      	ldrh	r3, [r4, #12]
 8010406:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801040a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801040e:	d003      	beq.n	8010418 <__swsetup_r+0x7c>
 8010410:	4621      	mov	r1, r4
 8010412:	4628      	mov	r0, r5
 8010414:	f000 f884 	bl	8010520 <__smakebuf_r>
 8010418:	89a0      	ldrh	r0, [r4, #12]
 801041a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801041e:	f010 0301 	ands.w	r3, r0, #1
 8010422:	d00a      	beq.n	801043a <__swsetup_r+0x9e>
 8010424:	2300      	movs	r3, #0
 8010426:	60a3      	str	r3, [r4, #8]
 8010428:	6963      	ldr	r3, [r4, #20]
 801042a:	425b      	negs	r3, r3
 801042c:	61a3      	str	r3, [r4, #24]
 801042e:	6923      	ldr	r3, [r4, #16]
 8010430:	b943      	cbnz	r3, 8010444 <__swsetup_r+0xa8>
 8010432:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010436:	d1c4      	bne.n	80103c2 <__swsetup_r+0x26>
 8010438:	bd38      	pop	{r3, r4, r5, pc}
 801043a:	0781      	lsls	r1, r0, #30
 801043c:	bf58      	it	pl
 801043e:	6963      	ldrpl	r3, [r4, #20]
 8010440:	60a3      	str	r3, [r4, #8]
 8010442:	e7f4      	b.n	801042e <__swsetup_r+0x92>
 8010444:	2000      	movs	r0, #0
 8010446:	e7f7      	b.n	8010438 <__swsetup_r+0x9c>
 8010448:	200000e0 	.word	0x200000e0

0801044c <_raise_r>:
 801044c:	291f      	cmp	r1, #31
 801044e:	b538      	push	{r3, r4, r5, lr}
 8010450:	4604      	mov	r4, r0
 8010452:	460d      	mov	r5, r1
 8010454:	d904      	bls.n	8010460 <_raise_r+0x14>
 8010456:	2316      	movs	r3, #22
 8010458:	6003      	str	r3, [r0, #0]
 801045a:	f04f 30ff 	mov.w	r0, #4294967295
 801045e:	bd38      	pop	{r3, r4, r5, pc}
 8010460:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010462:	b112      	cbz	r2, 801046a <_raise_r+0x1e>
 8010464:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010468:	b94b      	cbnz	r3, 801047e <_raise_r+0x32>
 801046a:	4620      	mov	r0, r4
 801046c:	f000 f830 	bl	80104d0 <_getpid_r>
 8010470:	462a      	mov	r2, r5
 8010472:	4601      	mov	r1, r0
 8010474:	4620      	mov	r0, r4
 8010476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801047a:	f000 b817 	b.w	80104ac <_kill_r>
 801047e:	2b01      	cmp	r3, #1
 8010480:	d00a      	beq.n	8010498 <_raise_r+0x4c>
 8010482:	1c59      	adds	r1, r3, #1
 8010484:	d103      	bne.n	801048e <_raise_r+0x42>
 8010486:	2316      	movs	r3, #22
 8010488:	6003      	str	r3, [r0, #0]
 801048a:	2001      	movs	r0, #1
 801048c:	e7e7      	b.n	801045e <_raise_r+0x12>
 801048e:	2400      	movs	r4, #0
 8010490:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010494:	4628      	mov	r0, r5
 8010496:	4798      	blx	r3
 8010498:	2000      	movs	r0, #0
 801049a:	e7e0      	b.n	801045e <_raise_r+0x12>

0801049c <raise>:
 801049c:	4b02      	ldr	r3, [pc, #8]	; (80104a8 <raise+0xc>)
 801049e:	4601      	mov	r1, r0
 80104a0:	6818      	ldr	r0, [r3, #0]
 80104a2:	f7ff bfd3 	b.w	801044c <_raise_r>
 80104a6:	bf00      	nop
 80104a8:	200000e0 	.word	0x200000e0

080104ac <_kill_r>:
 80104ac:	b538      	push	{r3, r4, r5, lr}
 80104ae:	4d07      	ldr	r5, [pc, #28]	; (80104cc <_kill_r+0x20>)
 80104b0:	2300      	movs	r3, #0
 80104b2:	4604      	mov	r4, r0
 80104b4:	4608      	mov	r0, r1
 80104b6:	4611      	mov	r1, r2
 80104b8:	602b      	str	r3, [r5, #0]
 80104ba:	f7f4 fa75 	bl	80049a8 <_kill>
 80104be:	1c43      	adds	r3, r0, #1
 80104c0:	d102      	bne.n	80104c8 <_kill_r+0x1c>
 80104c2:	682b      	ldr	r3, [r5, #0]
 80104c4:	b103      	cbz	r3, 80104c8 <_kill_r+0x1c>
 80104c6:	6023      	str	r3, [r4, #0]
 80104c8:	bd38      	pop	{r3, r4, r5, pc}
 80104ca:	bf00      	nop
 80104cc:	200058e4 	.word	0x200058e4

080104d0 <_getpid_r>:
 80104d0:	f7f4 ba62 	b.w	8004998 <_getpid>

080104d4 <__swhatbuf_r>:
 80104d4:	b570      	push	{r4, r5, r6, lr}
 80104d6:	460c      	mov	r4, r1
 80104d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104dc:	2900      	cmp	r1, #0
 80104de:	b096      	sub	sp, #88	; 0x58
 80104e0:	4615      	mov	r5, r2
 80104e2:	461e      	mov	r6, r3
 80104e4:	da0d      	bge.n	8010502 <__swhatbuf_r+0x2e>
 80104e6:	89a3      	ldrh	r3, [r4, #12]
 80104e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80104ec:	f04f 0100 	mov.w	r1, #0
 80104f0:	bf0c      	ite	eq
 80104f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80104f6:	2340      	movne	r3, #64	; 0x40
 80104f8:	2000      	movs	r0, #0
 80104fa:	6031      	str	r1, [r6, #0]
 80104fc:	602b      	str	r3, [r5, #0]
 80104fe:	b016      	add	sp, #88	; 0x58
 8010500:	bd70      	pop	{r4, r5, r6, pc}
 8010502:	466a      	mov	r2, sp
 8010504:	f000 f848 	bl	8010598 <_fstat_r>
 8010508:	2800      	cmp	r0, #0
 801050a:	dbec      	blt.n	80104e6 <__swhatbuf_r+0x12>
 801050c:	9901      	ldr	r1, [sp, #4]
 801050e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010512:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010516:	4259      	negs	r1, r3
 8010518:	4159      	adcs	r1, r3
 801051a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801051e:	e7eb      	b.n	80104f8 <__swhatbuf_r+0x24>

08010520 <__smakebuf_r>:
 8010520:	898b      	ldrh	r3, [r1, #12]
 8010522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010524:	079d      	lsls	r5, r3, #30
 8010526:	4606      	mov	r6, r0
 8010528:	460c      	mov	r4, r1
 801052a:	d507      	bpl.n	801053c <__smakebuf_r+0x1c>
 801052c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010530:	6023      	str	r3, [r4, #0]
 8010532:	6123      	str	r3, [r4, #16]
 8010534:	2301      	movs	r3, #1
 8010536:	6163      	str	r3, [r4, #20]
 8010538:	b002      	add	sp, #8
 801053a:	bd70      	pop	{r4, r5, r6, pc}
 801053c:	ab01      	add	r3, sp, #4
 801053e:	466a      	mov	r2, sp
 8010540:	f7ff ffc8 	bl	80104d4 <__swhatbuf_r>
 8010544:	9900      	ldr	r1, [sp, #0]
 8010546:	4605      	mov	r5, r0
 8010548:	4630      	mov	r0, r6
 801054a:	f7fe fecb 	bl	800f2e4 <_malloc_r>
 801054e:	b948      	cbnz	r0, 8010564 <__smakebuf_r+0x44>
 8010550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010554:	059a      	lsls	r2, r3, #22
 8010556:	d4ef      	bmi.n	8010538 <__smakebuf_r+0x18>
 8010558:	f023 0303 	bic.w	r3, r3, #3
 801055c:	f043 0302 	orr.w	r3, r3, #2
 8010560:	81a3      	strh	r3, [r4, #12]
 8010562:	e7e3      	b.n	801052c <__smakebuf_r+0xc>
 8010564:	89a3      	ldrh	r3, [r4, #12]
 8010566:	6020      	str	r0, [r4, #0]
 8010568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801056c:	81a3      	strh	r3, [r4, #12]
 801056e:	9b00      	ldr	r3, [sp, #0]
 8010570:	6163      	str	r3, [r4, #20]
 8010572:	9b01      	ldr	r3, [sp, #4]
 8010574:	6120      	str	r0, [r4, #16]
 8010576:	b15b      	cbz	r3, 8010590 <__smakebuf_r+0x70>
 8010578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801057c:	4630      	mov	r0, r6
 801057e:	f000 f81d 	bl	80105bc <_isatty_r>
 8010582:	b128      	cbz	r0, 8010590 <__smakebuf_r+0x70>
 8010584:	89a3      	ldrh	r3, [r4, #12]
 8010586:	f023 0303 	bic.w	r3, r3, #3
 801058a:	f043 0301 	orr.w	r3, r3, #1
 801058e:	81a3      	strh	r3, [r4, #12]
 8010590:	89a3      	ldrh	r3, [r4, #12]
 8010592:	431d      	orrs	r5, r3
 8010594:	81a5      	strh	r5, [r4, #12]
 8010596:	e7cf      	b.n	8010538 <__smakebuf_r+0x18>

08010598 <_fstat_r>:
 8010598:	b538      	push	{r3, r4, r5, lr}
 801059a:	4d07      	ldr	r5, [pc, #28]	; (80105b8 <_fstat_r+0x20>)
 801059c:	2300      	movs	r3, #0
 801059e:	4604      	mov	r4, r0
 80105a0:	4608      	mov	r0, r1
 80105a2:	4611      	mov	r1, r2
 80105a4:	602b      	str	r3, [r5, #0]
 80105a6:	f7f4 fa5e 	bl	8004a66 <_fstat>
 80105aa:	1c43      	adds	r3, r0, #1
 80105ac:	d102      	bne.n	80105b4 <_fstat_r+0x1c>
 80105ae:	682b      	ldr	r3, [r5, #0]
 80105b0:	b103      	cbz	r3, 80105b4 <_fstat_r+0x1c>
 80105b2:	6023      	str	r3, [r4, #0]
 80105b4:	bd38      	pop	{r3, r4, r5, pc}
 80105b6:	bf00      	nop
 80105b8:	200058e4 	.word	0x200058e4

080105bc <_isatty_r>:
 80105bc:	b538      	push	{r3, r4, r5, lr}
 80105be:	4d06      	ldr	r5, [pc, #24]	; (80105d8 <_isatty_r+0x1c>)
 80105c0:	2300      	movs	r3, #0
 80105c2:	4604      	mov	r4, r0
 80105c4:	4608      	mov	r0, r1
 80105c6:	602b      	str	r3, [r5, #0]
 80105c8:	f7f4 fa5d 	bl	8004a86 <_isatty>
 80105cc:	1c43      	adds	r3, r0, #1
 80105ce:	d102      	bne.n	80105d6 <_isatty_r+0x1a>
 80105d0:	682b      	ldr	r3, [r5, #0]
 80105d2:	b103      	cbz	r3, 80105d6 <_isatty_r+0x1a>
 80105d4:	6023      	str	r3, [r4, #0]
 80105d6:	bd38      	pop	{r3, r4, r5, pc}
 80105d8:	200058e4 	.word	0x200058e4

080105dc <_init>:
 80105dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105de:	bf00      	nop
 80105e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105e2:	bc08      	pop	{r3}
 80105e4:	469e      	mov	lr, r3
 80105e6:	4770      	bx	lr

080105e8 <_fini>:
 80105e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ea:	bf00      	nop
 80105ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105ee:	bc08      	pop	{r3}
 80105f0:	469e      	mov	lr, r3
 80105f2:	4770      	bx	lr
