
LibraryTestingProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a99c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  0800ab2c  0800ab2c  0000bb2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae08  0800ae08  0000c064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ae08  0800ae08  0000be08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae10  0800ae10  0000c064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae10  0800ae10  0000be10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae14  0800ae14  0000be14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800ae18  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c064  2**0
                  CONTENTS
 10 .bss          00005238  20000068  20000068  0000c068  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200052a0  200052a0  0000c068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c47e  00000000  00000000  0000c094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ab0  00000000  00000000  00028512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018c0  00000000  00000000  0002bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001363  00000000  00000000  0002d888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023230  00000000  00000000  0002ebeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b2ce  00000000  00000000  00051e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9c0b  00000000  00000000  0006d0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00146cf4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000702c  00000000  00000000  00146d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0014dd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab14 	.word	0x0800ab14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800ab14 	.word	0x0800ab14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800088c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000890:	f000 b988 	b.w	8000ba4 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	468e      	mov	lr, r1
 80008b4:	4604      	mov	r4, r0
 80008b6:	4688      	mov	r8, r1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d14a      	bne.n	8000952 <__udivmoddi4+0xa6>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4617      	mov	r7, r2
 80008c0:	d962      	bls.n	8000988 <__udivmoddi4+0xdc>
 80008c2:	fab2 f682 	clz	r6, r2
 80008c6:	b14e      	cbz	r6, 80008dc <__udivmoddi4+0x30>
 80008c8:	f1c6 0320 	rsb	r3, r6, #32
 80008cc:	fa01 f806 	lsl.w	r8, r1, r6
 80008d0:	fa20 f303 	lsr.w	r3, r0, r3
 80008d4:	40b7      	lsls	r7, r6
 80008d6:	ea43 0808 	orr.w	r8, r3, r8
 80008da:	40b4      	lsls	r4, r6
 80008dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008e0:	fa1f fc87 	uxth.w	ip, r7
 80008e4:	fbb8 f1fe 	udiv	r1, r8, lr
 80008e8:	0c23      	lsrs	r3, r4, #16
 80008ea:	fb0e 8811 	mls	r8, lr, r1, r8
 80008ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008f2:	fb01 f20c 	mul.w	r2, r1, ip
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d909      	bls.n	800090e <__udivmoddi4+0x62>
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000900:	f080 80ea 	bcs.w	8000ad8 <__udivmoddi4+0x22c>
 8000904:	429a      	cmp	r2, r3
 8000906:	f240 80e7 	bls.w	8000ad8 <__udivmoddi4+0x22c>
 800090a:	3902      	subs	r1, #2
 800090c:	443b      	add	r3, r7
 800090e:	1a9a      	subs	r2, r3, r2
 8000910:	b2a3      	uxth	r3, r4
 8000912:	fbb2 f0fe 	udiv	r0, r2, lr
 8000916:	fb0e 2210 	mls	r2, lr, r0, r2
 800091a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800091e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000922:	459c      	cmp	ip, r3
 8000924:	d909      	bls.n	800093a <__udivmoddi4+0x8e>
 8000926:	18fb      	adds	r3, r7, r3
 8000928:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800092c:	f080 80d6 	bcs.w	8000adc <__udivmoddi4+0x230>
 8000930:	459c      	cmp	ip, r3
 8000932:	f240 80d3 	bls.w	8000adc <__udivmoddi4+0x230>
 8000936:	443b      	add	r3, r7
 8000938:	3802      	subs	r0, #2
 800093a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800093e:	eba3 030c 	sub.w	r3, r3, ip
 8000942:	2100      	movs	r1, #0
 8000944:	b11d      	cbz	r5, 800094e <__udivmoddi4+0xa2>
 8000946:	40f3      	lsrs	r3, r6
 8000948:	2200      	movs	r2, #0
 800094a:	e9c5 3200 	strd	r3, r2, [r5]
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	428b      	cmp	r3, r1
 8000954:	d905      	bls.n	8000962 <__udivmoddi4+0xb6>
 8000956:	b10d      	cbz	r5, 800095c <__udivmoddi4+0xb0>
 8000958:	e9c5 0100 	strd	r0, r1, [r5]
 800095c:	2100      	movs	r1, #0
 800095e:	4608      	mov	r0, r1
 8000960:	e7f5      	b.n	800094e <__udivmoddi4+0xa2>
 8000962:	fab3 f183 	clz	r1, r3
 8000966:	2900      	cmp	r1, #0
 8000968:	d146      	bne.n	80009f8 <__udivmoddi4+0x14c>
 800096a:	4573      	cmp	r3, lr
 800096c:	d302      	bcc.n	8000974 <__udivmoddi4+0xc8>
 800096e:	4282      	cmp	r2, r0
 8000970:	f200 8105 	bhi.w	8000b7e <__udivmoddi4+0x2d2>
 8000974:	1a84      	subs	r4, r0, r2
 8000976:	eb6e 0203 	sbc.w	r2, lr, r3
 800097a:	2001      	movs	r0, #1
 800097c:	4690      	mov	r8, r2
 800097e:	2d00      	cmp	r5, #0
 8000980:	d0e5      	beq.n	800094e <__udivmoddi4+0xa2>
 8000982:	e9c5 4800 	strd	r4, r8, [r5]
 8000986:	e7e2      	b.n	800094e <__udivmoddi4+0xa2>
 8000988:	2a00      	cmp	r2, #0
 800098a:	f000 8090 	beq.w	8000aae <__udivmoddi4+0x202>
 800098e:	fab2 f682 	clz	r6, r2
 8000992:	2e00      	cmp	r6, #0
 8000994:	f040 80a4 	bne.w	8000ae0 <__udivmoddi4+0x234>
 8000998:	1a8a      	subs	r2, r1, r2
 800099a:	0c03      	lsrs	r3, r0, #16
 800099c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009a0:	b280      	uxth	r0, r0
 80009a2:	b2bc      	uxth	r4, r7
 80009a4:	2101      	movs	r1, #1
 80009a6:	fbb2 fcfe 	udiv	ip, r2, lr
 80009aa:	fb0e 221c 	mls	r2, lr, ip, r2
 80009ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009b2:	fb04 f20c 	mul.w	r2, r4, ip
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x11e>
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80009c0:	d202      	bcs.n	80009c8 <__udivmoddi4+0x11c>
 80009c2:	429a      	cmp	r2, r3
 80009c4:	f200 80e0 	bhi.w	8000b88 <__udivmoddi4+0x2dc>
 80009c8:	46c4      	mov	ip, r8
 80009ca:	1a9b      	subs	r3, r3, r2
 80009cc:	fbb3 f2fe 	udiv	r2, r3, lr
 80009d0:	fb0e 3312 	mls	r3, lr, r2, r3
 80009d4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009d8:	fb02 f404 	mul.w	r4, r2, r4
 80009dc:	429c      	cmp	r4, r3
 80009de:	d907      	bls.n	80009f0 <__udivmoddi4+0x144>
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x142>
 80009e8:	429c      	cmp	r4, r3
 80009ea:	f200 80ca 	bhi.w	8000b82 <__udivmoddi4+0x2d6>
 80009ee:	4602      	mov	r2, r0
 80009f0:	1b1b      	subs	r3, r3, r4
 80009f2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009f6:	e7a5      	b.n	8000944 <__udivmoddi4+0x98>
 80009f8:	f1c1 0620 	rsb	r6, r1, #32
 80009fc:	408b      	lsls	r3, r1
 80009fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000a02:	431f      	orrs	r7, r3
 8000a04:	fa0e f401 	lsl.w	r4, lr, r1
 8000a08:	fa20 f306 	lsr.w	r3, r0, r6
 8000a0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a14:	4323      	orrs	r3, r4
 8000a16:	fa00 f801 	lsl.w	r8, r0, r1
 8000a1a:	fa1f fc87 	uxth.w	ip, r7
 8000a1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a22:	0c1c      	lsrs	r4, r3, #16
 8000a24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a30:	45a6      	cmp	lr, r4
 8000a32:	fa02 f201 	lsl.w	r2, r2, r1
 8000a36:	d909      	bls.n	8000a4c <__udivmoddi4+0x1a0>
 8000a38:	193c      	adds	r4, r7, r4
 8000a3a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000a3e:	f080 809c 	bcs.w	8000b7a <__udivmoddi4+0x2ce>
 8000a42:	45a6      	cmp	lr, r4
 8000a44:	f240 8099 	bls.w	8000b7a <__udivmoddi4+0x2ce>
 8000a48:	3802      	subs	r0, #2
 8000a4a:	443c      	add	r4, r7
 8000a4c:	eba4 040e 	sub.w	r4, r4, lr
 8000a50:	fa1f fe83 	uxth.w	lr, r3
 8000a54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a58:	fb09 4413 	mls	r4, r9, r3, r4
 8000a5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a64:	45a4      	cmp	ip, r4
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x1ce>
 8000a68:	193c      	adds	r4, r7, r4
 8000a6a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000a6e:	f080 8082 	bcs.w	8000b76 <__udivmoddi4+0x2ca>
 8000a72:	45a4      	cmp	ip, r4
 8000a74:	d97f      	bls.n	8000b76 <__udivmoddi4+0x2ca>
 8000a76:	3b02      	subs	r3, #2
 8000a78:	443c      	add	r4, r7
 8000a7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a7e:	eba4 040c 	sub.w	r4, r4, ip
 8000a82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a86:	4564      	cmp	r4, ip
 8000a88:	4673      	mov	r3, lr
 8000a8a:	46e1      	mov	r9, ip
 8000a8c:	d362      	bcc.n	8000b54 <__udivmoddi4+0x2a8>
 8000a8e:	d05f      	beq.n	8000b50 <__udivmoddi4+0x2a4>
 8000a90:	b15d      	cbz	r5, 8000aaa <__udivmoddi4+0x1fe>
 8000a92:	ebb8 0203 	subs.w	r2, r8, r3
 8000a96:	eb64 0409 	sbc.w	r4, r4, r9
 8000a9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000aa2:	431e      	orrs	r6, r3
 8000aa4:	40cc      	lsrs	r4, r1
 8000aa6:	e9c5 6400 	strd	r6, r4, [r5]
 8000aaa:	2100      	movs	r1, #0
 8000aac:	e74f      	b.n	800094e <__udivmoddi4+0xa2>
 8000aae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ab2:	0c01      	lsrs	r1, r0, #16
 8000ab4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ab8:	b280      	uxth	r0, r0
 8000aba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000abe:	463b      	mov	r3, r7
 8000ac0:	4638      	mov	r0, r7
 8000ac2:	463c      	mov	r4, r7
 8000ac4:	46b8      	mov	r8, r7
 8000ac6:	46be      	mov	lr, r7
 8000ac8:	2620      	movs	r6, #32
 8000aca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ace:	eba2 0208 	sub.w	r2, r2, r8
 8000ad2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ad6:	e766      	b.n	80009a6 <__udivmoddi4+0xfa>
 8000ad8:	4601      	mov	r1, r0
 8000ada:	e718      	b.n	800090e <__udivmoddi4+0x62>
 8000adc:	4610      	mov	r0, r2
 8000ade:	e72c      	b.n	800093a <__udivmoddi4+0x8e>
 8000ae0:	f1c6 0220 	rsb	r2, r6, #32
 8000ae4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ae8:	40b7      	lsls	r7, r6
 8000aea:	40b1      	lsls	r1, r6
 8000aec:	fa20 f202 	lsr.w	r2, r0, r2
 8000af0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af4:	430a      	orrs	r2, r1
 8000af6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000afa:	b2bc      	uxth	r4, r7
 8000afc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b00:	0c11      	lsrs	r1, r2, #16
 8000b02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b06:	fb08 f904 	mul.w	r9, r8, r4
 8000b0a:	40b0      	lsls	r0, r6
 8000b0c:	4589      	cmp	r9, r1
 8000b0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b12:	b280      	uxth	r0, r0
 8000b14:	d93e      	bls.n	8000b94 <__udivmoddi4+0x2e8>
 8000b16:	1879      	adds	r1, r7, r1
 8000b18:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000b1c:	d201      	bcs.n	8000b22 <__udivmoddi4+0x276>
 8000b1e:	4589      	cmp	r9, r1
 8000b20:	d81f      	bhi.n	8000b62 <__udivmoddi4+0x2b6>
 8000b22:	eba1 0109 	sub.w	r1, r1, r9
 8000b26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b2a:	fb09 f804 	mul.w	r8, r9, r4
 8000b2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b32:	b292      	uxth	r2, r2
 8000b34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b38:	4542      	cmp	r2, r8
 8000b3a:	d229      	bcs.n	8000b90 <__udivmoddi4+0x2e4>
 8000b3c:	18ba      	adds	r2, r7, r2
 8000b3e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000b42:	d2c4      	bcs.n	8000ace <__udivmoddi4+0x222>
 8000b44:	4542      	cmp	r2, r8
 8000b46:	d2c2      	bcs.n	8000ace <__udivmoddi4+0x222>
 8000b48:	f1a9 0102 	sub.w	r1, r9, #2
 8000b4c:	443a      	add	r2, r7
 8000b4e:	e7be      	b.n	8000ace <__udivmoddi4+0x222>
 8000b50:	45f0      	cmp	r8, lr
 8000b52:	d29d      	bcs.n	8000a90 <__udivmoddi4+0x1e4>
 8000b54:	ebbe 0302 	subs.w	r3, lr, r2
 8000b58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b5c:	3801      	subs	r0, #1
 8000b5e:	46e1      	mov	r9, ip
 8000b60:	e796      	b.n	8000a90 <__udivmoddi4+0x1e4>
 8000b62:	eba7 0909 	sub.w	r9, r7, r9
 8000b66:	4449      	add	r1, r9
 8000b68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b70:	fb09 f804 	mul.w	r8, r9, r4
 8000b74:	e7db      	b.n	8000b2e <__udivmoddi4+0x282>
 8000b76:	4673      	mov	r3, lr
 8000b78:	e77f      	b.n	8000a7a <__udivmoddi4+0x1ce>
 8000b7a:	4650      	mov	r0, sl
 8000b7c:	e766      	b.n	8000a4c <__udivmoddi4+0x1a0>
 8000b7e:	4608      	mov	r0, r1
 8000b80:	e6fd      	b.n	800097e <__udivmoddi4+0xd2>
 8000b82:	443b      	add	r3, r7
 8000b84:	3a02      	subs	r2, #2
 8000b86:	e733      	b.n	80009f0 <__udivmoddi4+0x144>
 8000b88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b8c:	443b      	add	r3, r7
 8000b8e:	e71c      	b.n	80009ca <__udivmoddi4+0x11e>
 8000b90:	4649      	mov	r1, r9
 8000b92:	e79c      	b.n	8000ace <__udivmoddi4+0x222>
 8000b94:	eba1 0109 	sub.w	r1, r1, r9
 8000b98:	46c4      	mov	ip, r8
 8000b9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b9e:	fb09 f804 	mul.w	r8, r9, r4
 8000ba2:	e7c4      	b.n	8000b2e <__udivmoddi4+0x282>

08000ba4 <__aeabi_idiv0>:
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <processData>:

/*
 * Takes the 6 unsigned 8 Bit ints received from IST8310 and combines them into 3 SIGNED 16 bit ints
 * No need to do the matrix thing as the chip does it for us thank god
 */
void processData(int16_t processedData[3], uint8_t unprocessedData[6]) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 3; i++) {
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73fb      	strb	r3, [r7, #15]
 8000bb6:	e034      	b.n	8000c22 <processData+0x7a>
		// memcpy(&processedData[i], &unprocessedData[i*2], 2);
		processedData[i] = 0;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	801a      	strh	r2, [r3, #0]
		processedData[i] += unprocessedData[i*2];
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	4413      	add	r3, r2
 8000bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	7bfa      	ldrb	r2, [r7, #15]
 8000bd4:	0052      	lsls	r2, r2, #1
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	440a      	add	r2, r1
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	b299      	uxth	r1, r3
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	b20a      	sxth	r2, r1
 8000bec:	801a      	strh	r2, [r3, #0]
		processedData[i] += unprocessedData[(i*2)+1] << 8;
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	3301      	adds	r3, #1
 8000c02:	6839      	ldr	r1, [r7, #0]
 8000c04:	440b      	add	r3, r1
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	021b      	lsls	r3, r3, #8
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	4413      	add	r3, r2
 8000c0e:	b299      	uxth	r1, r3
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	4413      	add	r3, r2
 8000c18:	b20a      	sxth	r2, r1
 8000c1a:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < 3; i++) {
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	73fb      	strb	r3, [r7, #15]
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d9c7      	bls.n	8000bb8 <processData+0x10>
	}
	// usart_printf("%d %d %d\r\n", processedData[0], processedData[1], processedData[2]);
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <IST8310_Init>:
 * Next this function Reads the "Who Am I" byte to the "Who Am I" Register
 * If IST8310 is receiving properly, it'll return with 0x10, else it will return 0x00, whuch means it isn't receiving
 *
 * Funally, it send the Optimization command to Optimize the chip... the documentation told us to do it so we did :)
 */
void IST8310_Init(I2C_HandleTypeDef *i2c) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af04      	add	r7, sp, #16
 8000c3e:	6078      	str	r0, [r7, #4]

	// Sets Pointer for later access to this library
	i2c3 = i2c;
 8000c40:	4a20      	ldr	r2, [pc, #128]	@ (8000cc4 <IST8310_Init+0x8c>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]

	uint8_t whoAmI = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2140      	movs	r1, #64	@ 0x40
 8000c4e:	481e      	ldr	r0, [pc, #120]	@ (8000cc8 <IST8310_Init+0x90>)
 8000c50:	f003 f890 	bl	8003d74 <HAL_GPIO_WritePin>
	HAL_Delay(6);
 8000c54:	2006      	movs	r0, #6
 8000c56:	f002 f9a1 	bl	8002f9c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, 1);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2140      	movs	r1, #64	@ 0x40
 8000c5e:	481a      	ldr	r0, [pc, #104]	@ (8000cc8 <IST8310_Init+0x90>)
 8000c60:	f003 f888 	bl	8003d74 <HAL_GPIO_WritePin>
	HAL_Delay(6);
 8000c64:	2006      	movs	r0, #6
 8000c66:	f002 f999 	bl	8002f9c <HAL_Delay>

	// Checks if the Magnometer is Reponding
	HAL_I2C_Mem_Read(i2c3, IST8310_SLAVE_ADDRESS_8BIT, IST8310_WHO_AM_I_REGISTER, 1, &whoAmI, 1, 50);
 8000c6a:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <IST8310_Init+0x8c>)
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	2332      	movs	r3, #50	@ 0x32
 8000c70:	9302      	str	r3, [sp, #8]
 8000c72:	2301      	movs	r3, #1
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	f107 030f 	add.w	r3, r7, #15
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	2200      	movs	r2, #0
 8000c80:	211c      	movs	r1, #28
 8000c82:	f003 facf 	bl	8004224 <HAL_I2C_Mem_Read>
	if (whoAmI != 0x10) {
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	2b10      	cmp	r3, #16
 8000c8a:	d116      	bne.n	8000cba <IST8310_Init+0x82>
		// usart_printf("Magnometer Not Responding!! \r\n");
		return 0;
	}
	HAL_Delay(6);
 8000c8c:	2006      	movs	r0, #6
 8000c8e:	f002 f985 	bl	8002f9c <HAL_Delay>

	// Performance Optimization
	uint8_t OptimizationDataToSend = 0xC0;
 8000c92:	23c0      	movs	r3, #192	@ 0xc0
 8000c94:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(i2c3, IST8310_SLAVE_ADDRESS_8BIT, IST8310_PULSE_DURATION_CONTROL_REGISTER, 1, &OptimizationDataToSend, 1, 50);
 8000c96:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc4 <IST8310_Init+0x8c>)
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	2332      	movs	r3, #50	@ 0x32
 8000c9c:	9302      	str	r3, [sp, #8]
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	f107 030e 	add.w	r3, r7, #14
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2301      	movs	r3, #1
 8000caa:	2242      	movs	r2, #66	@ 0x42
 8000cac:	211c      	movs	r1, #28
 8000cae:	f003 f9bf 	bl	8004030 <HAL_I2C_Mem_Write>
	HAL_Delay(6);
 8000cb2:	2006      	movs	r0, #6
 8000cb4:	f002 f972 	bl	8002f9c <HAL_Delay>
 8000cb8:	e000      	b.n	8000cbc <IST8310_Init+0x84>
		return 0;
 8000cba:	bf00      	nop


}
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000084 	.word	0x20000084
 8000cc8:	40021800 	.word	0x40021800

08000ccc <IST8310_Update>:
 * Next it reads all 6 registers on the chip such that it used by the user.
 * Do note the "IST8310_OUTPUT_VALUE_X_TO_Z" is the register address for X_LOW but because all the register addresses are beside each other, we can read them all with a 6 byte array
 *
 * Finally, the function proccesses the data such that it is usable for the general user
 */
void IST8310_Update() {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af04      	add	r7, sp, #16

	if (IST8310_WriteSent == 0) {
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <IST8310_Update+0x78>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d111      	bne.n	8000cfe <IST8310_Update+0x32>
		uint8_t SMMDataToSend = 0x01;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Mem_Write(i2c3, IST8310_SLAVE_ADDRESS_8BIT, IST8310_CONTROL_REGISTER_1, 1, &SMMDataToSend, 1, 50);
 8000cde:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <IST8310_Update+0x7c>)
 8000ce0:	6818      	ldr	r0, [r3, #0]
 8000ce2:	2332      	movs	r3, #50	@ 0x32
 8000ce4:	9302      	str	r3, [sp, #8]
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	9301      	str	r3, [sp, #4]
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	2301      	movs	r3, #1
 8000cf0:	220a      	movs	r2, #10
 8000cf2:	211c      	movs	r1, #28
 8000cf4:	f003 f99c 	bl	8004030 <HAL_I2C_Mem_Write>
		IST8310_WriteSent = 1;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <IST8310_Update+0x78>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == 1 && IST8310_WriteSent == 1) {
 8000cfe:	2108      	movs	r1, #8
 8000d00:	4812      	ldr	r0, [pc, #72]	@ (8000d4c <IST8310_Update+0x80>)
 8000d02:	f003 f81f 	bl	8003d44 <HAL_GPIO_ReadPin>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d117      	bne.n	8000d3c <IST8310_Update+0x70>
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <IST8310_Update+0x78>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d113      	bne.n	8000d3c <IST8310_Update+0x70>
		HAL_I2C_Mem_Read(i2c3, IST8310_SLAVE_ADDRESS_8BIT, IST8310_OUTPUT_VALUE_X_TO_Z, 1, XtoZOutputValues, 6, 50);
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <IST8310_Update+0x7c>)
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	2332      	movs	r3, #50	@ 0x32
 8000d1a:	9302      	str	r3, [sp, #8]
 8000d1c:	2306      	movs	r3, #6
 8000d1e:	9301      	str	r3, [sp, #4]
 8000d20:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <IST8310_Update+0x84>)
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2301      	movs	r3, #1
 8000d26:	2203      	movs	r2, #3
 8000d28:	211c      	movs	r1, #28
 8000d2a:	f003 fa7b 	bl	8004224 <HAL_I2C_Mem_Read>
		processData(processedValues, XtoZOutputValues);
 8000d2e:	4908      	ldr	r1, [pc, #32]	@ (8000d50 <IST8310_Update+0x84>)
 8000d30:	4808      	ldr	r0, [pc, #32]	@ (8000d54 <IST8310_Update+0x88>)
 8000d32:	f7ff ff39 	bl	8000ba8 <processData>
		IST8310_WriteSent = 0;
 8000d36:	4b03      	ldr	r3, [pc, #12]	@ (8000d44 <IST8310_Update+0x78>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]

	// osDelay(6);

	// processData(processedValues, XtoZOutputValues);

}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000088 	.word	0x20000088
 8000d48:	20000084 	.word	0x20000084
 8000d4c:	40021800 	.word	0x40021800
 8000d50:	2000008c 	.word	0x2000008c
 8000d54:	20000094 	.word	0x20000094

08000d58 <getIST8310_X>:

/*
 * Kind of obvioous, if you don't know what's happening with these 3 functions, ask Liang
 */
int16_t getIST8310_X() {
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	return processedValues[0];
 8000d5c:	4b03      	ldr	r3, [pc, #12]	@ (8000d6c <getIST8310_X+0x14>)
 8000d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	20000094 	.word	0x20000094

08000d70 <getIST8310_Y>:

int16_t getIST8310_Y() {
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
	return processedValues[1];
 8000d74:	4b03      	ldr	r3, [pc, #12]	@ (8000d84 <getIST8310_Y+0x14>)
 8000d76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	20000094 	.word	0x20000094

08000d88 <getIST8310_Z>:
int16_t getIST8310_Z() {
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
	return processedValues[2];
 8000d8c:	4b03      	ldr	r3, [pc, #12]	@ (8000d9c <getIST8310_Z+0x14>)
 8000d8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	20000094 	.word	0x20000094

08000da0 <Get_CRC16_Check_Sum>:
/*
** Descriptions: CRC16 checksum function
** Input: Data to check,Stream length, initialized checksum
** Output: CRC checksum
*/
uint16_t Get_CRC16_Check_Sum(uint8_t *pchMessage, uint32_t dwLength, uint16_t wCRC){
 8000da0:	b480      	push	{r7}
 8000da2:	b087      	sub	sp, #28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	4613      	mov	r3, r2
 8000dac:	80fb      	strh	r3, [r7, #6]
	uint8_t chData;

	if (pchMessage == NULL){
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d116      	bne.n	8000de2 <Get_CRC16_Check_Sum+0x42>
		return 0xFFFF;
 8000db4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000db8:	e017      	b.n	8000dea <Get_CRC16_Check_Sum+0x4a>
	}

	while(dwLength>0){
		chData = *pchMessage++;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	1c5a      	adds	r2, r3, #1
 8000dbe:	60fa      	str	r2, [r7, #12]
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	75fb      	strb	r3, [r7, #23]
		(wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_Table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	0a1b      	lsrs	r3, r3, #8
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	88f9      	ldrh	r1, [r7, #6]
 8000dcc:	7dfb      	ldrb	r3, [r7, #23]
 8000dce:	404b      	eors	r3, r1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	4909      	ldr	r1, [pc, #36]	@ (8000df8 <Get_CRC16_Check_Sum+0x58>)
 8000dd4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000dd8:	4053      	eors	r3, r2
 8000dda:	80fb      	strh	r3, [r7, #6]
		dwLength--;
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	60bb      	str	r3, [r7, #8]
	while(dwLength>0){
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1e8      	bne.n	8000dba <Get_CRC16_Check_Sum+0x1a>
	}

	return wCRC;
 8000de8:	88fb      	ldrh	r3, [r7, #6]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	371c      	adds	r7, #28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	0800ab6c 	.word	0x0800ab6c

08000dfc <UART_Printf>:
/*
** Descriptions: Send a message in fmt format over chosen uart instance
** Input: UART instance to send over, message to send in fmt format
** Output: message transmitted over uart
*/
void UART_Printf(UART_HandleTypeDef *huart,const char *fmt,...) {
 8000dfc:	b40e      	push	{r1, r2, r3}
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 8000e06:	f107 0318 	add.w	r3, r7, #24
 8000e0a:	4a0d      	ldr	r2, [pc, #52]	@ (8000e40 <UART_Printf+0x44>)
 8000e0c:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <UART_Printf+0x44>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	6979      	ldr	r1, [r7, #20]
 8000e14:	480b      	ldr	r0, [pc, #44]	@ (8000e44 <UART_Printf+0x48>)
 8000e16:	f009 f9f5 	bl	800a204 <vsiprintf>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <UART_Printf+0x4c>)
 8000e20:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit(huart, tx_buf, len,100);
 8000e22:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <UART_Printf+0x4c>)
 8000e24:	881a      	ldrh	r2, [r3, #0]
 8000e26:	2364      	movs	r3, #100	@ 0x64
 8000e28:	4906      	ldr	r1, [pc, #24]	@ (8000e44 <UART_Printf+0x48>)
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f005 fa32 	bl	8006294 <HAL_UART_Transmit>
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e3a:	b003      	add	sp, #12
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	200004a4 	.word	0x200004a4
 8000e44:	200004a8 	.word	0x200004a8
 8000e48:	200005a8 	.word	0x200005a8

08000e4c <UART_Ex_Init>:
/*
** Descriptions: Initialize the chosen uart instance using advanced reception service.
** 				 Must be called previously to enable HAL_UARTEx_RxEventCallback function
** Input: Target uart instance
*/
void UART_Ex_Init(UART_HandleTypeDef *huart) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(huart, RxInitBuff, 256);
 8000e54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e58:	4903      	ldr	r1, [pc, #12]	@ (8000e68 <UART_Ex_Init+0x1c>)
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f005 faa5 	bl	80063aa <HAL_UARTEx_ReceiveToIdle_DMA>

}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000009c 	.word	0x2000009c

08000e6c <HAL_UARTEx_RxEventCallback>:
/*
** Descriptions: is triggered on recieve
** Input: Data to CRC and append,Stream length = Data + checksum
** Output: True or False (CRC Verify Result)
*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8000e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e70:	b0af      	sub	sp, #188	@ 0xbc
 8000e72:	af12      	add	r7, sp, #72	@ 0x48
 8000e74:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000e76:	460b      	mov	r3, r1
 8000e78:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8000e7a:	466b      	mov	r3, sp
 8000e7c:	607b      	str	r3, [r7, #4]

	//write uart to RxBuff until idle state
	HAL_UARTEx_ReceiveToIdle_DMA(huart, RxBuff, 256);
 8000e7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e82:	49b5      	ldr	r1, [pc, #724]	@ (8001158 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8000e84:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000e86:	f005 fa90 	bl	80063aa <HAL_UARTEx_ReceiveToIdle_DMA>

	//parse frame information
	uint16_t cmd_id = ((uint16_t) RxBuff[6] << 8) | RxBuff[5];
 8000e8a:	4bb3      	ldr	r3, [pc, #716]	@ (8001158 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8000e8c:	799b      	ldrb	r3, [r3, #6]
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	4bb0      	ldr	r3, [pc, #704]	@ (8001158 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8000e96:	795b      	ldrb	r3, [r3, #5]
 8000e98:	b21b      	sxth	r3, r3
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
	uint16_t data_length = ((uint16_t) RxBuff[2] << 8) | RxBuff[1];
 8000ea2:	4bad      	ldr	r3, [pc, #692]	@ (8001158 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8000ea4:	789b      	ldrb	r3, [r3, #2]
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	b21a      	sxth	r2, r3
 8000eac:	4baa      	ldr	r3, [pc, #680]	@ (8001158 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8000eae:	785b      	ldrb	r3, [r3, #1]
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	uint16_t CRC16 = ((uint16_t) RxBuff[data_length+8] << 8) | RxBuff[data_length+7];
 8000eba:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8000ebe:	3308      	adds	r3, #8
 8000ec0:	4aa5      	ldr	r2, [pc, #660]	@ (8001158 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8000ec2:	5cd3      	ldrb	r3, [r2, r3]
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8000ece:	3307      	adds	r3, #7
 8000ed0:	49a1      	ldr	r1, [pc, #644]	@ (8001158 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8000ed2:	5ccb      	ldrb	r3, [r1, r3]
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

	//fills transmissionBuffer array with transmission bytes without CRC16
	uint8_t transmissionBuff[data_length+7];
 8000ede:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8000ee2:	1dd9      	adds	r1, r3, #7
 8000ee4:	1e4b      	subs	r3, r1, #1
 8000ee6:	667b      	str	r3, [r7, #100]	@ 0x64
 8000ee8:	460a      	mov	r2, r1
 8000eea:	2300      	movs	r3, #0
 8000eec:	633a      	str	r2, [r7, #48]	@ 0x30
 8000eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	f04f 0300 	mov.w	r3, #0
 8000ef8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000efa:	00c3      	lsls	r3, r0, #3
 8000efc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000efe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000f04:	00c2      	lsls	r2, r0, #3
 8000f06:	460a      	mov	r2, r1
 8000f08:	2300      	movs	r3, #0
 8000f0a:	4692      	mov	sl, r2
 8000f0c:	469b      	mov	fp, r3
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000f1a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000f1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000f22:	460b      	mov	r3, r1
 8000f24:	3307      	adds	r3, #7
 8000f26:	08db      	lsrs	r3, r3, #3
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	ebad 0d03 	sub.w	sp, sp, r3
 8000f2e:	ab12      	add	r3, sp, #72	@ 0x48
 8000f30:	3300      	adds	r3, #0
 8000f32:	663b      	str	r3, [r7, #96]	@ 0x60
	for(uint16_t i = 0; i<data_length+7;i++){
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8000f3a:	e00c      	b.n	8000f56 <HAL_UARTEx_RxEventCallback+0xea>
		transmissionBuff[i] = RxBuff[i];
 8000f3c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000f40:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000f44:	4984      	ldr	r1, [pc, #528]	@ (8001158 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8000f46:	5c89      	ldrb	r1, [r1, r2]
 8000f48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f4a:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i<data_length+7;i++){
 8000f4c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000f50:	3301      	adds	r3, #1
 8000f52:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8000f56:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8000f5a:	1d9a      	adds	r2, r3, #6
 8000f5c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000f60:	429a      	cmp	r2, r3
 8000f62:	daeb      	bge.n	8000f3c <HAL_UARTEx_RxEventCallback+0xd0>
	}

	uint16_t expected_CRC16 = Get_CRC16_Check_Sum(transmissionBuff,data_length+7, CRC_INIT);
 8000f64:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8000f68:	3307      	adds	r3, #7
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4b7b      	ldr	r3, [pc, #492]	@ (800115c <HAL_UARTEx_RxEventCallback+0x2f0>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000f74:	f7ff ff14 	bl	8000da0 <Get_CRC16_Check_Sum>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e


	if(expected_CRC16 == CRC16){
 8000f7e:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8000f82:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8000f86:	429a      	cmp	r2, r3
 8000f88:	f040 87b7 	bne.w	8001efa <HAL_UARTEx_RxEventCallback+0x108e>
 8000f8c:	466b      	mov	r3, sp
 8000f8e:	469a      	mov	sl, r3
		//seperate data
		uint8_t data[data_length];
 8000f90:	f8b7 106a 	ldrh.w	r1, [r7, #106]	@ 0x6a
 8000f94:	460b      	mov	r3, r1
 8000f96:	3b01      	subs	r3, #1
 8000f98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000f9a:	b28b      	uxth	r3, r1
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	4698      	mov	r8, r3
 8000fa0:	4691      	mov	r9, r2
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	f04f 0300 	mov.w	r3, #0
 8000faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000fb6:	b28b      	uxth	r3, r1
 8000fb8:	2200      	movs	r2, #0
 8000fba:	461c      	mov	r4, r3
 8000fbc:	4615      	mov	r5, r2
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	f04f 0300 	mov.w	r3, #0
 8000fc6:	00eb      	lsls	r3, r5, #3
 8000fc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000fcc:	00e2      	lsls	r2, r4, #3
 8000fce:	460b      	mov	r3, r1
 8000fd0:	3307      	adds	r3, #7
 8000fd2:	08db      	lsrs	r3, r3, #3
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	ebad 0d03 	sub.w	sp, sp, r3
 8000fda:	ab12      	add	r3, sp, #72	@ 0x48
 8000fdc:	3300      	adds	r3, #0
 8000fde:	657b      	str	r3, [r7, #84]	@ 0x54
		memcpy(data,&RxBuff[7],data_length);
 8000fe0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	495e      	ldr	r1, [pc, #376]	@ (8001160 <HAL_UARTEx_RxEventCallback+0x2f4>)
 8000fe8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000fea:	f009 f949 	bl	800a280 <memcpy>

		switch (cmd_id) {
 8000fee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8000ff2:	f240 4201 	movw	r2, #1025	@ 0x401
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	f000 8772 	beq.w	8001ee0 <HAL_UARTEx_RxEventCallback+0x1074>
 8000ffc:	f240 4201 	movw	r2, #1025	@ 0x401
 8001000:	4293      	cmp	r3, r2
 8001002:	f300 8779 	bgt.w	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
 8001006:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 800100a:	f280 8775 	bge.w	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
 800100e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001012:	dc1c      	bgt.n	800104e <HAL_UARTEx_RxEventCallback+0x1e2>
 8001014:	f240 220e 	movw	r2, #526	@ 0x20e
 8001018:	4293      	cmp	r3, r2
 800101a:	f300 876d 	bgt.w	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
 800101e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001022:	dc2b      	bgt.n	800107c <HAL_UARTEx_RxEventCallback+0x210>
 8001024:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8001028:	f280 8766 	bge.w	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
 800102c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001030:	dc48      	bgt.n	80010c4 <HAL_UARTEx_RxEventCallback+0x258>
 8001032:	2b03      	cmp	r3, #3
 8001034:	f000 80db 	beq.w	80011ee <HAL_UARTEx_RxEventCallback+0x382>
 8001038:	2b03      	cmp	r3, #3
 800103a:	f300 875d 	bgt.w	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
 800103e:	2b01      	cmp	r3, #1
 8001040:	f000 8090 	beq.w	8001164 <HAL_UARTEx_RxEventCallback+0x2f8>
 8001044:	2b02      	cmp	r3, #2
 8001046:	f000 80c7 	beq.w	80011d8 <HAL_UARTEx_RxEventCallback+0x36c>
 800104a:	f000 bf55 	b.w	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
 800104e:	f2a3 3301 	subw	r3, r3, #769	@ 0x301
 8001052:	2b06      	cmp	r3, #6
 8001054:	f200 8750 	bhi.w	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
 8001058:	a201      	add	r2, pc, #4	@ (adr r2, 8001060 <HAL_UARTEx_RxEventCallback+0x1f4>)
 800105a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105e:	bf00      	nop
 8001060:	08001ef9 	.word	0x08001ef9
 8001064:	08001b3d 	.word	0x08001b3d
 8001068:	08001b63 	.word	0x08001b63
 800106c:	08001bd1 	.word	0x08001bd1
 8001070:	08001ef9 	.word	0x08001ef9
 8001074:	08001ef9 	.word	0x08001ef9
 8001078:	08001e2d 	.word	0x08001e2d
 800107c:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8001080:	2b0d      	cmp	r3, #13
 8001082:	f200 8739 	bhi.w	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
 8001086:	a201      	add	r2, pc, #4	@ (adr r2, 800108c <HAL_UARTEx_RxEventCallback+0x220>)
 8001088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108c:	0800150d 	.word	0x0800150d
 8001090:	0800161b 	.word	0x0800161b
 8001094:	08001663 	.word	0x08001663
 8001098:	080016a7 	.word	0x080016a7
 800109c:	08001ef9 	.word	0x08001ef9
 80010a0:	08001709 	.word	0x08001709
 80010a4:	08001747 	.word	0x08001747
 80010a8:	080017a5 	.word	0x080017a5
 80010ac:	080017db 	.word	0x080017db
 80010b0:	080017f1 	.word	0x080017f1
 80010b4:	08001825 	.word	0x08001825
 80010b8:	080018dd 	.word	0x080018dd
 80010bc:	0800197d 	.word	0x0800197d
 80010c0:	08001aff 	.word	0x08001aff
 80010c4:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80010c8:	2b20      	cmp	r3, #32
 80010ca:	f200 8715 	bhi.w	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
 80010ce:	a201      	add	r2, pc, #4	@ (adr r2, 80010d4 <HAL_UARTEx_RxEventCallback+0x268>)
 80010d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d4:	08001311 	.word	0x08001311
 80010d8:	08001ef9 	.word	0x08001ef9
 80010dc:	08001ef9 	.word	0x08001ef9
 80010e0:	0800146d 	.word	0x0800146d
 80010e4:	0800149f 	.word	0x0800149f
 80010e8:	08001ef9 	.word	0x08001ef9
 80010ec:	08001ef9 	.word	0x08001ef9
 80010f0:	08001ef9 	.word	0x08001ef9
 80010f4:	08001ef9 	.word	0x08001ef9
 80010f8:	08001ef9 	.word	0x08001ef9
 80010fc:	08001ef9 	.word	0x08001ef9
 8001100:	08001ef9 	.word	0x08001ef9
 8001104:	08001ef9 	.word	0x08001ef9
 8001108:	08001ef9 	.word	0x08001ef9
 800110c:	08001ef9 	.word	0x08001ef9
 8001110:	08001ef9 	.word	0x08001ef9
 8001114:	08001ef9 	.word	0x08001ef9
 8001118:	08001ef9 	.word	0x08001ef9
 800111c:	08001ef9 	.word	0x08001ef9
 8001120:	08001ef9 	.word	0x08001ef9
 8001124:	08001ef9 	.word	0x08001ef9
 8001128:	08001ef9 	.word	0x08001ef9
 800112c:	08001ef9 	.word	0x08001ef9
 8001130:	08001ef9 	.word	0x08001ef9
 8001134:	08001ef9 	.word	0x08001ef9
 8001138:	08001ef9 	.word	0x08001ef9
 800113c:	08001ef9 	.word	0x08001ef9
 8001140:	08001ef9 	.word	0x08001ef9
 8001144:	08001ef9 	.word	0x08001ef9
 8001148:	08001ef9 	.word	0x08001ef9
 800114c:	08001ef9 	.word	0x08001ef9
 8001150:	08001ef9 	.word	0x08001ef9
 8001154:	08001ef9 	.word	0x08001ef9
 8001158:	2000019c 	.word	0x2000019c
 800115c:	20000000 	.word	0x20000000
 8001160:	200001a3 	.word	0x200001a3
			case GAME_STATUS_HEADER : {
				game_status.game_type = getBits(data[0],0,4);
 8001164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2204      	movs	r2, #4
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f000 fed3 	bl	8001f18 <getBits>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	4b63      	ldr	r3, [pc, #396]	@ (8001304 <HAL_UARTEx_RxEventCallback+0x498>)
 8001178:	701a      	strb	r2, [r3, #0]
				game_status.current_stage = getBits(data[0],4,4);
 800117a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2204      	movs	r2, #4
 8001180:	2104      	movs	r1, #4
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fec8 	bl	8001f18 <getBits>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b5d      	ldr	r3, [pc, #372]	@ (8001304 <HAL_UARTEx_RxEventCallback+0x498>)
 800118e:	705a      	strb	r2, [r3, #1]
				memcpy(&game_status.stage_remain_time,&data[1],2);
 8001190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001192:	3301      	adds	r3, #1
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	b29a      	uxth	r2, r3
 8001198:	4b5a      	ldr	r3, [pc, #360]	@ (8001304 <HAL_UARTEx_RxEventCallback+0x498>)
 800119a:	809a      	strh	r2, [r3, #4]
				memcpy(&game_status.SyncTimeStamp,&data[3],8);
 800119c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800119e:	3303      	adds	r3, #3
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80011ac:	4955      	ldr	r1, [pc, #340]	@ (8001304 <HAL_UARTEx_RxEventCallback+0x498>)
 80011ae:	e9c1 2302 	strd	r2, r3, [r1, #8]
				GAME_STATUS_RxEventCallback(game_status.game_type,game_status.current_stage,game_status.game_progress,game_status.stage_remain_time,game_status.SyncTimeStamp);
 80011b2:	4b54      	ldr	r3, [pc, #336]	@ (8001304 <HAL_UARTEx_RxEventCallback+0x498>)
 80011b4:	7818      	ldrb	r0, [r3, #0]
 80011b6:	4b53      	ldr	r3, [pc, #332]	@ (8001304 <HAL_UARTEx_RxEventCallback+0x498>)
 80011b8:	7859      	ldrb	r1, [r3, #1]
 80011ba:	4b52      	ldr	r3, [pc, #328]	@ (8001304 <HAL_UARTEx_RxEventCallback+0x498>)
 80011bc:	789c      	ldrb	r4, [r3, #2]
 80011be:	4b51      	ldr	r3, [pc, #324]	@ (8001304 <HAL_UARTEx_RxEventCallback+0x498>)
 80011c0:	889d      	ldrh	r5, [r3, #4]
 80011c2:	4b50      	ldr	r3, [pc, #320]	@ (8001304 <HAL_UARTEx_RxEventCallback+0x498>)
 80011c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80011c8:	e9cd 2300 	strd	r2, r3, [sp]
 80011cc:	462b      	mov	r3, r5
 80011ce:	4622      	mov	r2, r4
 80011d0:	f000 fecf 	bl	8001f72 <GAME_STATUS_RxEventCallback>
				break;
 80011d4:	f000 be90 	b.w	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
			}
			case GAME_RESULT_HEADER : {
				game_result.winner=data[0];
 80011d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001308 <HAL_UARTEx_RxEventCallback+0x49c>)
 80011de:	701a      	strb	r2, [r3, #0]
				GAME_RESULT_RxEventCallback(game_result.winner);
 80011e0:	4b49      	ldr	r3, [pc, #292]	@ (8001308 <HAL_UARTEx_RxEventCallback+0x49c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 fed8 	bl	8001f9a <GAME_RESULT_RxEventCallback>
				break;
 80011ea:	f000 be85 	b.w	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
			}
			case ROBOT_HP_HEADER : {
				memcpy(&robot_HP.red_1_robot_HP,&data[0],2);
 80011ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	4b45      	ldr	r3, [pc, #276]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 80011f6:	801a      	strh	r2, [r3, #0]
				memcpy(&robot_HP.red_2_robot_HP,&data[2],2);
 80011f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011fa:	3302      	adds	r3, #2
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4b42      	ldr	r3, [pc, #264]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8001202:	805a      	strh	r2, [r3, #2]
				memcpy(&robot_HP.red_3_robot_HP,&data[4],2);
 8001204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001206:	3304      	adds	r3, #4
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b3f      	ldr	r3, [pc, #252]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 800120e:	809a      	strh	r2, [r3, #4]
				memcpy(&robot_HP.red_4_robot_HP,&data[6],2);
 8001210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001212:	3306      	adds	r3, #6
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b3c      	ldr	r3, [pc, #240]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 800121a:	80da      	strh	r2, [r3, #6]
				memcpy(&robot_HP.red_7_robot_HP,&data[10],2);
 800121c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800121e:	330a      	adds	r3, #10
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	b29a      	uxth	r2, r3
 8001224:	4b39      	ldr	r3, [pc, #228]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8001226:	811a      	strh	r2, [r3, #8]
				memcpy(&robot_HP.red_outpost_HP,&data[12],2);
 8001228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800122a:	330c      	adds	r3, #12
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b36      	ldr	r3, [pc, #216]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8001232:	815a      	strh	r2, [r3, #10]
				memcpy(&robot_HP.red_base_HP,&data[14],2);
 8001234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001236:	330e      	adds	r3, #14
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	b29a      	uxth	r2, r3
 800123c:	4b33      	ldr	r3, [pc, #204]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 800123e:	819a      	strh	r2, [r3, #12]
				memcpy(&robot_HP.blue_1_robot_HP,&data[16],2);
 8001240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001242:	3310      	adds	r3, #16
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b30      	ldr	r3, [pc, #192]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 800124a:	81da      	strh	r2, [r3, #14]
				memcpy(&robot_HP.blue_2_robot_HP,&data[18],2);
 800124c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800124e:	3312      	adds	r3, #18
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	b29a      	uxth	r2, r3
 8001254:	4b2d      	ldr	r3, [pc, #180]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8001256:	821a      	strh	r2, [r3, #16]
				memcpy(&robot_HP.blue_3_robot_HP,&data[20],2);
 8001258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800125a:	3314      	adds	r3, #20
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	b29a      	uxth	r2, r3
 8001260:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8001262:	825a      	strh	r2, [r3, #18]
				memcpy(&robot_HP.blue_4_robot_HP,&data[22],2);
 8001264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001266:	3316      	adds	r3, #22
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	b29a      	uxth	r2, r3
 800126c:	4b27      	ldr	r3, [pc, #156]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 800126e:	829a      	strh	r2, [r3, #20]
				memcpy(&robot_HP.blue_7_robot_HP,&data[26],2);
 8001270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001272:	331a      	adds	r3, #26
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b24      	ldr	r3, [pc, #144]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 800127a:	82da      	strh	r2, [r3, #22]
				memcpy(&robot_HP.blue_outpost_HP,&data[28],2);
 800127c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800127e:	331c      	adds	r3, #28
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	b29a      	uxth	r2, r3
 8001284:	4b21      	ldr	r3, [pc, #132]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8001286:	831a      	strh	r2, [r3, #24]
				memcpy(&robot_HP.blue_base_HP,&data[30],2);
 8001288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800128a:	331e      	adds	r3, #30
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	b29a      	uxth	r2, r3
 8001290:	4b1e      	ldr	r3, [pc, #120]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8001292:	835a      	strh	r2, [r3, #26]
				ROBOT_HP_HEADER_RxEventCallback(robot_HP.red_1_robot_HP, robot_HP.red_2_robot_HP, robot_HP.red_3_robot_HP, robot_HP.red_4_robot_HP, robot_HP.red_7_robot_HP, robot_HP.red_outpost_HP, robot_HP.red_base_HP, robot_HP.blue_1_robot_HP, robot_HP.blue_2_robot_HP, robot_HP.blue_3_robot_HP, robot_HP.blue_4_robot_HP, robot_HP.blue_7_robot_HP, robot_HP.blue_outpost_HP, robot_HP.blue_base_HP);
 8001294:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8001296:	f8b3 c000 	ldrh.w	ip, [r3]
 800129a:	4b1c      	ldr	r3, [pc, #112]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 800129c:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 80012a0:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 80012a2:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 80012a6:	4b19      	ldr	r3, [pc, #100]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 80012a8:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 80012ac:	4b17      	ldr	r3, [pc, #92]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 80012ae:	8918      	ldrh	r0, [r3, #8]
 80012b0:	4b16      	ldr	r3, [pc, #88]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 80012b2:	895c      	ldrh	r4, [r3, #10]
 80012b4:	4b15      	ldr	r3, [pc, #84]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 80012b6:	899d      	ldrh	r5, [r3, #12]
 80012b8:	4b14      	ldr	r3, [pc, #80]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 80012ba:	89de      	ldrh	r6, [r3, #14]
 80012bc:	4b13      	ldr	r3, [pc, #76]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 80012be:	8a1b      	ldrh	r3, [r3, #16]
 80012c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80012c2:	4b12      	ldr	r3, [pc, #72]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 80012c4:	8a5a      	ldrh	r2, [r3, #18]
 80012c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80012c8:	4b10      	ldr	r3, [pc, #64]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 80012ca:	8a99      	ldrh	r1, [r3, #20]
 80012cc:	6279      	str	r1, [r7, #36]	@ 0x24
 80012ce:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 80012d0:	8ad9      	ldrh	r1, [r3, #22]
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 80012d4:	8b1a      	ldrh	r2, [r3, #24]
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <HAL_UARTEx_RxEventCallback+0x4a0>)
 80012d8:	8b5b      	ldrh	r3, [r3, #26]
 80012da:	9309      	str	r3, [sp, #36]	@ 0x24
 80012dc:	9208      	str	r2, [sp, #32]
 80012de:	9107      	str	r1, [sp, #28]
 80012e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012e2:	9106      	str	r1, [sp, #24]
 80012e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012e6:	9205      	str	r2, [sp, #20]
 80012e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012ea:	9304      	str	r3, [sp, #16]
 80012ec:	9603      	str	r6, [sp, #12]
 80012ee:	9502      	str	r5, [sp, #8]
 80012f0:	9401      	str	r4, [sp, #4]
 80012f2:	9000      	str	r0, [sp, #0]
 80012f4:	464b      	mov	r3, r9
 80012f6:	4642      	mov	r2, r8
 80012f8:	4671      	mov	r1, lr
 80012fa:	4660      	mov	r0, ip
 80012fc:	f000 fe58 	bl	8001fb0 <ROBOT_HP_HEADER_RxEventCallback>
				break;
 8001300:	f000 bdfa 	b.w	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
 8001304:	200002a0 	.word	0x200002a0
 8001308:	200002b0 	.word	0x200002b0
 800130c:	200002b4 	.word	0x200002b4
			}
			case EVENT_DATA_HEADER : {
				event_data.resupply_zone_1 = getBits(data[0],0,1);
 8001310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2201      	movs	r2, #1
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fdfd 	bl	8001f18 <getBits>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	4b77      	ldr	r3, [pc, #476]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 8001324:	701a      	strb	r2, [r3, #0]
				event_data.resupply_zone_2 = getBits(data[0],1,1);
 8001326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2201      	movs	r2, #1
 800132c:	2101      	movs	r1, #1
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fdf2 	bl	8001f18 <getBits>
 8001334:	4603      	mov	r3, r0
 8001336:	461a      	mov	r2, r3
 8001338:	4b71      	ldr	r3, [pc, #452]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 800133a:	705a      	strb	r2, [r3, #1]
				event_data.resupply_zone_3 = getBits(data[0],2,1);
 800133c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2201      	movs	r2, #1
 8001342:	2102      	movs	r1, #2
 8001344:	4618      	mov	r0, r3
 8001346:	f000 fde7 	bl	8001f18 <getBits>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	4b6c      	ldr	r3, [pc, #432]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 8001350:	709a      	strb	r2, [r3, #2]
				event_data.small_power_rune = getBits(data[0],3,1);
 8001352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2201      	movs	r2, #1
 8001358:	2103      	movs	r1, #3
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fddc 	bl	8001f18 <getBits>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	4b66      	ldr	r3, [pc, #408]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 8001366:	70da      	strb	r2, [r3, #3]
				event_data.large_power_rune = getBits(data[0],4,1);
 8001368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2201      	movs	r2, #1
 800136e:	2104      	movs	r1, #4
 8001370:	4618      	mov	r0, r3
 8001372:	f000 fdd1 	bl	8001f18 <getBits>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	4b61      	ldr	r3, [pc, #388]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 800137c:	711a      	strb	r2, [r3, #4]
				event_data.central_elevated_ground = getBits(data[0],5,2);
 800137e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2202      	movs	r2, #2
 8001384:	2105      	movs	r1, #5
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fdc6 	bl	8001f18 <getBits>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	4b5b      	ldr	r3, [pc, #364]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 8001392:	715a      	strb	r2, [r3, #5]
				event_data.trapezoid_elevated_ground = getBits(data[0],7,1) | (getBits(data[1],0,1)<<1);
 8001394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2201      	movs	r2, #1
 800139a:	2107      	movs	r1, #7
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fdbb 	bl	8001f18 <getBits>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b25c      	sxtb	r4, r3
 80013a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013a8:	785b      	ldrb	r3, [r3, #1]
 80013aa:	2201      	movs	r2, #1
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fdb2 	bl	8001f18 <getBits>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	4323      	orrs	r3, r4
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b4f      	ldr	r3, [pc, #316]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 80013c4:	719a      	strb	r2, [r3, #6]
				uint8_t last_dart_hit[] = {getBits(data[1],1,8),getBits(data[2],0,2)};
 80013c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013c8:	785b      	ldrb	r3, [r3, #1]
 80013ca:	2208      	movs	r2, #8
 80013cc:	2101      	movs	r1, #1
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 fda2 	bl	8001f18 <getBits>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 80013da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013dc:	789b      	ldrb	r3, [r3, #2]
 80013de:	2202      	movs	r2, #2
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 fd98 	bl	8001f18 <getBits>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
				memcpy(&event_data.last_dart_hit,last_dart_hit,2);
 80013ee:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80013f2:	4b43      	ldr	r3, [pc, #268]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 80013f4:	811a      	strh	r2, [r3, #8]
				event_data.last_dart_hit_target = getBits(data[2],2,3);
 80013f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013f8:	789b      	ldrb	r3, [r3, #2]
 80013fa:	2203      	movs	r2, #3
 80013fc:	2102      	movs	r1, #2
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 fd8a 	bl	8001f18 <getBits>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	4b3d      	ldr	r3, [pc, #244]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 800140a:	729a      	strb	r2, [r3, #10]
				event_data.central_buff = getBits(data[2],5,2);
 800140c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800140e:	789b      	ldrb	r3, [r3, #2]
 8001410:	2202      	movs	r2, #2
 8001412:	2105      	movs	r1, #5
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fd7f 	bl	8001f18 <getBits>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	4b38      	ldr	r3, [pc, #224]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 8001420:	72da      	strb	r2, [r3, #11]
				EVENT_DATA_RxEventCallback(event_data.resupply_zone_1, event_data.resupply_zone_2, event_data.resupply_zone_3, event_data.small_power_rune, event_data.large_power_rune, event_data.central_elevated_ground, event_data.trapezoid_elevated_ground, event_data.last_dart_hit, event_data.last_dart_hit_target, event_data.central_buff);
 8001422:	4b37      	ldr	r3, [pc, #220]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 8001424:	781e      	ldrb	r6, [r3, #0]
 8001426:	4b36      	ldr	r3, [pc, #216]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 8001428:	f893 c001 	ldrb.w	ip, [r3, #1]
 800142c:	4b34      	ldr	r3, [pc, #208]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 800142e:	f893 e002 	ldrb.w	lr, [r3, #2]
 8001432:	4b33      	ldr	r3, [pc, #204]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 8001434:	f893 8003 	ldrb.w	r8, [r3, #3]
 8001438:	4b31      	ldr	r3, [pc, #196]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 800143a:	791b      	ldrb	r3, [r3, #4]
 800143c:	4a30      	ldr	r2, [pc, #192]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 800143e:	7952      	ldrb	r2, [r2, #5]
 8001440:	492f      	ldr	r1, [pc, #188]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 8001442:	7989      	ldrb	r1, [r1, #6]
 8001444:	482e      	ldr	r0, [pc, #184]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 8001446:	8900      	ldrh	r0, [r0, #8]
 8001448:	4c2d      	ldr	r4, [pc, #180]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 800144a:	7aa4      	ldrb	r4, [r4, #10]
 800144c:	4d2c      	ldr	r5, [pc, #176]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x694>)
 800144e:	7aed      	ldrb	r5, [r5, #11]
 8001450:	9505      	str	r5, [sp, #20]
 8001452:	9404      	str	r4, [sp, #16]
 8001454:	9003      	str	r0, [sp, #12]
 8001456:	9102      	str	r1, [sp, #8]
 8001458:	9201      	str	r2, [sp, #4]
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	4643      	mov	r3, r8
 800145e:	4672      	mov	r2, lr
 8001460:	4661      	mov	r1, ip
 8001462:	4630      	mov	r0, r6
 8001464:	f000 fdb8 	bl	8001fd8 <EVENT_DATA_RxEventCallback>
				break;
 8001468:	f000 bd46 	b.w	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
			}
			case REFEREE_WARNING_HEADER : {
				memcpy(&referee_warning.penalty,&data[0],1);
 800146c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800146e:	781a      	ldrb	r2, [r3, #0]
 8001470:	4b24      	ldr	r3, [pc, #144]	@ (8001504 <HAL_UARTEx_RxEventCallback+0x698>)
 8001472:	701a      	strb	r2, [r3, #0]
				memcpy(&referee_warning.offending_robot_id,&data[1],1);
 8001474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001476:	3301      	adds	r3, #1
 8001478:	781a      	ldrb	r2, [r3, #0]
 800147a:	4b22      	ldr	r3, [pc, #136]	@ (8001504 <HAL_UARTEx_RxEventCallback+0x698>)
 800147c:	705a      	strb	r2, [r3, #1]
				memcpy(&referee_warning.count,&data[2],1);
 800147e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001480:	3302      	adds	r3, #2
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <HAL_UARTEx_RxEventCallback+0x698>)
 8001486:	709a      	strb	r2, [r3, #2]
				REFEREE_WARNING_RxEventCallback(referee_warning.penalty,referee_warning.offending_robot_id,referee_warning.count);
 8001488:	4b1e      	ldr	r3, [pc, #120]	@ (8001504 <HAL_UARTEx_RxEventCallback+0x698>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4a1d      	ldr	r2, [pc, #116]	@ (8001504 <HAL_UARTEx_RxEventCallback+0x698>)
 800148e:	7851      	ldrb	r1, [r2, #1]
 8001490:	4a1c      	ldr	r2, [pc, #112]	@ (8001504 <HAL_UARTEx_RxEventCallback+0x698>)
 8001492:	7892      	ldrb	r2, [r2, #2]
 8001494:	4618      	mov	r0, r3
 8001496:	f000 fdb3 	bl	8002000 <REFEREE_WARNING_RxEventCallback>
				break;
 800149a:	f000 bd2d 	b.w	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
			}
			case DART_INFO_HEADER : {
				memcpy(&dart_info.dart_remaining_time,&data[0],1);
 800149e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014a0:	781a      	ldrb	r2, [r3, #0]
 80014a2:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <HAL_UARTEx_RxEventCallback+0x69c>)
 80014a4:	701a      	strb	r2, [r3, #0]
				dart_info.last_dart_hit_target = getBits(data[1],0,3);
 80014a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014a8:	785b      	ldrb	r3, [r3, #1]
 80014aa:	2203      	movs	r2, #3
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 fd32 	bl	8001f18 <getBits>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b13      	ldr	r3, [pc, #76]	@ (8001508 <HAL_UARTEx_RxEventCallback+0x69c>)
 80014ba:	705a      	strb	r2, [r3, #1]
				dart_info.last_target_hit_count = getBits(data[1],3,3);
 80014bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014be:	785b      	ldrb	r3, [r3, #1]
 80014c0:	2203      	movs	r2, #3
 80014c2:	2103      	movs	r1, #3
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fd27 	bl	8001f18 <getBits>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <HAL_UARTEx_RxEventCallback+0x69c>)
 80014d0:	709a      	strb	r2, [r3, #2]
				dart_info.current_dart_target = getBits(data[1],6,2);
 80014d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014d4:	785b      	ldrb	r3, [r3, #1]
 80014d6:	2202      	movs	r2, #2
 80014d8:	2106      	movs	r1, #6
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 fd1c 	bl	8001f18 <getBits>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <HAL_UARTEx_RxEventCallback+0x69c>)
 80014e6:	70da      	strb	r2, [r3, #3]
				DART_INFO_RxEventCallback(dart_info.dart_remaining_time,dart_info.last_dart_hit_target,dart_info.last_target_hit_count, dart_info.current_dart_target);
 80014e8:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <HAL_UARTEx_RxEventCallback+0x69c>)
 80014ea:	7818      	ldrb	r0, [r3, #0]
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_UARTEx_RxEventCallback+0x69c>)
 80014ee:	7859      	ldrb	r1, [r3, #1]
 80014f0:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <HAL_UARTEx_RxEventCallback+0x69c>)
 80014f2:	789a      	ldrb	r2, [r3, #2]
 80014f4:	4b04      	ldr	r3, [pc, #16]	@ (8001508 <HAL_UARTEx_RxEventCallback+0x69c>)
 80014f6:	78db      	ldrb	r3, [r3, #3]
 80014f8:	f000 fd91 	bl	800201e <DART_INFO_RxEventCallback>
				break;
 80014fc:	f000 bcfc 	b.w	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
 8001500:	200002d0 	.word	0x200002d0
 8001504:	200002dc 	.word	0x200002dc
 8001508:	200002e0 	.word	0x200002e0
			}
			case ROBOT_STATUS_HEADER : {
				memcpy(&robot_status.robot_id,&data[0],1);
 800150c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800150e:	781a      	ldrb	r2, [r3, #0]
 8001510:	4b9e      	ldr	r3, [pc, #632]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 8001512:	701a      	strb	r2, [r3, #0]
				memcpy(&robot_status.robot_level,&data[1],1);
 8001514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001516:	3301      	adds	r3, #1
 8001518:	781a      	ldrb	r2, [r3, #0]
 800151a:	4b9c      	ldr	r3, [pc, #624]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 800151c:	705a      	strb	r2, [r3, #1]
				memcpy(&robot_status.current_HP,&data[2],2);
 800151e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001520:	3302      	adds	r3, #2
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	b29a      	uxth	r2, r3
 8001526:	4b99      	ldr	r3, [pc, #612]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 8001528:	805a      	strh	r2, [r3, #2]
				memcpy(&robot_status.maximum_HP,&data[4],2);
 800152a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800152c:	3304      	adds	r3, #4
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	b29a      	uxth	r2, r3
 8001532:	4b96      	ldr	r3, [pc, #600]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 8001534:	809a      	strh	r2, [r3, #4]
				memcpy(&robot_status.shooter_barrel_cooling_value,&data[6],2);
 8001536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001538:	3306      	adds	r3, #6
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	b29a      	uxth	r2, r3
 800153e:	4b93      	ldr	r3, [pc, #588]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 8001540:	80da      	strh	r2, [r3, #6]
				memcpy(&robot_status.shooter_barrel_heat_limit,&data[8],2);
 8001542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001544:	3308      	adds	r3, #8
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	b29a      	uxth	r2, r3
 800154a:	4b90      	ldr	r3, [pc, #576]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 800154c:	811a      	strh	r2, [r3, #8]
				memcpy(&robot_status.chassis_power_limit,&data[10],2);
 800154e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001550:	330a      	adds	r3, #10
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	b29a      	uxth	r2, r3
 8001556:	4b8d      	ldr	r3, [pc, #564]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 8001558:	815a      	strh	r2, [r3, #10]
				robot_status.power_management_gimbal_output = getBits(data[12],0,1);
 800155a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800155c:	7b1b      	ldrb	r3, [r3, #12]
 800155e:	2201      	movs	r2, #1
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fcd8 	bl	8001f18 <getBits>
 8001568:	4603      	mov	r3, r0
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	b2d9      	uxtb	r1, r3
 8001570:	4a86      	ldr	r2, [pc, #536]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 8001572:	7b13      	ldrb	r3, [r2, #12]
 8001574:	f361 0300 	bfi	r3, r1, #0, #1
 8001578:	7313      	strb	r3, [r2, #12]
				robot_status.power_management_chassis_output = getBits(data[12],1,1);
 800157a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800157c:	7b1b      	ldrb	r3, [r3, #12]
 800157e:	2201      	movs	r2, #1
 8001580:	2101      	movs	r1, #1
 8001582:	4618      	mov	r0, r3
 8001584:	f000 fcc8 	bl	8001f18 <getBits>
 8001588:	4603      	mov	r3, r0
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	b2d9      	uxtb	r1, r3
 8001590:	4a7e      	ldr	r2, [pc, #504]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 8001592:	7b13      	ldrb	r3, [r2, #12]
 8001594:	f361 0341 	bfi	r3, r1, #1, #1
 8001598:	7313      	strb	r3, [r2, #12]
				robot_status.power_management_shooter_output = getBits(data[12],2,1);
 800159a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800159c:	7b1b      	ldrb	r3, [r3, #12]
 800159e:	2201      	movs	r2, #1
 80015a0:	2102      	movs	r1, #2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 fcb8 	bl	8001f18 <getBits>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	b2d9      	uxtb	r1, r3
 80015b0:	4a76      	ldr	r2, [pc, #472]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 80015b2:	7b13      	ldrb	r3, [r2, #12]
 80015b4:	f361 0382 	bfi	r3, r1, #2, #1
 80015b8:	7313      	strb	r3, [r2, #12]
				ROBOT_STATUS_RxEventCallback(robot_status.robot_id, robot_status.robot_level, robot_status.current_HP, robot_status.maximum_HP, robot_status.shooter_barrel_cooling_value, robot_status.shooter_barrel_heat_limit, robot_status.chassis_power_limit, robot_status.power_management_gimbal_output, robot_status.power_management_chassis_output, robot_status.power_management_shooter_output);
 80015ba:	4b74      	ldr	r3, [pc, #464]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 80015bc:	781c      	ldrb	r4, [r3, #0]
 80015be:	4b73      	ldr	r3, [pc, #460]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 80015c0:	785d      	ldrb	r5, [r3, #1]
 80015c2:	4b72      	ldr	r3, [pc, #456]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 80015c4:	885e      	ldrh	r6, [r3, #2]
 80015c6:	4b71      	ldr	r3, [pc, #452]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 80015c8:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 80015cc:	4b6f      	ldr	r3, [pc, #444]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 80015ce:	88db      	ldrh	r3, [r3, #6]
 80015d0:	4a6e      	ldr	r2, [pc, #440]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 80015d2:	8912      	ldrh	r2, [r2, #8]
 80015d4:	496d      	ldr	r1, [pc, #436]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 80015d6:	8949      	ldrh	r1, [r1, #10]
 80015d8:	486c      	ldr	r0, [pc, #432]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 80015da:	7b00      	ldrb	r0, [r0, #12]
 80015dc:	f3c0 0000 	ubfx	r0, r0, #0, #1
 80015e0:	b2c0      	uxtb	r0, r0
 80015e2:	6338      	str	r0, [r7, #48]	@ 0x30
 80015e4:	4869      	ldr	r0, [pc, #420]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 80015e6:	7b00      	ldrb	r0, [r0, #12]
 80015e8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80015ec:	b2c0      	uxtb	r0, r0
 80015ee:	62b8      	str	r0, [r7, #40]	@ 0x28
 80015f0:	4866      	ldr	r0, [pc, #408]	@ (800178c <HAL_UARTEx_RxEventCallback+0x920>)
 80015f2:	7b00      	ldrb	r0, [r0, #12]
 80015f4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80015f8:	b2c0      	uxtb	r0, r0
 80015fa:	9005      	str	r0, [sp, #20]
 80015fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80015fe:	9004      	str	r0, [sp, #16]
 8001600:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001602:	9003      	str	r0, [sp, #12]
 8001604:	9102      	str	r1, [sp, #8]
 8001606:	9201      	str	r2, [sp, #4]
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	4663      	mov	r3, ip
 800160c:	4632      	mov	r2, r6
 800160e:	4629      	mov	r1, r5
 8001610:	4620      	mov	r0, r4
 8001612:	f000 fd18 	bl	8002046 <ROBOT_STATUS_RxEventCallback>
				break;
 8001616:	f000 bc6f 	b.w	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
			}
			case POWER_HEAT_DATA_HEADER : {
				memcpy(&power_heat_data.buffer_energy,&data[8],2);
 800161a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800161c:	3308      	adds	r3, #8
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	b29a      	uxth	r2, r3
 8001622:	4b5b      	ldr	r3, [pc, #364]	@ (8001790 <HAL_UARTEx_RxEventCallback+0x924>)
 8001624:	801a      	strh	r2, [r3, #0]
				memcpy(&power_heat_data.shooter_17mm_1_barrel_heat,&data[10],2);
 8001626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001628:	330a      	adds	r3, #10
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	b29a      	uxth	r2, r3
 800162e:	4b58      	ldr	r3, [pc, #352]	@ (8001790 <HAL_UARTEx_RxEventCallback+0x924>)
 8001630:	805a      	strh	r2, [r3, #2]
				memcpy(&power_heat_data.shooter_17mm_2_barrel_heat,&data[12],2);
 8001632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001634:	330c      	adds	r3, #12
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	b29a      	uxth	r2, r3
 800163a:	4b55      	ldr	r3, [pc, #340]	@ (8001790 <HAL_UARTEx_RxEventCallback+0x924>)
 800163c:	809a      	strh	r2, [r3, #4]
				memcpy(&power_heat_data.shooter_42mm_barrel_heat,&data[14],2);
 800163e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001640:	330e      	adds	r3, #14
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	b29a      	uxth	r2, r3
 8001646:	4b52      	ldr	r3, [pc, #328]	@ (8001790 <HAL_UARTEx_RxEventCallback+0x924>)
 8001648:	80da      	strh	r2, [r3, #6]
				POWER_HEAT_DATA_RxEventCallback(power_heat_data.buffer_energy, power_heat_data.shooter_17mm_1_barrel_heat, power_heat_data.shooter_17mm_2_barrel_heat, power_heat_data.shooter_42mm_barrel_heat);
 800164a:	4b51      	ldr	r3, [pc, #324]	@ (8001790 <HAL_UARTEx_RxEventCallback+0x924>)
 800164c:	8818      	ldrh	r0, [r3, #0]
 800164e:	4b50      	ldr	r3, [pc, #320]	@ (8001790 <HAL_UARTEx_RxEventCallback+0x924>)
 8001650:	8859      	ldrh	r1, [r3, #2]
 8001652:	4b4f      	ldr	r3, [pc, #316]	@ (8001790 <HAL_UARTEx_RxEventCallback+0x924>)
 8001654:	889a      	ldrh	r2, [r3, #4]
 8001656:	4b4e      	ldr	r3, [pc, #312]	@ (8001790 <HAL_UARTEx_RxEventCallback+0x924>)
 8001658:	88db      	ldrh	r3, [r3, #6]
 800165a:	f000 fd08 	bl	800206e <POWER_HEAT_DATA_RxEventCallback>
				break;
 800165e:	f000 bc4b 	b.w	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
			}
			case ROBOT_POSITION_HEADER : {
				memcpy(&robot_position.x,&data[0],4);
 8001662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	4b4a      	ldr	r3, [pc, #296]	@ (8001794 <HAL_UARTEx_RxEventCallback+0x928>)
 800166a:	601a      	str	r2, [r3, #0]
				memcpy(&robot_position.y,&data[0],4);
 800166c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b48      	ldr	r3, [pc, #288]	@ (8001794 <HAL_UARTEx_RxEventCallback+0x928>)
 8001674:	605a      	str	r2, [r3, #4]
				memcpy(&robot_position.angle,&data[0],4);
 8001676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	4b45      	ldr	r3, [pc, #276]	@ (8001794 <HAL_UARTEx_RxEventCallback+0x928>)
 800167e:	609a      	str	r2, [r3, #8]
				ROBOT_POSITION_RxEventCallback(robot_position.x, robot_position.y, robot_position.angle);
 8001680:	4b44      	ldr	r3, [pc, #272]	@ (8001794 <HAL_UARTEx_RxEventCallback+0x928>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	4b43      	ldr	r3, [pc, #268]	@ (8001794 <HAL_UARTEx_RxEventCallback+0x928>)
 8001688:	ed93 7a01 	vldr	s14, [r3, #4]
 800168c:	4b41      	ldr	r3, [pc, #260]	@ (8001794 <HAL_UARTEx_RxEventCallback+0x928>)
 800168e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001692:	eeb0 1a66 	vmov.f32	s2, s13
 8001696:	eef0 0a47 	vmov.f32	s1, s14
 800169a:	eeb0 0a67 	vmov.f32	s0, s15
 800169e:	f000 fcfa 	bl	8002096 <ROBOT_POSITION_RxEventCallback>
				break;
 80016a2:	f000 bc29 	b.w	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
			}
			case BUFF_HEADER : {
				memcpy(&buffs.recovery_buff,&data[0],1);
 80016a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016a8:	781a      	ldrb	r2, [r3, #0]
 80016aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001798 <HAL_UARTEx_RxEventCallback+0x92c>)
 80016ac:	701a      	strb	r2, [r3, #0]
				memcpy(&buffs.cooling_buff,&data[1],1);
 80016ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016b0:	3301      	adds	r3, #1
 80016b2:	781a      	ldrb	r2, [r3, #0]
 80016b4:	4b38      	ldr	r3, [pc, #224]	@ (8001798 <HAL_UARTEx_RxEventCallback+0x92c>)
 80016b6:	705a      	strb	r2, [r3, #1]
				memcpy(&buffs.defence_buff,&data[2],1);
 80016b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016ba:	3302      	adds	r3, #2
 80016bc:	781a      	ldrb	r2, [r3, #0]
 80016be:	4b36      	ldr	r3, [pc, #216]	@ (8001798 <HAL_UARTEx_RxEventCallback+0x92c>)
 80016c0:	709a      	strb	r2, [r3, #2]
				memcpy(&buffs.vulnerability_buff,&data[3],1);
 80016c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016c4:	3303      	adds	r3, #3
 80016c6:	781a      	ldrb	r2, [r3, #0]
 80016c8:	4b33      	ldr	r3, [pc, #204]	@ (8001798 <HAL_UARTEx_RxEventCallback+0x92c>)
 80016ca:	70da      	strb	r2, [r3, #3]
				memcpy(&buffs.attack_buff,&data[4],2);
 80016cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016ce:	3304      	adds	r3, #4
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	4b30      	ldr	r3, [pc, #192]	@ (8001798 <HAL_UARTEx_RxEventCallback+0x92c>)
 80016d6:	809a      	strh	r2, [r3, #4]
				memcpy(&buffs.remaining_energy,&data[5],1);
 80016d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016da:	3305      	adds	r3, #5
 80016dc:	781a      	ldrb	r2, [r3, #0]
 80016de:	4b2e      	ldr	r3, [pc, #184]	@ (8001798 <HAL_UARTEx_RxEventCallback+0x92c>)
 80016e0:	719a      	strb	r2, [r3, #6]
				BUFF_RxEventCallback(buffs.recovery_buff, buffs.cooling_buff, buffs.defence_buff, buffs.vulnerability_buff, buffs.attack_buff, buffs.remaining_energy);
 80016e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001798 <HAL_UARTEx_RxEventCallback+0x92c>)
 80016e4:	7818      	ldrb	r0, [r3, #0]
 80016e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001798 <HAL_UARTEx_RxEventCallback+0x92c>)
 80016e8:	7859      	ldrb	r1, [r3, #1]
 80016ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001798 <HAL_UARTEx_RxEventCallback+0x92c>)
 80016ec:	789c      	ldrb	r4, [r3, #2]
 80016ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001798 <HAL_UARTEx_RxEventCallback+0x92c>)
 80016f0:	78dd      	ldrb	r5, [r3, #3]
 80016f2:	4b29      	ldr	r3, [pc, #164]	@ (8001798 <HAL_UARTEx_RxEventCallback+0x92c>)
 80016f4:	889b      	ldrh	r3, [r3, #4]
 80016f6:	4a28      	ldr	r2, [pc, #160]	@ (8001798 <HAL_UARTEx_RxEventCallback+0x92c>)
 80016f8:	7992      	ldrb	r2, [r2, #6]
 80016fa:	9201      	str	r2, [sp, #4]
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	462b      	mov	r3, r5
 8001700:	4622      	mov	r2, r4
 8001702:	f000 fcd7 	bl	80020b4 <BUFF_RxEventCallback>
				break;
 8001706:	e3f7      	b.n	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
			}
			case DAMAGE_DATA_HEADER : {
				damage_data.armor_id = getBits(data[0],0,4);
 8001708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2204      	movs	r2, #4
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f000 fc01 	bl	8001f18 <getBits>
 8001716:	4603      	mov	r3, r0
 8001718:	461a      	mov	r2, r3
 800171a:	4b20      	ldr	r3, [pc, #128]	@ (800179c <HAL_UARTEx_RxEventCallback+0x930>)
 800171c:	701a      	strb	r2, [r3, #0]
				damage_data.HP_deduction_reason = getBits(data[0],4,4);
 800171e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2204      	movs	r2, #4
 8001724:	2104      	movs	r1, #4
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fbf6 	bl	8001f18 <getBits>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <HAL_UARTEx_RxEventCallback+0x930>)
 8001732:	705a      	strb	r2, [r3, #1]
				DAMAGE_SOURCE_RxEventCallback(damage_data.armor_id, damage_data.HP_deduction_reason);
 8001734:	4b19      	ldr	r3, [pc, #100]	@ (800179c <HAL_UARTEx_RxEventCallback+0x930>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4a18      	ldr	r2, [pc, #96]	@ (800179c <HAL_UARTEx_RxEventCallback+0x930>)
 800173a:	7852      	ldrb	r2, [r2, #1]
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f000 fccc 	bl	80020dc <DAMAGE_SOURCE_RxEventCallback>
				break;
 8001744:	e3d8      	b.n	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
			}
			case PROJECTILE_INFO_HEADER : {
				memcpy(&shoot_data.bullet_type,&data[0],1);
 8001746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001748:	781a      	ldrb	r2, [r3, #0]
 800174a:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <HAL_UARTEx_RxEventCallback+0x934>)
 800174c:	701a      	strb	r2, [r3, #0]
				memcpy(&shoot_data.shooter_number,&data[1],1);
 800174e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001750:	3301      	adds	r3, #1
 8001752:	781a      	ldrb	r2, [r3, #0]
 8001754:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <HAL_UARTEx_RxEventCallback+0x934>)
 8001756:	705a      	strb	r2, [r3, #1]
				memcpy(&shoot_data.launching_frequency,&data[2],1);
 8001758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800175a:	3302      	adds	r3, #2
 800175c:	781a      	ldrb	r2, [r3, #0]
 800175e:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <HAL_UARTEx_RxEventCallback+0x934>)
 8001760:	709a      	strb	r2, [r3, #2]
				memcpy(&shoot_data.initial_speed,&data[3],4);
 8001762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001764:	3303      	adds	r3, #3
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b0d      	ldr	r3, [pc, #52]	@ (80017a0 <HAL_UARTEx_RxEventCallback+0x934>)
 800176c:	605a      	str	r2, [r3, #4]
				PROJECTILE_INFO_RxEventCallback(shoot_data.bullet_type, shoot_data.shooter_number, shoot_data.launching_frequency,shoot_data.initial_speed);
 800176e:	4b0c      	ldr	r3, [pc, #48]	@ (80017a0 <HAL_UARTEx_RxEventCallback+0x934>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4a0b      	ldr	r2, [pc, #44]	@ (80017a0 <HAL_UARTEx_RxEventCallback+0x934>)
 8001774:	7851      	ldrb	r1, [r2, #1]
 8001776:	4a0a      	ldr	r2, [pc, #40]	@ (80017a0 <HAL_UARTEx_RxEventCallback+0x934>)
 8001778:	7892      	ldrb	r2, [r2, #2]
 800177a:	4809      	ldr	r0, [pc, #36]	@ (80017a0 <HAL_UARTEx_RxEventCallback+0x934>)
 800177c:	edd0 7a01 	vldr	s15, [r0, #4]
 8001780:	eeb0 0a67 	vmov.f32	s0, s15
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fcb7 	bl	80020f8 <PROJECTILE_INFO_RxEventCallback>
				break;
 800178a:	e3b5      	b.n	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
 800178c:	200002e4 	.word	0x200002e4
 8001790:	200002f4 	.word	0x200002f4
 8001794:	200002fc 	.word	0x200002fc
 8001798:	20000308 	.word	0x20000308
 800179c:	20000310 	.word	0x20000310
 80017a0:	20000314 	.word	0x20000314
			}
			case PROJECTILE_ALLOWANCE_HEADER : {
				memcpy(&projectile_allowance.projectile_allowance_17mm,&data[0],2);
 80017a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001968 <HAL_UARTEx_RxEventCallback+0xafc>)
 80017ac:	801a      	strh	r2, [r3, #0]
				memcpy(&projectile_allowance.projectile_allowance_42mm,&data[2],2);
 80017ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017b0:	3302      	adds	r3, #2
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001968 <HAL_UARTEx_RxEventCallback+0xafc>)
 80017b8:	805a      	strh	r2, [r3, #2]
				memcpy(&projectile_allowance.remaining_gold_coin,&data[4],2);
 80017ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017bc:	3304      	adds	r3, #4
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	4b69      	ldr	r3, [pc, #420]	@ (8001968 <HAL_UARTEx_RxEventCallback+0xafc>)
 80017c4:	809a      	strh	r2, [r3, #4]
				PROJECTILE_ALLOWANCE_RxEventCallback(projectile_allowance.projectile_allowance_17mm, projectile_allowance.projectile_allowance_42mm, projectile_allowance.remaining_gold_coin);
 80017c6:	4b68      	ldr	r3, [pc, #416]	@ (8001968 <HAL_UARTEx_RxEventCallback+0xafc>)
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	4a67      	ldr	r2, [pc, #412]	@ (8001968 <HAL_UARTEx_RxEventCallback+0xafc>)
 80017cc:	8851      	ldrh	r1, [r2, #2]
 80017ce:	4a66      	ldr	r2, [pc, #408]	@ (8001968 <HAL_UARTEx_RxEventCallback+0xafc>)
 80017d0:	8892      	ldrh	r2, [r2, #4]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 fca1 	bl	800211a <PROJECTILE_ALLOWANCE_RxEventCallback>
				break;
 80017d8:	e38e      	b.n	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
			}
			case RFID_HEADER : {
				memcpy(&rfid_status.rfid_status,data,4);
 80017da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	4b62      	ldr	r3, [pc, #392]	@ (800196c <HAL_UARTEx_RxEventCallback+0xb00>)
 80017e2:	601a      	str	r2, [r3, #0]
				RFID_RxEventCallback(rfid_status.rfid_status);
 80017e4:	4b61      	ldr	r3, [pc, #388]	@ (800196c <HAL_UARTEx_RxEventCallback+0xb00>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 fca5 	bl	8002138 <RFID_RxEventCallback>
				break;
 80017ee:	e383      	b.n	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
			}
			case DART_COMMAND_HEADER : {
				memcpy(&dart_client_cmd.dart_launch_opening_status,&data[0],1);
 80017f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017f2:	781a      	ldrb	r2, [r3, #0]
 80017f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001970 <HAL_UARTEx_RxEventCallback+0xb04>)
 80017f6:	701a      	strb	r2, [r3, #0]
				memcpy(&dart_client_cmd.target_change_remaining_time,&data[2],2);
 80017f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017fa:	3302      	adds	r3, #2
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	b29a      	uxth	r2, r3
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <HAL_UARTEx_RxEventCallback+0xb04>)
 8001802:	805a      	strh	r2, [r3, #2]
				memcpy(&dart_client_cmd.latest_launch_cmd_remaining_time,&data[4],2);
 8001804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001806:	3304      	adds	r3, #4
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	b29a      	uxth	r2, r3
 800180c:	4b58      	ldr	r3, [pc, #352]	@ (8001970 <HAL_UARTEx_RxEventCallback+0xb04>)
 800180e:	809a      	strh	r2, [r3, #4]
				DART_COMMAND_RxEventCallback(dart_client_cmd.dart_launch_opening_status, dart_client_cmd.target_change_remaining_time, dart_client_cmd.latest_launch_cmd_remaining_time);
 8001810:	4b57      	ldr	r3, [pc, #348]	@ (8001970 <HAL_UARTEx_RxEventCallback+0xb04>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4a56      	ldr	r2, [pc, #344]	@ (8001970 <HAL_UARTEx_RxEventCallback+0xb04>)
 8001816:	8851      	ldrh	r1, [r2, #2]
 8001818:	4a55      	ldr	r2, [pc, #340]	@ (8001970 <HAL_UARTEx_RxEventCallback+0xb04>)
 800181a:	8892      	ldrh	r2, [r2, #4]
 800181c:	4618      	mov	r0, r3
 800181e:	f000 fc95 	bl	800214c <DART_COMMAND_RxEventCallback>
				break;
 8001822:	e369      	b.n	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
			}
			case TEAM_POSITION_HEADER : {
				memcpy(&robot_positions.hero_x,&data[0],4);
 8001824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b52      	ldr	r3, [pc, #328]	@ (8001974 <HAL_UARTEx_RxEventCallback+0xb08>)
 800182c:	601a      	str	r2, [r3, #0]
				memcpy(&robot_positions.hero_y,&data[4],4);
 800182e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001830:	3304      	adds	r3, #4
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b4f      	ldr	r3, [pc, #316]	@ (8001974 <HAL_UARTEx_RxEventCallback+0xb08>)
 8001838:	605a      	str	r2, [r3, #4]
				memcpy(&robot_positions.engineer_x,&data[8],4);
 800183a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800183c:	3308      	adds	r3, #8
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b4c      	ldr	r3, [pc, #304]	@ (8001974 <HAL_UARTEx_RxEventCallback+0xb08>)
 8001844:	609a      	str	r2, [r3, #8]
				memcpy(&robot_positions.engineer_y,&data[12],4);
 8001846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001848:	330c      	adds	r3, #12
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b49      	ldr	r3, [pc, #292]	@ (8001974 <HAL_UARTEx_RxEventCallback+0xb08>)
 8001850:	60da      	str	r2, [r3, #12]
				memcpy(&robot_positions.standard_3_x,&data[16],4);
 8001852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001854:	3310      	adds	r3, #16
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	4b46      	ldr	r3, [pc, #280]	@ (8001974 <HAL_UARTEx_RxEventCallback+0xb08>)
 800185c:	611a      	str	r2, [r3, #16]
				memcpy(&robot_positions.standard_3_y,&data[20],4);
 800185e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001860:	3314      	adds	r3, #20
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	4b43      	ldr	r3, [pc, #268]	@ (8001974 <HAL_UARTEx_RxEventCallback+0xb08>)
 8001868:	615a      	str	r2, [r3, #20]
				memcpy(&robot_positions.standard_4_x,&data[24],4);
 800186a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800186c:	3318      	adds	r3, #24
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	4b40      	ldr	r3, [pc, #256]	@ (8001974 <HAL_UARTEx_RxEventCallback+0xb08>)
 8001874:	619a      	str	r2, [r3, #24]
				memcpy(&robot_positions.standard_4_y,&data[28],4);
 8001876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001878:	331c      	adds	r3, #28
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b3d      	ldr	r3, [pc, #244]	@ (8001974 <HAL_UARTEx_RxEventCallback+0xb08>)
 8001880:	61da      	str	r2, [r3, #28]
				TEAM_POSITION_RxEventCallback(robot_positions.hero_x, robot_positions.hero_y, robot_positions.engineer_x, robot_positions.engineer_y, robot_positions.standard_3_x, robot_positions.standard_3_y, robot_positions.standard_4_x, robot_positions.standard_4_y, robot_positions.standard_5_x, robot_positions.standard_5_y);
 8001882:	4b3c      	ldr	r3, [pc, #240]	@ (8001974 <HAL_UARTEx_RxEventCallback+0xb08>)
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	4b3a      	ldr	r3, [pc, #232]	@ (8001974 <HAL_UARTEx_RxEventCallback+0xb08>)
 800188a:	ed93 7a01 	vldr	s14, [r3, #4]
 800188e:	4b39      	ldr	r3, [pc, #228]	@ (8001974 <HAL_UARTEx_RxEventCallback+0xb08>)
 8001890:	edd3 6a02 	vldr	s13, [r3, #8]
 8001894:	4b37      	ldr	r3, [pc, #220]	@ (8001974 <HAL_UARTEx_RxEventCallback+0xb08>)
 8001896:	ed93 6a03 	vldr	s12, [r3, #12]
 800189a:	4b36      	ldr	r3, [pc, #216]	@ (8001974 <HAL_UARTEx_RxEventCallback+0xb08>)
 800189c:	edd3 5a04 	vldr	s11, [r3, #16]
 80018a0:	4b34      	ldr	r3, [pc, #208]	@ (8001974 <HAL_UARTEx_RxEventCallback+0xb08>)
 80018a2:	ed93 5a05 	vldr	s10, [r3, #20]
 80018a6:	4b33      	ldr	r3, [pc, #204]	@ (8001974 <HAL_UARTEx_RxEventCallback+0xb08>)
 80018a8:	ed93 3a06 	vldr	s6, [r3, #24]
 80018ac:	4b31      	ldr	r3, [pc, #196]	@ (8001974 <HAL_UARTEx_RxEventCallback+0xb08>)
 80018ae:	edd3 3a07 	vldr	s7, [r3, #28]
 80018b2:	4b30      	ldr	r3, [pc, #192]	@ (8001974 <HAL_UARTEx_RxEventCallback+0xb08>)
 80018b4:	ed93 4a08 	vldr	s8, [r3, #32]
 80018b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001974 <HAL_UARTEx_RxEventCallback+0xb08>)
 80018ba:	edd3 4a09 	vldr	s9, [r3, #36]	@ 0x24
 80018be:	eef0 2a45 	vmov.f32	s5, s10
 80018c2:	eeb0 2a65 	vmov.f32	s4, s11
 80018c6:	eef0 1a46 	vmov.f32	s3, s12
 80018ca:	eeb0 1a66 	vmov.f32	s2, s13
 80018ce:	eef0 0a47 	vmov.f32	s1, s14
 80018d2:	eeb0 0a67 	vmov.f32	s0, s15
 80018d6:	f000 fc48 	bl	800216a <TEAM_POSITION_RxEventCallback>
				break;
 80018da:	e30d      	b.n	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
			}
			case RADAR_MARKING_HEADER : {
				radar_mark_data.mark_hero_progress = getBits(data[0],0,1);
 80018dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2201      	movs	r2, #1
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 fb17 	bl	8001f18 <getBits>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b22      	ldr	r3, [pc, #136]	@ (8001978 <HAL_UARTEx_RxEventCallback+0xb0c>)
 80018f0:	701a      	strb	r2, [r3, #0]
				radar_mark_data.mark_engineer_progress = getBits(data[0],1,1);
 80018f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2201      	movs	r2, #1
 80018f8:	2101      	movs	r1, #1
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 fb0c 	bl	8001f18 <getBits>
 8001900:	4603      	mov	r3, r0
 8001902:	461a      	mov	r2, r3
 8001904:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8001906:	705a      	strb	r2, [r3, #1]
				radar_mark_data.mark_standard_3_progress = getBits(data[0],2,1);
 8001908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2201      	movs	r2, #1
 800190e:	2102      	movs	r1, #2
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fb01 	bl	8001f18 <getBits>
 8001916:	4603      	mov	r3, r0
 8001918:	461a      	mov	r2, r3
 800191a:	4b17      	ldr	r3, [pc, #92]	@ (8001978 <HAL_UARTEx_RxEventCallback+0xb0c>)
 800191c:	709a      	strb	r2, [r3, #2]
				radar_mark_data.mark_standard_4_progress = getBits(data[0],3,1);
 800191e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2201      	movs	r2, #1
 8001924:	2103      	movs	r1, #3
 8001926:	4618      	mov	r0, r3
 8001928:	f000 faf6 	bl	8001f18 <getBits>
 800192c:	4603      	mov	r3, r0
 800192e:	461a      	mov	r2, r3
 8001930:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8001932:	70da      	strb	r2, [r3, #3]
				radar_mark_data.mark_sentry_progress = getBits(data[0],4,1);
 8001934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2201      	movs	r2, #1
 800193a:	2104      	movs	r1, #4
 800193c:	4618      	mov	r0, r3
 800193e:	f000 faeb 	bl	8001f18 <getBits>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8001948:	711a      	strb	r2, [r3, #4]
				RADAR_MARKING_RxEventCallback(radar_mark_data.mark_hero_progress, radar_mark_data.mark_engineer_progress, radar_mark_data.mark_standard_3_progress, radar_mark_data.mark_standard_4_progress, radar_mark_data.mark_sentry_progress);
 800194a:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <HAL_UARTEx_RxEventCallback+0xb0c>)
 800194c:	7818      	ldrb	r0, [r3, #0]
 800194e:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8001950:	7859      	ldrb	r1, [r3, #1]
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8001954:	789a      	ldrb	r2, [r3, #2]
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8001958:	78dc      	ldrb	r4, [r3, #3]
 800195a:	4b07      	ldr	r3, [pc, #28]	@ (8001978 <HAL_UARTEx_RxEventCallback+0xb0c>)
 800195c:	791b      	ldrb	r3, [r3, #4]
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	4623      	mov	r3, r4
 8001962:	f000 fc1f 	bl	80021a4 <RADAR_MARKING_RxEventCallback>
				break;
 8001966:	e2c7      	b.n	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
 8001968:	2000031c 	.word	0x2000031c
 800196c:	20000324 	.word	0x20000324
 8001970:	20000328 	.word	0x20000328
 8001974:	20000330 	.word	0x20000330
 8001978:	20000358 	.word	0x20000358
			}
			case SENTRY_HEADER : {
				uint8_t exchanged_projectiles_buff[2] = {data[0],getBits(data[1],0,3)};
 800197c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8001984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001986:	785b      	ldrb	r3, [r3, #1]
 8001988:	2203      	movs	r2, #3
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f000 fac3 	bl	8001f18 <getBits>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
				memcpy(&sentry_info.exchanged_projectiles,&exchanged_projectiles_buff,2);
 8001998:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800199c:	4b88      	ldr	r3, [pc, #544]	@ (8001bc0 <HAL_UARTEx_RxEventCallback+0xd54>)
 800199e:	801a      	strh	r2, [r3, #0]
				sentry_info.projectile_exchange_count = getBits(data[1],3,4);
 80019a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019a2:	785b      	ldrb	r3, [r3, #1]
 80019a4:	2204      	movs	r2, #4
 80019a6:	2103      	movs	r1, #3
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 fab5 	bl	8001f18 <getBits>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b83      	ldr	r3, [pc, #524]	@ (8001bc0 <HAL_UARTEx_RxEventCallback+0xd54>)
 80019b4:	709a      	strb	r2, [r3, #2]
				sentry_info.HP_exchange_count = getBits(data[1],7,1) | (getBits(data[2],0,3)<<1);
 80019b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b8:	785b      	ldrb	r3, [r3, #1]
 80019ba:	2201      	movs	r2, #1
 80019bc:	2107      	movs	r1, #7
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 faaa 	bl	8001f18 <getBits>
 80019c4:	4603      	mov	r3, r0
 80019c6:	b25c      	sxtb	r4, r3
 80019c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ca:	789b      	ldrb	r3, [r3, #2]
 80019cc:	2203      	movs	r2, #3
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 faa1 	bl	8001f18 <getBits>
 80019d6:	4603      	mov	r3, r0
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	b25b      	sxtb	r3, r3
 80019de:	4323      	orrs	r3, r4
 80019e0:	b25b      	sxtb	r3, r3
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	4b76      	ldr	r3, [pc, #472]	@ (8001bc0 <HAL_UARTEx_RxEventCallback+0xd54>)
 80019e6:	70da      	strb	r2, [r3, #3]
				sentry_info.confirm_free_respawn = getBits(data[2],3,1);
 80019e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ea:	789b      	ldrb	r3, [r3, #2]
 80019ec:	2201      	movs	r2, #1
 80019ee:	2103      	movs	r1, #3
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 fa91 	bl	8001f18 <getBits>
 80019f6:	4603      	mov	r3, r0
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b71      	ldr	r3, [pc, #452]	@ (8001bc0 <HAL_UARTEx_RxEventCallback+0xd54>)
 80019fc:	711a      	strb	r2, [r3, #4]
				sentry_info.instant_respawn_available = getBits(data[2],4,1);
 80019fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a00:	789b      	ldrb	r3, [r3, #2]
 8001a02:	2201      	movs	r2, #1
 8001a04:	2104      	movs	r1, #4
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 fa86 	bl	8001f18 <getBits>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b6b      	ldr	r3, [pc, #428]	@ (8001bc0 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001a12:	715a      	strb	r2, [r3, #5]
				uint8_t instant_respawn_cost_buff[2] = {getBits(data[2],5,3)| (getBits(data[3],0,5)<<3),getBits(data[3],5,2)};
 8001a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a16:	789b      	ldrb	r3, [r3, #2]
 8001a18:	2203      	movs	r2, #3
 8001a1a:	2105      	movs	r1, #5
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fa7b 	bl	8001f18 <getBits>
 8001a22:	4603      	mov	r3, r0
 8001a24:	b25c      	sxtb	r4, r3
 8001a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a28:	78db      	ldrb	r3, [r3, #3]
 8001a2a:	2205      	movs	r2, #5
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 fa72 	bl	8001f18 <getBits>
 8001a34:	4603      	mov	r3, r0
 8001a36:	b25b      	sxtb	r3, r3
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	b25b      	sxtb	r3, r3
 8001a3c:	4323      	orrs	r3, r4
 8001a3e:	b25b      	sxtb	r3, r3
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 8001a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a48:	78db      	ldrb	r3, [r3, #3]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	2105      	movs	r1, #5
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 fa62 	bl	8001f18 <getBits>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
				memcpy(&sentry_info.instant_respawn_cost,instant_respawn_cost_buff,2);
 8001a5a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001a5e:	4b58      	ldr	r3, [pc, #352]	@ (8001bc0 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001a60:	80da      	strh	r2, [r3, #6]
				sentry_info.in_combat = getBits(data[4],0,1);
 8001a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a64:	791b      	ldrb	r3, [r3, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 fa54 	bl	8001f18 <getBits>
 8001a70:	4603      	mov	r3, r0
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b52      	ldr	r3, [pc, #328]	@ (8001bc0 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001a76:	721a      	strb	r2, [r3, #8]
				uint8_t remaining_allowance_to_exchange_buff[2] = {getBits(data[4],1,7)|(getBits(data[5],0,1)<<7),getBits(data[5],1,3)};
 8001a78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a7a:	791b      	ldrb	r3, [r3, #4]
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	2101      	movs	r1, #1
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 fa49 	bl	8001f18 <getBits>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b25c      	sxtb	r4, r3
 8001a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a8c:	795b      	ldrb	r3, [r3, #5]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fa40 	bl	8001f18 <getBits>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	01db      	lsls	r3, r3, #7
 8001a9e:	b25b      	sxtb	r3, r3
 8001aa0:	4323      	orrs	r3, r4
 8001aa2:	b25b      	sxtb	r3, r3
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8001aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aac:	795b      	ldrb	r3, [r3, #5]
 8001aae:	2203      	movs	r2, #3
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 fa30 	bl	8001f18 <getBits>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
				memcpy(&sentry_info.remaining_allowance_to_exchange,remaining_allowance_to_exchange_buff,2);
 8001abe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8001ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8001bc0 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001ac4:	815a      	strh	r2, [r3, #10]
				SENTRY_RxEventCallback(sentry_info.exchanged_projectiles, sentry_info.projectile_exchange_count, sentry_info.HP_exchange_count, sentry_info.confirm_free_respawn, sentry_info.instant_respawn_available, sentry_info.instant_respawn_cost, sentry_info.in_combat, sentry_info.remaining_allowance_to_exchange);
 8001ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8001bc0 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001ac8:	881c      	ldrh	r4, [r3, #0]
 8001aca:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc0 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001acc:	789d      	ldrb	r5, [r3, #2]
 8001ace:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc0 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001ad0:	78de      	ldrb	r6, [r3, #3]
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc0 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001ad4:	f893 c004 	ldrb.w	ip, [r3, #4]
 8001ad8:	4b39      	ldr	r3, [pc, #228]	@ (8001bc0 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001ada:	795b      	ldrb	r3, [r3, #5]
 8001adc:	4a38      	ldr	r2, [pc, #224]	@ (8001bc0 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001ade:	88d2      	ldrh	r2, [r2, #6]
 8001ae0:	4937      	ldr	r1, [pc, #220]	@ (8001bc0 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001ae2:	7a09      	ldrb	r1, [r1, #8]
 8001ae4:	4836      	ldr	r0, [pc, #216]	@ (8001bc0 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001ae6:	8940      	ldrh	r0, [r0, #10]
 8001ae8:	9003      	str	r0, [sp, #12]
 8001aea:	9102      	str	r1, [sp, #8]
 8001aec:	9201      	str	r2, [sp, #4]
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	4663      	mov	r3, ip
 8001af2:	4632      	mov	r2, r6
 8001af4:	4629      	mov	r1, r5
 8001af6:	4620      	mov	r0, r4
 8001af8:	f000 fb68 	bl	80021cc <SENTRY_RxEventCallback>
				break;
 8001afc:	e1fc      	b.n	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
			}
			case RADAR_BUFF_HEADER : {
				radar_info.double_vulnerability_chances = getBits(data[0],0,1);
 8001afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2201      	movs	r2, #1
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 fa06 	bl	8001f18 <getBits>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc4 <HAL_UARTEx_RxEventCallback+0xd58>)
 8001b12:	701a      	strb	r2, [r3, #0]
				radar_info.double_vulnerability_triggered = getBits(data[0],1,1);
 8001b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 f9fb 	bl	8001f18 <getBits>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b27      	ldr	r3, [pc, #156]	@ (8001bc4 <HAL_UARTEx_RxEventCallback+0xd58>)
 8001b28:	705a      	strb	r2, [r3, #1]
				RADAR_BUFF_RxEventCallback(radar_info.double_vulnerability_chances, radar_info.double_vulnerability_triggered);
 8001b2a:	4b26      	ldr	r3, [pc, #152]	@ (8001bc4 <HAL_UARTEx_RxEventCallback+0xd58>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	4a25      	ldr	r2, [pc, #148]	@ (8001bc4 <HAL_UARTEx_RxEventCallback+0xd58>)
 8001b30:	7852      	ldrb	r2, [r2, #1]
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 fb5d 	bl	80021f4 <RADAR_BUFF_RxEventCallback>
				break;
 8001b3a:	e1dd      	b.n	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
				break;
			}
			//end of unfinished

			case CUSTOM_CONTROLLER_ROBOT_HEADER : {
				memcpy(&custom_controller_robot.custom_data,data,30);
 8001b3c:	4a22      	ldr	r2, [pc, #136]	@ (8001bc8 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8001b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b40:	4614      	mov	r4, r2
 8001b42:	461d      	mov	r5, r3
 8001b44:	6828      	ldr	r0, [r5, #0]
 8001b46:	6869      	ldr	r1, [r5, #4]
 8001b48:	68aa      	ldr	r2, [r5, #8]
 8001b4a:	68eb      	ldr	r3, [r5, #12]
 8001b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b4e:	6928      	ldr	r0, [r5, #16]
 8001b50:	6969      	ldr	r1, [r5, #20]
 8001b52:	69aa      	ldr	r2, [r5, #24]
 8001b54:	c407      	stmia	r4!, {r0, r1, r2}
 8001b56:	8bab      	ldrh	r3, [r5, #28]
 8001b58:	8023      	strh	r3, [r4, #0]
				CUSTOM_CONTROLLER_ROBOT_RxEventCallback(custom_controller_robot.custom_data);
 8001b5a:	481b      	ldr	r0, [pc, #108]	@ (8001bc8 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8001b5c:	f000 fb58 	bl	8002210 <CUSTOM_CONTROLLER_ROBOT_RxEventCallback>
				break;
 8001b60:	e1ca      	b.n	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
			}
			case MINIMAP_COMMAND_HEADER : {
				memcpy(&map_command.target_position_x,&data[0],4);
 8001b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b18      	ldr	r3, [pc, #96]	@ (8001bcc <HAL_UARTEx_RxEventCallback+0xd60>)
 8001b6a:	601a      	str	r2, [r3, #0]
				memcpy(&map_command.target_position_y,&data[4],4);
 8001b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b6e:	3304      	adds	r3, #4
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <HAL_UARTEx_RxEventCallback+0xd60>)
 8001b76:	605a      	str	r2, [r3, #4]
				memcpy(&map_command.cmd_keyboard,&data[8],1);
 8001b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b7a:	3308      	adds	r3, #8
 8001b7c:	781a      	ldrb	r2, [r3, #0]
 8001b7e:	4b13      	ldr	r3, [pc, #76]	@ (8001bcc <HAL_UARTEx_RxEventCallback+0xd60>)
 8001b80:	721a      	strb	r2, [r3, #8]
				memcpy(&map_command.target_robot_id,&data[9],1);
 8001b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b84:	3309      	adds	r3, #9
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <HAL_UARTEx_RxEventCallback+0xd60>)
 8001b8a:	725a      	strb	r2, [r3, #9]
				memcpy(&map_command.cmd_source,&data[10],2);
 8001b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b8e:	330a      	adds	r3, #10
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	4b0d      	ldr	r3, [pc, #52]	@ (8001bcc <HAL_UARTEx_RxEventCallback+0xd60>)
 8001b96:	815a      	strh	r2, [r3, #10]
				MINIMAP_COMMAND_RxEventCallback(map_command.target_position_x, map_command.target_position_y, map_command.cmd_keyboard, map_command.target_robot_id, map_command.cmd_source);
 8001b98:	4b0c      	ldr	r3, [pc, #48]	@ (8001bcc <HAL_UARTEx_RxEventCallback+0xd60>)
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bcc <HAL_UARTEx_RxEventCallback+0xd60>)
 8001ba0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ba4:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <HAL_UARTEx_RxEventCallback+0xd60>)
 8001ba6:	7a1b      	ldrb	r3, [r3, #8]
 8001ba8:	4a08      	ldr	r2, [pc, #32]	@ (8001bcc <HAL_UARTEx_RxEventCallback+0xd60>)
 8001baa:	7a51      	ldrb	r1, [r2, #9]
 8001bac:	4a07      	ldr	r2, [pc, #28]	@ (8001bcc <HAL_UARTEx_RxEventCallback+0xd60>)
 8001bae:	8952      	ldrh	r2, [r2, #10]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	eef0 0a47 	vmov.f32	s1, s14
 8001bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bba:	f000 fb33 	bl	8002224 <MINIMAP_COMMAND_RxEventCallback>
				break;
 8001bbe:	e19b      	b.n	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
 8001bc0:	20000360 	.word	0x20000360
 8001bc4:	2000036c 	.word	0x2000036c
 8001bc8:	20000404 	.word	0x20000404
 8001bcc:	20000370 	.word	0x20000370
			}
			case PC_CONTROL_HEADER : {
				memcpy(&pc_control.mouse_x,&data[0],2);
 8001bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	4b94      	ldr	r3, [pc, #592]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001bd8:	801a      	strh	r2, [r3, #0]
				memcpy(&pc_control.mouse_y,&data[2],2);
 8001bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bdc:	3302      	adds	r3, #2
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	4b91      	ldr	r3, [pc, #580]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001be4:	805a      	strh	r2, [r3, #2]
				memcpy(&pc_control.mouse_z,&data[4],2);
 8001be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be8:	3304      	adds	r3, #4
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	4b8e      	ldr	r3, [pc, #568]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001bf0:	809a      	strh	r2, [r3, #4]
				memcpy(&pc_control.left_button_down,&data[6],1);
 8001bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf4:	3306      	adds	r3, #6
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	4b8b      	ldr	r3, [pc, #556]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001bfa:	719a      	strb	r2, [r3, #6]
				memcpy(&pc_control.right_button_down,&data[7],1);
 8001bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bfe:	3307      	adds	r3, #7
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	4b89      	ldr	r3, [pc, #548]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001c04:	71da      	strb	r2, [r3, #7]
				pc_control.w = getBits(data[8],0,1);
 8001c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c08:	7a1b      	ldrb	r3, [r3, #8]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f982 	bl	8001f18 <getBits>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b83      	ldr	r3, [pc, #524]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001c1a:	731a      	strb	r2, [r3, #12]
				pc_control.s = getBits(data[8],1,1);
 8001c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c1e:	7a1b      	ldrb	r3, [r3, #8]
 8001c20:	2201      	movs	r2, #1
 8001c22:	2101      	movs	r1, #1
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 f977 	bl	8001f18 <getBits>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b7e      	ldr	r3, [pc, #504]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001c30:	735a      	strb	r2, [r3, #13]
				pc_control.a = getBits(data[8],2,1);
 8001c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c34:	7a1b      	ldrb	r3, [r3, #8]
 8001c36:	2201      	movs	r2, #1
 8001c38:	2102      	movs	r1, #2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f96c 	bl	8001f18 <getBits>
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b78      	ldr	r3, [pc, #480]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001c46:	739a      	strb	r2, [r3, #14]
				pc_control.d = getBits(data[8],3,1);
 8001c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c4a:	7a1b      	ldrb	r3, [r3, #8]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	2103      	movs	r1, #3
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 f961 	bl	8001f18 <getBits>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b73      	ldr	r3, [pc, #460]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001c5c:	73da      	strb	r2, [r3, #15]
				pc_control.shift = getBits(data[8],4,1);
 8001c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c60:	7a1b      	ldrb	r3, [r3, #8]
 8001c62:	2201      	movs	r2, #1
 8001c64:	2104      	movs	r1, #4
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f956 	bl	8001f18 <getBits>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b6d      	ldr	r3, [pc, #436]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001c72:	741a      	strb	r2, [r3, #16]
				pc_control.ctrl = getBits(data[8],5,1);
 8001c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c76:	7a1b      	ldrb	r3, [r3, #8]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	2105      	movs	r1, #5
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 f94b 	bl	8001f18 <getBits>
 8001c82:	4603      	mov	r3, r0
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b68      	ldr	r3, [pc, #416]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001c88:	745a      	strb	r2, [r3, #17]
				pc_control.q = getBits(data[8],6,1);
 8001c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c8c:	7a1b      	ldrb	r3, [r3, #8]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	2106      	movs	r1, #6
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f940 	bl	8001f18 <getBits>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b62      	ldr	r3, [pc, #392]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001c9e:	749a      	strb	r2, [r3, #18]
				pc_control.e = getBits(data[8],7,1);
 8001ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca2:	7a1b      	ldrb	r3, [r3, #8]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2107      	movs	r1, #7
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 f935 	bl	8001f18 <getBits>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b5d      	ldr	r3, [pc, #372]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001cb4:	74da      	strb	r2, [r3, #19]
				pc_control.r = getBits(data[9],0,1);
 8001cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb8:	7a5b      	ldrb	r3, [r3, #9]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f92a 	bl	8001f18 <getBits>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b57      	ldr	r3, [pc, #348]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001cca:	751a      	strb	r2, [r3, #20]
				pc_control.f = getBits(data[9],1,1);
 8001ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cce:	7a5b      	ldrb	r3, [r3, #9]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 f91f 	bl	8001f18 <getBits>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b52      	ldr	r3, [pc, #328]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001ce0:	755a      	strb	r2, [r3, #21]
				pc_control.g = getBits(data[9],2,1);
 8001ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce4:	7a5b      	ldrb	r3, [r3, #9]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	2102      	movs	r1, #2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f914 	bl	8001f18 <getBits>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4b4c      	ldr	r3, [pc, #304]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001cf6:	759a      	strb	r2, [r3, #22]
				pc_control.z = getBits(data[9],3,1);
 8001cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cfa:	7a5b      	ldrb	r3, [r3, #9]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	2103      	movs	r1, #3
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 f909 	bl	8001f18 <getBits>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b47      	ldr	r3, [pc, #284]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001d0c:	75da      	strb	r2, [r3, #23]
				pc_control.x = getBits(data[9],4,1);
 8001d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d10:	7a5b      	ldrb	r3, [r3, #9]
 8001d12:	2201      	movs	r2, #1
 8001d14:	2104      	movs	r1, #4
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f8fe 	bl	8001f18 <getBits>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b41      	ldr	r3, [pc, #260]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001d22:	761a      	strb	r2, [r3, #24]
				pc_control.c = getBits(data[9],5,1);
 8001d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d26:	7a5b      	ldrb	r3, [r3, #9]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	2105      	movs	r1, #5
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 f8f3 	bl	8001f18 <getBits>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b3c      	ldr	r3, [pc, #240]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001d38:	765a      	strb	r2, [r3, #25]
				pc_control.v = getBits(data[9],6,1);
 8001d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d3c:	7a5b      	ldrb	r3, [r3, #9]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	2106      	movs	r1, #6
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f8e8 	bl	8001f18 <getBits>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b36      	ldr	r3, [pc, #216]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001d4e:	769a      	strb	r2, [r3, #26]
				pc_control.b = getBits(data[9],7,1);
 8001d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d52:	7a5b      	ldrb	r3, [r3, #9]
 8001d54:	2201      	movs	r2, #1
 8001d56:	2107      	movs	r1, #7
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 f8dd 	bl	8001f18 <getBits>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b31      	ldr	r3, [pc, #196]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001d64:	76da      	strb	r2, [r3, #27]
				PC_CONTROL_RxEventCallback(pc_control.mouse_x,pc_control.mouse_y,pc_control.mouse_z,pc_control.left_button_down,pc_control.right_button_down,pc_control.w,pc_control.s,pc_control.a,pc_control.d,pc_control.shift,pc_control.ctrl,pc_control.q,pc_control.e,pc_control.r,pc_control.f,pc_control.g,pc_control.z,pc_control.x,pc_control.c,pc_control.v,pc_control.b);
 8001d66:	4b30      	ldr	r3, [pc, #192]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001d68:	f9b3 c000 	ldrsh.w	ip, [r3]
 8001d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001d6e:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8001d72:	4b2d      	ldr	r3, [pc, #180]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001d74:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 8001d78:	4b2b      	ldr	r3, [pc, #172]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001d7a:	f893 9006 	ldrb.w	r9, [r3, #6]
 8001d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001d80:	79db      	ldrb	r3, [r3, #7]
 8001d82:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d84:	4b28      	ldr	r3, [pc, #160]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001d86:	7b1a      	ldrb	r2, [r3, #12]
 8001d88:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001d8a:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001d8c:	7b59      	ldrb	r1, [r3, #13]
 8001d8e:	6279      	str	r1, [r7, #36]	@ 0x24
 8001d90:	4b25      	ldr	r3, [pc, #148]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001d92:	7b98      	ldrb	r0, [r3, #14]
 8001d94:	6238      	str	r0, [r7, #32]
 8001d96:	4b24      	ldr	r3, [pc, #144]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001d98:	7bdc      	ldrb	r4, [r3, #15]
 8001d9a:	61fc      	str	r4, [r7, #28]
 8001d9c:	4b22      	ldr	r3, [pc, #136]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001d9e:	7c1d      	ldrb	r5, [r3, #16]
 8001da0:	61bd      	str	r5, [r7, #24]
 8001da2:	4b21      	ldr	r3, [pc, #132]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001da4:	7c5e      	ldrb	r6, [r3, #17]
 8001da6:	617e      	str	r6, [r7, #20]
 8001da8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001daa:	f893 b012 	ldrb.w	fp, [r3, #18]
 8001dae:	465b      	mov	r3, fp
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001db4:	f893 b013 	ldrb.w	fp, [r3, #19]
 8001db8:	465a      	mov	r2, fp
 8001dba:	60fa      	str	r2, [r7, #12]
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001dbe:	f893 b014 	ldrb.w	fp, [r3, #20]
 8001dc2:	4659      	mov	r1, fp
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	4b18      	ldr	r3, [pc, #96]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001dc8:	7d5e      	ldrb	r6, [r3, #21]
 8001dca:	4b17      	ldr	r3, [pc, #92]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001dcc:	7d9d      	ldrb	r5, [r3, #22]
 8001dce:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001dd0:	7ddc      	ldrb	r4, [r3, #23]
 8001dd2:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001dd4:	7e18      	ldrb	r0, [r3, #24]
 8001dd6:	4b14      	ldr	r3, [pc, #80]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001dd8:	7e59      	ldrb	r1, [r3, #25]
 8001dda:	4b13      	ldr	r3, [pc, #76]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001ddc:	7e9a      	ldrb	r2, [r3, #26]
 8001dde:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <HAL_UARTEx_RxEventCallback+0xfbc>)
 8001de0:	7edb      	ldrb	r3, [r3, #27]
 8001de2:	9310      	str	r3, [sp, #64]	@ 0x40
 8001de4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8001de6:	910e      	str	r1, [sp, #56]	@ 0x38
 8001de8:	900d      	str	r0, [sp, #52]	@ 0x34
 8001dea:	940c      	str	r4, [sp, #48]	@ 0x30
 8001dec:	950b      	str	r5, [sp, #44]	@ 0x2c
 8001dee:	960a      	str	r6, [sp, #40]	@ 0x28
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	9109      	str	r1, [sp, #36]	@ 0x24
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	9208      	str	r2, [sp, #32]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	9307      	str	r3, [sp, #28]
 8001dfc:	697e      	ldr	r6, [r7, #20]
 8001dfe:	9606      	str	r6, [sp, #24]
 8001e00:	69bd      	ldr	r5, [r7, #24]
 8001e02:	9505      	str	r5, [sp, #20]
 8001e04:	69fc      	ldr	r4, [r7, #28]
 8001e06:	9404      	str	r4, [sp, #16]
 8001e08:	6a38      	ldr	r0, [r7, #32]
 8001e0a:	9003      	str	r0, [sp, #12]
 8001e0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e0e:	9102      	str	r1, [sp, #8]
 8001e10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e12:	9201      	str	r2, [sp, #4]
 8001e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	464b      	mov	r3, r9
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	4671      	mov	r1, lr
 8001e1e:	4660      	mov	r0, ip
 8001e20:	f000 fa13 	bl	800224a <PC_CONTROL_RxEventCallback>
				break;
 8001e24:	e068      	b.n	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
 8001e26:	bf00      	nop
 8001e28:	200003e8 	.word	0x200003e8
			}
			case CUSTOM_CONTROLLER_CLIENT_HEADER : {
				break;
			}
			case MINIMAP_DATA_HEADER : {
				memcpy(&map_data.intention,&data[0],1);
 8001e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e2e:	781a      	ldrb	r2, [r3, #0]
 8001e30:	4b35      	ldr	r3, [pc, #212]	@ (8001f08 <HAL_UARTEx_RxEventCallback+0x109c>)
 8001e32:	701a      	strb	r2, [r3, #0]
				memcpy(&map_data.start_position_x,&data[1],2);
 8001e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e36:	3301      	adds	r3, #1
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	4b32      	ldr	r3, [pc, #200]	@ (8001f08 <HAL_UARTEx_RxEventCallback+0x109c>)
 8001e3e:	805a      	strh	r2, [r3, #2]
				memcpy(&map_data.start_position_y,&data[3],2);
 8001e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e42:	3303      	adds	r3, #3
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	4b2f      	ldr	r3, [pc, #188]	@ (8001f08 <HAL_UARTEx_RxEventCallback+0x109c>)
 8001e4a:	809a      	strh	r2, [r3, #4]
				memcpy(&map_data.delta_x,&data[5],49);
 8001e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e4e:	3305      	adds	r3, #5
 8001e50:	4a2d      	ldr	r2, [pc, #180]	@ (8001f08 <HAL_UARTEx_RxEventCallback+0x109c>)
 8001e52:	1d90      	adds	r0, r2, #6
 8001e54:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f8d1 c000 	ldr.w	ip, [r1]
 8001e60:	684e      	ldr	r6, [r1, #4]
 8001e62:	688d      	ldr	r5, [r1, #8]
 8001e64:	68c9      	ldr	r1, [r1, #12]
 8001e66:	f8c2 c000 	str.w	ip, [r2]
 8001e6a:	6056      	str	r6, [r2, #4]
 8001e6c:	6095      	str	r5, [r2, #8]
 8001e6e:	60d1      	str	r1, [r2, #12]
 8001e70:	3310      	adds	r3, #16
 8001e72:	3010      	adds	r0, #16
 8001e74:	42a3      	cmp	r3, r4
 8001e76:	d1ef      	bne.n	8001e58 <HAL_UARTEx_RxEventCallback+0xfec>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	7013      	strb	r3, [r2, #0]
				memcpy(&map_data.delta_y,&data[54],49);
 8001e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e80:	3336      	adds	r3, #54	@ 0x36
 8001e82:	4a21      	ldr	r2, [pc, #132]	@ (8001f08 <HAL_UARTEx_RxEventCallback+0x109c>)
 8001e84:	f102 0037 	add.w	r0, r2, #55	@ 0x37
 8001e88:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f8d1 c000 	ldr.w	ip, [r1]
 8001e94:	684e      	ldr	r6, [r1, #4]
 8001e96:	688d      	ldr	r5, [r1, #8]
 8001e98:	68c9      	ldr	r1, [r1, #12]
 8001e9a:	f8c2 c000 	str.w	ip, [r2]
 8001e9e:	6056      	str	r6, [r2, #4]
 8001ea0:	6095      	str	r5, [r2, #8]
 8001ea2:	60d1      	str	r1, [r2, #12]
 8001ea4:	3310      	adds	r3, #16
 8001ea6:	3010      	adds	r0, #16
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	d1ef      	bne.n	8001e8c <HAL_UARTEx_RxEventCallback+0x1020>
 8001eac:	4602      	mov	r2, r0
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	7013      	strb	r3, [r2, #0]
				memcpy(&map_data.sender_id,&data[103],2);
 8001eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb4:	3367      	adds	r3, #103	@ 0x67
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <HAL_UARTEx_RxEventCallback+0x109c>)
 8001ebc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
				MINIMAP_DATA_RxEventCallback(map_data.intention, map_data.start_position_x, map_data.start_position_y, map_data.delta_x, map_data.delta_y, map_data.sender_id);
 8001ec0:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <HAL_UARTEx_RxEventCallback+0x109c>)
 8001ec2:	7818      	ldrb	r0, [r3, #0]
 8001ec4:	4b10      	ldr	r3, [pc, #64]	@ (8001f08 <HAL_UARTEx_RxEventCallback+0x109c>)
 8001ec6:	8859      	ldrh	r1, [r3, #2]
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <HAL_UARTEx_RxEventCallback+0x109c>)
 8001eca:	889a      	ldrh	r2, [r3, #4]
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <HAL_UARTEx_RxEventCallback+0x109c>)
 8001ece:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8001f0c <HAL_UARTEx_RxEventCallback+0x10a0>)
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f10 <HAL_UARTEx_RxEventCallback+0x10a4>)
 8001eda:	f000 f9ca 	bl	8002272 <MINIMAP_DATA_RxEventCallback>
				break;
 8001ede:	e00b      	b.n	8001ef8 <HAL_UARTEx_RxEventCallback+0x108c>
			}
			case CUSTOM_MESSAGE_HEADER : {
				//UART_Printf(&huart1,"CallBack Check");
				memcpy(&custom_message.custom_message,data,128);
 8001ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8001f14 <HAL_UARTEx_RxEventCallback+0x10a8>)
 8001ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	2380      	movs	r3, #128	@ 0x80
 8001eea:	461a      	mov	r2, r3
 8001eec:	f008 f9c8 	bl	800a280 <memcpy>
				CUSTOM_MESSAGE_RxEventCallback(custom_message.custom_message);
 8001ef0:	4808      	ldr	r0, [pc, #32]	@ (8001f14 <HAL_UARTEx_RxEventCallback+0x10a8>)
 8001ef2:	f000 f9ce 	bl	8002292 <CUSTOM_MESSAGE_RxEventCallback>
				break;
 8001ef6:	bf00      	nop
 8001ef8:	46d5      	mov	sp, sl
 8001efa:	f8d7 d004 	ldr.w	sp, [r7, #4]
			}
		}
	}
}
 8001efe:	bf00      	nop
 8001f00:	3774      	adds	r7, #116	@ 0x74
 8001f02:	46bd      	mov	sp, r7
 8001f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f08:	2000037c 	.word	0x2000037c
 8001f0c:	200003b3 	.word	0x200003b3
 8001f10:	20000382 	.word	0x20000382
 8001f14:	20000424 	.word	0x20000424

08001f18 <getBits>:





uint8_t getBits(uint8_t data, uint8_t startBit, uint8_t len){
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
 8001f22:	460b      	mov	r3, r1
 8001f24:	71bb      	strb	r3, [r7, #6]
 8001f26:	4613      	mov	r3, r2
 8001f28:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8001f2e:	2300      	movs	r3, #0
 8001f30:	73bb      	strb	r3, [r7, #14]
 8001f32:	e013      	b.n	8001f5c <getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 8001f34:	79fa      	ldrb	r2, [r7, #7]
 8001f36:	79b9      	ldrb	r1, [r7, #6]
 8001f38:	7bbb      	ldrb	r3, [r7, #14]
 8001f3a:	440b      	add	r3, r1
 8001f3c:	fa42 f303 	asr.w	r3, r2, r3
 8001f40:	f003 0201 	and.w	r2, r3, #1
 8001f44:	7bbb      	ldrb	r3, [r7, #14]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	b25a      	sxtb	r2, r3
 8001f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	b25b      	sxtb	r3, r3
 8001f54:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8001f56:	7bbb      	ldrb	r3, [r7, #14]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	73bb      	strb	r3, [r7, #14]
 8001f5c:	7bba      	ldrb	r2, [r7, #14]
 8001f5e:	797b      	ldrb	r3, [r7, #5]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d3e7      	bcc.n	8001f34 <getBits+0x1c>
	}
	return result;
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <GAME_STATUS_RxEventCallback>:

__weak void GAME_STATUS_RxEventCallback(uint8_t game_type,uint8_t current_stage,uint8_t game_progress, uint16_t stage_remain_time,uint64_t SyncTimeStamp){
 8001f72:	b490      	push	{r4, r7}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4604      	mov	r4, r0
 8001f7a:	4608      	mov	r0, r1
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4623      	mov	r3, r4
 8001f82:	71fb      	strb	r3, [r7, #7]
 8001f84:	4603      	mov	r3, r0
 8001f86:	71bb      	strb	r3, [r7, #6]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	717b      	strb	r3, [r7, #5]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc90      	pop	{r4, r7}
 8001f98:	4770      	bx	lr

08001f9a <GAME_RESULT_RxEventCallback>:

__weak void GAME_RESULT_RxEventCallback(uint8_t winner){
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	71fb      	strb	r3, [r7, #7]
	//NOTE: This function should not be modified
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <ROBOT_HP_HEADER_RxEventCallback>:

__weak void ROBOT_HP_HEADER_RxEventCallback(uint16_t red_1_robot_HP, uint16_t red_2_robot_HP, uint16_t red_3_robot_HP, uint16_t red_4_robot_HP, uint16_t red_7_robot_HP, uint16_t red_outpost_HP, uint16_t red_base_HP, uint16_t blue_1_robot_HP, uint16_t blue_2_robot_HP, uint16_t blue_3_robot_HP, uint16_t blue_4_robot_HP, uint16_t blue_7_robot_HP, uint16_t blue_outpost_HP, uint16_t blue_base_HP){
 8001fb0:	b490      	push	{r4, r7}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	4608      	mov	r0, r1
 8001fba:	4611      	mov	r1, r2
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4623      	mov	r3, r4
 8001fc0:	80fb      	strh	r3, [r7, #6]
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	80bb      	strh	r3, [r7, #4]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	807b      	strh	r3, [r7, #2]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	803b      	strh	r3, [r7, #0]
	//NOTE: This function should not be modified
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc90      	pop	{r4, r7}
 8001fd6:	4770      	bx	lr

08001fd8 <EVENT_DATA_RxEventCallback>:

__weak void EVENT_DATA_RxEventCallback(uint8_t resupply_zone_1, uint8_t resupply_zone_2, uint8_t resupply_zone_3, uint8_t small_power_rune, uint8_t large_power_rune, uint8_t central_elevated_ground, uint8_t trapezoid_elevated_ground, uint16_t last_dart_hit, uint8_t last_dart_hit_target, uint8_t central_buff){
 8001fd8:	b490      	push	{r4, r7}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4604      	mov	r4, r0
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4623      	mov	r3, r4
 8001fe8:	71fb      	strb	r3, [r7, #7]
 8001fea:	4603      	mov	r3, r0
 8001fec:	71bb      	strb	r3, [r7, #6]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	717b      	strb	r3, [r7, #5]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc90      	pop	{r4, r7}
 8001ffe:	4770      	bx	lr

08002000 <REFEREE_WARNING_RxEventCallback>:

__weak void REFEREE_WARNING_RxEventCallback(uint8_t penalty,uint8_t offending_robot_id,uint8_t count){
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
 800200a:	460b      	mov	r3, r1
 800200c:	71bb      	strb	r3, [r7, #6]
 800200e:	4613      	mov	r3, r2
 8002010:	717b      	strb	r3, [r7, #5]
	//NOTE: This function should not be modified
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <DART_INFO_RxEventCallback>:

__weak void DART_INFO_RxEventCallback(uint8_t dart_remaining_time,uint8_t last_dart_hit_target,uint8_t last_target_hit_count, uint8_t current_dart_target){
 800201e:	b490      	push	{r4, r7}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	4604      	mov	r4, r0
 8002026:	4608      	mov	r0, r1
 8002028:	4611      	mov	r1, r2
 800202a:	461a      	mov	r2, r3
 800202c:	4623      	mov	r3, r4
 800202e:	71fb      	strb	r3, [r7, #7]
 8002030:	4603      	mov	r3, r0
 8002032:	71bb      	strb	r3, [r7, #6]
 8002034:	460b      	mov	r3, r1
 8002036:	717b      	strb	r3, [r7, #5]
 8002038:	4613      	mov	r3, r2
 800203a:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bc90      	pop	{r4, r7}
 8002044:	4770      	bx	lr

08002046 <ROBOT_STATUS_RxEventCallback>:

__weak void ROBOT_STATUS_RxEventCallback(uint8_t robot_id, uint8_t robot_level, uint16_t current_HP, uint16_t maximum_HP, uint16_t shooter_barrel_cooling_value, uint16_t shooter_barrel_heat_limit, uint16_t chassis_power_limit, uint8_t power_management_gimbal_output, uint8_t power_management_chassis_output, uint8_t power_management_shooter_output){
 8002046:	b490      	push	{r4, r7}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	4604      	mov	r4, r0
 800204e:	4608      	mov	r0, r1
 8002050:	4611      	mov	r1, r2
 8002052:	461a      	mov	r2, r3
 8002054:	4623      	mov	r3, r4
 8002056:	71fb      	strb	r3, [r7, #7]
 8002058:	4603      	mov	r3, r0
 800205a:	71bb      	strb	r3, [r7, #6]
 800205c:	460b      	mov	r3, r1
 800205e:	80bb      	strh	r3, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bc90      	pop	{r4, r7}
 800206c:	4770      	bx	lr

0800206e <POWER_HEAT_DATA_RxEventCallback>:

__weak void POWER_HEAT_DATA_RxEventCallback(uint16_t buffer_energy, uint16_t shooter_17mm_1_barrel_heat, uint16_t shooter_17mm_2_barrel_heat, uint16_t shooter_42mm_barrel_heat){
 800206e:	b490      	push	{r4, r7}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	4604      	mov	r4, r0
 8002076:	4608      	mov	r0, r1
 8002078:	4611      	mov	r1, r2
 800207a:	461a      	mov	r2, r3
 800207c:	4623      	mov	r3, r4
 800207e:	80fb      	strh	r3, [r7, #6]
 8002080:	4603      	mov	r3, r0
 8002082:	80bb      	strh	r3, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
 8002088:	4613      	mov	r3, r2
 800208a:	803b      	strh	r3, [r7, #0]
	//NOTE: This function should not be modified
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bc90      	pop	{r4, r7}
 8002094:	4770      	bx	lr

08002096 <ROBOT_POSITION_RxEventCallback>:

__weak void ROBOT_POSITION_RxEventCallback(float x, float y, float angle){
 8002096:	b480      	push	{r7}
 8002098:	b085      	sub	sp, #20
 800209a:	af00      	add	r7, sp, #0
 800209c:	ed87 0a03 	vstr	s0, [r7, #12]
 80020a0:	edc7 0a02 	vstr	s1, [r7, #8]
 80020a4:	ed87 1a01 	vstr	s2, [r7, #4]
	//NOTE: This function should not be modified
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <BUFF_RxEventCallback>:

__weak void BUFF_RxEventCallback(uint8_t recovery_buff, uint8_t cooling_buff, uint8_t defence_buff, uint8_t vulnerability_buff, uint16_t attack_buff, uint8_t remaining_energy){
 80020b4:	b490      	push	{r4, r7}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4604      	mov	r4, r0
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	4623      	mov	r3, r4
 80020c4:	71fb      	strb	r3, [r7, #7]
 80020c6:	4603      	mov	r3, r0
 80020c8:	71bb      	strb	r3, [r7, #6]
 80020ca:	460b      	mov	r3, r1
 80020cc:	717b      	strb	r3, [r7, #5]
 80020ce:	4613      	mov	r3, r2
 80020d0:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc90      	pop	{r4, r7}
 80020da:	4770      	bx	lr

080020dc <DAMAGE_SOURCE_RxEventCallback>:

__weak void DAMAGE_SOURCE_RxEventCallback(uint8_t armor_id, uint8_t HP_deduction_reason){
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	460a      	mov	r2, r1
 80020e6:	71fb      	strb	r3, [r7, #7]
 80020e8:	4613      	mov	r3, r2
 80020ea:	71bb      	strb	r3, [r7, #6]
	//NOTE: This function should not be modified
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <PROJECTILE_INFO_RxEventCallback>:

__weak void PROJECTILE_INFO_RxEventCallback(uint8_t bullet_type, uint8_t shooter_number, uint8_t launching_frequency,float initial_speed){
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	ed87 0a00 	vstr	s0, [r7]
 8002104:	71fb      	strb	r3, [r7, #7]
 8002106:	460b      	mov	r3, r1
 8002108:	71bb      	strb	r3, [r7, #6]
 800210a:	4613      	mov	r3, r2
 800210c:	717b      	strb	r3, [r7, #5]
	//NOTE: This function should not be modified
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <PROJECTILE_ALLOWANCE_RxEventCallback>:

__weak void PROJECTILE_ALLOWANCE_RxEventCallback(uint16_t projectile_allowance_17mm, uint16_t projectile_allowance_42mm, uint16_t remaining_gold_coin){
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	80fb      	strh	r3, [r7, #6]
 8002124:	460b      	mov	r3, r1
 8002126:	80bb      	strh	r3, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <RFID_RxEventCallback>:

__weak void RFID_RxEventCallback(uint32_t rfid_status){
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	//NOTE: This function should not be modified
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <DART_COMMAND_RxEventCallback>:

__weak void DART_COMMAND_RxEventCallback(uint8_t dart_launch_opening_status, uint16_t target_change_remaining_time, uint16_t latest_launch_cmd_remaining_time){
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
 8002156:	460b      	mov	r3, r1
 8002158:	80bb      	strh	r3, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <TEAM_POSITION_RxEventCallback>:

__weak void TEAM_POSITION_RxEventCallback(float hero_x, float hero_y, float engineer_x, float engineer_y, float standard_3_x, float standard_3_y, float standard_4_x, float standard_4_y, float standard_5_x, float standard_5_y){
 800216a:	b480      	push	{r7}
 800216c:	b08b      	sub	sp, #44	@ 0x2c
 800216e:	af00      	add	r7, sp, #0
 8002170:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8002174:	edc7 0a08 	vstr	s1, [r7, #32]
 8002178:	ed87 1a07 	vstr	s2, [r7, #28]
 800217c:	edc7 1a06 	vstr	s3, [r7, #24]
 8002180:	ed87 2a05 	vstr	s4, [r7, #20]
 8002184:	edc7 2a04 	vstr	s5, [r7, #16]
 8002188:	ed87 3a03 	vstr	s6, [r7, #12]
 800218c:	edc7 3a02 	vstr	s7, [r7, #8]
 8002190:	ed87 4a01 	vstr	s8, [r7, #4]
 8002194:	edc7 4a00 	vstr	s9, [r7]
	//NOTE: This function should not be modified
}
 8002198:	bf00      	nop
 800219a:	372c      	adds	r7, #44	@ 0x2c
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <RADAR_MARKING_RxEventCallback>:

__weak void RADAR_MARKING_RxEventCallback(uint8_t mark_hero_progress, uint8_t mark_engineer_progress, uint8_t mark_standard_3_progress, uint8_t mark_standard_4_progress, uint8_t mark_sentry_progress){
 80021a4:	b490      	push	{r4, r7}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4604      	mov	r4, r0
 80021ac:	4608      	mov	r0, r1
 80021ae:	4611      	mov	r1, r2
 80021b0:	461a      	mov	r2, r3
 80021b2:	4623      	mov	r3, r4
 80021b4:	71fb      	strb	r3, [r7, #7]
 80021b6:	4603      	mov	r3, r0
 80021b8:	71bb      	strb	r3, [r7, #6]
 80021ba:	460b      	mov	r3, r1
 80021bc:	717b      	strb	r3, [r7, #5]
 80021be:	4613      	mov	r3, r2
 80021c0:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc90      	pop	{r4, r7}
 80021ca:	4770      	bx	lr

080021cc <SENTRY_RxEventCallback>:

__weak void SENTRY_RxEventCallback(uint16_t exchanged_projectiles, uint8_t projectile_exchange_count, uint8_t HP_exchange_count, uint8_t confirm_free_respawn, uint8_t instant_respawn_available, uint16_t instant_respawn_cost, uint8_t in_combat, uint16_t remaining_allowance_to_exchange){
 80021cc:	b490      	push	{r4, r7}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4604      	mov	r4, r0
 80021d4:	4608      	mov	r0, r1
 80021d6:	4611      	mov	r1, r2
 80021d8:	461a      	mov	r2, r3
 80021da:	4623      	mov	r3, r4
 80021dc:	80fb      	strh	r3, [r7, #6]
 80021de:	4603      	mov	r3, r0
 80021e0:	717b      	strb	r3, [r7, #5]
 80021e2:	460b      	mov	r3, r1
 80021e4:	713b      	strb	r3, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	70fb      	strb	r3, [r7, #3]
	//NOTE: This function should not be modified
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc90      	pop	{r4, r7}
 80021f2:	4770      	bx	lr

080021f4 <RADAR_BUFF_RxEventCallback>:

__weak void RADAR_BUFF_RxEventCallback(uint8_t double_vulnerability_chances, uint8_t double_vulnerability_triggered){
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	460a      	mov	r2, r1
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	4613      	mov	r3, r2
 8002202:	71bb      	strb	r3, [r7, #6]
	//NOTE: This function should not be modified
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <CUSTOM_CONTROLLER_ROBOT_RxEventCallback>:

__weak void ROBOT_INTERACTION_RxEventCallback(){
	//NOTE: This function should not be modified
}

__weak void CUSTOM_CONTROLLER_ROBOT_RxEventCallback(uint8_t customData[30]){
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	//NOTE: This function should not be modified
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <MINIMAP_COMMAND_RxEventCallback>:

__weak void MINIMAP_COMMAND_RxEventCallback(float target_position_x, float target_position_y, uint8_t cmd_keyboard, uint8_t target_robot_id, uint16_t cmd_source){
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	ed87 0a03 	vstr	s0, [r7, #12]
 800222e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
 8002236:	460b      	mov	r3, r1
 8002238:	71bb      	strb	r3, [r7, #6]
 800223a:	4613      	mov	r3, r2
 800223c:	80bb      	strh	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <PC_CONTROL_RxEventCallback>:

__weak void PC_CONTROL_RxEventCallback(int16_t mouse_x, int16_t mouse_y, int16_t mouse_z, uint8_t left_button_down, uint8_t right_button_down, uint8_t w, uint8_t s, uint8_t a, uint8_t d, uint8_t shift,uint8_t ctrl,uint8_t q, uint8_t e, uint8_t r, uint8_t f, uint8_t g, uint8_t z, uint8_t x, uint8_t c, uint8_t v, uint8_t b){
 800224a:	b490      	push	{r4, r7}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	4604      	mov	r4, r0
 8002252:	4608      	mov	r0, r1
 8002254:	4611      	mov	r1, r2
 8002256:	461a      	mov	r2, r3
 8002258:	4623      	mov	r3, r4
 800225a:	80fb      	strh	r3, [r7, #6]
 800225c:	4603      	mov	r3, r0
 800225e:	80bb      	strh	r3, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
 8002264:	4613      	mov	r3, r2
 8002266:	707b      	strb	r3, [r7, #1]
	//NOTE: This function should not be modified
}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bc90      	pop	{r4, r7}
 8002270:	4770      	bx	lr

08002272 <MINIMAP_DATA_RxEventCallback>:

__weak void CUSTOM_CONTROLLER_CLIENT_RxEventCallback(uint16_t key_value, uint16_t x_position, uint16_t mouse_left, uint16_t y_position, uint16_t mouse_right){
	//NOTE: This function should not be modified
}

__weak void MINIMAP_DATA_RxEventCallback(uint8_t intention, uint16_t start_position_x, uint16_t start_position_y, int8_t delta_x[49], int8_t delta_y[49], uint16_t sender_id){
 8002272:	b480      	push	{r7}
 8002274:	b085      	sub	sp, #20
 8002276:	af00      	add	r7, sp, #0
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	4603      	mov	r3, r0
 800227c:	73fb      	strb	r3, [r7, #15]
 800227e:	460b      	mov	r3, r1
 8002280:	81bb      	strh	r3, [r7, #12]
 8002282:	4613      	mov	r3, r2
 8002284:	817b      	strh	r3, [r7, #10]
	//NOTE: This function should not be modified
}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <CUSTOM_MESSAGE_RxEventCallback>:

__weak void CUSTOM_MESSAGE_RxEventCallback(uint8_t customMessage[128]){
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
	//NOTE: This function should not be modified
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022ac:	f000 fe04 	bl	8002eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022b0:	f000 f83e 	bl	8002330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022b4:	f000 f9be 	bl	8002634 <MX_GPIO_Init>
  MX_DMA_Init();
 80022b8:	f000 f97e 	bl	80025b8 <MX_DMA_Init>
  MX_I2C3_Init();
 80022bc:	f000 f8a2 	bl	8002404 <MX_I2C3_Init>
  MX_TIM4_Init();
 80022c0:	f000 f8ce 	bl	8002460 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80022c4:	f000 f924 	bl	8002510 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80022c8:	f000 f94c 	bl	8002564 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */



  IST8310_Init(&hi2c3);
 80022cc:	480f      	ldr	r0, [pc, #60]	@ (800230c <main+0x64>)
 80022ce:	f7fe fcb3 	bl	8000c38 <IST8310_Init>
  UART_Ex_Init(&huart1);
 80022d2:	480f      	ldr	r0, [pc, #60]	@ (8002310 <main+0x68>)
 80022d4:	f7fe fdba 	bl	8000e4c <UART_Ex_Init>
  UART_Ex_Init(&huart6);
 80022d8:	480e      	ldr	r0, [pc, #56]	@ (8002314 <main+0x6c>)
 80022da:	f7fe fdb7 	bl	8000e4c <UART_Ex_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80022de:	f005 f9f7 	bl	80076d0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80022e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002318 <main+0x70>)
 80022e4:	2100      	movs	r1, #0
 80022e6:	480d      	ldr	r0, [pc, #52]	@ (800231c <main+0x74>)
 80022e8:	f005 fa3c 	bl	8007764 <osThreadNew>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002320 <main+0x78>)
 80022f0:	6013      	str	r3, [r2, #0]

  /* creation of LibraryManager */
  LibraryManagerHandle = osThreadNew(StartLibraryManager, NULL, &LibraryManager_attributes);
 80022f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002324 <main+0x7c>)
 80022f4:	2100      	movs	r1, #0
 80022f6:	480c      	ldr	r0, [pc, #48]	@ (8002328 <main+0x80>)
 80022f8:	f005 fa34 	bl	8007764 <osThreadNew>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4a0b      	ldr	r2, [pc, #44]	@ (800232c <main+0x84>)
 8002300:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002302:	f005 fa09 	bl	8007718 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002306:	bf00      	nop
 8002308:	e7fd      	b.n	8002306 <main+0x5e>
 800230a:	bf00      	nop
 800230c:	200005ac 	.word	0x200005ac
 8002310:	200006a8 	.word	0x200006a8
 8002314:	200006f0 	.word	0x200006f0
 8002318:	0800ad6c 	.word	0x0800ad6c
 800231c:	08002761 	.word	0x08002761
 8002320:	200007f8 	.word	0x200007f8
 8002324:	0800ad90 	.word	0x0800ad90
 8002328:	0800288d 	.word	0x0800288d
 800232c:	200007fc 	.word	0x200007fc

08002330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b094      	sub	sp, #80	@ 0x50
 8002334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002336:	f107 0320 	add.w	r3, r7, #32
 800233a:	2230      	movs	r2, #48	@ 0x30
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f007 ff6a 	bl	800a218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002344:	f107 030c 	add.w	r3, r7, #12
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	4b28      	ldr	r3, [pc, #160]	@ (80023fc <SystemClock_Config+0xcc>)
 800235a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235c:	4a27      	ldr	r2, [pc, #156]	@ (80023fc <SystemClock_Config+0xcc>)
 800235e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002362:	6413      	str	r3, [r2, #64]	@ 0x40
 8002364:	4b25      	ldr	r3, [pc, #148]	@ (80023fc <SystemClock_Config+0xcc>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002368:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002370:	2300      	movs	r3, #0
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	4b22      	ldr	r3, [pc, #136]	@ (8002400 <SystemClock_Config+0xd0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a21      	ldr	r2, [pc, #132]	@ (8002400 <SystemClock_Config+0xd0>)
 800237a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	4b1f      	ldr	r3, [pc, #124]	@ (8002400 <SystemClock_Config+0xd0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800238c:	2301      	movs	r3, #1
 800238e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002390:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002396:	2302      	movs	r3, #2
 8002398:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800239a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800239e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80023a0:	2306      	movs	r3, #6
 80023a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023a4:	23a8      	movs	r3, #168	@ 0xa8
 80023a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023a8:	2302      	movs	r3, #2
 80023aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023ac:	2304      	movs	r3, #4
 80023ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023b0:	f107 0320 	add.w	r3, r7, #32
 80023b4:	4618      	mov	r0, r3
 80023b6:	f002 fd1b 	bl	8004df0 <HAL_RCC_OscConfig>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023c0:	f000 fa6f 	bl	80028a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023c4:	230f      	movs	r3, #15
 80023c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023c8:	2302      	movs	r3, #2
 80023ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	2105      	movs	r1, #5
 80023e2:	4618      	mov	r0, r3
 80023e4:	f002 ff7c 	bl	80052e0 <HAL_RCC_ClockConfig>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80023ee:	f000 fa58 	bl	80028a2 <Error_Handler>
  }
}
 80023f2:	bf00      	nop
 80023f4:	3750      	adds	r7, #80	@ 0x50
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40007000 	.word	0x40007000

08002404 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002408:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <MX_I2C3_Init+0x50>)
 800240a:	4a13      	ldr	r2, [pc, #76]	@ (8002458 <MX_I2C3_Init+0x54>)
 800240c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800240e:	4b11      	ldr	r3, [pc, #68]	@ (8002454 <MX_I2C3_Init+0x50>)
 8002410:	4a12      	ldr	r2, [pc, #72]	@ (800245c <MX_I2C3_Init+0x58>)
 8002412:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002414:	4b0f      	ldr	r3, [pc, #60]	@ (8002454 <MX_I2C3_Init+0x50>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800241a:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <MX_I2C3_Init+0x50>)
 800241c:	2200      	movs	r2, #0
 800241e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002420:	4b0c      	ldr	r3, [pc, #48]	@ (8002454 <MX_I2C3_Init+0x50>)
 8002422:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002426:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002428:	4b0a      	ldr	r3, [pc, #40]	@ (8002454 <MX_I2C3_Init+0x50>)
 800242a:	2200      	movs	r2, #0
 800242c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800242e:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <MX_I2C3_Init+0x50>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002434:	4b07      	ldr	r3, [pc, #28]	@ (8002454 <MX_I2C3_Init+0x50>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800243a:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <MX_I2C3_Init+0x50>)
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002440:	4804      	ldr	r0, [pc, #16]	@ (8002454 <MX_I2C3_Init+0x50>)
 8002442:	f001 fcb1 	bl	8003da8 <HAL_I2C_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800244c:	f000 fa29 	bl	80028a2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	200005ac 	.word	0x200005ac
 8002458:	40005c00 	.word	0x40005c00
 800245c:	00061a80 	.word	0x00061a80

08002460 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	@ 0x28
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002466:	f107 0320 	add.w	r3, r7, #32
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	60da      	str	r2, [r3, #12]
 800247c:	611a      	str	r2, [r3, #16]
 800247e:	615a      	str	r2, [r3, #20]
 8002480:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002482:	4b21      	ldr	r3, [pc, #132]	@ (8002508 <MX_TIM4_Init+0xa8>)
 8002484:	4a21      	ldr	r2, [pc, #132]	@ (800250c <MX_TIM4_Init+0xac>)
 8002486:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002488:	4b1f      	ldr	r3, [pc, #124]	@ (8002508 <MX_TIM4_Init+0xa8>)
 800248a:	2253      	movs	r2, #83	@ 0x53
 800248c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248e:	4b1e      	ldr	r3, [pc, #120]	@ (8002508 <MX_TIM4_Init+0xa8>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 8002494:	4b1c      	ldr	r3, [pc, #112]	@ (8002508 <MX_TIM4_Init+0xa8>)
 8002496:	22f9      	movs	r2, #249	@ 0xf9
 8002498:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249a:	4b1b      	ldr	r3, [pc, #108]	@ (8002508 <MX_TIM4_Init+0xa8>)
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a0:	4b19      	ldr	r3, [pc, #100]	@ (8002508 <MX_TIM4_Init+0xa8>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024a6:	4818      	ldr	r0, [pc, #96]	@ (8002508 <MX_TIM4_Init+0xa8>)
 80024a8:	f003 f962 	bl	8005770 <HAL_TIM_PWM_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80024b2:	f000 f9f6 	bl	80028a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024be:	f107 0320 	add.w	r3, r7, #32
 80024c2:	4619      	mov	r1, r3
 80024c4:	4810      	ldr	r0, [pc, #64]	@ (8002508 <MX_TIM4_Init+0xa8>)
 80024c6:	f003 fe19 	bl	80060fc <HAL_TIMEx_MasterConfigSynchronization>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80024d0:	f000 f9e7 	bl	80028a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d4:	2360      	movs	r3, #96	@ 0x60
 80024d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	2208      	movs	r2, #8
 80024e8:	4619      	mov	r1, r3
 80024ea:	4807      	ldr	r0, [pc, #28]	@ (8002508 <MX_TIM4_Init+0xa8>)
 80024ec:	f003 fac8 	bl	8005a80 <HAL_TIM_PWM_ConfigChannel>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80024f6:	f000 f9d4 	bl	80028a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80024fa:	4803      	ldr	r0, [pc, #12]	@ (8002508 <MX_TIM4_Init+0xa8>)
 80024fc:	f000 fac2 	bl	8002a84 <HAL_TIM_MspPostInit>

}
 8002500:	bf00      	nop
 8002502:	3728      	adds	r7, #40	@ 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000600 	.word	0x20000600
 800250c:	40000800 	.word	0x40000800

08002510 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002514:	4b11      	ldr	r3, [pc, #68]	@ (800255c <MX_USART1_UART_Init+0x4c>)
 8002516:	4a12      	ldr	r2, [pc, #72]	@ (8002560 <MX_USART1_UART_Init+0x50>)
 8002518:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800251a:	4b10      	ldr	r3, [pc, #64]	@ (800255c <MX_USART1_UART_Init+0x4c>)
 800251c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002520:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002522:	4b0e      	ldr	r3, [pc, #56]	@ (800255c <MX_USART1_UART_Init+0x4c>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <MX_USART1_UART_Init+0x4c>)
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800252e:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <MX_USART1_UART_Init+0x4c>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002534:	4b09      	ldr	r3, [pc, #36]	@ (800255c <MX_USART1_UART_Init+0x4c>)
 8002536:	220c      	movs	r2, #12
 8002538:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253a:	4b08      	ldr	r3, [pc, #32]	@ (800255c <MX_USART1_UART_Init+0x4c>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <MX_USART1_UART_Init+0x4c>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002546:	4805      	ldr	r0, [pc, #20]	@ (800255c <MX_USART1_UART_Init+0x4c>)
 8002548:	f003 fe54 	bl	80061f4 <HAL_UART_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002552:	f000 f9a6 	bl	80028a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200006a8 	.word	0x200006a8
 8002560:	40011000 	.word	0x40011000

08002564 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002568:	4b11      	ldr	r3, [pc, #68]	@ (80025b0 <MX_USART6_UART_Init+0x4c>)
 800256a:	4a12      	ldr	r2, [pc, #72]	@ (80025b4 <MX_USART6_UART_Init+0x50>)
 800256c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800256e:	4b10      	ldr	r3, [pc, #64]	@ (80025b0 <MX_USART6_UART_Init+0x4c>)
 8002570:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002574:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002576:	4b0e      	ldr	r3, [pc, #56]	@ (80025b0 <MX_USART6_UART_Init+0x4c>)
 8002578:	2200      	movs	r2, #0
 800257a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800257c:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <MX_USART6_UART_Init+0x4c>)
 800257e:	2200      	movs	r2, #0
 8002580:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002582:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <MX_USART6_UART_Init+0x4c>)
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002588:	4b09      	ldr	r3, [pc, #36]	@ (80025b0 <MX_USART6_UART_Init+0x4c>)
 800258a:	220c      	movs	r2, #12
 800258c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800258e:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <MX_USART6_UART_Init+0x4c>)
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002594:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <MX_USART6_UART_Init+0x4c>)
 8002596:	2200      	movs	r2, #0
 8002598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800259a:	4805      	ldr	r0, [pc, #20]	@ (80025b0 <MX_USART6_UART_Init+0x4c>)
 800259c:	f003 fe2a 	bl	80061f4 <HAL_UART_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80025a6:	f000 f97c 	bl	80028a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200006f0 	.word	0x200006f0
 80025b4:	40011400 	.word	0x40011400

080025b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002630 <MX_DMA_Init+0x78>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002630 <MX_DMA_Init+0x78>)
 80025c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ce:	4b18      	ldr	r3, [pc, #96]	@ (8002630 <MX_DMA_Init+0x78>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	603b      	str	r3, [r7, #0]
 80025de:	4b14      	ldr	r3, [pc, #80]	@ (8002630 <MX_DMA_Init+0x78>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	4a13      	ldr	r2, [pc, #76]	@ (8002630 <MX_DMA_Init+0x78>)
 80025e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ea:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <MX_DMA_Init+0x78>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2105      	movs	r1, #5
 80025fa:	202f      	movs	r0, #47	@ 0x2f
 80025fc:	f000 fdcd 	bl	800319a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002600:	202f      	movs	r0, #47	@ 0x2f
 8002602:	f000 fde6 	bl	80031d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2105      	movs	r1, #5
 800260a:	2039      	movs	r0, #57	@ 0x39
 800260c:	f000 fdc5 	bl	800319a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002610:	2039      	movs	r0, #57	@ 0x39
 8002612:	f000 fdde 	bl	80031d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2105      	movs	r1, #5
 800261a:	203a      	movs	r0, #58	@ 0x3a
 800261c:	f000 fdbd 	bl	800319a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002620:	203a      	movs	r0, #58	@ 0x3a
 8002622:	f000 fdd6 	bl	80031d2 <HAL_NVIC_EnableIRQ>

}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800

08002634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08c      	sub	sp, #48	@ 0x30
 8002638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	60da      	str	r2, [r3, #12]
 8002648:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	4b40      	ldr	r3, [pc, #256]	@ (8002750 <MX_GPIO_Init+0x11c>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	4a3f      	ldr	r2, [pc, #252]	@ (8002750 <MX_GPIO_Init+0x11c>)
 8002654:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002658:	6313      	str	r3, [r2, #48]	@ 0x30
 800265a:	4b3d      	ldr	r3, [pc, #244]	@ (8002750 <MX_GPIO_Init+0x11c>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	4b39      	ldr	r3, [pc, #228]	@ (8002750 <MX_GPIO_Init+0x11c>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	4a38      	ldr	r2, [pc, #224]	@ (8002750 <MX_GPIO_Init+0x11c>)
 8002670:	f043 0302 	orr.w	r3, r3, #2
 8002674:	6313      	str	r3, [r2, #48]	@ 0x30
 8002676:	4b36      	ldr	r3, [pc, #216]	@ (8002750 <MX_GPIO_Init+0x11c>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	4b32      	ldr	r3, [pc, #200]	@ (8002750 <MX_GPIO_Init+0x11c>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	4a31      	ldr	r2, [pc, #196]	@ (8002750 <MX_GPIO_Init+0x11c>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6313      	str	r3, [r2, #48]	@ 0x30
 8002692:	4b2f      	ldr	r3, [pc, #188]	@ (8002750 <MX_GPIO_Init+0x11c>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002750 <MX_GPIO_Init+0x11c>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	4a2a      	ldr	r2, [pc, #168]	@ (8002750 <MX_GPIO_Init+0x11c>)
 80026a8:	f043 0304 	orr.w	r3, r3, #4
 80026ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ae:	4b28      	ldr	r3, [pc, #160]	@ (8002750 <MX_GPIO_Init+0x11c>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	4b24      	ldr	r3, [pc, #144]	@ (8002750 <MX_GPIO_Init+0x11c>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	4a23      	ldr	r2, [pc, #140]	@ (8002750 <MX_GPIO_Init+0x11c>)
 80026c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ca:	4b21      	ldr	r3, [pc, #132]	@ (8002750 <MX_GPIO_Init+0x11c>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	4b1d      	ldr	r3, [pc, #116]	@ (8002750 <MX_GPIO_Init+0x11c>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	4a1c      	ldr	r2, [pc, #112]	@ (8002750 <MX_GPIO_Init+0x11c>)
 80026e0:	f043 0308 	orr.w	r3, r3, #8
 80026e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <MX_GPIO_Init+0x11c>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80026f2:	2200      	movs	r2, #0
 80026f4:	2140      	movs	r1, #64	@ 0x40
 80026f6:	4817      	ldr	r0, [pc, #92]	@ (8002754 <MX_GPIO_Init+0x120>)
 80026f8:	f001 fb3c 	bl	8003d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026fc:	2340      	movs	r3, #64	@ 0x40
 80026fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002700:	2301      	movs	r3, #1
 8002702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002708:	2300      	movs	r3, #0
 800270a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800270c:	f107 031c 	add.w	r3, r7, #28
 8002710:	4619      	mov	r1, r3
 8002712:	4810      	ldr	r0, [pc, #64]	@ (8002754 <MX_GPIO_Init+0x120>)
 8002714:	f001 f97a 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002718:	2308      	movs	r3, #8
 800271a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800271c:	2300      	movs	r3, #0
 800271e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002724:	f107 031c 	add.w	r3, r7, #28
 8002728:	4619      	mov	r1, r3
 800272a:	480a      	ldr	r0, [pc, #40]	@ (8002754 <MX_GPIO_Init+0x120>)
 800272c:	f001 f96e 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002730:	2301      	movs	r3, #1
 8002732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002734:	2300      	movs	r3, #0
 8002736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273c:	f107 031c 	add.w	r3, r7, #28
 8002740:	4619      	mov	r1, r3
 8002742:	4805      	ldr	r0, [pc, #20]	@ (8002758 <MX_GPIO_Init+0x124>)
 8002744:	f001 f962 	bl	8003a0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002748:	bf00      	nop
 800274a:	3730      	adds	r7, #48	@ 0x30
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40023800 	.word	0x40023800
 8002754:	40021800 	.word	0x40021800
 8002758:	40020000 	.word	0x40020000
 800275c:	00000000 	.word	0x00000000

08002760 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002760:	b5b0      	push	{r4, r5, r7, lr}
 8002762:	b08a      	sub	sp, #40	@ 0x28
 8002764:	af02      	add	r7, sp, #8
 8002766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_TIM_Base_Start(&htim4);
 8002768:	4843      	ldr	r0, [pc, #268]	@ (8002878 <StartDefaultTask+0x118>)
 800276a:	f002 ff99 	bl	80056a0 <HAL_TIM_Base_Start>
	const float buzzerPre = 0.000001;
 800276e:	4b43      	ldr	r3, [pc, #268]	@ (800287c <StartDefaultTask+0x11c>)
 8002770:	617b      	str	r3, [r7, #20]
	uint8_t toggleRising = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	77fb      	strb	r3, [r7, #31]
	uint8_t toggleBoi = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	77bb      	strb	r3, [r7, #30]

  /* Infinite loop */
  for(;;)
  {

	  int32_t ScaledMag = (2*getIST8310_X())+1000;
 800277a:	f7fe faed 	bl	8000d58 <getIST8310_X>
 800277e:	4603      	mov	r3, r0
 8002780:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	61bb      	str	r3, [r7, #24]

	  if (ScaledMag <0) {
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	da01      	bge.n	8002792 <StartDefaultTask+0x32>
		  ScaledMag = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
	  }
	  uint16_t fV = (uint16_t)(ScaledMag);
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	827b      	strh	r3, [r7, #18]
	  // uint16_t fV = 440;


		uint32_t finalVal = (uint32_t)(1/(buzzerPre*(float)fV));;
 8002796:	8a7b      	ldrh	r3, [r7, #18]
 8002798:	ee07 3a90 	vmov	s15, r3
 800279c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80027a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027b4:	ee17 3a90 	vmov	r3, s15
 80027b8:	60fb      	str	r3, [r7, #12]

		htim4.Instance->ARR = finalVal;
 80027ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002878 <StartDefaultTask+0x118>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	62da      	str	r2, [r3, #44]	@ 0x2c



	  uint32_t value = finalVal * 0.02;// (uint32_t)val;
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f7fd ffc0 	bl	8000748 <__aeabi_ui2d>
 80027c8:	a329      	add	r3, pc, #164	@ (adr r3, 8002870 <StartDefaultTask+0x110>)
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	f7fd fd4f 	bl	8000270 <__aeabi_dmul>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	f7fe f82f 	bl	800083c <__aeabi_d2uiz>
 80027de:	4603      	mov	r3, r0
 80027e0:	60bb      	str	r3, [r7, #8]


	  htim4.Instance->CCR3=value;
 80027e2:	4b25      	ldr	r3, [pc, #148]	@ (8002878 <StartDefaultTask+0x118>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	63da      	str	r2, [r3, #60]	@ 0x3c
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && toggleRising == 0) {
 80027ea:	2101      	movs	r1, #1
 80027ec:	4824      	ldr	r0, [pc, #144]	@ (8002880 <StartDefaultTask+0x120>)
 80027ee:	f001 faa9 	bl	8003d44 <HAL_GPIO_ReadPin>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d10b      	bne.n	8002810 <StartDefaultTask+0xb0>
 80027f8:	7ffb      	ldrb	r3, [r7, #31]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d108      	bne.n	8002810 <StartDefaultTask+0xb0>
		  toggleBoi = !toggleBoi;
 80027fe:	7fbb      	ldrb	r3, [r7, #30]
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	77bb      	strb	r3, [r7, #30]
		  toggleRising = 1;
 800280c:	2301      	movs	r3, #1
 800280e:	77fb      	strb	r3, [r7, #31]
	  }


	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0 && toggleRising == 1) {
 8002810:	2101      	movs	r1, #1
 8002812:	481b      	ldr	r0, [pc, #108]	@ (8002880 <StartDefaultTask+0x120>)
 8002814:	f001 fa96 	bl	8003d44 <HAL_GPIO_ReadPin>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d104      	bne.n	8002828 <StartDefaultTask+0xc8>
 800281e:	7ffb      	ldrb	r3, [r7, #31]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <StartDefaultTask+0xc8>
		  toggleRising = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	77fb      	strb	r3, [r7, #31]
	  }

	  if (toggleBoi == 0) {
 8002828:	7fbb      	ldrb	r3, [r7, #30]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d104      	bne.n	8002838 <StartDefaultTask+0xd8>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800282e:	2108      	movs	r1, #8
 8002830:	4811      	ldr	r0, [pc, #68]	@ (8002878 <StartDefaultTask+0x118>)
 8002832:	f002 ffed 	bl	8005810 <HAL_TIM_PWM_Start>
 8002836:	e003      	b.n	8002840 <StartDefaultTask+0xe0>
	  } else {
		  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8002838:	2108      	movs	r1, #8
 800283a:	480f      	ldr	r0, [pc, #60]	@ (8002878 <StartDefaultTask+0x118>)
 800283c:	f003 f8b0 	bl	80059a0 <HAL_TIM_PWM_Stop>
	  }

	  // UART_Printf()
	  UART_Printf(&huart1, "%d %d %d\r\n", getIST8310_X(), getIST8310_Y(), getIST8310_Z());
 8002840:	f7fe fa8a 	bl	8000d58 <getIST8310_X>
 8002844:	4603      	mov	r3, r0
 8002846:	461c      	mov	r4, r3
 8002848:	f7fe fa92 	bl	8000d70 <getIST8310_Y>
 800284c:	4603      	mov	r3, r0
 800284e:	461d      	mov	r5, r3
 8002850:	f7fe fa9a 	bl	8000d88 <getIST8310_Z>
 8002854:	4603      	mov	r3, r0
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	462b      	mov	r3, r5
 800285a:	4622      	mov	r2, r4
 800285c:	4909      	ldr	r1, [pc, #36]	@ (8002884 <StartDefaultTask+0x124>)
 800285e:	480a      	ldr	r0, [pc, #40]	@ (8002888 <StartDefaultTask+0x128>)
 8002860:	f7fe facc 	bl	8000dfc <UART_Printf>

    osDelay(1);
 8002864:	2001      	movs	r0, #1
 8002866:	f005 f80f 	bl	8007888 <osDelay>
  {
 800286a:	e786      	b.n	800277a <StartDefaultTask+0x1a>
 800286c:	f3af 8000 	nop.w
 8002870:	47ae147b 	.word	0x47ae147b
 8002874:	3f947ae1 	.word	0x3f947ae1
 8002878:	20000600 	.word	0x20000600
 800287c:	358637bd 	.word	0x358637bd
 8002880:	40020000 	.word	0x40020000
 8002884:	0800ab48 	.word	0x0800ab48
 8002888:	200006a8 	.word	0x200006a8

0800288c <StartLibraryManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLibraryManager */
void StartLibraryManager(void *argument)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  IST8310_Update();
 8002894:	f7fe fa1a 	bl	8000ccc <IST8310_Update>
    osDelay(1);
 8002898:	2001      	movs	r0, #1
 800289a:	f004 fff5 	bl	8007888 <osDelay>
	  IST8310_Update();
 800289e:	bf00      	nop
 80028a0:	e7f8      	b.n	8002894 <StartLibraryManager+0x8>

080028a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028a6:	b672      	cpsid	i
}
 80028a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028aa:	bf00      	nop
 80028ac:	e7fd      	b.n	80028aa <Error_Handler+0x8>
	...

080028b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	4b12      	ldr	r3, [pc, #72]	@ (8002904 <HAL_MspInit+0x54>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028be:	4a11      	ldr	r2, [pc, #68]	@ (8002904 <HAL_MspInit+0x54>)
 80028c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80028c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002904 <HAL_MspInit+0x54>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <HAL_MspInit+0x54>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	4a0a      	ldr	r2, [pc, #40]	@ (8002904 <HAL_MspInit+0x54>)
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028e2:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <HAL_MspInit+0x54>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	210f      	movs	r1, #15
 80028f2:	f06f 0001 	mvn.w	r0, #1
 80028f6:	f000 fc50 	bl	800319a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800

08002908 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	@ 0x28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a29      	ldr	r2, [pc, #164]	@ (80029cc <HAL_I2C_MspInit+0xc4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d14b      	bne.n	80029c2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	4b28      	ldr	r3, [pc, #160]	@ (80029d0 <HAL_I2C_MspInit+0xc8>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	4a27      	ldr	r2, [pc, #156]	@ (80029d0 <HAL_I2C_MspInit+0xc8>)
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	6313      	str	r3, [r2, #48]	@ 0x30
 800293a:	4b25      	ldr	r3, [pc, #148]	@ (80029d0 <HAL_I2C_MspInit+0xc8>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	4b21      	ldr	r3, [pc, #132]	@ (80029d0 <HAL_I2C_MspInit+0xc8>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	4a20      	ldr	r2, [pc, #128]	@ (80029d0 <HAL_I2C_MspInit+0xc8>)
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	6313      	str	r3, [r2, #48]	@ 0x30
 8002956:	4b1e      	ldr	r3, [pc, #120]	@ (80029d0 <HAL_I2C_MspInit+0xc8>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002962:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002968:	2312      	movs	r3, #18
 800296a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800296c:	2301      	movs	r3, #1
 800296e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002970:	2303      	movs	r3, #3
 8002972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002974:	2304      	movs	r3, #4
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	4619      	mov	r1, r3
 800297e:	4815      	ldr	r0, [pc, #84]	@ (80029d4 <HAL_I2C_MspInit+0xcc>)
 8002980:	f001 f844 	bl	8003a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002984:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800298a:	2312      	movs	r3, #18
 800298c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800298e:	2301      	movs	r3, #1
 8002990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002992:	2303      	movs	r3, #3
 8002994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002996:	2304      	movs	r3, #4
 8002998:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	4619      	mov	r1, r3
 80029a0:	480d      	ldr	r0, [pc, #52]	@ (80029d8 <HAL_I2C_MspInit+0xd0>)
 80029a2:	f001 f833 	bl	8003a0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <HAL_I2C_MspInit+0xc8>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	4a08      	ldr	r2, [pc, #32]	@ (80029d0 <HAL_I2C_MspInit+0xc8>)
 80029b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029b6:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <HAL_I2C_MspInit+0xc8>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80029c2:	bf00      	nop
 80029c4:	3728      	adds	r7, #40	@ 0x28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40005c00 	.word	0x40005c00
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40020800 	.word	0x40020800
 80029d8:	40020000 	.word	0x40020000

080029dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a22      	ldr	r2, [pc, #136]	@ (8002a74 <HAL_TIM_PWM_MspInit+0x98>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d13d      	bne.n	8002a6a <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	4b21      	ldr	r3, [pc, #132]	@ (8002a78 <HAL_TIM_PWM_MspInit+0x9c>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	4a20      	ldr	r2, [pc, #128]	@ (8002a78 <HAL_TIM_PWM_MspInit+0x9c>)
 80029f8:	f043 0304 	orr.w	r3, r3, #4
 80029fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80029fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002a78 <HAL_TIM_PWM_MspInit+0x9c>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8002a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002a7c <HAL_TIM_PWM_MspInit+0xa0>)
 8002a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002a80 <HAL_TIM_PWM_MspInit+0xa4>)
 8002a0e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8002a10:	4b1a      	ldr	r3, [pc, #104]	@ (8002a7c <HAL_TIM_PWM_MspInit+0xa0>)
 8002a12:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002a16:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a18:	4b18      	ldr	r3, [pc, #96]	@ (8002a7c <HAL_TIM_PWM_MspInit+0xa0>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a1e:	4b17      	ldr	r3, [pc, #92]	@ (8002a7c <HAL_TIM_PWM_MspInit+0xa0>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002a24:	4b15      	ldr	r3, [pc, #84]	@ (8002a7c <HAL_TIM_PWM_MspInit+0xa0>)
 8002a26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a2a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a2c:	4b13      	ldr	r3, [pc, #76]	@ (8002a7c <HAL_TIM_PWM_MspInit+0xa0>)
 8002a2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a32:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a34:	4b11      	ldr	r3, [pc, #68]	@ (8002a7c <HAL_TIM_PWM_MspInit+0xa0>)
 8002a36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a3a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <HAL_TIM_PWM_MspInit+0xa0>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002a42:	4b0e      	ldr	r3, [pc, #56]	@ (8002a7c <HAL_TIM_PWM_MspInit+0xa0>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a48:	4b0c      	ldr	r3, [pc, #48]	@ (8002a7c <HAL_TIM_PWM_MspInit+0xa0>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002a4e:	480b      	ldr	r0, [pc, #44]	@ (8002a7c <HAL_TIM_PWM_MspInit+0xa0>)
 8002a50:	f000 fbda 	bl	8003208 <HAL_DMA_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8002a5a:	f7ff ff22 	bl	80028a2 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a06      	ldr	r2, [pc, #24]	@ (8002a7c <HAL_TIM_PWM_MspInit+0xa0>)
 8002a62:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a64:	4a05      	ldr	r2, [pc, #20]	@ (8002a7c <HAL_TIM_PWM_MspInit+0xa0>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40000800 	.word	0x40000800
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	20000648 	.word	0x20000648
 8002a80:	400260b8 	.word	0x400260b8

08002a84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 030c 	add.w	r3, r7, #12
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a12      	ldr	r2, [pc, #72]	@ (8002aec <HAL_TIM_MspPostInit+0x68>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d11e      	bne.n	8002ae4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	4b11      	ldr	r3, [pc, #68]	@ (8002af0 <HAL_TIM_MspPostInit+0x6c>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aae:	4a10      	ldr	r2, [pc, #64]	@ (8002af0 <HAL_TIM_MspPostInit+0x6c>)
 8002ab0:	f043 0308 	orr.w	r3, r3, #8
 8002ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8002af0 <HAL_TIM_MspPostInit+0x6c>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002ac2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ac6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ad8:	f107 030c 	add.w	r3, r7, #12
 8002adc:	4619      	mov	r1, r3
 8002ade:	4805      	ldr	r0, [pc, #20]	@ (8002af4 <HAL_TIM_MspPostInit+0x70>)
 8002ae0:	f000 ff94 	bl	8003a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002ae4:	bf00      	nop
 8002ae6:	3720      	adds	r7, #32
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40000800 	.word	0x40000800
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020c00 	.word	0x40020c00

08002af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08c      	sub	sp, #48	@ 0x30
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 031c 	add.w	r3, r7, #28
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a78      	ldr	r2, [pc, #480]	@ (8002cf8 <HAL_UART_MspInit+0x200>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	f040 8082 	bne.w	8002c20 <HAL_UART_MspInit+0x128>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
 8002b20:	4b76      	ldr	r3, [pc, #472]	@ (8002cfc <HAL_UART_MspInit+0x204>)
 8002b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b24:	4a75      	ldr	r2, [pc, #468]	@ (8002cfc <HAL_UART_MspInit+0x204>)
 8002b26:	f043 0310 	orr.w	r3, r3, #16
 8002b2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b2c:	4b73      	ldr	r3, [pc, #460]	@ (8002cfc <HAL_UART_MspInit+0x204>)
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8002cfc <HAL_UART_MspInit+0x204>)
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b40:	4a6e      	ldr	r2, [pc, #440]	@ (8002cfc <HAL_UART_MspInit+0x204>)
 8002b42:	f043 0302 	orr.w	r3, r3, #2
 8002b46:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b48:	4b6c      	ldr	r3, [pc, #432]	@ (8002cfc <HAL_UART_MspInit+0x204>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b54:	2300      	movs	r3, #0
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	4b68      	ldr	r3, [pc, #416]	@ (8002cfc <HAL_UART_MspInit+0x204>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5c:	4a67      	ldr	r2, [pc, #412]	@ (8002cfc <HAL_UART_MspInit+0x204>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b64:	4b65      	ldr	r3, [pc, #404]	@ (8002cfc <HAL_UART_MspInit+0x204>)
 8002b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b70:	2380      	movs	r3, #128	@ 0x80
 8002b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b74:	2302      	movs	r3, #2
 8002b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b80:	2307      	movs	r3, #7
 8002b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b84:	f107 031c 	add.w	r3, r7, #28
 8002b88:	4619      	mov	r1, r3
 8002b8a:	485d      	ldr	r0, [pc, #372]	@ (8002d00 <HAL_UART_MspInit+0x208>)
 8002b8c:	f000 ff3e 	bl	8003a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b96:	2302      	movs	r3, #2
 8002b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ba2:	2307      	movs	r3, #7
 8002ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba6:	f107 031c 	add.w	r3, r7, #28
 8002baa:	4619      	mov	r1, r3
 8002bac:	4855      	ldr	r0, [pc, #340]	@ (8002d04 <HAL_UART_MspInit+0x20c>)
 8002bae:	f000 ff2d 	bl	8003a0c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002bb2:	4b55      	ldr	r3, [pc, #340]	@ (8002d08 <HAL_UART_MspInit+0x210>)
 8002bb4:	4a55      	ldr	r2, [pc, #340]	@ (8002d0c <HAL_UART_MspInit+0x214>)
 8002bb6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002bb8:	4b53      	ldr	r3, [pc, #332]	@ (8002d08 <HAL_UART_MspInit+0x210>)
 8002bba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002bbe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bc0:	4b51      	ldr	r3, [pc, #324]	@ (8002d08 <HAL_UART_MspInit+0x210>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bc6:	4b50      	ldr	r3, [pc, #320]	@ (8002d08 <HAL_UART_MspInit+0x210>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bcc:	4b4e      	ldr	r3, [pc, #312]	@ (8002d08 <HAL_UART_MspInit+0x210>)
 8002bce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bd2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bd4:	4b4c      	ldr	r3, [pc, #304]	@ (8002d08 <HAL_UART_MspInit+0x210>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bda:	4b4b      	ldr	r3, [pc, #300]	@ (8002d08 <HAL_UART_MspInit+0x210>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002be0:	4b49      	ldr	r3, [pc, #292]	@ (8002d08 <HAL_UART_MspInit+0x210>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002be6:	4b48      	ldr	r3, [pc, #288]	@ (8002d08 <HAL_UART_MspInit+0x210>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bec:	4b46      	ldr	r3, [pc, #280]	@ (8002d08 <HAL_UART_MspInit+0x210>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002bf2:	4845      	ldr	r0, [pc, #276]	@ (8002d08 <HAL_UART_MspInit+0x210>)
 8002bf4:	f000 fb08 	bl	8003208 <HAL_DMA_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8002bfe:	f7ff fe50 	bl	80028a2 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a40      	ldr	r2, [pc, #256]	@ (8002d08 <HAL_UART_MspInit+0x210>)
 8002c06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c08:	4a3f      	ldr	r2, [pc, #252]	@ (8002d08 <HAL_UART_MspInit+0x210>)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2105      	movs	r1, #5
 8002c12:	2025      	movs	r0, #37	@ 0x25
 8002c14:	f000 fac1 	bl	800319a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c18:	2025      	movs	r0, #37	@ 0x25
 8002c1a:	f000 fada 	bl	80031d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002c1e:	e067      	b.n	8002cf0 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART6)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a3a      	ldr	r2, [pc, #232]	@ (8002d10 <HAL_UART_MspInit+0x218>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d162      	bne.n	8002cf0 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	4b33      	ldr	r3, [pc, #204]	@ (8002cfc <HAL_UART_MspInit+0x204>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	4a32      	ldr	r2, [pc, #200]	@ (8002cfc <HAL_UART_MspInit+0x204>)
 8002c34:	f043 0320 	orr.w	r3, r3, #32
 8002c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c3a:	4b30      	ldr	r3, [pc, #192]	@ (8002cfc <HAL_UART_MspInit+0x204>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cfc <HAL_UART_MspInit+0x204>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4e:	4a2b      	ldr	r2, [pc, #172]	@ (8002cfc <HAL_UART_MspInit+0x204>)
 8002c50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c56:	4b29      	ldr	r3, [pc, #164]	@ (8002cfc <HAL_UART_MspInit+0x204>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8002c62:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8002c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c70:	2303      	movs	r3, #3
 8002c72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c74:	2308      	movs	r3, #8
 8002c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c78:	f107 031c 	add.w	r3, r7, #28
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4825      	ldr	r0, [pc, #148]	@ (8002d14 <HAL_UART_MspInit+0x21c>)
 8002c80:	f000 fec4 	bl	8003a0c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002c84:	4b24      	ldr	r3, [pc, #144]	@ (8002d18 <HAL_UART_MspInit+0x220>)
 8002c86:	4a25      	ldr	r2, [pc, #148]	@ (8002d1c <HAL_UART_MspInit+0x224>)
 8002c88:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002c8a:	4b23      	ldr	r3, [pc, #140]	@ (8002d18 <HAL_UART_MspInit+0x220>)
 8002c8c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002c90:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c92:	4b21      	ldr	r3, [pc, #132]	@ (8002d18 <HAL_UART_MspInit+0x220>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c98:	4b1f      	ldr	r3, [pc, #124]	@ (8002d18 <HAL_UART_MspInit+0x220>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d18 <HAL_UART_MspInit+0x220>)
 8002ca0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ca4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d18 <HAL_UART_MspInit+0x220>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cac:	4b1a      	ldr	r3, [pc, #104]	@ (8002d18 <HAL_UART_MspInit+0x220>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002cb2:	4b19      	ldr	r3, [pc, #100]	@ (8002d18 <HAL_UART_MspInit+0x220>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cb8:	4b17      	ldr	r3, [pc, #92]	@ (8002d18 <HAL_UART_MspInit+0x220>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cbe:	4b16      	ldr	r3, [pc, #88]	@ (8002d18 <HAL_UART_MspInit+0x220>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002cc4:	4814      	ldr	r0, [pc, #80]	@ (8002d18 <HAL_UART_MspInit+0x220>)
 8002cc6:	f000 fa9f 	bl	8003208 <HAL_DMA_Init>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8002cd0:	f7ff fde7 	bl	80028a2 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a10      	ldr	r2, [pc, #64]	@ (8002d18 <HAL_UART_MspInit+0x220>)
 8002cd8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002cda:	4a0f      	ldr	r2, [pc, #60]	@ (8002d18 <HAL_UART_MspInit+0x220>)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2105      	movs	r1, #5
 8002ce4:	2047      	movs	r0, #71	@ 0x47
 8002ce6:	f000 fa58 	bl	800319a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002cea:	2047      	movs	r0, #71	@ 0x47
 8002cec:	f000 fa71 	bl	80031d2 <HAL_NVIC_EnableIRQ>
}
 8002cf0:	bf00      	nop
 8002cf2:	3730      	adds	r7, #48	@ 0x30
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40011000 	.word	0x40011000
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40020400 	.word	0x40020400
 8002d04:	40020000 	.word	0x40020000
 8002d08:	20000738 	.word	0x20000738
 8002d0c:	40026440 	.word	0x40026440
 8002d10:	40011400 	.word	0x40011400
 8002d14:	40021800 	.word	0x40021800
 8002d18:	20000798 	.word	0x20000798
 8002d1c:	40026428 	.word	0x40026428

08002d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <NMI_Handler+0x4>

08002d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <HardFault_Handler+0x4>

08002d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d34:	bf00      	nop
 8002d36:	e7fd      	b.n	8002d34 <MemManage_Handler+0x4>

08002d38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3c:	bf00      	nop
 8002d3e:	e7fd      	b.n	8002d3c <BusFault_Handler+0x4>

08002d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <UsageFault_Handler+0x4>

08002d48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d5a:	f000 f8ff 	bl	8002f5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002d5e:	f006 f9bb 	bl	80090d8 <xTaskGetSchedulerState>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d001      	beq.n	8002d6c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002d68:	f006 ffb6 	bl	8009cd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d6c:	bf00      	nop
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d74:	4802      	ldr	r0, [pc, #8]	@ (8002d80 <USART1_IRQHandler+0x10>)
 8002d76:	f003 fb71 	bl	800645c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	200006a8 	.word	0x200006a8

08002d84 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002d88:	4802      	ldr	r0, [pc, #8]	@ (8002d94 <DMA1_Stream7_IRQHandler+0x10>)
 8002d8a:	f000 fbd5 	bl	8003538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000648 	.word	0x20000648

08002d98 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002d9c:	4802      	ldr	r0, [pc, #8]	@ (8002da8 <DMA2_Stream1_IRQHandler+0x10>)
 8002d9e:	f000 fbcb 	bl	8003538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000798 	.word	0x20000798

08002dac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002db0:	4802      	ldr	r0, [pc, #8]	@ (8002dbc <DMA2_Stream2_IRQHandler+0x10>)
 8002db2:	f000 fbc1 	bl	8003538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000738 	.word	0x20000738

08002dc0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002dc4:	4802      	ldr	r0, [pc, #8]	@ (8002dd0 <USART6_IRQHandler+0x10>)
 8002dc6:	f003 fb49 	bl	800645c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	200006f0 	.word	0x200006f0

08002dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ddc:	4a14      	ldr	r2, [pc, #80]	@ (8002e30 <_sbrk+0x5c>)
 8002dde:	4b15      	ldr	r3, [pc, #84]	@ (8002e34 <_sbrk+0x60>)
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002de8:	4b13      	ldr	r3, [pc, #76]	@ (8002e38 <_sbrk+0x64>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d102      	bne.n	8002df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002df0:	4b11      	ldr	r3, [pc, #68]	@ (8002e38 <_sbrk+0x64>)
 8002df2:	4a12      	ldr	r2, [pc, #72]	@ (8002e3c <_sbrk+0x68>)
 8002df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002df6:	4b10      	ldr	r3, [pc, #64]	@ (8002e38 <_sbrk+0x64>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d207      	bcs.n	8002e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e04:	f007 fa10 	bl	800a228 <__errno>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	220c      	movs	r2, #12
 8002e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e12:	e009      	b.n	8002e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e14:	4b08      	ldr	r3, [pc, #32]	@ (8002e38 <_sbrk+0x64>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e1a:	4b07      	ldr	r3, [pc, #28]	@ (8002e38 <_sbrk+0x64>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4413      	add	r3, r2
 8002e22:	4a05      	ldr	r2, [pc, #20]	@ (8002e38 <_sbrk+0x64>)
 8002e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e26:	68fb      	ldr	r3, [r7, #12]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20020000 	.word	0x20020000
 8002e34:	00000400 	.word	0x00000400
 8002e38:	20000800 	.word	0x20000800
 8002e3c:	200052a0 	.word	0x200052a0

08002e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e44:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <SystemInit+0x20>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4a:	4a05      	ldr	r2, [pc, #20]	@ (8002e60 <SystemInit+0x20>)
 8002e4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e68:	f7ff ffea 	bl	8002e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e6c:	480c      	ldr	r0, [pc, #48]	@ (8002ea0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e6e:	490d      	ldr	r1, [pc, #52]	@ (8002ea4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e74:	e002      	b.n	8002e7c <LoopCopyDataInit>

08002e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e7a:	3304      	adds	r3, #4

08002e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e80:	d3f9      	bcc.n	8002e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e82:	4a0a      	ldr	r2, [pc, #40]	@ (8002eac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e84:	4c0a      	ldr	r4, [pc, #40]	@ (8002eb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e88:	e001      	b.n	8002e8e <LoopFillZerobss>

08002e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e8c:	3204      	adds	r2, #4

08002e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e90:	d3fb      	bcc.n	8002e8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e92:	f007 f9cf 	bl	800a234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e96:	f7ff fa07 	bl	80022a8 <main>
  bx  lr    
 8002e9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ea4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002ea8:	0800ae18 	.word	0x0800ae18
  ldr r2, =_sbss
 8002eac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002eb0:	200052a0 	.word	0x200052a0

08002eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eb4:	e7fe      	b.n	8002eb4 <ADC_IRQHandler>
	...

08002eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef8 <HAL_Init+0x40>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef8 <HAL_Init+0x40>)
 8002ec2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef8 <HAL_Init+0x40>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef8 <HAL_Init+0x40>)
 8002ece:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed4:	4b08      	ldr	r3, [pc, #32]	@ (8002ef8 <HAL_Init+0x40>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a07      	ldr	r2, [pc, #28]	@ (8002ef8 <HAL_Init+0x40>)
 8002eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ee0:	2003      	movs	r0, #3
 8002ee2:	f000 f94f 	bl	8003184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ee6:	200f      	movs	r0, #15
 8002ee8:	f000 f808 	bl	8002efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eec:	f7ff fce0 	bl	80028b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40023c00 	.word	0x40023c00

08002efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f04:	4b12      	ldr	r3, [pc, #72]	@ (8002f50 <HAL_InitTick+0x54>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b12      	ldr	r3, [pc, #72]	@ (8002f54 <HAL_InitTick+0x58>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f967 	bl	80031ee <HAL_SYSTICK_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e00e      	b.n	8002f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b0f      	cmp	r3, #15
 8002f2e:	d80a      	bhi.n	8002f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f30:	2200      	movs	r2, #0
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f38:	f000 f92f 	bl	800319a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f3c:	4a06      	ldr	r2, [pc, #24]	@ (8002f58 <HAL_InitTick+0x5c>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	e000      	b.n	8002f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20000004 	.word	0x20000004
 8002f54:	2000000c 	.word	0x2000000c
 8002f58:	20000008 	.word	0x20000008

08002f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f60:	4b06      	ldr	r3, [pc, #24]	@ (8002f7c <HAL_IncTick+0x20>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	4b06      	ldr	r3, [pc, #24]	@ (8002f80 <HAL_IncTick+0x24>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	4a04      	ldr	r2, [pc, #16]	@ (8002f80 <HAL_IncTick+0x24>)
 8002f6e:	6013      	str	r3, [r2, #0]
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	2000000c 	.word	0x2000000c
 8002f80:	20000804 	.word	0x20000804

08002f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  return uwTick;
 8002f88:	4b03      	ldr	r3, [pc, #12]	@ (8002f98 <HAL_GetTick+0x14>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	20000804 	.word	0x20000804

08002f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fa4:	f7ff ffee 	bl	8002f84 <HAL_GetTick>
 8002fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fb4:	d005      	beq.n	8002fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe0 <HAL_Delay+0x44>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fc2:	bf00      	nop
 8002fc4:	f7ff ffde 	bl	8002f84 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d8f7      	bhi.n	8002fc4 <HAL_Delay+0x28>
  {
  }
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	2000000c 	.word	0x2000000c

08002fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003000:	4013      	ands	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800300c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003016:	4a04      	ldr	r2, [pc, #16]	@ (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	60d3      	str	r3, [r2, #12]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003030:	4b04      	ldr	r3, [pc, #16]	@ (8003044 <__NVIC_GetPriorityGrouping+0x18>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	f003 0307 	and.w	r3, r3, #7
}
 800303a:	4618      	mov	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	2b00      	cmp	r3, #0
 8003058:	db0b      	blt.n	8003072 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	f003 021f 	and.w	r2, r3, #31
 8003060:	4907      	ldr	r1, [pc, #28]	@ (8003080 <__NVIC_EnableIRQ+0x38>)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2001      	movs	r0, #1
 800306a:	fa00 f202 	lsl.w	r2, r0, r2
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	e000e100 	.word	0xe000e100

08003084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	6039      	str	r1, [r7, #0]
 800308e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003094:	2b00      	cmp	r3, #0
 8003096:	db0a      	blt.n	80030ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	b2da      	uxtb	r2, r3
 800309c:	490c      	ldr	r1, [pc, #48]	@ (80030d0 <__NVIC_SetPriority+0x4c>)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	0112      	lsls	r2, r2, #4
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	440b      	add	r3, r1
 80030a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030ac:	e00a      	b.n	80030c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	4908      	ldr	r1, [pc, #32]	@ (80030d4 <__NVIC_SetPriority+0x50>)
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	3b04      	subs	r3, #4
 80030bc:	0112      	lsls	r2, r2, #4
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	440b      	add	r3, r1
 80030c2:	761a      	strb	r2, [r3, #24]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000e100 	.word	0xe000e100
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d8:	b480      	push	{r7}
 80030da:	b089      	sub	sp, #36	@ 0x24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f1c3 0307 	rsb	r3, r3, #7
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	bf28      	it	cs
 80030f6:	2304      	movcs	r3, #4
 80030f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3304      	adds	r3, #4
 80030fe:	2b06      	cmp	r3, #6
 8003100:	d902      	bls.n	8003108 <NVIC_EncodePriority+0x30>
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3b03      	subs	r3, #3
 8003106:	e000      	b.n	800310a <NVIC_EncodePriority+0x32>
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800310c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43da      	mvns	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	401a      	ands	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003120:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	fa01 f303 	lsl.w	r3, r1, r3
 800312a:	43d9      	mvns	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003130:	4313      	orrs	r3, r2
         );
}
 8003132:	4618      	mov	r0, r3
 8003134:	3724      	adds	r7, #36	@ 0x24
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003150:	d301      	bcc.n	8003156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003152:	2301      	movs	r3, #1
 8003154:	e00f      	b.n	8003176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003156:	4a0a      	ldr	r2, [pc, #40]	@ (8003180 <SysTick_Config+0x40>)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3b01      	subs	r3, #1
 800315c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800315e:	210f      	movs	r1, #15
 8003160:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003164:	f7ff ff8e 	bl	8003084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003168:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <SysTick_Config+0x40>)
 800316a:	2200      	movs	r2, #0
 800316c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800316e:	4b04      	ldr	r3, [pc, #16]	@ (8003180 <SysTick_Config+0x40>)
 8003170:	2207      	movs	r2, #7
 8003172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	e000e010 	.word	0xe000e010

08003184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff ff29 	bl	8002fe4 <__NVIC_SetPriorityGrouping>
}
 8003192:	bf00      	nop
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800319a:	b580      	push	{r7, lr}
 800319c:	b086      	sub	sp, #24
 800319e:	af00      	add	r7, sp, #0
 80031a0:	4603      	mov	r3, r0
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031ac:	f7ff ff3e 	bl	800302c <__NVIC_GetPriorityGrouping>
 80031b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	6978      	ldr	r0, [r7, #20]
 80031b8:	f7ff ff8e 	bl	80030d8 <NVIC_EncodePriority>
 80031bc:	4602      	mov	r2, r0
 80031be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c2:	4611      	mov	r1, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff ff5d 	bl	8003084 <__NVIC_SetPriority>
}
 80031ca:	bf00      	nop
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	4603      	mov	r3, r0
 80031da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff31 	bl	8003048 <__NVIC_EnableIRQ>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff ffa2 	bl	8003140 <SysTick_Config>
 80031fc:	4603      	mov	r3, r0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003214:	f7ff feb6 	bl	8002f84 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e099      	b.n	8003358 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003244:	e00f      	b.n	8003266 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003246:	f7ff fe9d 	bl	8002f84 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b05      	cmp	r3, #5
 8003252:	d908      	bls.n	8003266 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2203      	movs	r2, #3
 800325e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e078      	b.n	8003358 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e8      	bne.n	8003246 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	4b38      	ldr	r3, [pc, #224]	@ (8003360 <HAL_DMA_Init+0x158>)
 8003280:	4013      	ands	r3, r2
 8003282:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003292:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800329e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d107      	bne.n	80032d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	4313      	orrs	r3, r2
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f023 0307 	bic.w	r3, r3, #7
 80032e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d117      	bne.n	800332a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00e      	beq.n	800332a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fb01 	bl	8003914 <DMA_CheckFifoParam>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2240      	movs	r2, #64	@ 0x40
 800331c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003326:	2301      	movs	r3, #1
 8003328:	e016      	b.n	8003358 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fab8 	bl	80038a8 <DMA_CalcBaseAndBitshift>
 8003338:	4603      	mov	r3, r0
 800333a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003340:	223f      	movs	r2, #63	@ 0x3f
 8003342:	409a      	lsls	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	f010803f 	.word	0xf010803f

08003364 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_DMA_Start_IT+0x26>
 8003386:	2302      	movs	r3, #2
 8003388:	e040      	b.n	800340c <HAL_DMA_Start_IT+0xa8>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b01      	cmp	r3, #1
 800339c:	d12f      	bne.n	80033fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2202      	movs	r2, #2
 80033a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 fa4a 	bl	800384c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033bc:	223f      	movs	r2, #63	@ 0x3f
 80033be:	409a      	lsls	r2, r3
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0216 	orr.w	r2, r2, #22
 80033d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d007      	beq.n	80033ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0208 	orr.w	r2, r2, #8
 80033ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e005      	b.n	800340a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003406:	2302      	movs	r3, #2
 8003408:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800340a:	7dfb      	ldrb	r3, [r7, #23]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003420:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003422:	f7ff fdaf 	bl	8002f84 <HAL_GetTick>
 8003426:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d008      	beq.n	8003446 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2280      	movs	r2, #128	@ 0x80
 8003438:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e052      	b.n	80034ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0216 	bic.w	r2, r2, #22
 8003454:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003464:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d103      	bne.n	8003476 <HAL_DMA_Abort+0x62>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003472:	2b00      	cmp	r3, #0
 8003474:	d007      	beq.n	8003486 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0208 	bic.w	r2, r2, #8
 8003484:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0201 	bic.w	r2, r2, #1
 8003494:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003496:	e013      	b.n	80034c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003498:	f7ff fd74 	bl	8002f84 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b05      	cmp	r3, #5
 80034a4:	d90c      	bls.n	80034c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2220      	movs	r2, #32
 80034aa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2203      	movs	r2, #3
 80034b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e015      	b.n	80034ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1e4      	bne.n	8003498 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d2:	223f      	movs	r2, #63	@ 0x3f
 80034d4:	409a      	lsls	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d004      	beq.n	8003512 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2280      	movs	r2, #128	@ 0x80
 800350c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e00c      	b.n	800352c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2205      	movs	r2, #5
 8003516:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0201 	bic.w	r2, r2, #1
 8003528:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003544:	4b8e      	ldr	r3, [pc, #568]	@ (8003780 <HAL_DMA_IRQHandler+0x248>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a8e      	ldr	r2, [pc, #568]	@ (8003784 <HAL_DMA_IRQHandler+0x24c>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	0a9b      	lsrs	r3, r3, #10
 8003550:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003556:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003562:	2208      	movs	r2, #8
 8003564:	409a      	lsls	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d01a      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d013      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0204 	bic.w	r2, r2, #4
 800358a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003590:	2208      	movs	r2, #8
 8003592:	409a      	lsls	r2, r3
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800359c:	f043 0201 	orr.w	r2, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a8:	2201      	movs	r2, #1
 80035aa:	409a      	lsls	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d012      	beq.n	80035da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c6:	2201      	movs	r2, #1
 80035c8:	409a      	lsls	r2, r3
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d2:	f043 0202 	orr.w	r2, r3, #2
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035de:	2204      	movs	r2, #4
 80035e0:	409a      	lsls	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d012      	beq.n	8003610 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00b      	beq.n	8003610 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fc:	2204      	movs	r2, #4
 80035fe:	409a      	lsls	r2, r3
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003608:	f043 0204 	orr.w	r2, r3, #4
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003614:	2210      	movs	r2, #16
 8003616:	409a      	lsls	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4013      	ands	r3, r2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d043      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d03c      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003632:	2210      	movs	r2, #16
 8003634:	409a      	lsls	r2, r3
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d018      	beq.n	800367a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d108      	bne.n	8003668 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	2b00      	cmp	r3, #0
 800365c:	d024      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4798      	blx	r3
 8003666:	e01f      	b.n	80036a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800366c:	2b00      	cmp	r3, #0
 800366e:	d01b      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
 8003678:	e016      	b.n	80036a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d107      	bne.n	8003698 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0208 	bic.w	r2, r2, #8
 8003696:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ac:	2220      	movs	r2, #32
 80036ae:	409a      	lsls	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 808f 	beq.w	80037d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 8087 	beq.w	80037d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ce:	2220      	movs	r2, #32
 80036d0:	409a      	lsls	r2, r3
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b05      	cmp	r3, #5
 80036e0:	d136      	bne.n	8003750 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0216 	bic.w	r2, r2, #22
 80036f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695a      	ldr	r2, [r3, #20]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003700:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	d103      	bne.n	8003712 <HAL_DMA_IRQHandler+0x1da>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0208 	bic.w	r2, r2, #8
 8003720:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003726:	223f      	movs	r2, #63	@ 0x3f
 8003728:	409a      	lsls	r2, r3
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003742:	2b00      	cmp	r3, #0
 8003744:	d07e      	beq.n	8003844 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	4798      	blx	r3
        }
        return;
 800374e:	e079      	b.n	8003844 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d01d      	beq.n	800379a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10d      	bne.n	8003788 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003770:	2b00      	cmp	r3, #0
 8003772:	d031      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	4798      	blx	r3
 800377c:	e02c      	b.n	80037d8 <HAL_DMA_IRQHandler+0x2a0>
 800377e:	bf00      	nop
 8003780:	20000004 	.word	0x20000004
 8003784:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378c:	2b00      	cmp	r3, #0
 800378e:	d023      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	4798      	blx	r3
 8003798:	e01e      	b.n	80037d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10f      	bne.n	80037c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0210 	bic.w	r2, r2, #16
 80037b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d032      	beq.n	8003846 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d022      	beq.n	8003832 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2205      	movs	r2, #5
 80037f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0201 	bic.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	3301      	adds	r3, #1
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	429a      	cmp	r2, r3
 800380e:	d307      	bcc.n	8003820 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f2      	bne.n	8003804 <HAL_DMA_IRQHandler+0x2cc>
 800381e:	e000      	b.n	8003822 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003820:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	4798      	blx	r3
 8003842:	e000      	b.n	8003846 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003844:	bf00      	nop
    }
  }
}
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003868:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b40      	cmp	r3, #64	@ 0x40
 8003878:	d108      	bne.n	800388c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800388a:	e007      	b.n	800389c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	60da      	str	r2, [r3, #12]
}
 800389c:	bf00      	nop
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	3b10      	subs	r3, #16
 80038b8:	4a14      	ldr	r2, [pc, #80]	@ (800390c <DMA_CalcBaseAndBitshift+0x64>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	091b      	lsrs	r3, r3, #4
 80038c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038c2:	4a13      	ldr	r2, [pc, #76]	@ (8003910 <DMA_CalcBaseAndBitshift+0x68>)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4413      	add	r3, r2
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d909      	bls.n	80038ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038de:	f023 0303 	bic.w	r3, r3, #3
 80038e2:	1d1a      	adds	r2, r3, #4
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80038e8:	e007      	b.n	80038fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038f2:	f023 0303 	bic.w	r3, r3, #3
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	aaaaaaab 	.word	0xaaaaaaab
 8003910:	0800adcc 	.word	0x0800adcc

08003914 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003924:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d11f      	bne.n	800396e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b03      	cmp	r3, #3
 8003932:	d856      	bhi.n	80039e2 <DMA_CheckFifoParam+0xce>
 8003934:	a201      	add	r2, pc, #4	@ (adr r2, 800393c <DMA_CheckFifoParam+0x28>)
 8003936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393a:	bf00      	nop
 800393c:	0800394d 	.word	0x0800394d
 8003940:	0800395f 	.word	0x0800395f
 8003944:	0800394d 	.word	0x0800394d
 8003948:	080039e3 	.word	0x080039e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003950:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d046      	beq.n	80039e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800395c:	e043      	b.n	80039e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003962:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003966:	d140      	bne.n	80039ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800396c:	e03d      	b.n	80039ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003976:	d121      	bne.n	80039bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b03      	cmp	r3, #3
 800397c:	d837      	bhi.n	80039ee <DMA_CheckFifoParam+0xda>
 800397e:	a201      	add	r2, pc, #4	@ (adr r2, 8003984 <DMA_CheckFifoParam+0x70>)
 8003980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003984:	08003995 	.word	0x08003995
 8003988:	0800399b 	.word	0x0800399b
 800398c:	08003995 	.word	0x08003995
 8003990:	080039ad 	.word	0x080039ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	73fb      	strb	r3, [r7, #15]
      break;
 8003998:	e030      	b.n	80039fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d025      	beq.n	80039f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039aa:	e022      	b.n	80039f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80039b4:	d11f      	bne.n	80039f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039ba:	e01c      	b.n	80039f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d903      	bls.n	80039ca <DMA_CheckFifoParam+0xb6>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d003      	beq.n	80039d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039c8:	e018      	b.n	80039fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	73fb      	strb	r3, [r7, #15]
      break;
 80039ce:	e015      	b.n	80039fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00e      	beq.n	80039fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	73fb      	strb	r3, [r7, #15]
      break;
 80039e0:	e00b      	b.n	80039fa <DMA_CheckFifoParam+0xe6>
      break;
 80039e2:	bf00      	nop
 80039e4:	e00a      	b.n	80039fc <DMA_CheckFifoParam+0xe8>
      break;
 80039e6:	bf00      	nop
 80039e8:	e008      	b.n	80039fc <DMA_CheckFifoParam+0xe8>
      break;
 80039ea:	bf00      	nop
 80039ec:	e006      	b.n	80039fc <DMA_CheckFifoParam+0xe8>
      break;
 80039ee:	bf00      	nop
 80039f0:	e004      	b.n	80039fc <DMA_CheckFifoParam+0xe8>
      break;
 80039f2:	bf00      	nop
 80039f4:	e002      	b.n	80039fc <DMA_CheckFifoParam+0xe8>
      break;   
 80039f6:	bf00      	nop
 80039f8:	e000      	b.n	80039fc <DMA_CheckFifoParam+0xe8>
      break;
 80039fa:	bf00      	nop
    }
  } 
  
  return status; 
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop

08003a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b089      	sub	sp, #36	@ 0x24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	e16b      	b.n	8003d00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a28:	2201      	movs	r2, #1
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	f040 815a 	bne.w	8003cfa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d005      	beq.n	8003a5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d130      	bne.n	8003ac0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	2203      	movs	r2, #3
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a94:	2201      	movs	r2, #1
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f003 0201 	and.w	r2, r3, #1
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d017      	beq.n	8003afc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d123      	bne.n	8003b50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	08da      	lsrs	r2, r3, #3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3208      	adds	r2, #8
 8003b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	220f      	movs	r2, #15
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	08da      	lsrs	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3208      	adds	r2, #8
 8003b4a:	69b9      	ldr	r1, [r7, #24]
 8003b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 0203 	and.w	r2, r3, #3
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80b4 	beq.w	8003cfa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	4b60      	ldr	r3, [pc, #384]	@ (8003d18 <HAL_GPIO_Init+0x30c>)
 8003b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9a:	4a5f      	ldr	r2, [pc, #380]	@ (8003d18 <HAL_GPIO_Init+0x30c>)
 8003b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ba2:	4b5d      	ldr	r3, [pc, #372]	@ (8003d18 <HAL_GPIO_Init+0x30c>)
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bae:	4a5b      	ldr	r2, [pc, #364]	@ (8003d1c <HAL_GPIO_Init+0x310>)
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	089b      	lsrs	r3, r3, #2
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	220f      	movs	r2, #15
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a52      	ldr	r2, [pc, #328]	@ (8003d20 <HAL_GPIO_Init+0x314>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d02b      	beq.n	8003c32 <HAL_GPIO_Init+0x226>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a51      	ldr	r2, [pc, #324]	@ (8003d24 <HAL_GPIO_Init+0x318>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d025      	beq.n	8003c2e <HAL_GPIO_Init+0x222>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a50      	ldr	r2, [pc, #320]	@ (8003d28 <HAL_GPIO_Init+0x31c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d01f      	beq.n	8003c2a <HAL_GPIO_Init+0x21e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a4f      	ldr	r2, [pc, #316]	@ (8003d2c <HAL_GPIO_Init+0x320>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d019      	beq.n	8003c26 <HAL_GPIO_Init+0x21a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a4e      	ldr	r2, [pc, #312]	@ (8003d30 <HAL_GPIO_Init+0x324>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d013      	beq.n	8003c22 <HAL_GPIO_Init+0x216>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a4d      	ldr	r2, [pc, #308]	@ (8003d34 <HAL_GPIO_Init+0x328>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00d      	beq.n	8003c1e <HAL_GPIO_Init+0x212>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a4c      	ldr	r2, [pc, #304]	@ (8003d38 <HAL_GPIO_Init+0x32c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d007      	beq.n	8003c1a <HAL_GPIO_Init+0x20e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a4b      	ldr	r2, [pc, #300]	@ (8003d3c <HAL_GPIO_Init+0x330>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d101      	bne.n	8003c16 <HAL_GPIO_Init+0x20a>
 8003c12:	2307      	movs	r3, #7
 8003c14:	e00e      	b.n	8003c34 <HAL_GPIO_Init+0x228>
 8003c16:	2308      	movs	r3, #8
 8003c18:	e00c      	b.n	8003c34 <HAL_GPIO_Init+0x228>
 8003c1a:	2306      	movs	r3, #6
 8003c1c:	e00a      	b.n	8003c34 <HAL_GPIO_Init+0x228>
 8003c1e:	2305      	movs	r3, #5
 8003c20:	e008      	b.n	8003c34 <HAL_GPIO_Init+0x228>
 8003c22:	2304      	movs	r3, #4
 8003c24:	e006      	b.n	8003c34 <HAL_GPIO_Init+0x228>
 8003c26:	2303      	movs	r3, #3
 8003c28:	e004      	b.n	8003c34 <HAL_GPIO_Init+0x228>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e002      	b.n	8003c34 <HAL_GPIO_Init+0x228>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <HAL_GPIO_Init+0x228>
 8003c32:	2300      	movs	r3, #0
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	f002 0203 	and.w	r2, r2, #3
 8003c3a:	0092      	lsls	r2, r2, #2
 8003c3c:	4093      	lsls	r3, r2
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c44:	4935      	ldr	r1, [pc, #212]	@ (8003d1c <HAL_GPIO_Init+0x310>)
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	089b      	lsrs	r3, r3, #2
 8003c4a:	3302      	adds	r3, #2
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c52:	4b3b      	ldr	r3, [pc, #236]	@ (8003d40 <HAL_GPIO_Init+0x334>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c76:	4a32      	ldr	r2, [pc, #200]	@ (8003d40 <HAL_GPIO_Init+0x334>)
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c7c:	4b30      	ldr	r3, [pc, #192]	@ (8003d40 <HAL_GPIO_Init+0x334>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ca0:	4a27      	ldr	r2, [pc, #156]	@ (8003d40 <HAL_GPIO_Init+0x334>)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ca6:	4b26      	ldr	r3, [pc, #152]	@ (8003d40 <HAL_GPIO_Init+0x334>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cca:	4a1d      	ldr	r2, [pc, #116]	@ (8003d40 <HAL_GPIO_Init+0x334>)
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d40 <HAL_GPIO_Init+0x334>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cf4:	4a12      	ldr	r2, [pc, #72]	@ (8003d40 <HAL_GPIO_Init+0x334>)
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	61fb      	str	r3, [r7, #28]
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	2b0f      	cmp	r3, #15
 8003d04:	f67f ae90 	bls.w	8003a28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d08:	bf00      	nop
 8003d0a:	bf00      	nop
 8003d0c:	3724      	adds	r7, #36	@ 0x24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	40013800 	.word	0x40013800
 8003d20:	40020000 	.word	0x40020000
 8003d24:	40020400 	.word	0x40020400
 8003d28:	40020800 	.word	0x40020800
 8003d2c:	40020c00 	.word	0x40020c00
 8003d30:	40021000 	.word	0x40021000
 8003d34:	40021400 	.word	0x40021400
 8003d38:	40021800 	.word	0x40021800
 8003d3c:	40021c00 	.word	0x40021c00
 8003d40:	40013c00 	.word	0x40013c00

08003d44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	887b      	ldrh	r3, [r7, #2]
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	73fb      	strb	r3, [r7, #15]
 8003d60:	e001      	b.n	8003d66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d62:	2300      	movs	r3, #0
 8003d64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	807b      	strh	r3, [r7, #2]
 8003d80:	4613      	mov	r3, r2
 8003d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d84:	787b      	ldrb	r3, [r7, #1]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d8a:	887a      	ldrh	r2, [r7, #2]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d90:	e003      	b.n	8003d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d92:	887b      	ldrh	r3, [r7, #2]
 8003d94:	041a      	lsls	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	619a      	str	r2, [r3, #24]
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
	...

08003da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e12b      	b.n	8004012 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fe fd9a 	bl	8002908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2224      	movs	r2, #36	@ 0x24
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0201 	bic.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003dfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e0c:	f001 fc20 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 8003e10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	4a81      	ldr	r2, [pc, #516]	@ (800401c <HAL_I2C_Init+0x274>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d807      	bhi.n	8003e2c <HAL_I2C_Init+0x84>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4a80      	ldr	r2, [pc, #512]	@ (8004020 <HAL_I2C_Init+0x278>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	bf94      	ite	ls
 8003e24:	2301      	movls	r3, #1
 8003e26:	2300      	movhi	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	e006      	b.n	8003e3a <HAL_I2C_Init+0x92>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a7d      	ldr	r2, [pc, #500]	@ (8004024 <HAL_I2C_Init+0x27c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	bf94      	ite	ls
 8003e34:	2301      	movls	r3, #1
 8003e36:	2300      	movhi	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0e7      	b.n	8004012 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4a78      	ldr	r2, [pc, #480]	@ (8004028 <HAL_I2C_Init+0x280>)
 8003e46:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4a:	0c9b      	lsrs	r3, r3, #18
 8003e4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	4a6a      	ldr	r2, [pc, #424]	@ (800401c <HAL_I2C_Init+0x274>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d802      	bhi.n	8003e7c <HAL_I2C_Init+0xd4>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	e009      	b.n	8003e90 <HAL_I2C_Init+0xe8>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e82:	fb02 f303 	mul.w	r3, r2, r3
 8003e86:	4a69      	ldr	r2, [pc, #420]	@ (800402c <HAL_I2C_Init+0x284>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	099b      	lsrs	r3, r3, #6
 8003e8e:	3301      	adds	r3, #1
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ea2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	495c      	ldr	r1, [pc, #368]	@ (800401c <HAL_I2C_Init+0x274>)
 8003eac:	428b      	cmp	r3, r1
 8003eae:	d819      	bhi.n	8003ee4 <HAL_I2C_Init+0x13c>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1e59      	subs	r1, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ebe:	1c59      	adds	r1, r3, #1
 8003ec0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ec4:	400b      	ands	r3, r1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_I2C_Init+0x138>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1e59      	subs	r1, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ed8:	3301      	adds	r3, #1
 8003eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ede:	e051      	b.n	8003f84 <HAL_I2C_Init+0x1dc>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	e04f      	b.n	8003f84 <HAL_I2C_Init+0x1dc>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d111      	bne.n	8003f10 <HAL_I2C_Init+0x168>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	1e58      	subs	r0, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	440b      	add	r3, r1
 8003efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003efe:	3301      	adds	r3, #1
 8003f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf0c      	ite	eq
 8003f08:	2301      	moveq	r3, #1
 8003f0a:	2300      	movne	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	e012      	b.n	8003f36 <HAL_I2C_Init+0x18e>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	1e58      	subs	r0, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	0099      	lsls	r1, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f26:	3301      	adds	r3, #1
 8003f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_I2C_Init+0x196>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e022      	b.n	8003f84 <HAL_I2C_Init+0x1dc>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10e      	bne.n	8003f64 <HAL_I2C_Init+0x1bc>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1e58      	subs	r0, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6859      	ldr	r1, [r3, #4]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	440b      	add	r3, r1
 8003f54:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f58:	3301      	adds	r3, #1
 8003f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f62:	e00f      	b.n	8003f84 <HAL_I2C_Init+0x1dc>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	1e58      	subs	r0, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6859      	ldr	r1, [r3, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	0099      	lsls	r1, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	6809      	ldr	r1, [r1, #0]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003fb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6911      	ldr	r1, [r2, #16]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	68d2      	ldr	r2, [r2, #12]
 8003fbe:	4311      	orrs	r1, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695a      	ldr	r2, [r3, #20]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	000186a0 	.word	0x000186a0
 8004020:	001e847f 	.word	0x001e847f
 8004024:	003d08ff 	.word	0x003d08ff
 8004028:	431bde83 	.word	0x431bde83
 800402c:	10624dd3 	.word	0x10624dd3

08004030 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	4608      	mov	r0, r1
 800403a:	4611      	mov	r1, r2
 800403c:	461a      	mov	r2, r3
 800403e:	4603      	mov	r3, r0
 8004040:	817b      	strh	r3, [r7, #10]
 8004042:	460b      	mov	r3, r1
 8004044:	813b      	strh	r3, [r7, #8]
 8004046:	4613      	mov	r3, r2
 8004048:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800404a:	f7fe ff9b 	bl	8002f84 <HAL_GetTick>
 800404e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b20      	cmp	r3, #32
 800405a:	f040 80d9 	bne.w	8004210 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	2319      	movs	r3, #25
 8004064:	2201      	movs	r2, #1
 8004066:	496d      	ldr	r1, [pc, #436]	@ (800421c <HAL_I2C_Mem_Write+0x1ec>)
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 fc8b 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004074:	2302      	movs	r3, #2
 8004076:	e0cc      	b.n	8004212 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_I2C_Mem_Write+0x56>
 8004082:	2302      	movs	r3, #2
 8004084:	e0c5      	b.n	8004212 <HAL_I2C_Mem_Write+0x1e2>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b01      	cmp	r3, #1
 800409a:	d007      	beq.n	80040ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2221      	movs	r2, #33	@ 0x21
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2240      	movs	r2, #64	@ 0x40
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a3a      	ldr	r2, [r7, #32]
 80040d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80040dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4a4d      	ldr	r2, [pc, #308]	@ (8004220 <HAL_I2C_Mem_Write+0x1f0>)
 80040ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040ee:	88f8      	ldrh	r0, [r7, #6]
 80040f0:	893a      	ldrh	r2, [r7, #8]
 80040f2:	8979      	ldrh	r1, [r7, #10]
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	4603      	mov	r3, r0
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 fac2 	bl	8004688 <I2C_RequestMemoryWrite>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d052      	beq.n	80041b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e081      	b.n	8004212 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fd50 	bl	8004bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00d      	beq.n	800413a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	2b04      	cmp	r3, #4
 8004124:	d107      	bne.n	8004136 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004134:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e06b      	b.n	8004212 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413e:	781a      	ldrb	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b04      	cmp	r3, #4
 8004176:	d11b      	bne.n	80041b0 <HAL_I2C_Mem_Write+0x180>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800417c:	2b00      	cmp	r3, #0
 800417e:	d017      	beq.n	80041b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	781a      	ldrb	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1aa      	bne.n	800410e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 fd43 	bl	8004c48 <I2C_WaitOnBTFFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00d      	beq.n	80041e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d107      	bne.n	80041e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e016      	b.n	8004212 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	e000      	b.n	8004212 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	00100002 	.word	0x00100002
 8004220:	ffff0000 	.word	0xffff0000

08004224 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08c      	sub	sp, #48	@ 0x30
 8004228:	af02      	add	r7, sp, #8
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	4608      	mov	r0, r1
 800422e:	4611      	mov	r1, r2
 8004230:	461a      	mov	r2, r3
 8004232:	4603      	mov	r3, r0
 8004234:	817b      	strh	r3, [r7, #10]
 8004236:	460b      	mov	r3, r1
 8004238:	813b      	strh	r3, [r7, #8]
 800423a:	4613      	mov	r3, r2
 800423c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800423e:	f7fe fea1 	bl	8002f84 <HAL_GetTick>
 8004242:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b20      	cmp	r3, #32
 800424e:	f040 8214 	bne.w	800467a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	2319      	movs	r3, #25
 8004258:	2201      	movs	r2, #1
 800425a:	497b      	ldr	r1, [pc, #492]	@ (8004448 <HAL_I2C_Mem_Read+0x224>)
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 fb91 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004268:	2302      	movs	r3, #2
 800426a:	e207      	b.n	800467c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_I2C_Mem_Read+0x56>
 8004276:	2302      	movs	r3, #2
 8004278:	e200      	b.n	800467c <HAL_I2C_Mem_Read+0x458>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b01      	cmp	r3, #1
 800428e:	d007      	beq.n	80042a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2222      	movs	r2, #34	@ 0x22
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2240      	movs	r2, #64	@ 0x40
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80042d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4a5b      	ldr	r2, [pc, #364]	@ (800444c <HAL_I2C_Mem_Read+0x228>)
 80042e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042e2:	88f8      	ldrh	r0, [r7, #6]
 80042e4:	893a      	ldrh	r2, [r7, #8]
 80042e6:	8979      	ldrh	r1, [r7, #10]
 80042e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	4603      	mov	r3, r0
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 fa5e 	bl	80047b4 <I2C_RequestMemoryRead>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e1bc      	b.n	800467c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004306:	2b00      	cmp	r3, #0
 8004308:	d113      	bne.n	8004332 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430a:	2300      	movs	r3, #0
 800430c:	623b      	str	r3, [r7, #32]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	623b      	str	r3, [r7, #32]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	623b      	str	r3, [r7, #32]
 800431e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	e190      	b.n	8004654 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004336:	2b01      	cmp	r3, #1
 8004338:	d11b      	bne.n	8004372 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004348:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434a:	2300      	movs	r3, #0
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	61fb      	str	r3, [r7, #28]
 800435e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	e170      	b.n	8004654 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004376:	2b02      	cmp	r3, #2
 8004378:	d11b      	bne.n	80043b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004388:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004398:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439a:	2300      	movs	r3, #0
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	e150      	b.n	8004654 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043c8:	e144      	b.n	8004654 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	f200 80f1 	bhi.w	80045b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d123      	bne.n	8004424 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 fc79 	bl	8004cd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e145      	b.n	800467c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004422:	e117      	b.n	8004654 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004428:	2b02      	cmp	r3, #2
 800442a:	d14e      	bne.n	80044ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800442c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004432:	2200      	movs	r2, #0
 8004434:	4906      	ldr	r1, [pc, #24]	@ (8004450 <HAL_I2C_Mem_Read+0x22c>)
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 faa4 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d008      	beq.n	8004454 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e11a      	b.n	800467c <HAL_I2C_Mem_Read+0x458>
 8004446:	bf00      	nop
 8004448:	00100002 	.word	0x00100002
 800444c:	ffff0000 	.word	0xffff0000
 8004450:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004462:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691a      	ldr	r2, [r3, #16]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044c8:	e0c4      	b.n	8004654 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d0:	2200      	movs	r2, #0
 80044d2:	496c      	ldr	r1, [pc, #432]	@ (8004684 <HAL_I2C_Mem_Read+0x460>)
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fa55 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0cb      	b.n	800467c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452c:	2200      	movs	r2, #0
 800452e:	4955      	ldr	r1, [pc, #340]	@ (8004684 <HAL_I2C_Mem_Read+0x460>)
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fa27 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e09d      	b.n	800467c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800454e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045b4:	e04e      	b.n	8004654 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 fb8c 	bl	8004cd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e058      	b.n	800467c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b04      	cmp	r3, #4
 8004608:	d124      	bne.n	8004654 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460e:	2b03      	cmp	r3, #3
 8004610:	d107      	bne.n	8004622 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004620:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004658:	2b00      	cmp	r3, #0
 800465a:	f47f aeb6 	bne.w	80043ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	e000      	b.n	800467c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800467a:	2302      	movs	r3, #2
  }
}
 800467c:	4618      	mov	r0, r3
 800467e:	3728      	adds	r7, #40	@ 0x28
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	00010004 	.word	0x00010004

08004688 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af02      	add	r7, sp, #8
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	4608      	mov	r0, r1
 8004692:	4611      	mov	r1, r2
 8004694:	461a      	mov	r2, r3
 8004696:	4603      	mov	r3, r0
 8004698:	817b      	strh	r3, [r7, #10]
 800469a:	460b      	mov	r3, r1
 800469c:	813b      	strh	r3, [r7, #8]
 800469e:	4613      	mov	r3, r2
 80046a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f960 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00d      	beq.n	80046e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046d8:	d103      	bne.n	80046e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e05f      	b.n	80047a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046e6:	897b      	ldrh	r3, [r7, #10]
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	461a      	mov	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	6a3a      	ldr	r2, [r7, #32]
 80046fa:	492d      	ldr	r1, [pc, #180]	@ (80047b0 <I2C_RequestMemoryWrite+0x128>)
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 f9bb 	bl	8004a78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e04c      	b.n	80047a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004724:	6a39      	ldr	r1, [r7, #32]
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 fa46 	bl	8004bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00d      	beq.n	800474e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004736:	2b04      	cmp	r3, #4
 8004738:	d107      	bne.n	800474a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004748:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e02b      	b.n	80047a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800474e:	88fb      	ldrh	r3, [r7, #6]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d105      	bne.n	8004760 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004754:	893b      	ldrh	r3, [r7, #8]
 8004756:	b2da      	uxtb	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	611a      	str	r2, [r3, #16]
 800475e:	e021      	b.n	80047a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004760:	893b      	ldrh	r3, [r7, #8]
 8004762:	0a1b      	lsrs	r3, r3, #8
 8004764:	b29b      	uxth	r3, r3
 8004766:	b2da      	uxtb	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800476e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004770:	6a39      	ldr	r1, [r7, #32]
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fa20 	bl	8004bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00d      	beq.n	800479a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004782:	2b04      	cmp	r3, #4
 8004784:	d107      	bne.n	8004796 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004794:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e005      	b.n	80047a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800479a:	893b      	ldrh	r3, [r7, #8]
 800479c:	b2da      	uxtb	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	00010002 	.word	0x00010002

080047b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	4608      	mov	r0, r1
 80047be:	4611      	mov	r1, r2
 80047c0:	461a      	mov	r2, r3
 80047c2:	4603      	mov	r3, r0
 80047c4:	817b      	strh	r3, [r7, #10]
 80047c6:	460b      	mov	r3, r1
 80047c8:	813b      	strh	r3, [r7, #8]
 80047ca:	4613      	mov	r3, r2
 80047cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f8c2 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00d      	beq.n	8004822 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004810:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004814:	d103      	bne.n	800481e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800481c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e0aa      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004822:	897b      	ldrh	r3, [r7, #10]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	461a      	mov	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004830:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	6a3a      	ldr	r2, [r7, #32]
 8004836:	4952      	ldr	r1, [pc, #328]	@ (8004980 <I2C_RequestMemoryRead+0x1cc>)
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 f91d 	bl	8004a78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e097      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800485e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004860:	6a39      	ldr	r1, [r7, #32]
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f9a8 	bl	8004bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00d      	beq.n	800488a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004872:	2b04      	cmp	r3, #4
 8004874:	d107      	bne.n	8004886 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004884:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e076      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d105      	bne.n	800489c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004890:	893b      	ldrh	r3, [r7, #8]
 8004892:	b2da      	uxtb	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	611a      	str	r2, [r3, #16]
 800489a:	e021      	b.n	80048e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800489c:	893b      	ldrh	r3, [r7, #8]
 800489e:	0a1b      	lsrs	r3, r3, #8
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ac:	6a39      	ldr	r1, [r7, #32]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f982 	bl	8004bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00d      	beq.n	80048d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d107      	bne.n	80048d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e050      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048d6:	893b      	ldrh	r3, [r7, #8]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e2:	6a39      	ldr	r1, [r7, #32]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f967 	bl	8004bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00d      	beq.n	800490c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d107      	bne.n	8004908 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004906:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e035      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800491a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800491c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	2200      	movs	r2, #0
 8004924:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f82b 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00d      	beq.n	8004950 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004942:	d103      	bne.n	800494c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800494a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e013      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004950:	897b      	ldrh	r3, [r7, #10]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	b2da      	uxtb	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004962:	6a3a      	ldr	r2, [r7, #32]
 8004964:	4906      	ldr	r1, [pc, #24]	@ (8004980 <I2C_RequestMemoryRead+0x1cc>)
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f886 	bl	8004a78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	00010002 	.word	0x00010002

08004984 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	4613      	mov	r3, r2
 8004992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004994:	e048      	b.n	8004a28 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800499c:	d044      	beq.n	8004a28 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499e:	f7fe faf1 	bl	8002f84 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d302      	bcc.n	80049b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d139      	bne.n	8004a28 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	0c1b      	lsrs	r3, r3, #16
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d10d      	bne.n	80049da <I2C_WaitOnFlagUntilTimeout+0x56>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	43da      	mvns	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	4013      	ands	r3, r2
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bf0c      	ite	eq
 80049d0:	2301      	moveq	r3, #1
 80049d2:	2300      	movne	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	e00c      	b.n	80049f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	43da      	mvns	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d116      	bne.n	8004a28 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a14:	f043 0220 	orr.w	r2, r3, #32
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e023      	b.n	8004a70 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	0c1b      	lsrs	r3, r3, #16
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d10d      	bne.n	8004a4e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	43da      	mvns	r2, r3
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bf0c      	ite	eq
 8004a44:	2301      	moveq	r3, #1
 8004a46:	2300      	movne	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	e00c      	b.n	8004a68 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	43da      	mvns	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bf0c      	ite	eq
 8004a60:	2301      	moveq	r3, #1
 8004a62:	2300      	movne	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d093      	beq.n	8004996 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a86:	e071      	b.n	8004b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a96:	d123      	bne.n	8004ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aa6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ab0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004acc:	f043 0204 	orr.w	r2, r3, #4
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e067      	b.n	8004bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ae6:	d041      	beq.n	8004b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae8:	f7fe fa4c 	bl	8002f84 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d302      	bcc.n	8004afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d136      	bne.n	8004b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	0c1b      	lsrs	r3, r3, #16
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d10c      	bne.n	8004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	43da      	mvns	r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	4013      	ands	r3, r2
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	bf14      	ite	ne
 8004b1a:	2301      	movne	r3, #1
 8004b1c:	2300      	moveq	r3, #0
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	e00b      	b.n	8004b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	43da      	mvns	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bf14      	ite	ne
 8004b34:	2301      	movne	r3, #1
 8004b36:	2300      	moveq	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d016      	beq.n	8004b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b58:	f043 0220 	orr.w	r2, r3, #32
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e021      	b.n	8004bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	0c1b      	lsrs	r3, r3, #16
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d10c      	bne.n	8004b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	43da      	mvns	r2, r3
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4013      	ands	r3, r2
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	e00b      	b.n	8004ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	43da      	mvns	r2, r3
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	bf14      	ite	ne
 8004ba2:	2301      	movne	r3, #1
 8004ba4:	2300      	moveq	r3, #0
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f47f af6d 	bne.w	8004a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bc4:	e034      	b.n	8004c30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 f8e3 	bl	8004d92 <I2C_IsAcknowledgeFailed>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e034      	b.n	8004c40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bdc:	d028      	beq.n	8004c30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bde:	f7fe f9d1 	bl	8002f84 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d302      	bcc.n	8004bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d11d      	bne.n	8004c30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bfe:	2b80      	cmp	r3, #128	@ 0x80
 8004c00:	d016      	beq.n	8004c30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1c:	f043 0220 	orr.w	r2, r3, #32
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e007      	b.n	8004c40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c3a:	2b80      	cmp	r3, #128	@ 0x80
 8004c3c:	d1c3      	bne.n	8004bc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c54:	e034      	b.n	8004cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 f89b 	bl	8004d92 <I2C_IsAcknowledgeFailed>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e034      	b.n	8004cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c6c:	d028      	beq.n	8004cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6e:	f7fe f989 	bl	8002f84 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d302      	bcc.n	8004c84 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d11d      	bne.n	8004cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d016      	beq.n	8004cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cac:	f043 0220 	orr.w	r2, r3, #32
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e007      	b.n	8004cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d1c3      	bne.n	8004c56 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ce4:	e049      	b.n	8004d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b10      	cmp	r3, #16
 8004cf2:	d119      	bne.n	8004d28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0210 	mvn.w	r2, #16
 8004cfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e030      	b.n	8004d8a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d28:	f7fe f92c 	bl	8002f84 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d302      	bcc.n	8004d3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d11d      	bne.n	8004d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d48:	2b40      	cmp	r3, #64	@ 0x40
 8004d4a:	d016      	beq.n	8004d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d66:	f043 0220 	orr.w	r2, r3, #32
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e007      	b.n	8004d8a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d84:	2b40      	cmp	r3, #64	@ 0x40
 8004d86:	d1ae      	bne.n	8004ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004da4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004da8:	d11b      	bne.n	8004de2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004db2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dce:	f043 0204 	orr.w	r2, r3, #4
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e267      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d075      	beq.n	8004efa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e0e:	4b88      	ldr	r3, [pc, #544]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 030c 	and.w	r3, r3, #12
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d00c      	beq.n	8004e34 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e1a:	4b85      	ldr	r3, [pc, #532]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d112      	bne.n	8004e4c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e26:	4b82      	ldr	r3, [pc, #520]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e32:	d10b      	bne.n	8004e4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e34:	4b7e      	ldr	r3, [pc, #504]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d05b      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x108>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d157      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e242      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e54:	d106      	bne.n	8004e64 <HAL_RCC_OscConfig+0x74>
 8004e56:	4b76      	ldr	r3, [pc, #472]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a75      	ldr	r2, [pc, #468]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	e01d      	b.n	8004ea0 <HAL_RCC_OscConfig+0xb0>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e6c:	d10c      	bne.n	8004e88 <HAL_RCC_OscConfig+0x98>
 8004e6e:	4b70      	ldr	r3, [pc, #448]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a6f      	ldr	r2, [pc, #444]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	4b6d      	ldr	r3, [pc, #436]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a6c      	ldr	r2, [pc, #432]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	e00b      	b.n	8004ea0 <HAL_RCC_OscConfig+0xb0>
 8004e88:	4b69      	ldr	r3, [pc, #420]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a68      	ldr	r2, [pc, #416]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e92:	6013      	str	r3, [r2, #0]
 8004e94:	4b66      	ldr	r3, [pc, #408]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a65      	ldr	r2, [pc, #404]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d013      	beq.n	8004ed0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea8:	f7fe f86c 	bl	8002f84 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eb0:	f7fe f868 	bl	8002f84 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b64      	cmp	r3, #100	@ 0x64
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e207      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec2:	4b5b      	ldr	r3, [pc, #364]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0f0      	beq.n	8004eb0 <HAL_RCC_OscConfig+0xc0>
 8004ece:	e014      	b.n	8004efa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed0:	f7fe f858 	bl	8002f84 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ed8:	f7fe f854 	bl	8002f84 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b64      	cmp	r3, #100	@ 0x64
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e1f3      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eea:	4b51      	ldr	r3, [pc, #324]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f0      	bne.n	8004ed8 <HAL_RCC_OscConfig+0xe8>
 8004ef6:	e000      	b.n	8004efa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d063      	beq.n	8004fce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f06:	4b4a      	ldr	r3, [pc, #296]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 030c 	and.w	r3, r3, #12
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00b      	beq.n	8004f2a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f12:	4b47      	ldr	r3, [pc, #284]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d11c      	bne.n	8004f58 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f1e:	4b44      	ldr	r3, [pc, #272]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d116      	bne.n	8004f58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f2a:	4b41      	ldr	r3, [pc, #260]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d005      	beq.n	8004f42 <HAL_RCC_OscConfig+0x152>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d001      	beq.n	8004f42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e1c7      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f42:	4b3b      	ldr	r3, [pc, #236]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4937      	ldr	r1, [pc, #220]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f56:	e03a      	b.n	8004fce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d020      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f60:	4b34      	ldr	r3, [pc, #208]	@ (8005034 <HAL_RCC_OscConfig+0x244>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f66:	f7fe f80d 	bl	8002f84 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f6e:	f7fe f809 	bl	8002f84 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e1a8      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f80:	4b2b      	ldr	r3, [pc, #172]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f0      	beq.n	8004f6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8c:	4b28      	ldr	r3, [pc, #160]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	4925      	ldr	r1, [pc, #148]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	600b      	str	r3, [r1, #0]
 8004fa0:	e015      	b.n	8004fce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fa2:	4b24      	ldr	r3, [pc, #144]	@ (8005034 <HAL_RCC_OscConfig+0x244>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7fd ffec 	bl	8002f84 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fb0:	f7fd ffe8 	bl	8002f84 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e187      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d036      	beq.n	8005048 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d016      	beq.n	8005010 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fe2:	4b15      	ldr	r3, [pc, #84]	@ (8005038 <HAL_RCC_OscConfig+0x248>)
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe8:	f7fd ffcc 	bl	8002f84 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff0:	f7fd ffc8 	bl	8002f84 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e167      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005002:	4b0b      	ldr	r3, [pc, #44]	@ (8005030 <HAL_RCC_OscConfig+0x240>)
 8005004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f0      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x200>
 800500e:	e01b      	b.n	8005048 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005010:	4b09      	ldr	r3, [pc, #36]	@ (8005038 <HAL_RCC_OscConfig+0x248>)
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005016:	f7fd ffb5 	bl	8002f84 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800501c:	e00e      	b.n	800503c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800501e:	f7fd ffb1 	bl	8002f84 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d907      	bls.n	800503c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e150      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
 8005030:	40023800 	.word	0x40023800
 8005034:	42470000 	.word	0x42470000
 8005038:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800503c:	4b88      	ldr	r3, [pc, #544]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 800503e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1ea      	bne.n	800501e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8097 	beq.w	8005184 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005056:	2300      	movs	r3, #0
 8005058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800505a:	4b81      	ldr	r3, [pc, #516]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10f      	bne.n	8005086 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005066:	2300      	movs	r3, #0
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	4b7d      	ldr	r3, [pc, #500]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 800506c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506e:	4a7c      	ldr	r2, [pc, #496]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 8005070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005074:	6413      	str	r3, [r2, #64]	@ 0x40
 8005076:	4b7a      	ldr	r3, [pc, #488]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800507e:	60bb      	str	r3, [r7, #8]
 8005080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005082:	2301      	movs	r3, #1
 8005084:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005086:	4b77      	ldr	r3, [pc, #476]	@ (8005264 <HAL_RCC_OscConfig+0x474>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800508e:	2b00      	cmp	r3, #0
 8005090:	d118      	bne.n	80050c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005092:	4b74      	ldr	r3, [pc, #464]	@ (8005264 <HAL_RCC_OscConfig+0x474>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a73      	ldr	r2, [pc, #460]	@ (8005264 <HAL_RCC_OscConfig+0x474>)
 8005098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800509c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800509e:	f7fd ff71 	bl	8002f84 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a6:	f7fd ff6d 	bl	8002f84 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e10c      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b8:	4b6a      	ldr	r3, [pc, #424]	@ (8005264 <HAL_RCC_OscConfig+0x474>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0f0      	beq.n	80050a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d106      	bne.n	80050da <HAL_RCC_OscConfig+0x2ea>
 80050cc:	4b64      	ldr	r3, [pc, #400]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 80050ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d0:	4a63      	ldr	r2, [pc, #396]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 80050d2:	f043 0301 	orr.w	r3, r3, #1
 80050d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80050d8:	e01c      	b.n	8005114 <HAL_RCC_OscConfig+0x324>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	2b05      	cmp	r3, #5
 80050e0:	d10c      	bne.n	80050fc <HAL_RCC_OscConfig+0x30c>
 80050e2:	4b5f      	ldr	r3, [pc, #380]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e6:	4a5e      	ldr	r2, [pc, #376]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 80050e8:	f043 0304 	orr.w	r3, r3, #4
 80050ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80050ee:	4b5c      	ldr	r3, [pc, #368]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f2:	4a5b      	ldr	r2, [pc, #364]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 80050f4:	f043 0301 	orr.w	r3, r3, #1
 80050f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80050fa:	e00b      	b.n	8005114 <HAL_RCC_OscConfig+0x324>
 80050fc:	4b58      	ldr	r3, [pc, #352]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 80050fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005100:	4a57      	ldr	r2, [pc, #348]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 8005102:	f023 0301 	bic.w	r3, r3, #1
 8005106:	6713      	str	r3, [r2, #112]	@ 0x70
 8005108:	4b55      	ldr	r3, [pc, #340]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 800510a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510c:	4a54      	ldr	r2, [pc, #336]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 800510e:	f023 0304 	bic.w	r3, r3, #4
 8005112:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d015      	beq.n	8005148 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511c:	f7fd ff32 	bl	8002f84 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005122:	e00a      	b.n	800513a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005124:	f7fd ff2e 	bl	8002f84 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005132:	4293      	cmp	r3, r2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e0cb      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513a:	4b49      	ldr	r3, [pc, #292]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0ee      	beq.n	8005124 <HAL_RCC_OscConfig+0x334>
 8005146:	e014      	b.n	8005172 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005148:	f7fd ff1c 	bl	8002f84 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800514e:	e00a      	b.n	8005166 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005150:	f7fd ff18 	bl	8002f84 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800515e:	4293      	cmp	r3, r2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e0b5      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005166:	4b3e      	ldr	r3, [pc, #248]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 8005168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1ee      	bne.n	8005150 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005172:	7dfb      	ldrb	r3, [r7, #23]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d105      	bne.n	8005184 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005178:	4b39      	ldr	r3, [pc, #228]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 800517a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517c:	4a38      	ldr	r2, [pc, #224]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 800517e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005182:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 80a1 	beq.w	80052d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800518e:	4b34      	ldr	r3, [pc, #208]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b08      	cmp	r3, #8
 8005198:	d05c      	beq.n	8005254 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d141      	bne.n	8005226 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a2:	4b31      	ldr	r3, [pc, #196]	@ (8005268 <HAL_RCC_OscConfig+0x478>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a8:	f7fd feec 	bl	8002f84 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b0:	f7fd fee8 	bl	8002f84 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e087      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c2:	4b27      	ldr	r3, [pc, #156]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69da      	ldr	r2, [r3, #28]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051dc:	019b      	lsls	r3, r3, #6
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e4:	085b      	lsrs	r3, r3, #1
 80051e6:	3b01      	subs	r3, #1
 80051e8:	041b      	lsls	r3, r3, #16
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f0:	061b      	lsls	r3, r3, #24
 80051f2:	491b      	ldr	r1, [pc, #108]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005268 <HAL_RCC_OscConfig+0x478>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fe:	f7fd fec1 	bl	8002f84 <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005204:	e008      	b.n	8005218 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005206:	f7fd febd 	bl	8002f84 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e05c      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005218:	4b11      	ldr	r3, [pc, #68]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0f0      	beq.n	8005206 <HAL_RCC_OscConfig+0x416>
 8005224:	e054      	b.n	80052d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005226:	4b10      	ldr	r3, [pc, #64]	@ (8005268 <HAL_RCC_OscConfig+0x478>)
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522c:	f7fd feaa 	bl	8002f84 <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005234:	f7fd fea6 	bl	8002f84 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e045      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005246:	4b06      	ldr	r3, [pc, #24]	@ (8005260 <HAL_RCC_OscConfig+0x470>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f0      	bne.n	8005234 <HAL_RCC_OscConfig+0x444>
 8005252:	e03d      	b.n	80052d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d107      	bne.n	800526c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e038      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
 8005260:	40023800 	.word	0x40023800
 8005264:	40007000 	.word	0x40007000
 8005268:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800526c:	4b1b      	ldr	r3, [pc, #108]	@ (80052dc <HAL_RCC_OscConfig+0x4ec>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d028      	beq.n	80052cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005284:	429a      	cmp	r2, r3
 8005286:	d121      	bne.n	80052cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005292:	429a      	cmp	r2, r3
 8005294:	d11a      	bne.n	80052cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800529c:	4013      	ands	r3, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d111      	bne.n	80052cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b2:	085b      	lsrs	r3, r3, #1
 80052b4:	3b01      	subs	r3, #1
 80052b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d107      	bne.n	80052cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d001      	beq.n	80052d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	40023800 	.word	0x40023800

080052e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0cc      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052f4:	4b68      	ldr	r3, [pc, #416]	@ (8005498 <HAL_RCC_ClockConfig+0x1b8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d90c      	bls.n	800531c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005302:	4b65      	ldr	r3, [pc, #404]	@ (8005498 <HAL_RCC_ClockConfig+0x1b8>)
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800530a:	4b63      	ldr	r3, [pc, #396]	@ (8005498 <HAL_RCC_ClockConfig+0x1b8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d001      	beq.n	800531c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e0b8      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d020      	beq.n	800536a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005334:	4b59      	ldr	r3, [pc, #356]	@ (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	4a58      	ldr	r2, [pc, #352]	@ (800549c <HAL_RCC_ClockConfig+0x1bc>)
 800533a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800533e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800534c:	4b53      	ldr	r3, [pc, #332]	@ (800549c <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	4a52      	ldr	r2, [pc, #328]	@ (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005356:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005358:	4b50      	ldr	r3, [pc, #320]	@ (800549c <HAL_RCC_ClockConfig+0x1bc>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	494d      	ldr	r1, [pc, #308]	@ (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005366:	4313      	orrs	r3, r2
 8005368:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d044      	beq.n	8005400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d107      	bne.n	800538e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537e:	4b47      	ldr	r3, [pc, #284]	@ (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d119      	bne.n	80053be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e07f      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d003      	beq.n	800539e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800539a:	2b03      	cmp	r3, #3
 800539c:	d107      	bne.n	80053ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800539e:	4b3f      	ldr	r3, [pc, #252]	@ (800549c <HAL_RCC_ClockConfig+0x1bc>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e06f      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ae:	4b3b      	ldr	r3, [pc, #236]	@ (800549c <HAL_RCC_ClockConfig+0x1bc>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e067      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053be:	4b37      	ldr	r3, [pc, #220]	@ (800549c <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f023 0203 	bic.w	r2, r3, #3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4934      	ldr	r1, [pc, #208]	@ (800549c <HAL_RCC_ClockConfig+0x1bc>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053d0:	f7fd fdd8 	bl	8002f84 <HAL_GetTick>
 80053d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d6:	e00a      	b.n	80053ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d8:	f7fd fdd4 	bl	8002f84 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e04f      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ee:	4b2b      	ldr	r3, [pc, #172]	@ (800549c <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 020c 	and.w	r2, r3, #12
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d1eb      	bne.n	80053d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005400:	4b25      	ldr	r3, [pc, #148]	@ (8005498 <HAL_RCC_ClockConfig+0x1b8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d20c      	bcs.n	8005428 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540e:	4b22      	ldr	r3, [pc, #136]	@ (8005498 <HAL_RCC_ClockConfig+0x1b8>)
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005416:	4b20      	ldr	r3, [pc, #128]	@ (8005498 <HAL_RCC_ClockConfig+0x1b8>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d001      	beq.n	8005428 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e032      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d008      	beq.n	8005446 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005434:	4b19      	ldr	r3, [pc, #100]	@ (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	4916      	ldr	r1, [pc, #88]	@ (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005442:	4313      	orrs	r3, r2
 8005444:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d009      	beq.n	8005466 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005452:	4b12      	ldr	r3, [pc, #72]	@ (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	490e      	ldr	r1, [pc, #56]	@ (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005462:	4313      	orrs	r3, r2
 8005464:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005466:	f000 f821 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 800546a:	4602      	mov	r2, r0
 800546c:	4b0b      	ldr	r3, [pc, #44]	@ (800549c <HAL_RCC_ClockConfig+0x1bc>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	091b      	lsrs	r3, r3, #4
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	490a      	ldr	r1, [pc, #40]	@ (80054a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005478:	5ccb      	ldrb	r3, [r1, r3]
 800547a:	fa22 f303 	lsr.w	r3, r2, r3
 800547e:	4a09      	ldr	r2, [pc, #36]	@ (80054a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005482:	4b09      	ldr	r3, [pc, #36]	@ (80054a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f7fd fd38 	bl	8002efc <HAL_InitTick>

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	40023c00 	.word	0x40023c00
 800549c:	40023800 	.word	0x40023800
 80054a0:	0800adb4 	.word	0x0800adb4
 80054a4:	20000004 	.word	0x20000004
 80054a8:	20000008 	.word	0x20000008

080054ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054b0:	b090      	sub	sp, #64	@ 0x40
 80054b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054c4:	4b59      	ldr	r3, [pc, #356]	@ (800562c <HAL_RCC_GetSysClockFreq+0x180>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 030c 	and.w	r3, r3, #12
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d00d      	beq.n	80054ec <HAL_RCC_GetSysClockFreq+0x40>
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	f200 80a1 	bhi.w	8005618 <HAL_RCC_GetSysClockFreq+0x16c>
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <HAL_RCC_GetSysClockFreq+0x34>
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d003      	beq.n	80054e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80054de:	e09b      	b.n	8005618 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054e0:	4b53      	ldr	r3, [pc, #332]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x184>)
 80054e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054e4:	e09b      	b.n	800561e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054e6:	4b53      	ldr	r3, [pc, #332]	@ (8005634 <HAL_RCC_GetSysClockFreq+0x188>)
 80054e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054ea:	e098      	b.n	800561e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054ec:	4b4f      	ldr	r3, [pc, #316]	@ (800562c <HAL_RCC_GetSysClockFreq+0x180>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054f6:	4b4d      	ldr	r3, [pc, #308]	@ (800562c <HAL_RCC_GetSysClockFreq+0x180>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d028      	beq.n	8005554 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005502:	4b4a      	ldr	r3, [pc, #296]	@ (800562c <HAL_RCC_GetSysClockFreq+0x180>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	099b      	lsrs	r3, r3, #6
 8005508:	2200      	movs	r2, #0
 800550a:	623b      	str	r3, [r7, #32]
 800550c:	627a      	str	r2, [r7, #36]	@ 0x24
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005514:	2100      	movs	r1, #0
 8005516:	4b47      	ldr	r3, [pc, #284]	@ (8005634 <HAL_RCC_GetSysClockFreq+0x188>)
 8005518:	fb03 f201 	mul.w	r2, r3, r1
 800551c:	2300      	movs	r3, #0
 800551e:	fb00 f303 	mul.w	r3, r0, r3
 8005522:	4413      	add	r3, r2
 8005524:	4a43      	ldr	r2, [pc, #268]	@ (8005634 <HAL_RCC_GetSysClockFreq+0x188>)
 8005526:	fba0 1202 	umull	r1, r2, r0, r2
 800552a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800552c:	460a      	mov	r2, r1
 800552e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005530:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005532:	4413      	add	r3, r2
 8005534:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005538:	2200      	movs	r2, #0
 800553a:	61bb      	str	r3, [r7, #24]
 800553c:	61fa      	str	r2, [r7, #28]
 800553e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005542:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005546:	f7fb f999 	bl	800087c <__aeabi_uldivmod>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	4613      	mov	r3, r2
 8005550:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005552:	e053      	b.n	80055fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005554:	4b35      	ldr	r3, [pc, #212]	@ (800562c <HAL_RCC_GetSysClockFreq+0x180>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	099b      	lsrs	r3, r3, #6
 800555a:	2200      	movs	r2, #0
 800555c:	613b      	str	r3, [r7, #16]
 800555e:	617a      	str	r2, [r7, #20]
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005566:	f04f 0b00 	mov.w	fp, #0
 800556a:	4652      	mov	r2, sl
 800556c:	465b      	mov	r3, fp
 800556e:	f04f 0000 	mov.w	r0, #0
 8005572:	f04f 0100 	mov.w	r1, #0
 8005576:	0159      	lsls	r1, r3, #5
 8005578:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800557c:	0150      	lsls	r0, r2, #5
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	ebb2 080a 	subs.w	r8, r2, sl
 8005586:	eb63 090b 	sbc.w	r9, r3, fp
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005596:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800559a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800559e:	ebb2 0408 	subs.w	r4, r2, r8
 80055a2:	eb63 0509 	sbc.w	r5, r3, r9
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	00eb      	lsls	r3, r5, #3
 80055b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055b4:	00e2      	lsls	r2, r4, #3
 80055b6:	4614      	mov	r4, r2
 80055b8:	461d      	mov	r5, r3
 80055ba:	eb14 030a 	adds.w	r3, r4, sl
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	eb45 030b 	adc.w	r3, r5, fp
 80055c4:	607b      	str	r3, [r7, #4]
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	f04f 0300 	mov.w	r3, #0
 80055ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055d2:	4629      	mov	r1, r5
 80055d4:	028b      	lsls	r3, r1, #10
 80055d6:	4621      	mov	r1, r4
 80055d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055dc:	4621      	mov	r1, r4
 80055de:	028a      	lsls	r2, r1, #10
 80055e0:	4610      	mov	r0, r2
 80055e2:	4619      	mov	r1, r3
 80055e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e6:	2200      	movs	r2, #0
 80055e8:	60bb      	str	r3, [r7, #8]
 80055ea:	60fa      	str	r2, [r7, #12]
 80055ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055f0:	f7fb f944 	bl	800087c <__aeabi_uldivmod>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4613      	mov	r3, r2
 80055fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80055fc:	4b0b      	ldr	r3, [pc, #44]	@ (800562c <HAL_RCC_GetSysClockFreq+0x180>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	0c1b      	lsrs	r3, r3, #16
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	3301      	adds	r3, #1
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800560c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800560e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005610:	fbb2 f3f3 	udiv	r3, r2, r3
 8005614:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005616:	e002      	b.n	800561e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005618:	4b05      	ldr	r3, [pc, #20]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x184>)
 800561a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800561c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800561e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005620:	4618      	mov	r0, r3
 8005622:	3740      	adds	r7, #64	@ 0x40
 8005624:	46bd      	mov	sp, r7
 8005626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800562a:	bf00      	nop
 800562c:	40023800 	.word	0x40023800
 8005630:	00f42400 	.word	0x00f42400
 8005634:	00b71b00 	.word	0x00b71b00

08005638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800563c:	4b03      	ldr	r3, [pc, #12]	@ (800564c <HAL_RCC_GetHCLKFreq+0x14>)
 800563e:	681b      	ldr	r3, [r3, #0]
}
 8005640:	4618      	mov	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	20000004 	.word	0x20000004

08005650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005654:	f7ff fff0 	bl	8005638 <HAL_RCC_GetHCLKFreq>
 8005658:	4602      	mov	r2, r0
 800565a:	4b05      	ldr	r3, [pc, #20]	@ (8005670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	0a9b      	lsrs	r3, r3, #10
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	4903      	ldr	r1, [pc, #12]	@ (8005674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005666:	5ccb      	ldrb	r3, [r1, r3]
 8005668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800566c:	4618      	mov	r0, r3
 800566e:	bd80      	pop	{r7, pc}
 8005670:	40023800 	.word	0x40023800
 8005674:	0800adc4 	.word	0x0800adc4

08005678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800567c:	f7ff ffdc 	bl	8005638 <HAL_RCC_GetHCLKFreq>
 8005680:	4602      	mov	r2, r0
 8005682:	4b05      	ldr	r3, [pc, #20]	@ (8005698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	0b5b      	lsrs	r3, r3, #13
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	4903      	ldr	r1, [pc, #12]	@ (800569c <HAL_RCC_GetPCLK2Freq+0x24>)
 800568e:	5ccb      	ldrb	r3, [r1, r3]
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005694:	4618      	mov	r0, r3
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40023800 	.word	0x40023800
 800569c:	0800adc4 	.word	0x0800adc4

080056a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d001      	beq.n	80056b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e046      	b.n	8005746 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a23      	ldr	r2, [pc, #140]	@ (8005754 <HAL_TIM_Base_Start+0xb4>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d022      	beq.n	8005710 <HAL_TIM_Base_Start+0x70>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056d2:	d01d      	beq.n	8005710 <HAL_TIM_Base_Start+0x70>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005758 <HAL_TIM_Base_Start+0xb8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d018      	beq.n	8005710 <HAL_TIM_Base_Start+0x70>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a1e      	ldr	r2, [pc, #120]	@ (800575c <HAL_TIM_Base_Start+0xbc>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d013      	beq.n	8005710 <HAL_TIM_Base_Start+0x70>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005760 <HAL_TIM_Base_Start+0xc0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00e      	beq.n	8005710 <HAL_TIM_Base_Start+0x70>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005764 <HAL_TIM_Base_Start+0xc4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d009      	beq.n	8005710 <HAL_TIM_Base_Start+0x70>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a19      	ldr	r2, [pc, #100]	@ (8005768 <HAL_TIM_Base_Start+0xc8>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d004      	beq.n	8005710 <HAL_TIM_Base_Start+0x70>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a18      	ldr	r2, [pc, #96]	@ (800576c <HAL_TIM_Base_Start+0xcc>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d111      	bne.n	8005734 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b06      	cmp	r3, #6
 8005720:	d010      	beq.n	8005744 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0201 	orr.w	r2, r2, #1
 8005730:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005732:	e007      	b.n	8005744 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40010000 	.word	0x40010000
 8005758:	40000400 	.word	0x40000400
 800575c:	40000800 	.word	0x40000800
 8005760:	40000c00 	.word	0x40000c00
 8005764:	40010400 	.word	0x40010400
 8005768:	40014000 	.word	0x40014000
 800576c:	40001800 	.word	0x40001800

08005770 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e041      	b.n	8005806 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fd f920 	bl	80029dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3304      	adds	r3, #4
 80057ac:	4619      	mov	r1, r3
 80057ae:	4610      	mov	r0, r2
 80057b0:	f000 fa28 	bl	8005c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d109      	bne.n	8005834 <HAL_TIM_PWM_Start+0x24>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b01      	cmp	r3, #1
 800582a:	bf14      	ite	ne
 800582c:	2301      	movne	r3, #1
 800582e:	2300      	moveq	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	e022      	b.n	800587a <HAL_TIM_PWM_Start+0x6a>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2b04      	cmp	r3, #4
 8005838:	d109      	bne.n	800584e <HAL_TIM_PWM_Start+0x3e>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b01      	cmp	r3, #1
 8005844:	bf14      	ite	ne
 8005846:	2301      	movne	r3, #1
 8005848:	2300      	moveq	r3, #0
 800584a:	b2db      	uxtb	r3, r3
 800584c:	e015      	b.n	800587a <HAL_TIM_PWM_Start+0x6a>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b08      	cmp	r3, #8
 8005852:	d109      	bne.n	8005868 <HAL_TIM_PWM_Start+0x58>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b01      	cmp	r3, #1
 800585e:	bf14      	ite	ne
 8005860:	2301      	movne	r3, #1
 8005862:	2300      	moveq	r3, #0
 8005864:	b2db      	uxtb	r3, r3
 8005866:	e008      	b.n	800587a <HAL_TIM_PWM_Start+0x6a>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b01      	cmp	r3, #1
 8005872:	bf14      	ite	ne
 8005874:	2301      	movne	r3, #1
 8005876:	2300      	moveq	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e07c      	b.n	800597c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d104      	bne.n	8005892 <HAL_TIM_PWM_Start+0x82>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005890:	e013      	b.n	80058ba <HAL_TIM_PWM_Start+0xaa>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b04      	cmp	r3, #4
 8005896:	d104      	bne.n	80058a2 <HAL_TIM_PWM_Start+0x92>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058a0:	e00b      	b.n	80058ba <HAL_TIM_PWM_Start+0xaa>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d104      	bne.n	80058b2 <HAL_TIM_PWM_Start+0xa2>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058b0:	e003      	b.n	80058ba <HAL_TIM_PWM_Start+0xaa>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2202      	movs	r2, #2
 80058b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2201      	movs	r2, #1
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fbf4 	bl	80060b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a2d      	ldr	r2, [pc, #180]	@ (8005984 <HAL_TIM_PWM_Start+0x174>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d004      	beq.n	80058dc <HAL_TIM_PWM_Start+0xcc>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005988 <HAL_TIM_PWM_Start+0x178>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d101      	bne.n	80058e0 <HAL_TIM_PWM_Start+0xd0>
 80058dc:	2301      	movs	r3, #1
 80058de:	e000      	b.n	80058e2 <HAL_TIM_PWM_Start+0xd2>
 80058e0:	2300      	movs	r3, #0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d007      	beq.n	80058f6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a22      	ldr	r2, [pc, #136]	@ (8005984 <HAL_TIM_PWM_Start+0x174>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d022      	beq.n	8005946 <HAL_TIM_PWM_Start+0x136>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005908:	d01d      	beq.n	8005946 <HAL_TIM_PWM_Start+0x136>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a1f      	ldr	r2, [pc, #124]	@ (800598c <HAL_TIM_PWM_Start+0x17c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d018      	beq.n	8005946 <HAL_TIM_PWM_Start+0x136>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a1d      	ldr	r2, [pc, #116]	@ (8005990 <HAL_TIM_PWM_Start+0x180>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d013      	beq.n	8005946 <HAL_TIM_PWM_Start+0x136>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a1c      	ldr	r2, [pc, #112]	@ (8005994 <HAL_TIM_PWM_Start+0x184>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d00e      	beq.n	8005946 <HAL_TIM_PWM_Start+0x136>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a16      	ldr	r2, [pc, #88]	@ (8005988 <HAL_TIM_PWM_Start+0x178>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d009      	beq.n	8005946 <HAL_TIM_PWM_Start+0x136>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a18      	ldr	r2, [pc, #96]	@ (8005998 <HAL_TIM_PWM_Start+0x188>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d004      	beq.n	8005946 <HAL_TIM_PWM_Start+0x136>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a16      	ldr	r2, [pc, #88]	@ (800599c <HAL_TIM_PWM_Start+0x18c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d111      	bne.n	800596a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b06      	cmp	r3, #6
 8005956:	d010      	beq.n	800597a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0201 	orr.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005968:	e007      	b.n	800597a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f042 0201 	orr.w	r2, r2, #1
 8005978:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40010000 	.word	0x40010000
 8005988:	40010400 	.word	0x40010400
 800598c:	40000400 	.word	0x40000400
 8005990:	40000800 	.word	0x40000800
 8005994:	40000c00 	.word	0x40000c00
 8005998:	40014000 	.word	0x40014000
 800599c:	40001800 	.word	0x40001800

080059a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2200      	movs	r2, #0
 80059b0:	6839      	ldr	r1, [r7, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fb7c 	bl	80060b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a2e      	ldr	r2, [pc, #184]	@ (8005a78 <HAL_TIM_PWM_Stop+0xd8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d004      	beq.n	80059cc <HAL_TIM_PWM_Stop+0x2c>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a2d      	ldr	r2, [pc, #180]	@ (8005a7c <HAL_TIM_PWM_Stop+0xdc>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d101      	bne.n	80059d0 <HAL_TIM_PWM_Stop+0x30>
 80059cc:	2301      	movs	r3, #1
 80059ce:	e000      	b.n	80059d2 <HAL_TIM_PWM_Stop+0x32>
 80059d0:	2300      	movs	r3, #0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d017      	beq.n	8005a06 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6a1a      	ldr	r2, [r3, #32]
 80059dc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80059e0:	4013      	ands	r3, r2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10f      	bne.n	8005a06 <HAL_TIM_PWM_Stop+0x66>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6a1a      	ldr	r2, [r3, #32]
 80059ec:	f240 4344 	movw	r3, #1092	@ 0x444
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d107      	bne.n	8005a06 <HAL_TIM_PWM_Stop+0x66>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6a1a      	ldr	r2, [r3, #32]
 8005a0c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a10:	4013      	ands	r3, r2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10f      	bne.n	8005a36 <HAL_TIM_PWM_Stop+0x96>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6a1a      	ldr	r2, [r3, #32]
 8005a1c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d107      	bne.n	8005a36 <HAL_TIM_PWM_Stop+0x96>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0201 	bic.w	r2, r2, #1
 8005a34:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d104      	bne.n	8005a46 <HAL_TIM_PWM_Stop+0xa6>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a44:	e013      	b.n	8005a6e <HAL_TIM_PWM_Stop+0xce>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d104      	bne.n	8005a56 <HAL_TIM_PWM_Stop+0xb6>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a54:	e00b      	b.n	8005a6e <HAL_TIM_PWM_Stop+0xce>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d104      	bne.n	8005a66 <HAL_TIM_PWM_Stop+0xc6>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a64:	e003      	b.n	8005a6e <HAL_TIM_PWM_Stop+0xce>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40010000 	.word	0x40010000
 8005a7c:	40010400 	.word	0x40010400

08005a80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e0ae      	b.n	8005bfc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b0c      	cmp	r3, #12
 8005aaa:	f200 809f 	bhi.w	8005bec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005aae:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab4:	08005ae9 	.word	0x08005ae9
 8005ab8:	08005bed 	.word	0x08005bed
 8005abc:	08005bed 	.word	0x08005bed
 8005ac0:	08005bed 	.word	0x08005bed
 8005ac4:	08005b29 	.word	0x08005b29
 8005ac8:	08005bed 	.word	0x08005bed
 8005acc:	08005bed 	.word	0x08005bed
 8005ad0:	08005bed 	.word	0x08005bed
 8005ad4:	08005b6b 	.word	0x08005b6b
 8005ad8:	08005bed 	.word	0x08005bed
 8005adc:	08005bed 	.word	0x08005bed
 8005ae0:	08005bed 	.word	0x08005bed
 8005ae4:	08005bab 	.word	0x08005bab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68b9      	ldr	r1, [r7, #8]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 f92e 	bl	8005d50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0208 	orr.w	r2, r2, #8
 8005b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0204 	bic.w	r2, r2, #4
 8005b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6999      	ldr	r1, [r3, #24]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	691a      	ldr	r2, [r3, #16]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	619a      	str	r2, [r3, #24]
      break;
 8005b26:	e064      	b.n	8005bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68b9      	ldr	r1, [r7, #8]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 f97e 	bl	8005e30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699a      	ldr	r2, [r3, #24]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6999      	ldr	r1, [r3, #24]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	021a      	lsls	r2, r3, #8
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	619a      	str	r2, [r3, #24]
      break;
 8005b68:	e043      	b.n	8005bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68b9      	ldr	r1, [r7, #8]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 f9d3 	bl	8005f1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f042 0208 	orr.w	r2, r2, #8
 8005b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0204 	bic.w	r2, r2, #4
 8005b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69d9      	ldr	r1, [r3, #28]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	691a      	ldr	r2, [r3, #16]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	61da      	str	r2, [r3, #28]
      break;
 8005ba8:	e023      	b.n	8005bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fa27 	bl	8006004 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69da      	ldr	r2, [r3, #28]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69d9      	ldr	r1, [r3, #28]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	021a      	lsls	r2, r3, #8
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	61da      	str	r2, [r3, #28]
      break;
 8005bea:	e002      	b.n	8005bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	75fb      	strb	r3, [r7, #23]
      break;
 8005bf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a43      	ldr	r2, [pc, #268]	@ (8005d24 <TIM_Base_SetConfig+0x120>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d013      	beq.n	8005c44 <TIM_Base_SetConfig+0x40>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c22:	d00f      	beq.n	8005c44 <TIM_Base_SetConfig+0x40>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a40      	ldr	r2, [pc, #256]	@ (8005d28 <TIM_Base_SetConfig+0x124>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d00b      	beq.n	8005c44 <TIM_Base_SetConfig+0x40>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a3f      	ldr	r2, [pc, #252]	@ (8005d2c <TIM_Base_SetConfig+0x128>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d007      	beq.n	8005c44 <TIM_Base_SetConfig+0x40>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a3e      	ldr	r2, [pc, #248]	@ (8005d30 <TIM_Base_SetConfig+0x12c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d003      	beq.n	8005c44 <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a3d      	ldr	r2, [pc, #244]	@ (8005d34 <TIM_Base_SetConfig+0x130>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d108      	bne.n	8005c56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a32      	ldr	r2, [pc, #200]	@ (8005d24 <TIM_Base_SetConfig+0x120>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d02b      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c64:	d027      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a2f      	ldr	r2, [pc, #188]	@ (8005d28 <TIM_Base_SetConfig+0x124>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d023      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a2e      	ldr	r2, [pc, #184]	@ (8005d2c <TIM_Base_SetConfig+0x128>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d01f      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a2d      	ldr	r2, [pc, #180]	@ (8005d30 <TIM_Base_SetConfig+0x12c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d01b      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a2c      	ldr	r2, [pc, #176]	@ (8005d34 <TIM_Base_SetConfig+0x130>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d017      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a2b      	ldr	r2, [pc, #172]	@ (8005d38 <TIM_Base_SetConfig+0x134>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d013      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2a      	ldr	r2, [pc, #168]	@ (8005d3c <TIM_Base_SetConfig+0x138>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d00f      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a29      	ldr	r2, [pc, #164]	@ (8005d40 <TIM_Base_SetConfig+0x13c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00b      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a28      	ldr	r2, [pc, #160]	@ (8005d44 <TIM_Base_SetConfig+0x140>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d007      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a27      	ldr	r2, [pc, #156]	@ (8005d48 <TIM_Base_SetConfig+0x144>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d003      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a26      	ldr	r2, [pc, #152]	@ (8005d4c <TIM_Base_SetConfig+0x148>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d108      	bne.n	8005cc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a0e      	ldr	r2, [pc, #56]	@ (8005d24 <TIM_Base_SetConfig+0x120>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d003      	beq.n	8005cf6 <TIM_Base_SetConfig+0xf2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a10      	ldr	r2, [pc, #64]	@ (8005d34 <TIM_Base_SetConfig+0x130>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d103      	bne.n	8005cfe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	691a      	ldr	r2, [r3, #16]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f043 0204 	orr.w	r2, r3, #4
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	601a      	str	r2, [r3, #0]
}
 8005d16:	bf00      	nop
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40010000 	.word	0x40010000
 8005d28:	40000400 	.word	0x40000400
 8005d2c:	40000800 	.word	0x40000800
 8005d30:	40000c00 	.word	0x40000c00
 8005d34:	40010400 	.word	0x40010400
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	40014400 	.word	0x40014400
 8005d40:	40014800 	.word	0x40014800
 8005d44:	40001800 	.word	0x40001800
 8005d48:	40001c00 	.word	0x40001c00
 8005d4c:	40002000 	.word	0x40002000

08005d50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	f023 0201 	bic.w	r2, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0303 	bic.w	r3, r3, #3
 8005d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f023 0302 	bic.w	r3, r3, #2
 8005d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a20      	ldr	r2, [pc, #128]	@ (8005e28 <TIM_OC1_SetConfig+0xd8>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_OC1_SetConfig+0x64>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a1f      	ldr	r2, [pc, #124]	@ (8005e2c <TIM_OC1_SetConfig+0xdc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d10c      	bne.n	8005dce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f023 0308 	bic.w	r3, r3, #8
 8005dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f023 0304 	bic.w	r3, r3, #4
 8005dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a15      	ldr	r2, [pc, #84]	@ (8005e28 <TIM_OC1_SetConfig+0xd8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d003      	beq.n	8005dde <TIM_OC1_SetConfig+0x8e>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a14      	ldr	r2, [pc, #80]	@ (8005e2c <TIM_OC1_SetConfig+0xdc>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d111      	bne.n	8005e02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	621a      	str	r2, [r3, #32]
}
 8005e1c:	bf00      	nop
 8005e1e:	371c      	adds	r7, #28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	40010000 	.word	0x40010000
 8005e2c:	40010400 	.word	0x40010400

08005e30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	f023 0210 	bic.w	r2, r3, #16
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f023 0320 	bic.w	r3, r3, #32
 8005e7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	011b      	lsls	r3, r3, #4
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a22      	ldr	r2, [pc, #136]	@ (8005f14 <TIM_OC2_SetConfig+0xe4>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d003      	beq.n	8005e98 <TIM_OC2_SetConfig+0x68>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a21      	ldr	r2, [pc, #132]	@ (8005f18 <TIM_OC2_SetConfig+0xe8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d10d      	bne.n	8005eb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	011b      	lsls	r3, r3, #4
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a17      	ldr	r2, [pc, #92]	@ (8005f14 <TIM_OC2_SetConfig+0xe4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d003      	beq.n	8005ec4 <TIM_OC2_SetConfig+0x94>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a16      	ldr	r2, [pc, #88]	@ (8005f18 <TIM_OC2_SetConfig+0xe8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d113      	bne.n	8005eec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005eca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	621a      	str	r2, [r3, #32]
}
 8005f06:	bf00      	nop
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40010000 	.word	0x40010000
 8005f18:	40010400 	.word	0x40010400

08005f1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0303 	bic.w	r3, r3, #3
 8005f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	021b      	lsls	r3, r3, #8
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a21      	ldr	r2, [pc, #132]	@ (8005ffc <TIM_OC3_SetConfig+0xe0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d003      	beq.n	8005f82 <TIM_OC3_SetConfig+0x66>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a20      	ldr	r2, [pc, #128]	@ (8006000 <TIM_OC3_SetConfig+0xe4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d10d      	bne.n	8005f9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	021b      	lsls	r3, r3, #8
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a16      	ldr	r2, [pc, #88]	@ (8005ffc <TIM_OC3_SetConfig+0xe0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d003      	beq.n	8005fae <TIM_OC3_SetConfig+0x92>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a15      	ldr	r2, [pc, #84]	@ (8006000 <TIM_OC3_SetConfig+0xe4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d113      	bne.n	8005fd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	011b      	lsls	r3, r3, #4
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	621a      	str	r2, [r3, #32]
}
 8005ff0:	bf00      	nop
 8005ff2:	371c      	adds	r7, #28
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	40010000 	.word	0x40010000
 8006000:	40010400 	.word	0x40010400

08006004 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800603a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	021b      	lsls	r3, r3, #8
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	4313      	orrs	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800604e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	031b      	lsls	r3, r3, #12
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4313      	orrs	r3, r2
 800605a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a12      	ldr	r2, [pc, #72]	@ (80060a8 <TIM_OC4_SetConfig+0xa4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d003      	beq.n	800606c <TIM_OC4_SetConfig+0x68>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a11      	ldr	r2, [pc, #68]	@ (80060ac <TIM_OC4_SetConfig+0xa8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d109      	bne.n	8006080 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006072:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	019b      	lsls	r3, r3, #6
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	621a      	str	r2, [r3, #32]
}
 800609a:	bf00      	nop
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40010000 	.word	0x40010000
 80060ac:	40010400 	.word	0x40010400

080060b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f003 031f 	and.w	r3, r3, #31
 80060c2:	2201      	movs	r2, #1
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a1a      	ldr	r2, [r3, #32]
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	43db      	mvns	r3, r3
 80060d2:	401a      	ands	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a1a      	ldr	r2, [r3, #32]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f003 031f 	and.w	r3, r3, #31
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	fa01 f303 	lsl.w	r3, r1, r3
 80060e8:	431a      	orrs	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	621a      	str	r2, [r3, #32]
}
 80060ee:	bf00      	nop
 80060f0:	371c      	adds	r7, #28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
	...

080060fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800610c:	2b01      	cmp	r3, #1
 800610e:	d101      	bne.n	8006114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006110:	2302      	movs	r3, #2
 8006112:	e05a      	b.n	80061ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800613a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a21      	ldr	r2, [pc, #132]	@ (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d022      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006160:	d01d      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1d      	ldr	r2, [pc, #116]	@ (80061dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d018      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1b      	ldr	r2, [pc, #108]	@ (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d013      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1a      	ldr	r2, [pc, #104]	@ (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00e      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a18      	ldr	r2, [pc, #96]	@ (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d009      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a17      	ldr	r2, [pc, #92]	@ (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d004      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a15      	ldr	r2, [pc, #84]	@ (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d10c      	bne.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	40010000 	.word	0x40010000
 80061dc:	40000400 	.word	0x40000400
 80061e0:	40000800 	.word	0x40000800
 80061e4:	40000c00 	.word	0x40000c00
 80061e8:	40010400 	.word	0x40010400
 80061ec:	40014000 	.word	0x40014000
 80061f0:	40001800 	.word	0x40001800

080061f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e042      	b.n	800628c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d106      	bne.n	8006220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7fc fc6c 	bl	8002af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2224      	movs	r2, #36	@ 0x24
 8006224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68da      	ldr	r2, [r3, #12]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 ffa1 	bl	8007180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691a      	ldr	r2, [r3, #16]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800624c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	695a      	ldr	r2, [r3, #20]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800625c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800626c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2220      	movs	r2, #32
 8006278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2220      	movs	r2, #32
 8006280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b08a      	sub	sp, #40	@ 0x28
 8006298:	af02      	add	r7, sp, #8
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	603b      	str	r3, [r7, #0]
 80062a0:	4613      	mov	r3, r2
 80062a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b20      	cmp	r3, #32
 80062b2:	d175      	bne.n	80063a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <HAL_UART_Transmit+0x2c>
 80062ba:	88fb      	ldrh	r3, [r7, #6]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e06e      	b.n	80063a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2221      	movs	r2, #33	@ 0x21
 80062ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062d2:	f7fc fe57 	bl	8002f84 <HAL_GetTick>
 80062d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	88fa      	ldrh	r2, [r7, #6]
 80062dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	88fa      	ldrh	r2, [r7, #6]
 80062e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ec:	d108      	bne.n	8006300 <HAL_UART_Transmit+0x6c>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d104      	bne.n	8006300 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	61bb      	str	r3, [r7, #24]
 80062fe:	e003      	b.n	8006308 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006304:	2300      	movs	r3, #0
 8006306:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006308:	e02e      	b.n	8006368 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2200      	movs	r2, #0
 8006312:	2180      	movs	r1, #128	@ 0x80
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fc71 	bl	8006bfc <UART_WaitOnFlagUntilTimeout>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2220      	movs	r2, #32
 8006324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e03a      	b.n	80063a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10b      	bne.n	800634a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006340:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	3302      	adds	r3, #2
 8006346:	61bb      	str	r3, [r7, #24]
 8006348:	e007      	b.n	800635a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	781a      	ldrb	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	3301      	adds	r3, #1
 8006358:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800635e:	b29b      	uxth	r3, r3
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1cb      	bne.n	800630a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2200      	movs	r2, #0
 800637a:	2140      	movs	r1, #64	@ 0x40
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 fc3d 	bl	8006bfc <UART_WaitOnFlagUntilTimeout>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d005      	beq.n	8006394 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2220      	movs	r2, #32
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e006      	b.n	80063a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	e000      	b.n	80063a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80063a0:	2302      	movs	r3, #2
  }
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3720      	adds	r7, #32
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b08c      	sub	sp, #48	@ 0x30
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	4613      	mov	r3, r2
 80063b6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b20      	cmp	r3, #32
 80063c2:	d146      	bne.n	8006452 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80063ca:	88fb      	ldrh	r3, [r7, #6]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e03f      	b.n	8006454 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2201      	movs	r2, #1
 80063d8:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80063e0:	88fb      	ldrh	r3, [r7, #6]
 80063e2:	461a      	mov	r2, r3
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 fc62 	bl	8006cb0 <UART_Start_Receive_DMA>
 80063ec:	4603      	mov	r3, r0
 80063ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d125      	bne.n	8006446 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063fa:	2300      	movs	r3, #0
 80063fc:	613b      	str	r3, [r7, #16]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	613b      	str	r3, [r7, #16]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	613b      	str	r3, [r7, #16]
 800640e:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	330c      	adds	r3, #12
 8006416:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	617b      	str	r3, [r7, #20]
   return(result);
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f043 0310 	orr.w	r3, r3, #16
 8006426:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	330c      	adds	r3, #12
 800642e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006430:	627a      	str	r2, [r7, #36]	@ 0x24
 8006432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6a39      	ldr	r1, [r7, #32]
 8006436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	61fb      	str	r3, [r7, #28]
   return(result);
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e5      	bne.n	8006410 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8006444:	e002      	b.n	800644c <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800644c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006450:	e000      	b.n	8006454 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8006452:	2302      	movs	r3, #2
  }
}
 8006454:	4618      	mov	r0, r3
 8006456:	3730      	adds	r7, #48	@ 0x30
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b0ba      	sub	sp, #232	@ 0xe8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006482:	2300      	movs	r3, #0
 8006484:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006488:	2300      	movs	r3, #0
 800648a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800648e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800649a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10f      	bne.n	80064c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064a6:	f003 0320 	and.w	r3, r3, #32
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d009      	beq.n	80064c2 <HAL_UART_IRQHandler+0x66>
 80064ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fda2 	bl	8007004 <UART_Receive_IT>
      return;
 80064c0:	e273      	b.n	80069aa <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 80de 	beq.w	8006688 <HAL_UART_IRQHandler+0x22c>
 80064cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d106      	bne.n	80064e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 80d1 	beq.w	8006688 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00b      	beq.n	800650a <HAL_UART_IRQHandler+0xae>
 80064f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006502:	f043 0201 	orr.w	r2, r3, #1
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800650a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00b      	beq.n	800652e <HAL_UART_IRQHandler+0xd2>
 8006516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006526:	f043 0202 	orr.w	r2, r3, #2
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800652e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00b      	beq.n	8006552 <HAL_UART_IRQHandler+0xf6>
 800653a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d005      	beq.n	8006552 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800654a:	f043 0204 	orr.w	r2, r3, #4
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d011      	beq.n	8006582 <HAL_UART_IRQHandler+0x126>
 800655e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006562:	f003 0320 	and.w	r3, r3, #32
 8006566:	2b00      	cmp	r3, #0
 8006568:	d105      	bne.n	8006576 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800656a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d005      	beq.n	8006582 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800657a:	f043 0208 	orr.w	r2, r3, #8
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 820a 	beq.w	80069a0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800658c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006590:	f003 0320 	and.w	r3, r3, #32
 8006594:	2b00      	cmp	r3, #0
 8006596:	d008      	beq.n	80065aa <HAL_UART_IRQHandler+0x14e>
 8006598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fd2d 	bl	8007004 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b4:	2b40      	cmp	r3, #64	@ 0x40
 80065b6:	bf0c      	ite	eq
 80065b8:	2301      	moveq	r3, #1
 80065ba:	2300      	movne	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c6:	f003 0308 	and.w	r3, r3, #8
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d103      	bne.n	80065d6 <HAL_UART_IRQHandler+0x17a>
 80065ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d04f      	beq.n	8006676 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fc38 	bl	8006e4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e6:	2b40      	cmp	r3, #64	@ 0x40
 80065e8:	d141      	bne.n	800666e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3314      	adds	r3, #20
 80065f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006600:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006604:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006608:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3314      	adds	r3, #20
 8006612:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006616:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800661a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006622:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006626:	e841 2300 	strex	r3, r2, [r1]
 800662a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800662e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1d9      	bne.n	80065ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800663a:	2b00      	cmp	r3, #0
 800663c:	d013      	beq.n	8006666 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006642:	4a8a      	ldr	r2, [pc, #552]	@ (800686c <HAL_UART_IRQHandler+0x410>)
 8006644:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800664a:	4618      	mov	r0, r3
 800664c:	f7fc ff52 	bl	80034f4 <HAL_DMA_Abort_IT>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d016      	beq.n	8006684 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800665a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006660:	4610      	mov	r0, r2
 8006662:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006664:	e00e      	b.n	8006684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f9c0 	bl	80069ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800666c:	e00a      	b.n	8006684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f9bc 	bl	80069ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006674:	e006      	b.n	8006684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f9b8 	bl	80069ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006682:	e18d      	b.n	80069a0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006684:	bf00      	nop
    return;
 8006686:	e18b      	b.n	80069a0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668c:	2b01      	cmp	r3, #1
 800668e:	f040 8167 	bne.w	8006960 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 8160 	beq.w	8006960 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80066a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066a4:	f003 0310 	and.w	r3, r3, #16
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 8159 	beq.w	8006960 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066ae:	2300      	movs	r3, #0
 80066b0:	60bb      	str	r3, [r7, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	60bb      	str	r3, [r7, #8]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	60bb      	str	r3, [r7, #8]
 80066c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ce:	2b40      	cmp	r3, #64	@ 0x40
 80066d0:	f040 80ce 	bne.w	8006870 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 80a9 	beq.w	800683c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066f2:	429a      	cmp	r2, r3
 80066f4:	f080 80a2 	bcs.w	800683c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800670a:	f000 8088 	beq.w	800681e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	330c      	adds	r3, #12
 8006714:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006724:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006728:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800672c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	330c      	adds	r3, #12
 8006736:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800673a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800673e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006746:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006752:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1d9      	bne.n	800670e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3314      	adds	r3, #20
 8006760:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800676a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800676c:	f023 0301 	bic.w	r3, r3, #1
 8006770:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3314      	adds	r3, #20
 800677a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800677e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006782:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006784:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006786:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006790:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e1      	bne.n	800675a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3314      	adds	r3, #20
 800679c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067a0:	e853 3f00 	ldrex	r3, [r3]
 80067a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80067a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3314      	adds	r3, #20
 80067b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80067ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80067bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80067c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80067c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e3      	bne.n	8006796 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	330c      	adds	r3, #12
 80067e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067ee:	f023 0310 	bic.w	r3, r3, #16
 80067f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	330c      	adds	r3, #12
 80067fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006800:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006802:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006806:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800680e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e3      	bne.n	80067dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006818:	4618      	mov	r0, r3
 800681a:	f7fc fdfb 	bl	8003414 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2202      	movs	r2, #2
 8006822:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800682c:	b29b      	uxth	r3, r3
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	b29b      	uxth	r3, r3
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7fa fb19 	bl	8000e6c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800683a:	e0b3      	b.n	80069a4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006840:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006844:	429a      	cmp	r2, r3
 8006846:	f040 80ad 	bne.w	80069a4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006854:	f040 80a6 	bne.w	80069a4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7fa fb01 	bl	8000e6c <HAL_UARTEx_RxEventCallback>
      return;
 800686a:	e09b      	b.n	80069a4 <HAL_UART_IRQHandler+0x548>
 800686c:	08006f13 	.word	0x08006f13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006878:	b29b      	uxth	r3, r3
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 808e 	beq.w	80069a8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800688c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 8089 	beq.w	80069a8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	330c      	adds	r3, #12
 800689c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a0:	e853 3f00 	ldrex	r3, [r3]
 80068a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	330c      	adds	r3, #12
 80068b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80068ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80068bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068c2:	e841 2300 	strex	r3, r2, [r1]
 80068c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e3      	bne.n	8006896 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3314      	adds	r3, #20
 80068d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	623b      	str	r3, [r7, #32]
   return(result);
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	f023 0301 	bic.w	r3, r3, #1
 80068e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3314      	adds	r3, #20
 80068ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80068f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80068f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e3      	bne.n	80068ce <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2220      	movs	r2, #32
 800690a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	330c      	adds	r3, #12
 800691a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	60fb      	str	r3, [r7, #12]
   return(result);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0310 	bic.w	r3, r3, #16
 800692a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	330c      	adds	r3, #12
 8006934:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006938:	61fa      	str	r2, [r7, #28]
 800693a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	69b9      	ldr	r1, [r7, #24]
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	617b      	str	r3, [r7, #20]
   return(result);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e3      	bne.n	8006914 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006952:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7fa fa87 	bl	8000e6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800695e:	e023      	b.n	80069a8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006968:	2b00      	cmp	r3, #0
 800696a:	d009      	beq.n	8006980 <HAL_UART_IRQHandler+0x524>
 800696c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fadb 	bl	8006f34 <UART_Transmit_IT>
    return;
 800697e:	e014      	b.n	80069aa <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00e      	beq.n	80069aa <HAL_UART_IRQHandler+0x54e>
 800698c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006994:	2b00      	cmp	r3, #0
 8006996:	d008      	beq.n	80069aa <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fb1b 	bl	8006fd4 <UART_EndTransmit_IT>
    return;
 800699e:	e004      	b.n	80069aa <HAL_UART_IRQHandler+0x54e>
    return;
 80069a0:	bf00      	nop
 80069a2:	e002      	b.n	80069aa <HAL_UART_IRQHandler+0x54e>
      return;
 80069a4:	bf00      	nop
 80069a6:	e000      	b.n	80069aa <HAL_UART_IRQHandler+0x54e>
      return;
 80069a8:	bf00      	nop
  }
}
 80069aa:	37e8      	adds	r7, #232	@ 0xe8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b09c      	sub	sp, #112	@ 0x70
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a0c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d172      	bne.n	8006b02 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006a1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a1e:	2200      	movs	r2, #0
 8006a20:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	330c      	adds	r3, #12
 8006a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a2c:	e853 3f00 	ldrex	r3, [r3]
 8006a30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	330c      	adds	r3, #12
 8006a40:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006a42:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006a44:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e5      	bne.n	8006a22 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3314      	adds	r3, #20
 8006a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a68:	f023 0301 	bic.w	r3, r3, #1
 8006a6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3314      	adds	r3, #20
 8006a74:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006a76:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e5      	bne.n	8006a56 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3314      	adds	r3, #20
 8006a90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	623b      	str	r3, [r7, #32]
   return(result);
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aa0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006aa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3314      	adds	r3, #20
 8006aa8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006aaa:	633a      	str	r2, [r7, #48]	@ 0x30
 8006aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e5      	bne.n	8006a8a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006abe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d119      	bne.n	8006b02 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	330c      	adds	r3, #12
 8006ad4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	e853 3f00 	ldrex	r3, [r3]
 8006adc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f023 0310 	bic.w	r3, r3, #16
 8006ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ae6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	330c      	adds	r3, #12
 8006aec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006aee:	61fa      	str	r2, [r7, #28]
 8006af0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af2:	69b9      	ldr	r1, [r7, #24]
 8006af4:	69fa      	ldr	r2, [r7, #28]
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	617b      	str	r3, [r7, #20]
   return(result);
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e5      	bne.n	8006ace <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b04:	2200      	movs	r2, #0
 8006b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d106      	bne.n	8006b1e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b12:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b14:	4619      	mov	r1, r3
 8006b16:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006b18:	f7fa f9a8 	bl	8000e6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b1c:	e002      	b.n	8006b24 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006b1e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006b20:	f7ff ff50 	bl	80069c4 <HAL_UART_RxCpltCallback>
}
 8006b24:	bf00      	nop
 8006b26:	3770      	adds	r7, #112	@ 0x70
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b38:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d108      	bne.n	8006b5a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b4c:	085b      	lsrs	r3, r3, #1
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	4619      	mov	r1, r3
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f7fa f98a 	bl	8000e6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b58:	e002      	b.n	8006b60 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f7ff ff3c 	bl	80069d8 <HAL_UART_RxHalfCpltCallback>
}
 8006b60:	bf00      	nop
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b78:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b84:	2b80      	cmp	r3, #128	@ 0x80
 8006b86:	bf0c      	ite	eq
 8006b88:	2301      	moveq	r3, #1
 8006b8a:	2300      	movne	r3, #0
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b21      	cmp	r3, #33	@ 0x21
 8006b9a:	d108      	bne.n	8006bae <UART_DMAError+0x46>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d005      	beq.n	8006bae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006ba8:	68b8      	ldr	r0, [r7, #8]
 8006baa:	f000 f927 	bl	8006dfc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bb8:	2b40      	cmp	r3, #64	@ 0x40
 8006bba:	bf0c      	ite	eq
 8006bbc:	2301      	moveq	r3, #1
 8006bbe:	2300      	movne	r3, #0
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b22      	cmp	r3, #34	@ 0x22
 8006bce:	d108      	bne.n	8006be2 <UART_DMAError+0x7a>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d005      	beq.n	8006be2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006bdc:	68b8      	ldr	r0, [r7, #8]
 8006bde:	f000 f935 	bl	8006e4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006be6:	f043 0210 	orr.w	r2, r3, #16
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bee:	68b8      	ldr	r0, [r7, #8]
 8006bf0:	f7ff fefc 	bl	80069ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bf4:	bf00      	nop
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	603b      	str	r3, [r7, #0]
 8006c08:	4613      	mov	r3, r2
 8006c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c0c:	e03b      	b.n	8006c86 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c14:	d037      	beq.n	8006c86 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c16:	f7fc f9b5 	bl	8002f84 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	6a3a      	ldr	r2, [r7, #32]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d302      	bcc.n	8006c2c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e03a      	b.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d023      	beq.n	8006c86 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2b80      	cmp	r3, #128	@ 0x80
 8006c42:	d020      	beq.n	8006c86 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b40      	cmp	r3, #64	@ 0x40
 8006c48:	d01d      	beq.n	8006c86 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0308 	and.w	r3, r3, #8
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	d116      	bne.n	8006c86 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006c58:	2300      	movs	r3, #0
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 f8ec 	bl	8006e4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2208      	movs	r2, #8
 8006c78:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e00f      	b.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4013      	ands	r3, r2
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	bf0c      	ite	eq
 8006c96:	2301      	moveq	r3, #1
 8006c98:	2300      	movne	r3, #0
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	79fb      	ldrb	r3, [r7, #7]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d0b4      	beq.n	8006c0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b098      	sub	sp, #96	@ 0x60
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	88fa      	ldrh	r2, [r7, #6]
 8006cc8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2222      	movs	r2, #34	@ 0x22
 8006cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cdc:	4a44      	ldr	r2, [pc, #272]	@ (8006df0 <UART_Start_Receive_DMA+0x140>)
 8006cde:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ce4:	4a43      	ldr	r2, [pc, #268]	@ (8006df4 <UART_Start_Receive_DMA+0x144>)
 8006ce6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cec:	4a42      	ldr	r2, [pc, #264]	@ (8006df8 <UART_Start_Receive_DMA+0x148>)
 8006cee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006cf8:	f107 0308 	add.w	r3, r7, #8
 8006cfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3304      	adds	r3, #4
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	88fb      	ldrh	r3, [r7, #6]
 8006d10:	f7fc fb28 	bl	8003364 <HAL_DMA_Start_IT>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d008      	beq.n	8006d2c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2210      	movs	r2, #16
 8006d1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e05d      	b.n	8006de8 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	613b      	str	r3, [r7, #16]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	613b      	str	r3, [r7, #16]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	613b      	str	r3, [r7, #16]
 8006d40:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d019      	beq.n	8006d7e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	330c      	adds	r3, #12
 8006d50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	330c      	adds	r3, #12
 8006d68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d6a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006d70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e5      	bne.n	8006d4a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3314      	adds	r3, #20
 8006d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d90:	f043 0301 	orr.w	r3, r3, #1
 8006d94:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3314      	adds	r3, #20
 8006d9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d9e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006da0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006da4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e5      	bne.n	8006d7e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3314      	adds	r3, #20
 8006db8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3314      	adds	r3, #20
 8006dd0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006dd2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006dd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	6a39      	ldr	r1, [r7, #32]
 8006dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	61fb      	str	r3, [r7, #28]
   return(result);
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e5      	bne.n	8006db2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3760      	adds	r7, #96	@ 0x60
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	08006a01 	.word	0x08006a01
 8006df4:	08006b2d 	.word	0x08006b2d
 8006df8:	08006b69 	.word	0x08006b69

08006dfc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b089      	sub	sp, #36	@ 0x24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	330c      	adds	r3, #12
 8006e0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	e853 3f00 	ldrex	r3, [r3]
 8006e12:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006e1a:	61fb      	str	r3, [r7, #28]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	330c      	adds	r3, #12
 8006e22:	69fa      	ldr	r2, [r7, #28]
 8006e24:	61ba      	str	r2, [r7, #24]
 8006e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	6979      	ldr	r1, [r7, #20]
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	e841 2300 	strex	r3, r2, [r1]
 8006e30:	613b      	str	r3, [r7, #16]
   return(result);
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e5      	bne.n	8006e04 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006e40:	bf00      	nop
 8006e42:	3724      	adds	r7, #36	@ 0x24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b095      	sub	sp, #84	@ 0x54
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	330c      	adds	r3, #12
 8006e5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e5e:	e853 3f00 	ldrex	r3, [r3]
 8006e62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	330c      	adds	r3, #12
 8006e72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e74:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e7c:	e841 2300 	strex	r3, r2, [r1]
 8006e80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1e5      	bne.n	8006e54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3314      	adds	r3, #20
 8006e8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	e853 3f00 	ldrex	r3, [r3]
 8006e96:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	f023 0301 	bic.w	r3, r3, #1
 8006e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3314      	adds	r3, #20
 8006ea6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ea8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006eae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e5      	bne.n	8006e88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d119      	bne.n	8006ef8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	330c      	adds	r3, #12
 8006eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f023 0310 	bic.w	r3, r3, #16
 8006eda:	647b      	str	r3, [r7, #68]	@ 0x44
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	330c      	adds	r3, #12
 8006ee2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ee4:	61ba      	str	r2, [r7, #24]
 8006ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	6979      	ldr	r1, [r7, #20]
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e5      	bne.n	8006ec4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f06:	bf00      	nop
 8006f08:	3754      	adds	r7, #84	@ 0x54
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b084      	sub	sp, #16
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f7ff fd60 	bl	80069ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f2c:	bf00      	nop
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b21      	cmp	r3, #33	@ 0x21
 8006f46:	d13e      	bne.n	8006fc6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f50:	d114      	bne.n	8006f7c <UART_Transmit_IT+0x48>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d110      	bne.n	8006f7c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	461a      	mov	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f6e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	1c9a      	adds	r2, r3, #2
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	621a      	str	r2, [r3, #32]
 8006f7a:	e008      	b.n	8006f8e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	1c59      	adds	r1, r3, #1
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	6211      	str	r1, [r2, #32]
 8006f86:	781a      	ldrb	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	3b01      	subs	r3, #1
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10f      	bne.n	8006fc2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fb0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68da      	ldr	r2, [r3, #12]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fc0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e000      	b.n	8006fc8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fc6:	2302      	movs	r3, #2
  }
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68da      	ldr	r2, [r3, #12]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff fcdb 	bl	80069b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b08c      	sub	sp, #48	@ 0x30
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800700c:	2300      	movs	r3, #0
 800700e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007010:	2300      	movs	r3, #0
 8007012:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b22      	cmp	r3, #34	@ 0x22
 800701e:	f040 80aa 	bne.w	8007176 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800702a:	d115      	bne.n	8007058 <UART_Receive_IT+0x54>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d111      	bne.n	8007058 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007038:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	b29b      	uxth	r3, r3
 8007042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007046:	b29a      	uxth	r2, r3
 8007048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007050:	1c9a      	adds	r2, r3, #2
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	629a      	str	r2, [r3, #40]	@ 0x28
 8007056:	e024      	b.n	80070a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007066:	d007      	beq.n	8007078 <UART_Receive_IT+0x74>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10a      	bne.n	8007086 <UART_Receive_IT+0x82>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d106      	bne.n	8007086 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	b2da      	uxtb	r2, r3
 8007080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007082:	701a      	strb	r2, [r3, #0]
 8007084:	e008      	b.n	8007098 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007092:	b2da      	uxtb	r2, r3
 8007094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007096:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709c:	1c5a      	adds	r2, r3, #1
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	3b01      	subs	r3, #1
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	4619      	mov	r1, r3
 80070b0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d15d      	bne.n	8007172 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0220 	bic.w	r2, r2, #32
 80070c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	695a      	ldr	r2, [r3, #20]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0201 	bic.w	r2, r2, #1
 80070e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d135      	bne.n	8007168 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	330c      	adds	r3, #12
 8007108:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	613b      	str	r3, [r7, #16]
   return(result);
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	f023 0310 	bic.w	r3, r3, #16
 8007118:	627b      	str	r3, [r7, #36]	@ 0x24
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	330c      	adds	r3, #12
 8007120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007122:	623a      	str	r2, [r7, #32]
 8007124:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	69f9      	ldr	r1, [r7, #28]
 8007128:	6a3a      	ldr	r2, [r7, #32]
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e5      	bne.n	8007102 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0310 	and.w	r3, r3, #16
 8007140:	2b10      	cmp	r3, #16
 8007142:	d10a      	bne.n	800715a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007144:	2300      	movs	r3, #0
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7f9 fe83 	bl	8000e6c <HAL_UARTEx_RxEventCallback>
 8007166:	e002      	b.n	800716e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff fc2b 	bl	80069c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	e002      	b.n	8007178 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	e000      	b.n	8007178 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007176:	2302      	movs	r3, #2
  }
}
 8007178:	4618      	mov	r0, r3
 800717a:	3730      	adds	r7, #48	@ 0x30
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007184:	b0c0      	sub	sp, #256	@ 0x100
 8007186:	af00      	add	r7, sp, #0
 8007188:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800718c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800719c:	68d9      	ldr	r1, [r3, #12]
 800719e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	ea40 0301 	orr.w	r3, r0, r1
 80071a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	431a      	orrs	r2, r3
 80071b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	431a      	orrs	r2, r3
 80071c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80071d8:	f021 010c 	bic.w	r1, r1, #12
 80071dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071e6:	430b      	orrs	r3, r1
 80071e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80071f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fa:	6999      	ldr	r1, [r3, #24]
 80071fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	ea40 0301 	orr.w	r3, r0, r1
 8007206:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	4b8f      	ldr	r3, [pc, #572]	@ (800744c <UART_SetConfig+0x2cc>)
 8007210:	429a      	cmp	r2, r3
 8007212:	d005      	beq.n	8007220 <UART_SetConfig+0xa0>
 8007214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	4b8d      	ldr	r3, [pc, #564]	@ (8007450 <UART_SetConfig+0x2d0>)
 800721c:	429a      	cmp	r2, r3
 800721e:	d104      	bne.n	800722a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007220:	f7fe fa2a 	bl	8005678 <HAL_RCC_GetPCLK2Freq>
 8007224:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007228:	e003      	b.n	8007232 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800722a:	f7fe fa11 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 800722e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800723c:	f040 810c 	bne.w	8007458 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007244:	2200      	movs	r2, #0
 8007246:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800724a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800724e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007252:	4622      	mov	r2, r4
 8007254:	462b      	mov	r3, r5
 8007256:	1891      	adds	r1, r2, r2
 8007258:	65b9      	str	r1, [r7, #88]	@ 0x58
 800725a:	415b      	adcs	r3, r3
 800725c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800725e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007262:	4621      	mov	r1, r4
 8007264:	eb12 0801 	adds.w	r8, r2, r1
 8007268:	4629      	mov	r1, r5
 800726a:	eb43 0901 	adc.w	r9, r3, r1
 800726e:	f04f 0200 	mov.w	r2, #0
 8007272:	f04f 0300 	mov.w	r3, #0
 8007276:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800727a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800727e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007282:	4690      	mov	r8, r2
 8007284:	4699      	mov	r9, r3
 8007286:	4623      	mov	r3, r4
 8007288:	eb18 0303 	adds.w	r3, r8, r3
 800728c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007290:	462b      	mov	r3, r5
 8007292:	eb49 0303 	adc.w	r3, r9, r3
 8007296:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800729a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80072a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80072aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80072ae:	460b      	mov	r3, r1
 80072b0:	18db      	adds	r3, r3, r3
 80072b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80072b4:	4613      	mov	r3, r2
 80072b6:	eb42 0303 	adc.w	r3, r2, r3
 80072ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80072bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80072c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80072c4:	f7f9 fada 	bl	800087c <__aeabi_uldivmod>
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	4b61      	ldr	r3, [pc, #388]	@ (8007454 <UART_SetConfig+0x2d4>)
 80072ce:	fba3 2302 	umull	r2, r3, r3, r2
 80072d2:	095b      	lsrs	r3, r3, #5
 80072d4:	011c      	lsls	r4, r3, #4
 80072d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072da:	2200      	movs	r2, #0
 80072dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80072e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80072e8:	4642      	mov	r2, r8
 80072ea:	464b      	mov	r3, r9
 80072ec:	1891      	adds	r1, r2, r2
 80072ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80072f0:	415b      	adcs	r3, r3
 80072f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072f8:	4641      	mov	r1, r8
 80072fa:	eb12 0a01 	adds.w	sl, r2, r1
 80072fe:	4649      	mov	r1, r9
 8007300:	eb43 0b01 	adc.w	fp, r3, r1
 8007304:	f04f 0200 	mov.w	r2, #0
 8007308:	f04f 0300 	mov.w	r3, #0
 800730c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007310:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007314:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007318:	4692      	mov	sl, r2
 800731a:	469b      	mov	fp, r3
 800731c:	4643      	mov	r3, r8
 800731e:	eb1a 0303 	adds.w	r3, sl, r3
 8007322:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007326:	464b      	mov	r3, r9
 8007328:	eb4b 0303 	adc.w	r3, fp, r3
 800732c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800733c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007340:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007344:	460b      	mov	r3, r1
 8007346:	18db      	adds	r3, r3, r3
 8007348:	643b      	str	r3, [r7, #64]	@ 0x40
 800734a:	4613      	mov	r3, r2
 800734c:	eb42 0303 	adc.w	r3, r2, r3
 8007350:	647b      	str	r3, [r7, #68]	@ 0x44
 8007352:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007356:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800735a:	f7f9 fa8f 	bl	800087c <__aeabi_uldivmod>
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
 8007362:	4611      	mov	r1, r2
 8007364:	4b3b      	ldr	r3, [pc, #236]	@ (8007454 <UART_SetConfig+0x2d4>)
 8007366:	fba3 2301 	umull	r2, r3, r3, r1
 800736a:	095b      	lsrs	r3, r3, #5
 800736c:	2264      	movs	r2, #100	@ 0x64
 800736e:	fb02 f303 	mul.w	r3, r2, r3
 8007372:	1acb      	subs	r3, r1, r3
 8007374:	00db      	lsls	r3, r3, #3
 8007376:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800737a:	4b36      	ldr	r3, [pc, #216]	@ (8007454 <UART_SetConfig+0x2d4>)
 800737c:	fba3 2302 	umull	r2, r3, r3, r2
 8007380:	095b      	lsrs	r3, r3, #5
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007388:	441c      	add	r4, r3
 800738a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800738e:	2200      	movs	r2, #0
 8007390:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007394:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007398:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800739c:	4642      	mov	r2, r8
 800739e:	464b      	mov	r3, r9
 80073a0:	1891      	adds	r1, r2, r2
 80073a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80073a4:	415b      	adcs	r3, r3
 80073a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80073ac:	4641      	mov	r1, r8
 80073ae:	1851      	adds	r1, r2, r1
 80073b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80073b2:	4649      	mov	r1, r9
 80073b4:	414b      	adcs	r3, r1
 80073b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073b8:	f04f 0200 	mov.w	r2, #0
 80073bc:	f04f 0300 	mov.w	r3, #0
 80073c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80073c4:	4659      	mov	r1, fp
 80073c6:	00cb      	lsls	r3, r1, #3
 80073c8:	4651      	mov	r1, sl
 80073ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073ce:	4651      	mov	r1, sl
 80073d0:	00ca      	lsls	r2, r1, #3
 80073d2:	4610      	mov	r0, r2
 80073d4:	4619      	mov	r1, r3
 80073d6:	4603      	mov	r3, r0
 80073d8:	4642      	mov	r2, r8
 80073da:	189b      	adds	r3, r3, r2
 80073dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073e0:	464b      	mov	r3, r9
 80073e2:	460a      	mov	r2, r1
 80073e4:	eb42 0303 	adc.w	r3, r2, r3
 80073e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80073fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007400:	460b      	mov	r3, r1
 8007402:	18db      	adds	r3, r3, r3
 8007404:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007406:	4613      	mov	r3, r2
 8007408:	eb42 0303 	adc.w	r3, r2, r3
 800740c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800740e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007412:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007416:	f7f9 fa31 	bl	800087c <__aeabi_uldivmod>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4b0d      	ldr	r3, [pc, #52]	@ (8007454 <UART_SetConfig+0x2d4>)
 8007420:	fba3 1302 	umull	r1, r3, r3, r2
 8007424:	095b      	lsrs	r3, r3, #5
 8007426:	2164      	movs	r1, #100	@ 0x64
 8007428:	fb01 f303 	mul.w	r3, r1, r3
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	00db      	lsls	r3, r3, #3
 8007430:	3332      	adds	r3, #50	@ 0x32
 8007432:	4a08      	ldr	r2, [pc, #32]	@ (8007454 <UART_SetConfig+0x2d4>)
 8007434:	fba2 2303 	umull	r2, r3, r2, r3
 8007438:	095b      	lsrs	r3, r3, #5
 800743a:	f003 0207 	and.w	r2, r3, #7
 800743e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4422      	add	r2, r4
 8007446:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007448:	e106      	b.n	8007658 <UART_SetConfig+0x4d8>
 800744a:	bf00      	nop
 800744c:	40011000 	.word	0x40011000
 8007450:	40011400 	.word	0x40011400
 8007454:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800745c:	2200      	movs	r2, #0
 800745e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007462:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007466:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800746a:	4642      	mov	r2, r8
 800746c:	464b      	mov	r3, r9
 800746e:	1891      	adds	r1, r2, r2
 8007470:	6239      	str	r1, [r7, #32]
 8007472:	415b      	adcs	r3, r3
 8007474:	627b      	str	r3, [r7, #36]	@ 0x24
 8007476:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800747a:	4641      	mov	r1, r8
 800747c:	1854      	adds	r4, r2, r1
 800747e:	4649      	mov	r1, r9
 8007480:	eb43 0501 	adc.w	r5, r3, r1
 8007484:	f04f 0200 	mov.w	r2, #0
 8007488:	f04f 0300 	mov.w	r3, #0
 800748c:	00eb      	lsls	r3, r5, #3
 800748e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007492:	00e2      	lsls	r2, r4, #3
 8007494:	4614      	mov	r4, r2
 8007496:	461d      	mov	r5, r3
 8007498:	4643      	mov	r3, r8
 800749a:	18e3      	adds	r3, r4, r3
 800749c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80074a0:	464b      	mov	r3, r9
 80074a2:	eb45 0303 	adc.w	r3, r5, r3
 80074a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80074aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80074ba:	f04f 0200 	mov.w	r2, #0
 80074be:	f04f 0300 	mov.w	r3, #0
 80074c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80074c6:	4629      	mov	r1, r5
 80074c8:	008b      	lsls	r3, r1, #2
 80074ca:	4621      	mov	r1, r4
 80074cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074d0:	4621      	mov	r1, r4
 80074d2:	008a      	lsls	r2, r1, #2
 80074d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80074d8:	f7f9 f9d0 	bl	800087c <__aeabi_uldivmod>
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	4b60      	ldr	r3, [pc, #384]	@ (8007664 <UART_SetConfig+0x4e4>)
 80074e2:	fba3 2302 	umull	r2, r3, r3, r2
 80074e6:	095b      	lsrs	r3, r3, #5
 80074e8:	011c      	lsls	r4, r3, #4
 80074ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80074f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80074fc:	4642      	mov	r2, r8
 80074fe:	464b      	mov	r3, r9
 8007500:	1891      	adds	r1, r2, r2
 8007502:	61b9      	str	r1, [r7, #24]
 8007504:	415b      	adcs	r3, r3
 8007506:	61fb      	str	r3, [r7, #28]
 8007508:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800750c:	4641      	mov	r1, r8
 800750e:	1851      	adds	r1, r2, r1
 8007510:	6139      	str	r1, [r7, #16]
 8007512:	4649      	mov	r1, r9
 8007514:	414b      	adcs	r3, r1
 8007516:	617b      	str	r3, [r7, #20]
 8007518:	f04f 0200 	mov.w	r2, #0
 800751c:	f04f 0300 	mov.w	r3, #0
 8007520:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007524:	4659      	mov	r1, fp
 8007526:	00cb      	lsls	r3, r1, #3
 8007528:	4651      	mov	r1, sl
 800752a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800752e:	4651      	mov	r1, sl
 8007530:	00ca      	lsls	r2, r1, #3
 8007532:	4610      	mov	r0, r2
 8007534:	4619      	mov	r1, r3
 8007536:	4603      	mov	r3, r0
 8007538:	4642      	mov	r2, r8
 800753a:	189b      	adds	r3, r3, r2
 800753c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007540:	464b      	mov	r3, r9
 8007542:	460a      	mov	r2, r1
 8007544:	eb42 0303 	adc.w	r3, r2, r3
 8007548:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800754c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007556:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007558:	f04f 0200 	mov.w	r2, #0
 800755c:	f04f 0300 	mov.w	r3, #0
 8007560:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007564:	4649      	mov	r1, r9
 8007566:	008b      	lsls	r3, r1, #2
 8007568:	4641      	mov	r1, r8
 800756a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800756e:	4641      	mov	r1, r8
 8007570:	008a      	lsls	r2, r1, #2
 8007572:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007576:	f7f9 f981 	bl	800087c <__aeabi_uldivmod>
 800757a:	4602      	mov	r2, r0
 800757c:	460b      	mov	r3, r1
 800757e:	4611      	mov	r1, r2
 8007580:	4b38      	ldr	r3, [pc, #224]	@ (8007664 <UART_SetConfig+0x4e4>)
 8007582:	fba3 2301 	umull	r2, r3, r3, r1
 8007586:	095b      	lsrs	r3, r3, #5
 8007588:	2264      	movs	r2, #100	@ 0x64
 800758a:	fb02 f303 	mul.w	r3, r2, r3
 800758e:	1acb      	subs	r3, r1, r3
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	3332      	adds	r3, #50	@ 0x32
 8007594:	4a33      	ldr	r2, [pc, #204]	@ (8007664 <UART_SetConfig+0x4e4>)
 8007596:	fba2 2303 	umull	r2, r3, r2, r3
 800759a:	095b      	lsrs	r3, r3, #5
 800759c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075a0:	441c      	add	r4, r3
 80075a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075a6:	2200      	movs	r2, #0
 80075a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80075aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80075ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80075b0:	4642      	mov	r2, r8
 80075b2:	464b      	mov	r3, r9
 80075b4:	1891      	adds	r1, r2, r2
 80075b6:	60b9      	str	r1, [r7, #8]
 80075b8:	415b      	adcs	r3, r3
 80075ba:	60fb      	str	r3, [r7, #12]
 80075bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075c0:	4641      	mov	r1, r8
 80075c2:	1851      	adds	r1, r2, r1
 80075c4:	6039      	str	r1, [r7, #0]
 80075c6:	4649      	mov	r1, r9
 80075c8:	414b      	adcs	r3, r1
 80075ca:	607b      	str	r3, [r7, #4]
 80075cc:	f04f 0200 	mov.w	r2, #0
 80075d0:	f04f 0300 	mov.w	r3, #0
 80075d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075d8:	4659      	mov	r1, fp
 80075da:	00cb      	lsls	r3, r1, #3
 80075dc:	4651      	mov	r1, sl
 80075de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075e2:	4651      	mov	r1, sl
 80075e4:	00ca      	lsls	r2, r1, #3
 80075e6:	4610      	mov	r0, r2
 80075e8:	4619      	mov	r1, r3
 80075ea:	4603      	mov	r3, r0
 80075ec:	4642      	mov	r2, r8
 80075ee:	189b      	adds	r3, r3, r2
 80075f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075f2:	464b      	mov	r3, r9
 80075f4:	460a      	mov	r2, r1
 80075f6:	eb42 0303 	adc.w	r3, r2, r3
 80075fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	663b      	str	r3, [r7, #96]	@ 0x60
 8007606:	667a      	str	r2, [r7, #100]	@ 0x64
 8007608:	f04f 0200 	mov.w	r2, #0
 800760c:	f04f 0300 	mov.w	r3, #0
 8007610:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007614:	4649      	mov	r1, r9
 8007616:	008b      	lsls	r3, r1, #2
 8007618:	4641      	mov	r1, r8
 800761a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800761e:	4641      	mov	r1, r8
 8007620:	008a      	lsls	r2, r1, #2
 8007622:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007626:	f7f9 f929 	bl	800087c <__aeabi_uldivmod>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	4b0d      	ldr	r3, [pc, #52]	@ (8007664 <UART_SetConfig+0x4e4>)
 8007630:	fba3 1302 	umull	r1, r3, r3, r2
 8007634:	095b      	lsrs	r3, r3, #5
 8007636:	2164      	movs	r1, #100	@ 0x64
 8007638:	fb01 f303 	mul.w	r3, r1, r3
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	011b      	lsls	r3, r3, #4
 8007640:	3332      	adds	r3, #50	@ 0x32
 8007642:	4a08      	ldr	r2, [pc, #32]	@ (8007664 <UART_SetConfig+0x4e4>)
 8007644:	fba2 2303 	umull	r2, r3, r2, r3
 8007648:	095b      	lsrs	r3, r3, #5
 800764a:	f003 020f 	and.w	r2, r3, #15
 800764e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4422      	add	r2, r4
 8007656:	609a      	str	r2, [r3, #8]
}
 8007658:	bf00      	nop
 800765a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800765e:	46bd      	mov	sp, r7
 8007660:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007664:	51eb851f 	.word	0x51eb851f

08007668 <__NVIC_SetPriority>:
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	4603      	mov	r3, r0
 8007670:	6039      	str	r1, [r7, #0]
 8007672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007678:	2b00      	cmp	r3, #0
 800767a:	db0a      	blt.n	8007692 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	b2da      	uxtb	r2, r3
 8007680:	490c      	ldr	r1, [pc, #48]	@ (80076b4 <__NVIC_SetPriority+0x4c>)
 8007682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007686:	0112      	lsls	r2, r2, #4
 8007688:	b2d2      	uxtb	r2, r2
 800768a:	440b      	add	r3, r1
 800768c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007690:	e00a      	b.n	80076a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	b2da      	uxtb	r2, r3
 8007696:	4908      	ldr	r1, [pc, #32]	@ (80076b8 <__NVIC_SetPriority+0x50>)
 8007698:	79fb      	ldrb	r3, [r7, #7]
 800769a:	f003 030f 	and.w	r3, r3, #15
 800769e:	3b04      	subs	r3, #4
 80076a0:	0112      	lsls	r2, r2, #4
 80076a2:	b2d2      	uxtb	r2, r2
 80076a4:	440b      	add	r3, r1
 80076a6:	761a      	strb	r2, [r3, #24]
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	e000e100 	.word	0xe000e100
 80076b8:	e000ed00 	.word	0xe000ed00

080076bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80076bc:	b580      	push	{r7, lr}
 80076be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80076c0:	2100      	movs	r1, #0
 80076c2:	f06f 0004 	mvn.w	r0, #4
 80076c6:	f7ff ffcf 	bl	8007668 <__NVIC_SetPriority>
#endif
}
 80076ca:	bf00      	nop
 80076cc:	bd80      	pop	{r7, pc}
	...

080076d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076d6:	f3ef 8305 	mrs	r3, IPSR
 80076da:	603b      	str	r3, [r7, #0]
  return(result);
 80076dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80076e2:	f06f 0305 	mvn.w	r3, #5
 80076e6:	607b      	str	r3, [r7, #4]
 80076e8:	e00c      	b.n	8007704 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80076ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007714 <osKernelInitialize+0x44>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d105      	bne.n	80076fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80076f2:	4b08      	ldr	r3, [pc, #32]	@ (8007714 <osKernelInitialize+0x44>)
 80076f4:	2201      	movs	r2, #1
 80076f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	607b      	str	r3, [r7, #4]
 80076fc:	e002      	b.n	8007704 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80076fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007702:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007704:	687b      	ldr	r3, [r7, #4]
}
 8007706:	4618      	mov	r0, r3
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	20000808 	.word	0x20000808

08007718 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800771e:	f3ef 8305 	mrs	r3, IPSR
 8007722:	603b      	str	r3, [r7, #0]
  return(result);
 8007724:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <osKernelStart+0x1a>
    stat = osErrorISR;
 800772a:	f06f 0305 	mvn.w	r3, #5
 800772e:	607b      	str	r3, [r7, #4]
 8007730:	e010      	b.n	8007754 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007732:	4b0b      	ldr	r3, [pc, #44]	@ (8007760 <osKernelStart+0x48>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d109      	bne.n	800774e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800773a:	f7ff ffbf 	bl	80076bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800773e:	4b08      	ldr	r3, [pc, #32]	@ (8007760 <osKernelStart+0x48>)
 8007740:	2202      	movs	r2, #2
 8007742:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007744:	f001 f87a 	bl	800883c <vTaskStartScheduler>
      stat = osOK;
 8007748:	2300      	movs	r3, #0
 800774a:	607b      	str	r3, [r7, #4]
 800774c:	e002      	b.n	8007754 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800774e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007752:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007754:	687b      	ldr	r3, [r7, #4]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20000808 	.word	0x20000808

08007764 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007764:	b580      	push	{r7, lr}
 8007766:	b08e      	sub	sp, #56	@ 0x38
 8007768:	af04      	add	r7, sp, #16
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007770:	2300      	movs	r3, #0
 8007772:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007774:	f3ef 8305 	mrs	r3, IPSR
 8007778:	617b      	str	r3, [r7, #20]
  return(result);
 800777a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800777c:	2b00      	cmp	r3, #0
 800777e:	d17e      	bne.n	800787e <osThreadNew+0x11a>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d07b      	beq.n	800787e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007786:	2380      	movs	r3, #128	@ 0x80
 8007788:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800778a:	2318      	movs	r3, #24
 800778c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800778e:	2300      	movs	r3, #0
 8007790:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007792:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007796:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d045      	beq.n	800782a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <osThreadNew+0x48>
        name = attr->name;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d008      	beq.n	80077d2 <osThreadNew+0x6e>
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	2b38      	cmp	r3, #56	@ 0x38
 80077c4:	d805      	bhi.n	80077d2 <osThreadNew+0x6e>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <osThreadNew+0x72>
        return (NULL);
 80077d2:	2300      	movs	r3, #0
 80077d4:	e054      	b.n	8007880 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	089b      	lsrs	r3, r3, #2
 80077e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00e      	beq.n	800780c <osThreadNew+0xa8>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	2b5b      	cmp	r3, #91	@ 0x5b
 80077f4:	d90a      	bls.n	800780c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d006      	beq.n	800780c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <osThreadNew+0xa8>
        mem = 1;
 8007806:	2301      	movs	r3, #1
 8007808:	61bb      	str	r3, [r7, #24]
 800780a:	e010      	b.n	800782e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10c      	bne.n	800782e <osThreadNew+0xca>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d108      	bne.n	800782e <osThreadNew+0xca>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d104      	bne.n	800782e <osThreadNew+0xca>
          mem = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	61bb      	str	r3, [r7, #24]
 8007828:	e001      	b.n	800782e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d110      	bne.n	8007856 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800783c:	9202      	str	r2, [sp, #8]
 800783e:	9301      	str	r3, [sp, #4]
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	6a3a      	ldr	r2, [r7, #32]
 8007848:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 fe1a 	bl	8008484 <xTaskCreateStatic>
 8007850:	4603      	mov	r3, r0
 8007852:	613b      	str	r3, [r7, #16]
 8007854:	e013      	b.n	800787e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d110      	bne.n	800787e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	b29a      	uxth	r2, r3
 8007860:	f107 0310 	add.w	r3, r7, #16
 8007864:	9301      	str	r3, [sp, #4]
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 fe68 	bl	8008544 <xTaskCreate>
 8007874:	4603      	mov	r3, r0
 8007876:	2b01      	cmp	r3, #1
 8007878:	d001      	beq.n	800787e <osThreadNew+0x11a>
            hTask = NULL;
 800787a:	2300      	movs	r3, #0
 800787c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800787e:	693b      	ldr	r3, [r7, #16]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3728      	adds	r7, #40	@ 0x28
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007890:	f3ef 8305 	mrs	r3, IPSR
 8007894:	60bb      	str	r3, [r7, #8]
  return(result);
 8007896:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007898:	2b00      	cmp	r3, #0
 800789a:	d003      	beq.n	80078a4 <osDelay+0x1c>
    stat = osErrorISR;
 800789c:	f06f 0305 	mvn.w	r3, #5
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	e007      	b.n	80078b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 ff8e 	bl	80087d0 <vTaskDelay>
    }
  }

  return (stat);
 80078b4:	68fb      	ldr	r3, [r7, #12]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
	...

080078c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4a07      	ldr	r2, [pc, #28]	@ (80078ec <vApplicationGetIdleTaskMemory+0x2c>)
 80078d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	4a06      	ldr	r2, [pc, #24]	@ (80078f0 <vApplicationGetIdleTaskMemory+0x30>)
 80078d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2280      	movs	r2, #128	@ 0x80
 80078dc:	601a      	str	r2, [r3, #0]
}
 80078de:	bf00      	nop
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	2000080c 	.word	0x2000080c
 80078f0:	20000868 	.word	0x20000868

080078f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4a07      	ldr	r2, [pc, #28]	@ (8007920 <vApplicationGetTimerTaskMemory+0x2c>)
 8007904:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	4a06      	ldr	r2, [pc, #24]	@ (8007924 <vApplicationGetTimerTaskMemory+0x30>)
 800790a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007912:	601a      	str	r2, [r3, #0]
}
 8007914:	bf00      	nop
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	20000a68 	.word	0x20000a68
 8007924:	20000ac4 	.word	0x20000ac4

08007928 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f103 0208 	add.w	r2, r3, #8
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007940:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f103 0208 	add.w	r2, r3, #8
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f103 0208 	add.w	r2, r3, #8
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007982:	b480      	push	{r7}
 8007984:	b085      	sub	sp, #20
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	1c5a      	adds	r2, r3, #1
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	601a      	str	r2, [r3, #0]
}
 80079be:	bf00      	nop
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079ca:	b480      	push	{r7}
 80079cc:	b085      	sub	sp, #20
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079e0:	d103      	bne.n	80079ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	e00c      	b.n	8007a04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	3308      	adds	r3, #8
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	e002      	b.n	80079f8 <vListInsert+0x2e>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d2f6      	bcs.n	80079f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	1c5a      	adds	r2, r3, #1
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	601a      	str	r2, [r3, #0]
}
 8007a30:	bf00      	nop
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	6892      	ldr	r2, [r2, #8]
 8007a52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	6852      	ldr	r2, [r2, #4]
 8007a5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d103      	bne.n	8007a70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	1e5a      	subs	r2, r3, #1
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10b      	bne.n	8007abc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007ab6:	bf00      	nop
 8007ab8:	bf00      	nop
 8007aba:	e7fd      	b.n	8007ab8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007abc:	f002 f87c 	bl	8009bb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ac8:	68f9      	ldr	r1, [r7, #12]
 8007aca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007acc:	fb01 f303 	mul.w	r3, r1, r3
 8007ad0:	441a      	add	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aec:	3b01      	subs	r3, #1
 8007aee:	68f9      	ldr	r1, [r7, #12]
 8007af0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007af2:	fb01 f303 	mul.w	r3, r1, r3
 8007af6:	441a      	add	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	22ff      	movs	r2, #255	@ 0xff
 8007b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	22ff      	movs	r2, #255	@ 0xff
 8007b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d114      	bne.n	8007b3c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d01a      	beq.n	8007b50 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3310      	adds	r3, #16
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f001 f91a 	bl	8008d58 <xTaskRemoveFromEventList>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d012      	beq.n	8007b50 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b60 <xQueueGenericReset+0xd0>)
 8007b2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b30:	601a      	str	r2, [r3, #0]
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	e009      	b.n	8007b50 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	3310      	adds	r3, #16
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7ff fef1 	bl	8007928 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3324      	adds	r3, #36	@ 0x24
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7ff feec 	bl	8007928 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b50:	f002 f864 	bl	8009c1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b54:	2301      	movs	r3, #1
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	e000ed04 	.word	0xe000ed04

08007b64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08e      	sub	sp, #56	@ 0x38
 8007b68:	af02      	add	r7, sp, #8
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10b      	bne.n	8007b90 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b8a:	bf00      	nop
 8007b8c:	bf00      	nop
 8007b8e:	e7fd      	b.n	8007b8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10b      	bne.n	8007bae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ba8:	bf00      	nop
 8007baa:	bf00      	nop
 8007bac:	e7fd      	b.n	8007baa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <xQueueGenericCreateStatic+0x56>
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <xQueueGenericCreateStatic+0x5a>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e000      	b.n	8007bc0 <xQueueGenericCreateStatic+0x5c>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10b      	bne.n	8007bdc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	623b      	str	r3, [r7, #32]
}
 8007bd6:	bf00      	nop
 8007bd8:	bf00      	nop
 8007bda:	e7fd      	b.n	8007bd8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d102      	bne.n	8007be8 <xQueueGenericCreateStatic+0x84>
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d101      	bne.n	8007bec <xQueueGenericCreateStatic+0x88>
 8007be8:	2301      	movs	r3, #1
 8007bea:	e000      	b.n	8007bee <xQueueGenericCreateStatic+0x8a>
 8007bec:	2300      	movs	r3, #0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10b      	bne.n	8007c0a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	61fb      	str	r3, [r7, #28]
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop
 8007c08:	e7fd      	b.n	8007c06 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c0a:	2350      	movs	r3, #80	@ 0x50
 8007c0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2b50      	cmp	r3, #80	@ 0x50
 8007c12:	d00b      	beq.n	8007c2c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	61bb      	str	r3, [r7, #24]
}
 8007c26:	bf00      	nop
 8007c28:	bf00      	nop
 8007c2a:	e7fd      	b.n	8007c28 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c2c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00d      	beq.n	8007c54 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c40:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	68b9      	ldr	r1, [r7, #8]
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 f805 	bl	8007c5e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3730      	adds	r7, #48	@ 0x30
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	607a      	str	r2, [r7, #4]
 8007c6a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d103      	bne.n	8007c7a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	e002      	b.n	8007c80 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	69b8      	ldr	r0, [r7, #24]
 8007c90:	f7ff fefe 	bl	8007a90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	78fa      	ldrb	r2, [r7, #3]
 8007c98:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c9c:	bf00      	nop
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08e      	sub	sp, #56	@ 0x38
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
 8007cb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10b      	bne.n	8007cd8 <xQueueGenericSend+0x34>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007cd2:	bf00      	nop
 8007cd4:	bf00      	nop
 8007cd6:	e7fd      	b.n	8007cd4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d103      	bne.n	8007ce6 <xQueueGenericSend+0x42>
 8007cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d101      	bne.n	8007cea <xQueueGenericSend+0x46>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e000      	b.n	8007cec <xQueueGenericSend+0x48>
 8007cea:	2300      	movs	r3, #0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10b      	bne.n	8007d08 <xQueueGenericSend+0x64>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d02:	bf00      	nop
 8007d04:	bf00      	nop
 8007d06:	e7fd      	b.n	8007d04 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d103      	bne.n	8007d16 <xQueueGenericSend+0x72>
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d101      	bne.n	8007d1a <xQueueGenericSend+0x76>
 8007d16:	2301      	movs	r3, #1
 8007d18:	e000      	b.n	8007d1c <xQueueGenericSend+0x78>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10b      	bne.n	8007d38 <xQueueGenericSend+0x94>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	623b      	str	r3, [r7, #32]
}
 8007d32:	bf00      	nop
 8007d34:	bf00      	nop
 8007d36:	e7fd      	b.n	8007d34 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d38:	f001 f9ce 	bl	80090d8 <xTaskGetSchedulerState>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d102      	bne.n	8007d48 <xQueueGenericSend+0xa4>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <xQueueGenericSend+0xa8>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e000      	b.n	8007d4e <xQueueGenericSend+0xaa>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10b      	bne.n	8007d6a <xQueueGenericSend+0xc6>
	__asm volatile
 8007d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d56:	f383 8811 	msr	BASEPRI, r3
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	61fb      	str	r3, [r7, #28]
}
 8007d64:	bf00      	nop
 8007d66:	bf00      	nop
 8007d68:	e7fd      	b.n	8007d66 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d6a:	f001 ff25 	bl	8009bb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d302      	bcc.n	8007d80 <xQueueGenericSend+0xdc>
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d129      	bne.n	8007dd4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	68b9      	ldr	r1, [r7, #8]
 8007d84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d86:	f000 fa0f 	bl	80081a8 <prvCopyDataToQueue>
 8007d8a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d010      	beq.n	8007db6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d96:	3324      	adds	r3, #36	@ 0x24
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f000 ffdd 	bl	8008d58 <xTaskRemoveFromEventList>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d013      	beq.n	8007dcc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007da4:	4b3f      	ldr	r3, [pc, #252]	@ (8007ea4 <xQueueGenericSend+0x200>)
 8007da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007daa:	601a      	str	r2, [r3, #0]
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	e00a      	b.n	8007dcc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d007      	beq.n	8007dcc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007dbc:	4b39      	ldr	r3, [pc, #228]	@ (8007ea4 <xQueueGenericSend+0x200>)
 8007dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007dcc:	f001 ff26 	bl	8009c1c <vPortExitCritical>
				return pdPASS;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e063      	b.n	8007e9c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d103      	bne.n	8007de2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dda:	f001 ff1f 	bl	8009c1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007dde:	2300      	movs	r3, #0
 8007de0:	e05c      	b.n	8007e9c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d106      	bne.n	8007df6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007de8:	f107 0314 	add.w	r3, r7, #20
 8007dec:	4618      	mov	r0, r3
 8007dee:	f001 f817 	bl	8008e20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007df2:	2301      	movs	r3, #1
 8007df4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007df6:	f001 ff11 	bl	8009c1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007dfa:	f000 fd87 	bl	800890c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dfe:	f001 fedb 	bl	8009bb8 <vPortEnterCritical>
 8007e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e08:	b25b      	sxtb	r3, r3
 8007e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e0e:	d103      	bne.n	8007e18 <xQueueGenericSend+0x174>
 8007e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e1e:	b25b      	sxtb	r3, r3
 8007e20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e24:	d103      	bne.n	8007e2e <xQueueGenericSend+0x18a>
 8007e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e2e:	f001 fef5 	bl	8009c1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e32:	1d3a      	adds	r2, r7, #4
 8007e34:	f107 0314 	add.w	r3, r7, #20
 8007e38:	4611      	mov	r1, r2
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f001 f806 	bl	8008e4c <xTaskCheckForTimeOut>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d124      	bne.n	8007e90 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e48:	f000 faa6 	bl	8008398 <prvIsQueueFull>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d018      	beq.n	8007e84 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e54:	3310      	adds	r3, #16
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	4611      	mov	r1, r2
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 ff2a 	bl	8008cb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e62:	f000 fa31 	bl	80082c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e66:	f000 fd5f 	bl	8008928 <xTaskResumeAll>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f47f af7c 	bne.w	8007d6a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007e72:	4b0c      	ldr	r3, [pc, #48]	@ (8007ea4 <xQueueGenericSend+0x200>)
 8007e74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	e772      	b.n	8007d6a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e86:	f000 fa1f 	bl	80082c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e8a:	f000 fd4d 	bl	8008928 <xTaskResumeAll>
 8007e8e:	e76c      	b.n	8007d6a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e92:	f000 fa19 	bl	80082c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e96:	f000 fd47 	bl	8008928 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3738      	adds	r7, #56	@ 0x38
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	e000ed04 	.word	0xe000ed04

08007ea8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b090      	sub	sp, #64	@ 0x40
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
 8007eb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10b      	bne.n	8007ed8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ed2:	bf00      	nop
 8007ed4:	bf00      	nop
 8007ed6:	e7fd      	b.n	8007ed4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d103      	bne.n	8007ee6 <xQueueGenericSendFromISR+0x3e>
 8007ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <xQueueGenericSendFromISR+0x42>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e000      	b.n	8007eec <xQueueGenericSendFromISR+0x44>
 8007eea:	2300      	movs	r3, #0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10b      	bne.n	8007f08 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f02:	bf00      	nop
 8007f04:	bf00      	nop
 8007f06:	e7fd      	b.n	8007f04 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d103      	bne.n	8007f16 <xQueueGenericSendFromISR+0x6e>
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d101      	bne.n	8007f1a <xQueueGenericSendFromISR+0x72>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e000      	b.n	8007f1c <xQueueGenericSendFromISR+0x74>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10b      	bne.n	8007f38 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	623b      	str	r3, [r7, #32]
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	e7fd      	b.n	8007f34 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f38:	f001 ff1e 	bl	8009d78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f3c:	f3ef 8211 	mrs	r2, BASEPRI
 8007f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	61fa      	str	r2, [r7, #28]
 8007f52:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f54:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f56:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d302      	bcc.n	8007f6a <xQueueGenericSendFromISR+0xc2>
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d12f      	bne.n	8007fca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	68b9      	ldr	r1, [r7, #8]
 8007f7e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007f80:	f000 f912 	bl	80081a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f84:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007f88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f8c:	d112      	bne.n	8007fb4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d016      	beq.n	8007fc4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f98:	3324      	adds	r3, #36	@ 0x24
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fedc 	bl	8008d58 <xTaskRemoveFromEventList>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00e      	beq.n	8007fc4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00b      	beq.n	8007fc4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	e007      	b.n	8007fc4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007fb8:	3301      	adds	r3, #1
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	b25a      	sxtb	r2, r3
 8007fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007fc8:	e001      	b.n	8007fce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007fd8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3740      	adds	r7, #64	@ 0x40
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b08c      	sub	sp, #48	@ 0x30
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10b      	bne.n	8008016 <xQueueReceive+0x32>
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	623b      	str	r3, [r7, #32]
}
 8008010:	bf00      	nop
 8008012:	bf00      	nop
 8008014:	e7fd      	b.n	8008012 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d103      	bne.n	8008024 <xQueueReceive+0x40>
 800801c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800801e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008020:	2b00      	cmp	r3, #0
 8008022:	d101      	bne.n	8008028 <xQueueReceive+0x44>
 8008024:	2301      	movs	r3, #1
 8008026:	e000      	b.n	800802a <xQueueReceive+0x46>
 8008028:	2300      	movs	r3, #0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10b      	bne.n	8008046 <xQueueReceive+0x62>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	61fb      	str	r3, [r7, #28]
}
 8008040:	bf00      	nop
 8008042:	bf00      	nop
 8008044:	e7fd      	b.n	8008042 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008046:	f001 f847 	bl	80090d8 <xTaskGetSchedulerState>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d102      	bne.n	8008056 <xQueueReceive+0x72>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <xQueueReceive+0x76>
 8008056:	2301      	movs	r3, #1
 8008058:	e000      	b.n	800805c <xQueueReceive+0x78>
 800805a:	2300      	movs	r3, #0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10b      	bne.n	8008078 <xQueueReceive+0x94>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	61bb      	str	r3, [r7, #24]
}
 8008072:	bf00      	nop
 8008074:	bf00      	nop
 8008076:	e7fd      	b.n	8008074 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008078:	f001 fd9e 	bl	8009bb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800807c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800807e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008080:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008084:	2b00      	cmp	r3, #0
 8008086:	d01f      	beq.n	80080c8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008088:	68b9      	ldr	r1, [r7, #8]
 800808a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800808c:	f000 f8f6 	bl	800827c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008092:	1e5a      	subs	r2, r3, #1
 8008094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008096:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00f      	beq.n	80080c0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a2:	3310      	adds	r3, #16
 80080a4:	4618      	mov	r0, r3
 80080a6:	f000 fe57 	bl	8008d58 <xTaskRemoveFromEventList>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d007      	beq.n	80080c0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080b0:	4b3c      	ldr	r3, [pc, #240]	@ (80081a4 <xQueueReceive+0x1c0>)
 80080b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080c0:	f001 fdac 	bl	8009c1c <vPortExitCritical>
				return pdPASS;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e069      	b.n	800819c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d103      	bne.n	80080d6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080ce:	f001 fda5 	bl	8009c1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080d2:	2300      	movs	r3, #0
 80080d4:	e062      	b.n	800819c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d106      	bne.n	80080ea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080dc:	f107 0310 	add.w	r3, r7, #16
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 fe9d 	bl	8008e20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080e6:	2301      	movs	r3, #1
 80080e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080ea:	f001 fd97 	bl	8009c1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080ee:	f000 fc0d 	bl	800890c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080f2:	f001 fd61 	bl	8009bb8 <vPortEnterCritical>
 80080f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080fc:	b25b      	sxtb	r3, r3
 80080fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008102:	d103      	bne.n	800810c <xQueueReceive+0x128>
 8008104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800810c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008112:	b25b      	sxtb	r3, r3
 8008114:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008118:	d103      	bne.n	8008122 <xQueueReceive+0x13e>
 800811a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008122:	f001 fd7b 	bl	8009c1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008126:	1d3a      	adds	r2, r7, #4
 8008128:	f107 0310 	add.w	r3, r7, #16
 800812c:	4611      	mov	r1, r2
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fe8c 	bl	8008e4c <xTaskCheckForTimeOut>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d123      	bne.n	8008182 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800813a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800813c:	f000 f916 	bl	800836c <prvIsQueueEmpty>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d017      	beq.n	8008176 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008148:	3324      	adds	r3, #36	@ 0x24
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	4611      	mov	r1, r2
 800814e:	4618      	mov	r0, r3
 8008150:	f000 fdb0 	bl	8008cb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008154:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008156:	f000 f8b7 	bl	80082c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800815a:	f000 fbe5 	bl	8008928 <xTaskResumeAll>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d189      	bne.n	8008078 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008164:	4b0f      	ldr	r3, [pc, #60]	@ (80081a4 <xQueueReceive+0x1c0>)
 8008166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	e780      	b.n	8008078 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008176:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008178:	f000 f8a6 	bl	80082c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800817c:	f000 fbd4 	bl	8008928 <xTaskResumeAll>
 8008180:	e77a      	b.n	8008078 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008182:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008184:	f000 f8a0 	bl	80082c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008188:	f000 fbce 	bl	8008928 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800818c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800818e:	f000 f8ed 	bl	800836c <prvIsQueueEmpty>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	f43f af6f 	beq.w	8008078 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800819a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800819c:	4618      	mov	r0, r3
 800819e:	3730      	adds	r7, #48	@ 0x30
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	e000ed04 	.word	0xe000ed04

080081a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081b4:	2300      	movs	r3, #0
 80081b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10d      	bne.n	80081e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d14d      	bne.n	800826a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 ff9e 	bl	8009114 <xTaskPriorityDisinherit>
 80081d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	609a      	str	r2, [r3, #8]
 80081e0:	e043      	b.n	800826a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d119      	bne.n	800821c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6858      	ldr	r0, [r3, #4]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f0:	461a      	mov	r2, r3
 80081f2:	68b9      	ldr	r1, [r7, #8]
 80081f4:	f002 f844 	bl	800a280 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008200:	441a      	add	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	429a      	cmp	r2, r3
 8008210:	d32b      	bcc.n	800826a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	605a      	str	r2, [r3, #4]
 800821a:	e026      	b.n	800826a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	68d8      	ldr	r0, [r3, #12]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008224:	461a      	mov	r2, r3
 8008226:	68b9      	ldr	r1, [r7, #8]
 8008228:	f002 f82a 	bl	800a280 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	68da      	ldr	r2, [r3, #12]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008234:	425b      	negs	r3, r3
 8008236:	441a      	add	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	68da      	ldr	r2, [r3, #12]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	429a      	cmp	r2, r3
 8008246:	d207      	bcs.n	8008258 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008250:	425b      	negs	r3, r3
 8008252:	441a      	add	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b02      	cmp	r3, #2
 800825c:	d105      	bne.n	800826a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d002      	beq.n	800826a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	3b01      	subs	r3, #1
 8008268:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	1c5a      	adds	r2, r3, #1
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008272:	697b      	ldr	r3, [r7, #20]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3718      	adds	r7, #24
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800828a:	2b00      	cmp	r3, #0
 800828c:	d018      	beq.n	80082c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68da      	ldr	r2, [r3, #12]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008296:	441a      	add	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d303      	bcc.n	80082b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68d9      	ldr	r1, [r3, #12]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b8:	461a      	mov	r2, r3
 80082ba:	6838      	ldr	r0, [r7, #0]
 80082bc:	f001 ffe0 	bl	800a280 <memcpy>
	}
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082d0:	f001 fc72 	bl	8009bb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082dc:	e011      	b.n	8008302 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d012      	beq.n	800830c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	3324      	adds	r3, #36	@ 0x24
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 fd34 	bl	8008d58 <xTaskRemoveFromEventList>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082f6:	f000 fe0d 	bl	8008f14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082fa:	7bfb      	ldrb	r3, [r7, #15]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008306:	2b00      	cmp	r3, #0
 8008308:	dce9      	bgt.n	80082de <prvUnlockQueue+0x16>
 800830a:	e000      	b.n	800830e <prvUnlockQueue+0x46>
					break;
 800830c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	22ff      	movs	r2, #255	@ 0xff
 8008312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008316:	f001 fc81 	bl	8009c1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800831a:	f001 fc4d 	bl	8009bb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008324:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008326:	e011      	b.n	800834c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d012      	beq.n	8008356 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	3310      	adds	r3, #16
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fd0f 	bl	8008d58 <xTaskRemoveFromEventList>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008340:	f000 fde8 	bl	8008f14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008344:	7bbb      	ldrb	r3, [r7, #14]
 8008346:	3b01      	subs	r3, #1
 8008348:	b2db      	uxtb	r3, r3
 800834a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800834c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008350:	2b00      	cmp	r3, #0
 8008352:	dce9      	bgt.n	8008328 <prvUnlockQueue+0x60>
 8008354:	e000      	b.n	8008358 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008356:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	22ff      	movs	r2, #255	@ 0xff
 800835c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008360:	f001 fc5c 	bl	8009c1c <vPortExitCritical>
}
 8008364:	bf00      	nop
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008374:	f001 fc20 	bl	8009bb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800837c:	2b00      	cmp	r3, #0
 800837e:	d102      	bne.n	8008386 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008380:	2301      	movs	r3, #1
 8008382:	60fb      	str	r3, [r7, #12]
 8008384:	e001      	b.n	800838a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008386:	2300      	movs	r3, #0
 8008388:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800838a:	f001 fc47 	bl	8009c1c <vPortExitCritical>

	return xReturn;
 800838e:	68fb      	ldr	r3, [r7, #12]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083a0:	f001 fc0a 	bl	8009bb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d102      	bne.n	80083b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083b0:	2301      	movs	r3, #1
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	e001      	b.n	80083ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083ba:	f001 fc2f 	bl	8009c1c <vPortExitCritical>

	return xReturn;
 80083be:	68fb      	ldr	r3, [r7, #12]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083d2:	2300      	movs	r3, #0
 80083d4:	60fb      	str	r3, [r7, #12]
 80083d6:	e014      	b.n	8008402 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083d8:	4a0f      	ldr	r2, [pc, #60]	@ (8008418 <vQueueAddToRegistry+0x50>)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10b      	bne.n	80083fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083e4:	490c      	ldr	r1, [pc, #48]	@ (8008418 <vQueueAddToRegistry+0x50>)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083ee:	4a0a      	ldr	r2, [pc, #40]	@ (8008418 <vQueueAddToRegistry+0x50>)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	4413      	add	r3, r2
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083fa:	e006      	b.n	800840a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	3301      	adds	r3, #1
 8008400:	60fb      	str	r3, [r7, #12]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2b07      	cmp	r3, #7
 8008406:	d9e7      	bls.n	80083d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008408:	bf00      	nop
 800840a:	bf00      	nop
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	20000ec4 	.word	0x20000ec4

0800841c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800842c:	f001 fbc4 	bl	8009bb8 <vPortEnterCritical>
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008436:	b25b      	sxtb	r3, r3
 8008438:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800843c:	d103      	bne.n	8008446 <vQueueWaitForMessageRestricted+0x2a>
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800844c:	b25b      	sxtb	r3, r3
 800844e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008452:	d103      	bne.n	800845c <vQueueWaitForMessageRestricted+0x40>
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800845c:	f001 fbde 	bl	8009c1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008464:	2b00      	cmp	r3, #0
 8008466:	d106      	bne.n	8008476 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	3324      	adds	r3, #36	@ 0x24
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	68b9      	ldr	r1, [r7, #8]
 8008470:	4618      	mov	r0, r3
 8008472:	f000 fc45 	bl	8008d00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008476:	6978      	ldr	r0, [r7, #20]
 8008478:	f7ff ff26 	bl	80082c8 <prvUnlockQueue>
	}
 800847c:	bf00      	nop
 800847e:	3718      	adds	r7, #24
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008484:	b580      	push	{r7, lr}
 8008486:	b08e      	sub	sp, #56	@ 0x38
 8008488:	af04      	add	r7, sp, #16
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10b      	bne.n	80084b0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	623b      	str	r3, [r7, #32]
}
 80084aa:	bf00      	nop
 80084ac:	bf00      	nop
 80084ae:	e7fd      	b.n	80084ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80084b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10b      	bne.n	80084ce <xTaskCreateStatic+0x4a>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	61fb      	str	r3, [r7, #28]
}
 80084c8:	bf00      	nop
 80084ca:	bf00      	nop
 80084cc:	e7fd      	b.n	80084ca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084ce:	235c      	movs	r3, #92	@ 0x5c
 80084d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	2b5c      	cmp	r3, #92	@ 0x5c
 80084d6:	d00b      	beq.n	80084f0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80084d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	61bb      	str	r3, [r7, #24]
}
 80084ea:	bf00      	nop
 80084ec:	bf00      	nop
 80084ee:	e7fd      	b.n	80084ec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d01e      	beq.n	8008536 <xTaskCreateStatic+0xb2>
 80084f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d01b      	beq.n	8008536 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008500:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008504:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008506:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850a:	2202      	movs	r2, #2
 800850c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008510:	2300      	movs	r3, #0
 8008512:	9303      	str	r3, [sp, #12]
 8008514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008516:	9302      	str	r3, [sp, #8]
 8008518:	f107 0314 	add.w	r3, r7, #20
 800851c:	9301      	str	r3, [sp, #4]
 800851e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	68b9      	ldr	r1, [r7, #8]
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 f850 	bl	80085ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800852e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008530:	f000 f8de 	bl	80086f0 <prvAddNewTaskToReadyList>
 8008534:	e001      	b.n	800853a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008536:	2300      	movs	r3, #0
 8008538:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800853a:	697b      	ldr	r3, [r7, #20]
	}
 800853c:	4618      	mov	r0, r3
 800853e:	3728      	adds	r7, #40	@ 0x28
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008544:	b580      	push	{r7, lr}
 8008546:	b08c      	sub	sp, #48	@ 0x30
 8008548:	af04      	add	r7, sp, #16
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	603b      	str	r3, [r7, #0]
 8008550:	4613      	mov	r3, r2
 8008552:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008554:	88fb      	ldrh	r3, [r7, #6]
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4618      	mov	r0, r3
 800855a:	f001 fc4f 	bl	8009dfc <pvPortMalloc>
 800855e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00e      	beq.n	8008584 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008566:	205c      	movs	r0, #92	@ 0x5c
 8008568:	f001 fc48 	bl	8009dfc <pvPortMalloc>
 800856c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d003      	beq.n	800857c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	631a      	str	r2, [r3, #48]	@ 0x30
 800857a:	e005      	b.n	8008588 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800857c:	6978      	ldr	r0, [r7, #20]
 800857e:	f001 fd0b 	bl	8009f98 <vPortFree>
 8008582:	e001      	b.n	8008588 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008584:	2300      	movs	r3, #0
 8008586:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d017      	beq.n	80085be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008596:	88fa      	ldrh	r2, [r7, #6]
 8008598:	2300      	movs	r3, #0
 800859a:	9303      	str	r3, [sp, #12]
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	9302      	str	r3, [sp, #8]
 80085a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a2:	9301      	str	r3, [sp, #4]
 80085a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	68b9      	ldr	r1, [r7, #8]
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f000 f80e 	bl	80085ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085b2:	69f8      	ldr	r0, [r7, #28]
 80085b4:	f000 f89c 	bl	80086f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085b8:	2301      	movs	r3, #1
 80085ba:	61bb      	str	r3, [r7, #24]
 80085bc:	e002      	b.n	80085c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085c4:	69bb      	ldr	r3, [r7, #24]
	}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3720      	adds	r7, #32
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b088      	sub	sp, #32
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	60f8      	str	r0, [r7, #12]
 80085d6:	60b9      	str	r1, [r7, #8]
 80085d8:	607a      	str	r2, [r7, #4]
 80085da:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085de:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	461a      	mov	r2, r3
 80085e6:	21a5      	movs	r1, #165	@ 0xa5
 80085e8:	f001 fe16 	bl	800a218 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80085f6:	3b01      	subs	r3, #1
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	f023 0307 	bic.w	r3, r3, #7
 8008604:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	f003 0307 	and.w	r3, r3, #7
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00b      	beq.n	8008628 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	617b      	str	r3, [r7, #20]
}
 8008622:	bf00      	nop
 8008624:	bf00      	nop
 8008626:	e7fd      	b.n	8008624 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d01f      	beq.n	800866e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800862e:	2300      	movs	r3, #0
 8008630:	61fb      	str	r3, [r7, #28]
 8008632:	e012      	b.n	800865a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	4413      	add	r3, r2
 800863a:	7819      	ldrb	r1, [r3, #0]
 800863c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	4413      	add	r3, r2
 8008642:	3334      	adds	r3, #52	@ 0x34
 8008644:	460a      	mov	r2, r1
 8008646:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	4413      	add	r3, r2
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d006      	beq.n	8008662 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	3301      	adds	r3, #1
 8008658:	61fb      	str	r3, [r7, #28]
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	2b0f      	cmp	r3, #15
 800865e:	d9e9      	bls.n	8008634 <prvInitialiseNewTask+0x66>
 8008660:	e000      	b.n	8008664 <prvInitialiseNewTask+0x96>
			{
				break;
 8008662:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800866c:	e003      	b.n	8008676 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008670:	2200      	movs	r2, #0
 8008672:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008678:	2b37      	cmp	r3, #55	@ 0x37
 800867a:	d901      	bls.n	8008680 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800867c:	2337      	movs	r3, #55	@ 0x37
 800867e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008682:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008684:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008688:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800868a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800868c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868e:	2200      	movs	r2, #0
 8008690:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008694:	3304      	adds	r3, #4
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff f966 	bl	8007968 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800869c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869e:	3318      	adds	r3, #24
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7ff f961 	bl	8007968 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80086b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086ba:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086be:	2200      	movs	r2, #0
 80086c0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	68f9      	ldr	r1, [r7, #12]
 80086ce:	69b8      	ldr	r0, [r7, #24]
 80086d0:	f001 f93e 	bl	8009950 <pxPortInitialiseStack>
 80086d4:	4602      	mov	r2, r0
 80086d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086e6:	bf00      	nop
 80086e8:	3720      	adds	r7, #32
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
	...

080086f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086f8:	f001 fa5e 	bl	8009bb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086fc:	4b2d      	ldr	r3, [pc, #180]	@ (80087b4 <prvAddNewTaskToReadyList+0xc4>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	3301      	adds	r3, #1
 8008702:	4a2c      	ldr	r2, [pc, #176]	@ (80087b4 <prvAddNewTaskToReadyList+0xc4>)
 8008704:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008706:	4b2c      	ldr	r3, [pc, #176]	@ (80087b8 <prvAddNewTaskToReadyList+0xc8>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d109      	bne.n	8008722 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800870e:	4a2a      	ldr	r2, [pc, #168]	@ (80087b8 <prvAddNewTaskToReadyList+0xc8>)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008714:	4b27      	ldr	r3, [pc, #156]	@ (80087b4 <prvAddNewTaskToReadyList+0xc4>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d110      	bne.n	800873e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800871c:	f000 fc1e 	bl	8008f5c <prvInitialiseTaskLists>
 8008720:	e00d      	b.n	800873e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008722:	4b26      	ldr	r3, [pc, #152]	@ (80087bc <prvAddNewTaskToReadyList+0xcc>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d109      	bne.n	800873e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800872a:	4b23      	ldr	r3, [pc, #140]	@ (80087b8 <prvAddNewTaskToReadyList+0xc8>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008734:	429a      	cmp	r2, r3
 8008736:	d802      	bhi.n	800873e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008738:	4a1f      	ldr	r2, [pc, #124]	@ (80087b8 <prvAddNewTaskToReadyList+0xc8>)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800873e:	4b20      	ldr	r3, [pc, #128]	@ (80087c0 <prvAddNewTaskToReadyList+0xd0>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3301      	adds	r3, #1
 8008744:	4a1e      	ldr	r2, [pc, #120]	@ (80087c0 <prvAddNewTaskToReadyList+0xd0>)
 8008746:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008748:	4b1d      	ldr	r3, [pc, #116]	@ (80087c0 <prvAddNewTaskToReadyList+0xd0>)
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008754:	4b1b      	ldr	r3, [pc, #108]	@ (80087c4 <prvAddNewTaskToReadyList+0xd4>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	429a      	cmp	r2, r3
 800875a:	d903      	bls.n	8008764 <prvAddNewTaskToReadyList+0x74>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008760:	4a18      	ldr	r2, [pc, #96]	@ (80087c4 <prvAddNewTaskToReadyList+0xd4>)
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008768:	4613      	mov	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4a15      	ldr	r2, [pc, #84]	@ (80087c8 <prvAddNewTaskToReadyList+0xd8>)
 8008772:	441a      	add	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	3304      	adds	r3, #4
 8008778:	4619      	mov	r1, r3
 800877a:	4610      	mov	r0, r2
 800877c:	f7ff f901 	bl	8007982 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008780:	f001 fa4c 	bl	8009c1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008784:	4b0d      	ldr	r3, [pc, #52]	@ (80087bc <prvAddNewTaskToReadyList+0xcc>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00e      	beq.n	80087aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800878c:	4b0a      	ldr	r3, [pc, #40]	@ (80087b8 <prvAddNewTaskToReadyList+0xc8>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008796:	429a      	cmp	r2, r3
 8008798:	d207      	bcs.n	80087aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800879a:	4b0c      	ldr	r3, [pc, #48]	@ (80087cc <prvAddNewTaskToReadyList+0xdc>)
 800879c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087a0:	601a      	str	r2, [r3, #0]
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087aa:	bf00      	nop
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	200013d8 	.word	0x200013d8
 80087b8:	20000f04 	.word	0x20000f04
 80087bc:	200013e4 	.word	0x200013e4
 80087c0:	200013f4 	.word	0x200013f4
 80087c4:	200013e0 	.word	0x200013e0
 80087c8:	20000f08 	.word	0x20000f08
 80087cc:	e000ed04 	.word	0xe000ed04

080087d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087d8:	2300      	movs	r3, #0
 80087da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d018      	beq.n	8008814 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087e2:	4b14      	ldr	r3, [pc, #80]	@ (8008834 <vTaskDelay+0x64>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00b      	beq.n	8008802 <vTaskDelay+0x32>
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	60bb      	str	r3, [r7, #8]
}
 80087fc:	bf00      	nop
 80087fe:	bf00      	nop
 8008800:	e7fd      	b.n	80087fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008802:	f000 f883 	bl	800890c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008806:	2100      	movs	r1, #0
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fcf3 	bl	80091f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800880e:	f000 f88b 	bl	8008928 <xTaskResumeAll>
 8008812:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d107      	bne.n	800882a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800881a:	4b07      	ldr	r3, [pc, #28]	@ (8008838 <vTaskDelay+0x68>)
 800881c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800882a:	bf00      	nop
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	20001400 	.word	0x20001400
 8008838:	e000ed04 	.word	0xe000ed04

0800883c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b08a      	sub	sp, #40	@ 0x28
 8008840:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008842:	2300      	movs	r3, #0
 8008844:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008846:	2300      	movs	r3, #0
 8008848:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800884a:	463a      	mov	r2, r7
 800884c:	1d39      	adds	r1, r7, #4
 800884e:	f107 0308 	add.w	r3, r7, #8
 8008852:	4618      	mov	r0, r3
 8008854:	f7ff f834 	bl	80078c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68ba      	ldr	r2, [r7, #8]
 800885e:	9202      	str	r2, [sp, #8]
 8008860:	9301      	str	r3, [sp, #4]
 8008862:	2300      	movs	r3, #0
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	2300      	movs	r3, #0
 8008868:	460a      	mov	r2, r1
 800886a:	4922      	ldr	r1, [pc, #136]	@ (80088f4 <vTaskStartScheduler+0xb8>)
 800886c:	4822      	ldr	r0, [pc, #136]	@ (80088f8 <vTaskStartScheduler+0xbc>)
 800886e:	f7ff fe09 	bl	8008484 <xTaskCreateStatic>
 8008872:	4603      	mov	r3, r0
 8008874:	4a21      	ldr	r2, [pc, #132]	@ (80088fc <vTaskStartScheduler+0xc0>)
 8008876:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008878:	4b20      	ldr	r3, [pc, #128]	@ (80088fc <vTaskStartScheduler+0xc0>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d002      	beq.n	8008886 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008880:	2301      	movs	r3, #1
 8008882:	617b      	str	r3, [r7, #20]
 8008884:	e001      	b.n	800888a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008886:	2300      	movs	r3, #0
 8008888:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d102      	bne.n	8008896 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008890:	f000 fd04 	bl	800929c <xTimerCreateTimerTask>
 8008894:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d116      	bne.n	80088ca <vTaskStartScheduler+0x8e>
	__asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	613b      	str	r3, [r7, #16]
}
 80088ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088b0:	4b13      	ldr	r3, [pc, #76]	@ (8008900 <vTaskStartScheduler+0xc4>)
 80088b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80088b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088b8:	4b12      	ldr	r3, [pc, #72]	@ (8008904 <vTaskStartScheduler+0xc8>)
 80088ba:	2201      	movs	r2, #1
 80088bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088be:	4b12      	ldr	r3, [pc, #72]	@ (8008908 <vTaskStartScheduler+0xcc>)
 80088c0:	2200      	movs	r2, #0
 80088c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088c4:	f001 f8d4 	bl	8009a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088c8:	e00f      	b.n	80088ea <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088d0:	d10b      	bne.n	80088ea <vTaskStartScheduler+0xae>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	60fb      	str	r3, [r7, #12]
}
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop
 80088e8:	e7fd      	b.n	80088e6 <vTaskStartScheduler+0xaa>
}
 80088ea:	bf00      	nop
 80088ec:	3718      	adds	r7, #24
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	0800ab54 	.word	0x0800ab54
 80088f8:	08008f2d 	.word	0x08008f2d
 80088fc:	200013fc 	.word	0x200013fc
 8008900:	200013f8 	.word	0x200013f8
 8008904:	200013e4 	.word	0x200013e4
 8008908:	200013dc 	.word	0x200013dc

0800890c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800890c:	b480      	push	{r7}
 800890e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008910:	4b04      	ldr	r3, [pc, #16]	@ (8008924 <vTaskSuspendAll+0x18>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3301      	adds	r3, #1
 8008916:	4a03      	ldr	r2, [pc, #12]	@ (8008924 <vTaskSuspendAll+0x18>)
 8008918:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800891a:	bf00      	nop
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr
 8008924:	20001400 	.word	0x20001400

08008928 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800892e:	2300      	movs	r3, #0
 8008930:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008932:	2300      	movs	r3, #0
 8008934:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008936:	4b42      	ldr	r3, [pc, #264]	@ (8008a40 <xTaskResumeAll+0x118>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10b      	bne.n	8008956 <xTaskResumeAll+0x2e>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	603b      	str	r3, [r7, #0]
}
 8008950:	bf00      	nop
 8008952:	bf00      	nop
 8008954:	e7fd      	b.n	8008952 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008956:	f001 f92f 	bl	8009bb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800895a:	4b39      	ldr	r3, [pc, #228]	@ (8008a40 <xTaskResumeAll+0x118>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3b01      	subs	r3, #1
 8008960:	4a37      	ldr	r2, [pc, #220]	@ (8008a40 <xTaskResumeAll+0x118>)
 8008962:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008964:	4b36      	ldr	r3, [pc, #216]	@ (8008a40 <xTaskResumeAll+0x118>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d162      	bne.n	8008a32 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800896c:	4b35      	ldr	r3, [pc, #212]	@ (8008a44 <xTaskResumeAll+0x11c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d05e      	beq.n	8008a32 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008974:	e02f      	b.n	80089d6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008976:	4b34      	ldr	r3, [pc, #208]	@ (8008a48 <xTaskResumeAll+0x120>)
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3318      	adds	r3, #24
 8008982:	4618      	mov	r0, r3
 8008984:	f7ff f85a 	bl	8007a3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	3304      	adds	r3, #4
 800898c:	4618      	mov	r0, r3
 800898e:	f7ff f855 	bl	8007a3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008996:	4b2d      	ldr	r3, [pc, #180]	@ (8008a4c <xTaskResumeAll+0x124>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	429a      	cmp	r2, r3
 800899c:	d903      	bls.n	80089a6 <xTaskResumeAll+0x7e>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a2:	4a2a      	ldr	r2, [pc, #168]	@ (8008a4c <xTaskResumeAll+0x124>)
 80089a4:	6013      	str	r3, [r2, #0]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089aa:	4613      	mov	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4413      	add	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4a27      	ldr	r2, [pc, #156]	@ (8008a50 <xTaskResumeAll+0x128>)
 80089b4:	441a      	add	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3304      	adds	r3, #4
 80089ba:	4619      	mov	r1, r3
 80089bc:	4610      	mov	r0, r2
 80089be:	f7fe ffe0 	bl	8007982 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089c6:	4b23      	ldr	r3, [pc, #140]	@ (8008a54 <xTaskResumeAll+0x12c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d302      	bcc.n	80089d6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80089d0:	4b21      	ldr	r3, [pc, #132]	@ (8008a58 <xTaskResumeAll+0x130>)
 80089d2:	2201      	movs	r2, #1
 80089d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089d6:	4b1c      	ldr	r3, [pc, #112]	@ (8008a48 <xTaskResumeAll+0x120>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1cb      	bne.n	8008976 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d001      	beq.n	80089e8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089e4:	f000 fb58 	bl	8009098 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089e8:	4b1c      	ldr	r3, [pc, #112]	@ (8008a5c <xTaskResumeAll+0x134>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d010      	beq.n	8008a16 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089f4:	f000 f846 	bl	8008a84 <xTaskIncrementTick>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d002      	beq.n	8008a04 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80089fe:	4b16      	ldr	r3, [pc, #88]	@ (8008a58 <xTaskResumeAll+0x130>)
 8008a00:	2201      	movs	r2, #1
 8008a02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	3b01      	subs	r3, #1
 8008a08:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1f1      	bne.n	80089f4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008a10:	4b12      	ldr	r3, [pc, #72]	@ (8008a5c <xTaskResumeAll+0x134>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a16:	4b10      	ldr	r3, [pc, #64]	@ (8008a58 <xTaskResumeAll+0x130>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d009      	beq.n	8008a32 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a22:	4b0f      	ldr	r3, [pc, #60]	@ (8008a60 <xTaskResumeAll+0x138>)
 8008a24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a28:	601a      	str	r2, [r3, #0]
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a32:	f001 f8f3 	bl	8009c1c <vPortExitCritical>

	return xAlreadyYielded;
 8008a36:	68bb      	ldr	r3, [r7, #8]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	20001400 	.word	0x20001400
 8008a44:	200013d8 	.word	0x200013d8
 8008a48:	20001398 	.word	0x20001398
 8008a4c:	200013e0 	.word	0x200013e0
 8008a50:	20000f08 	.word	0x20000f08
 8008a54:	20000f04 	.word	0x20000f04
 8008a58:	200013ec 	.word	0x200013ec
 8008a5c:	200013e8 	.word	0x200013e8
 8008a60:	e000ed04 	.word	0xe000ed04

08008a64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a6a:	4b05      	ldr	r3, [pc, #20]	@ (8008a80 <xTaskGetTickCount+0x1c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a70:	687b      	ldr	r3, [r7, #4]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	200013dc 	.word	0x200013dc

08008a84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a8e:	4b4f      	ldr	r3, [pc, #316]	@ (8008bcc <xTaskIncrementTick+0x148>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f040 8090 	bne.w	8008bb8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a98:	4b4d      	ldr	r3, [pc, #308]	@ (8008bd0 <xTaskIncrementTick+0x14c>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008aa0:	4a4b      	ldr	r2, [pc, #300]	@ (8008bd0 <xTaskIncrementTick+0x14c>)
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d121      	bne.n	8008af0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008aac:	4b49      	ldr	r3, [pc, #292]	@ (8008bd4 <xTaskIncrementTick+0x150>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00b      	beq.n	8008ace <xTaskIncrementTick+0x4a>
	__asm volatile
 8008ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	603b      	str	r3, [r7, #0]
}
 8008ac8:	bf00      	nop
 8008aca:	bf00      	nop
 8008acc:	e7fd      	b.n	8008aca <xTaskIncrementTick+0x46>
 8008ace:	4b41      	ldr	r3, [pc, #260]	@ (8008bd4 <xTaskIncrementTick+0x150>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	60fb      	str	r3, [r7, #12]
 8008ad4:	4b40      	ldr	r3, [pc, #256]	@ (8008bd8 <xTaskIncrementTick+0x154>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a3e      	ldr	r2, [pc, #248]	@ (8008bd4 <xTaskIncrementTick+0x150>)
 8008ada:	6013      	str	r3, [r2, #0]
 8008adc:	4a3e      	ldr	r2, [pc, #248]	@ (8008bd8 <xTaskIncrementTick+0x154>)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6013      	str	r3, [r2, #0]
 8008ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8008bdc <xTaskIncrementTick+0x158>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	4a3c      	ldr	r2, [pc, #240]	@ (8008bdc <xTaskIncrementTick+0x158>)
 8008aea:	6013      	str	r3, [r2, #0]
 8008aec:	f000 fad4 	bl	8009098 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008af0:	4b3b      	ldr	r3, [pc, #236]	@ (8008be0 <xTaskIncrementTick+0x15c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d349      	bcc.n	8008b8e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008afa:	4b36      	ldr	r3, [pc, #216]	@ (8008bd4 <xTaskIncrementTick+0x150>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d104      	bne.n	8008b0e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b04:	4b36      	ldr	r3, [pc, #216]	@ (8008be0 <xTaskIncrementTick+0x15c>)
 8008b06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b0a:	601a      	str	r2, [r3, #0]
					break;
 8008b0c:	e03f      	b.n	8008b8e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b0e:	4b31      	ldr	r3, [pc, #196]	@ (8008bd4 <xTaskIncrementTick+0x150>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d203      	bcs.n	8008b2e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b26:	4a2e      	ldr	r2, [pc, #184]	@ (8008be0 <xTaskIncrementTick+0x15c>)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b2c:	e02f      	b.n	8008b8e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	3304      	adds	r3, #4
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe ff82 	bl	8007a3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d004      	beq.n	8008b4a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	3318      	adds	r3, #24
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fe ff79 	bl	8007a3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b4e:	4b25      	ldr	r3, [pc, #148]	@ (8008be4 <xTaskIncrementTick+0x160>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d903      	bls.n	8008b5e <xTaskIncrementTick+0xda>
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b5a:	4a22      	ldr	r2, [pc, #136]	@ (8008be4 <xTaskIncrementTick+0x160>)
 8008b5c:	6013      	str	r3, [r2, #0]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b62:	4613      	mov	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4a1f      	ldr	r2, [pc, #124]	@ (8008be8 <xTaskIncrementTick+0x164>)
 8008b6c:	441a      	add	r2, r3
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	3304      	adds	r3, #4
 8008b72:	4619      	mov	r1, r3
 8008b74:	4610      	mov	r0, r2
 8008b76:	f7fe ff04 	bl	8007982 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8008bec <xTaskIncrementTick+0x168>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d3b8      	bcc.n	8008afa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b8c:	e7b5      	b.n	8008afa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b8e:	4b17      	ldr	r3, [pc, #92]	@ (8008bec <xTaskIncrementTick+0x168>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b94:	4914      	ldr	r1, [pc, #80]	@ (8008be8 <xTaskIncrementTick+0x164>)
 8008b96:	4613      	mov	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	440b      	add	r3, r1
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d901      	bls.n	8008baa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008baa:	4b11      	ldr	r3, [pc, #68]	@ (8008bf0 <xTaskIncrementTick+0x16c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d007      	beq.n	8008bc2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	617b      	str	r3, [r7, #20]
 8008bb6:	e004      	b.n	8008bc2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8008bf4 <xTaskIncrementTick+0x170>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	4a0d      	ldr	r2, [pc, #52]	@ (8008bf4 <xTaskIncrementTick+0x170>)
 8008bc0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008bc2:	697b      	ldr	r3, [r7, #20]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	20001400 	.word	0x20001400
 8008bd0:	200013dc 	.word	0x200013dc
 8008bd4:	20001390 	.word	0x20001390
 8008bd8:	20001394 	.word	0x20001394
 8008bdc:	200013f0 	.word	0x200013f0
 8008be0:	200013f8 	.word	0x200013f8
 8008be4:	200013e0 	.word	0x200013e0
 8008be8:	20000f08 	.word	0x20000f08
 8008bec:	20000f04 	.word	0x20000f04
 8008bf0:	200013ec 	.word	0x200013ec
 8008bf4:	200013e8 	.word	0x200013e8

08008bf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bfe:	4b28      	ldr	r3, [pc, #160]	@ (8008ca0 <vTaskSwitchContext+0xa8>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c06:	4b27      	ldr	r3, [pc, #156]	@ (8008ca4 <vTaskSwitchContext+0xac>)
 8008c08:	2201      	movs	r2, #1
 8008c0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c0c:	e042      	b.n	8008c94 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008c0e:	4b25      	ldr	r3, [pc, #148]	@ (8008ca4 <vTaskSwitchContext+0xac>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c14:	4b24      	ldr	r3, [pc, #144]	@ (8008ca8 <vTaskSwitchContext+0xb0>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	60fb      	str	r3, [r7, #12]
 8008c1a:	e011      	b.n	8008c40 <vTaskSwitchContext+0x48>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10b      	bne.n	8008c3a <vTaskSwitchContext+0x42>
	__asm volatile
 8008c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	607b      	str	r3, [r7, #4]
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop
 8008c38:	e7fd      	b.n	8008c36 <vTaskSwitchContext+0x3e>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	60fb      	str	r3, [r7, #12]
 8008c40:	491a      	ldr	r1, [pc, #104]	@ (8008cac <vTaskSwitchContext+0xb4>)
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	4613      	mov	r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4413      	add	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	440b      	add	r3, r1
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d0e3      	beq.n	8008c1c <vTaskSwitchContext+0x24>
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4a13      	ldr	r2, [pc, #76]	@ (8008cac <vTaskSwitchContext+0xb4>)
 8008c60:	4413      	add	r3, r2
 8008c62:	60bb      	str	r3, [r7, #8]
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	685a      	ldr	r2, [r3, #4]
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	605a      	str	r2, [r3, #4]
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	3308      	adds	r3, #8
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d104      	bne.n	8008c84 <vTaskSwitchContext+0x8c>
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	685a      	ldr	r2, [r3, #4]
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	605a      	str	r2, [r3, #4]
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	4a09      	ldr	r2, [pc, #36]	@ (8008cb0 <vTaskSwitchContext+0xb8>)
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	4a06      	ldr	r2, [pc, #24]	@ (8008ca8 <vTaskSwitchContext+0xb0>)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6013      	str	r3, [r2, #0]
}
 8008c94:	bf00      	nop
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	20001400 	.word	0x20001400
 8008ca4:	200013ec 	.word	0x200013ec
 8008ca8:	200013e0 	.word	0x200013e0
 8008cac:	20000f08 	.word	0x20000f08
 8008cb0:	20000f04 	.word	0x20000f04

08008cb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10b      	bne.n	8008cdc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	60fb      	str	r3, [r7, #12]
}
 8008cd6:	bf00      	nop
 8008cd8:	bf00      	nop
 8008cda:	e7fd      	b.n	8008cd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cdc:	4b07      	ldr	r3, [pc, #28]	@ (8008cfc <vTaskPlaceOnEventList+0x48>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	3318      	adds	r3, #24
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f7fe fe70 	bl	80079ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008cea:	2101      	movs	r1, #1
 8008cec:	6838      	ldr	r0, [r7, #0]
 8008cee:	f000 fa81 	bl	80091f4 <prvAddCurrentTaskToDelayedList>
}
 8008cf2:	bf00      	nop
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	20000f04 	.word	0x20000f04

08008d00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10b      	bne.n	8008d2a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	617b      	str	r3, [r7, #20]
}
 8008d24:	bf00      	nop
 8008d26:	bf00      	nop
 8008d28:	e7fd      	b.n	8008d26 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8008d54 <vTaskPlaceOnEventListRestricted+0x54>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	3318      	adds	r3, #24
 8008d30:	4619      	mov	r1, r3
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f7fe fe25 	bl	8007982 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d002      	beq.n	8008d44 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008d3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d42:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d44:	6879      	ldr	r1, [r7, #4]
 8008d46:	68b8      	ldr	r0, [r7, #8]
 8008d48:	f000 fa54 	bl	80091f4 <prvAddCurrentTaskToDelayedList>
	}
 8008d4c:	bf00      	nop
 8008d4e:	3718      	adds	r7, #24
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20000f04 	.word	0x20000f04

08008d58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10b      	bne.n	8008d86 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	60fb      	str	r3, [r7, #12]
}
 8008d80:	bf00      	nop
 8008d82:	bf00      	nop
 8008d84:	e7fd      	b.n	8008d82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	3318      	adds	r3, #24
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fe fe56 	bl	8007a3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d90:	4b1d      	ldr	r3, [pc, #116]	@ (8008e08 <xTaskRemoveFromEventList+0xb0>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d11d      	bne.n	8008dd4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fe fe4d 	bl	8007a3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008da6:	4b19      	ldr	r3, [pc, #100]	@ (8008e0c <xTaskRemoveFromEventList+0xb4>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d903      	bls.n	8008db6 <xTaskRemoveFromEventList+0x5e>
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db2:	4a16      	ldr	r2, [pc, #88]	@ (8008e0c <xTaskRemoveFromEventList+0xb4>)
 8008db4:	6013      	str	r3, [r2, #0]
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dba:	4613      	mov	r3, r2
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4413      	add	r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4a13      	ldr	r2, [pc, #76]	@ (8008e10 <xTaskRemoveFromEventList+0xb8>)
 8008dc4:	441a      	add	r2, r3
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	3304      	adds	r3, #4
 8008dca:	4619      	mov	r1, r3
 8008dcc:	4610      	mov	r0, r2
 8008dce:	f7fe fdd8 	bl	8007982 <vListInsertEnd>
 8008dd2:	e005      	b.n	8008de0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	3318      	adds	r3, #24
 8008dd8:	4619      	mov	r1, r3
 8008dda:	480e      	ldr	r0, [pc, #56]	@ (8008e14 <xTaskRemoveFromEventList+0xbc>)
 8008ddc:	f7fe fdd1 	bl	8007982 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008de4:	4b0c      	ldr	r3, [pc, #48]	@ (8008e18 <xTaskRemoveFromEventList+0xc0>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d905      	bls.n	8008dfa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008dee:	2301      	movs	r3, #1
 8008df0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008df2:	4b0a      	ldr	r3, [pc, #40]	@ (8008e1c <xTaskRemoveFromEventList+0xc4>)
 8008df4:	2201      	movs	r2, #1
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	e001      	b.n	8008dfe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008dfe:	697b      	ldr	r3, [r7, #20]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3718      	adds	r7, #24
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	20001400 	.word	0x20001400
 8008e0c:	200013e0 	.word	0x200013e0
 8008e10:	20000f08 	.word	0x20000f08
 8008e14:	20001398 	.word	0x20001398
 8008e18:	20000f04 	.word	0x20000f04
 8008e1c:	200013ec 	.word	0x200013ec

08008e20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e28:	4b06      	ldr	r3, [pc, #24]	@ (8008e44 <vTaskInternalSetTimeOutState+0x24>)
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e30:	4b05      	ldr	r3, [pc, #20]	@ (8008e48 <vTaskInternalSetTimeOutState+0x28>)
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	605a      	str	r2, [r3, #4]
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	200013f0 	.word	0x200013f0
 8008e48:	200013dc 	.word	0x200013dc

08008e4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b088      	sub	sp, #32
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d10b      	bne.n	8008e74 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	613b      	str	r3, [r7, #16]
}
 8008e6e:	bf00      	nop
 8008e70:	bf00      	nop
 8008e72:	e7fd      	b.n	8008e70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10b      	bne.n	8008e92 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	60fb      	str	r3, [r7, #12]
}
 8008e8c:	bf00      	nop
 8008e8e:	bf00      	nop
 8008e90:	e7fd      	b.n	8008e8e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008e92:	f000 fe91 	bl	8009bb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e96:	4b1d      	ldr	r3, [pc, #116]	@ (8008f0c <xTaskCheckForTimeOut+0xc0>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008eae:	d102      	bne.n	8008eb6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	61fb      	str	r3, [r7, #28]
 8008eb4:	e023      	b.n	8008efe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	4b15      	ldr	r3, [pc, #84]	@ (8008f10 <xTaskCheckForTimeOut+0xc4>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d007      	beq.n	8008ed2 <xTaskCheckForTimeOut+0x86>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	69ba      	ldr	r2, [r7, #24]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d302      	bcc.n	8008ed2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	61fb      	str	r3, [r7, #28]
 8008ed0:	e015      	b.n	8008efe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d20b      	bcs.n	8008ef4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	1ad2      	subs	r2, r2, r3
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7ff ff99 	bl	8008e20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	61fb      	str	r3, [r7, #28]
 8008ef2:	e004      	b.n	8008efe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008efa:	2301      	movs	r3, #1
 8008efc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008efe:	f000 fe8d 	bl	8009c1c <vPortExitCritical>

	return xReturn;
 8008f02:	69fb      	ldr	r3, [r7, #28]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3720      	adds	r7, #32
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	200013dc 	.word	0x200013dc
 8008f10:	200013f0 	.word	0x200013f0

08008f14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f14:	b480      	push	{r7}
 8008f16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f18:	4b03      	ldr	r3, [pc, #12]	@ (8008f28 <vTaskMissedYield+0x14>)
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	601a      	str	r2, [r3, #0]
}
 8008f1e:	bf00      	nop
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr
 8008f28:	200013ec 	.word	0x200013ec

08008f2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f34:	f000 f852 	bl	8008fdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f38:	4b06      	ldr	r3, [pc, #24]	@ (8008f54 <prvIdleTask+0x28>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d9f9      	bls.n	8008f34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f40:	4b05      	ldr	r3, [pc, #20]	@ (8008f58 <prvIdleTask+0x2c>)
 8008f42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f46:	601a      	str	r2, [r3, #0]
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f50:	e7f0      	b.n	8008f34 <prvIdleTask+0x8>
 8008f52:	bf00      	nop
 8008f54:	20000f08 	.word	0x20000f08
 8008f58:	e000ed04 	.word	0xe000ed04

08008f5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f62:	2300      	movs	r3, #0
 8008f64:	607b      	str	r3, [r7, #4]
 8008f66:	e00c      	b.n	8008f82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4413      	add	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4a12      	ldr	r2, [pc, #72]	@ (8008fbc <prvInitialiseTaskLists+0x60>)
 8008f74:	4413      	add	r3, r2
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fe fcd6 	bl	8007928 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	607b      	str	r3, [r7, #4]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2b37      	cmp	r3, #55	@ 0x37
 8008f86:	d9ef      	bls.n	8008f68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f88:	480d      	ldr	r0, [pc, #52]	@ (8008fc0 <prvInitialiseTaskLists+0x64>)
 8008f8a:	f7fe fccd 	bl	8007928 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f8e:	480d      	ldr	r0, [pc, #52]	@ (8008fc4 <prvInitialiseTaskLists+0x68>)
 8008f90:	f7fe fcca 	bl	8007928 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f94:	480c      	ldr	r0, [pc, #48]	@ (8008fc8 <prvInitialiseTaskLists+0x6c>)
 8008f96:	f7fe fcc7 	bl	8007928 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f9a:	480c      	ldr	r0, [pc, #48]	@ (8008fcc <prvInitialiseTaskLists+0x70>)
 8008f9c:	f7fe fcc4 	bl	8007928 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fa0:	480b      	ldr	r0, [pc, #44]	@ (8008fd0 <prvInitialiseTaskLists+0x74>)
 8008fa2:	f7fe fcc1 	bl	8007928 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8008fd4 <prvInitialiseTaskLists+0x78>)
 8008fa8:	4a05      	ldr	r2, [pc, #20]	@ (8008fc0 <prvInitialiseTaskLists+0x64>)
 8008faa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008fac:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd8 <prvInitialiseTaskLists+0x7c>)
 8008fae:	4a05      	ldr	r2, [pc, #20]	@ (8008fc4 <prvInitialiseTaskLists+0x68>)
 8008fb0:	601a      	str	r2, [r3, #0]
}
 8008fb2:	bf00      	nop
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	20000f08 	.word	0x20000f08
 8008fc0:	20001368 	.word	0x20001368
 8008fc4:	2000137c 	.word	0x2000137c
 8008fc8:	20001398 	.word	0x20001398
 8008fcc:	200013ac 	.word	0x200013ac
 8008fd0:	200013c4 	.word	0x200013c4
 8008fd4:	20001390 	.word	0x20001390
 8008fd8:	20001394 	.word	0x20001394

08008fdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fe2:	e019      	b.n	8009018 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008fe4:	f000 fde8 	bl	8009bb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fe8:	4b10      	ldr	r3, [pc, #64]	@ (800902c <prvCheckTasksWaitingTermination+0x50>)
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fe fd21 	bl	8007a3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8009030 <prvCheckTasksWaitingTermination+0x54>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3b01      	subs	r3, #1
 8009000:	4a0b      	ldr	r2, [pc, #44]	@ (8009030 <prvCheckTasksWaitingTermination+0x54>)
 8009002:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009004:	4b0b      	ldr	r3, [pc, #44]	@ (8009034 <prvCheckTasksWaitingTermination+0x58>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3b01      	subs	r3, #1
 800900a:	4a0a      	ldr	r2, [pc, #40]	@ (8009034 <prvCheckTasksWaitingTermination+0x58>)
 800900c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800900e:	f000 fe05 	bl	8009c1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f810 	bl	8009038 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009018:	4b06      	ldr	r3, [pc, #24]	@ (8009034 <prvCheckTasksWaitingTermination+0x58>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1e1      	bne.n	8008fe4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009020:	bf00      	nop
 8009022:	bf00      	nop
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	200013ac 	.word	0x200013ac
 8009030:	200013d8 	.word	0x200013d8
 8009034:	200013c0 	.word	0x200013c0

08009038 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009046:	2b00      	cmp	r3, #0
 8009048:	d108      	bne.n	800905c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800904e:	4618      	mov	r0, r3
 8009050:	f000 ffa2 	bl	8009f98 <vPortFree>
				vPortFree( pxTCB );
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 ff9f 	bl	8009f98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800905a:	e019      	b.n	8009090 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009062:	2b01      	cmp	r3, #1
 8009064:	d103      	bne.n	800906e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 ff96 	bl	8009f98 <vPortFree>
	}
 800906c:	e010      	b.n	8009090 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009074:	2b02      	cmp	r3, #2
 8009076:	d00b      	beq.n	8009090 <prvDeleteTCB+0x58>
	__asm volatile
 8009078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907c:	f383 8811 	msr	BASEPRI, r3
 8009080:	f3bf 8f6f 	isb	sy
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	60fb      	str	r3, [r7, #12]
}
 800908a:	bf00      	nop
 800908c:	bf00      	nop
 800908e:	e7fd      	b.n	800908c <prvDeleteTCB+0x54>
	}
 8009090:	bf00      	nop
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800909e:	4b0c      	ldr	r3, [pc, #48]	@ (80090d0 <prvResetNextTaskUnblockTime+0x38>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d104      	bne.n	80090b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090a8:	4b0a      	ldr	r3, [pc, #40]	@ (80090d4 <prvResetNextTaskUnblockTime+0x3c>)
 80090aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80090b0:	e008      	b.n	80090c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090b2:	4b07      	ldr	r3, [pc, #28]	@ (80090d0 <prvResetNextTaskUnblockTime+0x38>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	4a04      	ldr	r2, [pc, #16]	@ (80090d4 <prvResetNextTaskUnblockTime+0x3c>)
 80090c2:	6013      	str	r3, [r2, #0]
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	20001390 	.word	0x20001390
 80090d4:	200013f8 	.word	0x200013f8

080090d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80090de:	4b0b      	ldr	r3, [pc, #44]	@ (800910c <xTaskGetSchedulerState+0x34>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d102      	bne.n	80090ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80090e6:	2301      	movs	r3, #1
 80090e8:	607b      	str	r3, [r7, #4]
 80090ea:	e008      	b.n	80090fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090ec:	4b08      	ldr	r3, [pc, #32]	@ (8009110 <xTaskGetSchedulerState+0x38>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d102      	bne.n	80090fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80090f4:	2302      	movs	r3, #2
 80090f6:	607b      	str	r3, [r7, #4]
 80090f8:	e001      	b.n	80090fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80090fa:	2300      	movs	r3, #0
 80090fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80090fe:	687b      	ldr	r3, [r7, #4]
	}
 8009100:	4618      	mov	r0, r3
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	200013e4 	.word	0x200013e4
 8009110:	20001400 	.word	0x20001400

08009114 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009120:	2300      	movs	r3, #0
 8009122:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d058      	beq.n	80091dc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800912a:	4b2f      	ldr	r3, [pc, #188]	@ (80091e8 <xTaskPriorityDisinherit+0xd4>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	429a      	cmp	r2, r3
 8009132:	d00b      	beq.n	800914c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009138:	f383 8811 	msr	BASEPRI, r3
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	60fb      	str	r3, [r7, #12]
}
 8009146:	bf00      	nop
 8009148:	bf00      	nop
 800914a:	e7fd      	b.n	8009148 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10b      	bne.n	800916c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	60bb      	str	r3, [r7, #8]
}
 8009166:	bf00      	nop
 8009168:	bf00      	nop
 800916a:	e7fd      	b.n	8009168 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009170:	1e5a      	subs	r2, r3, #1
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800917e:	429a      	cmp	r2, r3
 8009180:	d02c      	beq.n	80091dc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009186:	2b00      	cmp	r3, #0
 8009188:	d128      	bne.n	80091dc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	3304      	adds	r3, #4
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe fc54 	bl	8007a3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ac:	4b0f      	ldr	r3, [pc, #60]	@ (80091ec <xTaskPriorityDisinherit+0xd8>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d903      	bls.n	80091bc <xTaskPriorityDisinherit+0xa8>
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b8:	4a0c      	ldr	r2, [pc, #48]	@ (80091ec <xTaskPriorityDisinherit+0xd8>)
 80091ba:	6013      	str	r3, [r2, #0]
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c0:	4613      	mov	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	4a09      	ldr	r2, [pc, #36]	@ (80091f0 <xTaskPriorityDisinherit+0xdc>)
 80091ca:	441a      	add	r2, r3
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	3304      	adds	r3, #4
 80091d0:	4619      	mov	r1, r3
 80091d2:	4610      	mov	r0, r2
 80091d4:	f7fe fbd5 	bl	8007982 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80091d8:	2301      	movs	r3, #1
 80091da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091dc:	697b      	ldr	r3, [r7, #20]
	}
 80091de:	4618      	mov	r0, r3
 80091e0:	3718      	adds	r7, #24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	20000f04 	.word	0x20000f04
 80091ec:	200013e0 	.word	0x200013e0
 80091f0:	20000f08 	.word	0x20000f08

080091f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091fe:	4b21      	ldr	r3, [pc, #132]	@ (8009284 <prvAddCurrentTaskToDelayedList+0x90>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009204:	4b20      	ldr	r3, [pc, #128]	@ (8009288 <prvAddCurrentTaskToDelayedList+0x94>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	3304      	adds	r3, #4
 800920a:	4618      	mov	r0, r3
 800920c:	f7fe fc16 	bl	8007a3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009216:	d10a      	bne.n	800922e <prvAddCurrentTaskToDelayedList+0x3a>
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d007      	beq.n	800922e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800921e:	4b1a      	ldr	r3, [pc, #104]	@ (8009288 <prvAddCurrentTaskToDelayedList+0x94>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3304      	adds	r3, #4
 8009224:	4619      	mov	r1, r3
 8009226:	4819      	ldr	r0, [pc, #100]	@ (800928c <prvAddCurrentTaskToDelayedList+0x98>)
 8009228:	f7fe fbab 	bl	8007982 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800922c:	e026      	b.n	800927c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4413      	add	r3, r2
 8009234:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009236:	4b14      	ldr	r3, [pc, #80]	@ (8009288 <prvAddCurrentTaskToDelayedList+0x94>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	429a      	cmp	r2, r3
 8009244:	d209      	bcs.n	800925a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009246:	4b12      	ldr	r3, [pc, #72]	@ (8009290 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	4b0f      	ldr	r3, [pc, #60]	@ (8009288 <prvAddCurrentTaskToDelayedList+0x94>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3304      	adds	r3, #4
 8009250:	4619      	mov	r1, r3
 8009252:	4610      	mov	r0, r2
 8009254:	f7fe fbb9 	bl	80079ca <vListInsert>
}
 8009258:	e010      	b.n	800927c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800925a:	4b0e      	ldr	r3, [pc, #56]	@ (8009294 <prvAddCurrentTaskToDelayedList+0xa0>)
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	4b0a      	ldr	r3, [pc, #40]	@ (8009288 <prvAddCurrentTaskToDelayedList+0x94>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3304      	adds	r3, #4
 8009264:	4619      	mov	r1, r3
 8009266:	4610      	mov	r0, r2
 8009268:	f7fe fbaf 	bl	80079ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800926c:	4b0a      	ldr	r3, [pc, #40]	@ (8009298 <prvAddCurrentTaskToDelayedList+0xa4>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	429a      	cmp	r2, r3
 8009274:	d202      	bcs.n	800927c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009276:	4a08      	ldr	r2, [pc, #32]	@ (8009298 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	6013      	str	r3, [r2, #0]
}
 800927c:	bf00      	nop
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	200013dc 	.word	0x200013dc
 8009288:	20000f04 	.word	0x20000f04
 800928c:	200013c4 	.word	0x200013c4
 8009290:	20001394 	.word	0x20001394
 8009294:	20001390 	.word	0x20001390
 8009298:	200013f8 	.word	0x200013f8

0800929c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b08a      	sub	sp, #40	@ 0x28
 80092a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80092a2:	2300      	movs	r3, #0
 80092a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80092a6:	f000 fb13 	bl	80098d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80092aa:	4b1d      	ldr	r3, [pc, #116]	@ (8009320 <xTimerCreateTimerTask+0x84>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d021      	beq.n	80092f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80092b6:	2300      	movs	r3, #0
 80092b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80092ba:	1d3a      	adds	r2, r7, #4
 80092bc:	f107 0108 	add.w	r1, r7, #8
 80092c0:	f107 030c 	add.w	r3, r7, #12
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fe fb15 	bl	80078f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80092ca:	6879      	ldr	r1, [r7, #4]
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	9202      	str	r2, [sp, #8]
 80092d2:	9301      	str	r3, [sp, #4]
 80092d4:	2302      	movs	r3, #2
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	2300      	movs	r3, #0
 80092da:	460a      	mov	r2, r1
 80092dc:	4911      	ldr	r1, [pc, #68]	@ (8009324 <xTimerCreateTimerTask+0x88>)
 80092de:	4812      	ldr	r0, [pc, #72]	@ (8009328 <xTimerCreateTimerTask+0x8c>)
 80092e0:	f7ff f8d0 	bl	8008484 <xTaskCreateStatic>
 80092e4:	4603      	mov	r3, r0
 80092e6:	4a11      	ldr	r2, [pc, #68]	@ (800932c <xTimerCreateTimerTask+0x90>)
 80092e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80092ea:	4b10      	ldr	r3, [pc, #64]	@ (800932c <xTimerCreateTimerTask+0x90>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80092f2:	2301      	movs	r3, #1
 80092f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10b      	bne.n	8009314 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80092fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009300:	f383 8811 	msr	BASEPRI, r3
 8009304:	f3bf 8f6f 	isb	sy
 8009308:	f3bf 8f4f 	dsb	sy
 800930c:	613b      	str	r3, [r7, #16]
}
 800930e:	bf00      	nop
 8009310:	bf00      	nop
 8009312:	e7fd      	b.n	8009310 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009314:	697b      	ldr	r3, [r7, #20]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3718      	adds	r7, #24
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	20001434 	.word	0x20001434
 8009324:	0800ab5c 	.word	0x0800ab5c
 8009328:	08009469 	.word	0x08009469
 800932c:	20001438 	.word	0x20001438

08009330 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b08a      	sub	sp, #40	@ 0x28
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800933e:	2300      	movs	r3, #0
 8009340:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10b      	bne.n	8009360 <xTimerGenericCommand+0x30>
	__asm volatile
 8009348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934c:	f383 8811 	msr	BASEPRI, r3
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	623b      	str	r3, [r7, #32]
}
 800935a:	bf00      	nop
 800935c:	bf00      	nop
 800935e:	e7fd      	b.n	800935c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009360:	4b19      	ldr	r3, [pc, #100]	@ (80093c8 <xTimerGenericCommand+0x98>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d02a      	beq.n	80093be <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2b05      	cmp	r3, #5
 8009378:	dc18      	bgt.n	80093ac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800937a:	f7ff fead 	bl	80090d8 <xTaskGetSchedulerState>
 800937e:	4603      	mov	r3, r0
 8009380:	2b02      	cmp	r3, #2
 8009382:	d109      	bne.n	8009398 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009384:	4b10      	ldr	r3, [pc, #64]	@ (80093c8 <xTimerGenericCommand+0x98>)
 8009386:	6818      	ldr	r0, [r3, #0]
 8009388:	f107 0110 	add.w	r1, r7, #16
 800938c:	2300      	movs	r3, #0
 800938e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009390:	f7fe fc88 	bl	8007ca4 <xQueueGenericSend>
 8009394:	6278      	str	r0, [r7, #36]	@ 0x24
 8009396:	e012      	b.n	80093be <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009398:	4b0b      	ldr	r3, [pc, #44]	@ (80093c8 <xTimerGenericCommand+0x98>)
 800939a:	6818      	ldr	r0, [r3, #0]
 800939c:	f107 0110 	add.w	r1, r7, #16
 80093a0:	2300      	movs	r3, #0
 80093a2:	2200      	movs	r2, #0
 80093a4:	f7fe fc7e 	bl	8007ca4 <xQueueGenericSend>
 80093a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80093aa:	e008      	b.n	80093be <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80093ac:	4b06      	ldr	r3, [pc, #24]	@ (80093c8 <xTimerGenericCommand+0x98>)
 80093ae:	6818      	ldr	r0, [r3, #0]
 80093b0:	f107 0110 	add.w	r1, r7, #16
 80093b4:	2300      	movs	r3, #0
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	f7fe fd76 	bl	8007ea8 <xQueueGenericSendFromISR>
 80093bc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80093be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3728      	adds	r7, #40	@ 0x28
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	20001434 	.word	0x20001434

080093cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b088      	sub	sp, #32
 80093d0:	af02      	add	r7, sp, #8
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093d6:	4b23      	ldr	r3, [pc, #140]	@ (8009464 <prvProcessExpiredTimer+0x98>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	3304      	adds	r3, #4
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7fe fb29 	bl	8007a3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093f0:	f003 0304 	and.w	r3, r3, #4
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d023      	beq.n	8009440 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	699a      	ldr	r2, [r3, #24]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	18d1      	adds	r1, r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	6978      	ldr	r0, [r7, #20]
 8009406:	f000 f8d5 	bl	80095b4 <prvInsertTimerInActiveList>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d020      	beq.n	8009452 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009410:	2300      	movs	r3, #0
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	2300      	movs	r3, #0
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	2100      	movs	r1, #0
 800941a:	6978      	ldr	r0, [r7, #20]
 800941c:	f7ff ff88 	bl	8009330 <xTimerGenericCommand>
 8009420:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d114      	bne.n	8009452 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800942c:	f383 8811 	msr	BASEPRI, r3
 8009430:	f3bf 8f6f 	isb	sy
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	60fb      	str	r3, [r7, #12]
}
 800943a:	bf00      	nop
 800943c:	bf00      	nop
 800943e:	e7fd      	b.n	800943c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009446:	f023 0301 	bic.w	r3, r3, #1
 800944a:	b2da      	uxtb	r2, r3
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	6978      	ldr	r0, [r7, #20]
 8009458:	4798      	blx	r3
}
 800945a:	bf00      	nop
 800945c:	3718      	adds	r7, #24
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	2000142c 	.word	0x2000142c

08009468 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009470:	f107 0308 	add.w	r3, r7, #8
 8009474:	4618      	mov	r0, r3
 8009476:	f000 f859 	bl	800952c <prvGetNextExpireTime>
 800947a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	4619      	mov	r1, r3
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f000 f805 	bl	8009490 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009486:	f000 f8d7 	bl	8009638 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800948a:	bf00      	nop
 800948c:	e7f0      	b.n	8009470 <prvTimerTask+0x8>
	...

08009490 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800949a:	f7ff fa37 	bl	800890c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800949e:	f107 0308 	add.w	r3, r7, #8
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 f866 	bl	8009574 <prvSampleTimeNow>
 80094a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d130      	bne.n	8009512 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10a      	bne.n	80094cc <prvProcessTimerOrBlockTask+0x3c>
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d806      	bhi.n	80094cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80094be:	f7ff fa33 	bl	8008928 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80094c2:	68f9      	ldr	r1, [r7, #12]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f7ff ff81 	bl	80093cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80094ca:	e024      	b.n	8009516 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d008      	beq.n	80094e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80094d2:	4b13      	ldr	r3, [pc, #76]	@ (8009520 <prvProcessTimerOrBlockTask+0x90>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d101      	bne.n	80094e0 <prvProcessTimerOrBlockTask+0x50>
 80094dc:	2301      	movs	r3, #1
 80094de:	e000      	b.n	80094e2 <prvProcessTimerOrBlockTask+0x52>
 80094e0:	2300      	movs	r3, #0
 80094e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80094e4:	4b0f      	ldr	r3, [pc, #60]	@ (8009524 <prvProcessTimerOrBlockTask+0x94>)
 80094e6:	6818      	ldr	r0, [r3, #0]
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	4619      	mov	r1, r3
 80094f2:	f7fe ff93 	bl	800841c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80094f6:	f7ff fa17 	bl	8008928 <xTaskResumeAll>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10a      	bne.n	8009516 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009500:	4b09      	ldr	r3, [pc, #36]	@ (8009528 <prvProcessTimerOrBlockTask+0x98>)
 8009502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	f3bf 8f6f 	isb	sy
}
 8009510:	e001      	b.n	8009516 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009512:	f7ff fa09 	bl	8008928 <xTaskResumeAll>
}
 8009516:	bf00      	nop
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	20001430 	.word	0x20001430
 8009524:	20001434 	.word	0x20001434
 8009528:	e000ed04 	.word	0xe000ed04

0800952c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800952c:	b480      	push	{r7}
 800952e:	b085      	sub	sp, #20
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009534:	4b0e      	ldr	r3, [pc, #56]	@ (8009570 <prvGetNextExpireTime+0x44>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d101      	bne.n	8009542 <prvGetNextExpireTime+0x16>
 800953e:	2201      	movs	r2, #1
 8009540:	e000      	b.n	8009544 <prvGetNextExpireTime+0x18>
 8009542:	2200      	movs	r2, #0
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d105      	bne.n	800955c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009550:	4b07      	ldr	r3, [pc, #28]	@ (8009570 <prvGetNextExpireTime+0x44>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	60fb      	str	r3, [r7, #12]
 800955a:	e001      	b.n	8009560 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800955c:	2300      	movs	r3, #0
 800955e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009560:	68fb      	ldr	r3, [r7, #12]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	2000142c 	.word	0x2000142c

08009574 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800957c:	f7ff fa72 	bl	8008a64 <xTaskGetTickCount>
 8009580:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009582:	4b0b      	ldr	r3, [pc, #44]	@ (80095b0 <prvSampleTimeNow+0x3c>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	429a      	cmp	r2, r3
 800958a:	d205      	bcs.n	8009598 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800958c:	f000 f93a 	bl	8009804 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	601a      	str	r2, [r3, #0]
 8009596:	e002      	b.n	800959e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800959e:	4a04      	ldr	r2, [pc, #16]	@ (80095b0 <prvSampleTimeNow+0x3c>)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80095a4:	68fb      	ldr	r3, [r7, #12]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	2000143c 	.word	0x2000143c

080095b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	607a      	str	r2, [r7, #4]
 80095c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80095c2:	2300      	movs	r3, #0
 80095c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	68ba      	ldr	r2, [r7, #8]
 80095ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	68fa      	ldr	r2, [r7, #12]
 80095d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d812      	bhi.n	8009600 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	1ad2      	subs	r2, r2, r3
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d302      	bcc.n	80095ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80095e8:	2301      	movs	r3, #1
 80095ea:	617b      	str	r3, [r7, #20]
 80095ec:	e01b      	b.n	8009626 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80095ee:	4b10      	ldr	r3, [pc, #64]	@ (8009630 <prvInsertTimerInActiveList+0x7c>)
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	3304      	adds	r3, #4
 80095f6:	4619      	mov	r1, r3
 80095f8:	4610      	mov	r0, r2
 80095fa:	f7fe f9e6 	bl	80079ca <vListInsert>
 80095fe:	e012      	b.n	8009626 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	429a      	cmp	r2, r3
 8009606:	d206      	bcs.n	8009616 <prvInsertTimerInActiveList+0x62>
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	429a      	cmp	r2, r3
 800960e:	d302      	bcc.n	8009616 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009610:	2301      	movs	r3, #1
 8009612:	617b      	str	r3, [r7, #20]
 8009614:	e007      	b.n	8009626 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009616:	4b07      	ldr	r3, [pc, #28]	@ (8009634 <prvInsertTimerInActiveList+0x80>)
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	3304      	adds	r3, #4
 800961e:	4619      	mov	r1, r3
 8009620:	4610      	mov	r0, r2
 8009622:	f7fe f9d2 	bl	80079ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009626:	697b      	ldr	r3, [r7, #20]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3718      	adds	r7, #24
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	20001430 	.word	0x20001430
 8009634:	2000142c 	.word	0x2000142c

08009638 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b08e      	sub	sp, #56	@ 0x38
 800963c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800963e:	e0ce      	b.n	80097de <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	da19      	bge.n	800967a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009646:	1d3b      	adds	r3, r7, #4
 8009648:	3304      	adds	r3, #4
 800964a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800964c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800964e:	2b00      	cmp	r3, #0
 8009650:	d10b      	bne.n	800966a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	61fb      	str	r3, [r7, #28]
}
 8009664:	bf00      	nop
 8009666:	bf00      	nop
 8009668:	e7fd      	b.n	8009666 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800966a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009670:	6850      	ldr	r0, [r2, #4]
 8009672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009674:	6892      	ldr	r2, [r2, #8]
 8009676:	4611      	mov	r1, r2
 8009678:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	f2c0 80ae 	blt.w	80097de <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009688:	695b      	ldr	r3, [r3, #20]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d004      	beq.n	8009698 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800968e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009690:	3304      	adds	r3, #4
 8009692:	4618      	mov	r0, r3
 8009694:	f7fe f9d2 	bl	8007a3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009698:	463b      	mov	r3, r7
 800969a:	4618      	mov	r0, r3
 800969c:	f7ff ff6a 	bl	8009574 <prvSampleTimeNow>
 80096a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b09      	cmp	r3, #9
 80096a6:	f200 8097 	bhi.w	80097d8 <prvProcessReceivedCommands+0x1a0>
 80096aa:	a201      	add	r2, pc, #4	@ (adr r2, 80096b0 <prvProcessReceivedCommands+0x78>)
 80096ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b0:	080096d9 	.word	0x080096d9
 80096b4:	080096d9 	.word	0x080096d9
 80096b8:	080096d9 	.word	0x080096d9
 80096bc:	0800974f 	.word	0x0800974f
 80096c0:	08009763 	.word	0x08009763
 80096c4:	080097af 	.word	0x080097af
 80096c8:	080096d9 	.word	0x080096d9
 80096cc:	080096d9 	.word	0x080096d9
 80096d0:	0800974f 	.word	0x0800974f
 80096d4:	08009763 	.word	0x08009763
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096de:	f043 0301 	orr.w	r3, r3, #1
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	18d1      	adds	r1, r2, r3
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096f8:	f7ff ff5c 	bl	80095b4 <prvInsertTimerInActiveList>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d06c      	beq.n	80097dc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009708:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800970a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009710:	f003 0304 	and.w	r3, r3, #4
 8009714:	2b00      	cmp	r3, #0
 8009716:	d061      	beq.n	80097dc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800971c:	699b      	ldr	r3, [r3, #24]
 800971e:	441a      	add	r2, r3
 8009720:	2300      	movs	r3, #0
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	2300      	movs	r3, #0
 8009726:	2100      	movs	r1, #0
 8009728:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800972a:	f7ff fe01 	bl	8009330 <xTimerGenericCommand>
 800972e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d152      	bne.n	80097dc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	61bb      	str	r3, [r7, #24]
}
 8009748:	bf00      	nop
 800974a:	bf00      	nop
 800974c:	e7fd      	b.n	800974a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800974e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009750:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009754:	f023 0301 	bic.w	r3, r3, #1
 8009758:	b2da      	uxtb	r2, r3
 800975a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800975c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009760:	e03d      	b.n	80097de <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009764:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009768:	f043 0301 	orr.w	r3, r3, #1
 800976c:	b2da      	uxtb	r2, r3
 800976e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009770:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009774:	68ba      	ldr	r2, [r7, #8]
 8009776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009778:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800977a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800977c:	699b      	ldr	r3, [r3, #24]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10b      	bne.n	800979a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009786:	f383 8811 	msr	BASEPRI, r3
 800978a:	f3bf 8f6f 	isb	sy
 800978e:	f3bf 8f4f 	dsb	sy
 8009792:	617b      	str	r3, [r7, #20]
}
 8009794:	bf00      	nop
 8009796:	bf00      	nop
 8009798:	e7fd      	b.n	8009796 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800979a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800979c:	699a      	ldr	r2, [r3, #24]
 800979e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a0:	18d1      	adds	r1, r2, r3
 80097a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097a8:	f7ff ff04 	bl	80095b4 <prvInsertTimerInActiveList>
					break;
 80097ac:	e017      	b.n	80097de <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80097ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097b4:	f003 0302 	and.w	r3, r3, #2
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d103      	bne.n	80097c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80097bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097be:	f000 fbeb 	bl	8009f98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80097c2:	e00c      	b.n	80097de <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097ca:	f023 0301 	bic.w	r3, r3, #1
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80097d6:	e002      	b.n	80097de <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80097d8:	bf00      	nop
 80097da:	e000      	b.n	80097de <prvProcessReceivedCommands+0x1a6>
					break;
 80097dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097de:	4b08      	ldr	r3, [pc, #32]	@ (8009800 <prvProcessReceivedCommands+0x1c8>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	1d39      	adds	r1, r7, #4
 80097e4:	2200      	movs	r2, #0
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fe fbfc 	bl	8007fe4 <xQueueReceive>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f47f af26 	bne.w	8009640 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80097f4:	bf00      	nop
 80097f6:	bf00      	nop
 80097f8:	3730      	adds	r7, #48	@ 0x30
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	20001434 	.word	0x20001434

08009804 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b088      	sub	sp, #32
 8009808:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800980a:	e049      	b.n	80098a0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800980c:	4b2e      	ldr	r3, [pc, #184]	@ (80098c8 <prvSwitchTimerLists+0xc4>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009816:	4b2c      	ldr	r3, [pc, #176]	@ (80098c8 <prvSwitchTimerLists+0xc4>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	3304      	adds	r3, #4
 8009824:	4618      	mov	r0, r3
 8009826:	f7fe f909 	bl	8007a3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6a1b      	ldr	r3, [r3, #32]
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009838:	f003 0304 	and.w	r3, r3, #4
 800983c:	2b00      	cmp	r3, #0
 800983e:	d02f      	beq.n	80098a0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	4413      	add	r3, r2
 8009848:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	429a      	cmp	r2, r3
 8009850:	d90e      	bls.n	8009870 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	68ba      	ldr	r2, [r7, #8]
 8009856:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800985e:	4b1a      	ldr	r3, [pc, #104]	@ (80098c8 <prvSwitchTimerLists+0xc4>)
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3304      	adds	r3, #4
 8009866:	4619      	mov	r1, r3
 8009868:	4610      	mov	r0, r2
 800986a:	f7fe f8ae 	bl	80079ca <vListInsert>
 800986e:	e017      	b.n	80098a0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009870:	2300      	movs	r3, #0
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	2300      	movs	r3, #0
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	2100      	movs	r1, #0
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f7ff fd58 	bl	8009330 <xTimerGenericCommand>
 8009880:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10b      	bne.n	80098a0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988c:	f383 8811 	msr	BASEPRI, r3
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	603b      	str	r3, [r7, #0]
}
 800989a:	bf00      	nop
 800989c:	bf00      	nop
 800989e:	e7fd      	b.n	800989c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098a0:	4b09      	ldr	r3, [pc, #36]	@ (80098c8 <prvSwitchTimerLists+0xc4>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1b0      	bne.n	800980c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80098aa:	4b07      	ldr	r3, [pc, #28]	@ (80098c8 <prvSwitchTimerLists+0xc4>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80098b0:	4b06      	ldr	r3, [pc, #24]	@ (80098cc <prvSwitchTimerLists+0xc8>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a04      	ldr	r2, [pc, #16]	@ (80098c8 <prvSwitchTimerLists+0xc4>)
 80098b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80098b8:	4a04      	ldr	r2, [pc, #16]	@ (80098cc <prvSwitchTimerLists+0xc8>)
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	6013      	str	r3, [r2, #0]
}
 80098be:	bf00      	nop
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	2000142c 	.word	0x2000142c
 80098cc:	20001430 	.word	0x20001430

080098d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80098d6:	f000 f96f 	bl	8009bb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80098da:	4b15      	ldr	r3, [pc, #84]	@ (8009930 <prvCheckForValidListAndQueue+0x60>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d120      	bne.n	8009924 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80098e2:	4814      	ldr	r0, [pc, #80]	@ (8009934 <prvCheckForValidListAndQueue+0x64>)
 80098e4:	f7fe f820 	bl	8007928 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80098e8:	4813      	ldr	r0, [pc, #76]	@ (8009938 <prvCheckForValidListAndQueue+0x68>)
 80098ea:	f7fe f81d 	bl	8007928 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80098ee:	4b13      	ldr	r3, [pc, #76]	@ (800993c <prvCheckForValidListAndQueue+0x6c>)
 80098f0:	4a10      	ldr	r2, [pc, #64]	@ (8009934 <prvCheckForValidListAndQueue+0x64>)
 80098f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80098f4:	4b12      	ldr	r3, [pc, #72]	@ (8009940 <prvCheckForValidListAndQueue+0x70>)
 80098f6:	4a10      	ldr	r2, [pc, #64]	@ (8009938 <prvCheckForValidListAndQueue+0x68>)
 80098f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80098fa:	2300      	movs	r3, #0
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	4b11      	ldr	r3, [pc, #68]	@ (8009944 <prvCheckForValidListAndQueue+0x74>)
 8009900:	4a11      	ldr	r2, [pc, #68]	@ (8009948 <prvCheckForValidListAndQueue+0x78>)
 8009902:	2110      	movs	r1, #16
 8009904:	200a      	movs	r0, #10
 8009906:	f7fe f92d 	bl	8007b64 <xQueueGenericCreateStatic>
 800990a:	4603      	mov	r3, r0
 800990c:	4a08      	ldr	r2, [pc, #32]	@ (8009930 <prvCheckForValidListAndQueue+0x60>)
 800990e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009910:	4b07      	ldr	r3, [pc, #28]	@ (8009930 <prvCheckForValidListAndQueue+0x60>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d005      	beq.n	8009924 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009918:	4b05      	ldr	r3, [pc, #20]	@ (8009930 <prvCheckForValidListAndQueue+0x60>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	490b      	ldr	r1, [pc, #44]	@ (800994c <prvCheckForValidListAndQueue+0x7c>)
 800991e:	4618      	mov	r0, r3
 8009920:	f7fe fd52 	bl	80083c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009924:	f000 f97a 	bl	8009c1c <vPortExitCritical>
}
 8009928:	bf00      	nop
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	20001434 	.word	0x20001434
 8009934:	20001404 	.word	0x20001404
 8009938:	20001418 	.word	0x20001418
 800993c:	2000142c 	.word	0x2000142c
 8009940:	20001430 	.word	0x20001430
 8009944:	200014e0 	.word	0x200014e0
 8009948:	20001440 	.word	0x20001440
 800994c:	0800ab64 	.word	0x0800ab64

08009950 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	3b04      	subs	r3, #4
 8009960:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009968:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3b04      	subs	r3, #4
 800996e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	f023 0201 	bic.w	r2, r3, #1
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	3b04      	subs	r3, #4
 800997e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009980:	4a0c      	ldr	r2, [pc, #48]	@ (80099b4 <pxPortInitialiseStack+0x64>)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	3b14      	subs	r3, #20
 800998a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	3b04      	subs	r3, #4
 8009996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f06f 0202 	mvn.w	r2, #2
 800999e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	3b20      	subs	r3, #32
 80099a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80099a6:	68fb      	ldr	r3, [r7, #12]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr
 80099b4:	080099b9 	.word	0x080099b9

080099b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80099be:	2300      	movs	r3, #0
 80099c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80099c2:	4b13      	ldr	r3, [pc, #76]	@ (8009a10 <prvTaskExitError+0x58>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099ca:	d00b      	beq.n	80099e4 <prvTaskExitError+0x2c>
	__asm volatile
 80099cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d0:	f383 8811 	msr	BASEPRI, r3
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	60fb      	str	r3, [r7, #12]
}
 80099de:	bf00      	nop
 80099e0:	bf00      	nop
 80099e2:	e7fd      	b.n	80099e0 <prvTaskExitError+0x28>
	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	60bb      	str	r3, [r7, #8]
}
 80099f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099f8:	bf00      	nop
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d0fc      	beq.n	80099fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a00:	bf00      	nop
 8009a02:	bf00      	nop
 8009a04:	3714      	adds	r7, #20
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	20000010 	.word	0x20000010
	...

08009a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a20:	4b07      	ldr	r3, [pc, #28]	@ (8009a40 <pxCurrentTCBConst2>)
 8009a22:	6819      	ldr	r1, [r3, #0]
 8009a24:	6808      	ldr	r0, [r1, #0]
 8009a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2a:	f380 8809 	msr	PSP, r0
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f04f 0000 	mov.w	r0, #0
 8009a36:	f380 8811 	msr	BASEPRI, r0
 8009a3a:	4770      	bx	lr
 8009a3c:	f3af 8000 	nop.w

08009a40 <pxCurrentTCBConst2>:
 8009a40:	20000f04 	.word	0x20000f04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a44:	bf00      	nop
 8009a46:	bf00      	nop

08009a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a48:	4808      	ldr	r0, [pc, #32]	@ (8009a6c <prvPortStartFirstTask+0x24>)
 8009a4a:	6800      	ldr	r0, [r0, #0]
 8009a4c:	6800      	ldr	r0, [r0, #0]
 8009a4e:	f380 8808 	msr	MSP, r0
 8009a52:	f04f 0000 	mov.w	r0, #0
 8009a56:	f380 8814 	msr	CONTROL, r0
 8009a5a:	b662      	cpsie	i
 8009a5c:	b661      	cpsie	f
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	df00      	svc	0
 8009a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a6a:	bf00      	nop
 8009a6c:	e000ed08 	.word	0xe000ed08

08009a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a76:	4b47      	ldr	r3, [pc, #284]	@ (8009b94 <xPortStartScheduler+0x124>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a47      	ldr	r2, [pc, #284]	@ (8009b98 <xPortStartScheduler+0x128>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d10b      	bne.n	8009a98 <xPortStartScheduler+0x28>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	60fb      	str	r3, [r7, #12]
}
 8009a92:	bf00      	nop
 8009a94:	bf00      	nop
 8009a96:	e7fd      	b.n	8009a94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a98:	4b3e      	ldr	r3, [pc, #248]	@ (8009b94 <xPortStartScheduler+0x124>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a3f      	ldr	r2, [pc, #252]	@ (8009b9c <xPortStartScheduler+0x12c>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d10b      	bne.n	8009aba <xPortStartScheduler+0x4a>
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa6:	f383 8811 	msr	BASEPRI, r3
 8009aaa:	f3bf 8f6f 	isb	sy
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	613b      	str	r3, [r7, #16]
}
 8009ab4:	bf00      	nop
 8009ab6:	bf00      	nop
 8009ab8:	e7fd      	b.n	8009ab6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009aba:	4b39      	ldr	r3, [pc, #228]	@ (8009ba0 <xPortStartScheduler+0x130>)
 8009abc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	22ff      	movs	r2, #255	@ 0xff
 8009aca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ad4:	78fb      	ldrb	r3, [r7, #3]
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009adc:	b2da      	uxtb	r2, r3
 8009ade:	4b31      	ldr	r3, [pc, #196]	@ (8009ba4 <xPortStartScheduler+0x134>)
 8009ae0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ae2:	4b31      	ldr	r3, [pc, #196]	@ (8009ba8 <xPortStartScheduler+0x138>)
 8009ae4:	2207      	movs	r2, #7
 8009ae6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ae8:	e009      	b.n	8009afe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009aea:	4b2f      	ldr	r3, [pc, #188]	@ (8009ba8 <xPortStartScheduler+0x138>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	3b01      	subs	r3, #1
 8009af0:	4a2d      	ldr	r2, [pc, #180]	@ (8009ba8 <xPortStartScheduler+0x138>)
 8009af2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009af4:	78fb      	ldrb	r3, [r7, #3]
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	005b      	lsls	r3, r3, #1
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009afe:	78fb      	ldrb	r3, [r7, #3]
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b06:	2b80      	cmp	r3, #128	@ 0x80
 8009b08:	d0ef      	beq.n	8009aea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b0a:	4b27      	ldr	r3, [pc, #156]	@ (8009ba8 <xPortStartScheduler+0x138>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f1c3 0307 	rsb	r3, r3, #7
 8009b12:	2b04      	cmp	r3, #4
 8009b14:	d00b      	beq.n	8009b2e <xPortStartScheduler+0xbe>
	__asm volatile
 8009b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	60bb      	str	r3, [r7, #8]
}
 8009b28:	bf00      	nop
 8009b2a:	bf00      	nop
 8009b2c:	e7fd      	b.n	8009b2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ba8 <xPortStartScheduler+0x138>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	021b      	lsls	r3, r3, #8
 8009b34:	4a1c      	ldr	r2, [pc, #112]	@ (8009ba8 <xPortStartScheduler+0x138>)
 8009b36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b38:	4b1b      	ldr	r3, [pc, #108]	@ (8009ba8 <xPortStartScheduler+0x138>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009b40:	4a19      	ldr	r2, [pc, #100]	@ (8009ba8 <xPortStartScheduler+0x138>)
 8009b42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b4c:	4b17      	ldr	r3, [pc, #92]	@ (8009bac <xPortStartScheduler+0x13c>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a16      	ldr	r2, [pc, #88]	@ (8009bac <xPortStartScheduler+0x13c>)
 8009b52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009b56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b58:	4b14      	ldr	r3, [pc, #80]	@ (8009bac <xPortStartScheduler+0x13c>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a13      	ldr	r2, [pc, #76]	@ (8009bac <xPortStartScheduler+0x13c>)
 8009b5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009b62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b64:	f000 f8da 	bl	8009d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b68:	4b11      	ldr	r3, [pc, #68]	@ (8009bb0 <xPortStartScheduler+0x140>)
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b6e:	f000 f8f9 	bl	8009d64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b72:	4b10      	ldr	r3, [pc, #64]	@ (8009bb4 <xPortStartScheduler+0x144>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a0f      	ldr	r2, [pc, #60]	@ (8009bb4 <xPortStartScheduler+0x144>)
 8009b78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009b7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b7e:	f7ff ff63 	bl	8009a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b82:	f7ff f839 	bl	8008bf8 <vTaskSwitchContext>
	prvTaskExitError();
 8009b86:	f7ff ff17 	bl	80099b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3718      	adds	r7, #24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	e000ed00 	.word	0xe000ed00
 8009b98:	410fc271 	.word	0x410fc271
 8009b9c:	410fc270 	.word	0x410fc270
 8009ba0:	e000e400 	.word	0xe000e400
 8009ba4:	20001530 	.word	0x20001530
 8009ba8:	20001534 	.word	0x20001534
 8009bac:	e000ed20 	.word	0xe000ed20
 8009bb0:	20000010 	.word	0x20000010
 8009bb4:	e000ef34 	.word	0xe000ef34

08009bb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	607b      	str	r3, [r7, #4]
}
 8009bd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009bd2:	4b10      	ldr	r3, [pc, #64]	@ (8009c14 <vPortEnterCritical+0x5c>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	4a0e      	ldr	r2, [pc, #56]	@ (8009c14 <vPortEnterCritical+0x5c>)
 8009bda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8009c14 <vPortEnterCritical+0x5c>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d110      	bne.n	8009c06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009be4:	4b0c      	ldr	r3, [pc, #48]	@ (8009c18 <vPortEnterCritical+0x60>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00b      	beq.n	8009c06 <vPortEnterCritical+0x4e>
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	603b      	str	r3, [r7, #0]
}
 8009c00:	bf00      	nop
 8009c02:	bf00      	nop
 8009c04:	e7fd      	b.n	8009c02 <vPortEnterCritical+0x4a>
	}
}
 8009c06:	bf00      	nop
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	20000010 	.word	0x20000010
 8009c18:	e000ed04 	.word	0xe000ed04

08009c1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c22:	4b12      	ldr	r3, [pc, #72]	@ (8009c6c <vPortExitCritical+0x50>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d10b      	bne.n	8009c42 <vPortExitCritical+0x26>
	__asm volatile
 8009c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c2e:	f383 8811 	msr	BASEPRI, r3
 8009c32:	f3bf 8f6f 	isb	sy
 8009c36:	f3bf 8f4f 	dsb	sy
 8009c3a:	607b      	str	r3, [r7, #4]
}
 8009c3c:	bf00      	nop
 8009c3e:	bf00      	nop
 8009c40:	e7fd      	b.n	8009c3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009c42:	4b0a      	ldr	r3, [pc, #40]	@ (8009c6c <vPortExitCritical+0x50>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	3b01      	subs	r3, #1
 8009c48:	4a08      	ldr	r2, [pc, #32]	@ (8009c6c <vPortExitCritical+0x50>)
 8009c4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c4c:	4b07      	ldr	r3, [pc, #28]	@ (8009c6c <vPortExitCritical+0x50>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d105      	bne.n	8009c60 <vPortExitCritical+0x44>
 8009c54:	2300      	movs	r3, #0
 8009c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	f383 8811 	msr	BASEPRI, r3
}
 8009c5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr
 8009c6c:	20000010 	.word	0x20000010

08009c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c70:	f3ef 8009 	mrs	r0, PSP
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	4b15      	ldr	r3, [pc, #84]	@ (8009cd0 <pxCurrentTCBConst>)
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	f01e 0f10 	tst.w	lr, #16
 8009c80:	bf08      	it	eq
 8009c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8a:	6010      	str	r0, [r2, #0]
 8009c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009c94:	f380 8811 	msr	BASEPRI, r0
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f7fe ffaa 	bl	8008bf8 <vTaskSwitchContext>
 8009ca4:	f04f 0000 	mov.w	r0, #0
 8009ca8:	f380 8811 	msr	BASEPRI, r0
 8009cac:	bc09      	pop	{r0, r3}
 8009cae:	6819      	ldr	r1, [r3, #0]
 8009cb0:	6808      	ldr	r0, [r1, #0]
 8009cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb6:	f01e 0f10 	tst.w	lr, #16
 8009cba:	bf08      	it	eq
 8009cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009cc0:	f380 8809 	msr	PSP, r0
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	f3af 8000 	nop.w

08009cd0 <pxCurrentTCBConst>:
 8009cd0:	20000f04 	.word	0x20000f04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop

08009cd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	607b      	str	r3, [r7, #4]
}
 8009cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009cf2:	f7fe fec7 	bl	8008a84 <xTaskIncrementTick>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d003      	beq.n	8009d04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009cfc:	4b06      	ldr	r3, [pc, #24]	@ (8009d18 <xPortSysTickHandler+0x40>)
 8009cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	2300      	movs	r3, #0
 8009d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	f383 8811 	msr	BASEPRI, r3
}
 8009d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d10:	bf00      	nop
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	e000ed04 	.word	0xe000ed04

08009d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d20:	4b0b      	ldr	r3, [pc, #44]	@ (8009d50 <vPortSetupTimerInterrupt+0x34>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d26:	4b0b      	ldr	r3, [pc, #44]	@ (8009d54 <vPortSetupTimerInterrupt+0x38>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8009d58 <vPortSetupTimerInterrupt+0x3c>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a0a      	ldr	r2, [pc, #40]	@ (8009d5c <vPortSetupTimerInterrupt+0x40>)
 8009d32:	fba2 2303 	umull	r2, r3, r2, r3
 8009d36:	099b      	lsrs	r3, r3, #6
 8009d38:	4a09      	ldr	r2, [pc, #36]	@ (8009d60 <vPortSetupTimerInterrupt+0x44>)
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d3e:	4b04      	ldr	r3, [pc, #16]	@ (8009d50 <vPortSetupTimerInterrupt+0x34>)
 8009d40:	2207      	movs	r2, #7
 8009d42:	601a      	str	r2, [r3, #0]
}
 8009d44:	bf00      	nop
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	e000e010 	.word	0xe000e010
 8009d54:	e000e018 	.word	0xe000e018
 8009d58:	20000004 	.word	0x20000004
 8009d5c:	10624dd3 	.word	0x10624dd3
 8009d60:	e000e014 	.word	0xe000e014

08009d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009d74 <vPortEnableVFP+0x10>
 8009d68:	6801      	ldr	r1, [r0, #0]
 8009d6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009d6e:	6001      	str	r1, [r0, #0]
 8009d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d72:	bf00      	nop
 8009d74:	e000ed88 	.word	0xe000ed88

08009d78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d7e:	f3ef 8305 	mrs	r3, IPSR
 8009d82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2b0f      	cmp	r3, #15
 8009d88:	d915      	bls.n	8009db6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d8a:	4a18      	ldr	r2, [pc, #96]	@ (8009dec <vPortValidateInterruptPriority+0x74>)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4413      	add	r3, r2
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d94:	4b16      	ldr	r3, [pc, #88]	@ (8009df0 <vPortValidateInterruptPriority+0x78>)
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	7afa      	ldrb	r2, [r7, #11]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d20b      	bcs.n	8009db6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	607b      	str	r3, [r7, #4]
}
 8009db0:	bf00      	nop
 8009db2:	bf00      	nop
 8009db4:	e7fd      	b.n	8009db2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009db6:	4b0f      	ldr	r3, [pc, #60]	@ (8009df4 <vPortValidateInterruptPriority+0x7c>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8009df8 <vPortValidateInterruptPriority+0x80>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d90b      	bls.n	8009dde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	603b      	str	r3, [r7, #0]
}
 8009dd8:	bf00      	nop
 8009dda:	bf00      	nop
 8009ddc:	e7fd      	b.n	8009dda <vPortValidateInterruptPriority+0x62>
	}
 8009dde:	bf00      	nop
 8009de0:	3714      	adds	r7, #20
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	e000e3f0 	.word	0xe000e3f0
 8009df0:	20001530 	.word	0x20001530
 8009df4:	e000ed0c 	.word	0xe000ed0c
 8009df8:	20001534 	.word	0x20001534

08009dfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b08a      	sub	sp, #40	@ 0x28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009e04:	2300      	movs	r3, #0
 8009e06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009e08:	f7fe fd80 	bl	800890c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009e0c:	4b5c      	ldr	r3, [pc, #368]	@ (8009f80 <pvPortMalloc+0x184>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009e14:	f000 f924 	bl	800a060 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e18:	4b5a      	ldr	r3, [pc, #360]	@ (8009f84 <pvPortMalloc+0x188>)
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4013      	ands	r3, r2
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f040 8095 	bne.w	8009f50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d01e      	beq.n	8009e6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009e2c:	2208      	movs	r2, #8
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4413      	add	r3, r2
 8009e32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f003 0307 	and.w	r3, r3, #7
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d015      	beq.n	8009e6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f023 0307 	bic.w	r3, r3, #7
 8009e44:	3308      	adds	r3, #8
 8009e46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f003 0307 	and.w	r3, r3, #7
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00b      	beq.n	8009e6a <pvPortMalloc+0x6e>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	617b      	str	r3, [r7, #20]
}
 8009e64:	bf00      	nop
 8009e66:	bf00      	nop
 8009e68:	e7fd      	b.n	8009e66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d06f      	beq.n	8009f50 <pvPortMalloc+0x154>
 8009e70:	4b45      	ldr	r3, [pc, #276]	@ (8009f88 <pvPortMalloc+0x18c>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d86a      	bhi.n	8009f50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e7a:	4b44      	ldr	r3, [pc, #272]	@ (8009f8c <pvPortMalloc+0x190>)
 8009e7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e7e:	4b43      	ldr	r3, [pc, #268]	@ (8009f8c <pvPortMalloc+0x190>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e84:	e004      	b.n	8009e90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d903      	bls.n	8009ea2 <pvPortMalloc+0xa6>
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1f1      	bne.n	8009e86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ea2:	4b37      	ldr	r3, [pc, #220]	@ (8009f80 <pvPortMalloc+0x184>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d051      	beq.n	8009f50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009eac:	6a3b      	ldr	r3, [r7, #32]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2208      	movs	r2, #8
 8009eb2:	4413      	add	r3, r2
 8009eb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	6a3b      	ldr	r3, [r7, #32]
 8009ebc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec0:	685a      	ldr	r2, [r3, #4]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	1ad2      	subs	r2, r2, r3
 8009ec6:	2308      	movs	r3, #8
 8009ec8:	005b      	lsls	r3, r3, #1
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d920      	bls.n	8009f10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	f003 0307 	and.w	r3, r3, #7
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00b      	beq.n	8009ef8 <pvPortMalloc+0xfc>
	__asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	613b      	str	r3, [r7, #16]
}
 8009ef2:	bf00      	nop
 8009ef4:	bf00      	nop
 8009ef6:	e7fd      	b.n	8009ef4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	1ad2      	subs	r2, r2, r3
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009f0a:	69b8      	ldr	r0, [r7, #24]
 8009f0c:	f000 f90a 	bl	800a124 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f10:	4b1d      	ldr	r3, [pc, #116]	@ (8009f88 <pvPortMalloc+0x18c>)
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8009f88 <pvPortMalloc+0x18c>)
 8009f1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8009f88 <pvPortMalloc+0x18c>)
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	4b1b      	ldr	r3, [pc, #108]	@ (8009f90 <pvPortMalloc+0x194>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d203      	bcs.n	8009f32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f2a:	4b17      	ldr	r3, [pc, #92]	@ (8009f88 <pvPortMalloc+0x18c>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a18      	ldr	r2, [pc, #96]	@ (8009f90 <pvPortMalloc+0x194>)
 8009f30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	4b13      	ldr	r3, [pc, #76]	@ (8009f84 <pvPortMalloc+0x188>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	431a      	orrs	r2, r3
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f42:	2200      	movs	r2, #0
 8009f44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009f46:	4b13      	ldr	r3, [pc, #76]	@ (8009f94 <pvPortMalloc+0x198>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	4a11      	ldr	r2, [pc, #68]	@ (8009f94 <pvPortMalloc+0x198>)
 8009f4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f50:	f7fe fcea 	bl	8008928 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	f003 0307 	and.w	r3, r3, #7
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00b      	beq.n	8009f76 <pvPortMalloc+0x17a>
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	60fb      	str	r3, [r7, #12]
}
 8009f70:	bf00      	nop
 8009f72:	bf00      	nop
 8009f74:	e7fd      	b.n	8009f72 <pvPortMalloc+0x176>
	return pvReturn;
 8009f76:	69fb      	ldr	r3, [r7, #28]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3728      	adds	r7, #40	@ 0x28
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	20005140 	.word	0x20005140
 8009f84:	20005154 	.word	0x20005154
 8009f88:	20005144 	.word	0x20005144
 8009f8c:	20005138 	.word	0x20005138
 8009f90:	20005148 	.word	0x20005148
 8009f94:	2000514c 	.word	0x2000514c

08009f98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b086      	sub	sp, #24
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d04f      	beq.n	800a04a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009faa:	2308      	movs	r3, #8
 8009fac:	425b      	negs	r3, r3
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	4b25      	ldr	r3, [pc, #148]	@ (800a054 <vPortFree+0xbc>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10b      	bne.n	8009fde <vPortFree+0x46>
	__asm volatile
 8009fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	60fb      	str	r3, [r7, #12]
}
 8009fd8:	bf00      	nop
 8009fda:	bf00      	nop
 8009fdc:	e7fd      	b.n	8009fda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00b      	beq.n	8009ffe <vPortFree+0x66>
	__asm volatile
 8009fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fea:	f383 8811 	msr	BASEPRI, r3
 8009fee:	f3bf 8f6f 	isb	sy
 8009ff2:	f3bf 8f4f 	dsb	sy
 8009ff6:	60bb      	str	r3, [r7, #8]
}
 8009ff8:	bf00      	nop
 8009ffa:	bf00      	nop
 8009ffc:	e7fd      	b.n	8009ffa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	685a      	ldr	r2, [r3, #4]
 800a002:	4b14      	ldr	r3, [pc, #80]	@ (800a054 <vPortFree+0xbc>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4013      	ands	r3, r2
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d01e      	beq.n	800a04a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d11a      	bne.n	800a04a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	685a      	ldr	r2, [r3, #4]
 800a018:	4b0e      	ldr	r3, [pc, #56]	@ (800a054 <vPortFree+0xbc>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	43db      	mvns	r3, r3
 800a01e:	401a      	ands	r2, r3
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a024:	f7fe fc72 	bl	800890c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	685a      	ldr	r2, [r3, #4]
 800a02c:	4b0a      	ldr	r3, [pc, #40]	@ (800a058 <vPortFree+0xc0>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4413      	add	r3, r2
 800a032:	4a09      	ldr	r2, [pc, #36]	@ (800a058 <vPortFree+0xc0>)
 800a034:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a036:	6938      	ldr	r0, [r7, #16]
 800a038:	f000 f874 	bl	800a124 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a03c:	4b07      	ldr	r3, [pc, #28]	@ (800a05c <vPortFree+0xc4>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	3301      	adds	r3, #1
 800a042:	4a06      	ldr	r2, [pc, #24]	@ (800a05c <vPortFree+0xc4>)
 800a044:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a046:	f7fe fc6f 	bl	8008928 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a04a:	bf00      	nop
 800a04c:	3718      	adds	r7, #24
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	20005154 	.word	0x20005154
 800a058:	20005144 	.word	0x20005144
 800a05c:	20005150 	.word	0x20005150

0800a060 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a066:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a06a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a06c:	4b27      	ldr	r3, [pc, #156]	@ (800a10c <prvHeapInit+0xac>)
 800a06e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f003 0307 	and.w	r3, r3, #7
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00c      	beq.n	800a094 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	3307      	adds	r3, #7
 800a07e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f023 0307 	bic.w	r3, r3, #7
 800a086:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	1ad3      	subs	r3, r2, r3
 800a08e:	4a1f      	ldr	r2, [pc, #124]	@ (800a10c <prvHeapInit+0xac>)
 800a090:	4413      	add	r3, r2
 800a092:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a098:	4a1d      	ldr	r2, [pc, #116]	@ (800a110 <prvHeapInit+0xb0>)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a09e:	4b1c      	ldr	r3, [pc, #112]	@ (800a110 <prvHeapInit+0xb0>)
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a0ac:	2208      	movs	r2, #8
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	1a9b      	subs	r3, r3, r2
 800a0b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f023 0307 	bic.w	r3, r3, #7
 800a0ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	4a15      	ldr	r2, [pc, #84]	@ (800a114 <prvHeapInit+0xb4>)
 800a0c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a0c2:	4b14      	ldr	r3, [pc, #80]	@ (800a114 <prvHeapInit+0xb4>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a0ca:	4b12      	ldr	r3, [pc, #72]	@ (800a114 <prvHeapInit+0xb4>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	1ad2      	subs	r2, r2, r3
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a0e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a114 <prvHeapInit+0xb4>)
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	4a0a      	ldr	r2, [pc, #40]	@ (800a118 <prvHeapInit+0xb8>)
 800a0ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	4a09      	ldr	r2, [pc, #36]	@ (800a11c <prvHeapInit+0xbc>)
 800a0f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a0f8:	4b09      	ldr	r3, [pc, #36]	@ (800a120 <prvHeapInit+0xc0>)
 800a0fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a0fe:	601a      	str	r2, [r3, #0]
}
 800a100:	bf00      	nop
 800a102:	3714      	adds	r7, #20
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	20001538 	.word	0x20001538
 800a110:	20005138 	.word	0x20005138
 800a114:	20005140 	.word	0x20005140
 800a118:	20005148 	.word	0x20005148
 800a11c:	20005144 	.word	0x20005144
 800a120:	20005154 	.word	0x20005154

0800a124 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a12c:	4b28      	ldr	r3, [pc, #160]	@ (800a1d0 <prvInsertBlockIntoFreeList+0xac>)
 800a12e:	60fb      	str	r3, [r7, #12]
 800a130:	e002      	b.n	800a138 <prvInsertBlockIntoFreeList+0x14>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	60fb      	str	r3, [r7, #12]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d8f7      	bhi.n	800a132 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	68ba      	ldr	r2, [r7, #8]
 800a14c:	4413      	add	r3, r2
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	429a      	cmp	r2, r3
 800a152:	d108      	bne.n	800a166 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	685a      	ldr	r2, [r3, #4]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	441a      	add	r2, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	441a      	add	r2, r3
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	429a      	cmp	r2, r3
 800a178:	d118      	bne.n	800a1ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	4b15      	ldr	r3, [pc, #84]	@ (800a1d4 <prvInsertBlockIntoFreeList+0xb0>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	429a      	cmp	r2, r3
 800a184:	d00d      	beq.n	800a1a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	685a      	ldr	r2, [r3, #4]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	441a      	add	r2, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	601a      	str	r2, [r3, #0]
 800a1a0:	e008      	b.n	800a1b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a1a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d4 <prvInsertBlockIntoFreeList+0xb0>)
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	601a      	str	r2, [r3, #0]
 800a1aa:	e003      	b.n	800a1b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d002      	beq.n	800a1c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1c2:	bf00      	nop
 800a1c4:	3714      	adds	r7, #20
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	20005138 	.word	0x20005138
 800a1d4:	20005140 	.word	0x20005140

0800a1d8 <_vsiprintf_r>:
 800a1d8:	b510      	push	{r4, lr}
 800a1da:	b09a      	sub	sp, #104	@ 0x68
 800a1dc:	2400      	movs	r4, #0
 800a1de:	9100      	str	r1, [sp, #0]
 800a1e0:	9104      	str	r1, [sp, #16]
 800a1e2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a1e6:	9105      	str	r1, [sp, #20]
 800a1e8:	9102      	str	r1, [sp, #8]
 800a1ea:	4905      	ldr	r1, [pc, #20]	@ (800a200 <_vsiprintf_r+0x28>)
 800a1ec:	9103      	str	r1, [sp, #12]
 800a1ee:	4669      	mov	r1, sp
 800a1f0:	9419      	str	r4, [sp, #100]	@ 0x64
 800a1f2:	f000 f8af 	bl	800a354 <_svfiprintf_r>
 800a1f6:	9b00      	ldr	r3, [sp, #0]
 800a1f8:	701c      	strb	r4, [r3, #0]
 800a1fa:	b01a      	add	sp, #104	@ 0x68
 800a1fc:	bd10      	pop	{r4, pc}
 800a1fe:	bf00      	nop
 800a200:	ffff0208 	.word	0xffff0208

0800a204 <vsiprintf>:
 800a204:	4613      	mov	r3, r2
 800a206:	460a      	mov	r2, r1
 800a208:	4601      	mov	r1, r0
 800a20a:	4802      	ldr	r0, [pc, #8]	@ (800a214 <vsiprintf+0x10>)
 800a20c:	6800      	ldr	r0, [r0, #0]
 800a20e:	f7ff bfe3 	b.w	800a1d8 <_vsiprintf_r>
 800a212:	bf00      	nop
 800a214:	20000014 	.word	0x20000014

0800a218 <memset>:
 800a218:	4402      	add	r2, r0
 800a21a:	4603      	mov	r3, r0
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d100      	bne.n	800a222 <memset+0xa>
 800a220:	4770      	bx	lr
 800a222:	f803 1b01 	strb.w	r1, [r3], #1
 800a226:	e7f9      	b.n	800a21c <memset+0x4>

0800a228 <__errno>:
 800a228:	4b01      	ldr	r3, [pc, #4]	@ (800a230 <__errno+0x8>)
 800a22a:	6818      	ldr	r0, [r3, #0]
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	20000014 	.word	0x20000014

0800a234 <__libc_init_array>:
 800a234:	b570      	push	{r4, r5, r6, lr}
 800a236:	4d0d      	ldr	r5, [pc, #52]	@ (800a26c <__libc_init_array+0x38>)
 800a238:	4c0d      	ldr	r4, [pc, #52]	@ (800a270 <__libc_init_array+0x3c>)
 800a23a:	1b64      	subs	r4, r4, r5
 800a23c:	10a4      	asrs	r4, r4, #2
 800a23e:	2600      	movs	r6, #0
 800a240:	42a6      	cmp	r6, r4
 800a242:	d109      	bne.n	800a258 <__libc_init_array+0x24>
 800a244:	4d0b      	ldr	r5, [pc, #44]	@ (800a274 <__libc_init_array+0x40>)
 800a246:	4c0c      	ldr	r4, [pc, #48]	@ (800a278 <__libc_init_array+0x44>)
 800a248:	f000 fc64 	bl	800ab14 <_init>
 800a24c:	1b64      	subs	r4, r4, r5
 800a24e:	10a4      	asrs	r4, r4, #2
 800a250:	2600      	movs	r6, #0
 800a252:	42a6      	cmp	r6, r4
 800a254:	d105      	bne.n	800a262 <__libc_init_array+0x2e>
 800a256:	bd70      	pop	{r4, r5, r6, pc}
 800a258:	f855 3b04 	ldr.w	r3, [r5], #4
 800a25c:	4798      	blx	r3
 800a25e:	3601      	adds	r6, #1
 800a260:	e7ee      	b.n	800a240 <__libc_init_array+0xc>
 800a262:	f855 3b04 	ldr.w	r3, [r5], #4
 800a266:	4798      	blx	r3
 800a268:	3601      	adds	r6, #1
 800a26a:	e7f2      	b.n	800a252 <__libc_init_array+0x1e>
 800a26c:	0800ae10 	.word	0x0800ae10
 800a270:	0800ae10 	.word	0x0800ae10
 800a274:	0800ae10 	.word	0x0800ae10
 800a278:	0800ae14 	.word	0x0800ae14

0800a27c <__retarget_lock_acquire_recursive>:
 800a27c:	4770      	bx	lr

0800a27e <__retarget_lock_release_recursive>:
 800a27e:	4770      	bx	lr

0800a280 <memcpy>:
 800a280:	440a      	add	r2, r1
 800a282:	4291      	cmp	r1, r2
 800a284:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a288:	d100      	bne.n	800a28c <memcpy+0xc>
 800a28a:	4770      	bx	lr
 800a28c:	b510      	push	{r4, lr}
 800a28e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a292:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a296:	4291      	cmp	r1, r2
 800a298:	d1f9      	bne.n	800a28e <memcpy+0xe>
 800a29a:	bd10      	pop	{r4, pc}

0800a29c <__ssputs_r>:
 800a29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a0:	688e      	ldr	r6, [r1, #8]
 800a2a2:	461f      	mov	r7, r3
 800a2a4:	42be      	cmp	r6, r7
 800a2a6:	680b      	ldr	r3, [r1, #0]
 800a2a8:	4682      	mov	sl, r0
 800a2aa:	460c      	mov	r4, r1
 800a2ac:	4690      	mov	r8, r2
 800a2ae:	d82d      	bhi.n	800a30c <__ssputs_r+0x70>
 800a2b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a2b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a2b8:	d026      	beq.n	800a308 <__ssputs_r+0x6c>
 800a2ba:	6965      	ldr	r5, [r4, #20]
 800a2bc:	6909      	ldr	r1, [r1, #16]
 800a2be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2c2:	eba3 0901 	sub.w	r9, r3, r1
 800a2c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2ca:	1c7b      	adds	r3, r7, #1
 800a2cc:	444b      	add	r3, r9
 800a2ce:	106d      	asrs	r5, r5, #1
 800a2d0:	429d      	cmp	r5, r3
 800a2d2:	bf38      	it	cc
 800a2d4:	461d      	movcc	r5, r3
 800a2d6:	0553      	lsls	r3, r2, #21
 800a2d8:	d527      	bpl.n	800a32a <__ssputs_r+0x8e>
 800a2da:	4629      	mov	r1, r5
 800a2dc:	f000 f958 	bl	800a590 <_malloc_r>
 800a2e0:	4606      	mov	r6, r0
 800a2e2:	b360      	cbz	r0, 800a33e <__ssputs_r+0xa2>
 800a2e4:	6921      	ldr	r1, [r4, #16]
 800a2e6:	464a      	mov	r2, r9
 800a2e8:	f7ff ffca 	bl	800a280 <memcpy>
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a2f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2f6:	81a3      	strh	r3, [r4, #12]
 800a2f8:	6126      	str	r6, [r4, #16]
 800a2fa:	6165      	str	r5, [r4, #20]
 800a2fc:	444e      	add	r6, r9
 800a2fe:	eba5 0509 	sub.w	r5, r5, r9
 800a302:	6026      	str	r6, [r4, #0]
 800a304:	60a5      	str	r5, [r4, #8]
 800a306:	463e      	mov	r6, r7
 800a308:	42be      	cmp	r6, r7
 800a30a:	d900      	bls.n	800a30e <__ssputs_r+0x72>
 800a30c:	463e      	mov	r6, r7
 800a30e:	6820      	ldr	r0, [r4, #0]
 800a310:	4632      	mov	r2, r6
 800a312:	4641      	mov	r1, r8
 800a314:	f000 fb82 	bl	800aa1c <memmove>
 800a318:	68a3      	ldr	r3, [r4, #8]
 800a31a:	1b9b      	subs	r3, r3, r6
 800a31c:	60a3      	str	r3, [r4, #8]
 800a31e:	6823      	ldr	r3, [r4, #0]
 800a320:	4433      	add	r3, r6
 800a322:	6023      	str	r3, [r4, #0]
 800a324:	2000      	movs	r0, #0
 800a326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a32a:	462a      	mov	r2, r5
 800a32c:	f000 fb48 	bl	800a9c0 <_realloc_r>
 800a330:	4606      	mov	r6, r0
 800a332:	2800      	cmp	r0, #0
 800a334:	d1e0      	bne.n	800a2f8 <__ssputs_r+0x5c>
 800a336:	6921      	ldr	r1, [r4, #16]
 800a338:	4650      	mov	r0, sl
 800a33a:	f000 fb99 	bl	800aa70 <_free_r>
 800a33e:	230c      	movs	r3, #12
 800a340:	f8ca 3000 	str.w	r3, [sl]
 800a344:	89a3      	ldrh	r3, [r4, #12]
 800a346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a34a:	81a3      	strh	r3, [r4, #12]
 800a34c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a350:	e7e9      	b.n	800a326 <__ssputs_r+0x8a>
	...

0800a354 <_svfiprintf_r>:
 800a354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a358:	4698      	mov	r8, r3
 800a35a:	898b      	ldrh	r3, [r1, #12]
 800a35c:	061b      	lsls	r3, r3, #24
 800a35e:	b09d      	sub	sp, #116	@ 0x74
 800a360:	4607      	mov	r7, r0
 800a362:	460d      	mov	r5, r1
 800a364:	4614      	mov	r4, r2
 800a366:	d510      	bpl.n	800a38a <_svfiprintf_r+0x36>
 800a368:	690b      	ldr	r3, [r1, #16]
 800a36a:	b973      	cbnz	r3, 800a38a <_svfiprintf_r+0x36>
 800a36c:	2140      	movs	r1, #64	@ 0x40
 800a36e:	f000 f90f 	bl	800a590 <_malloc_r>
 800a372:	6028      	str	r0, [r5, #0]
 800a374:	6128      	str	r0, [r5, #16]
 800a376:	b930      	cbnz	r0, 800a386 <_svfiprintf_r+0x32>
 800a378:	230c      	movs	r3, #12
 800a37a:	603b      	str	r3, [r7, #0]
 800a37c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a380:	b01d      	add	sp, #116	@ 0x74
 800a382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a386:	2340      	movs	r3, #64	@ 0x40
 800a388:	616b      	str	r3, [r5, #20]
 800a38a:	2300      	movs	r3, #0
 800a38c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a38e:	2320      	movs	r3, #32
 800a390:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a394:	f8cd 800c 	str.w	r8, [sp, #12]
 800a398:	2330      	movs	r3, #48	@ 0x30
 800a39a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a538 <_svfiprintf_r+0x1e4>
 800a39e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a3a2:	f04f 0901 	mov.w	r9, #1
 800a3a6:	4623      	mov	r3, r4
 800a3a8:	469a      	mov	sl, r3
 800a3aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3ae:	b10a      	cbz	r2, 800a3b4 <_svfiprintf_r+0x60>
 800a3b0:	2a25      	cmp	r2, #37	@ 0x25
 800a3b2:	d1f9      	bne.n	800a3a8 <_svfiprintf_r+0x54>
 800a3b4:	ebba 0b04 	subs.w	fp, sl, r4
 800a3b8:	d00b      	beq.n	800a3d2 <_svfiprintf_r+0x7e>
 800a3ba:	465b      	mov	r3, fp
 800a3bc:	4622      	mov	r2, r4
 800a3be:	4629      	mov	r1, r5
 800a3c0:	4638      	mov	r0, r7
 800a3c2:	f7ff ff6b 	bl	800a29c <__ssputs_r>
 800a3c6:	3001      	adds	r0, #1
 800a3c8:	f000 80a7 	beq.w	800a51a <_svfiprintf_r+0x1c6>
 800a3cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3ce:	445a      	add	r2, fp
 800a3d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f000 809f 	beq.w	800a51a <_svfiprintf_r+0x1c6>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3e6:	f10a 0a01 	add.w	sl, sl, #1
 800a3ea:	9304      	str	r3, [sp, #16]
 800a3ec:	9307      	str	r3, [sp, #28]
 800a3ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3f4:	4654      	mov	r4, sl
 800a3f6:	2205      	movs	r2, #5
 800a3f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3fc:	484e      	ldr	r0, [pc, #312]	@ (800a538 <_svfiprintf_r+0x1e4>)
 800a3fe:	f7f5 fee7 	bl	80001d0 <memchr>
 800a402:	9a04      	ldr	r2, [sp, #16]
 800a404:	b9d8      	cbnz	r0, 800a43e <_svfiprintf_r+0xea>
 800a406:	06d0      	lsls	r0, r2, #27
 800a408:	bf44      	itt	mi
 800a40a:	2320      	movmi	r3, #32
 800a40c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a410:	0711      	lsls	r1, r2, #28
 800a412:	bf44      	itt	mi
 800a414:	232b      	movmi	r3, #43	@ 0x2b
 800a416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a41a:	f89a 3000 	ldrb.w	r3, [sl]
 800a41e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a420:	d015      	beq.n	800a44e <_svfiprintf_r+0xfa>
 800a422:	9a07      	ldr	r2, [sp, #28]
 800a424:	4654      	mov	r4, sl
 800a426:	2000      	movs	r0, #0
 800a428:	f04f 0c0a 	mov.w	ip, #10
 800a42c:	4621      	mov	r1, r4
 800a42e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a432:	3b30      	subs	r3, #48	@ 0x30
 800a434:	2b09      	cmp	r3, #9
 800a436:	d94b      	bls.n	800a4d0 <_svfiprintf_r+0x17c>
 800a438:	b1b0      	cbz	r0, 800a468 <_svfiprintf_r+0x114>
 800a43a:	9207      	str	r2, [sp, #28]
 800a43c:	e014      	b.n	800a468 <_svfiprintf_r+0x114>
 800a43e:	eba0 0308 	sub.w	r3, r0, r8
 800a442:	fa09 f303 	lsl.w	r3, r9, r3
 800a446:	4313      	orrs	r3, r2
 800a448:	9304      	str	r3, [sp, #16]
 800a44a:	46a2      	mov	sl, r4
 800a44c:	e7d2      	b.n	800a3f4 <_svfiprintf_r+0xa0>
 800a44e:	9b03      	ldr	r3, [sp, #12]
 800a450:	1d19      	adds	r1, r3, #4
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	9103      	str	r1, [sp, #12]
 800a456:	2b00      	cmp	r3, #0
 800a458:	bfbb      	ittet	lt
 800a45a:	425b      	neglt	r3, r3
 800a45c:	f042 0202 	orrlt.w	r2, r2, #2
 800a460:	9307      	strge	r3, [sp, #28]
 800a462:	9307      	strlt	r3, [sp, #28]
 800a464:	bfb8      	it	lt
 800a466:	9204      	strlt	r2, [sp, #16]
 800a468:	7823      	ldrb	r3, [r4, #0]
 800a46a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a46c:	d10a      	bne.n	800a484 <_svfiprintf_r+0x130>
 800a46e:	7863      	ldrb	r3, [r4, #1]
 800a470:	2b2a      	cmp	r3, #42	@ 0x2a
 800a472:	d132      	bne.n	800a4da <_svfiprintf_r+0x186>
 800a474:	9b03      	ldr	r3, [sp, #12]
 800a476:	1d1a      	adds	r2, r3, #4
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	9203      	str	r2, [sp, #12]
 800a47c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a480:	3402      	adds	r4, #2
 800a482:	9305      	str	r3, [sp, #20]
 800a484:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a548 <_svfiprintf_r+0x1f4>
 800a488:	7821      	ldrb	r1, [r4, #0]
 800a48a:	2203      	movs	r2, #3
 800a48c:	4650      	mov	r0, sl
 800a48e:	f7f5 fe9f 	bl	80001d0 <memchr>
 800a492:	b138      	cbz	r0, 800a4a4 <_svfiprintf_r+0x150>
 800a494:	9b04      	ldr	r3, [sp, #16]
 800a496:	eba0 000a 	sub.w	r0, r0, sl
 800a49a:	2240      	movs	r2, #64	@ 0x40
 800a49c:	4082      	lsls	r2, r0
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	3401      	adds	r4, #1
 800a4a2:	9304      	str	r3, [sp, #16]
 800a4a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a8:	4824      	ldr	r0, [pc, #144]	@ (800a53c <_svfiprintf_r+0x1e8>)
 800a4aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a4ae:	2206      	movs	r2, #6
 800a4b0:	f7f5 fe8e 	bl	80001d0 <memchr>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	d036      	beq.n	800a526 <_svfiprintf_r+0x1d2>
 800a4b8:	4b21      	ldr	r3, [pc, #132]	@ (800a540 <_svfiprintf_r+0x1ec>)
 800a4ba:	bb1b      	cbnz	r3, 800a504 <_svfiprintf_r+0x1b0>
 800a4bc:	9b03      	ldr	r3, [sp, #12]
 800a4be:	3307      	adds	r3, #7
 800a4c0:	f023 0307 	bic.w	r3, r3, #7
 800a4c4:	3308      	adds	r3, #8
 800a4c6:	9303      	str	r3, [sp, #12]
 800a4c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4ca:	4433      	add	r3, r6
 800a4cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4ce:	e76a      	b.n	800a3a6 <_svfiprintf_r+0x52>
 800a4d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4d4:	460c      	mov	r4, r1
 800a4d6:	2001      	movs	r0, #1
 800a4d8:	e7a8      	b.n	800a42c <_svfiprintf_r+0xd8>
 800a4da:	2300      	movs	r3, #0
 800a4dc:	3401      	adds	r4, #1
 800a4de:	9305      	str	r3, [sp, #20]
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	f04f 0c0a 	mov.w	ip, #10
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4ec:	3a30      	subs	r2, #48	@ 0x30
 800a4ee:	2a09      	cmp	r2, #9
 800a4f0:	d903      	bls.n	800a4fa <_svfiprintf_r+0x1a6>
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d0c6      	beq.n	800a484 <_svfiprintf_r+0x130>
 800a4f6:	9105      	str	r1, [sp, #20]
 800a4f8:	e7c4      	b.n	800a484 <_svfiprintf_r+0x130>
 800a4fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4fe:	4604      	mov	r4, r0
 800a500:	2301      	movs	r3, #1
 800a502:	e7f0      	b.n	800a4e6 <_svfiprintf_r+0x192>
 800a504:	ab03      	add	r3, sp, #12
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	462a      	mov	r2, r5
 800a50a:	4b0e      	ldr	r3, [pc, #56]	@ (800a544 <_svfiprintf_r+0x1f0>)
 800a50c:	a904      	add	r1, sp, #16
 800a50e:	4638      	mov	r0, r7
 800a510:	f3af 8000 	nop.w
 800a514:	1c42      	adds	r2, r0, #1
 800a516:	4606      	mov	r6, r0
 800a518:	d1d6      	bne.n	800a4c8 <_svfiprintf_r+0x174>
 800a51a:	89ab      	ldrh	r3, [r5, #12]
 800a51c:	065b      	lsls	r3, r3, #25
 800a51e:	f53f af2d 	bmi.w	800a37c <_svfiprintf_r+0x28>
 800a522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a524:	e72c      	b.n	800a380 <_svfiprintf_r+0x2c>
 800a526:	ab03      	add	r3, sp, #12
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	462a      	mov	r2, r5
 800a52c:	4b05      	ldr	r3, [pc, #20]	@ (800a544 <_svfiprintf_r+0x1f0>)
 800a52e:	a904      	add	r1, sp, #16
 800a530:	4638      	mov	r0, r7
 800a532:	f000 f91b 	bl	800a76c <_printf_i>
 800a536:	e7ed      	b.n	800a514 <_svfiprintf_r+0x1c0>
 800a538:	0800add4 	.word	0x0800add4
 800a53c:	0800adde 	.word	0x0800adde
 800a540:	00000000 	.word	0x00000000
 800a544:	0800a29d 	.word	0x0800a29d
 800a548:	0800adda 	.word	0x0800adda

0800a54c <sbrk_aligned>:
 800a54c:	b570      	push	{r4, r5, r6, lr}
 800a54e:	4e0f      	ldr	r6, [pc, #60]	@ (800a58c <sbrk_aligned+0x40>)
 800a550:	460c      	mov	r4, r1
 800a552:	6831      	ldr	r1, [r6, #0]
 800a554:	4605      	mov	r5, r0
 800a556:	b911      	cbnz	r1, 800a55e <sbrk_aligned+0x12>
 800a558:	f000 fa7a 	bl	800aa50 <_sbrk_r>
 800a55c:	6030      	str	r0, [r6, #0]
 800a55e:	4621      	mov	r1, r4
 800a560:	4628      	mov	r0, r5
 800a562:	f000 fa75 	bl	800aa50 <_sbrk_r>
 800a566:	1c43      	adds	r3, r0, #1
 800a568:	d103      	bne.n	800a572 <sbrk_aligned+0x26>
 800a56a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a56e:	4620      	mov	r0, r4
 800a570:	bd70      	pop	{r4, r5, r6, pc}
 800a572:	1cc4      	adds	r4, r0, #3
 800a574:	f024 0403 	bic.w	r4, r4, #3
 800a578:	42a0      	cmp	r0, r4
 800a57a:	d0f8      	beq.n	800a56e <sbrk_aligned+0x22>
 800a57c:	1a21      	subs	r1, r4, r0
 800a57e:	4628      	mov	r0, r5
 800a580:	f000 fa66 	bl	800aa50 <_sbrk_r>
 800a584:	3001      	adds	r0, #1
 800a586:	d1f2      	bne.n	800a56e <sbrk_aligned+0x22>
 800a588:	e7ef      	b.n	800a56a <sbrk_aligned+0x1e>
 800a58a:	bf00      	nop
 800a58c:	20005294 	.word	0x20005294

0800a590 <_malloc_r>:
 800a590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a594:	1ccd      	adds	r5, r1, #3
 800a596:	f025 0503 	bic.w	r5, r5, #3
 800a59a:	3508      	adds	r5, #8
 800a59c:	2d0c      	cmp	r5, #12
 800a59e:	bf38      	it	cc
 800a5a0:	250c      	movcc	r5, #12
 800a5a2:	2d00      	cmp	r5, #0
 800a5a4:	4606      	mov	r6, r0
 800a5a6:	db01      	blt.n	800a5ac <_malloc_r+0x1c>
 800a5a8:	42a9      	cmp	r1, r5
 800a5aa:	d904      	bls.n	800a5b6 <_malloc_r+0x26>
 800a5ac:	230c      	movs	r3, #12
 800a5ae:	6033      	str	r3, [r6, #0]
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a68c <_malloc_r+0xfc>
 800a5ba:	f000 f9f5 	bl	800a9a8 <__malloc_lock>
 800a5be:	f8d8 3000 	ldr.w	r3, [r8]
 800a5c2:	461c      	mov	r4, r3
 800a5c4:	bb44      	cbnz	r4, 800a618 <_malloc_r+0x88>
 800a5c6:	4629      	mov	r1, r5
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	f7ff ffbf 	bl	800a54c <sbrk_aligned>
 800a5ce:	1c43      	adds	r3, r0, #1
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	d158      	bne.n	800a686 <_malloc_r+0xf6>
 800a5d4:	f8d8 4000 	ldr.w	r4, [r8]
 800a5d8:	4627      	mov	r7, r4
 800a5da:	2f00      	cmp	r7, #0
 800a5dc:	d143      	bne.n	800a666 <_malloc_r+0xd6>
 800a5de:	2c00      	cmp	r4, #0
 800a5e0:	d04b      	beq.n	800a67a <_malloc_r+0xea>
 800a5e2:	6823      	ldr	r3, [r4, #0]
 800a5e4:	4639      	mov	r1, r7
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	eb04 0903 	add.w	r9, r4, r3
 800a5ec:	f000 fa30 	bl	800aa50 <_sbrk_r>
 800a5f0:	4581      	cmp	r9, r0
 800a5f2:	d142      	bne.n	800a67a <_malloc_r+0xea>
 800a5f4:	6821      	ldr	r1, [r4, #0]
 800a5f6:	1a6d      	subs	r5, r5, r1
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	f7ff ffa6 	bl	800a54c <sbrk_aligned>
 800a600:	3001      	adds	r0, #1
 800a602:	d03a      	beq.n	800a67a <_malloc_r+0xea>
 800a604:	6823      	ldr	r3, [r4, #0]
 800a606:	442b      	add	r3, r5
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	f8d8 3000 	ldr.w	r3, [r8]
 800a60e:	685a      	ldr	r2, [r3, #4]
 800a610:	bb62      	cbnz	r2, 800a66c <_malloc_r+0xdc>
 800a612:	f8c8 7000 	str.w	r7, [r8]
 800a616:	e00f      	b.n	800a638 <_malloc_r+0xa8>
 800a618:	6822      	ldr	r2, [r4, #0]
 800a61a:	1b52      	subs	r2, r2, r5
 800a61c:	d420      	bmi.n	800a660 <_malloc_r+0xd0>
 800a61e:	2a0b      	cmp	r2, #11
 800a620:	d917      	bls.n	800a652 <_malloc_r+0xc2>
 800a622:	1961      	adds	r1, r4, r5
 800a624:	42a3      	cmp	r3, r4
 800a626:	6025      	str	r5, [r4, #0]
 800a628:	bf18      	it	ne
 800a62a:	6059      	strne	r1, [r3, #4]
 800a62c:	6863      	ldr	r3, [r4, #4]
 800a62e:	bf08      	it	eq
 800a630:	f8c8 1000 	streq.w	r1, [r8]
 800a634:	5162      	str	r2, [r4, r5]
 800a636:	604b      	str	r3, [r1, #4]
 800a638:	4630      	mov	r0, r6
 800a63a:	f000 f9bb 	bl	800a9b4 <__malloc_unlock>
 800a63e:	f104 000b 	add.w	r0, r4, #11
 800a642:	1d23      	adds	r3, r4, #4
 800a644:	f020 0007 	bic.w	r0, r0, #7
 800a648:	1ac2      	subs	r2, r0, r3
 800a64a:	bf1c      	itt	ne
 800a64c:	1a1b      	subne	r3, r3, r0
 800a64e:	50a3      	strne	r3, [r4, r2]
 800a650:	e7af      	b.n	800a5b2 <_malloc_r+0x22>
 800a652:	6862      	ldr	r2, [r4, #4]
 800a654:	42a3      	cmp	r3, r4
 800a656:	bf0c      	ite	eq
 800a658:	f8c8 2000 	streq.w	r2, [r8]
 800a65c:	605a      	strne	r2, [r3, #4]
 800a65e:	e7eb      	b.n	800a638 <_malloc_r+0xa8>
 800a660:	4623      	mov	r3, r4
 800a662:	6864      	ldr	r4, [r4, #4]
 800a664:	e7ae      	b.n	800a5c4 <_malloc_r+0x34>
 800a666:	463c      	mov	r4, r7
 800a668:	687f      	ldr	r7, [r7, #4]
 800a66a:	e7b6      	b.n	800a5da <_malloc_r+0x4a>
 800a66c:	461a      	mov	r2, r3
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	42a3      	cmp	r3, r4
 800a672:	d1fb      	bne.n	800a66c <_malloc_r+0xdc>
 800a674:	2300      	movs	r3, #0
 800a676:	6053      	str	r3, [r2, #4]
 800a678:	e7de      	b.n	800a638 <_malloc_r+0xa8>
 800a67a:	230c      	movs	r3, #12
 800a67c:	6033      	str	r3, [r6, #0]
 800a67e:	4630      	mov	r0, r6
 800a680:	f000 f998 	bl	800a9b4 <__malloc_unlock>
 800a684:	e794      	b.n	800a5b0 <_malloc_r+0x20>
 800a686:	6005      	str	r5, [r0, #0]
 800a688:	e7d6      	b.n	800a638 <_malloc_r+0xa8>
 800a68a:	bf00      	nop
 800a68c:	20005298 	.word	0x20005298

0800a690 <_printf_common>:
 800a690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a694:	4616      	mov	r6, r2
 800a696:	4698      	mov	r8, r3
 800a698:	688a      	ldr	r2, [r1, #8]
 800a69a:	690b      	ldr	r3, [r1, #16]
 800a69c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	bfb8      	it	lt
 800a6a4:	4613      	movlt	r3, r2
 800a6a6:	6033      	str	r3, [r6, #0]
 800a6a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a6ac:	4607      	mov	r7, r0
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	b10a      	cbz	r2, 800a6b6 <_printf_common+0x26>
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	6033      	str	r3, [r6, #0]
 800a6b6:	6823      	ldr	r3, [r4, #0]
 800a6b8:	0699      	lsls	r1, r3, #26
 800a6ba:	bf42      	ittt	mi
 800a6bc:	6833      	ldrmi	r3, [r6, #0]
 800a6be:	3302      	addmi	r3, #2
 800a6c0:	6033      	strmi	r3, [r6, #0]
 800a6c2:	6825      	ldr	r5, [r4, #0]
 800a6c4:	f015 0506 	ands.w	r5, r5, #6
 800a6c8:	d106      	bne.n	800a6d8 <_printf_common+0x48>
 800a6ca:	f104 0a19 	add.w	sl, r4, #25
 800a6ce:	68e3      	ldr	r3, [r4, #12]
 800a6d0:	6832      	ldr	r2, [r6, #0]
 800a6d2:	1a9b      	subs	r3, r3, r2
 800a6d4:	42ab      	cmp	r3, r5
 800a6d6:	dc26      	bgt.n	800a726 <_printf_common+0x96>
 800a6d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a6dc:	6822      	ldr	r2, [r4, #0]
 800a6de:	3b00      	subs	r3, #0
 800a6e0:	bf18      	it	ne
 800a6e2:	2301      	movne	r3, #1
 800a6e4:	0692      	lsls	r2, r2, #26
 800a6e6:	d42b      	bmi.n	800a740 <_printf_common+0xb0>
 800a6e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a6ec:	4641      	mov	r1, r8
 800a6ee:	4638      	mov	r0, r7
 800a6f0:	47c8      	blx	r9
 800a6f2:	3001      	adds	r0, #1
 800a6f4:	d01e      	beq.n	800a734 <_printf_common+0xa4>
 800a6f6:	6823      	ldr	r3, [r4, #0]
 800a6f8:	6922      	ldr	r2, [r4, #16]
 800a6fa:	f003 0306 	and.w	r3, r3, #6
 800a6fe:	2b04      	cmp	r3, #4
 800a700:	bf02      	ittt	eq
 800a702:	68e5      	ldreq	r5, [r4, #12]
 800a704:	6833      	ldreq	r3, [r6, #0]
 800a706:	1aed      	subeq	r5, r5, r3
 800a708:	68a3      	ldr	r3, [r4, #8]
 800a70a:	bf0c      	ite	eq
 800a70c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a710:	2500      	movne	r5, #0
 800a712:	4293      	cmp	r3, r2
 800a714:	bfc4      	itt	gt
 800a716:	1a9b      	subgt	r3, r3, r2
 800a718:	18ed      	addgt	r5, r5, r3
 800a71a:	2600      	movs	r6, #0
 800a71c:	341a      	adds	r4, #26
 800a71e:	42b5      	cmp	r5, r6
 800a720:	d11a      	bne.n	800a758 <_printf_common+0xc8>
 800a722:	2000      	movs	r0, #0
 800a724:	e008      	b.n	800a738 <_printf_common+0xa8>
 800a726:	2301      	movs	r3, #1
 800a728:	4652      	mov	r2, sl
 800a72a:	4641      	mov	r1, r8
 800a72c:	4638      	mov	r0, r7
 800a72e:	47c8      	blx	r9
 800a730:	3001      	adds	r0, #1
 800a732:	d103      	bne.n	800a73c <_printf_common+0xac>
 800a734:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a73c:	3501      	adds	r5, #1
 800a73e:	e7c6      	b.n	800a6ce <_printf_common+0x3e>
 800a740:	18e1      	adds	r1, r4, r3
 800a742:	1c5a      	adds	r2, r3, #1
 800a744:	2030      	movs	r0, #48	@ 0x30
 800a746:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a74a:	4422      	add	r2, r4
 800a74c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a750:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a754:	3302      	adds	r3, #2
 800a756:	e7c7      	b.n	800a6e8 <_printf_common+0x58>
 800a758:	2301      	movs	r3, #1
 800a75a:	4622      	mov	r2, r4
 800a75c:	4641      	mov	r1, r8
 800a75e:	4638      	mov	r0, r7
 800a760:	47c8      	blx	r9
 800a762:	3001      	adds	r0, #1
 800a764:	d0e6      	beq.n	800a734 <_printf_common+0xa4>
 800a766:	3601      	adds	r6, #1
 800a768:	e7d9      	b.n	800a71e <_printf_common+0x8e>
	...

0800a76c <_printf_i>:
 800a76c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a770:	7e0f      	ldrb	r7, [r1, #24]
 800a772:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a774:	2f78      	cmp	r7, #120	@ 0x78
 800a776:	4691      	mov	r9, r2
 800a778:	4680      	mov	r8, r0
 800a77a:	460c      	mov	r4, r1
 800a77c:	469a      	mov	sl, r3
 800a77e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a782:	d807      	bhi.n	800a794 <_printf_i+0x28>
 800a784:	2f62      	cmp	r7, #98	@ 0x62
 800a786:	d80a      	bhi.n	800a79e <_printf_i+0x32>
 800a788:	2f00      	cmp	r7, #0
 800a78a:	f000 80d1 	beq.w	800a930 <_printf_i+0x1c4>
 800a78e:	2f58      	cmp	r7, #88	@ 0x58
 800a790:	f000 80b8 	beq.w	800a904 <_printf_i+0x198>
 800a794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a798:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a79c:	e03a      	b.n	800a814 <_printf_i+0xa8>
 800a79e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a7a2:	2b15      	cmp	r3, #21
 800a7a4:	d8f6      	bhi.n	800a794 <_printf_i+0x28>
 800a7a6:	a101      	add	r1, pc, #4	@ (adr r1, 800a7ac <_printf_i+0x40>)
 800a7a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7ac:	0800a805 	.word	0x0800a805
 800a7b0:	0800a819 	.word	0x0800a819
 800a7b4:	0800a795 	.word	0x0800a795
 800a7b8:	0800a795 	.word	0x0800a795
 800a7bc:	0800a795 	.word	0x0800a795
 800a7c0:	0800a795 	.word	0x0800a795
 800a7c4:	0800a819 	.word	0x0800a819
 800a7c8:	0800a795 	.word	0x0800a795
 800a7cc:	0800a795 	.word	0x0800a795
 800a7d0:	0800a795 	.word	0x0800a795
 800a7d4:	0800a795 	.word	0x0800a795
 800a7d8:	0800a917 	.word	0x0800a917
 800a7dc:	0800a843 	.word	0x0800a843
 800a7e0:	0800a8d1 	.word	0x0800a8d1
 800a7e4:	0800a795 	.word	0x0800a795
 800a7e8:	0800a795 	.word	0x0800a795
 800a7ec:	0800a939 	.word	0x0800a939
 800a7f0:	0800a795 	.word	0x0800a795
 800a7f4:	0800a843 	.word	0x0800a843
 800a7f8:	0800a795 	.word	0x0800a795
 800a7fc:	0800a795 	.word	0x0800a795
 800a800:	0800a8d9 	.word	0x0800a8d9
 800a804:	6833      	ldr	r3, [r6, #0]
 800a806:	1d1a      	adds	r2, r3, #4
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	6032      	str	r2, [r6, #0]
 800a80c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a810:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a814:	2301      	movs	r3, #1
 800a816:	e09c      	b.n	800a952 <_printf_i+0x1e6>
 800a818:	6833      	ldr	r3, [r6, #0]
 800a81a:	6820      	ldr	r0, [r4, #0]
 800a81c:	1d19      	adds	r1, r3, #4
 800a81e:	6031      	str	r1, [r6, #0]
 800a820:	0606      	lsls	r6, r0, #24
 800a822:	d501      	bpl.n	800a828 <_printf_i+0xbc>
 800a824:	681d      	ldr	r5, [r3, #0]
 800a826:	e003      	b.n	800a830 <_printf_i+0xc4>
 800a828:	0645      	lsls	r5, r0, #25
 800a82a:	d5fb      	bpl.n	800a824 <_printf_i+0xb8>
 800a82c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a830:	2d00      	cmp	r5, #0
 800a832:	da03      	bge.n	800a83c <_printf_i+0xd0>
 800a834:	232d      	movs	r3, #45	@ 0x2d
 800a836:	426d      	negs	r5, r5
 800a838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a83c:	4858      	ldr	r0, [pc, #352]	@ (800a9a0 <_printf_i+0x234>)
 800a83e:	230a      	movs	r3, #10
 800a840:	e011      	b.n	800a866 <_printf_i+0xfa>
 800a842:	6821      	ldr	r1, [r4, #0]
 800a844:	6833      	ldr	r3, [r6, #0]
 800a846:	0608      	lsls	r0, r1, #24
 800a848:	f853 5b04 	ldr.w	r5, [r3], #4
 800a84c:	d402      	bmi.n	800a854 <_printf_i+0xe8>
 800a84e:	0649      	lsls	r1, r1, #25
 800a850:	bf48      	it	mi
 800a852:	b2ad      	uxthmi	r5, r5
 800a854:	2f6f      	cmp	r7, #111	@ 0x6f
 800a856:	4852      	ldr	r0, [pc, #328]	@ (800a9a0 <_printf_i+0x234>)
 800a858:	6033      	str	r3, [r6, #0]
 800a85a:	bf14      	ite	ne
 800a85c:	230a      	movne	r3, #10
 800a85e:	2308      	moveq	r3, #8
 800a860:	2100      	movs	r1, #0
 800a862:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a866:	6866      	ldr	r6, [r4, #4]
 800a868:	60a6      	str	r6, [r4, #8]
 800a86a:	2e00      	cmp	r6, #0
 800a86c:	db05      	blt.n	800a87a <_printf_i+0x10e>
 800a86e:	6821      	ldr	r1, [r4, #0]
 800a870:	432e      	orrs	r6, r5
 800a872:	f021 0104 	bic.w	r1, r1, #4
 800a876:	6021      	str	r1, [r4, #0]
 800a878:	d04b      	beq.n	800a912 <_printf_i+0x1a6>
 800a87a:	4616      	mov	r6, r2
 800a87c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a880:	fb03 5711 	mls	r7, r3, r1, r5
 800a884:	5dc7      	ldrb	r7, [r0, r7]
 800a886:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a88a:	462f      	mov	r7, r5
 800a88c:	42bb      	cmp	r3, r7
 800a88e:	460d      	mov	r5, r1
 800a890:	d9f4      	bls.n	800a87c <_printf_i+0x110>
 800a892:	2b08      	cmp	r3, #8
 800a894:	d10b      	bne.n	800a8ae <_printf_i+0x142>
 800a896:	6823      	ldr	r3, [r4, #0]
 800a898:	07df      	lsls	r7, r3, #31
 800a89a:	d508      	bpl.n	800a8ae <_printf_i+0x142>
 800a89c:	6923      	ldr	r3, [r4, #16]
 800a89e:	6861      	ldr	r1, [r4, #4]
 800a8a0:	4299      	cmp	r1, r3
 800a8a2:	bfde      	ittt	le
 800a8a4:	2330      	movle	r3, #48	@ 0x30
 800a8a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8aa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a8ae:	1b92      	subs	r2, r2, r6
 800a8b0:	6122      	str	r2, [r4, #16]
 800a8b2:	f8cd a000 	str.w	sl, [sp]
 800a8b6:	464b      	mov	r3, r9
 800a8b8:	aa03      	add	r2, sp, #12
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	4640      	mov	r0, r8
 800a8be:	f7ff fee7 	bl	800a690 <_printf_common>
 800a8c2:	3001      	adds	r0, #1
 800a8c4:	d14a      	bne.n	800a95c <_printf_i+0x1f0>
 800a8c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8ca:	b004      	add	sp, #16
 800a8cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d0:	6823      	ldr	r3, [r4, #0]
 800a8d2:	f043 0320 	orr.w	r3, r3, #32
 800a8d6:	6023      	str	r3, [r4, #0]
 800a8d8:	4832      	ldr	r0, [pc, #200]	@ (800a9a4 <_printf_i+0x238>)
 800a8da:	2778      	movs	r7, #120	@ 0x78
 800a8dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a8e0:	6823      	ldr	r3, [r4, #0]
 800a8e2:	6831      	ldr	r1, [r6, #0]
 800a8e4:	061f      	lsls	r7, r3, #24
 800a8e6:	f851 5b04 	ldr.w	r5, [r1], #4
 800a8ea:	d402      	bmi.n	800a8f2 <_printf_i+0x186>
 800a8ec:	065f      	lsls	r7, r3, #25
 800a8ee:	bf48      	it	mi
 800a8f0:	b2ad      	uxthmi	r5, r5
 800a8f2:	6031      	str	r1, [r6, #0]
 800a8f4:	07d9      	lsls	r1, r3, #31
 800a8f6:	bf44      	itt	mi
 800a8f8:	f043 0320 	orrmi.w	r3, r3, #32
 800a8fc:	6023      	strmi	r3, [r4, #0]
 800a8fe:	b11d      	cbz	r5, 800a908 <_printf_i+0x19c>
 800a900:	2310      	movs	r3, #16
 800a902:	e7ad      	b.n	800a860 <_printf_i+0xf4>
 800a904:	4826      	ldr	r0, [pc, #152]	@ (800a9a0 <_printf_i+0x234>)
 800a906:	e7e9      	b.n	800a8dc <_printf_i+0x170>
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	f023 0320 	bic.w	r3, r3, #32
 800a90e:	6023      	str	r3, [r4, #0]
 800a910:	e7f6      	b.n	800a900 <_printf_i+0x194>
 800a912:	4616      	mov	r6, r2
 800a914:	e7bd      	b.n	800a892 <_printf_i+0x126>
 800a916:	6833      	ldr	r3, [r6, #0]
 800a918:	6825      	ldr	r5, [r4, #0]
 800a91a:	6961      	ldr	r1, [r4, #20]
 800a91c:	1d18      	adds	r0, r3, #4
 800a91e:	6030      	str	r0, [r6, #0]
 800a920:	062e      	lsls	r6, r5, #24
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	d501      	bpl.n	800a92a <_printf_i+0x1be>
 800a926:	6019      	str	r1, [r3, #0]
 800a928:	e002      	b.n	800a930 <_printf_i+0x1c4>
 800a92a:	0668      	lsls	r0, r5, #25
 800a92c:	d5fb      	bpl.n	800a926 <_printf_i+0x1ba>
 800a92e:	8019      	strh	r1, [r3, #0]
 800a930:	2300      	movs	r3, #0
 800a932:	6123      	str	r3, [r4, #16]
 800a934:	4616      	mov	r6, r2
 800a936:	e7bc      	b.n	800a8b2 <_printf_i+0x146>
 800a938:	6833      	ldr	r3, [r6, #0]
 800a93a:	1d1a      	adds	r2, r3, #4
 800a93c:	6032      	str	r2, [r6, #0]
 800a93e:	681e      	ldr	r6, [r3, #0]
 800a940:	6862      	ldr	r2, [r4, #4]
 800a942:	2100      	movs	r1, #0
 800a944:	4630      	mov	r0, r6
 800a946:	f7f5 fc43 	bl	80001d0 <memchr>
 800a94a:	b108      	cbz	r0, 800a950 <_printf_i+0x1e4>
 800a94c:	1b80      	subs	r0, r0, r6
 800a94e:	6060      	str	r0, [r4, #4]
 800a950:	6863      	ldr	r3, [r4, #4]
 800a952:	6123      	str	r3, [r4, #16]
 800a954:	2300      	movs	r3, #0
 800a956:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a95a:	e7aa      	b.n	800a8b2 <_printf_i+0x146>
 800a95c:	6923      	ldr	r3, [r4, #16]
 800a95e:	4632      	mov	r2, r6
 800a960:	4649      	mov	r1, r9
 800a962:	4640      	mov	r0, r8
 800a964:	47d0      	blx	sl
 800a966:	3001      	adds	r0, #1
 800a968:	d0ad      	beq.n	800a8c6 <_printf_i+0x15a>
 800a96a:	6823      	ldr	r3, [r4, #0]
 800a96c:	079b      	lsls	r3, r3, #30
 800a96e:	d413      	bmi.n	800a998 <_printf_i+0x22c>
 800a970:	68e0      	ldr	r0, [r4, #12]
 800a972:	9b03      	ldr	r3, [sp, #12]
 800a974:	4298      	cmp	r0, r3
 800a976:	bfb8      	it	lt
 800a978:	4618      	movlt	r0, r3
 800a97a:	e7a6      	b.n	800a8ca <_printf_i+0x15e>
 800a97c:	2301      	movs	r3, #1
 800a97e:	4632      	mov	r2, r6
 800a980:	4649      	mov	r1, r9
 800a982:	4640      	mov	r0, r8
 800a984:	47d0      	blx	sl
 800a986:	3001      	adds	r0, #1
 800a988:	d09d      	beq.n	800a8c6 <_printf_i+0x15a>
 800a98a:	3501      	adds	r5, #1
 800a98c:	68e3      	ldr	r3, [r4, #12]
 800a98e:	9903      	ldr	r1, [sp, #12]
 800a990:	1a5b      	subs	r3, r3, r1
 800a992:	42ab      	cmp	r3, r5
 800a994:	dcf2      	bgt.n	800a97c <_printf_i+0x210>
 800a996:	e7eb      	b.n	800a970 <_printf_i+0x204>
 800a998:	2500      	movs	r5, #0
 800a99a:	f104 0619 	add.w	r6, r4, #25
 800a99e:	e7f5      	b.n	800a98c <_printf_i+0x220>
 800a9a0:	0800ade5 	.word	0x0800ade5
 800a9a4:	0800adf6 	.word	0x0800adf6

0800a9a8 <__malloc_lock>:
 800a9a8:	4801      	ldr	r0, [pc, #4]	@ (800a9b0 <__malloc_lock+0x8>)
 800a9aa:	f7ff bc67 	b.w	800a27c <__retarget_lock_acquire_recursive>
 800a9ae:	bf00      	nop
 800a9b0:	20005290 	.word	0x20005290

0800a9b4 <__malloc_unlock>:
 800a9b4:	4801      	ldr	r0, [pc, #4]	@ (800a9bc <__malloc_unlock+0x8>)
 800a9b6:	f7ff bc62 	b.w	800a27e <__retarget_lock_release_recursive>
 800a9ba:	bf00      	nop
 800a9bc:	20005290 	.word	0x20005290

0800a9c0 <_realloc_r>:
 800a9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c4:	4607      	mov	r7, r0
 800a9c6:	4614      	mov	r4, r2
 800a9c8:	460d      	mov	r5, r1
 800a9ca:	b921      	cbnz	r1, 800a9d6 <_realloc_r+0x16>
 800a9cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	f7ff bddd 	b.w	800a590 <_malloc_r>
 800a9d6:	b92a      	cbnz	r2, 800a9e4 <_realloc_r+0x24>
 800a9d8:	f000 f84a 	bl	800aa70 <_free_r>
 800a9dc:	4625      	mov	r5, r4
 800a9de:	4628      	mov	r0, r5
 800a9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9e4:	f000 f88e 	bl	800ab04 <_malloc_usable_size_r>
 800a9e8:	4284      	cmp	r4, r0
 800a9ea:	4606      	mov	r6, r0
 800a9ec:	d802      	bhi.n	800a9f4 <_realloc_r+0x34>
 800a9ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a9f2:	d8f4      	bhi.n	800a9de <_realloc_r+0x1e>
 800a9f4:	4621      	mov	r1, r4
 800a9f6:	4638      	mov	r0, r7
 800a9f8:	f7ff fdca 	bl	800a590 <_malloc_r>
 800a9fc:	4680      	mov	r8, r0
 800a9fe:	b908      	cbnz	r0, 800aa04 <_realloc_r+0x44>
 800aa00:	4645      	mov	r5, r8
 800aa02:	e7ec      	b.n	800a9de <_realloc_r+0x1e>
 800aa04:	42b4      	cmp	r4, r6
 800aa06:	4622      	mov	r2, r4
 800aa08:	4629      	mov	r1, r5
 800aa0a:	bf28      	it	cs
 800aa0c:	4632      	movcs	r2, r6
 800aa0e:	f7ff fc37 	bl	800a280 <memcpy>
 800aa12:	4629      	mov	r1, r5
 800aa14:	4638      	mov	r0, r7
 800aa16:	f000 f82b 	bl	800aa70 <_free_r>
 800aa1a:	e7f1      	b.n	800aa00 <_realloc_r+0x40>

0800aa1c <memmove>:
 800aa1c:	4288      	cmp	r0, r1
 800aa1e:	b510      	push	{r4, lr}
 800aa20:	eb01 0402 	add.w	r4, r1, r2
 800aa24:	d902      	bls.n	800aa2c <memmove+0x10>
 800aa26:	4284      	cmp	r4, r0
 800aa28:	4623      	mov	r3, r4
 800aa2a:	d807      	bhi.n	800aa3c <memmove+0x20>
 800aa2c:	1e43      	subs	r3, r0, #1
 800aa2e:	42a1      	cmp	r1, r4
 800aa30:	d008      	beq.n	800aa44 <memmove+0x28>
 800aa32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa3a:	e7f8      	b.n	800aa2e <memmove+0x12>
 800aa3c:	4402      	add	r2, r0
 800aa3e:	4601      	mov	r1, r0
 800aa40:	428a      	cmp	r2, r1
 800aa42:	d100      	bne.n	800aa46 <memmove+0x2a>
 800aa44:	bd10      	pop	{r4, pc}
 800aa46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa4e:	e7f7      	b.n	800aa40 <memmove+0x24>

0800aa50 <_sbrk_r>:
 800aa50:	b538      	push	{r3, r4, r5, lr}
 800aa52:	4d06      	ldr	r5, [pc, #24]	@ (800aa6c <_sbrk_r+0x1c>)
 800aa54:	2300      	movs	r3, #0
 800aa56:	4604      	mov	r4, r0
 800aa58:	4608      	mov	r0, r1
 800aa5a:	602b      	str	r3, [r5, #0]
 800aa5c:	f7f8 f9ba 	bl	8002dd4 <_sbrk>
 800aa60:	1c43      	adds	r3, r0, #1
 800aa62:	d102      	bne.n	800aa6a <_sbrk_r+0x1a>
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	b103      	cbz	r3, 800aa6a <_sbrk_r+0x1a>
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	2000529c 	.word	0x2000529c

0800aa70 <_free_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	4605      	mov	r5, r0
 800aa74:	2900      	cmp	r1, #0
 800aa76:	d041      	beq.n	800aafc <_free_r+0x8c>
 800aa78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa7c:	1f0c      	subs	r4, r1, #4
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	bfb8      	it	lt
 800aa82:	18e4      	addlt	r4, r4, r3
 800aa84:	f7ff ff90 	bl	800a9a8 <__malloc_lock>
 800aa88:	4a1d      	ldr	r2, [pc, #116]	@ (800ab00 <_free_r+0x90>)
 800aa8a:	6813      	ldr	r3, [r2, #0]
 800aa8c:	b933      	cbnz	r3, 800aa9c <_free_r+0x2c>
 800aa8e:	6063      	str	r3, [r4, #4]
 800aa90:	6014      	str	r4, [r2, #0]
 800aa92:	4628      	mov	r0, r5
 800aa94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa98:	f7ff bf8c 	b.w	800a9b4 <__malloc_unlock>
 800aa9c:	42a3      	cmp	r3, r4
 800aa9e:	d908      	bls.n	800aab2 <_free_r+0x42>
 800aaa0:	6820      	ldr	r0, [r4, #0]
 800aaa2:	1821      	adds	r1, r4, r0
 800aaa4:	428b      	cmp	r3, r1
 800aaa6:	bf01      	itttt	eq
 800aaa8:	6819      	ldreq	r1, [r3, #0]
 800aaaa:	685b      	ldreq	r3, [r3, #4]
 800aaac:	1809      	addeq	r1, r1, r0
 800aaae:	6021      	streq	r1, [r4, #0]
 800aab0:	e7ed      	b.n	800aa8e <_free_r+0x1e>
 800aab2:	461a      	mov	r2, r3
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	b10b      	cbz	r3, 800aabc <_free_r+0x4c>
 800aab8:	42a3      	cmp	r3, r4
 800aaba:	d9fa      	bls.n	800aab2 <_free_r+0x42>
 800aabc:	6811      	ldr	r1, [r2, #0]
 800aabe:	1850      	adds	r0, r2, r1
 800aac0:	42a0      	cmp	r0, r4
 800aac2:	d10b      	bne.n	800aadc <_free_r+0x6c>
 800aac4:	6820      	ldr	r0, [r4, #0]
 800aac6:	4401      	add	r1, r0
 800aac8:	1850      	adds	r0, r2, r1
 800aaca:	4283      	cmp	r3, r0
 800aacc:	6011      	str	r1, [r2, #0]
 800aace:	d1e0      	bne.n	800aa92 <_free_r+0x22>
 800aad0:	6818      	ldr	r0, [r3, #0]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	6053      	str	r3, [r2, #4]
 800aad6:	4408      	add	r0, r1
 800aad8:	6010      	str	r0, [r2, #0]
 800aada:	e7da      	b.n	800aa92 <_free_r+0x22>
 800aadc:	d902      	bls.n	800aae4 <_free_r+0x74>
 800aade:	230c      	movs	r3, #12
 800aae0:	602b      	str	r3, [r5, #0]
 800aae2:	e7d6      	b.n	800aa92 <_free_r+0x22>
 800aae4:	6820      	ldr	r0, [r4, #0]
 800aae6:	1821      	adds	r1, r4, r0
 800aae8:	428b      	cmp	r3, r1
 800aaea:	bf04      	itt	eq
 800aaec:	6819      	ldreq	r1, [r3, #0]
 800aaee:	685b      	ldreq	r3, [r3, #4]
 800aaf0:	6063      	str	r3, [r4, #4]
 800aaf2:	bf04      	itt	eq
 800aaf4:	1809      	addeq	r1, r1, r0
 800aaf6:	6021      	streq	r1, [r4, #0]
 800aaf8:	6054      	str	r4, [r2, #4]
 800aafa:	e7ca      	b.n	800aa92 <_free_r+0x22>
 800aafc:	bd38      	pop	{r3, r4, r5, pc}
 800aafe:	bf00      	nop
 800ab00:	20005298 	.word	0x20005298

0800ab04 <_malloc_usable_size_r>:
 800ab04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab08:	1f18      	subs	r0, r3, #4
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	bfbc      	itt	lt
 800ab0e:	580b      	ldrlt	r3, [r1, r0]
 800ab10:	18c0      	addlt	r0, r0, r3
 800ab12:	4770      	bx	lr

0800ab14 <_init>:
 800ab14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab16:	bf00      	nop
 800ab18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab1a:	bc08      	pop	{r3}
 800ab1c:	469e      	mov	lr, r3
 800ab1e:	4770      	bx	lr

0800ab20 <_fini>:
 800ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab22:	bf00      	nop
 800ab24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab26:	bc08      	pop	{r3}
 800ab28:	469e      	mov	lr, r3
 800ab2a:	4770      	bx	lr
