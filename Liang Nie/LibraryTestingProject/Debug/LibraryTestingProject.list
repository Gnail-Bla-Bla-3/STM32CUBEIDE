
LibraryTestingProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a950  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  0800aae0  0800aae0  0000bae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adbc  0800adbc  0000c064  2**0
                  CONTENTS
  4 .ARM          00000008  0800adbc  0800adbc  0000bdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adc4  0800adc4  0000c064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adc4  0800adc4  0000bdc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800adc8  0800adc8  0000bdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800adcc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c064  2**0
                  CONTENTS
 10 .bss          00005238  20000068  20000068  0000c068  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200052a0  200052a0  0000c068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c47e  00000000  00000000  0000c094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ab0  00000000  00000000  00028512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018c0  00000000  00000000  0002bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001363  00000000  00000000  0002d888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000231cf  00000000  00000000  0002ebeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b873  00000000  00000000  00051dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9ae0  00000000  00000000  0006d62d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014710d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007028  00000000  00000000  00147150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0014e178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aac8 	.word	0x0800aac8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800aac8 	.word	0x0800aac8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800088c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000890:	f000 b96a 	b.w	8000b68 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	460c      	mov	r4, r1
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d14e      	bne.n	8000956 <__udivmoddi4+0xaa>
 80008b8:	4694      	mov	ip, r2
 80008ba:	458c      	cmp	ip, r1
 80008bc:	4686      	mov	lr, r0
 80008be:	fab2 f282 	clz	r2, r2
 80008c2:	d962      	bls.n	800098a <__udivmoddi4+0xde>
 80008c4:	b14a      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c6:	f1c2 0320 	rsb	r3, r2, #32
 80008ca:	4091      	lsls	r1, r2
 80008cc:	fa20 f303 	lsr.w	r3, r0, r3
 80008d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d4:	4319      	orrs	r1, r3
 80008d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008de:	fa1f f68c 	uxth.w	r6, ip
 80008e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008ea:	fb07 1114 	mls	r1, r7, r4, r1
 80008ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f2:	fb04 f106 	mul.w	r1, r4, r6
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x64>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000902:	f080 8112 	bcs.w	8000b2a <__udivmoddi4+0x27e>
 8000906:	4299      	cmp	r1, r3
 8000908:	f240 810f 	bls.w	8000b2a <__udivmoddi4+0x27e>
 800090c:	3c02      	subs	r4, #2
 800090e:	4463      	add	r3, ip
 8000910:	1a59      	subs	r1, r3, r1
 8000912:	fa1f f38e 	uxth.w	r3, lr
 8000916:	fbb1 f0f7 	udiv	r0, r1, r7
 800091a:	fb07 1110 	mls	r1, r7, r0, r1
 800091e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000922:	fb00 f606 	mul.w	r6, r0, r6
 8000926:	429e      	cmp	r6, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x94>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000932:	f080 80fc 	bcs.w	8000b2e <__udivmoddi4+0x282>
 8000936:	429e      	cmp	r6, r3
 8000938:	f240 80f9 	bls.w	8000b2e <__udivmoddi4+0x282>
 800093c:	4463      	add	r3, ip
 800093e:	3802      	subs	r0, #2
 8000940:	1b9b      	subs	r3, r3, r6
 8000942:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000946:	2100      	movs	r1, #0
 8000948:	b11d      	cbz	r5, 8000952 <__udivmoddi4+0xa6>
 800094a:	40d3      	lsrs	r3, r2
 800094c:	2200      	movs	r2, #0
 800094e:	e9c5 3200 	strd	r3, r2, [r5]
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000956:	428b      	cmp	r3, r1
 8000958:	d905      	bls.n	8000966 <__udivmoddi4+0xba>
 800095a:	b10d      	cbz	r5, 8000960 <__udivmoddi4+0xb4>
 800095c:	e9c5 0100 	strd	r0, r1, [r5]
 8000960:	2100      	movs	r1, #0
 8000962:	4608      	mov	r0, r1
 8000964:	e7f5      	b.n	8000952 <__udivmoddi4+0xa6>
 8000966:	fab3 f183 	clz	r1, r3
 800096a:	2900      	cmp	r1, #0
 800096c:	d146      	bne.n	80009fc <__udivmoddi4+0x150>
 800096e:	42a3      	cmp	r3, r4
 8000970:	d302      	bcc.n	8000978 <__udivmoddi4+0xcc>
 8000972:	4290      	cmp	r0, r2
 8000974:	f0c0 80f0 	bcc.w	8000b58 <__udivmoddi4+0x2ac>
 8000978:	1a86      	subs	r6, r0, r2
 800097a:	eb64 0303 	sbc.w	r3, r4, r3
 800097e:	2001      	movs	r0, #1
 8000980:	2d00      	cmp	r5, #0
 8000982:	d0e6      	beq.n	8000952 <__udivmoddi4+0xa6>
 8000984:	e9c5 6300 	strd	r6, r3, [r5]
 8000988:	e7e3      	b.n	8000952 <__udivmoddi4+0xa6>
 800098a:	2a00      	cmp	r2, #0
 800098c:	f040 8090 	bne.w	8000ab0 <__udivmoddi4+0x204>
 8000990:	eba1 040c 	sub.w	r4, r1, ip
 8000994:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000998:	fa1f f78c 	uxth.w	r7, ip
 800099c:	2101      	movs	r1, #1
 800099e:	fbb4 f6f8 	udiv	r6, r4, r8
 80009a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009a6:	fb08 4416 	mls	r4, r8, r6, r4
 80009aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ae:	fb07 f006 	mul.w	r0, r7, r6
 80009b2:	4298      	cmp	r0, r3
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x11c>
 80009b6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ba:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x11a>
 80009c0:	4298      	cmp	r0, r3
 80009c2:	f200 80cd 	bhi.w	8000b60 <__udivmoddi4+0x2b4>
 80009c6:	4626      	mov	r6, r4
 80009c8:	1a1c      	subs	r4, r3, r0
 80009ca:	fa1f f38e 	uxth.w	r3, lr
 80009ce:	fbb4 f0f8 	udiv	r0, r4, r8
 80009d2:	fb08 4410 	mls	r4, r8, r0, r4
 80009d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009da:	fb00 f707 	mul.w	r7, r0, r7
 80009de:	429f      	cmp	r7, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x148>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80009ea:	d202      	bcs.n	80009f2 <__udivmoddi4+0x146>
 80009ec:	429f      	cmp	r7, r3
 80009ee:	f200 80b0 	bhi.w	8000b52 <__udivmoddi4+0x2a6>
 80009f2:	4620      	mov	r0, r4
 80009f4:	1bdb      	subs	r3, r3, r7
 80009f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009fa:	e7a5      	b.n	8000948 <__udivmoddi4+0x9c>
 80009fc:	f1c1 0620 	rsb	r6, r1, #32
 8000a00:	408b      	lsls	r3, r1
 8000a02:	fa22 f706 	lsr.w	r7, r2, r6
 8000a06:	431f      	orrs	r7, r3
 8000a08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a10:	ea43 030c 	orr.w	r3, r3, ip
 8000a14:	40f4      	lsrs	r4, r6
 8000a16:	fa00 f801 	lsl.w	r8, r0, r1
 8000a1a:	0c38      	lsrs	r0, r7, #16
 8000a1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a20:	fbb4 fef0 	udiv	lr, r4, r0
 8000a24:	fa1f fc87 	uxth.w	ip, r7
 8000a28:	fb00 441e 	mls	r4, r0, lr, r4
 8000a2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a30:	fb0e f90c 	mul.w	r9, lr, ip
 8000a34:	45a1      	cmp	r9, r4
 8000a36:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3a:	d90a      	bls.n	8000a52 <__udivmoddi4+0x1a6>
 8000a3c:	193c      	adds	r4, r7, r4
 8000a3e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000a42:	f080 8084 	bcs.w	8000b4e <__udivmoddi4+0x2a2>
 8000a46:	45a1      	cmp	r9, r4
 8000a48:	f240 8081 	bls.w	8000b4e <__udivmoddi4+0x2a2>
 8000a4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a50:	443c      	add	r4, r7
 8000a52:	eba4 0409 	sub.w	r4, r4, r9
 8000a56:	fa1f f983 	uxth.w	r9, r3
 8000a5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a6a:	45a4      	cmp	ip, r4
 8000a6c:	d907      	bls.n	8000a7e <__udivmoddi4+0x1d2>
 8000a6e:	193c      	adds	r4, r7, r4
 8000a70:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000a74:	d267      	bcs.n	8000b46 <__udivmoddi4+0x29a>
 8000a76:	45a4      	cmp	ip, r4
 8000a78:	d965      	bls.n	8000b46 <__udivmoddi4+0x29a>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	443c      	add	r4, r7
 8000a7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a82:	fba0 9302 	umull	r9, r3, r0, r2
 8000a86:	eba4 040c 	sub.w	r4, r4, ip
 8000a8a:	429c      	cmp	r4, r3
 8000a8c:	46ce      	mov	lr, r9
 8000a8e:	469c      	mov	ip, r3
 8000a90:	d351      	bcc.n	8000b36 <__udivmoddi4+0x28a>
 8000a92:	d04e      	beq.n	8000b32 <__udivmoddi4+0x286>
 8000a94:	b155      	cbz	r5, 8000aac <__udivmoddi4+0x200>
 8000a96:	ebb8 030e 	subs.w	r3, r8, lr
 8000a9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000aa2:	40cb      	lsrs	r3, r1
 8000aa4:	431e      	orrs	r6, r3
 8000aa6:	40cc      	lsrs	r4, r1
 8000aa8:	e9c5 6400 	strd	r6, r4, [r5]
 8000aac:	2100      	movs	r1, #0
 8000aae:	e750      	b.n	8000952 <__udivmoddi4+0xa6>
 8000ab0:	f1c2 0320 	rsb	r3, r2, #32
 8000ab4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ab8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000abc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ac0:	4094      	lsls	r4, r2
 8000ac2:	430c      	orrs	r4, r1
 8000ac4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000acc:	fa1f f78c 	uxth.w	r7, ip
 8000ad0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ad4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ad8:	0c23      	lsrs	r3, r4, #16
 8000ada:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ade:	fb00 f107 	mul.w	r1, r0, r7
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0x24c>
 8000ae6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aea:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000aee:	d22c      	bcs.n	8000b4a <__udivmoddi4+0x29e>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	d92a      	bls.n	8000b4a <__udivmoddi4+0x29e>
 8000af4:	3802      	subs	r0, #2
 8000af6:	4463      	add	r3, ip
 8000af8:	1a5b      	subs	r3, r3, r1
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b00:	fb08 3311 	mls	r3, r8, r1, r3
 8000b04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b08:	fb01 f307 	mul.w	r3, r1, r7
 8000b0c:	42a3      	cmp	r3, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x276>
 8000b10:	eb1c 0404 	adds.w	r4, ip, r4
 8000b14:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b18:	d213      	bcs.n	8000b42 <__udivmoddi4+0x296>
 8000b1a:	42a3      	cmp	r3, r4
 8000b1c:	d911      	bls.n	8000b42 <__udivmoddi4+0x296>
 8000b1e:	3902      	subs	r1, #2
 8000b20:	4464      	add	r4, ip
 8000b22:	1ae4      	subs	r4, r4, r3
 8000b24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b28:	e739      	b.n	800099e <__udivmoddi4+0xf2>
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	e6f0      	b.n	8000910 <__udivmoddi4+0x64>
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e706      	b.n	8000940 <__udivmoddi4+0x94>
 8000b32:	45c8      	cmp	r8, r9
 8000b34:	d2ae      	bcs.n	8000a94 <__udivmoddi4+0x1e8>
 8000b36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b3e:	3801      	subs	r0, #1
 8000b40:	e7a8      	b.n	8000a94 <__udivmoddi4+0x1e8>
 8000b42:	4631      	mov	r1, r6
 8000b44:	e7ed      	b.n	8000b22 <__udivmoddi4+0x276>
 8000b46:	4603      	mov	r3, r0
 8000b48:	e799      	b.n	8000a7e <__udivmoddi4+0x1d2>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e7d4      	b.n	8000af8 <__udivmoddi4+0x24c>
 8000b4e:	46d6      	mov	lr, sl
 8000b50:	e77f      	b.n	8000a52 <__udivmoddi4+0x1a6>
 8000b52:	4463      	add	r3, ip
 8000b54:	3802      	subs	r0, #2
 8000b56:	e74d      	b.n	80009f4 <__udivmoddi4+0x148>
 8000b58:	4606      	mov	r6, r0
 8000b5a:	4623      	mov	r3, r4
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e70f      	b.n	8000980 <__udivmoddi4+0xd4>
 8000b60:	3e02      	subs	r6, #2
 8000b62:	4463      	add	r3, ip
 8000b64:	e730      	b.n	80009c8 <__udivmoddi4+0x11c>
 8000b66:	bf00      	nop

08000b68 <__aeabi_idiv0>:
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <processData>:

/*
 * Takes the 6 unsigned 8 Bit ints received from IST8310 and combines them into 3 SIGNED 16 bit ints
 * No need to do the matrix thing as the chip does it for us thank god
 */
void processData(int16_t processedData[3], uint8_t unprocessedData[6]) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 3; i++) {
 8000b76:	2300      	movs	r3, #0
 8000b78:	73fb      	strb	r3, [r7, #15]
 8000b7a:	e034      	b.n	8000be6 <processData+0x7a>
		// memcpy(&processedData[i], &unprocessedData[i*2], 2);
		processedData[i] = 0;
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	4413      	add	r3, r2
 8000b84:	2200      	movs	r2, #0
 8000b86:	801a      	strh	r2, [r3, #0]
		processedData[i] += unprocessedData[i*2];
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	7bfa      	ldrb	r2, [r7, #15]
 8000b98:	0052      	lsls	r2, r2, #1
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	440a      	add	r2, r1
 8000ba0:	7812      	ldrb	r2, [r2, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	b299      	uxth	r1, r3
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	b20a      	sxth	r2, r1
 8000bb0:	801a      	strh	r2, [r3, #0]
		processedData[i] += unprocessedData[(i*2)+1] << 8;
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	6839      	ldr	r1, [r7, #0]
 8000bc8:	440b      	add	r3, r1
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	021b      	lsls	r3, r3, #8
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	4413      	add	r3, r2
 8000bd2:	b299      	uxth	r1, r3
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	b20a      	sxth	r2, r1
 8000bde:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < 3; i++) {
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	3301      	adds	r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d9c7      	bls.n	8000b7c <processData+0x10>
	}
	// usart_printf("%d %d %d\r\n", processedData[0], processedData[1], processedData[2]);
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <IST8310_Init>:
 * Next this function Reads the "Who Am I" byte to the "Who Am I" Register
 * If IST8310 is receiving properly, it'll return with 0x10, else it will return 0x00, whuch means it isn't receiving
 *
 * Funally, it send the Optimization command to Optimize the chip... the documentation told us to do it so we did :)
 */
void IST8310_Init(I2C_HandleTypeDef *i2c) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af04      	add	r7, sp, #16
 8000c02:	6078      	str	r0, [r7, #4]

	// Sets Pointer for later access to this library
	i2c3 = i2c;
 8000c04:	4a20      	ldr	r2, [pc, #128]	@ (8000c88 <IST8310_Init+0x8c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]

	uint8_t whoAmI = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2140      	movs	r1, #64	@ 0x40
 8000c12:	481e      	ldr	r0, [pc, #120]	@ (8000c8c <IST8310_Init+0x90>)
 8000c14:	f003 f88a 	bl	8003d2c <HAL_GPIO_WritePin>
	HAL_Delay(6);
 8000c18:	2006      	movs	r0, #6
 8000c1a:	f002 f99b 	bl	8002f54 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, 1);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	2140      	movs	r1, #64	@ 0x40
 8000c22:	481a      	ldr	r0, [pc, #104]	@ (8000c8c <IST8310_Init+0x90>)
 8000c24:	f003 f882 	bl	8003d2c <HAL_GPIO_WritePin>
	HAL_Delay(6);
 8000c28:	2006      	movs	r0, #6
 8000c2a:	f002 f993 	bl	8002f54 <HAL_Delay>

	// Checks if the Magnometer is Reponding
	HAL_I2C_Mem_Read(i2c3, IST8310_SLAVE_ADDRESS_8BIT, IST8310_WHO_AM_I_REGISTER, 1, &whoAmI, 1, 50);
 8000c2e:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <IST8310_Init+0x8c>)
 8000c30:	6818      	ldr	r0, [r3, #0]
 8000c32:	2332      	movs	r3, #50	@ 0x32
 8000c34:	9302      	str	r3, [sp, #8]
 8000c36:	2301      	movs	r3, #1
 8000c38:	9301      	str	r3, [sp, #4]
 8000c3a:	f107 030f 	add.w	r3, r7, #15
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	2301      	movs	r3, #1
 8000c42:	2200      	movs	r2, #0
 8000c44:	211c      	movs	r1, #28
 8000c46:	f003 fac9 	bl	80041dc <HAL_I2C_Mem_Read>
	if (whoAmI != 0x10) {
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	2b10      	cmp	r3, #16
 8000c4e:	d116      	bne.n	8000c7e <IST8310_Init+0x82>
		// usart_printf("Magnometer Not Responding!! \r\n");
		return 0;
	}
	HAL_Delay(6);
 8000c50:	2006      	movs	r0, #6
 8000c52:	f002 f97f 	bl	8002f54 <HAL_Delay>

	// Performance Optimization
	uint8_t OptimizationDataToSend = 0xC0;
 8000c56:	23c0      	movs	r3, #192	@ 0xc0
 8000c58:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(i2c3, IST8310_SLAVE_ADDRESS_8BIT, IST8310_PULSE_DURATION_CONTROL_REGISTER, 1, &OptimizationDataToSend, 1, 50);
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <IST8310_Init+0x8c>)
 8000c5c:	6818      	ldr	r0, [r3, #0]
 8000c5e:	2332      	movs	r3, #50	@ 0x32
 8000c60:	9302      	str	r3, [sp, #8]
 8000c62:	2301      	movs	r3, #1
 8000c64:	9301      	str	r3, [sp, #4]
 8000c66:	f107 030e 	add.w	r3, r7, #14
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	2242      	movs	r2, #66	@ 0x42
 8000c70:	211c      	movs	r1, #28
 8000c72:	f003 f9b9 	bl	8003fe8 <HAL_I2C_Mem_Write>
	HAL_Delay(6);
 8000c76:	2006      	movs	r0, #6
 8000c78:	f002 f96c 	bl	8002f54 <HAL_Delay>
 8000c7c:	e000      	b.n	8000c80 <IST8310_Init+0x84>
		return 0;
 8000c7e:	bf00      	nop


}
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000084 	.word	0x20000084
 8000c8c:	40021800 	.word	0x40021800

08000c90 <IST8310_Update>:
 * Next it reads all 6 registers on the chip such that it used by the user.
 * Do note the "IST8310_OUTPUT_VALUE_X_TO_Z" is the register address for X_LOW but because all the register addresses are beside each other, we can read them all with a 6 byte array
 *
 * Finally, the function proccesses the data such that it is usable for the general user
 */
void IST8310_Update() {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af04      	add	r7, sp, #16

	if (IST8310_WriteSent == 0) {
 8000c96:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <IST8310_Update+0x78>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d111      	bne.n	8000cc2 <IST8310_Update+0x32>
		uint8_t SMMDataToSend = 0x01;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Mem_Write(i2c3, IST8310_SLAVE_ADDRESS_8BIT, IST8310_CONTROL_REGISTER_1, 1, &SMMDataToSend, 1, 50);
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <IST8310_Update+0x7c>)
 8000ca4:	6818      	ldr	r0, [r3, #0]
 8000ca6:	2332      	movs	r3, #50	@ 0x32
 8000ca8:	9302      	str	r3, [sp, #8]
 8000caa:	2301      	movs	r3, #1
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	220a      	movs	r2, #10
 8000cb6:	211c      	movs	r1, #28
 8000cb8:	f003 f996 	bl	8003fe8 <HAL_I2C_Mem_Write>
		IST8310_WriteSent = 1;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <IST8310_Update+0x78>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == 1 && IST8310_WriteSent == 1) {
 8000cc2:	2108      	movs	r1, #8
 8000cc4:	4812      	ldr	r0, [pc, #72]	@ (8000d10 <IST8310_Update+0x80>)
 8000cc6:	f003 f819 	bl	8003cfc <HAL_GPIO_ReadPin>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d117      	bne.n	8000d00 <IST8310_Update+0x70>
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d08 <IST8310_Update+0x78>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d113      	bne.n	8000d00 <IST8310_Update+0x70>
		HAL_I2C_Mem_Read(i2c3, IST8310_SLAVE_ADDRESS_8BIT, IST8310_OUTPUT_VALUE_X_TO_Z, 1, XtoZOutputValues, 6, 50);
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <IST8310_Update+0x7c>)
 8000cda:	6818      	ldr	r0, [r3, #0]
 8000cdc:	2332      	movs	r3, #50	@ 0x32
 8000cde:	9302      	str	r3, [sp, #8]
 8000ce0:	2306      	movs	r3, #6
 8000ce2:	9301      	str	r3, [sp, #4]
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <IST8310_Update+0x84>)
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2301      	movs	r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	211c      	movs	r1, #28
 8000cee:	f003 fa75 	bl	80041dc <HAL_I2C_Mem_Read>
		processData(processedValues, XtoZOutputValues);
 8000cf2:	4908      	ldr	r1, [pc, #32]	@ (8000d14 <IST8310_Update+0x84>)
 8000cf4:	4808      	ldr	r0, [pc, #32]	@ (8000d18 <IST8310_Update+0x88>)
 8000cf6:	f7ff ff39 	bl	8000b6c <processData>
		IST8310_WriteSent = 0;
 8000cfa:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <IST8310_Update+0x78>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]

	// osDelay(6);

	// processData(processedValues, XtoZOutputValues);

}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000088 	.word	0x20000088
 8000d0c:	20000084 	.word	0x20000084
 8000d10:	40021800 	.word	0x40021800
 8000d14:	2000008c 	.word	0x2000008c
 8000d18:	20000094 	.word	0x20000094

08000d1c <getIST8310_X>:

/*
 * Kind of obvioous, if you don't know what's happening with these 3 functions, ask Liang
 */
int16_t getIST8310_X() {
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
	return processedValues[0];
 8000d20:	4b03      	ldr	r3, [pc, #12]	@ (8000d30 <getIST8310_X+0x14>)
 8000d22:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	20000094 	.word	0x20000094

08000d34 <getIST8310_Y>:

int16_t getIST8310_Y() {
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
	return processedValues[1];
 8000d38:	4b03      	ldr	r3, [pc, #12]	@ (8000d48 <getIST8310_Y+0x14>)
 8000d3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	20000094 	.word	0x20000094

08000d4c <getIST8310_Z>:
int16_t getIST8310_Z() {
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
	return processedValues[2];
 8000d50:	4b03      	ldr	r3, [pc, #12]	@ (8000d60 <getIST8310_Z+0x14>)
 8000d52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	20000094 	.word	0x20000094

08000d64 <Get_CRC16_Check_Sum>:
/*
** Descriptions: CRC16 checksum function
** Input: Data to check,Stream length, initialized checksum
** Output: CRC checksum
*/
uint16_t Get_CRC16_Check_Sum(uint8_t *pchMessage, uint32_t dwLength, uint16_t wCRC){
 8000d64:	b480      	push	{r7}
 8000d66:	b087      	sub	sp, #28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	80fb      	strh	r3, [r7, #6]
	uint8_t chData;

	if (pchMessage == NULL){
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d116      	bne.n	8000da6 <Get_CRC16_Check_Sum+0x42>
		return 0xFFFF;
 8000d78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d7c:	e017      	b.n	8000dae <Get_CRC16_Check_Sum+0x4a>
	}

	while(dwLength>0){
		chData = *pchMessage++;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	1c5a      	adds	r2, r3, #1
 8000d82:	60fa      	str	r2, [r7, #12]
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	75fb      	strb	r3, [r7, #23]
		(wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_Table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	0a1b      	lsrs	r3, r3, #8
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	88f9      	ldrh	r1, [r7, #6]
 8000d90:	7dfb      	ldrb	r3, [r7, #23]
 8000d92:	404b      	eors	r3, r1
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	4909      	ldr	r1, [pc, #36]	@ (8000dbc <Get_CRC16_Check_Sum+0x58>)
 8000d98:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d9c:	4053      	eors	r3, r2
 8000d9e:	80fb      	strh	r3, [r7, #6]
		dwLength--;
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	60bb      	str	r3, [r7, #8]
	while(dwLength>0){
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1e8      	bne.n	8000d7e <Get_CRC16_Check_Sum+0x1a>
	}

	return wCRC;
 8000dac:	88fb      	ldrh	r3, [r7, #6]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	371c      	adds	r7, #28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	0800ab20 	.word	0x0800ab20

08000dc0 <UART_Printf>:
/*
** Descriptions: Send a message in fmt format over chosen uart instance
** Input: UART instance to send over, message to send in fmt format
** Output: message transmitted over uart
*/
void UART_Printf(UART_HandleTypeDef *huart,const char *fmt,...) {
 8000dc0:	b40e      	push	{r1, r2, r3}
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 8000dca:	f107 0318 	add.w	r3, r7, #24
 8000dce:	4a0d      	ldr	r2, [pc, #52]	@ (8000e04 <UART_Printf+0x44>)
 8000dd0:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <UART_Printf+0x44>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	6979      	ldr	r1, [r7, #20]
 8000dd8:	480b      	ldr	r0, [pc, #44]	@ (8000e08 <UART_Printf+0x48>)
 8000dda:	f009 f9eb 	bl	800a1b4 <vsiprintf>
 8000dde:	4603      	mov	r3, r0
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e0c <UART_Printf+0x4c>)
 8000de4:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit(huart, tx_buf, len,100);
 8000de6:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <UART_Printf+0x4c>)
 8000de8:	881a      	ldrh	r2, [r3, #0]
 8000dea:	2364      	movs	r3, #100	@ 0x64
 8000dec:	4906      	ldr	r1, [pc, #24]	@ (8000e08 <UART_Printf+0x48>)
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f005 fa2c 	bl	800624c <HAL_UART_Transmit>
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dfe:	b003      	add	sp, #12
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200004a4 	.word	0x200004a4
 8000e08:	200004a8 	.word	0x200004a8
 8000e0c:	200005a8 	.word	0x200005a8

08000e10 <UART_Ex_Init>:
/*
** Descriptions: Initialize the chosen uart instance using advanced reception service.
** 				 Must be called previously to enable HAL_UARTEx_RxEventCallback function
** Input: Target uart instance
*/
void UART_Ex_Init(UART_HandleTypeDef *huart) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(huart, RxInitBuff, 256);
 8000e18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e1c:	4903      	ldr	r1, [pc, #12]	@ (8000e2c <UART_Ex_Init+0x1c>)
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f005 fa9f 	bl	8006362 <HAL_UARTEx_ReceiveToIdle_DMA>

}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000009c 	.word	0x2000009c

08000e30 <HAL_UARTEx_RxEventCallback>:
/*
** Descriptions: is triggered on recieve
** Input: Data to CRC and append,Stream length = Data + checksum
** Output: True or False (CRC Verify Result)
*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8000e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e34:	b0af      	sub	sp, #188	@ 0xbc
 8000e36:	af12      	add	r7, sp, #72	@ 0x48
 8000e38:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8000e3e:	466b      	mov	r3, sp
 8000e40:	607b      	str	r3, [r7, #4]

	//write uart to RxBuff until idle state
	HAL_UARTEx_ReceiveToIdle_DMA(huart, RxBuff, 256);
 8000e42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e46:	49b3      	ldr	r1, [pc, #716]	@ (8001114 <HAL_UARTEx_RxEventCallback+0x2e4>)
 8000e48:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000e4a:	f005 fa8a 	bl	8006362 <HAL_UARTEx_ReceiveToIdle_DMA>

	//parse frame information
	uint16_t cmd_id = ((uint16_t) RxBuff[6] << 8) | RxBuff[5];
 8000e4e:	4bb1      	ldr	r3, [pc, #708]	@ (8001114 <HAL_UARTEx_RxEventCallback+0x2e4>)
 8000e50:	799b      	ldrb	r3, [r3, #6]
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	4baf      	ldr	r3, [pc, #700]	@ (8001114 <HAL_UARTEx_RxEventCallback+0x2e4>)
 8000e58:	795b      	ldrb	r3, [r3, #5]
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
	uint16_t data_length = ((uint16_t) RxBuff[2] << 8) | RxBuff[1];
 8000e64:	4bab      	ldr	r3, [pc, #684]	@ (8001114 <HAL_UARTEx_RxEventCallback+0x2e4>)
 8000e66:	789b      	ldrb	r3, [r3, #2]
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	b21a      	sxth	r2, r3
 8000e6c:	4ba9      	ldr	r3, [pc, #676]	@ (8001114 <HAL_UARTEx_RxEventCallback+0x2e4>)
 8000e6e:	785b      	ldrb	r3, [r3, #1]
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	4313      	orrs	r3, r2
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	uint16_t CRC16 = ((uint16_t) RxBuff[data_length+8] << 8) | RxBuff[data_length+7];
 8000e7a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8000e7e:	3308      	adds	r3, #8
 8000e80:	4aa4      	ldr	r2, [pc, #656]	@ (8001114 <HAL_UARTEx_RxEventCallback+0x2e4>)
 8000e82:	5cd3      	ldrb	r3, [r2, r3]
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8000e8c:	3307      	adds	r3, #7
 8000e8e:	49a1      	ldr	r1, [pc, #644]	@ (8001114 <HAL_UARTEx_RxEventCallback+0x2e4>)
 8000e90:	5ccb      	ldrb	r3, [r1, r3]
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

	//fills transmissionBuffer array with transmission bytes without CRC16
	uint8_t transmissionBuff[data_length+7];
 8000e9c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8000ea0:	1dd9      	adds	r1, r3, #7
 8000ea2:	1e4b      	subs	r3, r1, #1
 8000ea4:	667b      	str	r3, [r7, #100]	@ 0x64
 8000ea6:	460a      	mov	r2, r1
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	633a      	str	r2, [r7, #48]	@ 0x30
 8000eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	f04f 0300 	mov.w	r3, #0
 8000eb6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000eb8:	00c3      	lsls	r3, r0, #3
 8000eba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000ebc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ec0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000ec2:	00c2      	lsls	r2, r0, #3
 8000ec4:	460a      	mov	r2, r1
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	4692      	mov	sl, r2
 8000eca:	469b      	mov	fp, r3
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	f04f 0300 	mov.w	r3, #0
 8000ed4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000ed8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	3307      	adds	r3, #7
 8000ee4:	08db      	lsrs	r3, r3, #3
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	ebad 0d03 	sub.w	sp, sp, r3
 8000eec:	ab12      	add	r3, sp, #72	@ 0x48
 8000eee:	3300      	adds	r3, #0
 8000ef0:	663b      	str	r3, [r7, #96]	@ 0x60
	for(uint16_t i = 0; i<data_length+7;i++){
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8000ef8:	e00c      	b.n	8000f14 <HAL_UARTEx_RxEventCallback+0xe4>
		transmissionBuff[i] = RxBuff[i];
 8000efa:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000efe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000f02:	4984      	ldr	r1, [pc, #528]	@ (8001114 <HAL_UARTEx_RxEventCallback+0x2e4>)
 8000f04:	5c89      	ldrb	r1, [r1, r2]
 8000f06:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f08:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i<data_length+7;i++){
 8000f0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000f0e:	3301      	adds	r3, #1
 8000f10:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8000f14:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8000f18:	1d9a      	adds	r2, r3, #6
 8000f1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	daeb      	bge.n	8000efa <HAL_UARTEx_RxEventCallback+0xca>
	}

	uint16_t expected_CRC16 = Get_CRC16_Check_Sum(transmissionBuff,data_length+7, CRC_INIT);
 8000f22:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8000f26:	3307      	adds	r3, #7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4b7b      	ldr	r3, [pc, #492]	@ (8001118 <HAL_UARTEx_RxEventCallback+0x2e8>)
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000f32:	f7ff ff17 	bl	8000d64 <Get_CRC16_Check_Sum>
 8000f36:	4603      	mov	r3, r0
 8000f38:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e


	if(expected_CRC16 == CRC16){
 8000f3c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8000f40:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8000f44:	429a      	cmp	r2, r3
 8000f46:	f040 87b4 	bne.w	8001eb2 <HAL_UARTEx_RxEventCallback+0x1082>
 8000f4a:	466b      	mov	r3, sp
 8000f4c:	469a      	mov	sl, r3
		//seperate data
		uint8_t data[data_length];
 8000f4e:	f8b7 106a 	ldrh.w	r1, [r7, #106]	@ 0x6a
 8000f52:	460b      	mov	r3, r1
 8000f54:	3b01      	subs	r3, #1
 8000f56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000f58:	b28b      	uxth	r3, r1
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4698      	mov	r8, r3
 8000f5e:	4691      	mov	r9, r2
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f74:	b28b      	uxth	r3, r1
 8000f76:	2200      	movs	r2, #0
 8000f78:	461c      	mov	r4, r3
 8000f7a:	4615      	mov	r5, r2
 8000f7c:	f04f 0200 	mov.w	r2, #0
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	00eb      	lsls	r3, r5, #3
 8000f86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f8a:	00e2      	lsls	r2, r4, #3
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	3307      	adds	r3, #7
 8000f90:	08db      	lsrs	r3, r3, #3
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	ebad 0d03 	sub.w	sp, sp, r3
 8000f98:	ab12      	add	r3, sp, #72	@ 0x48
 8000f9a:	3300      	adds	r3, #0
 8000f9c:	657b      	str	r3, [r7, #84]	@ 0x54
		memcpy(data,&RxBuff[7],data_length);
 8000f9e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	495d      	ldr	r1, [pc, #372]	@ (800111c <HAL_UARTEx_RxEventCallback+0x2ec>)
 8000fa6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000fa8:	f009 f942 	bl	800a230 <memcpy>

		switch (cmd_id) {
 8000fac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8000fb0:	f240 4201 	movw	r2, #1025	@ 0x401
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	f000 876f 	beq.w	8001e98 <HAL_UARTEx_RxEventCallback+0x1068>
 8000fba:	f240 4201 	movw	r2, #1025	@ 0x401
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	f300 8776 	bgt.w	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
 8000fc4:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 8000fc8:	f280 8772 	bge.w	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
 8000fcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000fd0:	dc1c      	bgt.n	800100c <HAL_UARTEx_RxEventCallback+0x1dc>
 8000fd2:	f240 220e 	movw	r2, #526	@ 0x20e
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	f300 876a 	bgt.w	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
 8000fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fe0:	dc2a      	bgt.n	8001038 <HAL_UARTEx_RxEventCallback+0x208>
 8000fe2:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8000fe6:	f280 8763 	bge.w	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
 8000fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fee:	dc47      	bgt.n	8001080 <HAL_UARTEx_RxEventCallback+0x250>
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	f000 80da 	beq.w	80011aa <HAL_UARTEx_RxEventCallback+0x37a>
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	f300 875a 	bgt.w	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	f000 808f 	beq.w	8001120 <HAL_UARTEx_RxEventCallback+0x2f0>
 8001002:	2b02      	cmp	r3, #2
 8001004:	f000 80c6 	beq.w	8001194 <HAL_UARTEx_RxEventCallback+0x364>
 8001008:	f000 bf52 	b.w	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
 800100c:	f2a3 3301 	subw	r3, r3, #769	@ 0x301
 8001010:	2b06      	cmp	r3, #6
 8001012:	f200 874d 	bhi.w	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
 8001016:	a201      	add	r2, pc, #4	@ (adr r2, 800101c <HAL_UARTEx_RxEventCallback+0x1ec>)
 8001018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101c:	08001eb1 	.word	0x08001eb1
 8001020:	08001af3 	.word	0x08001af3
 8001024:	08001b19 	.word	0x08001b19
 8001028:	08001b89 	.word	0x08001b89
 800102c:	08001eb1 	.word	0x08001eb1
 8001030:	08001eb1 	.word	0x08001eb1
 8001034:	08001de5 	.word	0x08001de5
 8001038:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 800103c:	2b0d      	cmp	r3, #13
 800103e:	f200 8737 	bhi.w	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
 8001042:	a201      	add	r2, pc, #4	@ (adr r2, 8001048 <HAL_UARTEx_RxEventCallback+0x218>)
 8001044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001048:	080014c9 	.word	0x080014c9
 800104c:	080015d7 	.word	0x080015d7
 8001050:	0800161f 	.word	0x0800161f
 8001054:	08001663 	.word	0x08001663
 8001058:	08001eb1 	.word	0x08001eb1
 800105c:	080016c5 	.word	0x080016c5
 8001060:	08001703 	.word	0x08001703
 8001064:	08001761 	.word	0x08001761
 8001068:	08001797 	.word	0x08001797
 800106c:	080017ad 	.word	0x080017ad
 8001070:	080017e1 	.word	0x080017e1
 8001074:	08001899 	.word	0x08001899
 8001078:	08001939 	.word	0x08001939
 800107c:	08001ab5 	.word	0x08001ab5
 8001080:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8001084:	2b20      	cmp	r3, #32
 8001086:	f200 8713 	bhi.w	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
 800108a:	a201      	add	r2, pc, #4	@ (adr r2, 8001090 <HAL_UARTEx_RxEventCallback+0x260>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	080012cd 	.word	0x080012cd
 8001094:	08001eb1 	.word	0x08001eb1
 8001098:	08001eb1 	.word	0x08001eb1
 800109c:	08001427 	.word	0x08001427
 80010a0:	08001459 	.word	0x08001459
 80010a4:	08001eb1 	.word	0x08001eb1
 80010a8:	08001eb1 	.word	0x08001eb1
 80010ac:	08001eb1 	.word	0x08001eb1
 80010b0:	08001eb1 	.word	0x08001eb1
 80010b4:	08001eb1 	.word	0x08001eb1
 80010b8:	08001eb1 	.word	0x08001eb1
 80010bc:	08001eb1 	.word	0x08001eb1
 80010c0:	08001eb1 	.word	0x08001eb1
 80010c4:	08001eb1 	.word	0x08001eb1
 80010c8:	08001eb1 	.word	0x08001eb1
 80010cc:	08001eb1 	.word	0x08001eb1
 80010d0:	08001eb1 	.word	0x08001eb1
 80010d4:	08001eb1 	.word	0x08001eb1
 80010d8:	08001eb1 	.word	0x08001eb1
 80010dc:	08001eb1 	.word	0x08001eb1
 80010e0:	08001eb1 	.word	0x08001eb1
 80010e4:	08001eb1 	.word	0x08001eb1
 80010e8:	08001eb1 	.word	0x08001eb1
 80010ec:	08001eb1 	.word	0x08001eb1
 80010f0:	08001eb1 	.word	0x08001eb1
 80010f4:	08001eb1 	.word	0x08001eb1
 80010f8:	08001eb1 	.word	0x08001eb1
 80010fc:	08001eb1 	.word	0x08001eb1
 8001100:	08001eb1 	.word	0x08001eb1
 8001104:	08001eb1 	.word	0x08001eb1
 8001108:	08001eb1 	.word	0x08001eb1
 800110c:	08001eb1 	.word	0x08001eb1
 8001110:	08001eb1 	.word	0x08001eb1
 8001114:	2000019c 	.word	0x2000019c
 8001118:	20000000 	.word	0x20000000
 800111c:	200001a3 	.word	0x200001a3
			case GAME_STATUS_HEADER : {
				game_status.game_type = getBits(data[0],0,4);
 8001120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2204      	movs	r2, #4
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fed1 	bl	8001ed0 <getBits>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	4b63      	ldr	r3, [pc, #396]	@ (80012c0 <HAL_UARTEx_RxEventCallback+0x490>)
 8001134:	701a      	strb	r2, [r3, #0]
				game_status.current_stage = getBits(data[0],4,4);
 8001136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2204      	movs	r2, #4
 800113c:	2104      	movs	r1, #4
 800113e:	4618      	mov	r0, r3
 8001140:	f000 fec6 	bl	8001ed0 <getBits>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b5d      	ldr	r3, [pc, #372]	@ (80012c0 <HAL_UARTEx_RxEventCallback+0x490>)
 800114a:	705a      	strb	r2, [r3, #1]
				memcpy(&game_status.stage_remain_time,&data[1],2);
 800114c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800114e:	3301      	adds	r3, #1
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b5a      	ldr	r3, [pc, #360]	@ (80012c0 <HAL_UARTEx_RxEventCallback+0x490>)
 8001156:	809a      	strh	r2, [r3, #4]
				memcpy(&game_status.SyncTimeStamp,&data[3],8);
 8001158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800115a:	3303      	adds	r3, #3
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001164:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001168:	4955      	ldr	r1, [pc, #340]	@ (80012c0 <HAL_UARTEx_RxEventCallback+0x490>)
 800116a:	e9c1 2302 	strd	r2, r3, [r1, #8]
				GAME_STATUS_RxEventCallback(game_status.game_type,game_status.current_stage,game_status.game_progress,game_status.stage_remain_time,game_status.SyncTimeStamp);
 800116e:	4b54      	ldr	r3, [pc, #336]	@ (80012c0 <HAL_UARTEx_RxEventCallback+0x490>)
 8001170:	7818      	ldrb	r0, [r3, #0]
 8001172:	4b53      	ldr	r3, [pc, #332]	@ (80012c0 <HAL_UARTEx_RxEventCallback+0x490>)
 8001174:	7859      	ldrb	r1, [r3, #1]
 8001176:	4b52      	ldr	r3, [pc, #328]	@ (80012c0 <HAL_UARTEx_RxEventCallback+0x490>)
 8001178:	789c      	ldrb	r4, [r3, #2]
 800117a:	4b51      	ldr	r3, [pc, #324]	@ (80012c0 <HAL_UARTEx_RxEventCallback+0x490>)
 800117c:	889d      	ldrh	r5, [r3, #4]
 800117e:	4b50      	ldr	r3, [pc, #320]	@ (80012c0 <HAL_UARTEx_RxEventCallback+0x490>)
 8001180:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001184:	e9cd 2300 	strd	r2, r3, [sp]
 8001188:	462b      	mov	r3, r5
 800118a:	4622      	mov	r2, r4
 800118c:	f000 fecd 	bl	8001f2a <GAME_STATUS_RxEventCallback>
				break;
 8001190:	f000 be8e 	b.w	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
			}
			case GAME_RESULT_HEADER : {
				game_result.winner=data[0];
 8001194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	4b4a      	ldr	r3, [pc, #296]	@ (80012c4 <HAL_UARTEx_RxEventCallback+0x494>)
 800119a:	701a      	strb	r2, [r3, #0]
				GAME_RESULT_RxEventCallback(game_result.winner);
 800119c:	4b49      	ldr	r3, [pc, #292]	@ (80012c4 <HAL_UARTEx_RxEventCallback+0x494>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fed6 	bl	8001f52 <GAME_RESULT_RxEventCallback>
				break;
 80011a6:	f000 be83 	b.w	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
			}
			case ROBOT_HP_HEADER : {
				memcpy(&robot_HP.red_1_robot_HP,&data[0],2);
 80011aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	4b45      	ldr	r3, [pc, #276]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 80011b2:	801a      	strh	r2, [r3, #0]
				memcpy(&robot_HP.red_2_robot_HP,&data[2],2);
 80011b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011b6:	3302      	adds	r3, #2
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b42      	ldr	r3, [pc, #264]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 80011be:	805a      	strh	r2, [r3, #2]
				memcpy(&robot_HP.red_3_robot_HP,&data[4],2);
 80011c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011c2:	3304      	adds	r3, #4
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b3f      	ldr	r3, [pc, #252]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 80011ca:	809a      	strh	r2, [r3, #4]
				memcpy(&robot_HP.red_4_robot_HP,&data[6],2);
 80011cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011ce:	3306      	adds	r3, #6
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	4b3c      	ldr	r3, [pc, #240]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 80011d6:	80da      	strh	r2, [r3, #6]
				memcpy(&robot_HP.red_7_robot_HP,&data[10],2);
 80011d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011da:	330a      	adds	r3, #10
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	4b39      	ldr	r3, [pc, #228]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 80011e2:	811a      	strh	r2, [r3, #8]
				memcpy(&robot_HP.red_outpost_HP,&data[12],2);
 80011e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011e6:	330c      	adds	r3, #12
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b36      	ldr	r3, [pc, #216]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 80011ee:	815a      	strh	r2, [r3, #10]
				memcpy(&robot_HP.red_base_HP,&data[14],2);
 80011f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011f2:	330e      	adds	r3, #14
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b33      	ldr	r3, [pc, #204]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 80011fa:	819a      	strh	r2, [r3, #12]
				memcpy(&robot_HP.blue_1_robot_HP,&data[16],2);
 80011fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011fe:	3310      	adds	r3, #16
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	b29a      	uxth	r2, r3
 8001204:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 8001206:	81da      	strh	r2, [r3, #14]
				memcpy(&robot_HP.blue_2_robot_HP,&data[18],2);
 8001208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800120a:	3312      	adds	r3, #18
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	b29a      	uxth	r2, r3
 8001210:	4b2d      	ldr	r3, [pc, #180]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 8001212:	821a      	strh	r2, [r3, #16]
				memcpy(&robot_HP.blue_3_robot_HP,&data[20],2);
 8001214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001216:	3314      	adds	r3, #20
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	b29a      	uxth	r2, r3
 800121c:	4b2a      	ldr	r3, [pc, #168]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 800121e:	825a      	strh	r2, [r3, #18]
				memcpy(&robot_HP.blue_4_robot_HP,&data[22],2);
 8001220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001222:	3316      	adds	r3, #22
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 800122a:	829a      	strh	r2, [r3, #20]
				memcpy(&robot_HP.blue_7_robot_HP,&data[26],2);
 800122c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800122e:	331a      	adds	r3, #26
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b24      	ldr	r3, [pc, #144]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 8001236:	82da      	strh	r2, [r3, #22]
				memcpy(&robot_HP.blue_outpost_HP,&data[28],2);
 8001238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800123a:	331c      	adds	r3, #28
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	b29a      	uxth	r2, r3
 8001240:	4b21      	ldr	r3, [pc, #132]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 8001242:	831a      	strh	r2, [r3, #24]
				memcpy(&robot_HP.blue_base_HP,&data[30],2);
 8001244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001246:	331e      	adds	r3, #30
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	b29a      	uxth	r2, r3
 800124c:	4b1e      	ldr	r3, [pc, #120]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 800124e:	835a      	strh	r2, [r3, #26]
				ROBOT_HP_HEADER_RxEventCallback(robot_HP.red_1_robot_HP, robot_HP.red_2_robot_HP, robot_HP.red_3_robot_HP, robot_HP.red_4_robot_HP, robot_HP.red_7_robot_HP, robot_HP.red_outpost_HP, robot_HP.red_base_HP, robot_HP.blue_1_robot_HP, robot_HP.blue_2_robot_HP, robot_HP.blue_3_robot_HP, robot_HP.blue_4_robot_HP, robot_HP.blue_7_robot_HP, robot_HP.blue_outpost_HP, robot_HP.blue_base_HP);
 8001250:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 8001252:	f8b3 c000 	ldrh.w	ip, [r3]
 8001256:	4b1c      	ldr	r3, [pc, #112]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 8001258:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 800125c:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 800125e:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001262:	4b19      	ldr	r3, [pc, #100]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 8001264:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8001268:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 800126a:	8918      	ldrh	r0, [r3, #8]
 800126c:	4b16      	ldr	r3, [pc, #88]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 800126e:	895c      	ldrh	r4, [r3, #10]
 8001270:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 8001272:	899d      	ldrh	r5, [r3, #12]
 8001274:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 8001276:	89de      	ldrh	r6, [r3, #14]
 8001278:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 800127a:	8a1b      	ldrh	r3, [r3, #16]
 800127c:	633b      	str	r3, [r7, #48]	@ 0x30
 800127e:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 8001280:	8a5a      	ldrh	r2, [r3, #18]
 8001282:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001284:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 8001286:	8a99      	ldrh	r1, [r3, #20]
 8001288:	6279      	str	r1, [r7, #36]	@ 0x24
 800128a:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 800128c:	8ad9      	ldrh	r1, [r3, #22]
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 8001290:	8b1a      	ldrh	r2, [r3, #24]
 8001292:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x498>)
 8001294:	8b5b      	ldrh	r3, [r3, #26]
 8001296:	9309      	str	r3, [sp, #36]	@ 0x24
 8001298:	9208      	str	r2, [sp, #32]
 800129a:	9107      	str	r1, [sp, #28]
 800129c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800129e:	9106      	str	r1, [sp, #24]
 80012a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012a2:	9205      	str	r2, [sp, #20]
 80012a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012a6:	9304      	str	r3, [sp, #16]
 80012a8:	9603      	str	r6, [sp, #12]
 80012aa:	9502      	str	r5, [sp, #8]
 80012ac:	9401      	str	r4, [sp, #4]
 80012ae:	9000      	str	r0, [sp, #0]
 80012b0:	464b      	mov	r3, r9
 80012b2:	4642      	mov	r2, r8
 80012b4:	4671      	mov	r1, lr
 80012b6:	4660      	mov	r0, ip
 80012b8:	f000 fe56 	bl	8001f68 <ROBOT_HP_HEADER_RxEventCallback>
				break;
 80012bc:	f000 bdf8 	b.w	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
 80012c0:	200002a0 	.word	0x200002a0
 80012c4:	200002b0 	.word	0x200002b0
 80012c8:	200002b4 	.word	0x200002b4
			}
			case EVENT_DATA_HEADER : {
				event_data.resupply_zone_1 = getBits(data[0],0,1);
 80012cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2201      	movs	r2, #1
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fdfb 	bl	8001ed0 <getBits>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	4b77      	ldr	r3, [pc, #476]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 80012e0:	701a      	strb	r2, [r3, #0]
				event_data.resupply_zone_2 = getBits(data[0],1,1);
 80012e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2201      	movs	r2, #1
 80012e8:	2101      	movs	r1, #1
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fdf0 	bl	8001ed0 <getBits>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b71      	ldr	r3, [pc, #452]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 80012f6:	705a      	strb	r2, [r3, #1]
				event_data.resupply_zone_3 = getBits(data[0],2,1);
 80012f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2201      	movs	r2, #1
 80012fe:	2102      	movs	r1, #2
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fde5 	bl	8001ed0 <getBits>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b6c      	ldr	r3, [pc, #432]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 800130c:	709a      	strb	r2, [r3, #2]
				event_data.small_power_rune = getBits(data[0],3,1);
 800130e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2201      	movs	r2, #1
 8001314:	2103      	movs	r1, #3
 8001316:	4618      	mov	r0, r3
 8001318:	f000 fdda 	bl	8001ed0 <getBits>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	4b66      	ldr	r3, [pc, #408]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 8001322:	70da      	strb	r2, [r3, #3]
				event_data.large_power_rune = getBits(data[0],4,1);
 8001324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2201      	movs	r2, #1
 800132a:	2104      	movs	r1, #4
 800132c:	4618      	mov	r0, r3
 800132e:	f000 fdcf 	bl	8001ed0 <getBits>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b61      	ldr	r3, [pc, #388]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 8001338:	711a      	strb	r2, [r3, #4]
				event_data.central_elevated_ground = getBits(data[0],5,2);
 800133a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2202      	movs	r2, #2
 8001340:	2105      	movs	r1, #5
 8001342:	4618      	mov	r0, r3
 8001344:	f000 fdc4 	bl	8001ed0 <getBits>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	4b5b      	ldr	r3, [pc, #364]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 800134e:	715a      	strb	r2, [r3, #5]
				event_data.trapezoid_elevated_ground = getBits(data[0],7,1) | (getBits(data[1],0,1)<<1);
 8001350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2201      	movs	r2, #1
 8001356:	2107      	movs	r1, #7
 8001358:	4618      	mov	r0, r3
 800135a:	f000 fdb9 	bl	8001ed0 <getBits>
 800135e:	4603      	mov	r3, r0
 8001360:	b25c      	sxtb	r4, r3
 8001362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001364:	785b      	ldrb	r3, [r3, #1]
 8001366:	2201      	movs	r2, #1
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fdb0 	bl	8001ed0 <getBits>
 8001370:	4603      	mov	r3, r0
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	b25b      	sxtb	r3, r3
 8001376:	4323      	orrs	r3, r4
 8001378:	b25b      	sxtb	r3, r3
 800137a:	b2da      	uxtb	r2, r3
 800137c:	4b4f      	ldr	r3, [pc, #316]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 800137e:	719a      	strb	r2, [r3, #6]
				uint8_t last_dart_hit[] = {getBits(data[1],1,8),getBits(data[2],0,2)};
 8001380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001382:	785b      	ldrb	r3, [r3, #1]
 8001384:	2208      	movs	r2, #8
 8001386:	2101      	movs	r1, #1
 8001388:	4618      	mov	r0, r3
 800138a:	f000 fda1 	bl	8001ed0 <getBits>
 800138e:	4603      	mov	r3, r0
 8001390:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8001394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001396:	789b      	ldrb	r3, [r3, #2]
 8001398:	2202      	movs	r2, #2
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fd97 	bl	8001ed0 <getBits>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
				memcpy(&event_data.last_dart_hit,last_dart_hit,2);
 80013a8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80013ac:	4b43      	ldr	r3, [pc, #268]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 80013ae:	811a      	strh	r2, [r3, #8]
				event_data.last_dart_hit_target = getBits(data[2],2,3);
 80013b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013b2:	789b      	ldrb	r3, [r3, #2]
 80013b4:	2203      	movs	r2, #3
 80013b6:	2102      	movs	r1, #2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fd89 	bl	8001ed0 <getBits>
 80013be:	4603      	mov	r3, r0
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b3e      	ldr	r3, [pc, #248]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 80013c4:	729a      	strb	r2, [r3, #10]
				event_data.central_buff = getBits(data[2],5,2);
 80013c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013c8:	789b      	ldrb	r3, [r3, #2]
 80013ca:	2202      	movs	r2, #2
 80013cc:	2105      	movs	r1, #5
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 fd7e 	bl	8001ed0 <getBits>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b38      	ldr	r3, [pc, #224]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 80013da:	72da      	strb	r2, [r3, #11]
				EVENT_DATA_RxEventCallback(event_data.resupply_zone_1, event_data.resupply_zone_2, event_data.resupply_zone_3, event_data.small_power_rune, event_data.large_power_rune, event_data.central_elevated_ground, event_data.trapezoid_elevated_ground, event_data.last_dart_hit, event_data.last_dart_hit_target, event_data.central_buff);
 80013dc:	4b37      	ldr	r3, [pc, #220]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 80013de:	781e      	ldrb	r6, [r3, #0]
 80013e0:	4b36      	ldr	r3, [pc, #216]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 80013e2:	f893 c001 	ldrb.w	ip, [r3, #1]
 80013e6:	4b35      	ldr	r3, [pc, #212]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 80013e8:	f893 e002 	ldrb.w	lr, [r3, #2]
 80013ec:	4b33      	ldr	r3, [pc, #204]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 80013ee:	f893 8003 	ldrb.w	r8, [r3, #3]
 80013f2:	4b32      	ldr	r3, [pc, #200]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 80013f4:	791b      	ldrb	r3, [r3, #4]
 80013f6:	4a31      	ldr	r2, [pc, #196]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 80013f8:	7952      	ldrb	r2, [r2, #5]
 80013fa:	4930      	ldr	r1, [pc, #192]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 80013fc:	7989      	ldrb	r1, [r1, #6]
 80013fe:	482f      	ldr	r0, [pc, #188]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 8001400:	8900      	ldrh	r0, [r0, #8]
 8001402:	4c2e      	ldr	r4, [pc, #184]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 8001404:	7aa4      	ldrb	r4, [r4, #10]
 8001406:	4d2d      	ldr	r5, [pc, #180]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x68c>)
 8001408:	7aed      	ldrb	r5, [r5, #11]
 800140a:	9505      	str	r5, [sp, #20]
 800140c:	9404      	str	r4, [sp, #16]
 800140e:	9003      	str	r0, [sp, #12]
 8001410:	9102      	str	r1, [sp, #8]
 8001412:	9201      	str	r2, [sp, #4]
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	4643      	mov	r3, r8
 8001418:	4672      	mov	r2, lr
 800141a:	4661      	mov	r1, ip
 800141c:	4630      	mov	r0, r6
 800141e:	f000 fdb7 	bl	8001f90 <EVENT_DATA_RxEventCallback>
				break;
 8001422:	f000 bd45 	b.w	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
			}
			case REFEREE_WARNING_HEADER : {
				memcpy(&referee_warning.penalty,&data[0],1);
 8001426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001428:	781a      	ldrb	r2, [r3, #0]
 800142a:	4b25      	ldr	r3, [pc, #148]	@ (80014c0 <HAL_UARTEx_RxEventCallback+0x690>)
 800142c:	701a      	strb	r2, [r3, #0]
				memcpy(&referee_warning.offending_robot_id,&data[1],1);
 800142e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001430:	3301      	adds	r3, #1
 8001432:	781a      	ldrb	r2, [r3, #0]
 8001434:	4b22      	ldr	r3, [pc, #136]	@ (80014c0 <HAL_UARTEx_RxEventCallback+0x690>)
 8001436:	705a      	strb	r2, [r3, #1]
				memcpy(&referee_warning.count,&data[2],1);
 8001438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800143a:	3302      	adds	r3, #2
 800143c:	781a      	ldrb	r2, [r3, #0]
 800143e:	4b20      	ldr	r3, [pc, #128]	@ (80014c0 <HAL_UARTEx_RxEventCallback+0x690>)
 8001440:	709a      	strb	r2, [r3, #2]
				REFEREE_WARNING_RxEventCallback(referee_warning.penalty,referee_warning.offending_robot_id,referee_warning.count);
 8001442:	4b1f      	ldr	r3, [pc, #124]	@ (80014c0 <HAL_UARTEx_RxEventCallback+0x690>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	4a1e      	ldr	r2, [pc, #120]	@ (80014c0 <HAL_UARTEx_RxEventCallback+0x690>)
 8001448:	7851      	ldrb	r1, [r2, #1]
 800144a:	4a1d      	ldr	r2, [pc, #116]	@ (80014c0 <HAL_UARTEx_RxEventCallback+0x690>)
 800144c:	7892      	ldrb	r2, [r2, #2]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 fdb2 	bl	8001fb8 <REFEREE_WARNING_RxEventCallback>
				break;
 8001454:	f000 bd2c 	b.w	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
			}
			case DART_INFO_HEADER : {
				memcpy(&dart_info.dart_remaining_time,&data[0],1);
 8001458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800145a:	781a      	ldrb	r2, [r3, #0]
 800145c:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <HAL_UARTEx_RxEventCallback+0x694>)
 800145e:	701a      	strb	r2, [r3, #0]
				dart_info.last_dart_hit_target = getBits(data[1],0,3);
 8001460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001462:	785b      	ldrb	r3, [r3, #1]
 8001464:	2203      	movs	r2, #3
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f000 fd31 	bl	8001ed0 <getBits>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <HAL_UARTEx_RxEventCallback+0x694>)
 8001474:	705a      	strb	r2, [r3, #1]
				dart_info.last_target_hit_count = getBits(data[1],3,3);
 8001476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001478:	785b      	ldrb	r3, [r3, #1]
 800147a:	2203      	movs	r2, #3
 800147c:	2103      	movs	r1, #3
 800147e:	4618      	mov	r0, r3
 8001480:	f000 fd26 	bl	8001ed0 <getBits>
 8001484:	4603      	mov	r3, r0
 8001486:	461a      	mov	r2, r3
 8001488:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <HAL_UARTEx_RxEventCallback+0x694>)
 800148a:	709a      	strb	r2, [r3, #2]
				dart_info.current_dart_target = getBits(data[1],6,2);
 800148c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800148e:	785b      	ldrb	r3, [r3, #1]
 8001490:	2202      	movs	r2, #2
 8001492:	2106      	movs	r1, #6
 8001494:	4618      	mov	r0, r3
 8001496:	f000 fd1b 	bl	8001ed0 <getBits>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <HAL_UARTEx_RxEventCallback+0x694>)
 80014a0:	70da      	strb	r2, [r3, #3]
				DART_INFO_RxEventCallback(dart_info.dart_remaining_time,dart_info.last_dart_hit_target,dart_info.last_target_hit_count, dart_info.current_dart_target);
 80014a2:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <HAL_UARTEx_RxEventCallback+0x694>)
 80014a4:	7818      	ldrb	r0, [r3, #0]
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <HAL_UARTEx_RxEventCallback+0x694>)
 80014a8:	7859      	ldrb	r1, [r3, #1]
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_UARTEx_RxEventCallback+0x694>)
 80014ac:	789a      	ldrb	r2, [r3, #2]
 80014ae:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <HAL_UARTEx_RxEventCallback+0x694>)
 80014b0:	78db      	ldrb	r3, [r3, #3]
 80014b2:	f000 fd90 	bl	8001fd6 <DART_INFO_RxEventCallback>
				break;
 80014b6:	f000 bcfb 	b.w	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
 80014ba:	bf00      	nop
 80014bc:	200002d0 	.word	0x200002d0
 80014c0:	200002dc 	.word	0x200002dc
 80014c4:	200002e0 	.word	0x200002e0
			}
			case ROBOT_STATUS_HEADER : {
				memcpy(&robot_status.robot_id,&data[0],1);
 80014c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	4b9e      	ldr	r3, [pc, #632]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 80014ce:	701a      	strb	r2, [r3, #0]
				memcpy(&robot_status.robot_level,&data[1],1);
 80014d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014d2:	3301      	adds	r3, #1
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	4b9c      	ldr	r3, [pc, #624]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 80014d8:	705a      	strb	r2, [r3, #1]
				memcpy(&robot_status.current_HP,&data[2],2);
 80014da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014dc:	3302      	adds	r3, #2
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	4b99      	ldr	r3, [pc, #612]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 80014e4:	805a      	strh	r2, [r3, #2]
				memcpy(&robot_status.maximum_HP,&data[4],2);
 80014e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014e8:	3304      	adds	r3, #4
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b96      	ldr	r3, [pc, #600]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 80014f0:	809a      	strh	r2, [r3, #4]
				memcpy(&robot_status.shooter_barrel_cooling_value,&data[6],2);
 80014f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014f4:	3306      	adds	r3, #6
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	4b93      	ldr	r3, [pc, #588]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 80014fc:	80da      	strh	r2, [r3, #6]
				memcpy(&robot_status.shooter_barrel_heat_limit,&data[8],2);
 80014fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001500:	3308      	adds	r3, #8
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b90      	ldr	r3, [pc, #576]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 8001508:	811a      	strh	r2, [r3, #8]
				memcpy(&robot_status.chassis_power_limit,&data[10],2);
 800150a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800150c:	330a      	adds	r3, #10
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	b29a      	uxth	r2, r3
 8001512:	4b8d      	ldr	r3, [pc, #564]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 8001514:	815a      	strh	r2, [r3, #10]
				robot_status.power_management_gimbal_output = getBits(data[12],0,1);
 8001516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001518:	7b1b      	ldrb	r3, [r3, #12]
 800151a:	2201      	movs	r2, #1
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f000 fcd6 	bl	8001ed0 <getBits>
 8001524:	4603      	mov	r3, r0
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	b2d9      	uxtb	r1, r3
 800152c:	4a86      	ldr	r2, [pc, #536]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 800152e:	7b13      	ldrb	r3, [r2, #12]
 8001530:	f361 0300 	bfi	r3, r1, #0, #1
 8001534:	7313      	strb	r3, [r2, #12]
				robot_status.power_management_chassis_output = getBits(data[12],1,1);
 8001536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001538:	7b1b      	ldrb	r3, [r3, #12]
 800153a:	2201      	movs	r2, #1
 800153c:	2101      	movs	r1, #1
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fcc6 	bl	8001ed0 <getBits>
 8001544:	4603      	mov	r3, r0
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	b2d9      	uxtb	r1, r3
 800154c:	4a7e      	ldr	r2, [pc, #504]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 800154e:	7b13      	ldrb	r3, [r2, #12]
 8001550:	f361 0341 	bfi	r3, r1, #1, #1
 8001554:	7313      	strb	r3, [r2, #12]
				robot_status.power_management_shooter_output = getBits(data[12],2,1);
 8001556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001558:	7b1b      	ldrb	r3, [r3, #12]
 800155a:	2201      	movs	r2, #1
 800155c:	2102      	movs	r1, #2
 800155e:	4618      	mov	r0, r3
 8001560:	f000 fcb6 	bl	8001ed0 <getBits>
 8001564:	4603      	mov	r3, r0
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	b2d9      	uxtb	r1, r3
 800156c:	4a76      	ldr	r2, [pc, #472]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 800156e:	7b13      	ldrb	r3, [r2, #12]
 8001570:	f361 0382 	bfi	r3, r1, #2, #1
 8001574:	7313      	strb	r3, [r2, #12]
				ROBOT_STATUS_RxEventCallback(robot_status.robot_id, robot_status.robot_level, robot_status.current_HP, robot_status.maximum_HP, robot_status.shooter_barrel_cooling_value, robot_status.shooter_barrel_heat_limit, robot_status.chassis_power_limit, robot_status.power_management_gimbal_output, robot_status.power_management_chassis_output, robot_status.power_management_shooter_output);
 8001576:	4b74      	ldr	r3, [pc, #464]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 8001578:	781c      	ldrb	r4, [r3, #0]
 800157a:	4b73      	ldr	r3, [pc, #460]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 800157c:	785d      	ldrb	r5, [r3, #1]
 800157e:	4b72      	ldr	r3, [pc, #456]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 8001580:	885e      	ldrh	r6, [r3, #2]
 8001582:	4b71      	ldr	r3, [pc, #452]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 8001584:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 8001588:	4b6f      	ldr	r3, [pc, #444]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 800158a:	88db      	ldrh	r3, [r3, #6]
 800158c:	4a6e      	ldr	r2, [pc, #440]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 800158e:	8912      	ldrh	r2, [r2, #8]
 8001590:	496d      	ldr	r1, [pc, #436]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 8001592:	8949      	ldrh	r1, [r1, #10]
 8001594:	486c      	ldr	r0, [pc, #432]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 8001596:	7b00      	ldrb	r0, [r0, #12]
 8001598:	f3c0 0000 	ubfx	r0, r0, #0, #1
 800159c:	b2c0      	uxtb	r0, r0
 800159e:	6338      	str	r0, [r7, #48]	@ 0x30
 80015a0:	4869      	ldr	r0, [pc, #420]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 80015a2:	7b00      	ldrb	r0, [r0, #12]
 80015a4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80015a8:	b2c0      	uxtb	r0, r0
 80015aa:	62b8      	str	r0, [r7, #40]	@ 0x28
 80015ac:	4866      	ldr	r0, [pc, #408]	@ (8001748 <HAL_UARTEx_RxEventCallback+0x918>)
 80015ae:	7b00      	ldrb	r0, [r0, #12]
 80015b0:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80015b4:	b2c0      	uxtb	r0, r0
 80015b6:	9005      	str	r0, [sp, #20]
 80015b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80015ba:	9004      	str	r0, [sp, #16]
 80015bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80015be:	9003      	str	r0, [sp, #12]
 80015c0:	9102      	str	r1, [sp, #8]
 80015c2:	9201      	str	r2, [sp, #4]
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	4663      	mov	r3, ip
 80015c8:	4632      	mov	r2, r6
 80015ca:	4629      	mov	r1, r5
 80015cc:	4620      	mov	r0, r4
 80015ce:	f000 fd16 	bl	8001ffe <ROBOT_STATUS_RxEventCallback>
				break;
 80015d2:	f000 bc6d 	b.w	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
			}
			case POWER_HEAT_DATA_HEADER : {
				memcpy(&power_heat_data.buffer_energy,&data[8],2);
 80015d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015d8:	3308      	adds	r3, #8
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	b29a      	uxth	r2, r3
 80015de:	4b5b      	ldr	r3, [pc, #364]	@ (800174c <HAL_UARTEx_RxEventCallback+0x91c>)
 80015e0:	801a      	strh	r2, [r3, #0]
				memcpy(&power_heat_data.shooter_17mm_1_barrel_heat,&data[10],2);
 80015e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015e4:	330a      	adds	r3, #10
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4b58      	ldr	r3, [pc, #352]	@ (800174c <HAL_UARTEx_RxEventCallback+0x91c>)
 80015ec:	805a      	strh	r2, [r3, #2]
				memcpy(&power_heat_data.shooter_17mm_2_barrel_heat,&data[12],2);
 80015ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015f0:	330c      	adds	r3, #12
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	4b55      	ldr	r3, [pc, #340]	@ (800174c <HAL_UARTEx_RxEventCallback+0x91c>)
 80015f8:	809a      	strh	r2, [r3, #4]
				memcpy(&power_heat_data.shooter_42mm_barrel_heat,&data[14],2);
 80015fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015fc:	330e      	adds	r3, #14
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b52      	ldr	r3, [pc, #328]	@ (800174c <HAL_UARTEx_RxEventCallback+0x91c>)
 8001604:	80da      	strh	r2, [r3, #6]
				POWER_HEAT_DATA_RxEventCallback(power_heat_data.buffer_energy, power_heat_data.shooter_17mm_1_barrel_heat, power_heat_data.shooter_17mm_2_barrel_heat, power_heat_data.shooter_42mm_barrel_heat);
 8001606:	4b51      	ldr	r3, [pc, #324]	@ (800174c <HAL_UARTEx_RxEventCallback+0x91c>)
 8001608:	8818      	ldrh	r0, [r3, #0]
 800160a:	4b50      	ldr	r3, [pc, #320]	@ (800174c <HAL_UARTEx_RxEventCallback+0x91c>)
 800160c:	8859      	ldrh	r1, [r3, #2]
 800160e:	4b4f      	ldr	r3, [pc, #316]	@ (800174c <HAL_UARTEx_RxEventCallback+0x91c>)
 8001610:	889a      	ldrh	r2, [r3, #4]
 8001612:	4b4e      	ldr	r3, [pc, #312]	@ (800174c <HAL_UARTEx_RxEventCallback+0x91c>)
 8001614:	88db      	ldrh	r3, [r3, #6]
 8001616:	f000 fd06 	bl	8002026 <POWER_HEAT_DATA_RxEventCallback>
				break;
 800161a:	f000 bc49 	b.w	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
			}
			case ROBOT_POSITION_HEADER : {
				memcpy(&robot_position.x,&data[0],4);
 800161e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	4b4a      	ldr	r3, [pc, #296]	@ (8001750 <HAL_UARTEx_RxEventCallback+0x920>)
 8001626:	601a      	str	r2, [r3, #0]
				memcpy(&robot_position.y,&data[0],4);
 8001628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b48      	ldr	r3, [pc, #288]	@ (8001750 <HAL_UARTEx_RxEventCallback+0x920>)
 8001630:	605a      	str	r2, [r3, #4]
				memcpy(&robot_position.angle,&data[0],4);
 8001632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	4b45      	ldr	r3, [pc, #276]	@ (8001750 <HAL_UARTEx_RxEventCallback+0x920>)
 800163a:	609a      	str	r2, [r3, #8]
				ROBOT_POSITION_RxEventCallback(robot_position.x, robot_position.y, robot_position.angle);
 800163c:	4b44      	ldr	r3, [pc, #272]	@ (8001750 <HAL_UARTEx_RxEventCallback+0x920>)
 800163e:	edd3 7a00 	vldr	s15, [r3]
 8001642:	4b43      	ldr	r3, [pc, #268]	@ (8001750 <HAL_UARTEx_RxEventCallback+0x920>)
 8001644:	ed93 7a01 	vldr	s14, [r3, #4]
 8001648:	4b41      	ldr	r3, [pc, #260]	@ (8001750 <HAL_UARTEx_RxEventCallback+0x920>)
 800164a:	edd3 6a02 	vldr	s13, [r3, #8]
 800164e:	eeb0 1a66 	vmov.f32	s2, s13
 8001652:	eef0 0a47 	vmov.f32	s1, s14
 8001656:	eeb0 0a67 	vmov.f32	s0, s15
 800165a:	f000 fcf8 	bl	800204e <ROBOT_POSITION_RxEventCallback>
				break;
 800165e:	f000 bc27 	b.w	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
			}
			case BUFF_HEADER : {
				memcpy(&buffs.recovery_buff,&data[0],1);
 8001662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001664:	781a      	ldrb	r2, [r3, #0]
 8001666:	4b3b      	ldr	r3, [pc, #236]	@ (8001754 <HAL_UARTEx_RxEventCallback+0x924>)
 8001668:	701a      	strb	r2, [r3, #0]
				memcpy(&buffs.cooling_buff,&data[1],1);
 800166a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800166c:	3301      	adds	r3, #1
 800166e:	781a      	ldrb	r2, [r3, #0]
 8001670:	4b38      	ldr	r3, [pc, #224]	@ (8001754 <HAL_UARTEx_RxEventCallback+0x924>)
 8001672:	705a      	strb	r2, [r3, #1]
				memcpy(&buffs.defence_buff,&data[2],1);
 8001674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001676:	3302      	adds	r3, #2
 8001678:	781a      	ldrb	r2, [r3, #0]
 800167a:	4b36      	ldr	r3, [pc, #216]	@ (8001754 <HAL_UARTEx_RxEventCallback+0x924>)
 800167c:	709a      	strb	r2, [r3, #2]
				memcpy(&buffs.vulnerability_buff,&data[3],1);
 800167e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001680:	3303      	adds	r3, #3
 8001682:	781a      	ldrb	r2, [r3, #0]
 8001684:	4b33      	ldr	r3, [pc, #204]	@ (8001754 <HAL_UARTEx_RxEventCallback+0x924>)
 8001686:	70da      	strb	r2, [r3, #3]
				memcpy(&buffs.attack_buff,&data[4],2);
 8001688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800168a:	3304      	adds	r3, #4
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	b29a      	uxth	r2, r3
 8001690:	4b30      	ldr	r3, [pc, #192]	@ (8001754 <HAL_UARTEx_RxEventCallback+0x924>)
 8001692:	809a      	strh	r2, [r3, #4]
				memcpy(&buffs.remaining_energy,&data[5],1);
 8001694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001696:	3305      	adds	r3, #5
 8001698:	781a      	ldrb	r2, [r3, #0]
 800169a:	4b2e      	ldr	r3, [pc, #184]	@ (8001754 <HAL_UARTEx_RxEventCallback+0x924>)
 800169c:	719a      	strb	r2, [r3, #6]
				BUFF_RxEventCallback(buffs.recovery_buff, buffs.cooling_buff, buffs.defence_buff, buffs.vulnerability_buff, buffs.attack_buff, buffs.remaining_energy);
 800169e:	4b2d      	ldr	r3, [pc, #180]	@ (8001754 <HAL_UARTEx_RxEventCallback+0x924>)
 80016a0:	7818      	ldrb	r0, [r3, #0]
 80016a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001754 <HAL_UARTEx_RxEventCallback+0x924>)
 80016a4:	7859      	ldrb	r1, [r3, #1]
 80016a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001754 <HAL_UARTEx_RxEventCallback+0x924>)
 80016a8:	789c      	ldrb	r4, [r3, #2]
 80016aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <HAL_UARTEx_RxEventCallback+0x924>)
 80016ac:	78dd      	ldrb	r5, [r3, #3]
 80016ae:	4b29      	ldr	r3, [pc, #164]	@ (8001754 <HAL_UARTEx_RxEventCallback+0x924>)
 80016b0:	889b      	ldrh	r3, [r3, #4]
 80016b2:	4a28      	ldr	r2, [pc, #160]	@ (8001754 <HAL_UARTEx_RxEventCallback+0x924>)
 80016b4:	7992      	ldrb	r2, [r2, #6]
 80016b6:	9201      	str	r2, [sp, #4]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	462b      	mov	r3, r5
 80016bc:	4622      	mov	r2, r4
 80016be:	f000 fcd5 	bl	800206c <BUFF_RxEventCallback>
				break;
 80016c2:	e3f5      	b.n	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
			}
			case DAMAGE_DATA_HEADER : {
				damage_data.armor_id = getBits(data[0],0,4);
 80016c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2204      	movs	r2, #4
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 fbff 	bl	8001ed0 <getBits>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b20      	ldr	r3, [pc, #128]	@ (8001758 <HAL_UARTEx_RxEventCallback+0x928>)
 80016d8:	701a      	strb	r2, [r3, #0]
				damage_data.HP_deduction_reason = getBits(data[0],4,4);
 80016da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2204      	movs	r2, #4
 80016e0:	2104      	movs	r1, #4
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 fbf4 	bl	8001ed0 <getBits>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <HAL_UARTEx_RxEventCallback+0x928>)
 80016ee:	705a      	strb	r2, [r3, #1]
				DAMAGE_SOURCE_RxEventCallback(damage_data.armor_id, damage_data.HP_deduction_reason);
 80016f0:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <HAL_UARTEx_RxEventCallback+0x928>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4a18      	ldr	r2, [pc, #96]	@ (8001758 <HAL_UARTEx_RxEventCallback+0x928>)
 80016f6:	7852      	ldrb	r2, [r2, #1]
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 fcca 	bl	8002094 <DAMAGE_SOURCE_RxEventCallback>
				break;
 8001700:	e3d6      	b.n	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
			}
			case PROJECTILE_INFO_HEADER : {
				memcpy(&shoot_data.bullet_type,&data[0],1);
 8001702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001704:	781a      	ldrb	r2, [r3, #0]
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <HAL_UARTEx_RxEventCallback+0x92c>)
 8001708:	701a      	strb	r2, [r3, #0]
				memcpy(&shoot_data.shooter_number,&data[1],1);
 800170a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800170c:	3301      	adds	r3, #1
 800170e:	781a      	ldrb	r2, [r3, #0]
 8001710:	4b12      	ldr	r3, [pc, #72]	@ (800175c <HAL_UARTEx_RxEventCallback+0x92c>)
 8001712:	705a      	strb	r2, [r3, #1]
				memcpy(&shoot_data.launching_frequency,&data[2],1);
 8001714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001716:	3302      	adds	r3, #2
 8001718:	781a      	ldrb	r2, [r3, #0]
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <HAL_UARTEx_RxEventCallback+0x92c>)
 800171c:	709a      	strb	r2, [r3, #2]
				memcpy(&shoot_data.initial_speed,&data[3],4);
 800171e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001720:	3303      	adds	r3, #3
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b0d      	ldr	r3, [pc, #52]	@ (800175c <HAL_UARTEx_RxEventCallback+0x92c>)
 8001728:	605a      	str	r2, [r3, #4]
				PROJECTILE_INFO_RxEventCallback(shoot_data.bullet_type, shoot_data.shooter_number, shoot_data.launching_frequency,shoot_data.initial_speed);
 800172a:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <HAL_UARTEx_RxEventCallback+0x92c>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	4a0b      	ldr	r2, [pc, #44]	@ (800175c <HAL_UARTEx_RxEventCallback+0x92c>)
 8001730:	7851      	ldrb	r1, [r2, #1]
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <HAL_UARTEx_RxEventCallback+0x92c>)
 8001734:	7892      	ldrb	r2, [r2, #2]
 8001736:	4809      	ldr	r0, [pc, #36]	@ (800175c <HAL_UARTEx_RxEventCallback+0x92c>)
 8001738:	edd0 7a01 	vldr	s15, [r0, #4]
 800173c:	eeb0 0a67 	vmov.f32	s0, s15
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fcb5 	bl	80020b0 <PROJECTILE_INFO_RxEventCallback>
				break;
 8001746:	e3b3      	b.n	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
 8001748:	200002e4 	.word	0x200002e4
 800174c:	200002f4 	.word	0x200002f4
 8001750:	200002fc 	.word	0x200002fc
 8001754:	20000308 	.word	0x20000308
 8001758:	20000310 	.word	0x20000310
 800175c:	20000314 	.word	0x20000314
			}
			case PROJECTILE_ALLOWANCE_HEADER : {
				memcpy(&projectile_allowance.projectile_allowance_17mm,&data[0],2);
 8001760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	b29a      	uxth	r2, r3
 8001766:	4b6f      	ldr	r3, [pc, #444]	@ (8001924 <HAL_UARTEx_RxEventCallback+0xaf4>)
 8001768:	801a      	strh	r2, [r3, #0]
				memcpy(&projectile_allowance.projectile_allowance_42mm,&data[2],2);
 800176a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800176c:	3302      	adds	r3, #2
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	b29a      	uxth	r2, r3
 8001772:	4b6c      	ldr	r3, [pc, #432]	@ (8001924 <HAL_UARTEx_RxEventCallback+0xaf4>)
 8001774:	805a      	strh	r2, [r3, #2]
				memcpy(&projectile_allowance.remaining_gold_coin,&data[4],2);
 8001776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001778:	3304      	adds	r3, #4
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	b29a      	uxth	r2, r3
 800177e:	4b69      	ldr	r3, [pc, #420]	@ (8001924 <HAL_UARTEx_RxEventCallback+0xaf4>)
 8001780:	809a      	strh	r2, [r3, #4]
				PROJECTILE_ALLOWANCE_RxEventCallback(projectile_allowance.projectile_allowance_17mm, projectile_allowance.projectile_allowance_42mm, projectile_allowance.remaining_gold_coin);
 8001782:	4b68      	ldr	r3, [pc, #416]	@ (8001924 <HAL_UARTEx_RxEventCallback+0xaf4>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	4a67      	ldr	r2, [pc, #412]	@ (8001924 <HAL_UARTEx_RxEventCallback+0xaf4>)
 8001788:	8851      	ldrh	r1, [r2, #2]
 800178a:	4a66      	ldr	r2, [pc, #408]	@ (8001924 <HAL_UARTEx_RxEventCallback+0xaf4>)
 800178c:	8892      	ldrh	r2, [r2, #4]
 800178e:	4618      	mov	r0, r3
 8001790:	f000 fc9f 	bl	80020d2 <PROJECTILE_ALLOWANCE_RxEventCallback>
				break;
 8001794:	e38c      	b.n	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
			}
			case RFID_HEADER : {
				memcpy(&rfid_status.rfid_status,data,4);
 8001796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	4b62      	ldr	r3, [pc, #392]	@ (8001928 <HAL_UARTEx_RxEventCallback+0xaf8>)
 800179e:	601a      	str	r2, [r3, #0]
				RFID_RxEventCallback(rfid_status.rfid_status);
 80017a0:	4b61      	ldr	r3, [pc, #388]	@ (8001928 <HAL_UARTEx_RxEventCallback+0xaf8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fca3 	bl	80020f0 <RFID_RxEventCallback>
				break;
 80017aa:	e381      	b.n	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
			}
			case DART_COMMAND_HEADER : {
				memcpy(&dart_client_cmd.dart_launch_opening_status,&data[0],1);
 80017ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ae:	781a      	ldrb	r2, [r3, #0]
 80017b0:	4b5e      	ldr	r3, [pc, #376]	@ (800192c <HAL_UARTEx_RxEventCallback+0xafc>)
 80017b2:	701a      	strb	r2, [r3, #0]
				memcpy(&dart_client_cmd.target_change_remaining_time,&data[2],2);
 80017b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017b6:	3302      	adds	r3, #2
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	4b5b      	ldr	r3, [pc, #364]	@ (800192c <HAL_UARTEx_RxEventCallback+0xafc>)
 80017be:	805a      	strh	r2, [r3, #2]
				memcpy(&dart_client_cmd.latest_launch_cmd_remaining_time,&data[4],2);
 80017c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017c2:	3304      	adds	r3, #4
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	4b58      	ldr	r3, [pc, #352]	@ (800192c <HAL_UARTEx_RxEventCallback+0xafc>)
 80017ca:	809a      	strh	r2, [r3, #4]
				DART_COMMAND_RxEventCallback(dart_client_cmd.dart_launch_opening_status, dart_client_cmd.target_change_remaining_time, dart_client_cmd.latest_launch_cmd_remaining_time);
 80017cc:	4b57      	ldr	r3, [pc, #348]	@ (800192c <HAL_UARTEx_RxEventCallback+0xafc>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4a56      	ldr	r2, [pc, #344]	@ (800192c <HAL_UARTEx_RxEventCallback+0xafc>)
 80017d2:	8851      	ldrh	r1, [r2, #2]
 80017d4:	4a55      	ldr	r2, [pc, #340]	@ (800192c <HAL_UARTEx_RxEventCallback+0xafc>)
 80017d6:	8892      	ldrh	r2, [r2, #4]
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fc93 	bl	8002104 <DART_COMMAND_RxEventCallback>
				break;
 80017de:	e367      	b.n	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
			}
			case TEAM_POSITION_HEADER : {
				memcpy(&robot_positions.hero_x,&data[0],4);
 80017e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b52      	ldr	r3, [pc, #328]	@ (8001930 <HAL_UARTEx_RxEventCallback+0xb00>)
 80017e8:	601a      	str	r2, [r3, #0]
				memcpy(&robot_positions.hero_y,&data[4],4);
 80017ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ec:	3304      	adds	r3, #4
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001930 <HAL_UARTEx_RxEventCallback+0xb00>)
 80017f4:	605a      	str	r2, [r3, #4]
				memcpy(&robot_positions.engineer_x,&data[8],4);
 80017f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017f8:	3308      	adds	r3, #8
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001930 <HAL_UARTEx_RxEventCallback+0xb00>)
 8001800:	609a      	str	r2, [r3, #8]
				memcpy(&robot_positions.engineer_y,&data[12],4);
 8001802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001804:	330c      	adds	r3, #12
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b49      	ldr	r3, [pc, #292]	@ (8001930 <HAL_UARTEx_RxEventCallback+0xb00>)
 800180c:	60da      	str	r2, [r3, #12]
				memcpy(&robot_positions.standard_3_x,&data[16],4);
 800180e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001810:	3310      	adds	r3, #16
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b46      	ldr	r3, [pc, #280]	@ (8001930 <HAL_UARTEx_RxEventCallback+0xb00>)
 8001818:	611a      	str	r2, [r3, #16]
				memcpy(&robot_positions.standard_3_y,&data[20],4);
 800181a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800181c:	3314      	adds	r3, #20
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b43      	ldr	r3, [pc, #268]	@ (8001930 <HAL_UARTEx_RxEventCallback+0xb00>)
 8001824:	615a      	str	r2, [r3, #20]
				memcpy(&robot_positions.standard_4_x,&data[24],4);
 8001826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001828:	3318      	adds	r3, #24
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b40      	ldr	r3, [pc, #256]	@ (8001930 <HAL_UARTEx_RxEventCallback+0xb00>)
 8001830:	619a      	str	r2, [r3, #24]
				memcpy(&robot_positions.standard_4_y,&data[28],4);
 8001832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001834:	331c      	adds	r3, #28
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	4b3d      	ldr	r3, [pc, #244]	@ (8001930 <HAL_UARTEx_RxEventCallback+0xb00>)
 800183c:	61da      	str	r2, [r3, #28]
				TEAM_POSITION_RxEventCallback(robot_positions.hero_x, robot_positions.hero_y, robot_positions.engineer_x, robot_positions.engineer_y, robot_positions.standard_3_x, robot_positions.standard_3_y, robot_positions.standard_4_x, robot_positions.standard_4_y, robot_positions.standard_5_x, robot_positions.standard_5_y);
 800183e:	4b3c      	ldr	r3, [pc, #240]	@ (8001930 <HAL_UARTEx_RxEventCallback+0xb00>)
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	4b3a      	ldr	r3, [pc, #232]	@ (8001930 <HAL_UARTEx_RxEventCallback+0xb00>)
 8001846:	ed93 7a01 	vldr	s14, [r3, #4]
 800184a:	4b39      	ldr	r3, [pc, #228]	@ (8001930 <HAL_UARTEx_RxEventCallback+0xb00>)
 800184c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001850:	4b37      	ldr	r3, [pc, #220]	@ (8001930 <HAL_UARTEx_RxEventCallback+0xb00>)
 8001852:	ed93 6a03 	vldr	s12, [r3, #12]
 8001856:	4b36      	ldr	r3, [pc, #216]	@ (8001930 <HAL_UARTEx_RxEventCallback+0xb00>)
 8001858:	edd3 5a04 	vldr	s11, [r3, #16]
 800185c:	4b34      	ldr	r3, [pc, #208]	@ (8001930 <HAL_UARTEx_RxEventCallback+0xb00>)
 800185e:	ed93 5a05 	vldr	s10, [r3, #20]
 8001862:	4b33      	ldr	r3, [pc, #204]	@ (8001930 <HAL_UARTEx_RxEventCallback+0xb00>)
 8001864:	ed93 3a06 	vldr	s6, [r3, #24]
 8001868:	4b31      	ldr	r3, [pc, #196]	@ (8001930 <HAL_UARTEx_RxEventCallback+0xb00>)
 800186a:	edd3 3a07 	vldr	s7, [r3, #28]
 800186e:	4b30      	ldr	r3, [pc, #192]	@ (8001930 <HAL_UARTEx_RxEventCallback+0xb00>)
 8001870:	ed93 4a08 	vldr	s8, [r3, #32]
 8001874:	4b2e      	ldr	r3, [pc, #184]	@ (8001930 <HAL_UARTEx_RxEventCallback+0xb00>)
 8001876:	edd3 4a09 	vldr	s9, [r3, #36]	@ 0x24
 800187a:	eef0 2a45 	vmov.f32	s5, s10
 800187e:	eeb0 2a65 	vmov.f32	s4, s11
 8001882:	eef0 1a46 	vmov.f32	s3, s12
 8001886:	eeb0 1a66 	vmov.f32	s2, s13
 800188a:	eef0 0a47 	vmov.f32	s1, s14
 800188e:	eeb0 0a67 	vmov.f32	s0, s15
 8001892:	f000 fc46 	bl	8002122 <TEAM_POSITION_RxEventCallback>
				break;
 8001896:	e30b      	b.n	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
			}
			case RADAR_MARKING_HEADER : {
				radar_mark_data.mark_hero_progress = getBits(data[0],0,1);
 8001898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2201      	movs	r2, #1
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fb15 	bl	8001ed0 <getBits>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b22      	ldr	r3, [pc, #136]	@ (8001934 <HAL_UARTEx_RxEventCallback+0xb04>)
 80018ac:	701a      	strb	r2, [r3, #0]
				radar_mark_data.mark_engineer_progress = getBits(data[0],1,1);
 80018ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2201      	movs	r2, #1
 80018b4:	2101      	movs	r1, #1
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 fb0a 	bl	8001ed0 <getBits>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001934 <HAL_UARTEx_RxEventCallback+0xb04>)
 80018c2:	705a      	strb	r2, [r3, #1]
				radar_mark_data.mark_standard_3_progress = getBits(data[0],2,1);
 80018c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2201      	movs	r2, #1
 80018ca:	2102      	movs	r1, #2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 faff 	bl	8001ed0 <getBits>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b17      	ldr	r3, [pc, #92]	@ (8001934 <HAL_UARTEx_RxEventCallback+0xb04>)
 80018d8:	709a      	strb	r2, [r3, #2]
				radar_mark_data.mark_standard_4_progress = getBits(data[0],3,1);
 80018da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2201      	movs	r2, #1
 80018e0:	2103      	movs	r1, #3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 faf4 	bl	8001ed0 <getBits>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <HAL_UARTEx_RxEventCallback+0xb04>)
 80018ee:	70da      	strb	r2, [r3, #3]
				radar_mark_data.mark_sentry_progress = getBits(data[0],4,1);
 80018f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2201      	movs	r2, #1
 80018f6:	2104      	movs	r1, #4
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 fae9 	bl	8001ed0 <getBits>
 80018fe:	4603      	mov	r3, r0
 8001900:	461a      	mov	r2, r3
 8001902:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <HAL_UARTEx_RxEventCallback+0xb04>)
 8001904:	711a      	strb	r2, [r3, #4]
				RADAR_MARKING_RxEventCallback(radar_mark_data.mark_hero_progress, radar_mark_data.mark_engineer_progress, radar_mark_data.mark_standard_3_progress, radar_mark_data.mark_standard_4_progress, radar_mark_data.mark_sentry_progress);
 8001906:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <HAL_UARTEx_RxEventCallback+0xb04>)
 8001908:	7818      	ldrb	r0, [r3, #0]
 800190a:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <HAL_UARTEx_RxEventCallback+0xb04>)
 800190c:	7859      	ldrb	r1, [r3, #1]
 800190e:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <HAL_UARTEx_RxEventCallback+0xb04>)
 8001910:	789a      	ldrb	r2, [r3, #2]
 8001912:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <HAL_UARTEx_RxEventCallback+0xb04>)
 8001914:	78dc      	ldrb	r4, [r3, #3]
 8001916:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <HAL_UARTEx_RxEventCallback+0xb04>)
 8001918:	791b      	ldrb	r3, [r3, #4]
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	4623      	mov	r3, r4
 800191e:	f000 fc1d 	bl	800215c <RADAR_MARKING_RxEventCallback>
				break;
 8001922:	e2c5      	b.n	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
 8001924:	2000031c 	.word	0x2000031c
 8001928:	20000324 	.word	0x20000324
 800192c:	20000328 	.word	0x20000328
 8001930:	20000330 	.word	0x20000330
 8001934:	20000358 	.word	0x20000358
			}
			case SENTRY_HEADER : {
				uint8_t exchanged_projectiles_buff[2] = {data[0],getBits(data[1],0,3)};
 8001938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8001940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001942:	785b      	ldrb	r3, [r3, #1]
 8001944:	2203      	movs	r2, #3
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fac1 	bl	8001ed0 <getBits>
 800194e:	4603      	mov	r3, r0
 8001950:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
				memcpy(&sentry_info.exchanged_projectiles,&exchanged_projectiles_buff,2);
 8001954:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001958:	4b87      	ldr	r3, [pc, #540]	@ (8001b78 <HAL_UARTEx_RxEventCallback+0xd48>)
 800195a:	801a      	strh	r2, [r3, #0]
				sentry_info.projectile_exchange_count = getBits(data[1],3,4);
 800195c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800195e:	785b      	ldrb	r3, [r3, #1]
 8001960:	2204      	movs	r2, #4
 8001962:	2103      	movs	r1, #3
 8001964:	4618      	mov	r0, r3
 8001966:	f000 fab3 	bl	8001ed0 <getBits>
 800196a:	4603      	mov	r3, r0
 800196c:	461a      	mov	r2, r3
 800196e:	4b82      	ldr	r3, [pc, #520]	@ (8001b78 <HAL_UARTEx_RxEventCallback+0xd48>)
 8001970:	709a      	strb	r2, [r3, #2]
				sentry_info.HP_exchange_count = getBits(data[1],7,1) | (getBits(data[2],0,3)<<1);
 8001972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001974:	785b      	ldrb	r3, [r3, #1]
 8001976:	2201      	movs	r2, #1
 8001978:	2107      	movs	r1, #7
 800197a:	4618      	mov	r0, r3
 800197c:	f000 faa8 	bl	8001ed0 <getBits>
 8001980:	4603      	mov	r3, r0
 8001982:	b25c      	sxtb	r4, r3
 8001984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001986:	789b      	ldrb	r3, [r3, #2]
 8001988:	2203      	movs	r2, #3
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f000 fa9f 	bl	8001ed0 <getBits>
 8001992:	4603      	mov	r3, r0
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	b25b      	sxtb	r3, r3
 8001998:	4323      	orrs	r3, r4
 800199a:	b25b      	sxtb	r3, r3
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4b76      	ldr	r3, [pc, #472]	@ (8001b78 <HAL_UARTEx_RxEventCallback+0xd48>)
 80019a0:	70da      	strb	r2, [r3, #3]
				sentry_info.confirm_free_respawn = getBits(data[2],3,1);
 80019a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019a4:	789b      	ldrb	r3, [r3, #2]
 80019a6:	2201      	movs	r2, #1
 80019a8:	2103      	movs	r1, #3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 fa90 	bl	8001ed0 <getBits>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b70      	ldr	r3, [pc, #448]	@ (8001b78 <HAL_UARTEx_RxEventCallback+0xd48>)
 80019b6:	711a      	strb	r2, [r3, #4]
				sentry_info.instant_respawn_available = getBits(data[2],4,1);
 80019b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ba:	789b      	ldrb	r3, [r3, #2]
 80019bc:	2201      	movs	r2, #1
 80019be:	2104      	movs	r1, #4
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 fa85 	bl	8001ed0 <getBits>
 80019c6:	4603      	mov	r3, r0
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b6b      	ldr	r3, [pc, #428]	@ (8001b78 <HAL_UARTEx_RxEventCallback+0xd48>)
 80019cc:	715a      	strb	r2, [r3, #5]
				uint8_t instant_respawn_cost_buff[2] = {getBits(data[2],5,3)| (getBits(data[3],0,5)<<3),getBits(data[3],5,2)};
 80019ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019d0:	789b      	ldrb	r3, [r3, #2]
 80019d2:	2203      	movs	r2, #3
 80019d4:	2105      	movs	r1, #5
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 fa7a 	bl	8001ed0 <getBits>
 80019dc:	4603      	mov	r3, r0
 80019de:	b25c      	sxtb	r4, r3
 80019e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019e2:	78db      	ldrb	r3, [r3, #3]
 80019e4:	2205      	movs	r2, #5
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 fa71 	bl	8001ed0 <getBits>
 80019ee:	4603      	mov	r3, r0
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	b25b      	sxtb	r3, r3
 80019f4:	4323      	orrs	r3, r4
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 80019fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a00:	78db      	ldrb	r3, [r3, #3]
 8001a02:	2202      	movs	r2, #2
 8001a04:	2105      	movs	r1, #5
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 fa62 	bl	8001ed0 <getBits>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
				memcpy(&sentry_info.instant_respawn_cost,instant_respawn_cost_buff,2);
 8001a12:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001a16:	4b58      	ldr	r3, [pc, #352]	@ (8001b78 <HAL_UARTEx_RxEventCallback+0xd48>)
 8001a18:	80da      	strh	r2, [r3, #6]
				sentry_info.in_combat = getBits(data[4],0,1);
 8001a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a1c:	791b      	ldrb	r3, [r3, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 fa54 	bl	8001ed0 <getBits>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b52      	ldr	r3, [pc, #328]	@ (8001b78 <HAL_UARTEx_RxEventCallback+0xd48>)
 8001a2e:	721a      	strb	r2, [r3, #8]
				uint8_t remaining_allowance_to_exchange_buff[2] = {getBits(data[4],1,7)|(getBits(data[5],0,1)<<7),getBits(data[5],1,3)};
 8001a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a32:	791b      	ldrb	r3, [r3, #4]
 8001a34:	2207      	movs	r2, #7
 8001a36:	2101      	movs	r1, #1
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 fa49 	bl	8001ed0 <getBits>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	b25c      	sxtb	r4, r3
 8001a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a44:	795b      	ldrb	r3, [r3, #5]
 8001a46:	2201      	movs	r2, #1
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 fa40 	bl	8001ed0 <getBits>
 8001a50:	4603      	mov	r3, r0
 8001a52:	01db      	lsls	r3, r3, #7
 8001a54:	b25b      	sxtb	r3, r3
 8001a56:	4323      	orrs	r3, r4
 8001a58:	b25b      	sxtb	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8001a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a62:	795b      	ldrb	r3, [r3, #5]
 8001a64:	2203      	movs	r2, #3
 8001a66:	2101      	movs	r1, #1
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fa31 	bl	8001ed0 <getBits>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
				memcpy(&sentry_info.remaining_allowance_to_exchange,remaining_allowance_to_exchange_buff,2);
 8001a74:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8001a78:	4b3f      	ldr	r3, [pc, #252]	@ (8001b78 <HAL_UARTEx_RxEventCallback+0xd48>)
 8001a7a:	815a      	strh	r2, [r3, #10]
				SENTRY_RxEventCallback(sentry_info.exchanged_projectiles, sentry_info.projectile_exchange_count, sentry_info.HP_exchange_count, sentry_info.confirm_free_respawn, sentry_info.instant_respawn_available, sentry_info.instant_respawn_cost, sentry_info.in_combat, sentry_info.remaining_allowance_to_exchange);
 8001a7c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b78 <HAL_UARTEx_RxEventCallback+0xd48>)
 8001a7e:	881c      	ldrh	r4, [r3, #0]
 8001a80:	4b3d      	ldr	r3, [pc, #244]	@ (8001b78 <HAL_UARTEx_RxEventCallback+0xd48>)
 8001a82:	789d      	ldrb	r5, [r3, #2]
 8001a84:	4b3c      	ldr	r3, [pc, #240]	@ (8001b78 <HAL_UARTEx_RxEventCallback+0xd48>)
 8001a86:	78de      	ldrb	r6, [r3, #3]
 8001a88:	4b3b      	ldr	r3, [pc, #236]	@ (8001b78 <HAL_UARTEx_RxEventCallback+0xd48>)
 8001a8a:	f893 c004 	ldrb.w	ip, [r3, #4]
 8001a8e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b78 <HAL_UARTEx_RxEventCallback+0xd48>)
 8001a90:	795b      	ldrb	r3, [r3, #5]
 8001a92:	4a39      	ldr	r2, [pc, #228]	@ (8001b78 <HAL_UARTEx_RxEventCallback+0xd48>)
 8001a94:	88d2      	ldrh	r2, [r2, #6]
 8001a96:	4938      	ldr	r1, [pc, #224]	@ (8001b78 <HAL_UARTEx_RxEventCallback+0xd48>)
 8001a98:	7a09      	ldrb	r1, [r1, #8]
 8001a9a:	4837      	ldr	r0, [pc, #220]	@ (8001b78 <HAL_UARTEx_RxEventCallback+0xd48>)
 8001a9c:	8940      	ldrh	r0, [r0, #10]
 8001a9e:	9003      	str	r0, [sp, #12]
 8001aa0:	9102      	str	r1, [sp, #8]
 8001aa2:	9201      	str	r2, [sp, #4]
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	4663      	mov	r3, ip
 8001aa8:	4632      	mov	r2, r6
 8001aaa:	4629      	mov	r1, r5
 8001aac:	4620      	mov	r0, r4
 8001aae:	f000 fb69 	bl	8002184 <SENTRY_RxEventCallback>
				break;
 8001ab2:	e1fd      	b.n	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
			}
			case RADAR_BUFF_HEADER : {
				radar_info.double_vulnerability_chances = getBits(data[0],0,1);
 8001ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 fa07 	bl	8001ed0 <getBits>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b7c <HAL_UARTEx_RxEventCallback+0xd4c>)
 8001ac8:	701a      	strb	r2, [r3, #0]
				radar_info.double_vulnerability_triggered = getBits(data[0],1,1);
 8001aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 f9fc 	bl	8001ed0 <getBits>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	4b27      	ldr	r3, [pc, #156]	@ (8001b7c <HAL_UARTEx_RxEventCallback+0xd4c>)
 8001ade:	705a      	strb	r2, [r3, #1]
				RADAR_BUFF_RxEventCallback(radar_info.double_vulnerability_chances, radar_info.double_vulnerability_triggered);
 8001ae0:	4b26      	ldr	r3, [pc, #152]	@ (8001b7c <HAL_UARTEx_RxEventCallback+0xd4c>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	4a25      	ldr	r2, [pc, #148]	@ (8001b7c <HAL_UARTEx_RxEventCallback+0xd4c>)
 8001ae6:	7852      	ldrb	r2, [r2, #1]
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 fb5e 	bl	80021ac <RADAR_BUFF_RxEventCallback>
				break;
 8001af0:	e1de      	b.n	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
				break;
			}
			//end of unfinished

			case CUSTOM_CONTROLLER_ROBOT_HEADER : {
				memcpy(&custom_controller_robot.custom_data,data,30);
 8001af2:	4a23      	ldr	r2, [pc, #140]	@ (8001b80 <HAL_UARTEx_RxEventCallback+0xd50>)
 8001af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af6:	4614      	mov	r4, r2
 8001af8:	461d      	mov	r5, r3
 8001afa:	6828      	ldr	r0, [r5, #0]
 8001afc:	6869      	ldr	r1, [r5, #4]
 8001afe:	68aa      	ldr	r2, [r5, #8]
 8001b00:	68eb      	ldr	r3, [r5, #12]
 8001b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b04:	6928      	ldr	r0, [r5, #16]
 8001b06:	6969      	ldr	r1, [r5, #20]
 8001b08:	69aa      	ldr	r2, [r5, #24]
 8001b0a:	c407      	stmia	r4!, {r0, r1, r2}
 8001b0c:	8bab      	ldrh	r3, [r5, #28]
 8001b0e:	8023      	strh	r3, [r4, #0]
				CUSTOM_CONTROLLER_ROBOT_RxEventCallback(custom_controller_robot.custom_data);
 8001b10:	481b      	ldr	r0, [pc, #108]	@ (8001b80 <HAL_UARTEx_RxEventCallback+0xd50>)
 8001b12:	f000 fb59 	bl	80021c8 <CUSTOM_CONTROLLER_ROBOT_RxEventCallback>
				break;
 8001b16:	e1cb      	b.n	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
			}
			case MINIMAP_COMMAND_HEADER : {
				memcpy(&map_command.target_position_x,&data[0],4);
 8001b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b19      	ldr	r3, [pc, #100]	@ (8001b84 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001b20:	601a      	str	r2, [r3, #0]
				memcpy(&map_command.target_position_y,&data[4],4);
 8001b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b24:	3304      	adds	r3, #4
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b16      	ldr	r3, [pc, #88]	@ (8001b84 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001b2c:	605a      	str	r2, [r3, #4]
				memcpy(&map_command.cmd_keyboard,&data[8],1);
 8001b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b30:	3308      	adds	r3, #8
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001b36:	721a      	strb	r2, [r3, #8]
				memcpy(&map_command.target_robot_id,&data[9],1);
 8001b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b3a:	3309      	adds	r3, #9
 8001b3c:	781a      	ldrb	r2, [r3, #0]
 8001b3e:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001b40:	725a      	strb	r2, [r3, #9]
				memcpy(&map_command.cmd_source,&data[10],2);
 8001b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b44:	330a      	adds	r3, #10
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001b4c:	815a      	strh	r2, [r3, #10]
				MINIMAP_COMMAND_RxEventCallback(map_command.target_position_x, map_command.target_position_y, map_command.cmd_keyboard, map_command.target_robot_id, map_command.cmd_source);
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b84 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001b56:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001b5c:	7a1b      	ldrb	r3, [r3, #8]
 8001b5e:	4a09      	ldr	r2, [pc, #36]	@ (8001b84 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001b60:	7a51      	ldrb	r1, [r2, #9]
 8001b62:	4a08      	ldr	r2, [pc, #32]	@ (8001b84 <HAL_UARTEx_RxEventCallback+0xd54>)
 8001b64:	8952      	ldrh	r2, [r2, #10]
 8001b66:	4618      	mov	r0, r3
 8001b68:	eef0 0a47 	vmov.f32	s1, s14
 8001b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b70:	f000 fb34 	bl	80021dc <MINIMAP_COMMAND_RxEventCallback>
				break;
 8001b74:	e19c      	b.n	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
 8001b76:	bf00      	nop
 8001b78:	20000360 	.word	0x20000360
 8001b7c:	2000036c 	.word	0x2000036c
 8001b80:	20000404 	.word	0x20000404
 8001b84:	20000370 	.word	0x20000370
			}
			case PC_CONTROL_HEADER : {
				memcpy(&pc_control.mouse_x,&data[0],2);
 8001b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	4b94      	ldr	r3, [pc, #592]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001b90:	801a      	strh	r2, [r3, #0]
				memcpy(&pc_control.mouse_y,&data[2],2);
 8001b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b94:	3302      	adds	r3, #2
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	4b91      	ldr	r3, [pc, #580]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001b9c:	805a      	strh	r2, [r3, #2]
				memcpy(&pc_control.mouse_z,&data[4],2);
 8001b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	4b8e      	ldr	r3, [pc, #568]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001ba8:	809a      	strh	r2, [r3, #4]
				memcpy(&pc_control.left_button_down,&data[6],1);
 8001baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bac:	3306      	adds	r3, #6
 8001bae:	781a      	ldrb	r2, [r3, #0]
 8001bb0:	4b8b      	ldr	r3, [pc, #556]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001bb2:	719a      	strb	r2, [r3, #6]
				memcpy(&pc_control.right_button_down,&data[7],1);
 8001bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb6:	3307      	adds	r3, #7
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	4b89      	ldr	r3, [pc, #548]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001bbc:	71da      	strb	r2, [r3, #7]
				pc_control.w = getBits(data[8],0,1);
 8001bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc0:	7a1b      	ldrb	r3, [r3, #8]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 f982 	bl	8001ed0 <getBits>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4b83      	ldr	r3, [pc, #524]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001bd2:	731a      	strb	r2, [r3, #12]
				pc_control.s = getBits(data[8],1,1);
 8001bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bd6:	7a1b      	ldrb	r3, [r3, #8]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	2101      	movs	r1, #1
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 f977 	bl	8001ed0 <getBits>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b7e      	ldr	r3, [pc, #504]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001be8:	735a      	strb	r2, [r3, #13]
				pc_control.a = getBits(data[8],2,1);
 8001bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bec:	7a1b      	ldrb	r3, [r3, #8]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f96c 	bl	8001ed0 <getBits>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b78      	ldr	r3, [pc, #480]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001bfe:	739a      	strb	r2, [r3, #14]
				pc_control.d = getBits(data[8],3,1);
 8001c00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c02:	7a1b      	ldrb	r3, [r3, #8]
 8001c04:	2201      	movs	r2, #1
 8001c06:	2103      	movs	r1, #3
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 f961 	bl	8001ed0 <getBits>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b73      	ldr	r3, [pc, #460]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001c14:	73da      	strb	r2, [r3, #15]
				pc_control.shift = getBits(data[8],4,1);
 8001c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c18:	7a1b      	ldrb	r3, [r3, #8]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	2104      	movs	r1, #4
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f956 	bl	8001ed0 <getBits>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b6d      	ldr	r3, [pc, #436]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001c2a:	741a      	strb	r2, [r3, #16]
				pc_control.ctrl = getBits(data[8],5,1);
 8001c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c2e:	7a1b      	ldrb	r3, [r3, #8]
 8001c30:	2201      	movs	r2, #1
 8001c32:	2105      	movs	r1, #5
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 f94b 	bl	8001ed0 <getBits>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b68      	ldr	r3, [pc, #416]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001c40:	745a      	strb	r2, [r3, #17]
				pc_control.q = getBits(data[8],6,1);
 8001c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c44:	7a1b      	ldrb	r3, [r3, #8]
 8001c46:	2201      	movs	r2, #1
 8001c48:	2106      	movs	r1, #6
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f940 	bl	8001ed0 <getBits>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b62      	ldr	r3, [pc, #392]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001c56:	749a      	strb	r2, [r3, #18]
				pc_control.e = getBits(data[8],7,1);
 8001c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c5a:	7a1b      	ldrb	r3, [r3, #8]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2107      	movs	r1, #7
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 f935 	bl	8001ed0 <getBits>
 8001c66:	4603      	mov	r3, r0
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b5d      	ldr	r3, [pc, #372]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001c6c:	74da      	strb	r2, [r3, #19]
				pc_control.r = getBits(data[9],0,1);
 8001c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c70:	7a5b      	ldrb	r3, [r3, #9]
 8001c72:	2201      	movs	r2, #1
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f92a 	bl	8001ed0 <getBits>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b57      	ldr	r3, [pc, #348]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001c82:	751a      	strb	r2, [r3, #20]
				pc_control.f = getBits(data[9],1,1);
 8001c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c86:	7a5b      	ldrb	r3, [r3, #9]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 f91f 	bl	8001ed0 <getBits>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b52      	ldr	r3, [pc, #328]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001c98:	755a      	strb	r2, [r3, #21]
				pc_control.g = getBits(data[9],2,1);
 8001c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c9c:	7a5b      	ldrb	r3, [r3, #9]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	2102      	movs	r1, #2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f914 	bl	8001ed0 <getBits>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b4c      	ldr	r3, [pc, #304]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001cae:	759a      	strb	r2, [r3, #22]
				pc_control.z = getBits(data[9],3,1);
 8001cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb2:	7a5b      	ldrb	r3, [r3, #9]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	2103      	movs	r1, #3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 f909 	bl	8001ed0 <getBits>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b47      	ldr	r3, [pc, #284]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001cc4:	75da      	strb	r2, [r3, #23]
				pc_control.x = getBits(data[9],4,1);
 8001cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cc8:	7a5b      	ldrb	r3, [r3, #9]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2104      	movs	r1, #4
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f8fe 	bl	8001ed0 <getBits>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b41      	ldr	r3, [pc, #260]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001cda:	761a      	strb	r2, [r3, #24]
				pc_control.c = getBits(data[9],5,1);
 8001cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cde:	7a5b      	ldrb	r3, [r3, #9]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	2105      	movs	r1, #5
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 f8f3 	bl	8001ed0 <getBits>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b3c      	ldr	r3, [pc, #240]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001cf0:	765a      	strb	r2, [r3, #25]
				pc_control.v = getBits(data[9],6,1);
 8001cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cf4:	7a5b      	ldrb	r3, [r3, #9]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2106      	movs	r1, #6
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f8e8 	bl	8001ed0 <getBits>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b36      	ldr	r3, [pc, #216]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d06:	769a      	strb	r2, [r3, #26]
				pc_control.b = getBits(data[9],7,1);
 8001d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d0a:	7a5b      	ldrb	r3, [r3, #9]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	2107      	movs	r1, #7
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 f8dd 	bl	8001ed0 <getBits>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b31      	ldr	r3, [pc, #196]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d1c:	76da      	strb	r2, [r3, #27]
				PC_CONTROL_RxEventCallback(pc_control.mouse_x,pc_control.mouse_y,pc_control.mouse_z,pc_control.left_button_down,pc_control.right_button_down,pc_control.w,pc_control.s,pc_control.a,pc_control.d,pc_control.shift,pc_control.ctrl,pc_control.q,pc_control.e,pc_control.r,pc_control.f,pc_control.g,pc_control.z,pc_control.x,pc_control.c,pc_control.v,pc_control.b);
 8001d1e:	4b30      	ldr	r3, [pc, #192]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d20:	f9b3 c000 	ldrsh.w	ip, [r3]
 8001d24:	4b2e      	ldr	r3, [pc, #184]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d26:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8001d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d2c:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 8001d30:	4b2b      	ldr	r3, [pc, #172]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d32:	f893 9006 	ldrb.w	r9, [r3, #6]
 8001d36:	4b2a      	ldr	r3, [pc, #168]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d38:	79db      	ldrb	r3, [r3, #7]
 8001d3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d3c:	4b28      	ldr	r3, [pc, #160]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d3e:	7b1a      	ldrb	r2, [r3, #12]
 8001d40:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001d42:	4b27      	ldr	r3, [pc, #156]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d44:	7b59      	ldrb	r1, [r3, #13]
 8001d46:	6279      	str	r1, [r7, #36]	@ 0x24
 8001d48:	4b25      	ldr	r3, [pc, #148]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d4a:	7b98      	ldrb	r0, [r3, #14]
 8001d4c:	6238      	str	r0, [r7, #32]
 8001d4e:	4b24      	ldr	r3, [pc, #144]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d50:	7bdc      	ldrb	r4, [r3, #15]
 8001d52:	61fc      	str	r4, [r7, #28]
 8001d54:	4b22      	ldr	r3, [pc, #136]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d56:	7c1d      	ldrb	r5, [r3, #16]
 8001d58:	61bd      	str	r5, [r7, #24]
 8001d5a:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d5c:	7c5e      	ldrb	r6, [r3, #17]
 8001d5e:	617e      	str	r6, [r7, #20]
 8001d60:	4b1f      	ldr	r3, [pc, #124]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d62:	f893 b012 	ldrb.w	fp, [r3, #18]
 8001d66:	465b      	mov	r3, fp
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d6c:	f893 b013 	ldrb.w	fp, [r3, #19]
 8001d70:	465a      	mov	r2, fp
 8001d72:	60fa      	str	r2, [r7, #12]
 8001d74:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d76:	f893 b014 	ldrb.w	fp, [r3, #20]
 8001d7a:	4659      	mov	r1, fp
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	4b18      	ldr	r3, [pc, #96]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d80:	7d5e      	ldrb	r6, [r3, #21]
 8001d82:	4b17      	ldr	r3, [pc, #92]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d84:	7d9d      	ldrb	r5, [r3, #22]
 8001d86:	4b16      	ldr	r3, [pc, #88]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d88:	7ddc      	ldrb	r4, [r3, #23]
 8001d8a:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d8c:	7e18      	ldrb	r0, [r3, #24]
 8001d8e:	4b14      	ldr	r3, [pc, #80]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d90:	7e59      	ldrb	r1, [r3, #25]
 8001d92:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d94:	7e9a      	ldrb	r2, [r3, #26]
 8001d96:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xfb0>)
 8001d98:	7edb      	ldrb	r3, [r3, #27]
 8001d9a:	9310      	str	r3, [sp, #64]	@ 0x40
 8001d9c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8001d9e:	910e      	str	r1, [sp, #56]	@ 0x38
 8001da0:	900d      	str	r0, [sp, #52]	@ 0x34
 8001da2:	940c      	str	r4, [sp, #48]	@ 0x30
 8001da4:	950b      	str	r5, [sp, #44]	@ 0x2c
 8001da6:	960a      	str	r6, [sp, #40]	@ 0x28
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	9109      	str	r1, [sp, #36]	@ 0x24
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	9208      	str	r2, [sp, #32]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	9307      	str	r3, [sp, #28]
 8001db4:	697e      	ldr	r6, [r7, #20]
 8001db6:	9606      	str	r6, [sp, #24]
 8001db8:	69bd      	ldr	r5, [r7, #24]
 8001dba:	9505      	str	r5, [sp, #20]
 8001dbc:	69fc      	ldr	r4, [r7, #28]
 8001dbe:	9404      	str	r4, [sp, #16]
 8001dc0:	6a38      	ldr	r0, [r7, #32]
 8001dc2:	9003      	str	r0, [sp, #12]
 8001dc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dc6:	9102      	str	r1, [sp, #8]
 8001dc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001dca:	9201      	str	r2, [sp, #4]
 8001dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	464b      	mov	r3, r9
 8001dd2:	4642      	mov	r2, r8
 8001dd4:	4671      	mov	r1, lr
 8001dd6:	4660      	mov	r0, ip
 8001dd8:	f000 fa13 	bl	8002202 <PC_CONTROL_RxEventCallback>
				break;
 8001ddc:	e068      	b.n	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
 8001dde:	bf00      	nop
 8001de0:	200003e8 	.word	0x200003e8
			}
			case CUSTOM_CONTROLLER_CLIENT_HEADER : {
				break;
			}
			case MINIMAP_DATA_HEADER : {
				memcpy(&map_data.intention,&data[0],1);
 8001de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de6:	781a      	ldrb	r2, [r3, #0]
 8001de8:	4b35      	ldr	r3, [pc, #212]	@ (8001ec0 <HAL_UARTEx_RxEventCallback+0x1090>)
 8001dea:	701a      	strb	r2, [r3, #0]
				memcpy(&map_data.start_position_x,&data[1],2);
 8001dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dee:	3301      	adds	r3, #1
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	4b32      	ldr	r3, [pc, #200]	@ (8001ec0 <HAL_UARTEx_RxEventCallback+0x1090>)
 8001df6:	805a      	strh	r2, [r3, #2]
				memcpy(&map_data.start_position_y,&data[3],2);
 8001df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dfa:	3303      	adds	r3, #3
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec0 <HAL_UARTEx_RxEventCallback+0x1090>)
 8001e02:	809a      	strh	r2, [r3, #4]
				memcpy(&map_data.delta_x,&data[5],49);
 8001e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e06:	3305      	adds	r3, #5
 8001e08:	4a2d      	ldr	r2, [pc, #180]	@ (8001ec0 <HAL_UARTEx_RxEventCallback+0x1090>)
 8001e0a:	1d90      	adds	r0, r2, #6
 8001e0c:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8001e10:	4602      	mov	r2, r0
 8001e12:	4619      	mov	r1, r3
 8001e14:	f8d1 c000 	ldr.w	ip, [r1]
 8001e18:	684e      	ldr	r6, [r1, #4]
 8001e1a:	688d      	ldr	r5, [r1, #8]
 8001e1c:	68c9      	ldr	r1, [r1, #12]
 8001e1e:	f8c2 c000 	str.w	ip, [r2]
 8001e22:	6056      	str	r6, [r2, #4]
 8001e24:	6095      	str	r5, [r2, #8]
 8001e26:	60d1      	str	r1, [r2, #12]
 8001e28:	3310      	adds	r3, #16
 8001e2a:	3010      	adds	r0, #16
 8001e2c:	42a3      	cmp	r3, r4
 8001e2e:	d1ef      	bne.n	8001e10 <HAL_UARTEx_RxEventCallback+0xfe0>
 8001e30:	4602      	mov	r2, r0
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	7013      	strb	r3, [r2, #0]
				memcpy(&map_data.delta_y,&data[54],49);
 8001e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e38:	3336      	adds	r3, #54	@ 0x36
 8001e3a:	4a21      	ldr	r2, [pc, #132]	@ (8001ec0 <HAL_UARTEx_RxEventCallback+0x1090>)
 8001e3c:	f102 0037 	add.w	r0, r2, #55	@ 0x37
 8001e40:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8001e44:	4602      	mov	r2, r0
 8001e46:	4619      	mov	r1, r3
 8001e48:	f8d1 c000 	ldr.w	ip, [r1]
 8001e4c:	684e      	ldr	r6, [r1, #4]
 8001e4e:	688d      	ldr	r5, [r1, #8]
 8001e50:	68c9      	ldr	r1, [r1, #12]
 8001e52:	f8c2 c000 	str.w	ip, [r2]
 8001e56:	6056      	str	r6, [r2, #4]
 8001e58:	6095      	str	r5, [r2, #8]
 8001e5a:	60d1      	str	r1, [r2, #12]
 8001e5c:	3310      	adds	r3, #16
 8001e5e:	3010      	adds	r0, #16
 8001e60:	42a3      	cmp	r3, r4
 8001e62:	d1ef      	bne.n	8001e44 <HAL_UARTEx_RxEventCallback+0x1014>
 8001e64:	4602      	mov	r2, r0
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	7013      	strb	r3, [r2, #0]
				memcpy(&map_data.sender_id,&data[103],2);
 8001e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6c:	3367      	adds	r3, #103	@ 0x67
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <HAL_UARTEx_RxEventCallback+0x1090>)
 8001e74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
				MINIMAP_DATA_RxEventCallback(map_data.intention, map_data.start_position_x, map_data.start_position_y, map_data.delta_x, map_data.delta_y, map_data.sender_id);
 8001e78:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <HAL_UARTEx_RxEventCallback+0x1090>)
 8001e7a:	7818      	ldrb	r0, [r3, #0]
 8001e7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <HAL_UARTEx_RxEventCallback+0x1090>)
 8001e7e:	8859      	ldrh	r1, [r3, #2]
 8001e80:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec0 <HAL_UARTEx_RxEventCallback+0x1090>)
 8001e82:	889a      	ldrh	r2, [r3, #4]
 8001e84:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <HAL_UARTEx_RxEventCallback+0x1090>)
 8001e86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec4 <HAL_UARTEx_RxEventCallback+0x1094>)
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <HAL_UARTEx_RxEventCallback+0x1098>)
 8001e92:	f000 f9ca 	bl	800222a <MINIMAP_DATA_RxEventCallback>
				break;
 8001e96:	e00b      	b.n	8001eb0 <HAL_UARTEx_RxEventCallback+0x1080>
			}
			case CUSTOM_MESSAGE_HEADER : {
				//UART_Printf(&huart1,"CallBack Check");
				memcpy(&custom_message.custom_message,data,128);
 8001e98:	4a0c      	ldr	r2, [pc, #48]	@ (8001ecc <HAL_UARTEx_RxEventCallback+0x109c>)
 8001e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	f008 f9c4 	bl	800a230 <memcpy>
				CUSTOM_MESSAGE_RxEventCallback(custom_message.custom_message);
 8001ea8:	4808      	ldr	r0, [pc, #32]	@ (8001ecc <HAL_UARTEx_RxEventCallback+0x109c>)
 8001eaa:	f000 f9ce 	bl	800224a <CUSTOM_MESSAGE_RxEventCallback>
				break;
 8001eae:	bf00      	nop
 8001eb0:	46d5      	mov	sp, sl
 8001eb2:	f8d7 d004 	ldr.w	sp, [r7, #4]
			}
		}
	}
}
 8001eb6:	bf00      	nop
 8001eb8:	3774      	adds	r7, #116	@ 0x74
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ec0:	2000037c 	.word	0x2000037c
 8001ec4:	200003b3 	.word	0x200003b3
 8001ec8:	20000382 	.word	0x20000382
 8001ecc:	20000424 	.word	0x20000424

08001ed0 <getBits>:





uint8_t getBits(uint8_t data, uint8_t startBit, uint8_t len){
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
 8001eda:	460b      	mov	r3, r1
 8001edc:	71bb      	strb	r3, [r7, #6]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73bb      	strb	r3, [r7, #14]
 8001eea:	e013      	b.n	8001f14 <getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 8001eec:	79fa      	ldrb	r2, [r7, #7]
 8001eee:	79b9      	ldrb	r1, [r7, #6]
 8001ef0:	7bbb      	ldrb	r3, [r7, #14]
 8001ef2:	440b      	add	r3, r1
 8001ef4:	fa42 f303 	asr.w	r3, r2, r3
 8001ef8:	f003 0201 	and.w	r2, r3, #1
 8001efc:	7bbb      	ldrb	r3, [r7, #14]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	b25a      	sxtb	r2, r3
 8001f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	b25b      	sxtb	r3, r3
 8001f0c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8001f0e:	7bbb      	ldrb	r3, [r7, #14]
 8001f10:	3301      	adds	r3, #1
 8001f12:	73bb      	strb	r3, [r7, #14]
 8001f14:	7bba      	ldrb	r2, [r7, #14]
 8001f16:	797b      	ldrb	r3, [r7, #5]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d3e7      	bcc.n	8001eec <getBits+0x1c>
	}
	return result;
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <GAME_STATUS_RxEventCallback>:

__weak void GAME_STATUS_RxEventCallback(uint8_t game_type,uint8_t current_stage,uint8_t game_progress, uint16_t stage_remain_time,uint64_t SyncTimeStamp){
 8001f2a:	b490      	push	{r4, r7}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4604      	mov	r4, r0
 8001f32:	4608      	mov	r0, r1
 8001f34:	4611      	mov	r1, r2
 8001f36:	461a      	mov	r2, r3
 8001f38:	4623      	mov	r3, r4
 8001f3a:	71fb      	strb	r3, [r7, #7]
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	71bb      	strb	r3, [r7, #6]
 8001f40:	460b      	mov	r3, r1
 8001f42:	717b      	strb	r3, [r7, #5]
 8001f44:	4613      	mov	r3, r2
 8001f46:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc90      	pop	{r4, r7}
 8001f50:	4770      	bx	lr

08001f52 <GAME_RESULT_RxEventCallback>:

__weak void GAME_RESULT_RxEventCallback(uint8_t winner){
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	71fb      	strb	r3, [r7, #7]
	//NOTE: This function should not be modified
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <ROBOT_HP_HEADER_RxEventCallback>:

__weak void ROBOT_HP_HEADER_RxEventCallback(uint16_t red_1_robot_HP, uint16_t red_2_robot_HP, uint16_t red_3_robot_HP, uint16_t red_4_robot_HP, uint16_t red_7_robot_HP, uint16_t red_outpost_HP, uint16_t red_base_HP, uint16_t blue_1_robot_HP, uint16_t blue_2_robot_HP, uint16_t blue_3_robot_HP, uint16_t blue_4_robot_HP, uint16_t blue_7_robot_HP, uint16_t blue_outpost_HP, uint16_t blue_base_HP){
 8001f68:	b490      	push	{r4, r7}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4604      	mov	r4, r0
 8001f70:	4608      	mov	r0, r1
 8001f72:	4611      	mov	r1, r2
 8001f74:	461a      	mov	r2, r3
 8001f76:	4623      	mov	r3, r4
 8001f78:	80fb      	strh	r3, [r7, #6]
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	80bb      	strh	r3, [r7, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	807b      	strh	r3, [r7, #2]
 8001f82:	4613      	mov	r3, r2
 8001f84:	803b      	strh	r3, [r7, #0]
	//NOTE: This function should not be modified
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc90      	pop	{r4, r7}
 8001f8e:	4770      	bx	lr

08001f90 <EVENT_DATA_RxEventCallback>:

__weak void EVENT_DATA_RxEventCallback(uint8_t resupply_zone_1, uint8_t resupply_zone_2, uint8_t resupply_zone_3, uint8_t small_power_rune, uint8_t large_power_rune, uint8_t central_elevated_ground, uint8_t trapezoid_elevated_ground, uint16_t last_dart_hit, uint8_t last_dart_hit_target, uint8_t central_buff){
 8001f90:	b490      	push	{r4, r7}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4604      	mov	r4, r0
 8001f98:	4608      	mov	r0, r1
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4623      	mov	r3, r4
 8001fa0:	71fb      	strb	r3, [r7, #7]
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71bb      	strb	r3, [r7, #6]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	717b      	strb	r3, [r7, #5]
 8001faa:	4613      	mov	r3, r2
 8001fac:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc90      	pop	{r4, r7}
 8001fb6:	4770      	bx	lr

08001fb8 <REFEREE_WARNING_RxEventCallback>:

__weak void REFEREE_WARNING_RxEventCallback(uint8_t penalty,uint8_t offending_robot_id,uint8_t count){
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	71bb      	strb	r3, [r7, #6]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	717b      	strb	r3, [r7, #5]
	//NOTE: This function should not be modified
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <DART_INFO_RxEventCallback>:

__weak void DART_INFO_RxEventCallback(uint8_t dart_remaining_time,uint8_t last_dart_hit_target,uint8_t last_target_hit_count, uint8_t current_dart_target){
 8001fd6:	b490      	push	{r4, r7}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4604      	mov	r4, r0
 8001fde:	4608      	mov	r0, r1
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4623      	mov	r3, r4
 8001fe6:	71fb      	strb	r3, [r7, #7]
 8001fe8:	4603      	mov	r3, r0
 8001fea:	71bb      	strb	r3, [r7, #6]
 8001fec:	460b      	mov	r3, r1
 8001fee:	717b      	strb	r3, [r7, #5]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc90      	pop	{r4, r7}
 8001ffc:	4770      	bx	lr

08001ffe <ROBOT_STATUS_RxEventCallback>:

__weak void ROBOT_STATUS_RxEventCallback(uint8_t robot_id, uint8_t robot_level, uint16_t current_HP, uint16_t maximum_HP, uint16_t shooter_barrel_cooling_value, uint16_t shooter_barrel_heat_limit, uint16_t chassis_power_limit, uint8_t power_management_gimbal_output, uint8_t power_management_chassis_output, uint8_t power_management_shooter_output){
 8001ffe:	b490      	push	{r4, r7}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	4604      	mov	r4, r0
 8002006:	4608      	mov	r0, r1
 8002008:	4611      	mov	r1, r2
 800200a:	461a      	mov	r2, r3
 800200c:	4623      	mov	r3, r4
 800200e:	71fb      	strb	r3, [r7, #7]
 8002010:	4603      	mov	r3, r0
 8002012:	71bb      	strb	r3, [r7, #6]
 8002014:	460b      	mov	r3, r1
 8002016:	80bb      	strh	r3, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bc90      	pop	{r4, r7}
 8002024:	4770      	bx	lr

08002026 <POWER_HEAT_DATA_RxEventCallback>:

__weak void POWER_HEAT_DATA_RxEventCallback(uint16_t buffer_energy, uint16_t shooter_17mm_1_barrel_heat, uint16_t shooter_17mm_2_barrel_heat, uint16_t shooter_42mm_barrel_heat){
 8002026:	b490      	push	{r4, r7}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	4604      	mov	r4, r0
 800202e:	4608      	mov	r0, r1
 8002030:	4611      	mov	r1, r2
 8002032:	461a      	mov	r2, r3
 8002034:	4623      	mov	r3, r4
 8002036:	80fb      	strh	r3, [r7, #6]
 8002038:	4603      	mov	r3, r0
 800203a:	80bb      	strh	r3, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
 8002040:	4613      	mov	r3, r2
 8002042:	803b      	strh	r3, [r7, #0]
	//NOTE: This function should not be modified
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bc90      	pop	{r4, r7}
 800204c:	4770      	bx	lr

0800204e <ROBOT_POSITION_RxEventCallback>:

__weak void ROBOT_POSITION_RxEventCallback(float x, float y, float angle){
 800204e:	b480      	push	{r7}
 8002050:	b085      	sub	sp, #20
 8002052:	af00      	add	r7, sp, #0
 8002054:	ed87 0a03 	vstr	s0, [r7, #12]
 8002058:	edc7 0a02 	vstr	s1, [r7, #8]
 800205c:	ed87 1a01 	vstr	s2, [r7, #4]
	//NOTE: This function should not be modified
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <BUFF_RxEventCallback>:

__weak void BUFF_RxEventCallback(uint8_t recovery_buff, uint8_t cooling_buff, uint8_t defence_buff, uint8_t vulnerability_buff, uint16_t attack_buff, uint8_t remaining_energy){
 800206c:	b490      	push	{r4, r7}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	4604      	mov	r4, r0
 8002074:	4608      	mov	r0, r1
 8002076:	4611      	mov	r1, r2
 8002078:	461a      	mov	r2, r3
 800207a:	4623      	mov	r3, r4
 800207c:	71fb      	strb	r3, [r7, #7]
 800207e:	4603      	mov	r3, r0
 8002080:	71bb      	strb	r3, [r7, #6]
 8002082:	460b      	mov	r3, r1
 8002084:	717b      	strb	r3, [r7, #5]
 8002086:	4613      	mov	r3, r2
 8002088:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bc90      	pop	{r4, r7}
 8002092:	4770      	bx	lr

08002094 <DAMAGE_SOURCE_RxEventCallback>:

__weak void DAMAGE_SOURCE_RxEventCallback(uint8_t armor_id, uint8_t HP_deduction_reason){
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	460a      	mov	r2, r1
 800209e:	71fb      	strb	r3, [r7, #7]
 80020a0:	4613      	mov	r3, r2
 80020a2:	71bb      	strb	r3, [r7, #6]
	//NOTE: This function should not be modified
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <PROJECTILE_INFO_RxEventCallback>:

__weak void PROJECTILE_INFO_RxEventCallback(uint8_t bullet_type, uint8_t shooter_number, uint8_t launching_frequency,float initial_speed){
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	ed87 0a00 	vstr	s0, [r7]
 80020bc:	71fb      	strb	r3, [r7, #7]
 80020be:	460b      	mov	r3, r1
 80020c0:	71bb      	strb	r3, [r7, #6]
 80020c2:	4613      	mov	r3, r2
 80020c4:	717b      	strb	r3, [r7, #5]
	//NOTE: This function should not be modified
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <PROJECTILE_ALLOWANCE_RxEventCallback>:

__weak void PROJECTILE_ALLOWANCE_RxEventCallback(uint16_t projectile_allowance_17mm, uint16_t projectile_allowance_42mm, uint16_t remaining_gold_coin){
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	4603      	mov	r3, r0
 80020da:	80fb      	strh	r3, [r7, #6]
 80020dc:	460b      	mov	r3, r1
 80020de:	80bb      	strh	r3, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <RFID_RxEventCallback>:

__weak void RFID_RxEventCallback(uint32_t rfid_status){
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	//NOTE: This function should not be modified
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <DART_COMMAND_RxEventCallback>:

__weak void DART_COMMAND_RxEventCallback(uint8_t dart_launch_opening_status, uint16_t target_change_remaining_time, uint16_t latest_launch_cmd_remaining_time){
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
 800210e:	460b      	mov	r3, r1
 8002110:	80bb      	strh	r3, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <TEAM_POSITION_RxEventCallback>:

__weak void TEAM_POSITION_RxEventCallback(float hero_x, float hero_y, float engineer_x, float engineer_y, float standard_3_x, float standard_3_y, float standard_4_x, float standard_4_y, float standard_5_x, float standard_5_y){
 8002122:	b480      	push	{r7}
 8002124:	b08b      	sub	sp, #44	@ 0x2c
 8002126:	af00      	add	r7, sp, #0
 8002128:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 800212c:	edc7 0a08 	vstr	s1, [r7, #32]
 8002130:	ed87 1a07 	vstr	s2, [r7, #28]
 8002134:	edc7 1a06 	vstr	s3, [r7, #24]
 8002138:	ed87 2a05 	vstr	s4, [r7, #20]
 800213c:	edc7 2a04 	vstr	s5, [r7, #16]
 8002140:	ed87 3a03 	vstr	s6, [r7, #12]
 8002144:	edc7 3a02 	vstr	s7, [r7, #8]
 8002148:	ed87 4a01 	vstr	s8, [r7, #4]
 800214c:	edc7 4a00 	vstr	s9, [r7]
	//NOTE: This function should not be modified
}
 8002150:	bf00      	nop
 8002152:	372c      	adds	r7, #44	@ 0x2c
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <RADAR_MARKING_RxEventCallback>:

__weak void RADAR_MARKING_RxEventCallback(uint8_t mark_hero_progress, uint8_t mark_engineer_progress, uint8_t mark_standard_3_progress, uint8_t mark_standard_4_progress, uint8_t mark_sentry_progress){
 800215c:	b490      	push	{r4, r7}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	4604      	mov	r4, r0
 8002164:	4608      	mov	r0, r1
 8002166:	4611      	mov	r1, r2
 8002168:	461a      	mov	r2, r3
 800216a:	4623      	mov	r3, r4
 800216c:	71fb      	strb	r3, [r7, #7]
 800216e:	4603      	mov	r3, r0
 8002170:	71bb      	strb	r3, [r7, #6]
 8002172:	460b      	mov	r3, r1
 8002174:	717b      	strb	r3, [r7, #5]
 8002176:	4613      	mov	r3, r2
 8002178:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bc90      	pop	{r4, r7}
 8002182:	4770      	bx	lr

08002184 <SENTRY_RxEventCallback>:

__weak void SENTRY_RxEventCallback(uint16_t exchanged_projectiles, uint8_t projectile_exchange_count, uint8_t HP_exchange_count, uint8_t confirm_free_respawn, uint8_t instant_respawn_available, uint16_t instant_respawn_cost, uint8_t in_combat, uint16_t remaining_allowance_to_exchange){
 8002184:	b490      	push	{r4, r7}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	4604      	mov	r4, r0
 800218c:	4608      	mov	r0, r1
 800218e:	4611      	mov	r1, r2
 8002190:	461a      	mov	r2, r3
 8002192:	4623      	mov	r3, r4
 8002194:	80fb      	strh	r3, [r7, #6]
 8002196:	4603      	mov	r3, r0
 8002198:	717b      	strb	r3, [r7, #5]
 800219a:	460b      	mov	r3, r1
 800219c:	713b      	strb	r3, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	70fb      	strb	r3, [r7, #3]
	//NOTE: This function should not be modified
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc90      	pop	{r4, r7}
 80021aa:	4770      	bx	lr

080021ac <RADAR_BUFF_RxEventCallback>:

__weak void RADAR_BUFF_RxEventCallback(uint8_t double_vulnerability_chances, uint8_t double_vulnerability_triggered){
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	460a      	mov	r2, r1
 80021b6:	71fb      	strb	r3, [r7, #7]
 80021b8:	4613      	mov	r3, r2
 80021ba:	71bb      	strb	r3, [r7, #6]
	//NOTE: This function should not be modified
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <CUSTOM_CONTROLLER_ROBOT_RxEventCallback>:

__weak void ROBOT_INTERACTION_RxEventCallback(){
	//NOTE: This function should not be modified
}

__weak void CUSTOM_CONTROLLER_ROBOT_RxEventCallback(uint8_t customData[30]){
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	//NOTE: This function should not be modified
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <MINIMAP_COMMAND_RxEventCallback>:

__weak void MINIMAP_COMMAND_RxEventCallback(float target_position_x, float target_position_y, uint8_t cmd_keyboard, uint8_t target_robot_id, uint16_t cmd_source){
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80021e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
 80021ee:	460b      	mov	r3, r1
 80021f0:	71bb      	strb	r3, [r7, #6]
 80021f2:	4613      	mov	r3, r2
 80021f4:	80bb      	strh	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <PC_CONTROL_RxEventCallback>:

__weak void PC_CONTROL_RxEventCallback(int16_t mouse_x, int16_t mouse_y, int16_t mouse_z, uint8_t left_button_down, uint8_t right_button_down, uint8_t w, uint8_t s, uint8_t a, uint8_t d, uint8_t shift,uint8_t ctrl,uint8_t q, uint8_t e, uint8_t r, uint8_t f, uint8_t g, uint8_t z, uint8_t x, uint8_t c, uint8_t v, uint8_t b){
 8002202:	b490      	push	{r4, r7}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	4604      	mov	r4, r0
 800220a:	4608      	mov	r0, r1
 800220c:	4611      	mov	r1, r2
 800220e:	461a      	mov	r2, r3
 8002210:	4623      	mov	r3, r4
 8002212:	80fb      	strh	r3, [r7, #6]
 8002214:	4603      	mov	r3, r0
 8002216:	80bb      	strh	r3, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	807b      	strh	r3, [r7, #2]
 800221c:	4613      	mov	r3, r2
 800221e:	707b      	strb	r3, [r7, #1]
	//NOTE: This function should not be modified
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bc90      	pop	{r4, r7}
 8002228:	4770      	bx	lr

0800222a <MINIMAP_DATA_RxEventCallback>:

__weak void CUSTOM_CONTROLLER_CLIENT_RxEventCallback(uint16_t key_value, uint16_t x_position, uint16_t mouse_left, uint16_t y_position, uint16_t mouse_right){
	//NOTE: This function should not be modified
}

__weak void MINIMAP_DATA_RxEventCallback(uint8_t intention, uint16_t start_position_x, uint16_t start_position_y, int8_t delta_x[49], int8_t delta_y[49], uint16_t sender_id){
 800222a:	b480      	push	{r7}
 800222c:	b085      	sub	sp, #20
 800222e:	af00      	add	r7, sp, #0
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	4603      	mov	r3, r0
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	460b      	mov	r3, r1
 8002238:	81bb      	strh	r3, [r7, #12]
 800223a:	4613      	mov	r3, r2
 800223c:	817b      	strh	r3, [r7, #10]
	//NOTE: This function should not be modified
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <CUSTOM_MESSAGE_RxEventCallback>:

__weak void CUSTOM_MESSAGE_RxEventCallback(uint8_t customMessage[128]){
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
	//NOTE: This function should not be modified
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002264:	f000 fe04 	bl	8002e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002268:	f000 f83e 	bl	80022e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800226c:	f000 f9be 	bl	80025ec <MX_GPIO_Init>
  MX_DMA_Init();
 8002270:	f000 f97e 	bl	8002570 <MX_DMA_Init>
  MX_I2C3_Init();
 8002274:	f000 f8a2 	bl	80023bc <MX_I2C3_Init>
  MX_TIM4_Init();
 8002278:	f000 f8ce 	bl	8002418 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800227c:	f000 f924 	bl	80024c8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002280:	f000 f94c 	bl	800251c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */



  IST8310_Init(&hi2c3);
 8002284:	480f      	ldr	r0, [pc, #60]	@ (80022c4 <main+0x64>)
 8002286:	f7fe fcb9 	bl	8000bfc <IST8310_Init>
  UART_Ex_Init(&huart1);
 800228a:	480f      	ldr	r0, [pc, #60]	@ (80022c8 <main+0x68>)
 800228c:	f7fe fdc0 	bl	8000e10 <UART_Ex_Init>
  UART_Ex_Init(&huart6);
 8002290:	480e      	ldr	r0, [pc, #56]	@ (80022cc <main+0x6c>)
 8002292:	f7fe fdbd 	bl	8000e10 <UART_Ex_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002296:	f005 f9f7 	bl	8007688 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800229a:	4a0d      	ldr	r2, [pc, #52]	@ (80022d0 <main+0x70>)
 800229c:	2100      	movs	r1, #0
 800229e:	480d      	ldr	r0, [pc, #52]	@ (80022d4 <main+0x74>)
 80022a0:	f005 fa3c 	bl	800771c <osThreadNew>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4a0c      	ldr	r2, [pc, #48]	@ (80022d8 <main+0x78>)
 80022a8:	6013      	str	r3, [r2, #0]

  /* creation of LibraryManager */
  LibraryManagerHandle = osThreadNew(StartLibraryManager, NULL, &LibraryManager_attributes);
 80022aa:	4a0c      	ldr	r2, [pc, #48]	@ (80022dc <main+0x7c>)
 80022ac:	2100      	movs	r1, #0
 80022ae:	480c      	ldr	r0, [pc, #48]	@ (80022e0 <main+0x80>)
 80022b0:	f005 fa34 	bl	800771c <osThreadNew>
 80022b4:	4603      	mov	r3, r0
 80022b6:	4a0b      	ldr	r2, [pc, #44]	@ (80022e4 <main+0x84>)
 80022b8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80022ba:	f005 fa09 	bl	80076d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022be:	bf00      	nop
 80022c0:	e7fd      	b.n	80022be <main+0x5e>
 80022c2:	bf00      	nop
 80022c4:	200005ac 	.word	0x200005ac
 80022c8:	200006a8 	.word	0x200006a8
 80022cc:	200006f0 	.word	0x200006f0
 80022d0:	0800ad20 	.word	0x0800ad20
 80022d4:	08002719 	.word	0x08002719
 80022d8:	200007f8 	.word	0x200007f8
 80022dc:	0800ad44 	.word	0x0800ad44
 80022e0:	08002845 	.word	0x08002845
 80022e4:	200007fc 	.word	0x200007fc

080022e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b094      	sub	sp, #80	@ 0x50
 80022ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ee:	f107 0320 	add.w	r3, r7, #32
 80022f2:	2230      	movs	r2, #48	@ 0x30
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f007 ff66 	bl	800a1c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022fc:	f107 030c 	add.w	r3, r7, #12
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	4b28      	ldr	r3, [pc, #160]	@ (80023b4 <SystemClock_Config+0xcc>)
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	4a27      	ldr	r2, [pc, #156]	@ (80023b4 <SystemClock_Config+0xcc>)
 8002316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800231a:	6413      	str	r3, [r2, #64]	@ 0x40
 800231c:	4b25      	ldr	r3, [pc, #148]	@ (80023b4 <SystemClock_Config+0xcc>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002328:	2300      	movs	r3, #0
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	4b22      	ldr	r3, [pc, #136]	@ (80023b8 <SystemClock_Config+0xd0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a21      	ldr	r2, [pc, #132]	@ (80023b8 <SystemClock_Config+0xd0>)
 8002332:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b1f      	ldr	r3, [pc, #124]	@ (80023b8 <SystemClock_Config+0xd0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002344:	2301      	movs	r3, #1
 8002346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002348:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800234c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800234e:	2302      	movs	r3, #2
 8002350:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002352:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002358:	2306      	movs	r3, #6
 800235a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800235c:	23a8      	movs	r3, #168	@ 0xa8
 800235e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002360:	2302      	movs	r3, #2
 8002362:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002364:	2304      	movs	r3, #4
 8002366:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002368:	f107 0320 	add.w	r3, r7, #32
 800236c:	4618      	mov	r0, r3
 800236e:	f002 fd1b 	bl	8004da8 <HAL_RCC_OscConfig>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002378:	f000 fa6f 	bl	800285a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800237c:	230f      	movs	r3, #15
 800237e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002380:	2302      	movs	r3, #2
 8002382:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002388:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800238c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800238e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002392:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002394:	f107 030c 	add.w	r3, r7, #12
 8002398:	2105      	movs	r1, #5
 800239a:	4618      	mov	r0, r3
 800239c:	f002 ff7c 	bl	8005298 <HAL_RCC_ClockConfig>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80023a6:	f000 fa58 	bl	800285a <Error_Handler>
  }
}
 80023aa:	bf00      	nop
 80023ac:	3750      	adds	r7, #80	@ 0x50
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40007000 	.word	0x40007000

080023bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80023c0:	4b12      	ldr	r3, [pc, #72]	@ (800240c <MX_I2C3_Init+0x50>)
 80023c2:	4a13      	ldr	r2, [pc, #76]	@ (8002410 <MX_I2C3_Init+0x54>)
 80023c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80023c6:	4b11      	ldr	r3, [pc, #68]	@ (800240c <MX_I2C3_Init+0x50>)
 80023c8:	4a12      	ldr	r2, [pc, #72]	@ (8002414 <MX_I2C3_Init+0x58>)
 80023ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023cc:	4b0f      	ldr	r3, [pc, #60]	@ (800240c <MX_I2C3_Init+0x50>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80023d2:	4b0e      	ldr	r3, [pc, #56]	@ (800240c <MX_I2C3_Init+0x50>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023d8:	4b0c      	ldr	r3, [pc, #48]	@ (800240c <MX_I2C3_Init+0x50>)
 80023da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023de:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023e0:	4b0a      	ldr	r3, [pc, #40]	@ (800240c <MX_I2C3_Init+0x50>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80023e6:	4b09      	ldr	r3, [pc, #36]	@ (800240c <MX_I2C3_Init+0x50>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023ec:	4b07      	ldr	r3, [pc, #28]	@ (800240c <MX_I2C3_Init+0x50>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023f2:	4b06      	ldr	r3, [pc, #24]	@ (800240c <MX_I2C3_Init+0x50>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80023f8:	4804      	ldr	r0, [pc, #16]	@ (800240c <MX_I2C3_Init+0x50>)
 80023fa:	f001 fcb1 	bl	8003d60 <HAL_I2C_Init>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002404:	f000 fa29 	bl	800285a <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}
 800240c:	200005ac 	.word	0x200005ac
 8002410:	40005c00 	.word	0x40005c00
 8002414:	00061a80 	.word	0x00061a80

08002418 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	@ 0x28
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800241e:	f107 0320 	add.w	r3, r7, #32
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
 8002434:	611a      	str	r2, [r3, #16]
 8002436:	615a      	str	r2, [r3, #20]
 8002438:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800243a:	4b21      	ldr	r3, [pc, #132]	@ (80024c0 <MX_TIM4_Init+0xa8>)
 800243c:	4a21      	ldr	r2, [pc, #132]	@ (80024c4 <MX_TIM4_Init+0xac>)
 800243e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002440:	4b1f      	ldr	r3, [pc, #124]	@ (80024c0 <MX_TIM4_Init+0xa8>)
 8002442:	2253      	movs	r2, #83	@ 0x53
 8002444:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002446:	4b1e      	ldr	r3, [pc, #120]	@ (80024c0 <MX_TIM4_Init+0xa8>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 800244c:	4b1c      	ldr	r3, [pc, #112]	@ (80024c0 <MX_TIM4_Init+0xa8>)
 800244e:	22f9      	movs	r2, #249	@ 0xf9
 8002450:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002452:	4b1b      	ldr	r3, [pc, #108]	@ (80024c0 <MX_TIM4_Init+0xa8>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002458:	4b19      	ldr	r3, [pc, #100]	@ (80024c0 <MX_TIM4_Init+0xa8>)
 800245a:	2200      	movs	r2, #0
 800245c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800245e:	4818      	ldr	r0, [pc, #96]	@ (80024c0 <MX_TIM4_Init+0xa8>)
 8002460:	f003 f962 	bl	8005728 <HAL_TIM_PWM_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800246a:	f000 f9f6 	bl	800285a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002476:	f107 0320 	add.w	r3, r7, #32
 800247a:	4619      	mov	r1, r3
 800247c:	4810      	ldr	r0, [pc, #64]	@ (80024c0 <MX_TIM4_Init+0xa8>)
 800247e:	f003 fe19 	bl	80060b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8002488:	f000 f9e7 	bl	800285a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800248c:	2360      	movs	r3, #96	@ 0x60
 800248e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	2208      	movs	r2, #8
 80024a0:	4619      	mov	r1, r3
 80024a2:	4807      	ldr	r0, [pc, #28]	@ (80024c0 <MX_TIM4_Init+0xa8>)
 80024a4:	f003 fac8 	bl	8005a38 <HAL_TIM_PWM_ConfigChannel>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80024ae:	f000 f9d4 	bl	800285a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80024b2:	4803      	ldr	r0, [pc, #12]	@ (80024c0 <MX_TIM4_Init+0xa8>)
 80024b4:	f000 fac2 	bl	8002a3c <HAL_TIM_MspPostInit>

}
 80024b8:	bf00      	nop
 80024ba:	3728      	adds	r7, #40	@ 0x28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000600 	.word	0x20000600
 80024c4:	40000800 	.word	0x40000800

080024c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024cc:	4b11      	ldr	r3, [pc, #68]	@ (8002514 <MX_USART1_UART_Init+0x4c>)
 80024ce:	4a12      	ldr	r2, [pc, #72]	@ (8002518 <MX_USART1_UART_Init+0x50>)
 80024d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024d2:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <MX_USART1_UART_Init+0x4c>)
 80024d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024da:	4b0e      	ldr	r3, [pc, #56]	@ (8002514 <MX_USART1_UART_Init+0x4c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <MX_USART1_UART_Init+0x4c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <MX_USART1_UART_Init+0x4c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024ec:	4b09      	ldr	r3, [pc, #36]	@ (8002514 <MX_USART1_UART_Init+0x4c>)
 80024ee:	220c      	movs	r2, #12
 80024f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024f2:	4b08      	ldr	r3, [pc, #32]	@ (8002514 <MX_USART1_UART_Init+0x4c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f8:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <MX_USART1_UART_Init+0x4c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024fe:	4805      	ldr	r0, [pc, #20]	@ (8002514 <MX_USART1_UART_Init+0x4c>)
 8002500:	f003 fe54 	bl	80061ac <HAL_UART_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800250a:	f000 f9a6 	bl	800285a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	200006a8 	.word	0x200006a8
 8002518:	40011000 	.word	0x40011000

0800251c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002520:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <MX_USART6_UART_Init+0x4c>)
 8002522:	4a12      	ldr	r2, [pc, #72]	@ (800256c <MX_USART6_UART_Init+0x50>)
 8002524:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002526:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <MX_USART6_UART_Init+0x4c>)
 8002528:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800252c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800252e:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <MX_USART6_UART_Init+0x4c>)
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002534:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <MX_USART6_UART_Init+0x4c>)
 8002536:	2200      	movs	r2, #0
 8002538:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800253a:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <MX_USART6_UART_Init+0x4c>)
 800253c:	2200      	movs	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002540:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <MX_USART6_UART_Init+0x4c>)
 8002542:	220c      	movs	r2, #12
 8002544:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002546:	4b08      	ldr	r3, [pc, #32]	@ (8002568 <MX_USART6_UART_Init+0x4c>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800254c:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <MX_USART6_UART_Init+0x4c>)
 800254e:	2200      	movs	r2, #0
 8002550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002552:	4805      	ldr	r0, [pc, #20]	@ (8002568 <MX_USART6_UART_Init+0x4c>)
 8002554:	f003 fe2a 	bl	80061ac <HAL_UART_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800255e:	f000 f97c 	bl	800285a <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200006f0 	.word	0x200006f0
 800256c:	40011400 	.word	0x40011400

08002570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	4b1b      	ldr	r3, [pc, #108]	@ (80025e8 <MX_DMA_Init+0x78>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	4a1a      	ldr	r2, [pc, #104]	@ (80025e8 <MX_DMA_Init+0x78>)
 8002580:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002584:	6313      	str	r3, [r2, #48]	@ 0x30
 8002586:	4b18      	ldr	r3, [pc, #96]	@ (80025e8 <MX_DMA_Init+0x78>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <MX_DMA_Init+0x78>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259a:	4a13      	ldr	r2, [pc, #76]	@ (80025e8 <MX_DMA_Init+0x78>)
 800259c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a2:	4b11      	ldr	r3, [pc, #68]	@ (80025e8 <MX_DMA_Init+0x78>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025aa:	603b      	str	r3, [r7, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2105      	movs	r1, #5
 80025b2:	202f      	movs	r0, #47	@ 0x2f
 80025b4:	f000 fdcd 	bl	8003152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80025b8:	202f      	movs	r0, #47	@ 0x2f
 80025ba:	f000 fde6 	bl	800318a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2105      	movs	r1, #5
 80025c2:	2039      	movs	r0, #57	@ 0x39
 80025c4:	f000 fdc5 	bl	8003152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80025c8:	2039      	movs	r0, #57	@ 0x39
 80025ca:	f000 fdde 	bl	800318a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2105      	movs	r1, #5
 80025d2:	203a      	movs	r0, #58	@ 0x3a
 80025d4:	f000 fdbd 	bl	8003152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80025d8:	203a      	movs	r0, #58	@ 0x3a
 80025da:	f000 fdd6 	bl	800318a <HAL_NVIC_EnableIRQ>

}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800

080025ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08c      	sub	sp, #48	@ 0x30
 80025f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f2:	f107 031c 	add.w	r3, r7, #28
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	60da      	str	r2, [r3, #12]
 8002600:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	4b40      	ldr	r3, [pc, #256]	@ (8002708 <MX_GPIO_Init+0x11c>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	4a3f      	ldr	r2, [pc, #252]	@ (8002708 <MX_GPIO_Init+0x11c>)
 800260c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002610:	6313      	str	r3, [r2, #48]	@ 0x30
 8002612:	4b3d      	ldr	r3, [pc, #244]	@ (8002708 <MX_GPIO_Init+0x11c>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800261a:	61bb      	str	r3, [r7, #24]
 800261c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	4b39      	ldr	r3, [pc, #228]	@ (8002708 <MX_GPIO_Init+0x11c>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	4a38      	ldr	r2, [pc, #224]	@ (8002708 <MX_GPIO_Init+0x11c>)
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	6313      	str	r3, [r2, #48]	@ 0x30
 800262e:	4b36      	ldr	r3, [pc, #216]	@ (8002708 <MX_GPIO_Init+0x11c>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	4b32      	ldr	r3, [pc, #200]	@ (8002708 <MX_GPIO_Init+0x11c>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	4a31      	ldr	r2, [pc, #196]	@ (8002708 <MX_GPIO_Init+0x11c>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6313      	str	r3, [r2, #48]	@ 0x30
 800264a:	4b2f      	ldr	r3, [pc, #188]	@ (8002708 <MX_GPIO_Init+0x11c>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	4b2b      	ldr	r3, [pc, #172]	@ (8002708 <MX_GPIO_Init+0x11c>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	4a2a      	ldr	r2, [pc, #168]	@ (8002708 <MX_GPIO_Init+0x11c>)
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	6313      	str	r3, [r2, #48]	@ 0x30
 8002666:	4b28      	ldr	r3, [pc, #160]	@ (8002708 <MX_GPIO_Init+0x11c>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	4b24      	ldr	r3, [pc, #144]	@ (8002708 <MX_GPIO_Init+0x11c>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	4a23      	ldr	r2, [pc, #140]	@ (8002708 <MX_GPIO_Init+0x11c>)
 800267c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002680:	6313      	str	r3, [r2, #48]	@ 0x30
 8002682:	4b21      	ldr	r3, [pc, #132]	@ (8002708 <MX_GPIO_Init+0x11c>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	4b1d      	ldr	r3, [pc, #116]	@ (8002708 <MX_GPIO_Init+0x11c>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	4a1c      	ldr	r2, [pc, #112]	@ (8002708 <MX_GPIO_Init+0x11c>)
 8002698:	f043 0308 	orr.w	r3, r3, #8
 800269c:	6313      	str	r3, [r2, #48]	@ 0x30
 800269e:	4b1a      	ldr	r3, [pc, #104]	@ (8002708 <MX_GPIO_Init+0x11c>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80026aa:	2200      	movs	r2, #0
 80026ac:	2140      	movs	r1, #64	@ 0x40
 80026ae:	4817      	ldr	r0, [pc, #92]	@ (800270c <MX_GPIO_Init+0x120>)
 80026b0:	f001 fb3c 	bl	8003d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026b4:	2340      	movs	r3, #64	@ 0x40
 80026b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b8:	2301      	movs	r3, #1
 80026ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	2300      	movs	r3, #0
 80026c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	4619      	mov	r1, r3
 80026ca:	4810      	ldr	r0, [pc, #64]	@ (800270c <MX_GPIO_Init+0x120>)
 80026cc:	f001 f97a 	bl	80039c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026d0:	2308      	movs	r3, #8
 80026d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026d4:	2300      	movs	r3, #0
 80026d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026dc:	f107 031c 	add.w	r3, r7, #28
 80026e0:	4619      	mov	r1, r3
 80026e2:	480a      	ldr	r0, [pc, #40]	@ (800270c <MX_GPIO_Init+0x120>)
 80026e4:	f001 f96e 	bl	80039c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026e8:	2301      	movs	r3, #1
 80026ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ec:	2300      	movs	r3, #0
 80026ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f4:	f107 031c 	add.w	r3, r7, #28
 80026f8:	4619      	mov	r1, r3
 80026fa:	4805      	ldr	r0, [pc, #20]	@ (8002710 <MX_GPIO_Init+0x124>)
 80026fc:	f001 f962 	bl	80039c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002700:	bf00      	nop
 8002702:	3730      	adds	r7, #48	@ 0x30
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40023800 	.word	0x40023800
 800270c:	40021800 	.word	0x40021800
 8002710:	40020000 	.word	0x40020000
 8002714:	00000000 	.word	0x00000000

08002718 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002718:	b5b0      	push	{r4, r5, r7, lr}
 800271a:	b08a      	sub	sp, #40	@ 0x28
 800271c:	af02      	add	r7, sp, #8
 800271e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_TIM_Base_Start(&htim4);
 8002720:	4843      	ldr	r0, [pc, #268]	@ (8002830 <StartDefaultTask+0x118>)
 8002722:	f002 ff99 	bl	8005658 <HAL_TIM_Base_Start>
	const float buzzerPre = 0.000001;
 8002726:	4b43      	ldr	r3, [pc, #268]	@ (8002834 <StartDefaultTask+0x11c>)
 8002728:	617b      	str	r3, [r7, #20]
	uint8_t toggleRising = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	77fb      	strb	r3, [r7, #31]
	uint8_t toggleBoi = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	77bb      	strb	r3, [r7, #30]

  /* Infinite loop */
  for(;;)
  {

	  int32_t ScaledMag = (2*getIST8310_X())+1000;
 8002732:	f7fe faf3 	bl	8000d1c <getIST8310_X>
 8002736:	4603      	mov	r3, r0
 8002738:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	61bb      	str	r3, [r7, #24]

	  if (ScaledMag <0) {
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2b00      	cmp	r3, #0
 8002744:	da01      	bge.n	800274a <StartDefaultTask+0x32>
		  ScaledMag = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
	  }
	  uint16_t fV = (uint16_t)(ScaledMag);
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	827b      	strh	r3, [r7, #18]
	  // uint16_t fV = 440;


		uint32_t finalVal = (uint32_t)(1/(buzzerPre*(float)fV));;
 800274e:	8a7b      	ldrh	r3, [r7, #18]
 8002750:	ee07 3a90 	vmov	s15, r3
 8002754:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002758:	edd7 7a05 	vldr	s15, [r7, #20]
 800275c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002760:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800276c:	ee17 3a90 	vmov	r3, s15
 8002770:	60fb      	str	r3, [r7, #12]

		htim4.Instance->ARR = finalVal;
 8002772:	4b2f      	ldr	r3, [pc, #188]	@ (8002830 <StartDefaultTask+0x118>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	62da      	str	r2, [r3, #44]	@ 0x2c



	  uint32_t value = finalVal * 0.02;// (uint32_t)val;
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f7fd ffe4 	bl	8000748 <__aeabi_ui2d>
 8002780:	a329      	add	r3, pc, #164	@ (adr r3, 8002828 <StartDefaultTask+0x110>)
 8002782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002786:	f7fd fd73 	bl	8000270 <__aeabi_dmul>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4610      	mov	r0, r2
 8002790:	4619      	mov	r1, r3
 8002792:	f7fe f853 	bl	800083c <__aeabi_d2uiz>
 8002796:	4603      	mov	r3, r0
 8002798:	60bb      	str	r3, [r7, #8]


	  htim4.Instance->CCR3=value;
 800279a:	4b25      	ldr	r3, [pc, #148]	@ (8002830 <StartDefaultTask+0x118>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && toggleRising == 0) {
 80027a2:	2101      	movs	r1, #1
 80027a4:	4824      	ldr	r0, [pc, #144]	@ (8002838 <StartDefaultTask+0x120>)
 80027a6:	f001 faa9 	bl	8003cfc <HAL_GPIO_ReadPin>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d10b      	bne.n	80027c8 <StartDefaultTask+0xb0>
 80027b0:	7ffb      	ldrb	r3, [r7, #31]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d108      	bne.n	80027c8 <StartDefaultTask+0xb0>
		  toggleBoi = !toggleBoi;
 80027b6:	7fbb      	ldrb	r3, [r7, #30]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	bf0c      	ite	eq
 80027bc:	2301      	moveq	r3, #1
 80027be:	2300      	movne	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	77bb      	strb	r3, [r7, #30]
		  toggleRising = 1;
 80027c4:	2301      	movs	r3, #1
 80027c6:	77fb      	strb	r3, [r7, #31]
	  }


	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0 && toggleRising == 1) {
 80027c8:	2101      	movs	r1, #1
 80027ca:	481b      	ldr	r0, [pc, #108]	@ (8002838 <StartDefaultTask+0x120>)
 80027cc:	f001 fa96 	bl	8003cfc <HAL_GPIO_ReadPin>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d104      	bne.n	80027e0 <StartDefaultTask+0xc8>
 80027d6:	7ffb      	ldrb	r3, [r7, #31]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <StartDefaultTask+0xc8>
		  toggleRising = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	77fb      	strb	r3, [r7, #31]
	  }

	  if (toggleBoi == 0) {
 80027e0:	7fbb      	ldrb	r3, [r7, #30]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d104      	bne.n	80027f0 <StartDefaultTask+0xd8>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80027e6:	2108      	movs	r1, #8
 80027e8:	4811      	ldr	r0, [pc, #68]	@ (8002830 <StartDefaultTask+0x118>)
 80027ea:	f002 ffed 	bl	80057c8 <HAL_TIM_PWM_Start>
 80027ee:	e003      	b.n	80027f8 <StartDefaultTask+0xe0>
	  } else {
		  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 80027f0:	2108      	movs	r1, #8
 80027f2:	480f      	ldr	r0, [pc, #60]	@ (8002830 <StartDefaultTask+0x118>)
 80027f4:	f003 f8b0 	bl	8005958 <HAL_TIM_PWM_Stop>
	  }

	  // UART_Printf()
	  UART_Printf(&huart1, "%d %d %d\r\n", getIST8310_X(), getIST8310_Y(), getIST8310_Z());
 80027f8:	f7fe fa90 	bl	8000d1c <getIST8310_X>
 80027fc:	4603      	mov	r3, r0
 80027fe:	461c      	mov	r4, r3
 8002800:	f7fe fa98 	bl	8000d34 <getIST8310_Y>
 8002804:	4603      	mov	r3, r0
 8002806:	461d      	mov	r5, r3
 8002808:	f7fe faa0 	bl	8000d4c <getIST8310_Z>
 800280c:	4603      	mov	r3, r0
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	462b      	mov	r3, r5
 8002812:	4622      	mov	r2, r4
 8002814:	4909      	ldr	r1, [pc, #36]	@ (800283c <StartDefaultTask+0x124>)
 8002816:	480a      	ldr	r0, [pc, #40]	@ (8002840 <StartDefaultTask+0x128>)
 8002818:	f7fe fad2 	bl	8000dc0 <UART_Printf>

    osDelay(1);
 800281c:	2001      	movs	r0, #1
 800281e:	f005 f80f 	bl	8007840 <osDelay>
  {
 8002822:	e786      	b.n	8002732 <StartDefaultTask+0x1a>
 8002824:	f3af 8000 	nop.w
 8002828:	47ae147b 	.word	0x47ae147b
 800282c:	3f947ae1 	.word	0x3f947ae1
 8002830:	20000600 	.word	0x20000600
 8002834:	358637bd 	.word	0x358637bd
 8002838:	40020000 	.word	0x40020000
 800283c:	0800aafc 	.word	0x0800aafc
 8002840:	200006a8 	.word	0x200006a8

08002844 <StartLibraryManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLibraryManager */
void StartLibraryManager(void *argument)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLibraryManager */
  /* Infinite loop */
  for(;;)
  {
	  IST8310_Update();
 800284c:	f7fe fa20 	bl	8000c90 <IST8310_Update>
    osDelay(1);
 8002850:	2001      	movs	r0, #1
 8002852:	f004 fff5 	bl	8007840 <osDelay>
	  IST8310_Update();
 8002856:	bf00      	nop
 8002858:	e7f8      	b.n	800284c <StartLibraryManager+0x8>

0800285a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800285e:	b672      	cpsid	i
}
 8002860:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002862:	bf00      	nop
 8002864:	e7fd      	b.n	8002862 <Error_Handler+0x8>
	...

08002868 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	4b12      	ldr	r3, [pc, #72]	@ (80028bc <HAL_MspInit+0x54>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002876:	4a11      	ldr	r2, [pc, #68]	@ (80028bc <HAL_MspInit+0x54>)
 8002878:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800287c:	6453      	str	r3, [r2, #68]	@ 0x44
 800287e:	4b0f      	ldr	r3, [pc, #60]	@ (80028bc <HAL_MspInit+0x54>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002882:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	603b      	str	r3, [r7, #0]
 800288e:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <HAL_MspInit+0x54>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	4a0a      	ldr	r2, [pc, #40]	@ (80028bc <HAL_MspInit+0x54>)
 8002894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002898:	6413      	str	r3, [r2, #64]	@ 0x40
 800289a:	4b08      	ldr	r3, [pc, #32]	@ (80028bc <HAL_MspInit+0x54>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	210f      	movs	r1, #15
 80028aa:	f06f 0001 	mvn.w	r0, #1
 80028ae:	f000 fc50 	bl	8003152 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800

080028c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	@ 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a29      	ldr	r2, [pc, #164]	@ (8002984 <HAL_I2C_MspInit+0xc4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d14b      	bne.n	800297a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	4b28      	ldr	r3, [pc, #160]	@ (8002988 <HAL_I2C_MspInit+0xc8>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	4a27      	ldr	r2, [pc, #156]	@ (8002988 <HAL_I2C_MspInit+0xc8>)
 80028ec:	f043 0304 	orr.w	r3, r3, #4
 80028f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f2:	4b25      	ldr	r3, [pc, #148]	@ (8002988 <HAL_I2C_MspInit+0xc8>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	4b21      	ldr	r3, [pc, #132]	@ (8002988 <HAL_I2C_MspInit+0xc8>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	4a20      	ldr	r2, [pc, #128]	@ (8002988 <HAL_I2C_MspInit+0xc8>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6313      	str	r3, [r2, #48]	@ 0x30
 800290e:	4b1e      	ldr	r3, [pc, #120]	@ (8002988 <HAL_I2C_MspInit+0xc8>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800291a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800291e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002920:	2312      	movs	r3, #18
 8002922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002924:	2301      	movs	r3, #1
 8002926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800292c:	2304      	movs	r3, #4
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	4619      	mov	r1, r3
 8002936:	4815      	ldr	r0, [pc, #84]	@ (800298c <HAL_I2C_MspInit+0xcc>)
 8002938:	f001 f844 	bl	80039c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800293c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002942:	2312      	movs	r3, #18
 8002944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002946:	2301      	movs	r3, #1
 8002948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294a:	2303      	movs	r3, #3
 800294c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800294e:	2304      	movs	r3, #4
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002952:	f107 0314 	add.w	r3, r7, #20
 8002956:	4619      	mov	r1, r3
 8002958:	480d      	ldr	r0, [pc, #52]	@ (8002990 <HAL_I2C_MspInit+0xd0>)
 800295a:	f001 f833 	bl	80039c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	4b09      	ldr	r3, [pc, #36]	@ (8002988 <HAL_I2C_MspInit+0xc8>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	4a08      	ldr	r2, [pc, #32]	@ (8002988 <HAL_I2C_MspInit+0xc8>)
 8002968:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800296c:	6413      	str	r3, [r2, #64]	@ 0x40
 800296e:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <HAL_I2C_MspInit+0xc8>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800297a:	bf00      	nop
 800297c:	3728      	adds	r7, #40	@ 0x28
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40005c00 	.word	0x40005c00
 8002988:	40023800 	.word	0x40023800
 800298c:	40020800 	.word	0x40020800
 8002990:	40020000 	.word	0x40020000

08002994 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a22      	ldr	r2, [pc, #136]	@ (8002a2c <HAL_TIM_PWM_MspInit+0x98>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d13d      	bne.n	8002a22 <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	4b21      	ldr	r3, [pc, #132]	@ (8002a30 <HAL_TIM_PWM_MspInit+0x9c>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	4a20      	ldr	r2, [pc, #128]	@ (8002a30 <HAL_TIM_PWM_MspInit+0x9c>)
 80029b0:	f043 0304 	orr.w	r3, r3, #4
 80029b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a30 <HAL_TIM_PWM_MspInit+0x9c>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 80029c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a34 <HAL_TIM_PWM_MspInit+0xa0>)
 80029c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a38 <HAL_TIM_PWM_MspInit+0xa4>)
 80029c6:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 80029c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a34 <HAL_TIM_PWM_MspInit+0xa0>)
 80029ca:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80029ce:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029d0:	4b18      	ldr	r3, [pc, #96]	@ (8002a34 <HAL_TIM_PWM_MspInit+0xa0>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d6:	4b17      	ldr	r3, [pc, #92]	@ (8002a34 <HAL_TIM_PWM_MspInit+0xa0>)
 80029d8:	2200      	movs	r2, #0
 80029da:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80029dc:	4b15      	ldr	r3, [pc, #84]	@ (8002a34 <HAL_TIM_PWM_MspInit+0xa0>)
 80029de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029e2:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029e4:	4b13      	ldr	r3, [pc, #76]	@ (8002a34 <HAL_TIM_PWM_MspInit+0xa0>)
 80029e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029ea:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029ec:	4b11      	ldr	r3, [pc, #68]	@ (8002a34 <HAL_TIM_PWM_MspInit+0xa0>)
 80029ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029f2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80029f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a34 <HAL_TIM_PWM_MspInit+0xa0>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80029fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002a34 <HAL_TIM_PWM_MspInit+0xa0>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a00:	4b0c      	ldr	r3, [pc, #48]	@ (8002a34 <HAL_TIM_PWM_MspInit+0xa0>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002a06:	480b      	ldr	r0, [pc, #44]	@ (8002a34 <HAL_TIM_PWM_MspInit+0xa0>)
 8002a08:	f000 fbda 	bl	80031c0 <HAL_DMA_Init>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8002a12:	f7ff ff22 	bl	800285a <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a06      	ldr	r2, [pc, #24]	@ (8002a34 <HAL_TIM_PWM_MspInit+0xa0>)
 8002a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a1c:	4a05      	ldr	r2, [pc, #20]	@ (8002a34 <HAL_TIM_PWM_MspInit+0xa0>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40000800 	.word	0x40000800
 8002a30:	40023800 	.word	0x40023800
 8002a34:	20000648 	.word	0x20000648
 8002a38:	400260b8 	.word	0x400260b8

08002a3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 030c 	add.w	r3, r7, #12
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a12      	ldr	r2, [pc, #72]	@ (8002aa4 <HAL_TIM_MspPostInit+0x68>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d11e      	bne.n	8002a9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	4b11      	ldr	r3, [pc, #68]	@ (8002aa8 <HAL_TIM_MspPostInit+0x6c>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	4a10      	ldr	r2, [pc, #64]	@ (8002aa8 <HAL_TIM_MspPostInit+0x6c>)
 8002a68:	f043 0308 	orr.w	r3, r3, #8
 8002a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa8 <HAL_TIM_MspPostInit+0x6c>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002a7a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a90:	f107 030c 	add.w	r3, r7, #12
 8002a94:	4619      	mov	r1, r3
 8002a96:	4805      	ldr	r0, [pc, #20]	@ (8002aac <HAL_TIM_MspPostInit+0x70>)
 8002a98:	f000 ff94 	bl	80039c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a9c:	bf00      	nop
 8002a9e:	3720      	adds	r7, #32
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40020c00 	.word	0x40020c00

08002ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08c      	sub	sp, #48	@ 0x30
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 031c 	add.w	r3, r7, #28
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a78      	ldr	r2, [pc, #480]	@ (8002cb0 <HAL_UART_MspInit+0x200>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	f040 8082 	bne.w	8002bd8 <HAL_UART_MspInit+0x128>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	4b76      	ldr	r3, [pc, #472]	@ (8002cb4 <HAL_UART_MspInit+0x204>)
 8002ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002adc:	4a75      	ldr	r2, [pc, #468]	@ (8002cb4 <HAL_UART_MspInit+0x204>)
 8002ade:	f043 0310 	orr.w	r3, r3, #16
 8002ae2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ae4:	4b73      	ldr	r3, [pc, #460]	@ (8002cb4 <HAL_UART_MspInit+0x204>)
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	4b6f      	ldr	r3, [pc, #444]	@ (8002cb4 <HAL_UART_MspInit+0x204>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af8:	4a6e      	ldr	r2, [pc, #440]	@ (8002cb4 <HAL_UART_MspInit+0x204>)
 8002afa:	f043 0302 	orr.w	r3, r3, #2
 8002afe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b00:	4b6c      	ldr	r3, [pc, #432]	@ (8002cb4 <HAL_UART_MspInit+0x204>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	4b68      	ldr	r3, [pc, #416]	@ (8002cb4 <HAL_UART_MspInit+0x204>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b14:	4a67      	ldr	r2, [pc, #412]	@ (8002cb4 <HAL_UART_MspInit+0x204>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1c:	4b65      	ldr	r3, [pc, #404]	@ (8002cb4 <HAL_UART_MspInit+0x204>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b28:	2380      	movs	r3, #128	@ 0x80
 8002b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b34:	2303      	movs	r3, #3
 8002b36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b38:	2307      	movs	r3, #7
 8002b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3c:	f107 031c 	add.w	r3, r7, #28
 8002b40:	4619      	mov	r1, r3
 8002b42:	485d      	ldr	r0, [pc, #372]	@ (8002cb8 <HAL_UART_MspInit+0x208>)
 8002b44:	f000 ff3e 	bl	80039c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b56:	2303      	movs	r3, #3
 8002b58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5e:	f107 031c 	add.w	r3, r7, #28
 8002b62:	4619      	mov	r1, r3
 8002b64:	4855      	ldr	r0, [pc, #340]	@ (8002cbc <HAL_UART_MspInit+0x20c>)
 8002b66:	f000 ff2d 	bl	80039c4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002b6a:	4b55      	ldr	r3, [pc, #340]	@ (8002cc0 <HAL_UART_MspInit+0x210>)
 8002b6c:	4a55      	ldr	r2, [pc, #340]	@ (8002cc4 <HAL_UART_MspInit+0x214>)
 8002b6e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002b70:	4b53      	ldr	r3, [pc, #332]	@ (8002cc0 <HAL_UART_MspInit+0x210>)
 8002b72:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b76:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b78:	4b51      	ldr	r3, [pc, #324]	@ (8002cc0 <HAL_UART_MspInit+0x210>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b7e:	4b50      	ldr	r3, [pc, #320]	@ (8002cc0 <HAL_UART_MspInit+0x210>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b84:	4b4e      	ldr	r3, [pc, #312]	@ (8002cc0 <HAL_UART_MspInit+0x210>)
 8002b86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b8a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b8c:	4b4c      	ldr	r3, [pc, #304]	@ (8002cc0 <HAL_UART_MspInit+0x210>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b92:	4b4b      	ldr	r3, [pc, #300]	@ (8002cc0 <HAL_UART_MspInit+0x210>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002b98:	4b49      	ldr	r3, [pc, #292]	@ (8002cc0 <HAL_UART_MspInit+0x210>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b9e:	4b48      	ldr	r3, [pc, #288]	@ (8002cc0 <HAL_UART_MspInit+0x210>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ba4:	4b46      	ldr	r3, [pc, #280]	@ (8002cc0 <HAL_UART_MspInit+0x210>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002baa:	4845      	ldr	r0, [pc, #276]	@ (8002cc0 <HAL_UART_MspInit+0x210>)
 8002bac:	f000 fb08 	bl	80031c0 <HAL_DMA_Init>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8002bb6:	f7ff fe50 	bl	800285a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a40      	ldr	r2, [pc, #256]	@ (8002cc0 <HAL_UART_MspInit+0x210>)
 8002bbe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bc0:	4a3f      	ldr	r2, [pc, #252]	@ (8002cc0 <HAL_UART_MspInit+0x210>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2105      	movs	r1, #5
 8002bca:	2025      	movs	r0, #37	@ 0x25
 8002bcc:	f000 fac1 	bl	8003152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bd0:	2025      	movs	r0, #37	@ 0x25
 8002bd2:	f000 fada 	bl	800318a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002bd6:	e067      	b.n	8002ca8 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART6)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a3a      	ldr	r2, [pc, #232]	@ (8002cc8 <HAL_UART_MspInit+0x218>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d162      	bne.n	8002ca8 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	4b33      	ldr	r3, [pc, #204]	@ (8002cb4 <HAL_UART_MspInit+0x204>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bea:	4a32      	ldr	r2, [pc, #200]	@ (8002cb4 <HAL_UART_MspInit+0x204>)
 8002bec:	f043 0320 	orr.w	r3, r3, #32
 8002bf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bf2:	4b30      	ldr	r3, [pc, #192]	@ (8002cb4 <HAL_UART_MspInit+0x204>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb4 <HAL_UART_MspInit+0x204>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	4a2b      	ldr	r2, [pc, #172]	@ (8002cb4 <HAL_UART_MspInit+0x204>)
 8002c08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0e:	4b29      	ldr	r3, [pc, #164]	@ (8002cb4 <HAL_UART_MspInit+0x204>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8002c1a:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8002c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c30:	f107 031c 	add.w	r3, r7, #28
 8002c34:	4619      	mov	r1, r3
 8002c36:	4825      	ldr	r0, [pc, #148]	@ (8002ccc <HAL_UART_MspInit+0x21c>)
 8002c38:	f000 fec4 	bl	80039c4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002c3c:	4b24      	ldr	r3, [pc, #144]	@ (8002cd0 <HAL_UART_MspInit+0x220>)
 8002c3e:	4a25      	ldr	r2, [pc, #148]	@ (8002cd4 <HAL_UART_MspInit+0x224>)
 8002c40:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002c42:	4b23      	ldr	r3, [pc, #140]	@ (8002cd0 <HAL_UART_MspInit+0x220>)
 8002c44:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002c48:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c4a:	4b21      	ldr	r3, [pc, #132]	@ (8002cd0 <HAL_UART_MspInit+0x220>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c50:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd0 <HAL_UART_MspInit+0x220>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c56:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd0 <HAL_UART_MspInit+0x220>)
 8002c58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c5c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd0 <HAL_UART_MspInit+0x220>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c64:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd0 <HAL_UART_MspInit+0x220>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002c6a:	4b19      	ldr	r3, [pc, #100]	@ (8002cd0 <HAL_UART_MspInit+0x220>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c70:	4b17      	ldr	r3, [pc, #92]	@ (8002cd0 <HAL_UART_MspInit+0x220>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c76:	4b16      	ldr	r3, [pc, #88]	@ (8002cd0 <HAL_UART_MspInit+0x220>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002c7c:	4814      	ldr	r0, [pc, #80]	@ (8002cd0 <HAL_UART_MspInit+0x220>)
 8002c7e:	f000 fa9f 	bl	80031c0 <HAL_DMA_Init>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8002c88:	f7ff fde7 	bl	800285a <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a10      	ldr	r2, [pc, #64]	@ (8002cd0 <HAL_UART_MspInit+0x220>)
 8002c90:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c92:	4a0f      	ldr	r2, [pc, #60]	@ (8002cd0 <HAL_UART_MspInit+0x220>)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2105      	movs	r1, #5
 8002c9c:	2047      	movs	r0, #71	@ 0x47
 8002c9e:	f000 fa58 	bl	8003152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002ca2:	2047      	movs	r0, #71	@ 0x47
 8002ca4:	f000 fa71 	bl	800318a <HAL_NVIC_EnableIRQ>
}
 8002ca8:	bf00      	nop
 8002caa:	3730      	adds	r7, #48	@ 0x30
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40011000 	.word	0x40011000
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40020400 	.word	0x40020400
 8002cbc:	40020000 	.word	0x40020000
 8002cc0:	20000738 	.word	0x20000738
 8002cc4:	40026440 	.word	0x40026440
 8002cc8:	40011400 	.word	0x40011400
 8002ccc:	40021800 	.word	0x40021800
 8002cd0:	20000798 	.word	0x20000798
 8002cd4:	40026428 	.word	0x40026428

08002cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cdc:	bf00      	nop
 8002cde:	e7fd      	b.n	8002cdc <NMI_Handler+0x4>

08002ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ce4:	bf00      	nop
 8002ce6:	e7fd      	b.n	8002ce4 <HardFault_Handler+0x4>

08002ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cec:	bf00      	nop
 8002cee:	e7fd      	b.n	8002cec <MemManage_Handler+0x4>

08002cf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cf4:	bf00      	nop
 8002cf6:	e7fd      	b.n	8002cf4 <BusFault_Handler+0x4>

08002cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cfc:	bf00      	nop
 8002cfe:	e7fd      	b.n	8002cfc <UsageFault_Handler+0x4>

08002d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d12:	f000 f8ff 	bl	8002f14 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002d16:	f006 f9bb 	bl	8009090 <xTaskGetSchedulerState>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d001      	beq.n	8002d24 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002d20:	f006 ffb2 	bl	8009c88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d24:	bf00      	nop
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d2c:	4802      	ldr	r0, [pc, #8]	@ (8002d38 <USART1_IRQHandler+0x10>)
 8002d2e:	f003 fb71 	bl	8006414 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	200006a8 	.word	0x200006a8

08002d3c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002d40:	4802      	ldr	r0, [pc, #8]	@ (8002d4c <DMA1_Stream7_IRQHandler+0x10>)
 8002d42:	f000 fbd5 	bl	80034f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000648 	.word	0x20000648

08002d50 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002d54:	4802      	ldr	r0, [pc, #8]	@ (8002d60 <DMA2_Stream1_IRQHandler+0x10>)
 8002d56:	f000 fbcb 	bl	80034f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000798 	.word	0x20000798

08002d64 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d68:	4802      	ldr	r0, [pc, #8]	@ (8002d74 <DMA2_Stream2_IRQHandler+0x10>)
 8002d6a:	f000 fbc1 	bl	80034f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000738 	.word	0x20000738

08002d78 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002d7c:	4802      	ldr	r0, [pc, #8]	@ (8002d88 <USART6_IRQHandler+0x10>)
 8002d7e:	f003 fb49 	bl	8006414 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	200006f0 	.word	0x200006f0

08002d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d94:	4a14      	ldr	r2, [pc, #80]	@ (8002de8 <_sbrk+0x5c>)
 8002d96:	4b15      	ldr	r3, [pc, #84]	@ (8002dec <_sbrk+0x60>)
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002da0:	4b13      	ldr	r3, [pc, #76]	@ (8002df0 <_sbrk+0x64>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002da8:	4b11      	ldr	r3, [pc, #68]	@ (8002df0 <_sbrk+0x64>)
 8002daa:	4a12      	ldr	r2, [pc, #72]	@ (8002df4 <_sbrk+0x68>)
 8002dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dae:	4b10      	ldr	r3, [pc, #64]	@ (8002df0 <_sbrk+0x64>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d207      	bcs.n	8002dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dbc:	f007 fa0c 	bl	800a1d8 <__errno>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	220c      	movs	r2, #12
 8002dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dca:	e009      	b.n	8002de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dcc:	4b08      	ldr	r3, [pc, #32]	@ (8002df0 <_sbrk+0x64>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dd2:	4b07      	ldr	r3, [pc, #28]	@ (8002df0 <_sbrk+0x64>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	4a05      	ldr	r2, [pc, #20]	@ (8002df0 <_sbrk+0x64>)
 8002ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dde:	68fb      	ldr	r3, [r7, #12]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20020000 	.word	0x20020000
 8002dec:	00000400 	.word	0x00000400
 8002df0:	20000800 	.word	0x20000800
 8002df4:	200052a0 	.word	0x200052a0

08002df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dfc:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <SystemInit+0x20>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e02:	4a05      	ldr	r2, [pc, #20]	@ (8002e18 <SystemInit+0x20>)
 8002e04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	e000ed00 	.word	0xe000ed00

08002e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e20:	f7ff ffea 	bl	8002df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e24:	480c      	ldr	r0, [pc, #48]	@ (8002e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e26:	490d      	ldr	r1, [pc, #52]	@ (8002e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e28:	4a0d      	ldr	r2, [pc, #52]	@ (8002e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e2c:	e002      	b.n	8002e34 <LoopCopyDataInit>

08002e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e32:	3304      	adds	r3, #4

08002e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e38:	d3f9      	bcc.n	8002e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e3c:	4c0a      	ldr	r4, [pc, #40]	@ (8002e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e40:	e001      	b.n	8002e46 <LoopFillZerobss>

08002e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e44:	3204      	adds	r2, #4

08002e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e48:	d3fb      	bcc.n	8002e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e4a:	f007 f9cb 	bl	800a1e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e4e:	f7ff fa07 	bl	8002260 <main>
  bx  lr    
 8002e52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e5c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002e60:	0800adcc 	.word	0x0800adcc
  ldr r2, =_sbss
 8002e64:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002e68:	200052a0 	.word	0x200052a0

08002e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e6c:	e7fe      	b.n	8002e6c <ADC_IRQHandler>
	...

08002e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e74:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb0 <HAL_Init+0x40>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb0 <HAL_Init+0x40>)
 8002e7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e80:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb0 <HAL_Init+0x40>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb0 <HAL_Init+0x40>)
 8002e86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e8c:	4b08      	ldr	r3, [pc, #32]	@ (8002eb0 <HAL_Init+0x40>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a07      	ldr	r2, [pc, #28]	@ (8002eb0 <HAL_Init+0x40>)
 8002e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e98:	2003      	movs	r0, #3
 8002e9a:	f000 f94f 	bl	800313c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e9e:	200f      	movs	r0, #15
 8002ea0:	f000 f808 	bl	8002eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ea4:	f7ff fce0 	bl	8002868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023c00 	.word	0x40023c00

08002eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ebc:	4b12      	ldr	r3, [pc, #72]	@ (8002f08 <HAL_InitTick+0x54>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b12      	ldr	r3, [pc, #72]	@ (8002f0c <HAL_InitTick+0x58>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 f967 	bl	80031a6 <HAL_SYSTICK_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e00e      	b.n	8002f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b0f      	cmp	r3, #15
 8002ee6:	d80a      	bhi.n	8002efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ef0:	f000 f92f 	bl	8003152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ef4:	4a06      	ldr	r2, [pc, #24]	@ (8002f10 <HAL_InitTick+0x5c>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20000004 	.word	0x20000004
 8002f0c:	2000000c 	.word	0x2000000c
 8002f10:	20000008 	.word	0x20000008

08002f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f18:	4b06      	ldr	r3, [pc, #24]	@ (8002f34 <HAL_IncTick+0x20>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <HAL_IncTick+0x24>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	4a04      	ldr	r2, [pc, #16]	@ (8002f38 <HAL_IncTick+0x24>)
 8002f26:	6013      	str	r3, [r2, #0]
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	2000000c 	.word	0x2000000c
 8002f38:	20000804 	.word	0x20000804

08002f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f40:	4b03      	ldr	r3, [pc, #12]	@ (8002f50 <HAL_GetTick+0x14>)
 8002f42:	681b      	ldr	r3, [r3, #0]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	20000804 	.word	0x20000804

08002f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f5c:	f7ff ffee 	bl	8002f3c <HAL_GetTick>
 8002f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f6c:	d005      	beq.n	8002f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f98 <HAL_Delay+0x44>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4413      	add	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f7a:	bf00      	nop
 8002f7c:	f7ff ffde 	bl	8002f3c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d8f7      	bhi.n	8002f7c <HAL_Delay+0x28>
  {
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	2000000c 	.word	0x2000000c

08002f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fac:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fb8:	4013      	ands	r3, r2
 8002fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fce:	4a04      	ldr	r2, [pc, #16]	@ (8002fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	60d3      	str	r3, [r2, #12]
}
 8002fd4:	bf00      	nop
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fe8:	4b04      	ldr	r3, [pc, #16]	@ (8002ffc <__NVIC_GetPriorityGrouping+0x18>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	0a1b      	lsrs	r3, r3, #8
 8002fee:	f003 0307 	and.w	r3, r3, #7
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	2b00      	cmp	r3, #0
 8003010:	db0b      	blt.n	800302a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	f003 021f 	and.w	r2, r3, #31
 8003018:	4907      	ldr	r1, [pc, #28]	@ (8003038 <__NVIC_EnableIRQ+0x38>)
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	2001      	movs	r0, #1
 8003022:	fa00 f202 	lsl.w	r2, r0, r2
 8003026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000e100 	.word	0xe000e100

0800303c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	6039      	str	r1, [r7, #0]
 8003046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304c:	2b00      	cmp	r3, #0
 800304e:	db0a      	blt.n	8003066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	490c      	ldr	r1, [pc, #48]	@ (8003088 <__NVIC_SetPriority+0x4c>)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	0112      	lsls	r2, r2, #4
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	440b      	add	r3, r1
 8003060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003064:	e00a      	b.n	800307c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	4908      	ldr	r1, [pc, #32]	@ (800308c <__NVIC_SetPriority+0x50>)
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	3b04      	subs	r3, #4
 8003074:	0112      	lsls	r2, r2, #4
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	440b      	add	r3, r1
 800307a:	761a      	strb	r2, [r3, #24]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	e000e100 	.word	0xe000e100
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003090:	b480      	push	{r7}
 8003092:	b089      	sub	sp, #36	@ 0x24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f1c3 0307 	rsb	r3, r3, #7
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	bf28      	it	cs
 80030ae:	2304      	movcs	r3, #4
 80030b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3304      	adds	r3, #4
 80030b6:	2b06      	cmp	r3, #6
 80030b8:	d902      	bls.n	80030c0 <NVIC_EncodePriority+0x30>
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3b03      	subs	r3, #3
 80030be:	e000      	b.n	80030c2 <NVIC_EncodePriority+0x32>
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43da      	mvns	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	401a      	ands	r2, r3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	fa01 f303 	lsl.w	r3, r1, r3
 80030e2:	43d9      	mvns	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e8:	4313      	orrs	r3, r2
         );
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3724      	adds	r7, #36	@ 0x24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3b01      	subs	r3, #1
 8003104:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003108:	d301      	bcc.n	800310e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800310a:	2301      	movs	r3, #1
 800310c:	e00f      	b.n	800312e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800310e:	4a0a      	ldr	r2, [pc, #40]	@ (8003138 <SysTick_Config+0x40>)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3b01      	subs	r3, #1
 8003114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003116:	210f      	movs	r1, #15
 8003118:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800311c:	f7ff ff8e 	bl	800303c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003120:	4b05      	ldr	r3, [pc, #20]	@ (8003138 <SysTick_Config+0x40>)
 8003122:	2200      	movs	r2, #0
 8003124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003126:	4b04      	ldr	r3, [pc, #16]	@ (8003138 <SysTick_Config+0x40>)
 8003128:	2207      	movs	r2, #7
 800312a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	e000e010 	.word	0xe000e010

0800313c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ff29 	bl	8002f9c <__NVIC_SetPriorityGrouping>
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003152:	b580      	push	{r7, lr}
 8003154:	b086      	sub	sp, #24
 8003156:	af00      	add	r7, sp, #0
 8003158:	4603      	mov	r3, r0
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003164:	f7ff ff3e 	bl	8002fe4 <__NVIC_GetPriorityGrouping>
 8003168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	6978      	ldr	r0, [r7, #20]
 8003170:	f7ff ff8e 	bl	8003090 <NVIC_EncodePriority>
 8003174:	4602      	mov	r2, r0
 8003176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ff5d 	bl	800303c <__NVIC_SetPriority>
}
 8003182:	bf00      	nop
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	4603      	mov	r3, r0
 8003192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ff31 	bl	8003000 <__NVIC_EnableIRQ>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff ffa2 	bl	80030f8 <SysTick_Config>
 80031b4:	4603      	mov	r3, r0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031cc:	f7ff feb6 	bl	8002f3c <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e099      	b.n	8003310 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0201 	bic.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031fc:	e00f      	b.n	800321e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031fe:	f7ff fe9d 	bl	8002f3c <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b05      	cmp	r3, #5
 800320a:	d908      	bls.n	800321e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2220      	movs	r2, #32
 8003210:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2203      	movs	r2, #3
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e078      	b.n	8003310 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e8      	bne.n	80031fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	4b38      	ldr	r3, [pc, #224]	@ (8003318 <HAL_DMA_Init+0x158>)
 8003238:	4013      	ands	r3, r2
 800323a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800324a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003256:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003262:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	2b04      	cmp	r3, #4
 8003276:	d107      	bne.n	8003288 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003280:	4313      	orrs	r3, r2
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f023 0307 	bic.w	r3, r3, #7
 800329e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d117      	bne.n	80032e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00e      	beq.n	80032e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fb01 	bl	80038cc <DMA_CheckFifoParam>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2240      	movs	r2, #64	@ 0x40
 80032d4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80032de:	2301      	movs	r3, #1
 80032e0:	e016      	b.n	8003310 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fab8 	bl	8003860 <DMA_CalcBaseAndBitshift>
 80032f0:	4603      	mov	r3, r0
 80032f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f8:	223f      	movs	r2, #63	@ 0x3f
 80032fa:	409a      	lsls	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	f010803f 	.word	0xf010803f

0800331c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003332:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_DMA_Start_IT+0x26>
 800333e:	2302      	movs	r3, #2
 8003340:	e040      	b.n	80033c4 <HAL_DMA_Start_IT+0xa8>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b01      	cmp	r3, #1
 8003354:	d12f      	bne.n	80033b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2202      	movs	r2, #2
 800335a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 fa4a 	bl	8003804 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003374:	223f      	movs	r2, #63	@ 0x3f
 8003376:	409a      	lsls	r2, r3
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0216 	orr.w	r2, r2, #22
 800338a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0208 	orr.w	r2, r2, #8
 80033a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0201 	orr.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	e005      	b.n	80033c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033be:	2302      	movs	r3, #2
 80033c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033da:	f7ff fdaf 	bl	8002f3c <HAL_GetTick>
 80033de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d008      	beq.n	80033fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2280      	movs	r2, #128	@ 0x80
 80033f0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e052      	b.n	80034a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0216 	bic.w	r2, r2, #22
 800340c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695a      	ldr	r2, [r3, #20]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800341c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	d103      	bne.n	800342e <HAL_DMA_Abort+0x62>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800342a:	2b00      	cmp	r3, #0
 800342c:	d007      	beq.n	800343e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0208 	bic.w	r2, r2, #8
 800343c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0201 	bic.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800344e:	e013      	b.n	8003478 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003450:	f7ff fd74 	bl	8002f3c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b05      	cmp	r3, #5
 800345c:	d90c      	bls.n	8003478 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2203      	movs	r2, #3
 8003468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e015      	b.n	80034a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1e4      	bne.n	8003450 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348a:	223f      	movs	r2, #63	@ 0x3f
 800348c:	409a      	lsls	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d004      	beq.n	80034ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2280      	movs	r2, #128	@ 0x80
 80034c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e00c      	b.n	80034e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2205      	movs	r2, #5
 80034ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0201 	bic.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034fc:	4b8e      	ldr	r3, [pc, #568]	@ (8003738 <HAL_DMA_IRQHandler+0x248>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a8e      	ldr	r2, [pc, #568]	@ (800373c <HAL_DMA_IRQHandler+0x24c>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	0a9b      	lsrs	r3, r3, #10
 8003508:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351a:	2208      	movs	r2, #8
 800351c:	409a      	lsls	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d01a      	beq.n	800355c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d013      	beq.n	800355c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0204 	bic.w	r2, r2, #4
 8003542:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003548:	2208      	movs	r2, #8
 800354a:	409a      	lsls	r2, r3
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003554:	f043 0201 	orr.w	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003560:	2201      	movs	r2, #1
 8003562:	409a      	lsls	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4013      	ands	r3, r2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d012      	beq.n	8003592 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00b      	beq.n	8003592 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357e:	2201      	movs	r2, #1
 8003580:	409a      	lsls	r2, r3
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358a:	f043 0202 	orr.w	r2, r3, #2
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003596:	2204      	movs	r2, #4
 8003598:	409a      	lsls	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4013      	ands	r3, r2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d012      	beq.n	80035c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00b      	beq.n	80035c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b4:	2204      	movs	r2, #4
 80035b6:	409a      	lsls	r2, r3
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c0:	f043 0204 	orr.w	r2, r3, #4
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035cc:	2210      	movs	r2, #16
 80035ce:	409a      	lsls	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d043      	beq.n	8003660 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d03c      	beq.n	8003660 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ea:	2210      	movs	r2, #16
 80035ec:	409a      	lsls	r2, r3
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d018      	beq.n	8003632 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d108      	bne.n	8003620 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	d024      	beq.n	8003660 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	4798      	blx	r3
 800361e:	e01f      	b.n	8003660 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003624:	2b00      	cmp	r3, #0
 8003626:	d01b      	beq.n	8003660 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	4798      	blx	r3
 8003630:	e016      	b.n	8003660 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d107      	bne.n	8003650 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0208 	bic.w	r2, r2, #8
 800364e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003664:	2220      	movs	r2, #32
 8003666:	409a      	lsls	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 808f 	beq.w	8003790 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 8087 	beq.w	8003790 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003686:	2220      	movs	r2, #32
 8003688:	409a      	lsls	r2, r3
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b05      	cmp	r3, #5
 8003698:	d136      	bne.n	8003708 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0216 	bic.w	r2, r2, #22
 80036a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695a      	ldr	r2, [r3, #20]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d103      	bne.n	80036ca <HAL_DMA_IRQHandler+0x1da>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d007      	beq.n	80036da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0208 	bic.w	r2, r2, #8
 80036d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036de:	223f      	movs	r2, #63	@ 0x3f
 80036e0:	409a      	lsls	r2, r3
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d07e      	beq.n	80037fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	4798      	blx	r3
        }
        return;
 8003706:	e079      	b.n	80037fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d01d      	beq.n	8003752 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10d      	bne.n	8003740 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003728:	2b00      	cmp	r3, #0
 800372a:	d031      	beq.n	8003790 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
 8003734:	e02c      	b.n	8003790 <HAL_DMA_IRQHandler+0x2a0>
 8003736:	bf00      	nop
 8003738:	20000004 	.word	0x20000004
 800373c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d023      	beq.n	8003790 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
 8003750:	e01e      	b.n	8003790 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10f      	bne.n	8003780 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0210 	bic.w	r2, r2, #16
 800376e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003794:	2b00      	cmp	r3, #0
 8003796:	d032      	beq.n	80037fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d022      	beq.n	80037ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2205      	movs	r2, #5
 80037a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	3301      	adds	r3, #1
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d307      	bcc.n	80037d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f2      	bne.n	80037bc <HAL_DMA_IRQHandler+0x2cc>
 80037d6:	e000      	b.n	80037da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	4798      	blx	r3
 80037fa:	e000      	b.n	80037fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80037fc:	bf00      	nop
    }
  }
}
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003820:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b40      	cmp	r3, #64	@ 0x40
 8003830:	d108      	bne.n	8003844 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003842:	e007      	b.n	8003854 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	60da      	str	r2, [r3, #12]
}
 8003854:	bf00      	nop
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	3b10      	subs	r3, #16
 8003870:	4a14      	ldr	r2, [pc, #80]	@ (80038c4 <DMA_CalcBaseAndBitshift+0x64>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	091b      	lsrs	r3, r3, #4
 8003878:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800387a:	4a13      	ldr	r2, [pc, #76]	@ (80038c8 <DMA_CalcBaseAndBitshift+0x68>)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b03      	cmp	r3, #3
 800388c:	d909      	bls.n	80038a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003896:	f023 0303 	bic.w	r3, r3, #3
 800389a:	1d1a      	adds	r2, r3, #4
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	659a      	str	r2, [r3, #88]	@ 0x58
 80038a0:	e007      	b.n	80038b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	aaaaaaab 	.word	0xaaaaaaab
 80038c8:	0800ad80 	.word	0x0800ad80

080038cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d11f      	bne.n	8003926 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d856      	bhi.n	800399a <DMA_CheckFifoParam+0xce>
 80038ec:	a201      	add	r2, pc, #4	@ (adr r2, 80038f4 <DMA_CheckFifoParam+0x28>)
 80038ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f2:	bf00      	nop
 80038f4:	08003905 	.word	0x08003905
 80038f8:	08003917 	.word	0x08003917
 80038fc:	08003905 	.word	0x08003905
 8003900:	0800399b 	.word	0x0800399b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003908:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d046      	beq.n	800399e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003914:	e043      	b.n	800399e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800391e:	d140      	bne.n	80039a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003924:	e03d      	b.n	80039a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800392e:	d121      	bne.n	8003974 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b03      	cmp	r3, #3
 8003934:	d837      	bhi.n	80039a6 <DMA_CheckFifoParam+0xda>
 8003936:	a201      	add	r2, pc, #4	@ (adr r2, 800393c <DMA_CheckFifoParam+0x70>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	0800394d 	.word	0x0800394d
 8003940:	08003953 	.word	0x08003953
 8003944:	0800394d 	.word	0x0800394d
 8003948:	08003965 	.word	0x08003965
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
      break;
 8003950:	e030      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003956:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d025      	beq.n	80039aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003962:	e022      	b.n	80039aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003968:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800396c:	d11f      	bne.n	80039ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003972:	e01c      	b.n	80039ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d903      	bls.n	8003982 <DMA_CheckFifoParam+0xb6>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d003      	beq.n	8003988 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003980:	e018      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
      break;
 8003986:	e015      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00e      	beq.n	80039b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	73fb      	strb	r3, [r7, #15]
      break;
 8003998:	e00b      	b.n	80039b2 <DMA_CheckFifoParam+0xe6>
      break;
 800399a:	bf00      	nop
 800399c:	e00a      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      break;
 800399e:	bf00      	nop
 80039a0:	e008      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      break;
 80039a2:	bf00      	nop
 80039a4:	e006      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      break;
 80039a6:	bf00      	nop
 80039a8:	e004      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      break;
 80039aa:	bf00      	nop
 80039ac:	e002      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80039ae:	bf00      	nop
 80039b0:	e000      	b.n	80039b4 <DMA_CheckFifoParam+0xe8>
      break;
 80039b2:	bf00      	nop
    }
  } 
  
  return status; 
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop

080039c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b089      	sub	sp, #36	@ 0x24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	e16b      	b.n	8003cb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039e0:	2201      	movs	r2, #1
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4013      	ands	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	f040 815a 	bne.w	8003cb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d005      	beq.n	8003a16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d130      	bne.n	8003a78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	2203      	movs	r2, #3
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43db      	mvns	r3, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f003 0201 	and.w	r2, r3, #1
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d017      	beq.n	8003ab4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	2203      	movs	r2, #3
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d123      	bne.n	8003b08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	08da      	lsrs	r2, r3, #3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3208      	adds	r2, #8
 8003ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	220f      	movs	r2, #15
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	08da      	lsrs	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3208      	adds	r2, #8
 8003b02:	69b9      	ldr	r1, [r7, #24]
 8003b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	2203      	movs	r2, #3
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 0203 	and.w	r2, r3, #3
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80b4 	beq.w	8003cb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	4b60      	ldr	r3, [pc, #384]	@ (8003cd0 <HAL_GPIO_Init+0x30c>)
 8003b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b52:	4a5f      	ldr	r2, [pc, #380]	@ (8003cd0 <HAL_GPIO_Init+0x30c>)
 8003b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b5a:	4b5d      	ldr	r3, [pc, #372]	@ (8003cd0 <HAL_GPIO_Init+0x30c>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b66:	4a5b      	ldr	r2, [pc, #364]	@ (8003cd4 <HAL_GPIO_Init+0x310>)
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	089b      	lsrs	r3, r3, #2
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	220f      	movs	r2, #15
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4013      	ands	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a52      	ldr	r2, [pc, #328]	@ (8003cd8 <HAL_GPIO_Init+0x314>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d02b      	beq.n	8003bea <HAL_GPIO_Init+0x226>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a51      	ldr	r2, [pc, #324]	@ (8003cdc <HAL_GPIO_Init+0x318>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d025      	beq.n	8003be6 <HAL_GPIO_Init+0x222>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a50      	ldr	r2, [pc, #320]	@ (8003ce0 <HAL_GPIO_Init+0x31c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d01f      	beq.n	8003be2 <HAL_GPIO_Init+0x21e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a4f      	ldr	r2, [pc, #316]	@ (8003ce4 <HAL_GPIO_Init+0x320>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d019      	beq.n	8003bde <HAL_GPIO_Init+0x21a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a4e      	ldr	r2, [pc, #312]	@ (8003ce8 <HAL_GPIO_Init+0x324>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d013      	beq.n	8003bda <HAL_GPIO_Init+0x216>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a4d      	ldr	r2, [pc, #308]	@ (8003cec <HAL_GPIO_Init+0x328>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00d      	beq.n	8003bd6 <HAL_GPIO_Init+0x212>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a4c      	ldr	r2, [pc, #304]	@ (8003cf0 <HAL_GPIO_Init+0x32c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d007      	beq.n	8003bd2 <HAL_GPIO_Init+0x20e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a4b      	ldr	r2, [pc, #300]	@ (8003cf4 <HAL_GPIO_Init+0x330>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <HAL_GPIO_Init+0x20a>
 8003bca:	2307      	movs	r3, #7
 8003bcc:	e00e      	b.n	8003bec <HAL_GPIO_Init+0x228>
 8003bce:	2308      	movs	r3, #8
 8003bd0:	e00c      	b.n	8003bec <HAL_GPIO_Init+0x228>
 8003bd2:	2306      	movs	r3, #6
 8003bd4:	e00a      	b.n	8003bec <HAL_GPIO_Init+0x228>
 8003bd6:	2305      	movs	r3, #5
 8003bd8:	e008      	b.n	8003bec <HAL_GPIO_Init+0x228>
 8003bda:	2304      	movs	r3, #4
 8003bdc:	e006      	b.n	8003bec <HAL_GPIO_Init+0x228>
 8003bde:	2303      	movs	r3, #3
 8003be0:	e004      	b.n	8003bec <HAL_GPIO_Init+0x228>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e002      	b.n	8003bec <HAL_GPIO_Init+0x228>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <HAL_GPIO_Init+0x228>
 8003bea:	2300      	movs	r3, #0
 8003bec:	69fa      	ldr	r2, [r7, #28]
 8003bee:	f002 0203 	and.w	r2, r2, #3
 8003bf2:	0092      	lsls	r2, r2, #2
 8003bf4:	4093      	lsls	r3, r2
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bfc:	4935      	ldr	r1, [pc, #212]	@ (8003cd4 <HAL_GPIO_Init+0x310>)
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	089b      	lsrs	r3, r3, #2
 8003c02:	3302      	adds	r3, #2
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf8 <HAL_GPIO_Init+0x334>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	43db      	mvns	r3, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4013      	ands	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c2e:	4a32      	ldr	r2, [pc, #200]	@ (8003cf8 <HAL_GPIO_Init+0x334>)
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c34:	4b30      	ldr	r3, [pc, #192]	@ (8003cf8 <HAL_GPIO_Init+0x334>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c58:	4a27      	ldr	r2, [pc, #156]	@ (8003cf8 <HAL_GPIO_Init+0x334>)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c5e:	4b26      	ldr	r3, [pc, #152]	@ (8003cf8 <HAL_GPIO_Init+0x334>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	43db      	mvns	r3, r3
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c82:	4a1d      	ldr	r2, [pc, #116]	@ (8003cf8 <HAL_GPIO_Init+0x334>)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c88:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf8 <HAL_GPIO_Init+0x334>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	43db      	mvns	r3, r3
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4013      	ands	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cac:	4a12      	ldr	r2, [pc, #72]	@ (8003cf8 <HAL_GPIO_Init+0x334>)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	61fb      	str	r3, [r7, #28]
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	2b0f      	cmp	r3, #15
 8003cbc:	f67f ae90 	bls.w	80039e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cc0:	bf00      	nop
 8003cc2:	bf00      	nop
 8003cc4:	3724      	adds	r7, #36	@ 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40013800 	.word	0x40013800
 8003cd8:	40020000 	.word	0x40020000
 8003cdc:	40020400 	.word	0x40020400
 8003ce0:	40020800 	.word	0x40020800
 8003ce4:	40020c00 	.word	0x40020c00
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40021400 	.word	0x40021400
 8003cf0:	40021800 	.word	0x40021800
 8003cf4:	40021c00 	.word	0x40021c00
 8003cf8:	40013c00 	.word	0x40013c00

08003cfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	887b      	ldrh	r3, [r7, #2]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
 8003d18:	e001      	b.n	8003d1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	807b      	strh	r3, [r7, #2]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d3c:	787b      	ldrb	r3, [r7, #1]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d42:	887a      	ldrh	r2, [r7, #2]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d48:	e003      	b.n	8003d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d4a:	887b      	ldrh	r3, [r7, #2]
 8003d4c:	041a      	lsls	r2, r3, #16
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	619a      	str	r2, [r3, #24]
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e12b      	b.n	8003fca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fe fd9a 	bl	80028c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2224      	movs	r2, #36	@ 0x24
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0201 	bic.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003db2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dc4:	f001 fc20 	bl	8005608 <HAL_RCC_GetPCLK1Freq>
 8003dc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4a81      	ldr	r2, [pc, #516]	@ (8003fd4 <HAL_I2C_Init+0x274>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d807      	bhi.n	8003de4 <HAL_I2C_Init+0x84>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4a80      	ldr	r2, [pc, #512]	@ (8003fd8 <HAL_I2C_Init+0x278>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	bf94      	ite	ls
 8003ddc:	2301      	movls	r3, #1
 8003dde:	2300      	movhi	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	e006      	b.n	8003df2 <HAL_I2C_Init+0x92>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4a7d      	ldr	r2, [pc, #500]	@ (8003fdc <HAL_I2C_Init+0x27c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	bf94      	ite	ls
 8003dec:	2301      	movls	r3, #1
 8003dee:	2300      	movhi	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e0e7      	b.n	8003fca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4a78      	ldr	r2, [pc, #480]	@ (8003fe0 <HAL_I2C_Init+0x280>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	0c9b      	lsrs	r3, r3, #18
 8003e04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	4a6a      	ldr	r2, [pc, #424]	@ (8003fd4 <HAL_I2C_Init+0x274>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d802      	bhi.n	8003e34 <HAL_I2C_Init+0xd4>
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	3301      	adds	r3, #1
 8003e32:	e009      	b.n	8003e48 <HAL_I2C_Init+0xe8>
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e3a:	fb02 f303 	mul.w	r3, r2, r3
 8003e3e:	4a69      	ldr	r2, [pc, #420]	@ (8003fe4 <HAL_I2C_Init+0x284>)
 8003e40:	fba2 2303 	umull	r2, r3, r2, r3
 8003e44:	099b      	lsrs	r3, r3, #6
 8003e46:	3301      	adds	r3, #1
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003e5a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	495c      	ldr	r1, [pc, #368]	@ (8003fd4 <HAL_I2C_Init+0x274>)
 8003e64:	428b      	cmp	r3, r1
 8003e66:	d819      	bhi.n	8003e9c <HAL_I2C_Init+0x13c>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1e59      	subs	r1, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e76:	1c59      	adds	r1, r3, #1
 8003e78:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e7c:	400b      	ands	r3, r1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <HAL_I2C_Init+0x138>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1e59      	subs	r1, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e90:	3301      	adds	r3, #1
 8003e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e96:	e051      	b.n	8003f3c <HAL_I2C_Init+0x1dc>
 8003e98:	2304      	movs	r3, #4
 8003e9a:	e04f      	b.n	8003f3c <HAL_I2C_Init+0x1dc>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d111      	bne.n	8003ec8 <HAL_I2C_Init+0x168>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	1e58      	subs	r0, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6859      	ldr	r1, [r3, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	440b      	add	r3, r1
 8003eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	e012      	b.n	8003eee <HAL_I2C_Init+0x18e>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	1e58      	subs	r0, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6859      	ldr	r1, [r3, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	0099      	lsls	r1, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ede:	3301      	adds	r3, #1
 8003ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bf0c      	ite	eq
 8003ee8:	2301      	moveq	r3, #1
 8003eea:	2300      	movne	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_I2C_Init+0x196>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e022      	b.n	8003f3c <HAL_I2C_Init+0x1dc>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10e      	bne.n	8003f1c <HAL_I2C_Init+0x1bc>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1e58      	subs	r0, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	460b      	mov	r3, r1
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	440b      	add	r3, r1
 8003f0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f10:	3301      	adds	r3, #1
 8003f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f1a:	e00f      	b.n	8003f3c <HAL_I2C_Init+0x1dc>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	1e58      	subs	r0, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6859      	ldr	r1, [r3, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	0099      	lsls	r1, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f32:	3301      	adds	r3, #1
 8003f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	6809      	ldr	r1, [r1, #0]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69da      	ldr	r2, [r3, #28]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6911      	ldr	r1, [r2, #16]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68d2      	ldr	r2, [r2, #12]
 8003f76:	4311      	orrs	r1, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	000186a0 	.word	0x000186a0
 8003fd8:	001e847f 	.word	0x001e847f
 8003fdc:	003d08ff 	.word	0x003d08ff
 8003fe0:	431bde83 	.word	0x431bde83
 8003fe4:	10624dd3 	.word	0x10624dd3

08003fe8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	817b      	strh	r3, [r7, #10]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	813b      	strh	r3, [r7, #8]
 8003ffe:	4613      	mov	r3, r2
 8004000:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004002:	f7fe ff9b 	bl	8002f3c <HAL_GetTick>
 8004006:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b20      	cmp	r3, #32
 8004012:	f040 80d9 	bne.w	80041c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	2319      	movs	r3, #25
 800401c:	2201      	movs	r2, #1
 800401e:	496d      	ldr	r1, [pc, #436]	@ (80041d4 <HAL_I2C_Mem_Write+0x1ec>)
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 fc8b 	bl	800493c <I2C_WaitOnFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800402c:	2302      	movs	r3, #2
 800402e:	e0cc      	b.n	80041ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_I2C_Mem_Write+0x56>
 800403a:	2302      	movs	r3, #2
 800403c:	e0c5      	b.n	80041ca <HAL_I2C_Mem_Write+0x1e2>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b01      	cmp	r3, #1
 8004052:	d007      	beq.n	8004064 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004072:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2221      	movs	r2, #33	@ 0x21
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2240      	movs	r2, #64	@ 0x40
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a3a      	ldr	r2, [r7, #32]
 800408e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004094:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4a4d      	ldr	r2, [pc, #308]	@ (80041d8 <HAL_I2C_Mem_Write+0x1f0>)
 80040a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040a6:	88f8      	ldrh	r0, [r7, #6]
 80040a8:	893a      	ldrh	r2, [r7, #8]
 80040aa:	8979      	ldrh	r1, [r7, #10]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	9301      	str	r3, [sp, #4]
 80040b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	4603      	mov	r3, r0
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 fac2 	bl	8004640 <I2C_RequestMemoryWrite>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d052      	beq.n	8004168 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e081      	b.n	80041ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fd50 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00d      	beq.n	80040f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d107      	bne.n	80040ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e06b      	b.n	80041ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f6:	781a      	ldrb	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b04      	cmp	r3, #4
 800412e:	d11b      	bne.n	8004168 <HAL_I2C_Mem_Write+0x180>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004134:	2b00      	cmp	r3, #0
 8004136:	d017      	beq.n	8004168 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	781a      	ldrb	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1aa      	bne.n	80040c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fd43 	bl	8004c00 <I2C_WaitOnBTFFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00d      	beq.n	800419c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004184:	2b04      	cmp	r3, #4
 8004186:	d107      	bne.n	8004198 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004196:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e016      	b.n	80041ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	e000      	b.n	80041ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80041c8:	2302      	movs	r3, #2
  }
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	00100002 	.word	0x00100002
 80041d8:	ffff0000 	.word	0xffff0000

080041dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08c      	sub	sp, #48	@ 0x30
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	4608      	mov	r0, r1
 80041e6:	4611      	mov	r1, r2
 80041e8:	461a      	mov	r2, r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	817b      	strh	r3, [r7, #10]
 80041ee:	460b      	mov	r3, r1
 80041f0:	813b      	strh	r3, [r7, #8]
 80041f2:	4613      	mov	r3, r2
 80041f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041f6:	f7fe fea1 	bl	8002f3c <HAL_GetTick>
 80041fa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b20      	cmp	r3, #32
 8004206:	f040 8214 	bne.w	8004632 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	2319      	movs	r3, #25
 8004210:	2201      	movs	r2, #1
 8004212:	497b      	ldr	r1, [pc, #492]	@ (8004400 <HAL_I2C_Mem_Read+0x224>)
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 fb91 	bl	800493c <I2C_WaitOnFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004220:	2302      	movs	r3, #2
 8004222:	e207      	b.n	8004634 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_I2C_Mem_Read+0x56>
 800422e:	2302      	movs	r3, #2
 8004230:	e200      	b.n	8004634 <HAL_I2C_Mem_Read+0x458>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d007      	beq.n	8004258 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004266:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2222      	movs	r2, #34	@ 0x22
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2240      	movs	r2, #64	@ 0x40
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004282:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004288:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4a5b      	ldr	r2, [pc, #364]	@ (8004404 <HAL_I2C_Mem_Read+0x228>)
 8004298:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800429a:	88f8      	ldrh	r0, [r7, #6]
 800429c:	893a      	ldrh	r2, [r7, #8]
 800429e:	8979      	ldrh	r1, [r7, #10]
 80042a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	4603      	mov	r3, r0
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 fa5e 	bl	800476c <I2C_RequestMemoryRead>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e1bc      	b.n	8004634 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d113      	bne.n	80042ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c2:	2300      	movs	r3, #0
 80042c4:	623b      	str	r3, [r7, #32]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	623b      	str	r3, [r7, #32]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	623b      	str	r3, [r7, #32]
 80042d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	e190      	b.n	800460c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d11b      	bne.n	800432a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004300:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	e170      	b.n	800460c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800432e:	2b02      	cmp	r3, #2
 8004330:	d11b      	bne.n	800436a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004340:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004350:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004352:	2300      	movs	r3, #0
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	e150      	b.n	800460c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004380:	e144      	b.n	800460c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004386:	2b03      	cmp	r3, #3
 8004388:	f200 80f1 	bhi.w	800456e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004390:	2b01      	cmp	r3, #1
 8004392:	d123      	bne.n	80043dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004396:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 fc79 	bl	8004c90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e145      	b.n	8004634 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043da:	e117      	b.n	800460c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d14e      	bne.n	8004482 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ea:	2200      	movs	r2, #0
 80043ec:	4906      	ldr	r1, [pc, #24]	@ (8004408 <HAL_I2C_Mem_Read+0x22c>)
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 faa4 	bl	800493c <I2C_WaitOnFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d008      	beq.n	800440c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e11a      	b.n	8004634 <HAL_I2C_Mem_Read+0x458>
 80043fe:	bf00      	nop
 8004400:	00100002 	.word	0x00100002
 8004404:	ffff0000 	.word	0xffff0000
 8004408:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800441a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004480:	e0c4      	b.n	800460c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004488:	2200      	movs	r2, #0
 800448a:	496c      	ldr	r1, [pc, #432]	@ (800463c <HAL_I2C_Mem_Read+0x460>)
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 fa55 	bl	800493c <I2C_WaitOnFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0cb      	b.n	8004634 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e4:	2200      	movs	r2, #0
 80044e6:	4955      	ldr	r1, [pc, #340]	@ (800463c <HAL_I2C_Mem_Read+0x460>)
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fa27 	bl	800493c <I2C_WaitOnFlagUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e09d      	b.n	8004634 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004506:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800456c:	e04e      	b.n	800460c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800456e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004570:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 fb8c 	bl	8004c90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e058      	b.n	8004634 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d124      	bne.n	800460c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d107      	bne.n	80045da <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045d8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004610:	2b00      	cmp	r3, #0
 8004612:	f47f aeb6 	bne.w	8004382 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	e000      	b.n	8004634 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004632:	2302      	movs	r3, #2
  }
}
 8004634:	4618      	mov	r0, r3
 8004636:	3728      	adds	r7, #40	@ 0x28
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	00010004 	.word	0x00010004

08004640 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af02      	add	r7, sp, #8
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	4608      	mov	r0, r1
 800464a:	4611      	mov	r1, r2
 800464c:	461a      	mov	r2, r3
 800464e:	4603      	mov	r3, r0
 8004650:	817b      	strh	r3, [r7, #10]
 8004652:	460b      	mov	r3, r1
 8004654:	813b      	strh	r3, [r7, #8]
 8004656:	4613      	mov	r3, r2
 8004658:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004668:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	2200      	movs	r2, #0
 8004672:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f960 	bl	800493c <I2C_WaitOnFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00d      	beq.n	800469e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800468c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004690:	d103      	bne.n	800469a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004698:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e05f      	b.n	800475e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800469e:	897b      	ldrh	r3, [r7, #10]
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	461a      	mov	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	6a3a      	ldr	r2, [r7, #32]
 80046b2:	492d      	ldr	r1, [pc, #180]	@ (8004768 <I2C_RequestMemoryWrite+0x128>)
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f9bb 	bl	8004a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e04c      	b.n	800475e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046dc:	6a39      	ldr	r1, [r7, #32]
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 fa46 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00d      	beq.n	8004706 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d107      	bne.n	8004702 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004700:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e02b      	b.n	800475e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004706:	88fb      	ldrh	r3, [r7, #6]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d105      	bne.n	8004718 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800470c:	893b      	ldrh	r3, [r7, #8]
 800470e:	b2da      	uxtb	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	611a      	str	r2, [r3, #16]
 8004716:	e021      	b.n	800475c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004718:	893b      	ldrh	r3, [r7, #8]
 800471a:	0a1b      	lsrs	r3, r3, #8
 800471c:	b29b      	uxth	r3, r3
 800471e:	b2da      	uxtb	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004728:	6a39      	ldr	r1, [r7, #32]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fa20 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00d      	beq.n	8004752 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473a:	2b04      	cmp	r3, #4
 800473c:	d107      	bne.n	800474e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800474c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e005      	b.n	800475e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004752:	893b      	ldrh	r3, [r7, #8]
 8004754:	b2da      	uxtb	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	00010002 	.word	0x00010002

0800476c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af02      	add	r7, sp, #8
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	4608      	mov	r0, r1
 8004776:	4611      	mov	r1, r2
 8004778:	461a      	mov	r2, r3
 800477a:	4603      	mov	r3, r0
 800477c:	817b      	strh	r3, [r7, #10]
 800477e:	460b      	mov	r3, r1
 8004780:	813b      	strh	r3, [r7, #8]
 8004782:	4613      	mov	r3, r2
 8004784:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004794:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f8c2 	bl	800493c <I2C_WaitOnFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00d      	beq.n	80047da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047cc:	d103      	bne.n	80047d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e0aa      	b.n	8004930 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047da:	897b      	ldrh	r3, [r7, #10]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	461a      	mov	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	6a3a      	ldr	r2, [r7, #32]
 80047ee:	4952      	ldr	r1, [pc, #328]	@ (8004938 <I2C_RequestMemoryRead+0x1cc>)
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 f91d 	bl	8004a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e097      	b.n	8004930 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004800:	2300      	movs	r3, #0
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004818:	6a39      	ldr	r1, [r7, #32]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f9a8 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00d      	beq.n	8004842 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482a:	2b04      	cmp	r3, #4
 800482c:	d107      	bne.n	800483e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800483c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e076      	b.n	8004930 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d105      	bne.n	8004854 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004848:	893b      	ldrh	r3, [r7, #8]
 800484a:	b2da      	uxtb	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	611a      	str	r2, [r3, #16]
 8004852:	e021      	b.n	8004898 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004854:	893b      	ldrh	r3, [r7, #8]
 8004856:	0a1b      	lsrs	r3, r3, #8
 8004858:	b29b      	uxth	r3, r3
 800485a:	b2da      	uxtb	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004864:	6a39      	ldr	r1, [r7, #32]
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f982 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00d      	beq.n	800488e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	2b04      	cmp	r3, #4
 8004878:	d107      	bne.n	800488a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004888:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e050      	b.n	8004930 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800488e:	893b      	ldrh	r3, [r7, #8]
 8004890:	b2da      	uxtb	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800489a:	6a39      	ldr	r1, [r7, #32]
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f967 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00d      	beq.n	80048c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d107      	bne.n	80048c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e035      	b.n	8004930 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	2200      	movs	r2, #0
 80048dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f82b 	bl	800493c <I2C_WaitOnFlagUntilTimeout>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00d      	beq.n	8004908 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048fa:	d103      	bne.n	8004904 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004902:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e013      	b.n	8004930 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004908:	897b      	ldrh	r3, [r7, #10]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	f043 0301 	orr.w	r3, r3, #1
 8004910:	b2da      	uxtb	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491a:	6a3a      	ldr	r2, [r7, #32]
 800491c:	4906      	ldr	r1, [pc, #24]	@ (8004938 <I2C_RequestMemoryRead+0x1cc>)
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 f886 	bl	8004a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	00010002 	.word	0x00010002

0800493c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	4613      	mov	r3, r2
 800494a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800494c:	e048      	b.n	80049e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004954:	d044      	beq.n	80049e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004956:	f7fe faf1 	bl	8002f3c <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d302      	bcc.n	800496c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d139      	bne.n	80049e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	0c1b      	lsrs	r3, r3, #16
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b01      	cmp	r3, #1
 8004974:	d10d      	bne.n	8004992 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	43da      	mvns	r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	4013      	ands	r3, r2
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	bf0c      	ite	eq
 8004988:	2301      	moveq	r3, #1
 800498a:	2300      	movne	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	461a      	mov	r2, r3
 8004990:	e00c      	b.n	80049ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	43da      	mvns	r2, r3
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	4013      	ands	r3, r2
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	bf0c      	ite	eq
 80049a4:	2301      	moveq	r3, #1
 80049a6:	2300      	movne	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	461a      	mov	r2, r3
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d116      	bne.n	80049e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	f043 0220 	orr.w	r2, r3, #32
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e023      	b.n	8004a28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	0c1b      	lsrs	r3, r3, #16
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d10d      	bne.n	8004a06 <I2C_WaitOnFlagUntilTimeout+0xca>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	43da      	mvns	r2, r3
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	4013      	ands	r3, r2
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	bf0c      	ite	eq
 80049fc:	2301      	moveq	r3, #1
 80049fe:	2300      	movne	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	461a      	mov	r2, r3
 8004a04:	e00c      	b.n	8004a20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	43da      	mvns	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	4013      	ands	r3, r2
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bf0c      	ite	eq
 8004a18:	2301      	moveq	r3, #1
 8004a1a:	2300      	movne	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d093      	beq.n	800494e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a3e:	e071      	b.n	8004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a4e:	d123      	bne.n	8004a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a84:	f043 0204 	orr.w	r2, r3, #4
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e067      	b.n	8004b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a9e:	d041      	beq.n	8004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa0:	f7fe fa4c 	bl	8002f3c <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d302      	bcc.n	8004ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d136      	bne.n	8004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	0c1b      	lsrs	r3, r3, #16
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d10c      	bne.n	8004ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	43da      	mvns	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4013      	ands	r3, r2
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	bf14      	ite	ne
 8004ad2:	2301      	movne	r3, #1
 8004ad4:	2300      	moveq	r3, #0
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	e00b      	b.n	8004af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	43da      	mvns	r2, r3
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	bf14      	ite	ne
 8004aec:	2301      	movne	r3, #1
 8004aee:	2300      	moveq	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d016      	beq.n	8004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b10:	f043 0220 	orr.w	r2, r3, #32
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e021      	b.n	8004b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	0c1b      	lsrs	r3, r3, #16
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d10c      	bne.n	8004b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	43da      	mvns	r2, r3
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	bf14      	ite	ne
 8004b40:	2301      	movne	r3, #1
 8004b42:	2300      	moveq	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	e00b      	b.n	8004b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	43da      	mvns	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	4013      	ands	r3, r2
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	bf14      	ite	ne
 8004b5a:	2301      	movne	r3, #1
 8004b5c:	2300      	moveq	r3, #0
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f47f af6d 	bne.w	8004a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b7c:	e034      	b.n	8004be8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 f8e3 	bl	8004d4a <I2C_IsAcknowledgeFailed>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e034      	b.n	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b94:	d028      	beq.n	8004be8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b96:	f7fe f9d1 	bl	8002f3c <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d302      	bcc.n	8004bac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d11d      	bne.n	8004be8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb6:	2b80      	cmp	r3, #128	@ 0x80
 8004bb8:	d016      	beq.n	8004be8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd4:	f043 0220 	orr.w	r2, r3, #32
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e007      	b.n	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf2:	2b80      	cmp	r3, #128	@ 0x80
 8004bf4:	d1c3      	bne.n	8004b7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c0c:	e034      	b.n	8004c78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 f89b 	bl	8004d4a <I2C_IsAcknowledgeFailed>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e034      	b.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c24:	d028      	beq.n	8004c78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c26:	f7fe f989 	bl	8002f3c <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d302      	bcc.n	8004c3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d11d      	bne.n	8004c78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	d016      	beq.n	8004c78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c64:	f043 0220 	orr.w	r2, r3, #32
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e007      	b.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d1c3      	bne.n	8004c0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c9c:	e049      	b.n	8004d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	d119      	bne.n	8004ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0210 	mvn.w	r2, #16
 8004cb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e030      	b.n	8004d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce0:	f7fe f92c 	bl	8002f3c <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d302      	bcc.n	8004cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d11d      	bne.n	8004d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d00:	2b40      	cmp	r3, #64	@ 0x40
 8004d02:	d016      	beq.n	8004d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1e:	f043 0220 	orr.w	r2, r3, #32
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e007      	b.n	8004d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3c:	2b40      	cmp	r3, #64	@ 0x40
 8004d3e:	d1ae      	bne.n	8004c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d60:	d11b      	bne.n	8004d9a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d6a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d86:	f043 0204 	orr.w	r2, r3, #4
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e267      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d075      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004dc6:	4b88      	ldr	r3, [pc, #544]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d00c      	beq.n	8004dec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dd2:	4b85      	ldr	r3, [pc, #532]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d112      	bne.n	8004e04 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dde:	4b82      	ldr	r3, [pc, #520]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004de6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dea:	d10b      	bne.n	8004e04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dec:	4b7e      	ldr	r3, [pc, #504]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d05b      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x108>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d157      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e242      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e0c:	d106      	bne.n	8004e1c <HAL_RCC_OscConfig+0x74>
 8004e0e:	4b76      	ldr	r3, [pc, #472]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a75      	ldr	r2, [pc, #468]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	e01d      	b.n	8004e58 <HAL_RCC_OscConfig+0xb0>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e24:	d10c      	bne.n	8004e40 <HAL_RCC_OscConfig+0x98>
 8004e26:	4b70      	ldr	r3, [pc, #448]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a6f      	ldr	r2, [pc, #444]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	4b6d      	ldr	r3, [pc, #436]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a6c      	ldr	r2, [pc, #432]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	e00b      	b.n	8004e58 <HAL_RCC_OscConfig+0xb0>
 8004e40:	4b69      	ldr	r3, [pc, #420]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a68      	ldr	r2, [pc, #416]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	4b66      	ldr	r3, [pc, #408]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a65      	ldr	r2, [pc, #404]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d013      	beq.n	8004e88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e60:	f7fe f86c 	bl	8002f3c <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e68:	f7fe f868 	bl	8002f3c <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b64      	cmp	r3, #100	@ 0x64
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e207      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7a:	4b5b      	ldr	r3, [pc, #364]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0xc0>
 8004e86:	e014      	b.n	8004eb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e88:	f7fe f858 	bl	8002f3c <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e90:	f7fe f854 	bl	8002f3c <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b64      	cmp	r3, #100	@ 0x64
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e1f3      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ea2:	4b51      	ldr	r3, [pc, #324]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f0      	bne.n	8004e90 <HAL_RCC_OscConfig+0xe8>
 8004eae:	e000      	b.n	8004eb2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d063      	beq.n	8004f86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ebe:	4b4a      	ldr	r3, [pc, #296]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 030c 	and.w	r3, r3, #12
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00b      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eca:	4b47      	ldr	r3, [pc, #284]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d11c      	bne.n	8004f10 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ed6:	4b44      	ldr	r3, [pc, #272]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d116      	bne.n	8004f10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ee2:	4b41      	ldr	r3, [pc, #260]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d005      	beq.n	8004efa <HAL_RCC_OscConfig+0x152>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d001      	beq.n	8004efa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e1c7      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004efa:	4b3b      	ldr	r3, [pc, #236]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	4937      	ldr	r1, [pc, #220]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f0e:	e03a      	b.n	8004f86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d020      	beq.n	8004f5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f18:	4b34      	ldr	r3, [pc, #208]	@ (8004fec <HAL_RCC_OscConfig+0x244>)
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1e:	f7fe f80d 	bl	8002f3c <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f26:	f7fe f809 	bl	8002f3c <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e1a8      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f38:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0f0      	beq.n	8004f26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f44:	4b28      	ldr	r3, [pc, #160]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	4925      	ldr	r1, [pc, #148]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	600b      	str	r3, [r1, #0]
 8004f58:	e015      	b.n	8004f86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f5a:	4b24      	ldr	r3, [pc, #144]	@ (8004fec <HAL_RCC_OscConfig+0x244>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f60:	f7fd ffec 	bl	8002f3c <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f68:	f7fd ffe8 	bl	8002f3c <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e187      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f0      	bne.n	8004f68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d036      	beq.n	8005000 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d016      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f9a:	4b15      	ldr	r3, [pc, #84]	@ (8004ff0 <HAL_RCC_OscConfig+0x248>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa0:	f7fd ffcc 	bl	8002f3c <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa8:	f7fd ffc8 	bl	8002f3c <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e167      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fba:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe8 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f0      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x200>
 8004fc6:	e01b      	b.n	8005000 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fc8:	4b09      	ldr	r3, [pc, #36]	@ (8004ff0 <HAL_RCC_OscConfig+0x248>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fce:	f7fd ffb5 	bl	8002f3c <HAL_GetTick>
 8004fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fd4:	e00e      	b.n	8004ff4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fd6:	f7fd ffb1 	bl	8002f3c <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d907      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e150      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	42470000 	.word	0x42470000
 8004ff0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ff4:	4b88      	ldr	r3, [pc, #544]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 8004ff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1ea      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 8097 	beq.w	800513c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800500e:	2300      	movs	r3, #0
 8005010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005012:	4b81      	ldr	r3, [pc, #516]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10f      	bne.n	800503e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800501e:	2300      	movs	r3, #0
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	4b7d      	ldr	r3, [pc, #500]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 8005024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005026:	4a7c      	ldr	r2, [pc, #496]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 8005028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800502c:	6413      	str	r3, [r2, #64]	@ 0x40
 800502e:	4b7a      	ldr	r3, [pc, #488]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005036:	60bb      	str	r3, [r7, #8]
 8005038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800503a:	2301      	movs	r3, #1
 800503c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503e:	4b77      	ldr	r3, [pc, #476]	@ (800521c <HAL_RCC_OscConfig+0x474>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d118      	bne.n	800507c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800504a:	4b74      	ldr	r3, [pc, #464]	@ (800521c <HAL_RCC_OscConfig+0x474>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a73      	ldr	r2, [pc, #460]	@ (800521c <HAL_RCC_OscConfig+0x474>)
 8005050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005056:	f7fd ff71 	bl	8002f3c <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800505c:	e008      	b.n	8005070 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800505e:	f7fd ff6d 	bl	8002f3c <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e10c      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005070:	4b6a      	ldr	r3, [pc, #424]	@ (800521c <HAL_RCC_OscConfig+0x474>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0f0      	beq.n	800505e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d106      	bne.n	8005092 <HAL_RCC_OscConfig+0x2ea>
 8005084:	4b64      	ldr	r3, [pc, #400]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 8005086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005088:	4a63      	ldr	r2, [pc, #396]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005090:	e01c      	b.n	80050cc <HAL_RCC_OscConfig+0x324>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	2b05      	cmp	r3, #5
 8005098:	d10c      	bne.n	80050b4 <HAL_RCC_OscConfig+0x30c>
 800509a:	4b5f      	ldr	r3, [pc, #380]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 800509c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509e:	4a5e      	ldr	r2, [pc, #376]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 80050a0:	f043 0304 	orr.w	r3, r3, #4
 80050a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a6:	4b5c      	ldr	r3, [pc, #368]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 80050a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050aa:	4a5b      	ldr	r2, [pc, #364]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 80050ac:	f043 0301 	orr.w	r3, r3, #1
 80050b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80050b2:	e00b      	b.n	80050cc <HAL_RCC_OscConfig+0x324>
 80050b4:	4b58      	ldr	r3, [pc, #352]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 80050b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b8:	4a57      	ldr	r2, [pc, #348]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 80050ba:	f023 0301 	bic.w	r3, r3, #1
 80050be:	6713      	str	r3, [r2, #112]	@ 0x70
 80050c0:	4b55      	ldr	r3, [pc, #340]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 80050c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c4:	4a54      	ldr	r2, [pc, #336]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 80050c6:	f023 0304 	bic.w	r3, r3, #4
 80050ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d015      	beq.n	8005100 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d4:	f7fd ff32 	bl	8002f3c <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050da:	e00a      	b.n	80050f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050dc:	f7fd ff2e 	bl	8002f3c <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e0cb      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f2:	4b49      	ldr	r3, [pc, #292]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 80050f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0ee      	beq.n	80050dc <HAL_RCC_OscConfig+0x334>
 80050fe:	e014      	b.n	800512a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005100:	f7fd ff1c 	bl	8002f3c <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005106:	e00a      	b.n	800511e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005108:	f7fd ff18 	bl	8002f3c <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005116:	4293      	cmp	r3, r2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e0b5      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800511e:	4b3e      	ldr	r3, [pc, #248]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 8005120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1ee      	bne.n	8005108 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800512a:	7dfb      	ldrb	r3, [r7, #23]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d105      	bne.n	800513c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005130:	4b39      	ldr	r3, [pc, #228]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 8005132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005134:	4a38      	ldr	r2, [pc, #224]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 8005136:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800513a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 80a1 	beq.w	8005288 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005146:	4b34      	ldr	r3, [pc, #208]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 030c 	and.w	r3, r3, #12
 800514e:	2b08      	cmp	r3, #8
 8005150:	d05c      	beq.n	800520c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	2b02      	cmp	r3, #2
 8005158:	d141      	bne.n	80051de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800515a:	4b31      	ldr	r3, [pc, #196]	@ (8005220 <HAL_RCC_OscConfig+0x478>)
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005160:	f7fd feec 	bl	8002f3c <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005168:	f7fd fee8 	bl	8002f3c <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e087      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800517a:	4b27      	ldr	r3, [pc, #156]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1f0      	bne.n	8005168 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69da      	ldr	r2, [r3, #28]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005194:	019b      	lsls	r3, r3, #6
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519c:	085b      	lsrs	r3, r3, #1
 800519e:	3b01      	subs	r3, #1
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a8:	061b      	lsls	r3, r3, #24
 80051aa:	491b      	ldr	r1, [pc, #108]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005220 <HAL_RCC_OscConfig+0x478>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b6:	f7fd fec1 	bl	8002f3c <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051be:	f7fd febd 	bl	8002f3c <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e05c      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051d0:	4b11      	ldr	r3, [pc, #68]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0f0      	beq.n	80051be <HAL_RCC_OscConfig+0x416>
 80051dc:	e054      	b.n	8005288 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051de:	4b10      	ldr	r3, [pc, #64]	@ (8005220 <HAL_RCC_OscConfig+0x478>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e4:	f7fd feaa 	bl	8002f3c <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ec:	f7fd fea6 	bl	8002f3c <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e045      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051fe:	4b06      	ldr	r3, [pc, #24]	@ (8005218 <HAL_RCC_OscConfig+0x470>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1f0      	bne.n	80051ec <HAL_RCC_OscConfig+0x444>
 800520a:	e03d      	b.n	8005288 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d107      	bne.n	8005224 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e038      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
 8005218:	40023800 	.word	0x40023800
 800521c:	40007000 	.word	0x40007000
 8005220:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005224:	4b1b      	ldr	r3, [pc, #108]	@ (8005294 <HAL_RCC_OscConfig+0x4ec>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d028      	beq.n	8005284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800523c:	429a      	cmp	r2, r3
 800523e:	d121      	bne.n	8005284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800524a:	429a      	cmp	r2, r3
 800524c:	d11a      	bne.n	8005284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005254:	4013      	ands	r3, r2
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800525a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800525c:	4293      	cmp	r3, r2
 800525e:	d111      	bne.n	8005284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526a:	085b      	lsrs	r3, r3, #1
 800526c:	3b01      	subs	r3, #1
 800526e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005270:	429a      	cmp	r2, r3
 8005272:	d107      	bne.n	8005284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005280:	429a      	cmp	r2, r3
 8005282:	d001      	beq.n	8005288 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e000      	b.n	800528a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40023800 	.word	0x40023800

08005298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e0cc      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052ac:	4b68      	ldr	r3, [pc, #416]	@ (8005450 <HAL_RCC_ClockConfig+0x1b8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d90c      	bls.n	80052d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ba:	4b65      	ldr	r3, [pc, #404]	@ (8005450 <HAL_RCC_ClockConfig+0x1b8>)
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c2:	4b63      	ldr	r3, [pc, #396]	@ (8005450 <HAL_RCC_ClockConfig+0x1b8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d001      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e0b8      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d020      	beq.n	8005322 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052ec:	4b59      	ldr	r3, [pc, #356]	@ (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	4a58      	ldr	r2, [pc, #352]	@ (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 80052f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005304:	4b53      	ldr	r3, [pc, #332]	@ (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	4a52      	ldr	r2, [pc, #328]	@ (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800530e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005310:	4b50      	ldr	r3, [pc, #320]	@ (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	494d      	ldr	r1, [pc, #308]	@ (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	4313      	orrs	r3, r2
 8005320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d044      	beq.n	80053b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d107      	bne.n	8005346 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005336:	4b47      	ldr	r3, [pc, #284]	@ (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d119      	bne.n	8005376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e07f      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2b02      	cmp	r3, #2
 800534c:	d003      	beq.n	8005356 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005352:	2b03      	cmp	r3, #3
 8005354:	d107      	bne.n	8005366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005356:	4b3f      	ldr	r3, [pc, #252]	@ (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e06f      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005366:	4b3b      	ldr	r3, [pc, #236]	@ (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e067      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005376:	4b37      	ldr	r3, [pc, #220]	@ (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f023 0203 	bic.w	r2, r3, #3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	4934      	ldr	r1, [pc, #208]	@ (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005384:	4313      	orrs	r3, r2
 8005386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005388:	f7fd fdd8 	bl	8002f3c <HAL_GetTick>
 800538c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800538e:	e00a      	b.n	80053a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005390:	f7fd fdd4 	bl	8002f3c <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800539e:	4293      	cmp	r3, r2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e04f      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a6:	4b2b      	ldr	r3, [pc, #172]	@ (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 020c 	and.w	r2, r3, #12
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d1eb      	bne.n	8005390 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053b8:	4b25      	ldr	r3, [pc, #148]	@ (8005450 <HAL_RCC_ClockConfig+0x1b8>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d20c      	bcs.n	80053e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053c6:	4b22      	ldr	r3, [pc, #136]	@ (8005450 <HAL_RCC_ClockConfig+0x1b8>)
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ce:	4b20      	ldr	r3, [pc, #128]	@ (8005450 <HAL_RCC_ClockConfig+0x1b8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d001      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e032      	b.n	8005446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d008      	beq.n	80053fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ec:	4b19      	ldr	r3, [pc, #100]	@ (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	4916      	ldr	r1, [pc, #88]	@ (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0308 	and.w	r3, r3, #8
 8005406:	2b00      	cmp	r3, #0
 8005408:	d009      	beq.n	800541e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800540a:	4b12      	ldr	r3, [pc, #72]	@ (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	490e      	ldr	r1, [pc, #56]	@ (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 800541a:	4313      	orrs	r3, r2
 800541c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800541e:	f000 f821 	bl	8005464 <HAL_RCC_GetSysClockFreq>
 8005422:	4602      	mov	r2, r0
 8005424:	4b0b      	ldr	r3, [pc, #44]	@ (8005454 <HAL_RCC_ClockConfig+0x1bc>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	091b      	lsrs	r3, r3, #4
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	490a      	ldr	r1, [pc, #40]	@ (8005458 <HAL_RCC_ClockConfig+0x1c0>)
 8005430:	5ccb      	ldrb	r3, [r1, r3]
 8005432:	fa22 f303 	lsr.w	r3, r2, r3
 8005436:	4a09      	ldr	r2, [pc, #36]	@ (800545c <HAL_RCC_ClockConfig+0x1c4>)
 8005438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800543a:	4b09      	ldr	r3, [pc, #36]	@ (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f7fd fd38 	bl	8002eb4 <HAL_InitTick>

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	40023c00 	.word	0x40023c00
 8005454:	40023800 	.word	0x40023800
 8005458:	0800ad68 	.word	0x0800ad68
 800545c:	20000004 	.word	0x20000004
 8005460:	20000008 	.word	0x20000008

08005464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005468:	b090      	sub	sp, #64	@ 0x40
 800546a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800547c:	4b59      	ldr	r3, [pc, #356]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f003 030c 	and.w	r3, r3, #12
 8005484:	2b08      	cmp	r3, #8
 8005486:	d00d      	beq.n	80054a4 <HAL_RCC_GetSysClockFreq+0x40>
 8005488:	2b08      	cmp	r3, #8
 800548a:	f200 80a1 	bhi.w	80055d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <HAL_RCC_GetSysClockFreq+0x34>
 8005492:	2b04      	cmp	r3, #4
 8005494:	d003      	beq.n	800549e <HAL_RCC_GetSysClockFreq+0x3a>
 8005496:	e09b      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005498:	4b53      	ldr	r3, [pc, #332]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800549a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800549c:	e09b      	b.n	80055d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800549e:	4b53      	ldr	r3, [pc, #332]	@ (80055ec <HAL_RCC_GetSysClockFreq+0x188>)
 80054a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054a2:	e098      	b.n	80055d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054a4:	4b4f      	ldr	r3, [pc, #316]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054ae:	4b4d      	ldr	r3, [pc, #308]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d028      	beq.n	800550c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ba:	4b4a      	ldr	r3, [pc, #296]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	099b      	lsrs	r3, r3, #6
 80054c0:	2200      	movs	r2, #0
 80054c2:	623b      	str	r3, [r7, #32]
 80054c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80054cc:	2100      	movs	r1, #0
 80054ce:	4b47      	ldr	r3, [pc, #284]	@ (80055ec <HAL_RCC_GetSysClockFreq+0x188>)
 80054d0:	fb03 f201 	mul.w	r2, r3, r1
 80054d4:	2300      	movs	r3, #0
 80054d6:	fb00 f303 	mul.w	r3, r0, r3
 80054da:	4413      	add	r3, r2
 80054dc:	4a43      	ldr	r2, [pc, #268]	@ (80055ec <HAL_RCC_GetSysClockFreq+0x188>)
 80054de:	fba0 1202 	umull	r1, r2, r0, r2
 80054e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054e4:	460a      	mov	r2, r1
 80054e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80054e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054ea:	4413      	add	r3, r2
 80054ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f0:	2200      	movs	r2, #0
 80054f2:	61bb      	str	r3, [r7, #24]
 80054f4:	61fa      	str	r2, [r7, #28]
 80054f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80054fe:	f7fb f9bd 	bl	800087c <__aeabi_uldivmod>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4613      	mov	r3, r2
 8005508:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800550a:	e053      	b.n	80055b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800550c:	4b35      	ldr	r3, [pc, #212]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	099b      	lsrs	r3, r3, #6
 8005512:	2200      	movs	r2, #0
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	617a      	str	r2, [r7, #20]
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800551e:	f04f 0b00 	mov.w	fp, #0
 8005522:	4652      	mov	r2, sl
 8005524:	465b      	mov	r3, fp
 8005526:	f04f 0000 	mov.w	r0, #0
 800552a:	f04f 0100 	mov.w	r1, #0
 800552e:	0159      	lsls	r1, r3, #5
 8005530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005534:	0150      	lsls	r0, r2, #5
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	ebb2 080a 	subs.w	r8, r2, sl
 800553e:	eb63 090b 	sbc.w	r9, r3, fp
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800554e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005552:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005556:	ebb2 0408 	subs.w	r4, r2, r8
 800555a:	eb63 0509 	sbc.w	r5, r3, r9
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	00eb      	lsls	r3, r5, #3
 8005568:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800556c:	00e2      	lsls	r2, r4, #3
 800556e:	4614      	mov	r4, r2
 8005570:	461d      	mov	r5, r3
 8005572:	eb14 030a 	adds.w	r3, r4, sl
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	eb45 030b 	adc.w	r3, r5, fp
 800557c:	607b      	str	r3, [r7, #4]
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	f04f 0300 	mov.w	r3, #0
 8005586:	e9d7 4500 	ldrd	r4, r5, [r7]
 800558a:	4629      	mov	r1, r5
 800558c:	028b      	lsls	r3, r1, #10
 800558e:	4621      	mov	r1, r4
 8005590:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005594:	4621      	mov	r1, r4
 8005596:	028a      	lsls	r2, r1, #10
 8005598:	4610      	mov	r0, r2
 800559a:	4619      	mov	r1, r3
 800559c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800559e:	2200      	movs	r2, #0
 80055a0:	60bb      	str	r3, [r7, #8]
 80055a2:	60fa      	str	r2, [r7, #12]
 80055a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055a8:	f7fb f968 	bl	800087c <__aeabi_uldivmod>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4613      	mov	r3, r2
 80055b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80055b4:	4b0b      	ldr	r3, [pc, #44]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	0c1b      	lsrs	r3, r3, #16
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	3301      	adds	r3, #1
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80055c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80055c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80055ce:	e002      	b.n	80055d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055d0:	4b05      	ldr	r3, [pc, #20]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80055d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80055d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3740      	adds	r7, #64	@ 0x40
 80055dc:	46bd      	mov	sp, r7
 80055de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055e2:	bf00      	nop
 80055e4:	40023800 	.word	0x40023800
 80055e8:	00f42400 	.word	0x00f42400
 80055ec:	00b71b00 	.word	0x00b71b00

080055f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055f4:	4b03      	ldr	r3, [pc, #12]	@ (8005604 <HAL_RCC_GetHCLKFreq+0x14>)
 80055f6:	681b      	ldr	r3, [r3, #0]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	20000004 	.word	0x20000004

08005608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800560c:	f7ff fff0 	bl	80055f0 <HAL_RCC_GetHCLKFreq>
 8005610:	4602      	mov	r2, r0
 8005612:	4b05      	ldr	r3, [pc, #20]	@ (8005628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	0a9b      	lsrs	r3, r3, #10
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	4903      	ldr	r1, [pc, #12]	@ (800562c <HAL_RCC_GetPCLK1Freq+0x24>)
 800561e:	5ccb      	ldrb	r3, [r1, r3]
 8005620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005624:	4618      	mov	r0, r3
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40023800 	.word	0x40023800
 800562c:	0800ad78 	.word	0x0800ad78

08005630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005634:	f7ff ffdc 	bl	80055f0 <HAL_RCC_GetHCLKFreq>
 8005638:	4602      	mov	r2, r0
 800563a:	4b05      	ldr	r3, [pc, #20]	@ (8005650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	0b5b      	lsrs	r3, r3, #13
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	4903      	ldr	r1, [pc, #12]	@ (8005654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005646:	5ccb      	ldrb	r3, [r1, r3]
 8005648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800564c:	4618      	mov	r0, r3
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40023800 	.word	0x40023800
 8005654:	0800ad78 	.word	0x0800ad78

08005658 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b01      	cmp	r3, #1
 800566a:	d001      	beq.n	8005670 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e046      	b.n	80056fe <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a23      	ldr	r2, [pc, #140]	@ (800570c <HAL_TIM_Base_Start+0xb4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d022      	beq.n	80056c8 <HAL_TIM_Base_Start+0x70>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800568a:	d01d      	beq.n	80056c8 <HAL_TIM_Base_Start+0x70>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a1f      	ldr	r2, [pc, #124]	@ (8005710 <HAL_TIM_Base_Start+0xb8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d018      	beq.n	80056c8 <HAL_TIM_Base_Start+0x70>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a1e      	ldr	r2, [pc, #120]	@ (8005714 <HAL_TIM_Base_Start+0xbc>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d013      	beq.n	80056c8 <HAL_TIM_Base_Start+0x70>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005718 <HAL_TIM_Base_Start+0xc0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00e      	beq.n	80056c8 <HAL_TIM_Base_Start+0x70>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1b      	ldr	r2, [pc, #108]	@ (800571c <HAL_TIM_Base_Start+0xc4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d009      	beq.n	80056c8 <HAL_TIM_Base_Start+0x70>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a19      	ldr	r2, [pc, #100]	@ (8005720 <HAL_TIM_Base_Start+0xc8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d004      	beq.n	80056c8 <HAL_TIM_Base_Start+0x70>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a18      	ldr	r2, [pc, #96]	@ (8005724 <HAL_TIM_Base_Start+0xcc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d111      	bne.n	80056ec <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b06      	cmp	r3, #6
 80056d8:	d010      	beq.n	80056fc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f042 0201 	orr.w	r2, r2, #1
 80056e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ea:	e007      	b.n	80056fc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	40010000 	.word	0x40010000
 8005710:	40000400 	.word	0x40000400
 8005714:	40000800 	.word	0x40000800
 8005718:	40000c00 	.word	0x40000c00
 800571c:	40010400 	.word	0x40010400
 8005720:	40014000 	.word	0x40014000
 8005724:	40001800 	.word	0x40001800

08005728 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e041      	b.n	80057be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d106      	bne.n	8005754 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fd f920 	bl	8002994 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3304      	adds	r3, #4
 8005764:	4619      	mov	r1, r3
 8005766:	4610      	mov	r0, r2
 8005768:	f000 fa28 	bl	8005bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d109      	bne.n	80057ec <HAL_TIM_PWM_Start+0x24>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	bf14      	ite	ne
 80057e4:	2301      	movne	r3, #1
 80057e6:	2300      	moveq	r3, #0
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	e022      	b.n	8005832 <HAL_TIM_PWM_Start+0x6a>
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d109      	bne.n	8005806 <HAL_TIM_PWM_Start+0x3e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	bf14      	ite	ne
 80057fe:	2301      	movne	r3, #1
 8005800:	2300      	moveq	r3, #0
 8005802:	b2db      	uxtb	r3, r3
 8005804:	e015      	b.n	8005832 <HAL_TIM_PWM_Start+0x6a>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b08      	cmp	r3, #8
 800580a:	d109      	bne.n	8005820 <HAL_TIM_PWM_Start+0x58>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	bf14      	ite	ne
 8005818:	2301      	movne	r3, #1
 800581a:	2300      	moveq	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	e008      	b.n	8005832 <HAL_TIM_PWM_Start+0x6a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b01      	cmp	r3, #1
 800582a:	bf14      	ite	ne
 800582c:	2301      	movne	r3, #1
 800582e:	2300      	moveq	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e07c      	b.n	8005934 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d104      	bne.n	800584a <HAL_TIM_PWM_Start+0x82>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005848:	e013      	b.n	8005872 <HAL_TIM_PWM_Start+0xaa>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b04      	cmp	r3, #4
 800584e:	d104      	bne.n	800585a <HAL_TIM_PWM_Start+0x92>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005858:	e00b      	b.n	8005872 <HAL_TIM_PWM_Start+0xaa>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b08      	cmp	r3, #8
 800585e:	d104      	bne.n	800586a <HAL_TIM_PWM_Start+0xa2>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005868:	e003      	b.n	8005872 <HAL_TIM_PWM_Start+0xaa>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2202      	movs	r2, #2
 800586e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2201      	movs	r2, #1
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fbf4 	bl	8006068 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a2d      	ldr	r2, [pc, #180]	@ (800593c <HAL_TIM_PWM_Start+0x174>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d004      	beq.n	8005894 <HAL_TIM_PWM_Start+0xcc>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a2c      	ldr	r2, [pc, #176]	@ (8005940 <HAL_TIM_PWM_Start+0x178>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d101      	bne.n	8005898 <HAL_TIM_PWM_Start+0xd0>
 8005894:	2301      	movs	r3, #1
 8005896:	e000      	b.n	800589a <HAL_TIM_PWM_Start+0xd2>
 8005898:	2300      	movs	r3, #0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d007      	beq.n	80058ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a22      	ldr	r2, [pc, #136]	@ (800593c <HAL_TIM_PWM_Start+0x174>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d022      	beq.n	80058fe <HAL_TIM_PWM_Start+0x136>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058c0:	d01d      	beq.n	80058fe <HAL_TIM_PWM_Start+0x136>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a1f      	ldr	r2, [pc, #124]	@ (8005944 <HAL_TIM_PWM_Start+0x17c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d018      	beq.n	80058fe <HAL_TIM_PWM_Start+0x136>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005948 <HAL_TIM_PWM_Start+0x180>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d013      	beq.n	80058fe <HAL_TIM_PWM_Start+0x136>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1c      	ldr	r2, [pc, #112]	@ (800594c <HAL_TIM_PWM_Start+0x184>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00e      	beq.n	80058fe <HAL_TIM_PWM_Start+0x136>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a16      	ldr	r2, [pc, #88]	@ (8005940 <HAL_TIM_PWM_Start+0x178>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d009      	beq.n	80058fe <HAL_TIM_PWM_Start+0x136>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a18      	ldr	r2, [pc, #96]	@ (8005950 <HAL_TIM_PWM_Start+0x188>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d004      	beq.n	80058fe <HAL_TIM_PWM_Start+0x136>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a16      	ldr	r2, [pc, #88]	@ (8005954 <HAL_TIM_PWM_Start+0x18c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d111      	bne.n	8005922 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b06      	cmp	r3, #6
 800590e:	d010      	beq.n	8005932 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0201 	orr.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005920:	e007      	b.n	8005932 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 0201 	orr.w	r2, r2, #1
 8005930:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40010000 	.word	0x40010000
 8005940:	40010400 	.word	0x40010400
 8005944:	40000400 	.word	0x40000400
 8005948:	40000800 	.word	0x40000800
 800594c:	40000c00 	.word	0x40000c00
 8005950:	40014000 	.word	0x40014000
 8005954:	40001800 	.word	0x40001800

08005958 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2200      	movs	r2, #0
 8005968:	6839      	ldr	r1, [r7, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fb7c 	bl	8006068 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a2e      	ldr	r2, [pc, #184]	@ (8005a30 <HAL_TIM_PWM_Stop+0xd8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d004      	beq.n	8005984 <HAL_TIM_PWM_Stop+0x2c>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a2d      	ldr	r2, [pc, #180]	@ (8005a34 <HAL_TIM_PWM_Stop+0xdc>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d101      	bne.n	8005988 <HAL_TIM_PWM_Stop+0x30>
 8005984:	2301      	movs	r3, #1
 8005986:	e000      	b.n	800598a <HAL_TIM_PWM_Stop+0x32>
 8005988:	2300      	movs	r3, #0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d017      	beq.n	80059be <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6a1a      	ldr	r2, [r3, #32]
 8005994:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005998:	4013      	ands	r3, r2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10f      	bne.n	80059be <HAL_TIM_PWM_Stop+0x66>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6a1a      	ldr	r2, [r3, #32]
 80059a4:	f240 4344 	movw	r3, #1092	@ 0x444
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d107      	bne.n	80059be <HAL_TIM_PWM_Stop+0x66>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6a1a      	ldr	r2, [r3, #32]
 80059c4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80059c8:	4013      	ands	r3, r2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10f      	bne.n	80059ee <HAL_TIM_PWM_Stop+0x96>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6a1a      	ldr	r2, [r3, #32]
 80059d4:	f240 4344 	movw	r3, #1092	@ 0x444
 80059d8:	4013      	ands	r3, r2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d107      	bne.n	80059ee <HAL_TIM_PWM_Stop+0x96>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0201 	bic.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d104      	bne.n	80059fe <HAL_TIM_PWM_Stop+0xa6>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059fc:	e013      	b.n	8005a26 <HAL_TIM_PWM_Stop+0xce>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d104      	bne.n	8005a0e <HAL_TIM_PWM_Stop+0xb6>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a0c:	e00b      	b.n	8005a26 <HAL_TIM_PWM_Stop+0xce>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d104      	bne.n	8005a1e <HAL_TIM_PWM_Stop+0xc6>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a1c:	e003      	b.n	8005a26 <HAL_TIM_PWM_Stop+0xce>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	40010000 	.word	0x40010000
 8005a34:	40010400 	.word	0x40010400

08005a38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d101      	bne.n	8005a56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a52:	2302      	movs	r3, #2
 8005a54:	e0ae      	b.n	8005bb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b0c      	cmp	r3, #12
 8005a62:	f200 809f 	bhi.w	8005ba4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a66:	a201      	add	r2, pc, #4	@ (adr r2, 8005a6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6c:	08005aa1 	.word	0x08005aa1
 8005a70:	08005ba5 	.word	0x08005ba5
 8005a74:	08005ba5 	.word	0x08005ba5
 8005a78:	08005ba5 	.word	0x08005ba5
 8005a7c:	08005ae1 	.word	0x08005ae1
 8005a80:	08005ba5 	.word	0x08005ba5
 8005a84:	08005ba5 	.word	0x08005ba5
 8005a88:	08005ba5 	.word	0x08005ba5
 8005a8c:	08005b23 	.word	0x08005b23
 8005a90:	08005ba5 	.word	0x08005ba5
 8005a94:	08005ba5 	.word	0x08005ba5
 8005a98:	08005ba5 	.word	0x08005ba5
 8005a9c:	08005b63 	.word	0x08005b63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 f92e 	bl	8005d08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0208 	orr.w	r2, r2, #8
 8005aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0204 	bic.w	r2, r2, #4
 8005aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6999      	ldr	r1, [r3, #24]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	691a      	ldr	r2, [r3, #16]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	619a      	str	r2, [r3, #24]
      break;
 8005ade:	e064      	b.n	8005baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68b9      	ldr	r1, [r7, #8]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 f97e 	bl	8005de8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6999      	ldr	r1, [r3, #24]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	021a      	lsls	r2, r3, #8
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	619a      	str	r2, [r3, #24]
      break;
 8005b20:	e043      	b.n	8005baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 f9d3 	bl	8005ed4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69da      	ldr	r2, [r3, #28]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0208 	orr.w	r2, r2, #8
 8005b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69da      	ldr	r2, [r3, #28]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0204 	bic.w	r2, r2, #4
 8005b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69d9      	ldr	r1, [r3, #28]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	691a      	ldr	r2, [r3, #16]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	61da      	str	r2, [r3, #28]
      break;
 8005b60:	e023      	b.n	8005baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68b9      	ldr	r1, [r7, #8]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fa27 	bl	8005fbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69d9      	ldr	r1, [r3, #28]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	021a      	lsls	r2, r3, #8
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	61da      	str	r2, [r3, #28]
      break;
 8005ba2:	e002      	b.n	8005baa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a43      	ldr	r2, [pc, #268]	@ (8005cdc <TIM_Base_SetConfig+0x120>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d013      	beq.n	8005bfc <TIM_Base_SetConfig+0x40>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bda:	d00f      	beq.n	8005bfc <TIM_Base_SetConfig+0x40>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a40      	ldr	r2, [pc, #256]	@ (8005ce0 <TIM_Base_SetConfig+0x124>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00b      	beq.n	8005bfc <TIM_Base_SetConfig+0x40>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a3f      	ldr	r2, [pc, #252]	@ (8005ce4 <TIM_Base_SetConfig+0x128>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d007      	beq.n	8005bfc <TIM_Base_SetConfig+0x40>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a3e      	ldr	r2, [pc, #248]	@ (8005ce8 <TIM_Base_SetConfig+0x12c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d003      	beq.n	8005bfc <TIM_Base_SetConfig+0x40>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a3d      	ldr	r2, [pc, #244]	@ (8005cec <TIM_Base_SetConfig+0x130>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d108      	bne.n	8005c0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a32      	ldr	r2, [pc, #200]	@ (8005cdc <TIM_Base_SetConfig+0x120>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d02b      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c1c:	d027      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a2f      	ldr	r2, [pc, #188]	@ (8005ce0 <TIM_Base_SetConfig+0x124>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d023      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a2e      	ldr	r2, [pc, #184]	@ (8005ce4 <TIM_Base_SetConfig+0x128>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d01f      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a2d      	ldr	r2, [pc, #180]	@ (8005ce8 <TIM_Base_SetConfig+0x12c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d01b      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a2c      	ldr	r2, [pc, #176]	@ (8005cec <TIM_Base_SetConfig+0x130>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d017      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a2b      	ldr	r2, [pc, #172]	@ (8005cf0 <TIM_Base_SetConfig+0x134>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d013      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a2a      	ldr	r2, [pc, #168]	@ (8005cf4 <TIM_Base_SetConfig+0x138>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00f      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a29      	ldr	r2, [pc, #164]	@ (8005cf8 <TIM_Base_SetConfig+0x13c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00b      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a28      	ldr	r2, [pc, #160]	@ (8005cfc <TIM_Base_SetConfig+0x140>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d007      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a27      	ldr	r2, [pc, #156]	@ (8005d00 <TIM_Base_SetConfig+0x144>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d003      	beq.n	8005c6e <TIM_Base_SetConfig+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a26      	ldr	r2, [pc, #152]	@ (8005d04 <TIM_Base_SetConfig+0x148>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d108      	bne.n	8005c80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a0e      	ldr	r2, [pc, #56]	@ (8005cdc <TIM_Base_SetConfig+0x120>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d003      	beq.n	8005cae <TIM_Base_SetConfig+0xf2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a10      	ldr	r2, [pc, #64]	@ (8005cec <TIM_Base_SetConfig+0x130>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d103      	bne.n	8005cb6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	691a      	ldr	r2, [r3, #16]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f043 0204 	orr.w	r2, r3, #4
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	601a      	str	r2, [r3, #0]
}
 8005cce:	bf00      	nop
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40010000 	.word	0x40010000
 8005ce0:	40000400 	.word	0x40000400
 8005ce4:	40000800 	.word	0x40000800
 8005ce8:	40000c00 	.word	0x40000c00
 8005cec:	40010400 	.word	0x40010400
 8005cf0:	40014000 	.word	0x40014000
 8005cf4:	40014400 	.word	0x40014400
 8005cf8:	40014800 	.word	0x40014800
 8005cfc:	40001800 	.word	0x40001800
 8005d00:	40001c00 	.word	0x40001c00
 8005d04:	40002000 	.word	0x40002000

08005d08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	f023 0201 	bic.w	r2, r3, #1
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0303 	bic.w	r3, r3, #3
 8005d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f023 0302 	bic.w	r3, r3, #2
 8005d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a20      	ldr	r2, [pc, #128]	@ (8005de0 <TIM_OC1_SetConfig+0xd8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d003      	beq.n	8005d6c <TIM_OC1_SetConfig+0x64>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a1f      	ldr	r2, [pc, #124]	@ (8005de4 <TIM_OC1_SetConfig+0xdc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d10c      	bne.n	8005d86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f023 0308 	bic.w	r3, r3, #8
 8005d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f023 0304 	bic.w	r3, r3, #4
 8005d84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a15      	ldr	r2, [pc, #84]	@ (8005de0 <TIM_OC1_SetConfig+0xd8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d003      	beq.n	8005d96 <TIM_OC1_SetConfig+0x8e>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a14      	ldr	r2, [pc, #80]	@ (8005de4 <TIM_OC1_SetConfig+0xdc>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d111      	bne.n	8005dba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	621a      	str	r2, [r3, #32]
}
 8005dd4:	bf00      	nop
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	40010000 	.word	0x40010000
 8005de4:	40010400 	.word	0x40010400

08005de8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	f023 0210 	bic.w	r2, r3, #16
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	021b      	lsls	r3, r3, #8
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f023 0320 	bic.w	r3, r3, #32
 8005e32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	011b      	lsls	r3, r3, #4
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a22      	ldr	r2, [pc, #136]	@ (8005ecc <TIM_OC2_SetConfig+0xe4>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d003      	beq.n	8005e50 <TIM_OC2_SetConfig+0x68>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a21      	ldr	r2, [pc, #132]	@ (8005ed0 <TIM_OC2_SetConfig+0xe8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d10d      	bne.n	8005e6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	011b      	lsls	r3, r3, #4
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a17      	ldr	r2, [pc, #92]	@ (8005ecc <TIM_OC2_SetConfig+0xe4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d003      	beq.n	8005e7c <TIM_OC2_SetConfig+0x94>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a16      	ldr	r2, [pc, #88]	@ (8005ed0 <TIM_OC2_SetConfig+0xe8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d113      	bne.n	8005ea4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	621a      	str	r2, [r3, #32]
}
 8005ebe:	bf00      	nop
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40010000 	.word	0x40010000
 8005ed0:	40010400 	.word	0x40010400

08005ed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0303 	bic.w	r3, r3, #3
 8005f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	021b      	lsls	r3, r3, #8
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a21      	ldr	r2, [pc, #132]	@ (8005fb4 <TIM_OC3_SetConfig+0xe0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d003      	beq.n	8005f3a <TIM_OC3_SetConfig+0x66>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a20      	ldr	r2, [pc, #128]	@ (8005fb8 <TIM_OC3_SetConfig+0xe4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d10d      	bne.n	8005f56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	021b      	lsls	r3, r3, #8
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a16      	ldr	r2, [pc, #88]	@ (8005fb4 <TIM_OC3_SetConfig+0xe0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d003      	beq.n	8005f66 <TIM_OC3_SetConfig+0x92>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a15      	ldr	r2, [pc, #84]	@ (8005fb8 <TIM_OC3_SetConfig+0xe4>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d113      	bne.n	8005f8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	621a      	str	r2, [r3, #32]
}
 8005fa8:	bf00      	nop
 8005faa:	371c      	adds	r7, #28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	40010000 	.word	0x40010000
 8005fb8:	40010400 	.word	0x40010400

08005fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	031b      	lsls	r3, r3, #12
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a12      	ldr	r2, [pc, #72]	@ (8006060 <TIM_OC4_SetConfig+0xa4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d003      	beq.n	8006024 <TIM_OC4_SetConfig+0x68>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a11      	ldr	r2, [pc, #68]	@ (8006064 <TIM_OC4_SetConfig+0xa8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d109      	bne.n	8006038 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800602a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	019b      	lsls	r3, r3, #6
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	4313      	orrs	r3, r2
 8006036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	621a      	str	r2, [r3, #32]
}
 8006052:	bf00      	nop
 8006054:	371c      	adds	r7, #28
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	40010000 	.word	0x40010000
 8006064:	40010400 	.word	0x40010400

08006068 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	2201      	movs	r2, #1
 800607c:	fa02 f303 	lsl.w	r3, r2, r3
 8006080:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a1a      	ldr	r2, [r3, #32]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	43db      	mvns	r3, r3
 800608a:	401a      	ands	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a1a      	ldr	r2, [r3, #32]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f003 031f 	and.w	r3, r3, #31
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	fa01 f303 	lsl.w	r3, r1, r3
 80060a0:	431a      	orrs	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]
}
 80060a6:	bf00      	nop
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
	...

080060b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d101      	bne.n	80060cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060c8:	2302      	movs	r3, #2
 80060ca:	e05a      	b.n	8006182 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a21      	ldr	r2, [pc, #132]	@ (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d022      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006118:	d01d      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a1d      	ldr	r2, [pc, #116]	@ (8006194 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d018      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a1b      	ldr	r2, [pc, #108]	@ (8006198 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d013      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a1a      	ldr	r2, [pc, #104]	@ (800619c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d00e      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a18      	ldr	r2, [pc, #96]	@ (80061a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d009      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a17      	ldr	r2, [pc, #92]	@ (80061a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d004      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a15      	ldr	r2, [pc, #84]	@ (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d10c      	bne.n	8006170 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800615c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	4313      	orrs	r3, r2
 8006166:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40010000 	.word	0x40010000
 8006194:	40000400 	.word	0x40000400
 8006198:	40000800 	.word	0x40000800
 800619c:	40000c00 	.word	0x40000c00
 80061a0:	40010400 	.word	0x40010400
 80061a4:	40014000 	.word	0x40014000
 80061a8:	40001800 	.word	0x40001800

080061ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e042      	b.n	8006244 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7fc fc6c 	bl	8002ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2224      	movs	r2, #36	@ 0x24
 80061dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 ffa1 	bl	8007138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	695a      	ldr	r2, [r3, #20]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006214:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006224:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2220      	movs	r2, #32
 8006230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2220      	movs	r2, #32
 8006238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08a      	sub	sp, #40	@ 0x28
 8006250:	af02      	add	r7, sp, #8
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	4613      	mov	r3, r2
 800625a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800625c:	2300      	movs	r3, #0
 800625e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b20      	cmp	r3, #32
 800626a:	d175      	bne.n	8006358 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <HAL_UART_Transmit+0x2c>
 8006272:	88fb      	ldrh	r3, [r7, #6]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e06e      	b.n	800635a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2221      	movs	r2, #33	@ 0x21
 8006286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800628a:	f7fc fe57 	bl	8002f3c <HAL_GetTick>
 800628e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	88fa      	ldrh	r2, [r7, #6]
 8006294:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	88fa      	ldrh	r2, [r7, #6]
 800629a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062a4:	d108      	bne.n	80062b8 <HAL_UART_Transmit+0x6c>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d104      	bne.n	80062b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	61bb      	str	r3, [r7, #24]
 80062b6:	e003      	b.n	80062c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062bc:	2300      	movs	r3, #0
 80062be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062c0:	e02e      	b.n	8006320 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2200      	movs	r2, #0
 80062ca:	2180      	movs	r1, #128	@ 0x80
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 fc71 	bl	8006bb4 <UART_WaitOnFlagUntilTimeout>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d005      	beq.n	80062e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2220      	movs	r2, #32
 80062dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e03a      	b.n	800635a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10b      	bne.n	8006302 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	3302      	adds	r3, #2
 80062fe:	61bb      	str	r3, [r7, #24]
 8006300:	e007      	b.n	8006312 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	781a      	ldrb	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	3301      	adds	r3, #1
 8006310:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006324:	b29b      	uxth	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1cb      	bne.n	80062c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2200      	movs	r2, #0
 8006332:	2140      	movs	r1, #64	@ 0x40
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 fc3d 	bl	8006bb4 <UART_WaitOnFlagUntilTimeout>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d005      	beq.n	800634c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2220      	movs	r2, #32
 8006344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e006      	b.n	800635a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2220      	movs	r2, #32
 8006350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	e000      	b.n	800635a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006358:	2302      	movs	r3, #2
  }
}
 800635a:	4618      	mov	r0, r3
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b08c      	sub	sp, #48	@ 0x30
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	4613      	mov	r3, r2
 800636e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b20      	cmp	r3, #32
 800637a:	d146      	bne.n	800640a <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006382:	88fb      	ldrh	r3, [r7, #6]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e03f      	b.n	800640c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2201      	movs	r2, #1
 8006390:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006398:	88fb      	ldrh	r3, [r7, #6]
 800639a:	461a      	mov	r2, r3
 800639c:	68b9      	ldr	r1, [r7, #8]
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f000 fc62 	bl	8006c68 <UART_Start_Receive_DMA>
 80063a4:	4603      	mov	r3, r0
 80063a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d125      	bne.n	80063fe <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063b2:	2300      	movs	r3, #0
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	613b      	str	r3, [r7, #16]
 80063c6:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	330c      	adds	r3, #12
 80063ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	617b      	str	r3, [r7, #20]
   return(result);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f043 0310 	orr.w	r3, r3, #16
 80063de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	330c      	adds	r3, #12
 80063e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80063ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	6a39      	ldr	r1, [r7, #32]
 80063ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e5      	bne.n	80063c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 80063fc:	e002      	b.n	8006404 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8006404:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006408:	e000      	b.n	800640c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800640a:	2302      	movs	r3, #2
  }
}
 800640c:	4618      	mov	r0, r3
 800640e:	3730      	adds	r7, #48	@ 0x30
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b0ba      	sub	sp, #232	@ 0xe8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800643a:	2300      	movs	r3, #0
 800643c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006440:	2300      	movs	r3, #0
 8006442:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800644a:	f003 030f 	and.w	r3, r3, #15
 800644e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006452:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10f      	bne.n	800647a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800645a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800645e:	f003 0320 	and.w	r3, r3, #32
 8006462:	2b00      	cmp	r3, #0
 8006464:	d009      	beq.n	800647a <HAL_UART_IRQHandler+0x66>
 8006466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800646a:	f003 0320 	and.w	r3, r3, #32
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fda2 	bl	8006fbc <UART_Receive_IT>
      return;
 8006478:	e273      	b.n	8006962 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800647a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 80de 	beq.w	8006640 <HAL_UART_IRQHandler+0x22c>
 8006484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d106      	bne.n	800649e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006494:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 80d1 	beq.w	8006640 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800649e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00b      	beq.n	80064c2 <HAL_UART_IRQHandler+0xae>
 80064aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d005      	beq.n	80064c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ba:	f043 0201 	orr.w	r2, r3, #1
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00b      	beq.n	80064e6 <HAL_UART_IRQHandler+0xd2>
 80064ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d005      	beq.n	80064e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064de:	f043 0202 	orr.w	r2, r3, #2
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00b      	beq.n	800650a <HAL_UART_IRQHandler+0xf6>
 80064f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006502:	f043 0204 	orr.w	r2, r3, #4
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800650a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800650e:	f003 0308 	and.w	r3, r3, #8
 8006512:	2b00      	cmp	r3, #0
 8006514:	d011      	beq.n	800653a <HAL_UART_IRQHandler+0x126>
 8006516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800651a:	f003 0320 	and.w	r3, r3, #32
 800651e:	2b00      	cmp	r3, #0
 8006520:	d105      	bne.n	800652e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d005      	beq.n	800653a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006532:	f043 0208 	orr.w	r2, r3, #8
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800653e:	2b00      	cmp	r3, #0
 8006540:	f000 820a 	beq.w	8006958 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	2b00      	cmp	r3, #0
 800654e:	d008      	beq.n	8006562 <HAL_UART_IRQHandler+0x14e>
 8006550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006554:	f003 0320 	and.w	r3, r3, #32
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fd2d 	bl	8006fbc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800656c:	2b40      	cmp	r3, #64	@ 0x40
 800656e:	bf0c      	ite	eq
 8006570:	2301      	moveq	r3, #1
 8006572:	2300      	movne	r3, #0
 8006574:	b2db      	uxtb	r3, r3
 8006576:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800657e:	f003 0308 	and.w	r3, r3, #8
 8006582:	2b00      	cmp	r3, #0
 8006584:	d103      	bne.n	800658e <HAL_UART_IRQHandler+0x17a>
 8006586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800658a:	2b00      	cmp	r3, #0
 800658c:	d04f      	beq.n	800662e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fc38 	bl	8006e04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800659e:	2b40      	cmp	r3, #64	@ 0x40
 80065a0:	d141      	bne.n	8006626 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3314      	adds	r3, #20
 80065a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80065b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3314      	adds	r3, #20
 80065ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80065ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80065d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80065da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80065e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1d9      	bne.n	80065a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d013      	beq.n	800661e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065fa:	4a8a      	ldr	r2, [pc, #552]	@ (8006824 <HAL_UART_IRQHandler+0x410>)
 80065fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006602:	4618      	mov	r0, r3
 8006604:	f7fc ff52 	bl	80034ac <HAL_DMA_Abort_IT>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d016      	beq.n	800663c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006618:	4610      	mov	r0, r2
 800661a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800661c:	e00e      	b.n	800663c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f9c0 	bl	80069a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006624:	e00a      	b.n	800663c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f9bc 	bl	80069a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800662c:	e006      	b.n	800663c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f9b8 	bl	80069a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800663a:	e18d      	b.n	8006958 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800663c:	bf00      	nop
    return;
 800663e:	e18b      	b.n	8006958 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006644:	2b01      	cmp	r3, #1
 8006646:	f040 8167 	bne.w	8006918 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800664a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800664e:	f003 0310 	and.w	r3, r3, #16
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 8160 	beq.w	8006918 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800665c:	f003 0310 	and.w	r3, r3, #16
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 8159 	beq.w	8006918 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006666:	2300      	movs	r3, #0
 8006668:	60bb      	str	r3, [r7, #8]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	60bb      	str	r3, [r7, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	60bb      	str	r3, [r7, #8]
 800667a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006686:	2b40      	cmp	r3, #64	@ 0x40
 8006688:	f040 80ce 	bne.w	8006828 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006698:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 80a9 	beq.w	80067f4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066aa:	429a      	cmp	r2, r3
 80066ac:	f080 80a2 	bcs.w	80067f4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066c2:	f000 8088 	beq.w	80067d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	330c      	adds	r3, #12
 80066cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80066d4:	e853 3f00 	ldrex	r3, [r3]
 80066d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80066dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	330c      	adds	r3, #12
 80066ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80066f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80066f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80066fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006702:	e841 2300 	strex	r3, r2, [r1]
 8006706:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800670a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1d9      	bne.n	80066c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3314      	adds	r3, #20
 8006718:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006722:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006724:	f023 0301 	bic.w	r3, r3, #1
 8006728:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3314      	adds	r3, #20
 8006732:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006736:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800673a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800673e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006748:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1e1      	bne.n	8006712 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3314      	adds	r3, #20
 8006754:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006756:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006758:	e853 3f00 	ldrex	r3, [r3]
 800675c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800675e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006760:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006764:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3314      	adds	r3, #20
 800676e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006772:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006774:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006776:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006778:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006780:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e3      	bne.n	800674e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	330c      	adds	r3, #12
 800679a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800679e:	e853 3f00 	ldrex	r3, [r3]
 80067a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067a6:	f023 0310 	bic.w	r3, r3, #16
 80067aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	330c      	adds	r3, #12
 80067b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80067b8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80067ba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80067c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e3      	bne.n	8006794 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fc fdfb 	bl	80033cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2202      	movs	r2, #2
 80067da:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f7fa fb1f 	bl	8000e30 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80067f2:	e0b3      	b.n	800695c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80067f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067fc:	429a      	cmp	r2, r3
 80067fe:	f040 80ad 	bne.w	800695c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800680c:	f040 80a6 	bne.w	800695c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7fa fb07 	bl	8000e30 <HAL_UARTEx_RxEventCallback>
      return;
 8006822:	e09b      	b.n	800695c <HAL_UART_IRQHandler+0x548>
 8006824:	08006ecb 	.word	0x08006ecb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006830:	b29b      	uxth	r3, r3
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 808e 	beq.w	8006960 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006844:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 8089 	beq.w	8006960 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	330c      	adds	r3, #12
 8006854:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800685e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006860:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006864:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	330c      	adds	r3, #12
 800686e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006872:	647a      	str	r2, [r7, #68]	@ 0x44
 8006874:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006878:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e3      	bne.n	800684e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3314      	adds	r3, #20
 800688c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	623b      	str	r3, [r7, #32]
   return(result);
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	f023 0301 	bic.w	r3, r3, #1
 800689c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3314      	adds	r3, #20
 80068a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80068aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80068ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e3      	bne.n	8006886 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	330c      	adds	r3, #12
 80068d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	e853 3f00 	ldrex	r3, [r3]
 80068da:	60fb      	str	r3, [r7, #12]
   return(result);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0310 	bic.w	r3, r3, #16
 80068e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	330c      	adds	r3, #12
 80068ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80068f0:	61fa      	str	r2, [r7, #28]
 80068f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	69b9      	ldr	r1, [r7, #24]
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	e841 2300 	strex	r3, r2, [r1]
 80068fc:	617b      	str	r3, [r7, #20]
   return(result);
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e3      	bne.n	80068cc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2202      	movs	r2, #2
 8006908:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800690a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7fa fa8d 	bl	8000e30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006916:	e023      	b.n	8006960 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800691c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006920:	2b00      	cmp	r3, #0
 8006922:	d009      	beq.n	8006938 <HAL_UART_IRQHandler+0x524>
 8006924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fadb 	bl	8006eec <UART_Transmit_IT>
    return;
 8006936:	e014      	b.n	8006962 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800693c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00e      	beq.n	8006962 <HAL_UART_IRQHandler+0x54e>
 8006944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800694c:	2b00      	cmp	r3, #0
 800694e:	d008      	beq.n	8006962 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fb1b 	bl	8006f8c <UART_EndTransmit_IT>
    return;
 8006956:	e004      	b.n	8006962 <HAL_UART_IRQHandler+0x54e>
    return;
 8006958:	bf00      	nop
 800695a:	e002      	b.n	8006962 <HAL_UART_IRQHandler+0x54e>
      return;
 800695c:	bf00      	nop
 800695e:	e000      	b.n	8006962 <HAL_UART_IRQHandler+0x54e>
      return;
 8006960:	bf00      	nop
  }
}
 8006962:	37e8      	adds	r7, #232	@ 0xe8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b09c      	sub	sp, #112	@ 0x70
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d172      	bne.n	8006aba <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80069d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069d6:	2200      	movs	r2, #0
 80069d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	330c      	adds	r3, #12
 80069e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	330c      	adds	r3, #12
 80069f8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80069fa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80069fc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e5      	bne.n	80069da <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3314      	adds	r3, #20
 8006a14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a20:	f023 0301 	bic.w	r3, r3, #1
 8006a24:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3314      	adds	r3, #20
 8006a2c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006a2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e5      	bne.n	8006a0e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3314      	adds	r3, #20
 8006a48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	623b      	str	r3, [r7, #32]
   return(result);
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a58:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3314      	adds	r3, #20
 8006a60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006a62:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e5      	bne.n	8006a42 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d119      	bne.n	8006aba <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	330c      	adds	r3, #12
 8006a8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f023 0310 	bic.w	r3, r3, #16
 8006a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	330c      	adds	r3, #12
 8006aa4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006aa6:	61fa      	str	r2, [r7, #28]
 8006aa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	69b9      	ldr	r1, [r7, #24]
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1e5      	bne.n	8006a86 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006abc:	2200      	movs	r2, #0
 8006abe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d106      	bne.n	8006ad6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ac8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006acc:	4619      	mov	r1, r3
 8006ace:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ad0:	f7fa f9ae 	bl	8000e30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ad4:	e002      	b.n	8006adc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006ad6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ad8:	f7ff ff50 	bl	800697c <HAL_UART_RxCpltCallback>
}
 8006adc:	bf00      	nop
 8006ade:	3770      	adds	r7, #112	@ 0x70
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2201      	movs	r2, #1
 8006af6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d108      	bne.n	8006b12 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b04:	085b      	lsrs	r3, r3, #1
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	4619      	mov	r1, r3
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7fa f990 	bl	8000e30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b10:	e002      	b.n	8006b18 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f7ff ff3c 	bl	8006990 <HAL_UART_RxHalfCpltCallback>
}
 8006b18:	bf00      	nop
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b30:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b3c:	2b80      	cmp	r3, #128	@ 0x80
 8006b3e:	bf0c      	ite	eq
 8006b40:	2301      	moveq	r3, #1
 8006b42:	2300      	movne	r3, #0
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b21      	cmp	r3, #33	@ 0x21
 8006b52:	d108      	bne.n	8006b66 <UART_DMAError+0x46>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d005      	beq.n	8006b66 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006b60:	68b8      	ldr	r0, [r7, #8]
 8006b62:	f000 f927 	bl	8006db4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b70:	2b40      	cmp	r3, #64	@ 0x40
 8006b72:	bf0c      	ite	eq
 8006b74:	2301      	moveq	r3, #1
 8006b76:	2300      	movne	r3, #0
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b22      	cmp	r3, #34	@ 0x22
 8006b86:	d108      	bne.n	8006b9a <UART_DMAError+0x7a>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d005      	beq.n	8006b9a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2200      	movs	r2, #0
 8006b92:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006b94:	68b8      	ldr	r0, [r7, #8]
 8006b96:	f000 f935 	bl	8006e04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b9e:	f043 0210 	orr.w	r2, r3, #16
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ba6:	68b8      	ldr	r0, [r7, #8]
 8006ba8:	f7ff fefc 	bl	80069a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bac:	bf00      	nop
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc4:	e03b      	b.n	8006c3e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bcc:	d037      	beq.n	8006c3e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bce:	f7fc f9b5 	bl	8002f3c <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	6a3a      	ldr	r2, [r7, #32]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d302      	bcc.n	8006be4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e03a      	b.n	8006c5e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	f003 0304 	and.w	r3, r3, #4
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d023      	beq.n	8006c3e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b80      	cmp	r3, #128	@ 0x80
 8006bfa:	d020      	beq.n	8006c3e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b40      	cmp	r3, #64	@ 0x40
 8006c00:	d01d      	beq.n	8006c3e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0308 	and.w	r3, r3, #8
 8006c0c:	2b08      	cmp	r3, #8
 8006c0e:	d116      	bne.n	8006c3e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006c10:	2300      	movs	r3, #0
 8006c12:	617b      	str	r3, [r7, #20]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 f8ec 	bl	8006e04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2208      	movs	r2, #8
 8006c30:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e00f      	b.n	8006c5e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	4013      	ands	r3, r2
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	bf0c      	ite	eq
 8006c4e:	2301      	moveq	r3, #1
 8006c50:	2300      	movne	r3, #0
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	461a      	mov	r2, r3
 8006c56:	79fb      	ldrb	r3, [r7, #7]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d0b4      	beq.n	8006bc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b098      	sub	sp, #96	@ 0x60
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4613      	mov	r3, r2
 8006c74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	88fa      	ldrh	r2, [r7, #6]
 8006c80:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2222      	movs	r2, #34	@ 0x22
 8006c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c94:	4a44      	ldr	r2, [pc, #272]	@ (8006da8 <UART_Start_Receive_DMA+0x140>)
 8006c96:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c9c:	4a43      	ldr	r2, [pc, #268]	@ (8006dac <UART_Start_Receive_DMA+0x144>)
 8006c9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca4:	4a42      	ldr	r2, [pc, #264]	@ (8006db0 <UART_Start_Receive_DMA+0x148>)
 8006ca6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cac:	2200      	movs	r2, #0
 8006cae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006cb0:	f107 0308 	add.w	r3, r7, #8
 8006cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	88fb      	ldrh	r3, [r7, #6]
 8006cc8:	f7fc fb28 	bl	800331c <HAL_DMA_Start_IT>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d008      	beq.n	8006ce4 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2210      	movs	r2, #16
 8006cd6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e05d      	b.n	8006da0 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	613b      	str	r3, [r7, #16]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d019      	beq.n	8006d36 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	330c      	adds	r3, #12
 8006d08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	330c      	adds	r3, #12
 8006d20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d22:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006d24:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d26:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006d28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1e5      	bne.n	8006d02 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3314      	adds	r3, #20
 8006d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d48:	f043 0301 	orr.w	r3, r3, #1
 8006d4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3314      	adds	r3, #20
 8006d54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d56:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006d58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006d5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e5      	bne.n	8006d36 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3314      	adds	r3, #20
 8006d70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	e853 3f00 	ldrex	r3, [r3]
 8006d78:	617b      	str	r3, [r7, #20]
   return(result);
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d80:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3314      	adds	r3, #20
 8006d88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006d8a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	6a39      	ldr	r1, [r7, #32]
 8006d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1e5      	bne.n	8006d6a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3760      	adds	r7, #96	@ 0x60
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	080069b9 	.word	0x080069b9
 8006dac:	08006ae5 	.word	0x08006ae5
 8006db0:	08006b21 	.word	0x08006b21

08006db4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b089      	sub	sp, #36	@ 0x24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	330c      	adds	r3, #12
 8006dc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006dd2:	61fb      	str	r3, [r7, #28]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	330c      	adds	r3, #12
 8006dda:	69fa      	ldr	r2, [r7, #28]
 8006ddc:	61ba      	str	r2, [r7, #24]
 8006dde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	6979      	ldr	r1, [r7, #20]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e5      	bne.n	8006dbc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006df8:	bf00      	nop
 8006dfa:	3724      	adds	r7, #36	@ 0x24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b095      	sub	sp, #84	@ 0x54
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	330c      	adds	r3, #12
 8006e12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e16:	e853 3f00 	ldrex	r3, [r3]
 8006e1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	330c      	adds	r3, #12
 8006e2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e2c:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e34:	e841 2300 	strex	r3, r2, [r1]
 8006e38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e5      	bne.n	8006e0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3314      	adds	r3, #20
 8006e46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	e853 3f00 	ldrex	r3, [r3]
 8006e4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	f023 0301 	bic.w	r3, r3, #1
 8006e56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3314      	adds	r3, #20
 8006e5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e68:	e841 2300 	strex	r3, r2, [r1]
 8006e6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1e5      	bne.n	8006e40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d119      	bne.n	8006eb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	330c      	adds	r3, #12
 8006e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	e853 3f00 	ldrex	r3, [r3]
 8006e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f023 0310 	bic.w	r3, r3, #16
 8006e92:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	330c      	adds	r3, #12
 8006e9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e9c:	61ba      	str	r2, [r7, #24]
 8006e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea0:	6979      	ldr	r1, [r7, #20]
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	e841 2300 	strex	r3, r2, [r1]
 8006ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e5      	bne.n	8006e7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ebe:	bf00      	nop
 8006ec0:	3754      	adds	r7, #84	@ 0x54
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b084      	sub	sp, #16
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f7ff fd60 	bl	80069a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ee4:	bf00      	nop
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b21      	cmp	r3, #33	@ 0x21
 8006efe:	d13e      	bne.n	8006f7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f08:	d114      	bne.n	8006f34 <UART_Transmit_IT+0x48>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d110      	bne.n	8006f34 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	1c9a      	adds	r2, r3, #2
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	621a      	str	r2, [r3, #32]
 8006f32:	e008      	b.n	8006f46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	1c59      	adds	r1, r3, #1
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6211      	str	r1, [r2, #32]
 8006f3e:	781a      	ldrb	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	4619      	mov	r1, r3
 8006f54:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10f      	bne.n	8006f7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68da      	ldr	r2, [r3, #12]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e000      	b.n	8006f80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f7e:	2302      	movs	r3, #2
  }
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fa2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7ff fcdb 	bl	8006968 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08c      	sub	sp, #48	@ 0x30
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b22      	cmp	r3, #34	@ 0x22
 8006fd6:	f040 80aa 	bne.w	800712e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fe2:	d115      	bne.n	8007010 <UART_Receive_IT+0x54>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d111      	bne.n	8007010 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007002:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007008:	1c9a      	adds	r2, r3, #2
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	629a      	str	r2, [r3, #40]	@ 0x28
 800700e:	e024      	b.n	800705a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007014:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800701e:	d007      	beq.n	8007030 <UART_Receive_IT+0x74>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10a      	bne.n	800703e <UART_Receive_IT+0x82>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d106      	bne.n	800703e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	b2da      	uxtb	r2, r3
 8007038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800703a:	701a      	strb	r2, [r3, #0]
 800703c:	e008      	b.n	8007050 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	b2db      	uxtb	r3, r3
 8007046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800704a:	b2da      	uxtb	r2, r3
 800704c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29b      	uxth	r3, r3
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	4619      	mov	r1, r3
 8007068:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800706a:	2b00      	cmp	r3, #0
 800706c:	d15d      	bne.n	800712a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 0220 	bic.w	r2, r2, #32
 800707c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800708c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	695a      	ldr	r2, [r3, #20]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0201 	bic.w	r2, r2, #1
 800709c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d135      	bne.n	8007120 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	330c      	adds	r3, #12
 80070c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	e853 3f00 	ldrex	r3, [r3]
 80070c8:	613b      	str	r3, [r7, #16]
   return(result);
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f023 0310 	bic.w	r3, r3, #16
 80070d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	330c      	adds	r3, #12
 80070d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070da:	623a      	str	r2, [r7, #32]
 80070dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	69f9      	ldr	r1, [r7, #28]
 80070e0:	6a3a      	ldr	r2, [r7, #32]
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e5      	bne.n	80070ba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0310 	and.w	r3, r3, #16
 80070f8:	2b10      	cmp	r3, #16
 80070fa:	d10a      	bne.n	8007112 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070fc:	2300      	movs	r3, #0
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7f9 fe89 	bl	8000e30 <HAL_UARTEx_RxEventCallback>
 800711e:	e002      	b.n	8007126 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7ff fc2b 	bl	800697c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	e002      	b.n	8007130 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	e000      	b.n	8007130 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800712e:	2302      	movs	r3, #2
  }
}
 8007130:	4618      	mov	r0, r3
 8007132:	3730      	adds	r7, #48	@ 0x30
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800713c:	b0c0      	sub	sp, #256	@ 0x100
 800713e:	af00      	add	r7, sp, #0
 8007140:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007154:	68d9      	ldr	r1, [r3, #12]
 8007156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	ea40 0301 	orr.w	r3, r0, r1
 8007160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	431a      	orrs	r2, r3
 8007170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	431a      	orrs	r2, r3
 8007178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007190:	f021 010c 	bic.w	r1, r1, #12
 8007194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800719e:	430b      	orrs	r3, r1
 80071a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80071ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b2:	6999      	ldr	r1, [r3, #24]
 80071b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	ea40 0301 	orr.w	r3, r0, r1
 80071be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	4b8f      	ldr	r3, [pc, #572]	@ (8007404 <UART_SetConfig+0x2cc>)
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d005      	beq.n	80071d8 <UART_SetConfig+0xa0>
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	4b8d      	ldr	r3, [pc, #564]	@ (8007408 <UART_SetConfig+0x2d0>)
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d104      	bne.n	80071e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071d8:	f7fe fa2a 	bl	8005630 <HAL_RCC_GetPCLK2Freq>
 80071dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80071e0:	e003      	b.n	80071ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071e2:	f7fe fa11 	bl	8005608 <HAL_RCC_GetPCLK1Freq>
 80071e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071f4:	f040 810c 	bne.w	8007410 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071fc:	2200      	movs	r2, #0
 80071fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007202:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007206:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800720a:	4622      	mov	r2, r4
 800720c:	462b      	mov	r3, r5
 800720e:	1891      	adds	r1, r2, r2
 8007210:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007212:	415b      	adcs	r3, r3
 8007214:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800721a:	4621      	mov	r1, r4
 800721c:	eb12 0801 	adds.w	r8, r2, r1
 8007220:	4629      	mov	r1, r5
 8007222:	eb43 0901 	adc.w	r9, r3, r1
 8007226:	f04f 0200 	mov.w	r2, #0
 800722a:	f04f 0300 	mov.w	r3, #0
 800722e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800723a:	4690      	mov	r8, r2
 800723c:	4699      	mov	r9, r3
 800723e:	4623      	mov	r3, r4
 8007240:	eb18 0303 	adds.w	r3, r8, r3
 8007244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007248:	462b      	mov	r3, r5
 800724a:	eb49 0303 	adc.w	r3, r9, r3
 800724e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800725e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007266:	460b      	mov	r3, r1
 8007268:	18db      	adds	r3, r3, r3
 800726a:	653b      	str	r3, [r7, #80]	@ 0x50
 800726c:	4613      	mov	r3, r2
 800726e:	eb42 0303 	adc.w	r3, r2, r3
 8007272:	657b      	str	r3, [r7, #84]	@ 0x54
 8007274:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007278:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800727c:	f7f9 fafe 	bl	800087c <__aeabi_uldivmod>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4b61      	ldr	r3, [pc, #388]	@ (800740c <UART_SetConfig+0x2d4>)
 8007286:	fba3 2302 	umull	r2, r3, r3, r2
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	011c      	lsls	r4, r3, #4
 800728e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007292:	2200      	movs	r2, #0
 8007294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007298:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800729c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80072a0:	4642      	mov	r2, r8
 80072a2:	464b      	mov	r3, r9
 80072a4:	1891      	adds	r1, r2, r2
 80072a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80072a8:	415b      	adcs	r3, r3
 80072aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072b0:	4641      	mov	r1, r8
 80072b2:	eb12 0a01 	adds.w	sl, r2, r1
 80072b6:	4649      	mov	r1, r9
 80072b8:	eb43 0b01 	adc.w	fp, r3, r1
 80072bc:	f04f 0200 	mov.w	r2, #0
 80072c0:	f04f 0300 	mov.w	r3, #0
 80072c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072d0:	4692      	mov	sl, r2
 80072d2:	469b      	mov	fp, r3
 80072d4:	4643      	mov	r3, r8
 80072d6:	eb1a 0303 	adds.w	r3, sl, r3
 80072da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072de:	464b      	mov	r3, r9
 80072e0:	eb4b 0303 	adc.w	r3, fp, r3
 80072e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80072e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80072f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80072fc:	460b      	mov	r3, r1
 80072fe:	18db      	adds	r3, r3, r3
 8007300:	643b      	str	r3, [r7, #64]	@ 0x40
 8007302:	4613      	mov	r3, r2
 8007304:	eb42 0303 	adc.w	r3, r2, r3
 8007308:	647b      	str	r3, [r7, #68]	@ 0x44
 800730a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800730e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007312:	f7f9 fab3 	bl	800087c <__aeabi_uldivmod>
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	4611      	mov	r1, r2
 800731c:	4b3b      	ldr	r3, [pc, #236]	@ (800740c <UART_SetConfig+0x2d4>)
 800731e:	fba3 2301 	umull	r2, r3, r3, r1
 8007322:	095b      	lsrs	r3, r3, #5
 8007324:	2264      	movs	r2, #100	@ 0x64
 8007326:	fb02 f303 	mul.w	r3, r2, r3
 800732a:	1acb      	subs	r3, r1, r3
 800732c:	00db      	lsls	r3, r3, #3
 800732e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007332:	4b36      	ldr	r3, [pc, #216]	@ (800740c <UART_SetConfig+0x2d4>)
 8007334:	fba3 2302 	umull	r2, r3, r3, r2
 8007338:	095b      	lsrs	r3, r3, #5
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007340:	441c      	add	r4, r3
 8007342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007346:	2200      	movs	r2, #0
 8007348:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800734c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007350:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007354:	4642      	mov	r2, r8
 8007356:	464b      	mov	r3, r9
 8007358:	1891      	adds	r1, r2, r2
 800735a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800735c:	415b      	adcs	r3, r3
 800735e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007364:	4641      	mov	r1, r8
 8007366:	1851      	adds	r1, r2, r1
 8007368:	6339      	str	r1, [r7, #48]	@ 0x30
 800736a:	4649      	mov	r1, r9
 800736c:	414b      	adcs	r3, r1
 800736e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007370:	f04f 0200 	mov.w	r2, #0
 8007374:	f04f 0300 	mov.w	r3, #0
 8007378:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800737c:	4659      	mov	r1, fp
 800737e:	00cb      	lsls	r3, r1, #3
 8007380:	4651      	mov	r1, sl
 8007382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007386:	4651      	mov	r1, sl
 8007388:	00ca      	lsls	r2, r1, #3
 800738a:	4610      	mov	r0, r2
 800738c:	4619      	mov	r1, r3
 800738e:	4603      	mov	r3, r0
 8007390:	4642      	mov	r2, r8
 8007392:	189b      	adds	r3, r3, r2
 8007394:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007398:	464b      	mov	r3, r9
 800739a:	460a      	mov	r2, r1
 800739c:	eb42 0303 	adc.w	r3, r2, r3
 80073a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80073b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073b8:	460b      	mov	r3, r1
 80073ba:	18db      	adds	r3, r3, r3
 80073bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073be:	4613      	mov	r3, r2
 80073c0:	eb42 0303 	adc.w	r3, r2, r3
 80073c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80073ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80073ce:	f7f9 fa55 	bl	800087c <__aeabi_uldivmod>
 80073d2:	4602      	mov	r2, r0
 80073d4:	460b      	mov	r3, r1
 80073d6:	4b0d      	ldr	r3, [pc, #52]	@ (800740c <UART_SetConfig+0x2d4>)
 80073d8:	fba3 1302 	umull	r1, r3, r3, r2
 80073dc:	095b      	lsrs	r3, r3, #5
 80073de:	2164      	movs	r1, #100	@ 0x64
 80073e0:	fb01 f303 	mul.w	r3, r1, r3
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	3332      	adds	r3, #50	@ 0x32
 80073ea:	4a08      	ldr	r2, [pc, #32]	@ (800740c <UART_SetConfig+0x2d4>)
 80073ec:	fba2 2303 	umull	r2, r3, r2, r3
 80073f0:	095b      	lsrs	r3, r3, #5
 80073f2:	f003 0207 	and.w	r2, r3, #7
 80073f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4422      	add	r2, r4
 80073fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007400:	e106      	b.n	8007610 <UART_SetConfig+0x4d8>
 8007402:	bf00      	nop
 8007404:	40011000 	.word	0x40011000
 8007408:	40011400 	.word	0x40011400
 800740c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007414:	2200      	movs	r2, #0
 8007416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800741a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800741e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007422:	4642      	mov	r2, r8
 8007424:	464b      	mov	r3, r9
 8007426:	1891      	adds	r1, r2, r2
 8007428:	6239      	str	r1, [r7, #32]
 800742a:	415b      	adcs	r3, r3
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
 800742e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007432:	4641      	mov	r1, r8
 8007434:	1854      	adds	r4, r2, r1
 8007436:	4649      	mov	r1, r9
 8007438:	eb43 0501 	adc.w	r5, r3, r1
 800743c:	f04f 0200 	mov.w	r2, #0
 8007440:	f04f 0300 	mov.w	r3, #0
 8007444:	00eb      	lsls	r3, r5, #3
 8007446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800744a:	00e2      	lsls	r2, r4, #3
 800744c:	4614      	mov	r4, r2
 800744e:	461d      	mov	r5, r3
 8007450:	4643      	mov	r3, r8
 8007452:	18e3      	adds	r3, r4, r3
 8007454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007458:	464b      	mov	r3, r9
 800745a:	eb45 0303 	adc.w	r3, r5, r3
 800745e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800746e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007472:	f04f 0200 	mov.w	r2, #0
 8007476:	f04f 0300 	mov.w	r3, #0
 800747a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800747e:	4629      	mov	r1, r5
 8007480:	008b      	lsls	r3, r1, #2
 8007482:	4621      	mov	r1, r4
 8007484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007488:	4621      	mov	r1, r4
 800748a:	008a      	lsls	r2, r1, #2
 800748c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007490:	f7f9 f9f4 	bl	800087c <__aeabi_uldivmod>
 8007494:	4602      	mov	r2, r0
 8007496:	460b      	mov	r3, r1
 8007498:	4b60      	ldr	r3, [pc, #384]	@ (800761c <UART_SetConfig+0x4e4>)
 800749a:	fba3 2302 	umull	r2, r3, r3, r2
 800749e:	095b      	lsrs	r3, r3, #5
 80074a0:	011c      	lsls	r4, r3, #4
 80074a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074a6:	2200      	movs	r2, #0
 80074a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80074b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80074b4:	4642      	mov	r2, r8
 80074b6:	464b      	mov	r3, r9
 80074b8:	1891      	adds	r1, r2, r2
 80074ba:	61b9      	str	r1, [r7, #24]
 80074bc:	415b      	adcs	r3, r3
 80074be:	61fb      	str	r3, [r7, #28]
 80074c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074c4:	4641      	mov	r1, r8
 80074c6:	1851      	adds	r1, r2, r1
 80074c8:	6139      	str	r1, [r7, #16]
 80074ca:	4649      	mov	r1, r9
 80074cc:	414b      	adcs	r3, r1
 80074ce:	617b      	str	r3, [r7, #20]
 80074d0:	f04f 0200 	mov.w	r2, #0
 80074d4:	f04f 0300 	mov.w	r3, #0
 80074d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074dc:	4659      	mov	r1, fp
 80074de:	00cb      	lsls	r3, r1, #3
 80074e0:	4651      	mov	r1, sl
 80074e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074e6:	4651      	mov	r1, sl
 80074e8:	00ca      	lsls	r2, r1, #3
 80074ea:	4610      	mov	r0, r2
 80074ec:	4619      	mov	r1, r3
 80074ee:	4603      	mov	r3, r0
 80074f0:	4642      	mov	r2, r8
 80074f2:	189b      	adds	r3, r3, r2
 80074f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074f8:	464b      	mov	r3, r9
 80074fa:	460a      	mov	r2, r1
 80074fc:	eb42 0303 	adc.w	r3, r2, r3
 8007500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800750e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007510:	f04f 0200 	mov.w	r2, #0
 8007514:	f04f 0300 	mov.w	r3, #0
 8007518:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800751c:	4649      	mov	r1, r9
 800751e:	008b      	lsls	r3, r1, #2
 8007520:	4641      	mov	r1, r8
 8007522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007526:	4641      	mov	r1, r8
 8007528:	008a      	lsls	r2, r1, #2
 800752a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800752e:	f7f9 f9a5 	bl	800087c <__aeabi_uldivmod>
 8007532:	4602      	mov	r2, r0
 8007534:	460b      	mov	r3, r1
 8007536:	4611      	mov	r1, r2
 8007538:	4b38      	ldr	r3, [pc, #224]	@ (800761c <UART_SetConfig+0x4e4>)
 800753a:	fba3 2301 	umull	r2, r3, r3, r1
 800753e:	095b      	lsrs	r3, r3, #5
 8007540:	2264      	movs	r2, #100	@ 0x64
 8007542:	fb02 f303 	mul.w	r3, r2, r3
 8007546:	1acb      	subs	r3, r1, r3
 8007548:	011b      	lsls	r3, r3, #4
 800754a:	3332      	adds	r3, #50	@ 0x32
 800754c:	4a33      	ldr	r2, [pc, #204]	@ (800761c <UART_SetConfig+0x4e4>)
 800754e:	fba2 2303 	umull	r2, r3, r2, r3
 8007552:	095b      	lsrs	r3, r3, #5
 8007554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007558:	441c      	add	r4, r3
 800755a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800755e:	2200      	movs	r2, #0
 8007560:	673b      	str	r3, [r7, #112]	@ 0x70
 8007562:	677a      	str	r2, [r7, #116]	@ 0x74
 8007564:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007568:	4642      	mov	r2, r8
 800756a:	464b      	mov	r3, r9
 800756c:	1891      	adds	r1, r2, r2
 800756e:	60b9      	str	r1, [r7, #8]
 8007570:	415b      	adcs	r3, r3
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007578:	4641      	mov	r1, r8
 800757a:	1851      	adds	r1, r2, r1
 800757c:	6039      	str	r1, [r7, #0]
 800757e:	4649      	mov	r1, r9
 8007580:	414b      	adcs	r3, r1
 8007582:	607b      	str	r3, [r7, #4]
 8007584:	f04f 0200 	mov.w	r2, #0
 8007588:	f04f 0300 	mov.w	r3, #0
 800758c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007590:	4659      	mov	r1, fp
 8007592:	00cb      	lsls	r3, r1, #3
 8007594:	4651      	mov	r1, sl
 8007596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800759a:	4651      	mov	r1, sl
 800759c:	00ca      	lsls	r2, r1, #3
 800759e:	4610      	mov	r0, r2
 80075a0:	4619      	mov	r1, r3
 80075a2:	4603      	mov	r3, r0
 80075a4:	4642      	mov	r2, r8
 80075a6:	189b      	adds	r3, r3, r2
 80075a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075aa:	464b      	mov	r3, r9
 80075ac:	460a      	mov	r2, r1
 80075ae:	eb42 0303 	adc.w	r3, r2, r3
 80075b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80075be:	667a      	str	r2, [r7, #100]	@ 0x64
 80075c0:	f04f 0200 	mov.w	r2, #0
 80075c4:	f04f 0300 	mov.w	r3, #0
 80075c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80075cc:	4649      	mov	r1, r9
 80075ce:	008b      	lsls	r3, r1, #2
 80075d0:	4641      	mov	r1, r8
 80075d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075d6:	4641      	mov	r1, r8
 80075d8:	008a      	lsls	r2, r1, #2
 80075da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80075de:	f7f9 f94d 	bl	800087c <__aeabi_uldivmod>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	4b0d      	ldr	r3, [pc, #52]	@ (800761c <UART_SetConfig+0x4e4>)
 80075e8:	fba3 1302 	umull	r1, r3, r3, r2
 80075ec:	095b      	lsrs	r3, r3, #5
 80075ee:	2164      	movs	r1, #100	@ 0x64
 80075f0:	fb01 f303 	mul.w	r3, r1, r3
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	3332      	adds	r3, #50	@ 0x32
 80075fa:	4a08      	ldr	r2, [pc, #32]	@ (800761c <UART_SetConfig+0x4e4>)
 80075fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007600:	095b      	lsrs	r3, r3, #5
 8007602:	f003 020f 	and.w	r2, r3, #15
 8007606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4422      	add	r2, r4
 800760e:	609a      	str	r2, [r3, #8]
}
 8007610:	bf00      	nop
 8007612:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007616:	46bd      	mov	sp, r7
 8007618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800761c:	51eb851f 	.word	0x51eb851f

08007620 <__NVIC_SetPriority>:
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	6039      	str	r1, [r7, #0]
 800762a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800762c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007630:	2b00      	cmp	r3, #0
 8007632:	db0a      	blt.n	800764a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	b2da      	uxtb	r2, r3
 8007638:	490c      	ldr	r1, [pc, #48]	@ (800766c <__NVIC_SetPriority+0x4c>)
 800763a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800763e:	0112      	lsls	r2, r2, #4
 8007640:	b2d2      	uxtb	r2, r2
 8007642:	440b      	add	r3, r1
 8007644:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007648:	e00a      	b.n	8007660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	b2da      	uxtb	r2, r3
 800764e:	4908      	ldr	r1, [pc, #32]	@ (8007670 <__NVIC_SetPriority+0x50>)
 8007650:	79fb      	ldrb	r3, [r7, #7]
 8007652:	f003 030f 	and.w	r3, r3, #15
 8007656:	3b04      	subs	r3, #4
 8007658:	0112      	lsls	r2, r2, #4
 800765a:	b2d2      	uxtb	r2, r2
 800765c:	440b      	add	r3, r1
 800765e:	761a      	strb	r2, [r3, #24]
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	e000e100 	.word	0xe000e100
 8007670:	e000ed00 	.word	0xe000ed00

08007674 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007678:	2100      	movs	r1, #0
 800767a:	f06f 0004 	mvn.w	r0, #4
 800767e:	f7ff ffcf 	bl	8007620 <__NVIC_SetPriority>
#endif
}
 8007682:	bf00      	nop
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800768e:	f3ef 8305 	mrs	r3, IPSR
 8007692:	603b      	str	r3, [r7, #0]
  return(result);
 8007694:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800769a:	f06f 0305 	mvn.w	r3, #5
 800769e:	607b      	str	r3, [r7, #4]
 80076a0:	e00c      	b.n	80076bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80076a2:	4b0a      	ldr	r3, [pc, #40]	@ (80076cc <osKernelInitialize+0x44>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d105      	bne.n	80076b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80076aa:	4b08      	ldr	r3, [pc, #32]	@ (80076cc <osKernelInitialize+0x44>)
 80076ac:	2201      	movs	r2, #1
 80076ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	607b      	str	r3, [r7, #4]
 80076b4:	e002      	b.n	80076bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80076b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80076bc:	687b      	ldr	r3, [r7, #4]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	20000808 	.word	0x20000808

080076d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076d6:	f3ef 8305 	mrs	r3, IPSR
 80076da:	603b      	str	r3, [r7, #0]
  return(result);
 80076dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80076e2:	f06f 0305 	mvn.w	r3, #5
 80076e6:	607b      	str	r3, [r7, #4]
 80076e8:	e010      	b.n	800770c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80076ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007718 <osKernelStart+0x48>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d109      	bne.n	8007706 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80076f2:	f7ff ffbf 	bl	8007674 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80076f6:	4b08      	ldr	r3, [pc, #32]	@ (8007718 <osKernelStart+0x48>)
 80076f8:	2202      	movs	r2, #2
 80076fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80076fc:	f001 f87a 	bl	80087f4 <vTaskStartScheduler>
      stat = osOK;
 8007700:	2300      	movs	r3, #0
 8007702:	607b      	str	r3, [r7, #4]
 8007704:	e002      	b.n	800770c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007706:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800770a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800770c:	687b      	ldr	r3, [r7, #4]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20000808 	.word	0x20000808

0800771c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800771c:	b580      	push	{r7, lr}
 800771e:	b08e      	sub	sp, #56	@ 0x38
 8007720:	af04      	add	r7, sp, #16
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007728:	2300      	movs	r3, #0
 800772a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800772c:	f3ef 8305 	mrs	r3, IPSR
 8007730:	617b      	str	r3, [r7, #20]
  return(result);
 8007732:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007734:	2b00      	cmp	r3, #0
 8007736:	d17e      	bne.n	8007836 <osThreadNew+0x11a>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d07b      	beq.n	8007836 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800773e:	2380      	movs	r3, #128	@ 0x80
 8007740:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007742:	2318      	movs	r3, #24
 8007744:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800774a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800774e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d045      	beq.n	80077e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <osThreadNew+0x48>
        name = attr->name;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d008      	beq.n	800778a <osThreadNew+0x6e>
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	2b38      	cmp	r3, #56	@ 0x38
 800777c:	d805      	bhi.n	800778a <osThreadNew+0x6e>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <osThreadNew+0x72>
        return (NULL);
 800778a:	2300      	movs	r3, #0
 800778c:	e054      	b.n	8007838 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	089b      	lsrs	r3, r3, #2
 800779c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00e      	beq.n	80077c4 <osThreadNew+0xa8>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	2b5b      	cmp	r3, #91	@ 0x5b
 80077ac:	d90a      	bls.n	80077c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d006      	beq.n	80077c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <osThreadNew+0xa8>
        mem = 1;
 80077be:	2301      	movs	r3, #1
 80077c0:	61bb      	str	r3, [r7, #24]
 80077c2:	e010      	b.n	80077e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10c      	bne.n	80077e6 <osThreadNew+0xca>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d108      	bne.n	80077e6 <osThreadNew+0xca>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d104      	bne.n	80077e6 <osThreadNew+0xca>
          mem = 0;
 80077dc:	2300      	movs	r3, #0
 80077de:	61bb      	str	r3, [r7, #24]
 80077e0:	e001      	b.n	80077e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d110      	bne.n	800780e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077f4:	9202      	str	r2, [sp, #8]
 80077f6:	9301      	str	r3, [sp, #4]
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	6a3a      	ldr	r2, [r7, #32]
 8007800:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f000 fe1a 	bl	800843c <xTaskCreateStatic>
 8007808:	4603      	mov	r3, r0
 800780a:	613b      	str	r3, [r7, #16]
 800780c:	e013      	b.n	8007836 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d110      	bne.n	8007836 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	b29a      	uxth	r2, r3
 8007818:	f107 0310 	add.w	r3, r7, #16
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 fe68 	bl	80084fc <xTaskCreate>
 800782c:	4603      	mov	r3, r0
 800782e:	2b01      	cmp	r3, #1
 8007830:	d001      	beq.n	8007836 <osThreadNew+0x11a>
            hTask = NULL;
 8007832:	2300      	movs	r3, #0
 8007834:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007836:	693b      	ldr	r3, [r7, #16]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3728      	adds	r7, #40	@ 0x28
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007848:	f3ef 8305 	mrs	r3, IPSR
 800784c:	60bb      	str	r3, [r7, #8]
  return(result);
 800784e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <osDelay+0x1c>
    stat = osErrorISR;
 8007854:	f06f 0305 	mvn.w	r3, #5
 8007858:	60fb      	str	r3, [r7, #12]
 800785a:	e007      	b.n	800786c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800785c:	2300      	movs	r3, #0
 800785e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 ff8e 	bl	8008788 <vTaskDelay>
    }
  }

  return (stat);
 800786c:	68fb      	ldr	r3, [r7, #12]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4a07      	ldr	r2, [pc, #28]	@ (80078a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007888:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	4a06      	ldr	r2, [pc, #24]	@ (80078a8 <vApplicationGetIdleTaskMemory+0x30>)
 800788e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2280      	movs	r2, #128	@ 0x80
 8007894:	601a      	str	r2, [r3, #0]
}
 8007896:	bf00      	nop
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	2000080c 	.word	0x2000080c
 80078a8:	20000868 	.word	0x20000868

080078ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4a07      	ldr	r2, [pc, #28]	@ (80078d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80078bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	4a06      	ldr	r2, [pc, #24]	@ (80078dc <vApplicationGetTimerTaskMemory+0x30>)
 80078c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80078ca:	601a      	str	r2, [r3, #0]
}
 80078cc:	bf00      	nop
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	20000a68 	.word	0x20000a68
 80078dc:	20000ac4 	.word	0x20000ac4

080078e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f103 0208 	add.w	r2, r3, #8
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f103 0208 	add.w	r2, r3, #8
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f103 0208 	add.w	r2, r3, #8
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800792e:	bf00      	nop
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800793a:	b480      	push	{r7}
 800793c:	b085      	sub	sp, #20
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	689a      	ldr	r2, [r3, #8]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	1c5a      	adds	r2, r3, #1
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	601a      	str	r2, [r3, #0]
}
 8007976:	bf00      	nop
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007982:	b480      	push	{r7}
 8007984:	b085      	sub	sp, #20
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007998:	d103      	bne.n	80079a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	e00c      	b.n	80079bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	3308      	adds	r3, #8
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	e002      	b.n	80079b0 <vListInsert+0x2e>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d2f6      	bcs.n	80079aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	1c5a      	adds	r2, r3, #1
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	601a      	str	r2, [r3, #0]
}
 80079e8:	bf00      	nop
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	6892      	ldr	r2, [r2, #8]
 8007a0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	6852      	ldr	r2, [r2, #4]
 8007a14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d103      	bne.n	8007a28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689a      	ldr	r2, [r3, #8]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	1e5a      	subs	r2, r3, #1
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10b      	bne.n	8007a74 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a6e:	bf00      	nop
 8007a70:	bf00      	nop
 8007a72:	e7fd      	b.n	8007a70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a74:	f002 f878 	bl	8009b68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a80:	68f9      	ldr	r1, [r7, #12]
 8007a82:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a84:	fb01 f303 	mul.w	r3, r1, r3
 8007a88:	441a      	add	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	68f9      	ldr	r1, [r7, #12]
 8007aa8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007aaa:	fb01 f303 	mul.w	r3, r1, r3
 8007aae:	441a      	add	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	22ff      	movs	r2, #255	@ 0xff
 8007ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	22ff      	movs	r2, #255	@ 0xff
 8007ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d114      	bne.n	8007af4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d01a      	beq.n	8007b08 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3310      	adds	r3, #16
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f001 f91a 	bl	8008d10 <xTaskRemoveFromEventList>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d012      	beq.n	8007b08 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8007b18 <xQueueGenericReset+0xd0>)
 8007ae4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	e009      	b.n	8007b08 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	3310      	adds	r3, #16
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7ff fef1 	bl	80078e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3324      	adds	r3, #36	@ 0x24
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7ff feec 	bl	80078e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b08:	f002 f860 	bl	8009bcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b0c:	2301      	movs	r3, #1
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	e000ed04 	.word	0xe000ed04

08007b1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08e      	sub	sp, #56	@ 0x38
 8007b20:	af02      	add	r7, sp, #8
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10b      	bne.n	8007b48 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b42:	bf00      	nop
 8007b44:	bf00      	nop
 8007b46:	e7fd      	b.n	8007b44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10b      	bne.n	8007b66 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b60:	bf00      	nop
 8007b62:	bf00      	nop
 8007b64:	e7fd      	b.n	8007b62 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <xQueueGenericCreateStatic+0x56>
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <xQueueGenericCreateStatic+0x5a>
 8007b72:	2301      	movs	r3, #1
 8007b74:	e000      	b.n	8007b78 <xQueueGenericCreateStatic+0x5c>
 8007b76:	2300      	movs	r3, #0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10b      	bne.n	8007b94 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	623b      	str	r3, [r7, #32]
}
 8007b8e:	bf00      	nop
 8007b90:	bf00      	nop
 8007b92:	e7fd      	b.n	8007b90 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d102      	bne.n	8007ba0 <xQueueGenericCreateStatic+0x84>
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <xQueueGenericCreateStatic+0x88>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e000      	b.n	8007ba6 <xQueueGenericCreateStatic+0x8a>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10b      	bne.n	8007bc2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	61fb      	str	r3, [r7, #28]
}
 8007bbc:	bf00      	nop
 8007bbe:	bf00      	nop
 8007bc0:	e7fd      	b.n	8007bbe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bc2:	2350      	movs	r3, #80	@ 0x50
 8007bc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b50      	cmp	r3, #80	@ 0x50
 8007bca:	d00b      	beq.n	8007be4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	61bb      	str	r3, [r7, #24]
}
 8007bde:	bf00      	nop
 8007be0:	bf00      	nop
 8007be2:	e7fd      	b.n	8007be0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007be4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00d      	beq.n	8007c0c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bf8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	4613      	mov	r3, r2
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	68b9      	ldr	r1, [r7, #8]
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 f805 	bl	8007c16 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3730      	adds	r7, #48	@ 0x30
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	60f8      	str	r0, [r7, #12]
 8007c1e:	60b9      	str	r1, [r7, #8]
 8007c20:	607a      	str	r2, [r7, #4]
 8007c22:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d103      	bne.n	8007c32 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	e002      	b.n	8007c38 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c44:	2101      	movs	r1, #1
 8007c46:	69b8      	ldr	r0, [r7, #24]
 8007c48:	f7ff fefe 	bl	8007a48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	78fa      	ldrb	r2, [r7, #3]
 8007c50:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b08e      	sub	sp, #56	@ 0x38
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
 8007c68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10b      	bne.n	8007c90 <xQueueGenericSend+0x34>
	__asm volatile
 8007c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c8a:	bf00      	nop
 8007c8c:	bf00      	nop
 8007c8e:	e7fd      	b.n	8007c8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d103      	bne.n	8007c9e <xQueueGenericSend+0x42>
 8007c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <xQueueGenericSend+0x46>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e000      	b.n	8007ca4 <xQueueGenericSend+0x48>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10b      	bne.n	8007cc0 <xQueueGenericSend+0x64>
	__asm volatile
 8007ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cac:	f383 8811 	msr	BASEPRI, r3
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007cba:	bf00      	nop
 8007cbc:	bf00      	nop
 8007cbe:	e7fd      	b.n	8007cbc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d103      	bne.n	8007cce <xQueueGenericSend+0x72>
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d101      	bne.n	8007cd2 <xQueueGenericSend+0x76>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e000      	b.n	8007cd4 <xQueueGenericSend+0x78>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10b      	bne.n	8007cf0 <xQueueGenericSend+0x94>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	623b      	str	r3, [r7, #32]
}
 8007cea:	bf00      	nop
 8007cec:	bf00      	nop
 8007cee:	e7fd      	b.n	8007cec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cf0:	f001 f9ce 	bl	8009090 <xTaskGetSchedulerState>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d102      	bne.n	8007d00 <xQueueGenericSend+0xa4>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d101      	bne.n	8007d04 <xQueueGenericSend+0xa8>
 8007d00:	2301      	movs	r3, #1
 8007d02:	e000      	b.n	8007d06 <xQueueGenericSend+0xaa>
 8007d04:	2300      	movs	r3, #0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10b      	bne.n	8007d22 <xQueueGenericSend+0xc6>
	__asm volatile
 8007d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	61fb      	str	r3, [r7, #28]
}
 8007d1c:	bf00      	nop
 8007d1e:	bf00      	nop
 8007d20:	e7fd      	b.n	8007d1e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d22:	f001 ff21 	bl	8009b68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d302      	bcc.n	8007d38 <xQueueGenericSend+0xdc>
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d129      	bne.n	8007d8c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d38:	683a      	ldr	r2, [r7, #0]
 8007d3a:	68b9      	ldr	r1, [r7, #8]
 8007d3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d3e:	f000 fa0f 	bl	8008160 <prvCopyDataToQueue>
 8007d42:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d010      	beq.n	8007d6e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4e:	3324      	adds	r3, #36	@ 0x24
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 ffdd 	bl	8008d10 <xTaskRemoveFromEventList>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d013      	beq.n	8007d84 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d5c:	4b3f      	ldr	r3, [pc, #252]	@ (8007e5c <xQueueGenericSend+0x200>)
 8007d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	e00a      	b.n	8007d84 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d007      	beq.n	8007d84 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d74:	4b39      	ldr	r3, [pc, #228]	@ (8007e5c <xQueueGenericSend+0x200>)
 8007d76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d84:	f001 ff22 	bl	8009bcc <vPortExitCritical>
				return pdPASS;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e063      	b.n	8007e54 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d103      	bne.n	8007d9a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d92:	f001 ff1b 	bl	8009bcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d96:	2300      	movs	r3, #0
 8007d98:	e05c      	b.n	8007e54 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d106      	bne.n	8007dae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007da0:	f107 0314 	add.w	r3, r7, #20
 8007da4:	4618      	mov	r0, r3
 8007da6:	f001 f817 	bl	8008dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007daa:	2301      	movs	r3, #1
 8007dac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dae:	f001 ff0d 	bl	8009bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007db2:	f000 fd87 	bl	80088c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007db6:	f001 fed7 	bl	8009b68 <vPortEnterCritical>
 8007dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007dc0:	b25b      	sxtb	r3, r3
 8007dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007dc6:	d103      	bne.n	8007dd0 <xQueueGenericSend+0x174>
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dd6:	b25b      	sxtb	r3, r3
 8007dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ddc:	d103      	bne.n	8007de6 <xQueueGenericSend+0x18a>
 8007dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007de6:	f001 fef1 	bl	8009bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dea:	1d3a      	adds	r2, r7, #4
 8007dec:	f107 0314 	add.w	r3, r7, #20
 8007df0:	4611      	mov	r1, r2
 8007df2:	4618      	mov	r0, r3
 8007df4:	f001 f806 	bl	8008e04 <xTaskCheckForTimeOut>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d124      	bne.n	8007e48 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007dfe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e00:	f000 faa6 	bl	8008350 <prvIsQueueFull>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d018      	beq.n	8007e3c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0c:	3310      	adds	r3, #16
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	4611      	mov	r1, r2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 ff2a 	bl	8008c6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e1a:	f000 fa31 	bl	8008280 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e1e:	f000 fd5f 	bl	80088e0 <xTaskResumeAll>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f47f af7c 	bne.w	8007d22 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e5c <xQueueGenericSend+0x200>)
 8007e2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e30:	601a      	str	r2, [r3, #0]
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	e772      	b.n	8007d22 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e3e:	f000 fa1f 	bl	8008280 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e42:	f000 fd4d 	bl	80088e0 <xTaskResumeAll>
 8007e46:	e76c      	b.n	8007d22 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e4a:	f000 fa19 	bl	8008280 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e4e:	f000 fd47 	bl	80088e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3738      	adds	r7, #56	@ 0x38
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	e000ed04 	.word	0xe000ed04

08007e60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b090      	sub	sp, #64	@ 0x40
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10b      	bne.n	8007e90 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e8a:	bf00      	nop
 8007e8c:	bf00      	nop
 8007e8e:	e7fd      	b.n	8007e8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d103      	bne.n	8007e9e <xQueueGenericSendFromISR+0x3e>
 8007e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <xQueueGenericSendFromISR+0x42>
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e000      	b.n	8007ea4 <xQueueGenericSendFromISR+0x44>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10b      	bne.n	8007ec0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007eba:	bf00      	nop
 8007ebc:	bf00      	nop
 8007ebe:	e7fd      	b.n	8007ebc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d103      	bne.n	8007ece <xQueueGenericSendFromISR+0x6e>
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d101      	bne.n	8007ed2 <xQueueGenericSendFromISR+0x72>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e000      	b.n	8007ed4 <xQueueGenericSendFromISR+0x74>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10b      	bne.n	8007ef0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	623b      	str	r3, [r7, #32]
}
 8007eea:	bf00      	nop
 8007eec:	bf00      	nop
 8007eee:	e7fd      	b.n	8007eec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ef0:	f001 ff1a 	bl	8009d28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ef4:	f3ef 8211 	mrs	r2, BASEPRI
 8007ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efc:	f383 8811 	msr	BASEPRI, r3
 8007f00:	f3bf 8f6f 	isb	sy
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	61fa      	str	r2, [r7, #28]
 8007f0a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f0c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f0e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d302      	bcc.n	8007f22 <xQueueGenericSendFromISR+0xc2>
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d12f      	bne.n	8007f82 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	68b9      	ldr	r1, [r7, #8]
 8007f36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007f38:	f000 f912 	bl	8008160 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f3c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007f40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f44:	d112      	bne.n	8007f6c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d016      	beq.n	8007f7c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f50:	3324      	adds	r3, #36	@ 0x24
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fedc 	bl	8008d10 <xTaskRemoveFromEventList>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00e      	beq.n	8007f7c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00b      	beq.n	8007f7c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	e007      	b.n	8007f7c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007f70:	3301      	adds	r3, #1
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	b25a      	sxtb	r2, r3
 8007f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007f80:	e001      	b.n	8007f86 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f82:	2300      	movs	r3, #0
 8007f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f88:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3740      	adds	r7, #64	@ 0x40
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b08c      	sub	sp, #48	@ 0x30
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10b      	bne.n	8007fce <xQueueReceive+0x32>
	__asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	623b      	str	r3, [r7, #32]
}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	e7fd      	b.n	8007fca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d103      	bne.n	8007fdc <xQueueReceive+0x40>
 8007fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <xQueueReceive+0x44>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e000      	b.n	8007fe2 <xQueueReceive+0x46>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10b      	bne.n	8007ffe <xQueueReceive+0x62>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	61fb      	str	r3, [r7, #28]
}
 8007ff8:	bf00      	nop
 8007ffa:	bf00      	nop
 8007ffc:	e7fd      	b.n	8007ffa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ffe:	f001 f847 	bl	8009090 <xTaskGetSchedulerState>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d102      	bne.n	800800e <xQueueReceive+0x72>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <xQueueReceive+0x76>
 800800e:	2301      	movs	r3, #1
 8008010:	e000      	b.n	8008014 <xQueueReceive+0x78>
 8008012:	2300      	movs	r3, #0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10b      	bne.n	8008030 <xQueueReceive+0x94>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	61bb      	str	r3, [r7, #24]
}
 800802a:	bf00      	nop
 800802c:	bf00      	nop
 800802e:	e7fd      	b.n	800802c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008030:	f001 fd9a 	bl	8009b68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008038:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800803a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803c:	2b00      	cmp	r3, #0
 800803e:	d01f      	beq.n	8008080 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008040:	68b9      	ldr	r1, [r7, #8]
 8008042:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008044:	f000 f8f6 	bl	8008234 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804a:	1e5a      	subs	r2, r3, #1
 800804c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00f      	beq.n	8008078 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800805a:	3310      	adds	r3, #16
 800805c:	4618      	mov	r0, r3
 800805e:	f000 fe57 	bl	8008d10 <xTaskRemoveFromEventList>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d007      	beq.n	8008078 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008068:	4b3c      	ldr	r3, [pc, #240]	@ (800815c <xQueueReceive+0x1c0>)
 800806a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008078:	f001 fda8 	bl	8009bcc <vPortExitCritical>
				return pdPASS;
 800807c:	2301      	movs	r3, #1
 800807e:	e069      	b.n	8008154 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d103      	bne.n	800808e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008086:	f001 fda1 	bl	8009bcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800808a:	2300      	movs	r3, #0
 800808c:	e062      	b.n	8008154 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800808e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008090:	2b00      	cmp	r3, #0
 8008092:	d106      	bne.n	80080a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008094:	f107 0310 	add.w	r3, r7, #16
 8008098:	4618      	mov	r0, r3
 800809a:	f000 fe9d 	bl	8008dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800809e:	2301      	movs	r3, #1
 80080a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080a2:	f001 fd93 	bl	8009bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080a6:	f000 fc0d 	bl	80088c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080aa:	f001 fd5d 	bl	8009b68 <vPortEnterCritical>
 80080ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080b4:	b25b      	sxtb	r3, r3
 80080b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080ba:	d103      	bne.n	80080c4 <xQueueReceive+0x128>
 80080bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080ca:	b25b      	sxtb	r3, r3
 80080cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080d0:	d103      	bne.n	80080da <xQueueReceive+0x13e>
 80080d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080da:	f001 fd77 	bl	8009bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080de:	1d3a      	adds	r2, r7, #4
 80080e0:	f107 0310 	add.w	r3, r7, #16
 80080e4:	4611      	mov	r1, r2
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 fe8c 	bl	8008e04 <xTaskCheckForTimeOut>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d123      	bne.n	800813a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080f4:	f000 f916 	bl	8008324 <prvIsQueueEmpty>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d017      	beq.n	800812e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008100:	3324      	adds	r3, #36	@ 0x24
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	4611      	mov	r1, r2
 8008106:	4618      	mov	r0, r3
 8008108:	f000 fdb0 	bl	8008c6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800810c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800810e:	f000 f8b7 	bl	8008280 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008112:	f000 fbe5 	bl	80088e0 <xTaskResumeAll>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d189      	bne.n	8008030 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800811c:	4b0f      	ldr	r3, [pc, #60]	@ (800815c <xQueueReceive+0x1c0>)
 800811e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	e780      	b.n	8008030 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800812e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008130:	f000 f8a6 	bl	8008280 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008134:	f000 fbd4 	bl	80088e0 <xTaskResumeAll>
 8008138:	e77a      	b.n	8008030 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800813a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800813c:	f000 f8a0 	bl	8008280 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008140:	f000 fbce 	bl	80088e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008144:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008146:	f000 f8ed 	bl	8008324 <prvIsQueueEmpty>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	f43f af6f 	beq.w	8008030 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008152:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008154:	4618      	mov	r0, r3
 8008156:	3730      	adds	r7, #48	@ 0x30
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	e000ed04 	.word	0xe000ed04

08008160 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800816c:	2300      	movs	r3, #0
 800816e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008174:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10d      	bne.n	800819a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d14d      	bne.n	8008222 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	4618      	mov	r0, r3
 800818c:	f000 ff9e 	bl	80090cc <xTaskPriorityDisinherit>
 8008190:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	609a      	str	r2, [r3, #8]
 8008198:	e043      	b.n	8008222 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d119      	bne.n	80081d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6858      	ldr	r0, [r3, #4]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a8:	461a      	mov	r2, r3
 80081aa:	68b9      	ldr	r1, [r7, #8]
 80081ac:	f002 f840 	bl	800a230 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	685a      	ldr	r2, [r3, #4]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b8:	441a      	add	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d32b      	bcc.n	8008222 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	605a      	str	r2, [r3, #4]
 80081d2:	e026      	b.n	8008222 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	68d8      	ldr	r0, [r3, #12]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081dc:	461a      	mov	r2, r3
 80081de:	68b9      	ldr	r1, [r7, #8]
 80081e0:	f002 f826 	bl	800a230 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ec:	425b      	negs	r3, r3
 80081ee:	441a      	add	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	68da      	ldr	r2, [r3, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d207      	bcs.n	8008210 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008208:	425b      	negs	r3, r3
 800820a:	441a      	add	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b02      	cmp	r3, #2
 8008214:	d105      	bne.n	8008222 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d002      	beq.n	8008222 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	3b01      	subs	r3, #1
 8008220:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	1c5a      	adds	r2, r3, #1
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800822a:	697b      	ldr	r3, [r7, #20]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3718      	adds	r7, #24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008242:	2b00      	cmp	r3, #0
 8008244:	d018      	beq.n	8008278 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800824e:	441a      	add	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68da      	ldr	r2, [r3, #12]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	429a      	cmp	r2, r3
 800825e:	d303      	bcc.n	8008268 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68d9      	ldr	r1, [r3, #12]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008270:	461a      	mov	r2, r3
 8008272:	6838      	ldr	r0, [r7, #0]
 8008274:	f001 ffdc 	bl	800a230 <memcpy>
	}
}
 8008278:	bf00      	nop
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008288:	f001 fc6e 	bl	8009b68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008292:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008294:	e011      	b.n	80082ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800829a:	2b00      	cmp	r3, #0
 800829c:	d012      	beq.n	80082c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	3324      	adds	r3, #36	@ 0x24
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 fd34 	bl	8008d10 <xTaskRemoveFromEventList>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082ae:	f000 fe0d 	bl	8008ecc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082b2:	7bfb      	ldrb	r3, [r7, #15]
 80082b4:	3b01      	subs	r3, #1
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	dce9      	bgt.n	8008296 <prvUnlockQueue+0x16>
 80082c2:	e000      	b.n	80082c6 <prvUnlockQueue+0x46>
					break;
 80082c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	22ff      	movs	r2, #255	@ 0xff
 80082ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80082ce:	f001 fc7d 	bl	8009bcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082d2:	f001 fc49 	bl	8009b68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082de:	e011      	b.n	8008304 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d012      	beq.n	800830e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3310      	adds	r3, #16
 80082ec:	4618      	mov	r0, r3
 80082ee:	f000 fd0f 	bl	8008d10 <xTaskRemoveFromEventList>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80082f8:	f000 fde8 	bl	8008ecc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082fc:	7bbb      	ldrb	r3, [r7, #14]
 80082fe:	3b01      	subs	r3, #1
 8008300:	b2db      	uxtb	r3, r3
 8008302:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008304:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008308:	2b00      	cmp	r3, #0
 800830a:	dce9      	bgt.n	80082e0 <prvUnlockQueue+0x60>
 800830c:	e000      	b.n	8008310 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800830e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	22ff      	movs	r2, #255	@ 0xff
 8008314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008318:	f001 fc58 	bl	8009bcc <vPortExitCritical>
}
 800831c:	bf00      	nop
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800832c:	f001 fc1c 	bl	8009b68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008334:	2b00      	cmp	r3, #0
 8008336:	d102      	bne.n	800833e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008338:	2301      	movs	r3, #1
 800833a:	60fb      	str	r3, [r7, #12]
 800833c:	e001      	b.n	8008342 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800833e:	2300      	movs	r3, #0
 8008340:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008342:	f001 fc43 	bl	8009bcc <vPortExitCritical>

	return xReturn;
 8008346:	68fb      	ldr	r3, [r7, #12]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008358:	f001 fc06 	bl	8009b68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008364:	429a      	cmp	r2, r3
 8008366:	d102      	bne.n	800836e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008368:	2301      	movs	r3, #1
 800836a:	60fb      	str	r3, [r7, #12]
 800836c:	e001      	b.n	8008372 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800836e:	2300      	movs	r3, #0
 8008370:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008372:	f001 fc2b 	bl	8009bcc <vPortExitCritical>

	return xReturn;
 8008376:	68fb      	ldr	r3, [r7, #12]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800838a:	2300      	movs	r3, #0
 800838c:	60fb      	str	r3, [r7, #12]
 800838e:	e014      	b.n	80083ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008390:	4a0f      	ldr	r2, [pc, #60]	@ (80083d0 <vQueueAddToRegistry+0x50>)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10b      	bne.n	80083b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800839c:	490c      	ldr	r1, [pc, #48]	@ (80083d0 <vQueueAddToRegistry+0x50>)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	683a      	ldr	r2, [r7, #0]
 80083a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083a6:	4a0a      	ldr	r2, [pc, #40]	@ (80083d0 <vQueueAddToRegistry+0x50>)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	00db      	lsls	r3, r3, #3
 80083ac:	4413      	add	r3, r2
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083b2:	e006      	b.n	80083c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3301      	adds	r3, #1
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b07      	cmp	r3, #7
 80083be:	d9e7      	bls.n	8008390 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083c0:	bf00      	nop
 80083c2:	bf00      	nop
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	20000ec4 	.word	0x20000ec4

080083d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083e4:	f001 fbc0 	bl	8009b68 <vPortEnterCritical>
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083ee:	b25b      	sxtb	r3, r3
 80083f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083f4:	d103      	bne.n	80083fe <vQueueWaitForMessageRestricted+0x2a>
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008404:	b25b      	sxtb	r3, r3
 8008406:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800840a:	d103      	bne.n	8008414 <vQueueWaitForMessageRestricted+0x40>
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008414:	f001 fbda 	bl	8009bcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800841c:	2b00      	cmp	r3, #0
 800841e:	d106      	bne.n	800842e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	3324      	adds	r3, #36	@ 0x24
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	68b9      	ldr	r1, [r7, #8]
 8008428:	4618      	mov	r0, r3
 800842a:	f000 fc45 	bl	8008cb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800842e:	6978      	ldr	r0, [r7, #20]
 8008430:	f7ff ff26 	bl	8008280 <prvUnlockQueue>
	}
 8008434:	bf00      	nop
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08e      	sub	sp, #56	@ 0x38
 8008440:	af04      	add	r7, sp, #16
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
 8008448:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800844a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10b      	bne.n	8008468 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	623b      	str	r3, [r7, #32]
}
 8008462:	bf00      	nop
 8008464:	bf00      	nop
 8008466:	e7fd      	b.n	8008464 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10b      	bne.n	8008486 <xTaskCreateStatic+0x4a>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	61fb      	str	r3, [r7, #28]
}
 8008480:	bf00      	nop
 8008482:	bf00      	nop
 8008484:	e7fd      	b.n	8008482 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008486:	235c      	movs	r3, #92	@ 0x5c
 8008488:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	2b5c      	cmp	r3, #92	@ 0x5c
 800848e:	d00b      	beq.n	80084a8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	61bb      	str	r3, [r7, #24]
}
 80084a2:	bf00      	nop
 80084a4:	bf00      	nop
 80084a6:	e7fd      	b.n	80084a4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d01e      	beq.n	80084ee <xTaskCreateStatic+0xb2>
 80084b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d01b      	beq.n	80084ee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084be:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c2:	2202      	movs	r2, #2
 80084c4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084c8:	2300      	movs	r3, #0
 80084ca:	9303      	str	r3, [sp, #12]
 80084cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ce:	9302      	str	r3, [sp, #8]
 80084d0:	f107 0314 	add.w	r3, r7, #20
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	68b9      	ldr	r1, [r7, #8]
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 f850 	bl	8008586 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80084e8:	f000 f8de 	bl	80086a8 <prvAddNewTaskToReadyList>
 80084ec:	e001      	b.n	80084f2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80084ee:	2300      	movs	r3, #0
 80084f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084f2:	697b      	ldr	r3, [r7, #20]
	}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3728      	adds	r7, #40	@ 0x28
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b08c      	sub	sp, #48	@ 0x30
 8008500:	af04      	add	r7, sp, #16
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	603b      	str	r3, [r7, #0]
 8008508:	4613      	mov	r3, r2
 800850a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800850c:	88fb      	ldrh	r3, [r7, #6]
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4618      	mov	r0, r3
 8008512:	f001 fc4b 	bl	8009dac <pvPortMalloc>
 8008516:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00e      	beq.n	800853c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800851e:	205c      	movs	r0, #92	@ 0x5c
 8008520:	f001 fc44 	bl	8009dac <pvPortMalloc>
 8008524:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d003      	beq.n	8008534 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	631a      	str	r2, [r3, #48]	@ 0x30
 8008532:	e005      	b.n	8008540 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008534:	6978      	ldr	r0, [r7, #20]
 8008536:	f001 fd07 	bl	8009f48 <vPortFree>
 800853a:	e001      	b.n	8008540 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800853c:	2300      	movs	r3, #0
 800853e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d017      	beq.n	8008576 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800854e:	88fa      	ldrh	r2, [r7, #6]
 8008550:	2300      	movs	r3, #0
 8008552:	9303      	str	r3, [sp, #12]
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	9302      	str	r3, [sp, #8]
 8008558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855a:	9301      	str	r3, [sp, #4]
 800855c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	68b9      	ldr	r1, [r7, #8]
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 f80e 	bl	8008586 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800856a:	69f8      	ldr	r0, [r7, #28]
 800856c:	f000 f89c 	bl	80086a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008570:	2301      	movs	r3, #1
 8008572:	61bb      	str	r3, [r7, #24]
 8008574:	e002      	b.n	800857c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008576:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800857a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800857c:	69bb      	ldr	r3, [r7, #24]
	}
 800857e:	4618      	mov	r0, r3
 8008580:	3720      	adds	r7, #32
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b088      	sub	sp, #32
 800858a:	af00      	add	r7, sp, #0
 800858c:	60f8      	str	r0, [r7, #12]
 800858e:	60b9      	str	r1, [r7, #8]
 8008590:	607a      	str	r2, [r7, #4]
 8008592:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008596:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	461a      	mov	r2, r3
 800859e:	21a5      	movs	r1, #165	@ 0xa5
 80085a0:	f001 fe12 	bl	800a1c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80085ae:	3b01      	subs	r3, #1
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	f023 0307 	bic.w	r3, r3, #7
 80085bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	f003 0307 	and.w	r3, r3, #7
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00b      	beq.n	80085e0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80085c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085cc:	f383 8811 	msr	BASEPRI, r3
 80085d0:	f3bf 8f6f 	isb	sy
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	617b      	str	r3, [r7, #20]
}
 80085da:	bf00      	nop
 80085dc:	bf00      	nop
 80085de:	e7fd      	b.n	80085dc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d01f      	beq.n	8008626 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085e6:	2300      	movs	r3, #0
 80085e8:	61fb      	str	r3, [r7, #28]
 80085ea:	e012      	b.n	8008612 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	4413      	add	r3, r2
 80085f2:	7819      	ldrb	r1, [r3, #0]
 80085f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	4413      	add	r3, r2
 80085fa:	3334      	adds	r3, #52	@ 0x34
 80085fc:	460a      	mov	r2, r1
 80085fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	4413      	add	r3, r2
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d006      	beq.n	800861a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	3301      	adds	r3, #1
 8008610:	61fb      	str	r3, [r7, #28]
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	2b0f      	cmp	r3, #15
 8008616:	d9e9      	bls.n	80085ec <prvInitialiseNewTask+0x66>
 8008618:	e000      	b.n	800861c <prvInitialiseNewTask+0x96>
			{
				break;
 800861a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800861c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008624:	e003      	b.n	800862e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008628:	2200      	movs	r2, #0
 800862a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800862e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008630:	2b37      	cmp	r3, #55	@ 0x37
 8008632:	d901      	bls.n	8008638 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008634:	2337      	movs	r3, #55	@ 0x37
 8008636:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800863c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800863e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008640:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008642:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008646:	2200      	movs	r2, #0
 8008648:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800864a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864c:	3304      	adds	r3, #4
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff f966 	bl	8007920 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008656:	3318      	adds	r3, #24
 8008658:	4618      	mov	r0, r3
 800865a:	f7ff f961 	bl	8007920 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800865e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008662:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008666:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800866a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008672:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008676:	2200      	movs	r2, #0
 8008678:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800867a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	68f9      	ldr	r1, [r7, #12]
 8008686:	69b8      	ldr	r0, [r7, #24]
 8008688:	f001 f93e 	bl	8009908 <pxPortInitialiseStack>
 800868c:	4602      	mov	r2, r0
 800868e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008690:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008694:	2b00      	cmp	r3, #0
 8008696:	d002      	beq.n	800869e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800869c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800869e:	bf00      	nop
 80086a0:	3720      	adds	r7, #32
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
	...

080086a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086b0:	f001 fa5a 	bl	8009b68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086b4:	4b2d      	ldr	r3, [pc, #180]	@ (800876c <prvAddNewTaskToReadyList+0xc4>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3301      	adds	r3, #1
 80086ba:	4a2c      	ldr	r2, [pc, #176]	@ (800876c <prvAddNewTaskToReadyList+0xc4>)
 80086bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086be:	4b2c      	ldr	r3, [pc, #176]	@ (8008770 <prvAddNewTaskToReadyList+0xc8>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d109      	bne.n	80086da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086c6:	4a2a      	ldr	r2, [pc, #168]	@ (8008770 <prvAddNewTaskToReadyList+0xc8>)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086cc:	4b27      	ldr	r3, [pc, #156]	@ (800876c <prvAddNewTaskToReadyList+0xc4>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d110      	bne.n	80086f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086d4:	f000 fc1e 	bl	8008f14 <prvInitialiseTaskLists>
 80086d8:	e00d      	b.n	80086f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086da:	4b26      	ldr	r3, [pc, #152]	@ (8008774 <prvAddNewTaskToReadyList+0xcc>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d109      	bne.n	80086f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086e2:	4b23      	ldr	r3, [pc, #140]	@ (8008770 <prvAddNewTaskToReadyList+0xc8>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d802      	bhi.n	80086f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086f0:	4a1f      	ldr	r2, [pc, #124]	@ (8008770 <prvAddNewTaskToReadyList+0xc8>)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086f6:	4b20      	ldr	r3, [pc, #128]	@ (8008778 <prvAddNewTaskToReadyList+0xd0>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3301      	adds	r3, #1
 80086fc:	4a1e      	ldr	r2, [pc, #120]	@ (8008778 <prvAddNewTaskToReadyList+0xd0>)
 80086fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008700:	4b1d      	ldr	r3, [pc, #116]	@ (8008778 <prvAddNewTaskToReadyList+0xd0>)
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800870c:	4b1b      	ldr	r3, [pc, #108]	@ (800877c <prvAddNewTaskToReadyList+0xd4>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	429a      	cmp	r2, r3
 8008712:	d903      	bls.n	800871c <prvAddNewTaskToReadyList+0x74>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008718:	4a18      	ldr	r2, [pc, #96]	@ (800877c <prvAddNewTaskToReadyList+0xd4>)
 800871a:	6013      	str	r3, [r2, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008720:	4613      	mov	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	4a15      	ldr	r2, [pc, #84]	@ (8008780 <prvAddNewTaskToReadyList+0xd8>)
 800872a:	441a      	add	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	3304      	adds	r3, #4
 8008730:	4619      	mov	r1, r3
 8008732:	4610      	mov	r0, r2
 8008734:	f7ff f901 	bl	800793a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008738:	f001 fa48 	bl	8009bcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800873c:	4b0d      	ldr	r3, [pc, #52]	@ (8008774 <prvAddNewTaskToReadyList+0xcc>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00e      	beq.n	8008762 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008744:	4b0a      	ldr	r3, [pc, #40]	@ (8008770 <prvAddNewTaskToReadyList+0xc8>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800874e:	429a      	cmp	r2, r3
 8008750:	d207      	bcs.n	8008762 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008752:	4b0c      	ldr	r3, [pc, #48]	@ (8008784 <prvAddNewTaskToReadyList+0xdc>)
 8008754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008758:	601a      	str	r2, [r3, #0]
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008762:	bf00      	nop
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	200013d8 	.word	0x200013d8
 8008770:	20000f04 	.word	0x20000f04
 8008774:	200013e4 	.word	0x200013e4
 8008778:	200013f4 	.word	0x200013f4
 800877c:	200013e0 	.word	0x200013e0
 8008780:	20000f08 	.word	0x20000f08
 8008784:	e000ed04 	.word	0xe000ed04

08008788 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008790:	2300      	movs	r3, #0
 8008792:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d018      	beq.n	80087cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800879a:	4b14      	ldr	r3, [pc, #80]	@ (80087ec <vTaskDelay+0x64>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00b      	beq.n	80087ba <vTaskDelay+0x32>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a6:	f383 8811 	msr	BASEPRI, r3
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	60bb      	str	r3, [r7, #8]
}
 80087b4:	bf00      	nop
 80087b6:	bf00      	nop
 80087b8:	e7fd      	b.n	80087b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80087ba:	f000 f883 	bl	80088c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087be:	2100      	movs	r1, #0
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fcf3 	bl	80091ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087c6:	f000 f88b 	bl	80088e0 <xTaskResumeAll>
 80087ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d107      	bne.n	80087e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80087d2:	4b07      	ldr	r3, [pc, #28]	@ (80087f0 <vTaskDelay+0x68>)
 80087d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087d8:	601a      	str	r2, [r3, #0]
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087e2:	bf00      	nop
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20001400 	.word	0x20001400
 80087f0:	e000ed04 	.word	0xe000ed04

080087f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b08a      	sub	sp, #40	@ 0x28
 80087f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087fa:	2300      	movs	r3, #0
 80087fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087fe:	2300      	movs	r3, #0
 8008800:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008802:	463a      	mov	r2, r7
 8008804:	1d39      	adds	r1, r7, #4
 8008806:	f107 0308 	add.w	r3, r7, #8
 800880a:	4618      	mov	r0, r3
 800880c:	f7ff f834 	bl	8007878 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	9202      	str	r2, [sp, #8]
 8008818:	9301      	str	r3, [sp, #4]
 800881a:	2300      	movs	r3, #0
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	2300      	movs	r3, #0
 8008820:	460a      	mov	r2, r1
 8008822:	4922      	ldr	r1, [pc, #136]	@ (80088ac <vTaskStartScheduler+0xb8>)
 8008824:	4822      	ldr	r0, [pc, #136]	@ (80088b0 <vTaskStartScheduler+0xbc>)
 8008826:	f7ff fe09 	bl	800843c <xTaskCreateStatic>
 800882a:	4603      	mov	r3, r0
 800882c:	4a21      	ldr	r2, [pc, #132]	@ (80088b4 <vTaskStartScheduler+0xc0>)
 800882e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008830:	4b20      	ldr	r3, [pc, #128]	@ (80088b4 <vTaskStartScheduler+0xc0>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008838:	2301      	movs	r3, #1
 800883a:	617b      	str	r3, [r7, #20]
 800883c:	e001      	b.n	8008842 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800883e:	2300      	movs	r3, #0
 8008840:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d102      	bne.n	800884e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008848:	f000 fd04 	bl	8009254 <xTimerCreateTimerTask>
 800884c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d116      	bne.n	8008882 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	613b      	str	r3, [r7, #16]
}
 8008866:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008868:	4b13      	ldr	r3, [pc, #76]	@ (80088b8 <vTaskStartScheduler+0xc4>)
 800886a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800886e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008870:	4b12      	ldr	r3, [pc, #72]	@ (80088bc <vTaskStartScheduler+0xc8>)
 8008872:	2201      	movs	r2, #1
 8008874:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008876:	4b12      	ldr	r3, [pc, #72]	@ (80088c0 <vTaskStartScheduler+0xcc>)
 8008878:	2200      	movs	r2, #0
 800887a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800887c:	f001 f8d0 	bl	8009a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008880:	e00f      	b.n	80088a2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008888:	d10b      	bne.n	80088a2 <vTaskStartScheduler+0xae>
	__asm volatile
 800888a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	60fb      	str	r3, [r7, #12]
}
 800889c:	bf00      	nop
 800889e:	bf00      	nop
 80088a0:	e7fd      	b.n	800889e <vTaskStartScheduler+0xaa>
}
 80088a2:	bf00      	nop
 80088a4:	3718      	adds	r7, #24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	0800ab08 	.word	0x0800ab08
 80088b0:	08008ee5 	.word	0x08008ee5
 80088b4:	200013fc 	.word	0x200013fc
 80088b8:	200013f8 	.word	0x200013f8
 80088bc:	200013e4 	.word	0x200013e4
 80088c0:	200013dc 	.word	0x200013dc

080088c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088c4:	b480      	push	{r7}
 80088c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80088c8:	4b04      	ldr	r3, [pc, #16]	@ (80088dc <vTaskSuspendAll+0x18>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	3301      	adds	r3, #1
 80088ce:	4a03      	ldr	r2, [pc, #12]	@ (80088dc <vTaskSuspendAll+0x18>)
 80088d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80088d2:	bf00      	nop
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	20001400 	.word	0x20001400

080088e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088e6:	2300      	movs	r3, #0
 80088e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088ea:	2300      	movs	r3, #0
 80088ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088ee:	4b42      	ldr	r3, [pc, #264]	@ (80089f8 <xTaskResumeAll+0x118>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10b      	bne.n	800890e <xTaskResumeAll+0x2e>
	__asm volatile
 80088f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fa:	f383 8811 	msr	BASEPRI, r3
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	603b      	str	r3, [r7, #0]
}
 8008908:	bf00      	nop
 800890a:	bf00      	nop
 800890c:	e7fd      	b.n	800890a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800890e:	f001 f92b 	bl	8009b68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008912:	4b39      	ldr	r3, [pc, #228]	@ (80089f8 <xTaskResumeAll+0x118>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	3b01      	subs	r3, #1
 8008918:	4a37      	ldr	r2, [pc, #220]	@ (80089f8 <xTaskResumeAll+0x118>)
 800891a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800891c:	4b36      	ldr	r3, [pc, #216]	@ (80089f8 <xTaskResumeAll+0x118>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d162      	bne.n	80089ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008924:	4b35      	ldr	r3, [pc, #212]	@ (80089fc <xTaskResumeAll+0x11c>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d05e      	beq.n	80089ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800892c:	e02f      	b.n	800898e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800892e:	4b34      	ldr	r3, [pc, #208]	@ (8008a00 <xTaskResumeAll+0x120>)
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3318      	adds	r3, #24
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff f85a 	bl	80079f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	3304      	adds	r3, #4
 8008944:	4618      	mov	r0, r3
 8008946:	f7ff f855 	bl	80079f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800894e:	4b2d      	ldr	r3, [pc, #180]	@ (8008a04 <xTaskResumeAll+0x124>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	429a      	cmp	r2, r3
 8008954:	d903      	bls.n	800895e <xTaskResumeAll+0x7e>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895a:	4a2a      	ldr	r2, [pc, #168]	@ (8008a04 <xTaskResumeAll+0x124>)
 800895c:	6013      	str	r3, [r2, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008962:	4613      	mov	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4413      	add	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4a27      	ldr	r2, [pc, #156]	@ (8008a08 <xTaskResumeAll+0x128>)
 800896c:	441a      	add	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	3304      	adds	r3, #4
 8008972:	4619      	mov	r1, r3
 8008974:	4610      	mov	r0, r2
 8008976:	f7fe ffe0 	bl	800793a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800897e:	4b23      	ldr	r3, [pc, #140]	@ (8008a0c <xTaskResumeAll+0x12c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008984:	429a      	cmp	r2, r3
 8008986:	d302      	bcc.n	800898e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008988:	4b21      	ldr	r3, [pc, #132]	@ (8008a10 <xTaskResumeAll+0x130>)
 800898a:	2201      	movs	r2, #1
 800898c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800898e:	4b1c      	ldr	r3, [pc, #112]	@ (8008a00 <xTaskResumeAll+0x120>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1cb      	bne.n	800892e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d001      	beq.n	80089a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800899c:	f000 fb58 	bl	8009050 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008a14 <xTaskResumeAll+0x134>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d010      	beq.n	80089ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089ac:	f000 f846 	bl	8008a3c <xTaskIncrementTick>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d002      	beq.n	80089bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80089b6:	4b16      	ldr	r3, [pc, #88]	@ (8008a10 <xTaskResumeAll+0x130>)
 80089b8:	2201      	movs	r2, #1
 80089ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	3b01      	subs	r3, #1
 80089c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1f1      	bne.n	80089ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80089c8:	4b12      	ldr	r3, [pc, #72]	@ (8008a14 <xTaskResumeAll+0x134>)
 80089ca:	2200      	movs	r2, #0
 80089cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089ce:	4b10      	ldr	r3, [pc, #64]	@ (8008a10 <xTaskResumeAll+0x130>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d009      	beq.n	80089ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089d6:	2301      	movs	r3, #1
 80089d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089da:	4b0f      	ldr	r3, [pc, #60]	@ (8008a18 <xTaskResumeAll+0x138>)
 80089dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089ea:	f001 f8ef 	bl	8009bcc <vPortExitCritical>

	return xAlreadyYielded;
 80089ee:	68bb      	ldr	r3, [r7, #8]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	20001400 	.word	0x20001400
 80089fc:	200013d8 	.word	0x200013d8
 8008a00:	20001398 	.word	0x20001398
 8008a04:	200013e0 	.word	0x200013e0
 8008a08:	20000f08 	.word	0x20000f08
 8008a0c:	20000f04 	.word	0x20000f04
 8008a10:	200013ec 	.word	0x200013ec
 8008a14:	200013e8 	.word	0x200013e8
 8008a18:	e000ed04 	.word	0xe000ed04

08008a1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a22:	4b05      	ldr	r3, [pc, #20]	@ (8008a38 <xTaskGetTickCount+0x1c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a28:	687b      	ldr	r3, [r7, #4]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	200013dc 	.word	0x200013dc

08008a3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a42:	2300      	movs	r3, #0
 8008a44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a46:	4b4f      	ldr	r3, [pc, #316]	@ (8008b84 <xTaskIncrementTick+0x148>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f040 8090 	bne.w	8008b70 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a50:	4b4d      	ldr	r3, [pc, #308]	@ (8008b88 <xTaskIncrementTick+0x14c>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	3301      	adds	r3, #1
 8008a56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a58:	4a4b      	ldr	r2, [pc, #300]	@ (8008b88 <xTaskIncrementTick+0x14c>)
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d121      	bne.n	8008aa8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a64:	4b49      	ldr	r3, [pc, #292]	@ (8008b8c <xTaskIncrementTick+0x150>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00b      	beq.n	8008a86 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	603b      	str	r3, [r7, #0]
}
 8008a80:	bf00      	nop
 8008a82:	bf00      	nop
 8008a84:	e7fd      	b.n	8008a82 <xTaskIncrementTick+0x46>
 8008a86:	4b41      	ldr	r3, [pc, #260]	@ (8008b8c <xTaskIncrementTick+0x150>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	60fb      	str	r3, [r7, #12]
 8008a8c:	4b40      	ldr	r3, [pc, #256]	@ (8008b90 <xTaskIncrementTick+0x154>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a3e      	ldr	r2, [pc, #248]	@ (8008b8c <xTaskIncrementTick+0x150>)
 8008a92:	6013      	str	r3, [r2, #0]
 8008a94:	4a3e      	ldr	r2, [pc, #248]	@ (8008b90 <xTaskIncrementTick+0x154>)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6013      	str	r3, [r2, #0]
 8008a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8008b94 <xTaskIncrementTick+0x158>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	4a3c      	ldr	r2, [pc, #240]	@ (8008b94 <xTaskIncrementTick+0x158>)
 8008aa2:	6013      	str	r3, [r2, #0]
 8008aa4:	f000 fad4 	bl	8009050 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8008b98 <xTaskIncrementTick+0x15c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d349      	bcc.n	8008b46 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ab2:	4b36      	ldr	r3, [pc, #216]	@ (8008b8c <xTaskIncrementTick+0x150>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d104      	bne.n	8008ac6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008abc:	4b36      	ldr	r3, [pc, #216]	@ (8008b98 <xTaskIncrementTick+0x15c>)
 8008abe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ac2:	601a      	str	r2, [r3, #0]
					break;
 8008ac4:	e03f      	b.n	8008b46 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ac6:	4b31      	ldr	r3, [pc, #196]	@ (8008b8c <xTaskIncrementTick+0x150>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d203      	bcs.n	8008ae6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ade:	4a2e      	ldr	r2, [pc, #184]	@ (8008b98 <xTaskIncrementTick+0x15c>)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ae4:	e02f      	b.n	8008b46 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe ff82 	bl	80079f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d004      	beq.n	8008b02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	3318      	adds	r3, #24
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7fe ff79 	bl	80079f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b06:	4b25      	ldr	r3, [pc, #148]	@ (8008b9c <xTaskIncrementTick+0x160>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d903      	bls.n	8008b16 <xTaskIncrementTick+0xda>
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b12:	4a22      	ldr	r2, [pc, #136]	@ (8008b9c <xTaskIncrementTick+0x160>)
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4413      	add	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4a1f      	ldr	r2, [pc, #124]	@ (8008ba0 <xTaskIncrementTick+0x164>)
 8008b24:	441a      	add	r2, r3
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	3304      	adds	r3, #4
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	f7fe ff04 	bl	800793a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b36:	4b1b      	ldr	r3, [pc, #108]	@ (8008ba4 <xTaskIncrementTick+0x168>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d3b8      	bcc.n	8008ab2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008b40:	2301      	movs	r3, #1
 8008b42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b44:	e7b5      	b.n	8008ab2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b46:	4b17      	ldr	r3, [pc, #92]	@ (8008ba4 <xTaskIncrementTick+0x168>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b4c:	4914      	ldr	r1, [pc, #80]	@ (8008ba0 <xTaskIncrementTick+0x164>)
 8008b4e:	4613      	mov	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	440b      	add	r3, r1
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d901      	bls.n	8008b62 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b62:	4b11      	ldr	r3, [pc, #68]	@ (8008ba8 <xTaskIncrementTick+0x16c>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d007      	beq.n	8008b7a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	617b      	str	r3, [r7, #20]
 8008b6e:	e004      	b.n	8008b7a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b70:	4b0e      	ldr	r3, [pc, #56]	@ (8008bac <xTaskIncrementTick+0x170>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3301      	adds	r3, #1
 8008b76:	4a0d      	ldr	r2, [pc, #52]	@ (8008bac <xTaskIncrementTick+0x170>)
 8008b78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b7a:	697b      	ldr	r3, [r7, #20]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3718      	adds	r7, #24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	20001400 	.word	0x20001400
 8008b88:	200013dc 	.word	0x200013dc
 8008b8c:	20001390 	.word	0x20001390
 8008b90:	20001394 	.word	0x20001394
 8008b94:	200013f0 	.word	0x200013f0
 8008b98:	200013f8 	.word	0x200013f8
 8008b9c:	200013e0 	.word	0x200013e0
 8008ba0:	20000f08 	.word	0x20000f08
 8008ba4:	20000f04 	.word	0x20000f04
 8008ba8:	200013ec 	.word	0x200013ec
 8008bac:	200013e8 	.word	0x200013e8

08008bb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bb6:	4b28      	ldr	r3, [pc, #160]	@ (8008c58 <vTaskSwitchContext+0xa8>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d003      	beq.n	8008bc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008bbe:	4b27      	ldr	r3, [pc, #156]	@ (8008c5c <vTaskSwitchContext+0xac>)
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008bc4:	e042      	b.n	8008c4c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008bc6:	4b25      	ldr	r3, [pc, #148]	@ (8008c5c <vTaskSwitchContext+0xac>)
 8008bc8:	2200      	movs	r2, #0
 8008bca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bcc:	4b24      	ldr	r3, [pc, #144]	@ (8008c60 <vTaskSwitchContext+0xb0>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	60fb      	str	r3, [r7, #12]
 8008bd2:	e011      	b.n	8008bf8 <vTaskSwitchContext+0x48>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10b      	bne.n	8008bf2 <vTaskSwitchContext+0x42>
	__asm volatile
 8008bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	607b      	str	r3, [r7, #4]
}
 8008bec:	bf00      	nop
 8008bee:	bf00      	nop
 8008bf0:	e7fd      	b.n	8008bee <vTaskSwitchContext+0x3e>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	491a      	ldr	r1, [pc, #104]	@ (8008c64 <vTaskSwitchContext+0xb4>)
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	4413      	add	r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	440b      	add	r3, r1
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d0e3      	beq.n	8008bd4 <vTaskSwitchContext+0x24>
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	4a13      	ldr	r2, [pc, #76]	@ (8008c64 <vTaskSwitchContext+0xb4>)
 8008c18:	4413      	add	r3, r2
 8008c1a:	60bb      	str	r3, [r7, #8]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	605a      	str	r2, [r3, #4]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	685a      	ldr	r2, [r3, #4]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	3308      	adds	r3, #8
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d104      	bne.n	8008c3c <vTaskSwitchContext+0x8c>
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	605a      	str	r2, [r3, #4]
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	4a09      	ldr	r2, [pc, #36]	@ (8008c68 <vTaskSwitchContext+0xb8>)
 8008c44:	6013      	str	r3, [r2, #0]
 8008c46:	4a06      	ldr	r2, [pc, #24]	@ (8008c60 <vTaskSwitchContext+0xb0>)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6013      	str	r3, [r2, #0]
}
 8008c4c:	bf00      	nop
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	20001400 	.word	0x20001400
 8008c5c:	200013ec 	.word	0x200013ec
 8008c60:	200013e0 	.word	0x200013e0
 8008c64:	20000f08 	.word	0x20000f08
 8008c68:	20000f04 	.word	0x20000f04

08008c6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10b      	bne.n	8008c94 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	60fb      	str	r3, [r7, #12]
}
 8008c8e:	bf00      	nop
 8008c90:	bf00      	nop
 8008c92:	e7fd      	b.n	8008c90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c94:	4b07      	ldr	r3, [pc, #28]	@ (8008cb4 <vTaskPlaceOnEventList+0x48>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	3318      	adds	r3, #24
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7fe fe70 	bl	8007982 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ca2:	2101      	movs	r1, #1
 8008ca4:	6838      	ldr	r0, [r7, #0]
 8008ca6:	f000 fa81 	bl	80091ac <prvAddCurrentTaskToDelayedList>
}
 8008caa:	bf00      	nop
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20000f04 	.word	0x20000f04

08008cb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10b      	bne.n	8008ce2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	617b      	str	r3, [r7, #20]
}
 8008cdc:	bf00      	nop
 8008cde:	bf00      	nop
 8008ce0:	e7fd      	b.n	8008cde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8008d0c <vTaskPlaceOnEventListRestricted+0x54>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3318      	adds	r3, #24
 8008ce8:	4619      	mov	r1, r3
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f7fe fe25 	bl	800793a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d002      	beq.n	8008cfc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008cf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008cfa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008cfc:	6879      	ldr	r1, [r7, #4]
 8008cfe:	68b8      	ldr	r0, [r7, #8]
 8008d00:	f000 fa54 	bl	80091ac <prvAddCurrentTaskToDelayedList>
	}
 8008d04:	bf00      	nop
 8008d06:	3718      	adds	r7, #24
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20000f04 	.word	0x20000f04

08008d10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10b      	bne.n	8008d3e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	60fb      	str	r3, [r7, #12]
}
 8008d38:	bf00      	nop
 8008d3a:	bf00      	nop
 8008d3c:	e7fd      	b.n	8008d3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	3318      	adds	r3, #24
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fe fe56 	bl	80079f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d48:	4b1d      	ldr	r3, [pc, #116]	@ (8008dc0 <xTaskRemoveFromEventList+0xb0>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d11d      	bne.n	8008d8c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	3304      	adds	r3, #4
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fe fe4d 	bl	80079f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d5e:	4b19      	ldr	r3, [pc, #100]	@ (8008dc4 <xTaskRemoveFromEventList+0xb4>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d903      	bls.n	8008d6e <xTaskRemoveFromEventList+0x5e>
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d6a:	4a16      	ldr	r2, [pc, #88]	@ (8008dc4 <xTaskRemoveFromEventList+0xb4>)
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d72:	4613      	mov	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4413      	add	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4a13      	ldr	r2, [pc, #76]	@ (8008dc8 <xTaskRemoveFromEventList+0xb8>)
 8008d7c:	441a      	add	r2, r3
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	3304      	adds	r3, #4
 8008d82:	4619      	mov	r1, r3
 8008d84:	4610      	mov	r0, r2
 8008d86:	f7fe fdd8 	bl	800793a <vListInsertEnd>
 8008d8a:	e005      	b.n	8008d98 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	3318      	adds	r3, #24
 8008d90:	4619      	mov	r1, r3
 8008d92:	480e      	ldr	r0, [pc, #56]	@ (8008dcc <xTaskRemoveFromEventList+0xbc>)
 8008d94:	f7fe fdd1 	bl	800793a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8008dd0 <xTaskRemoveFromEventList+0xc0>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d905      	bls.n	8008db2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008da6:	2301      	movs	r3, #1
 8008da8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008daa:	4b0a      	ldr	r3, [pc, #40]	@ (8008dd4 <xTaskRemoveFromEventList+0xc4>)
 8008dac:	2201      	movs	r2, #1
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	e001      	b.n	8008db6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008db2:	2300      	movs	r3, #0
 8008db4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008db6:	697b      	ldr	r3, [r7, #20]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3718      	adds	r7, #24
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	20001400 	.word	0x20001400
 8008dc4:	200013e0 	.word	0x200013e0
 8008dc8:	20000f08 	.word	0x20000f08
 8008dcc:	20001398 	.word	0x20001398
 8008dd0:	20000f04 	.word	0x20000f04
 8008dd4:	200013ec 	.word	0x200013ec

08008dd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008de0:	4b06      	ldr	r3, [pc, #24]	@ (8008dfc <vTaskInternalSetTimeOutState+0x24>)
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008de8:	4b05      	ldr	r3, [pc, #20]	@ (8008e00 <vTaskInternalSetTimeOutState+0x28>)
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	605a      	str	r2, [r3, #4]
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr
 8008dfc:	200013f0 	.word	0x200013f0
 8008e00:	200013dc 	.word	0x200013dc

08008e04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b088      	sub	sp, #32
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10b      	bne.n	8008e2c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	613b      	str	r3, [r7, #16]
}
 8008e26:	bf00      	nop
 8008e28:	bf00      	nop
 8008e2a:	e7fd      	b.n	8008e28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10b      	bne.n	8008e4a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	60fb      	str	r3, [r7, #12]
}
 8008e44:	bf00      	nop
 8008e46:	bf00      	nop
 8008e48:	e7fd      	b.n	8008e46 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008e4a:	f000 fe8d 	bl	8009b68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8008ec4 <xTaskCheckForTimeOut+0xc0>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	69ba      	ldr	r2, [r7, #24]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e66:	d102      	bne.n	8008e6e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	61fb      	str	r3, [r7, #28]
 8008e6c:	e023      	b.n	8008eb6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	4b15      	ldr	r3, [pc, #84]	@ (8008ec8 <xTaskCheckForTimeOut+0xc4>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d007      	beq.n	8008e8a <xTaskCheckForTimeOut+0x86>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	69ba      	ldr	r2, [r7, #24]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d302      	bcc.n	8008e8a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e84:	2301      	movs	r3, #1
 8008e86:	61fb      	str	r3, [r7, #28]
 8008e88:	e015      	b.n	8008eb6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	697a      	ldr	r2, [r7, #20]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d20b      	bcs.n	8008eac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	1ad2      	subs	r2, r2, r3
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7ff ff99 	bl	8008dd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	61fb      	str	r3, [r7, #28]
 8008eaa:	e004      	b.n	8008eb6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008eb6:	f000 fe89 	bl	8009bcc <vPortExitCritical>

	return xReturn;
 8008eba:	69fb      	ldr	r3, [r7, #28]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3720      	adds	r7, #32
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	200013dc 	.word	0x200013dc
 8008ec8:	200013f0 	.word	0x200013f0

08008ecc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ed0:	4b03      	ldr	r3, [pc, #12]	@ (8008ee0 <vTaskMissedYield+0x14>)
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]
}
 8008ed6:	bf00      	nop
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr
 8008ee0:	200013ec 	.word	0x200013ec

08008ee4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008eec:	f000 f852 	bl	8008f94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ef0:	4b06      	ldr	r3, [pc, #24]	@ (8008f0c <prvIdleTask+0x28>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d9f9      	bls.n	8008eec <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ef8:	4b05      	ldr	r3, [pc, #20]	@ (8008f10 <prvIdleTask+0x2c>)
 8008efa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f08:	e7f0      	b.n	8008eec <prvIdleTask+0x8>
 8008f0a:	bf00      	nop
 8008f0c:	20000f08 	.word	0x20000f08
 8008f10:	e000ed04 	.word	0xe000ed04

08008f14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	607b      	str	r3, [r7, #4]
 8008f1e:	e00c      	b.n	8008f3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	4613      	mov	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4413      	add	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4a12      	ldr	r2, [pc, #72]	@ (8008f74 <prvInitialiseTaskLists+0x60>)
 8008f2c:	4413      	add	r3, r2
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fe fcd6 	bl	80078e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	3301      	adds	r3, #1
 8008f38:	607b      	str	r3, [r7, #4]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2b37      	cmp	r3, #55	@ 0x37
 8008f3e:	d9ef      	bls.n	8008f20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f40:	480d      	ldr	r0, [pc, #52]	@ (8008f78 <prvInitialiseTaskLists+0x64>)
 8008f42:	f7fe fccd 	bl	80078e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f46:	480d      	ldr	r0, [pc, #52]	@ (8008f7c <prvInitialiseTaskLists+0x68>)
 8008f48:	f7fe fcca 	bl	80078e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f4c:	480c      	ldr	r0, [pc, #48]	@ (8008f80 <prvInitialiseTaskLists+0x6c>)
 8008f4e:	f7fe fcc7 	bl	80078e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f52:	480c      	ldr	r0, [pc, #48]	@ (8008f84 <prvInitialiseTaskLists+0x70>)
 8008f54:	f7fe fcc4 	bl	80078e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f58:	480b      	ldr	r0, [pc, #44]	@ (8008f88 <prvInitialiseTaskLists+0x74>)
 8008f5a:	f7fe fcc1 	bl	80078e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8008f8c <prvInitialiseTaskLists+0x78>)
 8008f60:	4a05      	ldr	r2, [pc, #20]	@ (8008f78 <prvInitialiseTaskLists+0x64>)
 8008f62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f64:	4b0a      	ldr	r3, [pc, #40]	@ (8008f90 <prvInitialiseTaskLists+0x7c>)
 8008f66:	4a05      	ldr	r2, [pc, #20]	@ (8008f7c <prvInitialiseTaskLists+0x68>)
 8008f68:	601a      	str	r2, [r3, #0]
}
 8008f6a:	bf00      	nop
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20000f08 	.word	0x20000f08
 8008f78:	20001368 	.word	0x20001368
 8008f7c:	2000137c 	.word	0x2000137c
 8008f80:	20001398 	.word	0x20001398
 8008f84:	200013ac 	.word	0x200013ac
 8008f88:	200013c4 	.word	0x200013c4
 8008f8c:	20001390 	.word	0x20001390
 8008f90:	20001394 	.word	0x20001394

08008f94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f9a:	e019      	b.n	8008fd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f9c:	f000 fde4 	bl	8009b68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa0:	4b10      	ldr	r3, [pc, #64]	@ (8008fe4 <prvCheckTasksWaitingTermination+0x50>)
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	3304      	adds	r3, #4
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7fe fd21 	bl	80079f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe8 <prvCheckTasksWaitingTermination+0x54>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	4a0b      	ldr	r2, [pc, #44]	@ (8008fe8 <prvCheckTasksWaitingTermination+0x54>)
 8008fba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8008fec <prvCheckTasksWaitingTermination+0x58>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8008fec <prvCheckTasksWaitingTermination+0x58>)
 8008fc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008fc6:	f000 fe01 	bl	8009bcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f810 	bl	8008ff0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fd0:	4b06      	ldr	r3, [pc, #24]	@ (8008fec <prvCheckTasksWaitingTermination+0x58>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1e1      	bne.n	8008f9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008fd8:	bf00      	nop
 8008fda:	bf00      	nop
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	200013ac 	.word	0x200013ac
 8008fe8:	200013d8 	.word	0x200013d8
 8008fec:	200013c0 	.word	0x200013c0

08008ff0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d108      	bne.n	8009014 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009006:	4618      	mov	r0, r3
 8009008:	f000 ff9e 	bl	8009f48 <vPortFree>
				vPortFree( pxTCB );
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 ff9b 	bl	8009f48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009012:	e019      	b.n	8009048 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800901a:	2b01      	cmp	r3, #1
 800901c:	d103      	bne.n	8009026 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 ff92 	bl	8009f48 <vPortFree>
	}
 8009024:	e010      	b.n	8009048 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800902c:	2b02      	cmp	r3, #2
 800902e:	d00b      	beq.n	8009048 <prvDeleteTCB+0x58>
	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	60fb      	str	r3, [r7, #12]
}
 8009042:	bf00      	nop
 8009044:	bf00      	nop
 8009046:	e7fd      	b.n	8009044 <prvDeleteTCB+0x54>
	}
 8009048:	bf00      	nop
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009056:	4b0c      	ldr	r3, [pc, #48]	@ (8009088 <prvResetNextTaskUnblockTime+0x38>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d104      	bne.n	800906a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009060:	4b0a      	ldr	r3, [pc, #40]	@ (800908c <prvResetNextTaskUnblockTime+0x3c>)
 8009062:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009066:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009068:	e008      	b.n	800907c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800906a:	4b07      	ldr	r3, [pc, #28]	@ (8009088 <prvResetNextTaskUnblockTime+0x38>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	4a04      	ldr	r2, [pc, #16]	@ (800908c <prvResetNextTaskUnblockTime+0x3c>)
 800907a:	6013      	str	r3, [r2, #0]
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	20001390 	.word	0x20001390
 800908c:	200013f8 	.word	0x200013f8

08009090 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009096:	4b0b      	ldr	r3, [pc, #44]	@ (80090c4 <xTaskGetSchedulerState+0x34>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d102      	bne.n	80090a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800909e:	2301      	movs	r3, #1
 80090a0:	607b      	str	r3, [r7, #4]
 80090a2:	e008      	b.n	80090b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090a4:	4b08      	ldr	r3, [pc, #32]	@ (80090c8 <xTaskGetSchedulerState+0x38>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d102      	bne.n	80090b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80090ac:	2302      	movs	r3, #2
 80090ae:	607b      	str	r3, [r7, #4]
 80090b0:	e001      	b.n	80090b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80090b2:	2300      	movs	r3, #0
 80090b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80090b6:	687b      	ldr	r3, [r7, #4]
	}
 80090b8:	4618      	mov	r0, r3
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr
 80090c4:	200013e4 	.word	0x200013e4
 80090c8:	20001400 	.word	0x20001400

080090cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80090d8:	2300      	movs	r3, #0
 80090da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d058      	beq.n	8009194 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80090e2:	4b2f      	ldr	r3, [pc, #188]	@ (80091a0 <xTaskPriorityDisinherit+0xd4>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d00b      	beq.n	8009104 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80090ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	60fb      	str	r3, [r7, #12]
}
 80090fe:	bf00      	nop
 8009100:	bf00      	nop
 8009102:	e7fd      	b.n	8009100 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10b      	bne.n	8009124 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800910c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	60bb      	str	r3, [r7, #8]
}
 800911e:	bf00      	nop
 8009120:	bf00      	nop
 8009122:	e7fd      	b.n	8009120 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009128:	1e5a      	subs	r2, r3, #1
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009136:	429a      	cmp	r2, r3
 8009138:	d02c      	beq.n	8009194 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800913e:	2b00      	cmp	r3, #0
 8009140:	d128      	bne.n	8009194 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	3304      	adds	r3, #4
 8009146:	4618      	mov	r0, r3
 8009148:	f7fe fc54 	bl	80079f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009158:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009164:	4b0f      	ldr	r3, [pc, #60]	@ (80091a4 <xTaskPriorityDisinherit+0xd8>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	429a      	cmp	r2, r3
 800916a:	d903      	bls.n	8009174 <xTaskPriorityDisinherit+0xa8>
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009170:	4a0c      	ldr	r2, [pc, #48]	@ (80091a4 <xTaskPriorityDisinherit+0xd8>)
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009178:	4613      	mov	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4a09      	ldr	r2, [pc, #36]	@ (80091a8 <xTaskPriorityDisinherit+0xdc>)
 8009182:	441a      	add	r2, r3
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	3304      	adds	r3, #4
 8009188:	4619      	mov	r1, r3
 800918a:	4610      	mov	r0, r2
 800918c:	f7fe fbd5 	bl	800793a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009190:	2301      	movs	r3, #1
 8009192:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009194:	697b      	ldr	r3, [r7, #20]
	}
 8009196:	4618      	mov	r0, r3
 8009198:	3718      	adds	r7, #24
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	20000f04 	.word	0x20000f04
 80091a4:	200013e0 	.word	0x200013e0
 80091a8:	20000f08 	.word	0x20000f08

080091ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091b6:	4b21      	ldr	r3, [pc, #132]	@ (800923c <prvAddCurrentTaskToDelayedList+0x90>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091bc:	4b20      	ldr	r3, [pc, #128]	@ (8009240 <prvAddCurrentTaskToDelayedList+0x94>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3304      	adds	r3, #4
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fe fc16 	bl	80079f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091ce:	d10a      	bne.n	80091e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d007      	beq.n	80091e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091d6:	4b1a      	ldr	r3, [pc, #104]	@ (8009240 <prvAddCurrentTaskToDelayedList+0x94>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	3304      	adds	r3, #4
 80091dc:	4619      	mov	r1, r3
 80091de:	4819      	ldr	r0, [pc, #100]	@ (8009244 <prvAddCurrentTaskToDelayedList+0x98>)
 80091e0:	f7fe fbab 	bl	800793a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80091e4:	e026      	b.n	8009234 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4413      	add	r3, r2
 80091ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80091ee:	4b14      	ldr	r3, [pc, #80]	@ (8009240 <prvAddCurrentTaskToDelayedList+0x94>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d209      	bcs.n	8009212 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091fe:	4b12      	ldr	r3, [pc, #72]	@ (8009248 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	4b0f      	ldr	r3, [pc, #60]	@ (8009240 <prvAddCurrentTaskToDelayedList+0x94>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	3304      	adds	r3, #4
 8009208:	4619      	mov	r1, r3
 800920a:	4610      	mov	r0, r2
 800920c:	f7fe fbb9 	bl	8007982 <vListInsert>
}
 8009210:	e010      	b.n	8009234 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009212:	4b0e      	ldr	r3, [pc, #56]	@ (800924c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	4b0a      	ldr	r3, [pc, #40]	@ (8009240 <prvAddCurrentTaskToDelayedList+0x94>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	3304      	adds	r3, #4
 800921c:	4619      	mov	r1, r3
 800921e:	4610      	mov	r0, r2
 8009220:	f7fe fbaf 	bl	8007982 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009224:	4b0a      	ldr	r3, [pc, #40]	@ (8009250 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	429a      	cmp	r2, r3
 800922c:	d202      	bcs.n	8009234 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800922e:	4a08      	ldr	r2, [pc, #32]	@ (8009250 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	6013      	str	r3, [r2, #0]
}
 8009234:	bf00      	nop
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	200013dc 	.word	0x200013dc
 8009240:	20000f04 	.word	0x20000f04
 8009244:	200013c4 	.word	0x200013c4
 8009248:	20001394 	.word	0x20001394
 800924c:	20001390 	.word	0x20001390
 8009250:	200013f8 	.word	0x200013f8

08009254 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b08a      	sub	sp, #40	@ 0x28
 8009258:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800925a:	2300      	movs	r3, #0
 800925c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800925e:	f000 fb13 	bl	8009888 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009262:	4b1d      	ldr	r3, [pc, #116]	@ (80092d8 <xTimerCreateTimerTask+0x84>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d021      	beq.n	80092ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800926a:	2300      	movs	r3, #0
 800926c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800926e:	2300      	movs	r3, #0
 8009270:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009272:	1d3a      	adds	r2, r7, #4
 8009274:	f107 0108 	add.w	r1, r7, #8
 8009278:	f107 030c 	add.w	r3, r7, #12
 800927c:	4618      	mov	r0, r3
 800927e:	f7fe fb15 	bl	80078ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009282:	6879      	ldr	r1, [r7, #4]
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	9202      	str	r2, [sp, #8]
 800928a:	9301      	str	r3, [sp, #4]
 800928c:	2302      	movs	r3, #2
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	2300      	movs	r3, #0
 8009292:	460a      	mov	r2, r1
 8009294:	4911      	ldr	r1, [pc, #68]	@ (80092dc <xTimerCreateTimerTask+0x88>)
 8009296:	4812      	ldr	r0, [pc, #72]	@ (80092e0 <xTimerCreateTimerTask+0x8c>)
 8009298:	f7ff f8d0 	bl	800843c <xTaskCreateStatic>
 800929c:	4603      	mov	r3, r0
 800929e:	4a11      	ldr	r2, [pc, #68]	@ (80092e4 <xTimerCreateTimerTask+0x90>)
 80092a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80092a2:	4b10      	ldr	r3, [pc, #64]	@ (80092e4 <xTimerCreateTimerTask+0x90>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80092aa:	2301      	movs	r3, #1
 80092ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10b      	bne.n	80092cc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80092b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b8:	f383 8811 	msr	BASEPRI, r3
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	613b      	str	r3, [r7, #16]
}
 80092c6:	bf00      	nop
 80092c8:	bf00      	nop
 80092ca:	e7fd      	b.n	80092c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80092cc:	697b      	ldr	r3, [r7, #20]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3718      	adds	r7, #24
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	20001434 	.word	0x20001434
 80092dc:	0800ab10 	.word	0x0800ab10
 80092e0:	08009421 	.word	0x08009421
 80092e4:	20001438 	.word	0x20001438

080092e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b08a      	sub	sp, #40	@ 0x28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80092f6:	2300      	movs	r3, #0
 80092f8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10b      	bne.n	8009318 <xTimerGenericCommand+0x30>
	__asm volatile
 8009300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009304:	f383 8811 	msr	BASEPRI, r3
 8009308:	f3bf 8f6f 	isb	sy
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	623b      	str	r3, [r7, #32]
}
 8009312:	bf00      	nop
 8009314:	bf00      	nop
 8009316:	e7fd      	b.n	8009314 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009318:	4b19      	ldr	r3, [pc, #100]	@ (8009380 <xTimerGenericCommand+0x98>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d02a      	beq.n	8009376 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	2b05      	cmp	r3, #5
 8009330:	dc18      	bgt.n	8009364 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009332:	f7ff fead 	bl	8009090 <xTaskGetSchedulerState>
 8009336:	4603      	mov	r3, r0
 8009338:	2b02      	cmp	r3, #2
 800933a:	d109      	bne.n	8009350 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800933c:	4b10      	ldr	r3, [pc, #64]	@ (8009380 <xTimerGenericCommand+0x98>)
 800933e:	6818      	ldr	r0, [r3, #0]
 8009340:	f107 0110 	add.w	r1, r7, #16
 8009344:	2300      	movs	r3, #0
 8009346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009348:	f7fe fc88 	bl	8007c5c <xQueueGenericSend>
 800934c:	6278      	str	r0, [r7, #36]	@ 0x24
 800934e:	e012      	b.n	8009376 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009350:	4b0b      	ldr	r3, [pc, #44]	@ (8009380 <xTimerGenericCommand+0x98>)
 8009352:	6818      	ldr	r0, [r3, #0]
 8009354:	f107 0110 	add.w	r1, r7, #16
 8009358:	2300      	movs	r3, #0
 800935a:	2200      	movs	r2, #0
 800935c:	f7fe fc7e 	bl	8007c5c <xQueueGenericSend>
 8009360:	6278      	str	r0, [r7, #36]	@ 0x24
 8009362:	e008      	b.n	8009376 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009364:	4b06      	ldr	r3, [pc, #24]	@ (8009380 <xTimerGenericCommand+0x98>)
 8009366:	6818      	ldr	r0, [r3, #0]
 8009368:	f107 0110 	add.w	r1, r7, #16
 800936c:	2300      	movs	r3, #0
 800936e:	683a      	ldr	r2, [r7, #0]
 8009370:	f7fe fd76 	bl	8007e60 <xQueueGenericSendFromISR>
 8009374:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009378:	4618      	mov	r0, r3
 800937a:	3728      	adds	r7, #40	@ 0x28
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	20001434 	.word	0x20001434

08009384 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af02      	add	r7, sp, #8
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800938e:	4b23      	ldr	r3, [pc, #140]	@ (800941c <prvProcessExpiredTimer+0x98>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	3304      	adds	r3, #4
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe fb29 	bl	80079f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093a8:	f003 0304 	and.w	r3, r3, #4
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d023      	beq.n	80093f8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	699a      	ldr	r2, [r3, #24]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	18d1      	adds	r1, r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	6978      	ldr	r0, [r7, #20]
 80093be:	f000 f8d5 	bl	800956c <prvInsertTimerInActiveList>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d020      	beq.n	800940a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093c8:	2300      	movs	r3, #0
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	2300      	movs	r3, #0
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	2100      	movs	r1, #0
 80093d2:	6978      	ldr	r0, [r7, #20]
 80093d4:	f7ff ff88 	bl	80092e8 <xTimerGenericCommand>
 80093d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d114      	bne.n	800940a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	60fb      	str	r3, [r7, #12]
}
 80093f2:	bf00      	nop
 80093f4:	bf00      	nop
 80093f6:	e7fd      	b.n	80093f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093fe:	f023 0301 	bic.w	r3, r3, #1
 8009402:	b2da      	uxtb	r2, r3
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	6a1b      	ldr	r3, [r3, #32]
 800940e:	6978      	ldr	r0, [r7, #20]
 8009410:	4798      	blx	r3
}
 8009412:	bf00      	nop
 8009414:	3718      	adds	r7, #24
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	2000142c 	.word	0x2000142c

08009420 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009428:	f107 0308 	add.w	r3, r7, #8
 800942c:	4618      	mov	r0, r3
 800942e:	f000 f859 	bl	80094e4 <prvGetNextExpireTime>
 8009432:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	4619      	mov	r1, r3
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 f805 	bl	8009448 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800943e:	f000 f8d7 	bl	80095f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009442:	bf00      	nop
 8009444:	e7f0      	b.n	8009428 <prvTimerTask+0x8>
	...

08009448 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009452:	f7ff fa37 	bl	80088c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009456:	f107 0308 	add.w	r3, r7, #8
 800945a:	4618      	mov	r0, r3
 800945c:	f000 f866 	bl	800952c <prvSampleTimeNow>
 8009460:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d130      	bne.n	80094ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10a      	bne.n	8009484 <prvProcessTimerOrBlockTask+0x3c>
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	429a      	cmp	r2, r3
 8009474:	d806      	bhi.n	8009484 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009476:	f7ff fa33 	bl	80088e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800947a:	68f9      	ldr	r1, [r7, #12]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7ff ff81 	bl	8009384 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009482:	e024      	b.n	80094ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d008      	beq.n	800949c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800948a:	4b13      	ldr	r3, [pc, #76]	@ (80094d8 <prvProcessTimerOrBlockTask+0x90>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d101      	bne.n	8009498 <prvProcessTimerOrBlockTask+0x50>
 8009494:	2301      	movs	r3, #1
 8009496:	e000      	b.n	800949a <prvProcessTimerOrBlockTask+0x52>
 8009498:	2300      	movs	r3, #0
 800949a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800949c:	4b0f      	ldr	r3, [pc, #60]	@ (80094dc <prvProcessTimerOrBlockTask+0x94>)
 800949e:	6818      	ldr	r0, [r3, #0]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	4619      	mov	r1, r3
 80094aa:	f7fe ff93 	bl	80083d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80094ae:	f7ff fa17 	bl	80088e0 <xTaskResumeAll>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10a      	bne.n	80094ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80094b8:	4b09      	ldr	r3, [pc, #36]	@ (80094e0 <prvProcessTimerOrBlockTask+0x98>)
 80094ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094be:	601a      	str	r2, [r3, #0]
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	f3bf 8f6f 	isb	sy
}
 80094c8:	e001      	b.n	80094ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80094ca:	f7ff fa09 	bl	80088e0 <xTaskResumeAll>
}
 80094ce:	bf00      	nop
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20001430 	.word	0x20001430
 80094dc:	20001434 	.word	0x20001434
 80094e0:	e000ed04 	.word	0xe000ed04

080094e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094ec:	4b0e      	ldr	r3, [pc, #56]	@ (8009528 <prvGetNextExpireTime+0x44>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d101      	bne.n	80094fa <prvGetNextExpireTime+0x16>
 80094f6:	2201      	movs	r2, #1
 80094f8:	e000      	b.n	80094fc <prvGetNextExpireTime+0x18>
 80094fa:	2200      	movs	r2, #0
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d105      	bne.n	8009514 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009508:	4b07      	ldr	r3, [pc, #28]	@ (8009528 <prvGetNextExpireTime+0x44>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	60fb      	str	r3, [r7, #12]
 8009512:	e001      	b.n	8009518 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009518:	68fb      	ldr	r3, [r7, #12]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	2000142c 	.word	0x2000142c

0800952c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009534:	f7ff fa72 	bl	8008a1c <xTaskGetTickCount>
 8009538:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800953a:	4b0b      	ldr	r3, [pc, #44]	@ (8009568 <prvSampleTimeNow+0x3c>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	429a      	cmp	r2, r3
 8009542:	d205      	bcs.n	8009550 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009544:	f000 f93a 	bl	80097bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	e002      	b.n	8009556 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009556:	4a04      	ldr	r2, [pc, #16]	@ (8009568 <prvSampleTimeNow+0x3c>)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800955c:	68fb      	ldr	r3, [r7, #12]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	2000143c 	.word	0x2000143c

0800956c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
 8009578:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800957a:	2300      	movs	r3, #0
 800957c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	429a      	cmp	r2, r3
 8009590:	d812      	bhi.n	80095b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	1ad2      	subs	r2, r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	429a      	cmp	r2, r3
 800959e:	d302      	bcc.n	80095a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80095a0:	2301      	movs	r3, #1
 80095a2:	617b      	str	r3, [r7, #20]
 80095a4:	e01b      	b.n	80095de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80095a6:	4b10      	ldr	r3, [pc, #64]	@ (80095e8 <prvInsertTimerInActiveList+0x7c>)
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3304      	adds	r3, #4
 80095ae:	4619      	mov	r1, r3
 80095b0:	4610      	mov	r0, r2
 80095b2:	f7fe f9e6 	bl	8007982 <vListInsert>
 80095b6:	e012      	b.n	80095de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d206      	bcs.n	80095ce <prvInsertTimerInActiveList+0x62>
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d302      	bcc.n	80095ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80095c8:	2301      	movs	r3, #1
 80095ca:	617b      	str	r3, [r7, #20]
 80095cc:	e007      	b.n	80095de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095ce:	4b07      	ldr	r3, [pc, #28]	@ (80095ec <prvInsertTimerInActiveList+0x80>)
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3304      	adds	r3, #4
 80095d6:	4619      	mov	r1, r3
 80095d8:	4610      	mov	r0, r2
 80095da:	f7fe f9d2 	bl	8007982 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80095de:	697b      	ldr	r3, [r7, #20]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3718      	adds	r7, #24
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	20001430 	.word	0x20001430
 80095ec:	2000142c 	.word	0x2000142c

080095f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b08e      	sub	sp, #56	@ 0x38
 80095f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095f6:	e0ce      	b.n	8009796 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	da19      	bge.n	8009632 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095fe:	1d3b      	adds	r3, r7, #4
 8009600:	3304      	adds	r3, #4
 8009602:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10b      	bne.n	8009622 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800960a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800960e:	f383 8811 	msr	BASEPRI, r3
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	61fb      	str	r3, [r7, #28]
}
 800961c:	bf00      	nop
 800961e:	bf00      	nop
 8009620:	e7fd      	b.n	800961e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009628:	6850      	ldr	r0, [r2, #4]
 800962a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800962c:	6892      	ldr	r2, [r2, #8]
 800962e:	4611      	mov	r1, r2
 8009630:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	f2c0 80ae 	blt.w	8009796 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800963e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009640:	695b      	ldr	r3, [r3, #20]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d004      	beq.n	8009650 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009648:	3304      	adds	r3, #4
 800964a:	4618      	mov	r0, r3
 800964c:	f7fe f9d2 	bl	80079f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009650:	463b      	mov	r3, r7
 8009652:	4618      	mov	r0, r3
 8009654:	f7ff ff6a 	bl	800952c <prvSampleTimeNow>
 8009658:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2b09      	cmp	r3, #9
 800965e:	f200 8097 	bhi.w	8009790 <prvProcessReceivedCommands+0x1a0>
 8009662:	a201      	add	r2, pc, #4	@ (adr r2, 8009668 <prvProcessReceivedCommands+0x78>)
 8009664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009668:	08009691 	.word	0x08009691
 800966c:	08009691 	.word	0x08009691
 8009670:	08009691 	.word	0x08009691
 8009674:	08009707 	.word	0x08009707
 8009678:	0800971b 	.word	0x0800971b
 800967c:	08009767 	.word	0x08009767
 8009680:	08009691 	.word	0x08009691
 8009684:	08009691 	.word	0x08009691
 8009688:	08009707 	.word	0x08009707
 800968c:	0800971b 	.word	0x0800971b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009692:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009696:	f043 0301 	orr.w	r3, r3, #1
 800969a:	b2da      	uxtb	r2, r3
 800969c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	18d1      	adds	r1, r2, r3
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096b0:	f7ff ff5c 	bl	800956c <prvInsertTimerInActiveList>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d06c      	beq.n	8009794 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096c8:	f003 0304 	and.w	r3, r3, #4
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d061      	beq.n	8009794 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80096d0:	68ba      	ldr	r2, [r7, #8]
 80096d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	441a      	add	r2, r3
 80096d8:	2300      	movs	r3, #0
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	2300      	movs	r3, #0
 80096de:	2100      	movs	r1, #0
 80096e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096e2:	f7ff fe01 	bl	80092e8 <xTimerGenericCommand>
 80096e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80096e8:	6a3b      	ldr	r3, [r7, #32]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d152      	bne.n	8009794 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80096ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	61bb      	str	r3, [r7, #24]
}
 8009700:	bf00      	nop
 8009702:	bf00      	nop
 8009704:	e7fd      	b.n	8009702 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009708:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800970c:	f023 0301 	bic.w	r3, r3, #1
 8009710:	b2da      	uxtb	r2, r3
 8009712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009714:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009718:	e03d      	b.n	8009796 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800971a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800971c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009720:	f043 0301 	orr.w	r3, r3, #1
 8009724:	b2da      	uxtb	r2, r3
 8009726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009728:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800972c:	68ba      	ldr	r2, [r7, #8]
 800972e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009730:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d10b      	bne.n	8009752 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800973a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973e:	f383 8811 	msr	BASEPRI, r3
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	617b      	str	r3, [r7, #20]
}
 800974c:	bf00      	nop
 800974e:	bf00      	nop
 8009750:	e7fd      	b.n	800974e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009754:	699a      	ldr	r2, [r3, #24]
 8009756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009758:	18d1      	adds	r1, r2, r3
 800975a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800975e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009760:	f7ff ff04 	bl	800956c <prvInsertTimerInActiveList>
					break;
 8009764:	e017      	b.n	8009796 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009768:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800976c:	f003 0302 	and.w	r3, r3, #2
 8009770:	2b00      	cmp	r3, #0
 8009772:	d103      	bne.n	800977c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009774:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009776:	f000 fbe7 	bl	8009f48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800977a:	e00c      	b.n	8009796 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800977c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800977e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009782:	f023 0301 	bic.w	r3, r3, #1
 8009786:	b2da      	uxtb	r2, r3
 8009788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800978a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800978e:	e002      	b.n	8009796 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009790:	bf00      	nop
 8009792:	e000      	b.n	8009796 <prvProcessReceivedCommands+0x1a6>
					break;
 8009794:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009796:	4b08      	ldr	r3, [pc, #32]	@ (80097b8 <prvProcessReceivedCommands+0x1c8>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	1d39      	adds	r1, r7, #4
 800979c:	2200      	movs	r2, #0
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fe fbfc 	bl	8007f9c <xQueueReceive>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f47f af26 	bne.w	80095f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80097ac:	bf00      	nop
 80097ae:	bf00      	nop
 80097b0:	3730      	adds	r7, #48	@ 0x30
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	20001434 	.word	0x20001434

080097bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b088      	sub	sp, #32
 80097c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097c2:	e049      	b.n	8009858 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097c4:	4b2e      	ldr	r3, [pc, #184]	@ (8009880 <prvSwitchTimerLists+0xc4>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ce:	4b2c      	ldr	r3, [pc, #176]	@ (8009880 <prvSwitchTimerLists+0xc4>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	3304      	adds	r3, #4
 80097dc:	4618      	mov	r0, r3
 80097de:	f7fe f909 	bl	80079f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6a1b      	ldr	r3, [r3, #32]
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097f0:	f003 0304 	and.w	r3, r3, #4
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d02f      	beq.n	8009858 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	4413      	add	r3, r2
 8009800:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	429a      	cmp	r2, r3
 8009808:	d90e      	bls.n	8009828 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	68ba      	ldr	r2, [r7, #8]
 800980e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009816:	4b1a      	ldr	r3, [pc, #104]	@ (8009880 <prvSwitchTimerLists+0xc4>)
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	3304      	adds	r3, #4
 800981e:	4619      	mov	r1, r3
 8009820:	4610      	mov	r0, r2
 8009822:	f7fe f8ae 	bl	8007982 <vListInsert>
 8009826:	e017      	b.n	8009858 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009828:	2300      	movs	r3, #0
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	2300      	movs	r3, #0
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	2100      	movs	r1, #0
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f7ff fd58 	bl	80092e8 <xTimerGenericCommand>
 8009838:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10b      	bne.n	8009858 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	603b      	str	r3, [r7, #0]
}
 8009852:	bf00      	nop
 8009854:	bf00      	nop
 8009856:	e7fd      	b.n	8009854 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009858:	4b09      	ldr	r3, [pc, #36]	@ (8009880 <prvSwitchTimerLists+0xc4>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1b0      	bne.n	80097c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009862:	4b07      	ldr	r3, [pc, #28]	@ (8009880 <prvSwitchTimerLists+0xc4>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009868:	4b06      	ldr	r3, [pc, #24]	@ (8009884 <prvSwitchTimerLists+0xc8>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a04      	ldr	r2, [pc, #16]	@ (8009880 <prvSwitchTimerLists+0xc4>)
 800986e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009870:	4a04      	ldr	r2, [pc, #16]	@ (8009884 <prvSwitchTimerLists+0xc8>)
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	6013      	str	r3, [r2, #0]
}
 8009876:	bf00      	nop
 8009878:	3718      	adds	r7, #24
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	2000142c 	.word	0x2000142c
 8009884:	20001430 	.word	0x20001430

08009888 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800988e:	f000 f96b 	bl	8009b68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009892:	4b15      	ldr	r3, [pc, #84]	@ (80098e8 <prvCheckForValidListAndQueue+0x60>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d120      	bne.n	80098dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800989a:	4814      	ldr	r0, [pc, #80]	@ (80098ec <prvCheckForValidListAndQueue+0x64>)
 800989c:	f7fe f820 	bl	80078e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80098a0:	4813      	ldr	r0, [pc, #76]	@ (80098f0 <prvCheckForValidListAndQueue+0x68>)
 80098a2:	f7fe f81d 	bl	80078e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80098a6:	4b13      	ldr	r3, [pc, #76]	@ (80098f4 <prvCheckForValidListAndQueue+0x6c>)
 80098a8:	4a10      	ldr	r2, [pc, #64]	@ (80098ec <prvCheckForValidListAndQueue+0x64>)
 80098aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80098ac:	4b12      	ldr	r3, [pc, #72]	@ (80098f8 <prvCheckForValidListAndQueue+0x70>)
 80098ae:	4a10      	ldr	r2, [pc, #64]	@ (80098f0 <prvCheckForValidListAndQueue+0x68>)
 80098b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80098b2:	2300      	movs	r3, #0
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	4b11      	ldr	r3, [pc, #68]	@ (80098fc <prvCheckForValidListAndQueue+0x74>)
 80098b8:	4a11      	ldr	r2, [pc, #68]	@ (8009900 <prvCheckForValidListAndQueue+0x78>)
 80098ba:	2110      	movs	r1, #16
 80098bc:	200a      	movs	r0, #10
 80098be:	f7fe f92d 	bl	8007b1c <xQueueGenericCreateStatic>
 80098c2:	4603      	mov	r3, r0
 80098c4:	4a08      	ldr	r2, [pc, #32]	@ (80098e8 <prvCheckForValidListAndQueue+0x60>)
 80098c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80098c8:	4b07      	ldr	r3, [pc, #28]	@ (80098e8 <prvCheckForValidListAndQueue+0x60>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d005      	beq.n	80098dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80098d0:	4b05      	ldr	r3, [pc, #20]	@ (80098e8 <prvCheckForValidListAndQueue+0x60>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	490b      	ldr	r1, [pc, #44]	@ (8009904 <prvCheckForValidListAndQueue+0x7c>)
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fe fd52 	bl	8008380 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098dc:	f000 f976 	bl	8009bcc <vPortExitCritical>
}
 80098e0:	bf00      	nop
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	20001434 	.word	0x20001434
 80098ec:	20001404 	.word	0x20001404
 80098f0:	20001418 	.word	0x20001418
 80098f4:	2000142c 	.word	0x2000142c
 80098f8:	20001430 	.word	0x20001430
 80098fc:	200014e0 	.word	0x200014e0
 8009900:	20001440 	.word	0x20001440
 8009904:	0800ab18 	.word	0x0800ab18

08009908 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	3b04      	subs	r3, #4
 8009918:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009920:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	3b04      	subs	r3, #4
 8009926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	f023 0201 	bic.w	r2, r3, #1
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	3b04      	subs	r3, #4
 8009936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009938:	4a0c      	ldr	r2, [pc, #48]	@ (800996c <pxPortInitialiseStack+0x64>)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	3b14      	subs	r3, #20
 8009942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	3b04      	subs	r3, #4
 800994e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f06f 0202 	mvn.w	r2, #2
 8009956:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	3b20      	subs	r3, #32
 800995c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800995e:	68fb      	ldr	r3, [r7, #12]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3714      	adds	r7, #20
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	08009971 	.word	0x08009971

08009970 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009976:	2300      	movs	r3, #0
 8009978:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800997a:	4b13      	ldr	r3, [pc, #76]	@ (80099c8 <prvTaskExitError+0x58>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009982:	d00b      	beq.n	800999c <prvTaskExitError+0x2c>
	__asm volatile
 8009984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009988:	f383 8811 	msr	BASEPRI, r3
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f3bf 8f4f 	dsb	sy
 8009994:	60fb      	str	r3, [r7, #12]
}
 8009996:	bf00      	nop
 8009998:	bf00      	nop
 800999a:	e7fd      	b.n	8009998 <prvTaskExitError+0x28>
	__asm volatile
 800999c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	60bb      	str	r3, [r7, #8]
}
 80099ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099b0:	bf00      	nop
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d0fc      	beq.n	80099b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80099b8:	bf00      	nop
 80099ba:	bf00      	nop
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	20000010 	.word	0x20000010
 80099cc:	00000000 	.word	0x00000000

080099d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099d0:	4b07      	ldr	r3, [pc, #28]	@ (80099f0 <pxCurrentTCBConst2>)
 80099d2:	6819      	ldr	r1, [r3, #0]
 80099d4:	6808      	ldr	r0, [r1, #0]
 80099d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099da:	f380 8809 	msr	PSP, r0
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f04f 0000 	mov.w	r0, #0
 80099e6:	f380 8811 	msr	BASEPRI, r0
 80099ea:	4770      	bx	lr
 80099ec:	f3af 8000 	nop.w

080099f0 <pxCurrentTCBConst2>:
 80099f0:	20000f04 	.word	0x20000f04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099f4:	bf00      	nop
 80099f6:	bf00      	nop

080099f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099f8:	4808      	ldr	r0, [pc, #32]	@ (8009a1c <prvPortStartFirstTask+0x24>)
 80099fa:	6800      	ldr	r0, [r0, #0]
 80099fc:	6800      	ldr	r0, [r0, #0]
 80099fe:	f380 8808 	msr	MSP, r0
 8009a02:	f04f 0000 	mov.w	r0, #0
 8009a06:	f380 8814 	msr	CONTROL, r0
 8009a0a:	b662      	cpsie	i
 8009a0c:	b661      	cpsie	f
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	df00      	svc	0
 8009a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a1a:	bf00      	nop
 8009a1c:	e000ed08 	.word	0xe000ed08

08009a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a26:	4b47      	ldr	r3, [pc, #284]	@ (8009b44 <xPortStartScheduler+0x124>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a47      	ldr	r2, [pc, #284]	@ (8009b48 <xPortStartScheduler+0x128>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d10b      	bne.n	8009a48 <xPortStartScheduler+0x28>
	__asm volatile
 8009a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	613b      	str	r3, [r7, #16]
}
 8009a42:	bf00      	nop
 8009a44:	bf00      	nop
 8009a46:	e7fd      	b.n	8009a44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a48:	4b3e      	ldr	r3, [pc, #248]	@ (8009b44 <xPortStartScheduler+0x124>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a3f      	ldr	r2, [pc, #252]	@ (8009b4c <xPortStartScheduler+0x12c>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d10b      	bne.n	8009a6a <xPortStartScheduler+0x4a>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	60fb      	str	r3, [r7, #12]
}
 8009a64:	bf00      	nop
 8009a66:	bf00      	nop
 8009a68:	e7fd      	b.n	8009a66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a6a:	4b39      	ldr	r3, [pc, #228]	@ (8009b50 <xPortStartScheduler+0x130>)
 8009a6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	22ff      	movs	r2, #255	@ 0xff
 8009a7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a84:	78fb      	ldrb	r3, [r7, #3]
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	4b31      	ldr	r3, [pc, #196]	@ (8009b54 <xPortStartScheduler+0x134>)
 8009a90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a92:	4b31      	ldr	r3, [pc, #196]	@ (8009b58 <xPortStartScheduler+0x138>)
 8009a94:	2207      	movs	r2, #7
 8009a96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a98:	e009      	b.n	8009aae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8009b58 <xPortStartScheduler+0x138>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8009b58 <xPortStartScheduler+0x138>)
 8009aa2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009aa4:	78fb      	ldrb	r3, [r7, #3]
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	005b      	lsls	r3, r3, #1
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009aae:	78fb      	ldrb	r3, [r7, #3]
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ab6:	2b80      	cmp	r3, #128	@ 0x80
 8009ab8:	d0ef      	beq.n	8009a9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009aba:	4b27      	ldr	r3, [pc, #156]	@ (8009b58 <xPortStartScheduler+0x138>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f1c3 0307 	rsb	r3, r3, #7
 8009ac2:	2b04      	cmp	r3, #4
 8009ac4:	d00b      	beq.n	8009ade <xPortStartScheduler+0xbe>
	__asm volatile
 8009ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aca:	f383 8811 	msr	BASEPRI, r3
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	60bb      	str	r3, [r7, #8]
}
 8009ad8:	bf00      	nop
 8009ada:	bf00      	nop
 8009adc:	e7fd      	b.n	8009ada <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ade:	4b1e      	ldr	r3, [pc, #120]	@ (8009b58 <xPortStartScheduler+0x138>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	021b      	lsls	r3, r3, #8
 8009ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8009b58 <xPortStartScheduler+0x138>)
 8009ae6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8009b58 <xPortStartScheduler+0x138>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009af0:	4a19      	ldr	r2, [pc, #100]	@ (8009b58 <xPortStartScheduler+0x138>)
 8009af2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009afc:	4b17      	ldr	r3, [pc, #92]	@ (8009b5c <xPortStartScheduler+0x13c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a16      	ldr	r2, [pc, #88]	@ (8009b5c <xPortStartScheduler+0x13c>)
 8009b02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009b06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b08:	4b14      	ldr	r3, [pc, #80]	@ (8009b5c <xPortStartScheduler+0x13c>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a13      	ldr	r2, [pc, #76]	@ (8009b5c <xPortStartScheduler+0x13c>)
 8009b0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009b12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b14:	f000 f8da 	bl	8009ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b18:	4b11      	ldr	r3, [pc, #68]	@ (8009b60 <xPortStartScheduler+0x140>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b1e:	f000 f8f9 	bl	8009d14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b22:	4b10      	ldr	r3, [pc, #64]	@ (8009b64 <xPortStartScheduler+0x144>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a0f      	ldr	r2, [pc, #60]	@ (8009b64 <xPortStartScheduler+0x144>)
 8009b28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009b2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b2e:	f7ff ff63 	bl	80099f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b32:	f7ff f83d 	bl	8008bb0 <vTaskSwitchContext>
	prvTaskExitError();
 8009b36:	f7ff ff1b 	bl	8009970 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3718      	adds	r7, #24
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	e000ed00 	.word	0xe000ed00
 8009b48:	410fc271 	.word	0x410fc271
 8009b4c:	410fc270 	.word	0x410fc270
 8009b50:	e000e400 	.word	0xe000e400
 8009b54:	20001530 	.word	0x20001530
 8009b58:	20001534 	.word	0x20001534
 8009b5c:	e000ed20 	.word	0xe000ed20
 8009b60:	20000010 	.word	0x20000010
 8009b64:	e000ef34 	.word	0xe000ef34

08009b68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	607b      	str	r3, [r7, #4]
}
 8009b80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b82:	4b10      	ldr	r3, [pc, #64]	@ (8009bc4 <vPortEnterCritical+0x5c>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	3301      	adds	r3, #1
 8009b88:	4a0e      	ldr	r2, [pc, #56]	@ (8009bc4 <vPortEnterCritical+0x5c>)
 8009b8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8009bc4 <vPortEnterCritical+0x5c>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d110      	bne.n	8009bb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b94:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc8 <vPortEnterCritical+0x60>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00b      	beq.n	8009bb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	603b      	str	r3, [r7, #0]
}
 8009bb0:	bf00      	nop
 8009bb2:	bf00      	nop
 8009bb4:	e7fd      	b.n	8009bb2 <vPortEnterCritical+0x4a>
	}
}
 8009bb6:	bf00      	nop
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	20000010 	.word	0x20000010
 8009bc8:	e000ed04 	.word	0xe000ed04

08009bcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009bd2:	4b12      	ldr	r3, [pc, #72]	@ (8009c1c <vPortExitCritical+0x50>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d10b      	bne.n	8009bf2 <vPortExitCritical+0x26>
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	607b      	str	r3, [r7, #4]
}
 8009bec:	bf00      	nop
 8009bee:	bf00      	nop
 8009bf0:	e7fd      	b.n	8009bee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8009c1c <vPortExitCritical+0x50>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	4a08      	ldr	r2, [pc, #32]	@ (8009c1c <vPortExitCritical+0x50>)
 8009bfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009bfc:	4b07      	ldr	r3, [pc, #28]	@ (8009c1c <vPortExitCritical+0x50>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d105      	bne.n	8009c10 <vPortExitCritical+0x44>
 8009c04:	2300      	movs	r3, #0
 8009c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	f383 8811 	msr	BASEPRI, r3
}
 8009c0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr
 8009c1c:	20000010 	.word	0x20000010

08009c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c20:	f3ef 8009 	mrs	r0, PSP
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	4b15      	ldr	r3, [pc, #84]	@ (8009c80 <pxCurrentTCBConst>)
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	f01e 0f10 	tst.w	lr, #16
 8009c30:	bf08      	it	eq
 8009c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3a:	6010      	str	r0, [r2, #0]
 8009c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009c44:	f380 8811 	msr	BASEPRI, r0
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f7fe ffae 	bl	8008bb0 <vTaskSwitchContext>
 8009c54:	f04f 0000 	mov.w	r0, #0
 8009c58:	f380 8811 	msr	BASEPRI, r0
 8009c5c:	bc09      	pop	{r0, r3}
 8009c5e:	6819      	ldr	r1, [r3, #0]
 8009c60:	6808      	ldr	r0, [r1, #0]
 8009c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c66:	f01e 0f10 	tst.w	lr, #16
 8009c6a:	bf08      	it	eq
 8009c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c70:	f380 8809 	msr	PSP, r0
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	f3af 8000 	nop.w

08009c80 <pxCurrentTCBConst>:
 8009c80:	20000f04 	.word	0x20000f04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c84:	bf00      	nop
 8009c86:	bf00      	nop

08009c88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	607b      	str	r3, [r7, #4]
}
 8009ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ca2:	f7fe fecb 	bl	8008a3c <xTaskIncrementTick>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d003      	beq.n	8009cb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009cac:	4b06      	ldr	r3, [pc, #24]	@ (8009cc8 <xPortSysTickHandler+0x40>)
 8009cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cb2:	601a      	str	r2, [r3, #0]
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	f383 8811 	msr	BASEPRI, r3
}
 8009cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	e000ed04 	.word	0xe000ed04

08009ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009ccc:	b480      	push	{r7}
 8009cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8009d00 <vPortSetupTimerInterrupt+0x34>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8009d04 <vPortSetupTimerInterrupt+0x38>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8009d08 <vPortSetupTimerInterrupt+0x3c>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8009d0c <vPortSetupTimerInterrupt+0x40>)
 8009ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce6:	099b      	lsrs	r3, r3, #6
 8009ce8:	4a09      	ldr	r2, [pc, #36]	@ (8009d10 <vPortSetupTimerInterrupt+0x44>)
 8009cea:	3b01      	subs	r3, #1
 8009cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cee:	4b04      	ldr	r3, [pc, #16]	@ (8009d00 <vPortSetupTimerInterrupt+0x34>)
 8009cf0:	2207      	movs	r2, #7
 8009cf2:	601a      	str	r2, [r3, #0]
}
 8009cf4:	bf00      	nop
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	e000e010 	.word	0xe000e010
 8009d04:	e000e018 	.word	0xe000e018
 8009d08:	20000004 	.word	0x20000004
 8009d0c:	10624dd3 	.word	0x10624dd3
 8009d10:	e000e014 	.word	0xe000e014

08009d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009d24 <vPortEnableVFP+0x10>
 8009d18:	6801      	ldr	r1, [r0, #0]
 8009d1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009d1e:	6001      	str	r1, [r0, #0]
 8009d20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d22:	bf00      	nop
 8009d24:	e000ed88 	.word	0xe000ed88

08009d28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d2e:	f3ef 8305 	mrs	r3, IPSR
 8009d32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2b0f      	cmp	r3, #15
 8009d38:	d915      	bls.n	8009d66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d3a:	4a18      	ldr	r2, [pc, #96]	@ (8009d9c <vPortValidateInterruptPriority+0x74>)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	4413      	add	r3, r2
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d44:	4b16      	ldr	r3, [pc, #88]	@ (8009da0 <vPortValidateInterruptPriority+0x78>)
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	7afa      	ldrb	r2, [r7, #11]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d20b      	bcs.n	8009d66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d52:	f383 8811 	msr	BASEPRI, r3
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	f3bf 8f4f 	dsb	sy
 8009d5e:	607b      	str	r3, [r7, #4]
}
 8009d60:	bf00      	nop
 8009d62:	bf00      	nop
 8009d64:	e7fd      	b.n	8009d62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d66:	4b0f      	ldr	r3, [pc, #60]	@ (8009da4 <vPortValidateInterruptPriority+0x7c>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8009da8 <vPortValidateInterruptPriority+0x80>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d90b      	bls.n	8009d8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d7a:	f383 8811 	msr	BASEPRI, r3
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	603b      	str	r3, [r7, #0]
}
 8009d88:	bf00      	nop
 8009d8a:	bf00      	nop
 8009d8c:	e7fd      	b.n	8009d8a <vPortValidateInterruptPriority+0x62>
	}
 8009d8e:	bf00      	nop
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	e000e3f0 	.word	0xe000e3f0
 8009da0:	20001530 	.word	0x20001530
 8009da4:	e000ed0c 	.word	0xe000ed0c
 8009da8:	20001534 	.word	0x20001534

08009dac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b08a      	sub	sp, #40	@ 0x28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009db4:	2300      	movs	r3, #0
 8009db6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009db8:	f7fe fd84 	bl	80088c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009dbc:	4b5c      	ldr	r3, [pc, #368]	@ (8009f30 <pvPortMalloc+0x184>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d101      	bne.n	8009dc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009dc4:	f000 f924 	bl	800a010 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009dc8:	4b5a      	ldr	r3, [pc, #360]	@ (8009f34 <pvPortMalloc+0x188>)
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4013      	ands	r3, r2
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f040 8095 	bne.w	8009f00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d01e      	beq.n	8009e1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009ddc:	2208      	movs	r2, #8
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4413      	add	r3, r2
 8009de2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f003 0307 	and.w	r3, r3, #7
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d015      	beq.n	8009e1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f023 0307 	bic.w	r3, r3, #7
 8009df4:	3308      	adds	r3, #8
 8009df6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f003 0307 	and.w	r3, r3, #7
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00b      	beq.n	8009e1a <pvPortMalloc+0x6e>
	__asm volatile
 8009e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e06:	f383 8811 	msr	BASEPRI, r3
 8009e0a:	f3bf 8f6f 	isb	sy
 8009e0e:	f3bf 8f4f 	dsb	sy
 8009e12:	617b      	str	r3, [r7, #20]
}
 8009e14:	bf00      	nop
 8009e16:	bf00      	nop
 8009e18:	e7fd      	b.n	8009e16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d06f      	beq.n	8009f00 <pvPortMalloc+0x154>
 8009e20:	4b45      	ldr	r3, [pc, #276]	@ (8009f38 <pvPortMalloc+0x18c>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d86a      	bhi.n	8009f00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e2a:	4b44      	ldr	r3, [pc, #272]	@ (8009f3c <pvPortMalloc+0x190>)
 8009e2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e2e:	4b43      	ldr	r3, [pc, #268]	@ (8009f3c <pvPortMalloc+0x190>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e34:	e004      	b.n	8009e40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d903      	bls.n	8009e52 <pvPortMalloc+0xa6>
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1f1      	bne.n	8009e36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e52:	4b37      	ldr	r3, [pc, #220]	@ (8009f30 <pvPortMalloc+0x184>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d051      	beq.n	8009f00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2208      	movs	r2, #8
 8009e62:	4413      	add	r3, r2
 8009e64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	6a3b      	ldr	r3, [r7, #32]
 8009e6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e70:	685a      	ldr	r2, [r3, #4]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	1ad2      	subs	r2, r2, r3
 8009e76:	2308      	movs	r3, #8
 8009e78:	005b      	lsls	r3, r3, #1
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d920      	bls.n	8009ec0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4413      	add	r3, r2
 8009e84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	f003 0307 	and.w	r3, r3, #7
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00b      	beq.n	8009ea8 <pvPortMalloc+0xfc>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	613b      	str	r3, [r7, #16]
}
 8009ea2:	bf00      	nop
 8009ea4:	bf00      	nop
 8009ea6:	e7fd      	b.n	8009ea4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eaa:	685a      	ldr	r2, [r3, #4]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	1ad2      	subs	r2, r2, r3
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009eba:	69b8      	ldr	r0, [r7, #24]
 8009ebc:	f000 f90a 	bl	800a0d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8009f38 <pvPortMalloc+0x18c>)
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	4a1b      	ldr	r2, [pc, #108]	@ (8009f38 <pvPortMalloc+0x18c>)
 8009ecc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ece:	4b1a      	ldr	r3, [pc, #104]	@ (8009f38 <pvPortMalloc+0x18c>)
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8009f40 <pvPortMalloc+0x194>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d203      	bcs.n	8009ee2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009eda:	4b17      	ldr	r3, [pc, #92]	@ (8009f38 <pvPortMalloc+0x18c>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a18      	ldr	r2, [pc, #96]	@ (8009f40 <pvPortMalloc+0x194>)
 8009ee0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee4:	685a      	ldr	r2, [r3, #4]
 8009ee6:	4b13      	ldr	r3, [pc, #76]	@ (8009f34 <pvPortMalloc+0x188>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	431a      	orrs	r2, r3
 8009eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ef6:	4b13      	ldr	r3, [pc, #76]	@ (8009f44 <pvPortMalloc+0x198>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	3301      	adds	r3, #1
 8009efc:	4a11      	ldr	r2, [pc, #68]	@ (8009f44 <pvPortMalloc+0x198>)
 8009efe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f00:	f7fe fcee 	bl	80088e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	f003 0307 	and.w	r3, r3, #7
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00b      	beq.n	8009f26 <pvPortMalloc+0x17a>
	__asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	60fb      	str	r3, [r7, #12]
}
 8009f20:	bf00      	nop
 8009f22:	bf00      	nop
 8009f24:	e7fd      	b.n	8009f22 <pvPortMalloc+0x176>
	return pvReturn;
 8009f26:	69fb      	ldr	r3, [r7, #28]
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3728      	adds	r7, #40	@ 0x28
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	20005140 	.word	0x20005140
 8009f34:	20005154 	.word	0x20005154
 8009f38:	20005144 	.word	0x20005144
 8009f3c:	20005138 	.word	0x20005138
 8009f40:	20005148 	.word	0x20005148
 8009f44:	2000514c 	.word	0x2000514c

08009f48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d04f      	beq.n	8009ffa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f5a:	2308      	movs	r3, #8
 8009f5c:	425b      	negs	r3, r3
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	4413      	add	r3, r2
 8009f62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	4b25      	ldr	r3, [pc, #148]	@ (800a004 <vPortFree+0xbc>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4013      	ands	r3, r2
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10b      	bne.n	8009f8e <vPortFree+0x46>
	__asm volatile
 8009f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f3bf 8f4f 	dsb	sy
 8009f86:	60fb      	str	r3, [r7, #12]
}
 8009f88:	bf00      	nop
 8009f8a:	bf00      	nop
 8009f8c:	e7fd      	b.n	8009f8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00b      	beq.n	8009fae <vPortFree+0x66>
	__asm volatile
 8009f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9a:	f383 8811 	msr	BASEPRI, r3
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f3bf 8f4f 	dsb	sy
 8009fa6:	60bb      	str	r3, [r7, #8]
}
 8009fa8:	bf00      	nop
 8009faa:	bf00      	nop
 8009fac:	e7fd      	b.n	8009faa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	685a      	ldr	r2, [r3, #4]
 8009fb2:	4b14      	ldr	r3, [pc, #80]	@ (800a004 <vPortFree+0xbc>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d01e      	beq.n	8009ffa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d11a      	bne.n	8009ffa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	685a      	ldr	r2, [r3, #4]
 8009fc8:	4b0e      	ldr	r3, [pc, #56]	@ (800a004 <vPortFree+0xbc>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	43db      	mvns	r3, r3
 8009fce:	401a      	ands	r2, r3
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009fd4:	f7fe fc76 	bl	80088c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	685a      	ldr	r2, [r3, #4]
 8009fdc:	4b0a      	ldr	r3, [pc, #40]	@ (800a008 <vPortFree+0xc0>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	4a09      	ldr	r2, [pc, #36]	@ (800a008 <vPortFree+0xc0>)
 8009fe4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009fe6:	6938      	ldr	r0, [r7, #16]
 8009fe8:	f000 f874 	bl	800a0d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009fec:	4b07      	ldr	r3, [pc, #28]	@ (800a00c <vPortFree+0xc4>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	4a06      	ldr	r2, [pc, #24]	@ (800a00c <vPortFree+0xc4>)
 8009ff4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009ff6:	f7fe fc73 	bl	80088e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ffa:	bf00      	nop
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	20005154 	.word	0x20005154
 800a008:	20005144 	.word	0x20005144
 800a00c:	20005150 	.word	0x20005150

0800a010 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a016:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a01a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a01c:	4b27      	ldr	r3, [pc, #156]	@ (800a0bc <prvHeapInit+0xac>)
 800a01e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f003 0307 	and.w	r3, r3, #7
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00c      	beq.n	800a044 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	3307      	adds	r3, #7
 800a02e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f023 0307 	bic.w	r3, r3, #7
 800a036:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	4a1f      	ldr	r2, [pc, #124]	@ (800a0bc <prvHeapInit+0xac>)
 800a040:	4413      	add	r3, r2
 800a042:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a048:	4a1d      	ldr	r2, [pc, #116]	@ (800a0c0 <prvHeapInit+0xb0>)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a04e:	4b1c      	ldr	r3, [pc, #112]	@ (800a0c0 <prvHeapInit+0xb0>)
 800a050:	2200      	movs	r2, #0
 800a052:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	4413      	add	r3, r2
 800a05a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a05c:	2208      	movs	r2, #8
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	1a9b      	subs	r3, r3, r2
 800a062:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f023 0307 	bic.w	r3, r3, #7
 800a06a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	4a15      	ldr	r2, [pc, #84]	@ (800a0c4 <prvHeapInit+0xb4>)
 800a070:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a072:	4b14      	ldr	r3, [pc, #80]	@ (800a0c4 <prvHeapInit+0xb4>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2200      	movs	r2, #0
 800a078:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a07a:	4b12      	ldr	r3, [pc, #72]	@ (800a0c4 <prvHeapInit+0xb4>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2200      	movs	r2, #0
 800a080:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	1ad2      	subs	r2, r2, r3
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a090:	4b0c      	ldr	r3, [pc, #48]	@ (800a0c4 <prvHeapInit+0xb4>)
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	4a0a      	ldr	r2, [pc, #40]	@ (800a0c8 <prvHeapInit+0xb8>)
 800a09e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	4a09      	ldr	r2, [pc, #36]	@ (800a0cc <prvHeapInit+0xbc>)
 800a0a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a0a8:	4b09      	ldr	r3, [pc, #36]	@ (800a0d0 <prvHeapInit+0xc0>)
 800a0aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a0ae:	601a      	str	r2, [r3, #0]
}
 800a0b0:	bf00      	nop
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	20001538 	.word	0x20001538
 800a0c0:	20005138 	.word	0x20005138
 800a0c4:	20005140 	.word	0x20005140
 800a0c8:	20005148 	.word	0x20005148
 800a0cc:	20005144 	.word	0x20005144
 800a0d0:	20005154 	.word	0x20005154

0800a0d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0dc:	4b28      	ldr	r3, [pc, #160]	@ (800a180 <prvInsertBlockIntoFreeList+0xac>)
 800a0de:	60fb      	str	r3, [r7, #12]
 800a0e0:	e002      	b.n	800a0e8 <prvInsertBlockIntoFreeList+0x14>
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	60fb      	str	r3, [r7, #12]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d8f7      	bhi.n	800a0e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	68ba      	ldr	r2, [r7, #8]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	429a      	cmp	r2, r3
 800a102:	d108      	bne.n	800a116 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	685a      	ldr	r2, [r3, #4]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	441a      	add	r2, r3
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	68ba      	ldr	r2, [r7, #8]
 800a120:	441a      	add	r2, r3
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	429a      	cmp	r2, r3
 800a128:	d118      	bne.n	800a15c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	4b15      	ldr	r3, [pc, #84]	@ (800a184 <prvInsertBlockIntoFreeList+0xb0>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	429a      	cmp	r2, r3
 800a134:	d00d      	beq.n	800a152 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685a      	ldr	r2, [r3, #4]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	441a      	add	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	601a      	str	r2, [r3, #0]
 800a150:	e008      	b.n	800a164 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a152:	4b0c      	ldr	r3, [pc, #48]	@ (800a184 <prvInsertBlockIntoFreeList+0xb0>)
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	601a      	str	r2, [r3, #0]
 800a15a:	e003      	b.n	800a164 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d002      	beq.n	800a172 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a172:	bf00      	nop
 800a174:	3714      	adds	r7, #20
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	20005138 	.word	0x20005138
 800a184:	20005140 	.word	0x20005140

0800a188 <_vsiprintf_r>:
 800a188:	b500      	push	{lr}
 800a18a:	b09b      	sub	sp, #108	@ 0x6c
 800a18c:	9100      	str	r1, [sp, #0]
 800a18e:	9104      	str	r1, [sp, #16]
 800a190:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a194:	9105      	str	r1, [sp, #20]
 800a196:	9102      	str	r1, [sp, #8]
 800a198:	4905      	ldr	r1, [pc, #20]	@ (800a1b0 <_vsiprintf_r+0x28>)
 800a19a:	9103      	str	r1, [sp, #12]
 800a19c:	4669      	mov	r1, sp
 800a19e:	f000 f8b1 	bl	800a304 <_svfiprintf_r>
 800a1a2:	9b00      	ldr	r3, [sp, #0]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	701a      	strb	r2, [r3, #0]
 800a1a8:	b01b      	add	sp, #108	@ 0x6c
 800a1aa:	f85d fb04 	ldr.w	pc, [sp], #4
 800a1ae:	bf00      	nop
 800a1b0:	ffff0208 	.word	0xffff0208

0800a1b4 <vsiprintf>:
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	460a      	mov	r2, r1
 800a1b8:	4601      	mov	r1, r0
 800a1ba:	4802      	ldr	r0, [pc, #8]	@ (800a1c4 <vsiprintf+0x10>)
 800a1bc:	6800      	ldr	r0, [r0, #0]
 800a1be:	f7ff bfe3 	b.w	800a188 <_vsiprintf_r>
 800a1c2:	bf00      	nop
 800a1c4:	20000014 	.word	0x20000014

0800a1c8 <memset>:
 800a1c8:	4402      	add	r2, r0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d100      	bne.n	800a1d2 <memset+0xa>
 800a1d0:	4770      	bx	lr
 800a1d2:	f803 1b01 	strb.w	r1, [r3], #1
 800a1d6:	e7f9      	b.n	800a1cc <memset+0x4>

0800a1d8 <__errno>:
 800a1d8:	4b01      	ldr	r3, [pc, #4]	@ (800a1e0 <__errno+0x8>)
 800a1da:	6818      	ldr	r0, [r3, #0]
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	20000014 	.word	0x20000014

0800a1e4 <__libc_init_array>:
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	4d0d      	ldr	r5, [pc, #52]	@ (800a21c <__libc_init_array+0x38>)
 800a1e8:	4c0d      	ldr	r4, [pc, #52]	@ (800a220 <__libc_init_array+0x3c>)
 800a1ea:	1b64      	subs	r4, r4, r5
 800a1ec:	10a4      	asrs	r4, r4, #2
 800a1ee:	2600      	movs	r6, #0
 800a1f0:	42a6      	cmp	r6, r4
 800a1f2:	d109      	bne.n	800a208 <__libc_init_array+0x24>
 800a1f4:	4d0b      	ldr	r5, [pc, #44]	@ (800a224 <__libc_init_array+0x40>)
 800a1f6:	4c0c      	ldr	r4, [pc, #48]	@ (800a228 <__libc_init_array+0x44>)
 800a1f8:	f000 fc66 	bl	800aac8 <_init>
 800a1fc:	1b64      	subs	r4, r4, r5
 800a1fe:	10a4      	asrs	r4, r4, #2
 800a200:	2600      	movs	r6, #0
 800a202:	42a6      	cmp	r6, r4
 800a204:	d105      	bne.n	800a212 <__libc_init_array+0x2e>
 800a206:	bd70      	pop	{r4, r5, r6, pc}
 800a208:	f855 3b04 	ldr.w	r3, [r5], #4
 800a20c:	4798      	blx	r3
 800a20e:	3601      	adds	r6, #1
 800a210:	e7ee      	b.n	800a1f0 <__libc_init_array+0xc>
 800a212:	f855 3b04 	ldr.w	r3, [r5], #4
 800a216:	4798      	blx	r3
 800a218:	3601      	adds	r6, #1
 800a21a:	e7f2      	b.n	800a202 <__libc_init_array+0x1e>
 800a21c:	0800adc4 	.word	0x0800adc4
 800a220:	0800adc4 	.word	0x0800adc4
 800a224:	0800adc4 	.word	0x0800adc4
 800a228:	0800adc8 	.word	0x0800adc8

0800a22c <__retarget_lock_acquire_recursive>:
 800a22c:	4770      	bx	lr

0800a22e <__retarget_lock_release_recursive>:
 800a22e:	4770      	bx	lr

0800a230 <memcpy>:
 800a230:	440a      	add	r2, r1
 800a232:	4291      	cmp	r1, r2
 800a234:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a238:	d100      	bne.n	800a23c <memcpy+0xc>
 800a23a:	4770      	bx	lr
 800a23c:	b510      	push	{r4, lr}
 800a23e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a242:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a246:	4291      	cmp	r1, r2
 800a248:	d1f9      	bne.n	800a23e <memcpy+0xe>
 800a24a:	bd10      	pop	{r4, pc}

0800a24c <__ssputs_r>:
 800a24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a250:	688e      	ldr	r6, [r1, #8]
 800a252:	461f      	mov	r7, r3
 800a254:	42be      	cmp	r6, r7
 800a256:	680b      	ldr	r3, [r1, #0]
 800a258:	4682      	mov	sl, r0
 800a25a:	460c      	mov	r4, r1
 800a25c:	4690      	mov	r8, r2
 800a25e:	d82d      	bhi.n	800a2bc <__ssputs_r+0x70>
 800a260:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a264:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a268:	d026      	beq.n	800a2b8 <__ssputs_r+0x6c>
 800a26a:	6965      	ldr	r5, [r4, #20]
 800a26c:	6909      	ldr	r1, [r1, #16]
 800a26e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a272:	eba3 0901 	sub.w	r9, r3, r1
 800a276:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a27a:	1c7b      	adds	r3, r7, #1
 800a27c:	444b      	add	r3, r9
 800a27e:	106d      	asrs	r5, r5, #1
 800a280:	429d      	cmp	r5, r3
 800a282:	bf38      	it	cc
 800a284:	461d      	movcc	r5, r3
 800a286:	0553      	lsls	r3, r2, #21
 800a288:	d527      	bpl.n	800a2da <__ssputs_r+0x8e>
 800a28a:	4629      	mov	r1, r5
 800a28c:	f000 f958 	bl	800a540 <_malloc_r>
 800a290:	4606      	mov	r6, r0
 800a292:	b360      	cbz	r0, 800a2ee <__ssputs_r+0xa2>
 800a294:	6921      	ldr	r1, [r4, #16]
 800a296:	464a      	mov	r2, r9
 800a298:	f7ff ffca 	bl	800a230 <memcpy>
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a2a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2a6:	81a3      	strh	r3, [r4, #12]
 800a2a8:	6126      	str	r6, [r4, #16]
 800a2aa:	6165      	str	r5, [r4, #20]
 800a2ac:	444e      	add	r6, r9
 800a2ae:	eba5 0509 	sub.w	r5, r5, r9
 800a2b2:	6026      	str	r6, [r4, #0]
 800a2b4:	60a5      	str	r5, [r4, #8]
 800a2b6:	463e      	mov	r6, r7
 800a2b8:	42be      	cmp	r6, r7
 800a2ba:	d900      	bls.n	800a2be <__ssputs_r+0x72>
 800a2bc:	463e      	mov	r6, r7
 800a2be:	6820      	ldr	r0, [r4, #0]
 800a2c0:	4632      	mov	r2, r6
 800a2c2:	4641      	mov	r1, r8
 800a2c4:	f000 fb84 	bl	800a9d0 <memmove>
 800a2c8:	68a3      	ldr	r3, [r4, #8]
 800a2ca:	1b9b      	subs	r3, r3, r6
 800a2cc:	60a3      	str	r3, [r4, #8]
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	4433      	add	r3, r6
 800a2d2:	6023      	str	r3, [r4, #0]
 800a2d4:	2000      	movs	r0, #0
 800a2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2da:	462a      	mov	r2, r5
 800a2dc:	f000 fb4a 	bl	800a974 <_realloc_r>
 800a2e0:	4606      	mov	r6, r0
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	d1e0      	bne.n	800a2a8 <__ssputs_r+0x5c>
 800a2e6:	6921      	ldr	r1, [r4, #16]
 800a2e8:	4650      	mov	r0, sl
 800a2ea:	f000 fb9b 	bl	800aa24 <_free_r>
 800a2ee:	230c      	movs	r3, #12
 800a2f0:	f8ca 3000 	str.w	r3, [sl]
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2fa:	81a3      	strh	r3, [r4, #12]
 800a2fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a300:	e7e9      	b.n	800a2d6 <__ssputs_r+0x8a>
	...

0800a304 <_svfiprintf_r>:
 800a304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a308:	4698      	mov	r8, r3
 800a30a:	898b      	ldrh	r3, [r1, #12]
 800a30c:	061b      	lsls	r3, r3, #24
 800a30e:	b09d      	sub	sp, #116	@ 0x74
 800a310:	4607      	mov	r7, r0
 800a312:	460d      	mov	r5, r1
 800a314:	4614      	mov	r4, r2
 800a316:	d510      	bpl.n	800a33a <_svfiprintf_r+0x36>
 800a318:	690b      	ldr	r3, [r1, #16]
 800a31a:	b973      	cbnz	r3, 800a33a <_svfiprintf_r+0x36>
 800a31c:	2140      	movs	r1, #64	@ 0x40
 800a31e:	f000 f90f 	bl	800a540 <_malloc_r>
 800a322:	6028      	str	r0, [r5, #0]
 800a324:	6128      	str	r0, [r5, #16]
 800a326:	b930      	cbnz	r0, 800a336 <_svfiprintf_r+0x32>
 800a328:	230c      	movs	r3, #12
 800a32a:	603b      	str	r3, [r7, #0]
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a330:	b01d      	add	sp, #116	@ 0x74
 800a332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a336:	2340      	movs	r3, #64	@ 0x40
 800a338:	616b      	str	r3, [r5, #20]
 800a33a:	2300      	movs	r3, #0
 800a33c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a33e:	2320      	movs	r3, #32
 800a340:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a344:	f8cd 800c 	str.w	r8, [sp, #12]
 800a348:	2330      	movs	r3, #48	@ 0x30
 800a34a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a4e8 <_svfiprintf_r+0x1e4>
 800a34e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a352:	f04f 0901 	mov.w	r9, #1
 800a356:	4623      	mov	r3, r4
 800a358:	469a      	mov	sl, r3
 800a35a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a35e:	b10a      	cbz	r2, 800a364 <_svfiprintf_r+0x60>
 800a360:	2a25      	cmp	r2, #37	@ 0x25
 800a362:	d1f9      	bne.n	800a358 <_svfiprintf_r+0x54>
 800a364:	ebba 0b04 	subs.w	fp, sl, r4
 800a368:	d00b      	beq.n	800a382 <_svfiprintf_r+0x7e>
 800a36a:	465b      	mov	r3, fp
 800a36c:	4622      	mov	r2, r4
 800a36e:	4629      	mov	r1, r5
 800a370:	4638      	mov	r0, r7
 800a372:	f7ff ff6b 	bl	800a24c <__ssputs_r>
 800a376:	3001      	adds	r0, #1
 800a378:	f000 80a7 	beq.w	800a4ca <_svfiprintf_r+0x1c6>
 800a37c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a37e:	445a      	add	r2, fp
 800a380:	9209      	str	r2, [sp, #36]	@ 0x24
 800a382:	f89a 3000 	ldrb.w	r3, [sl]
 800a386:	2b00      	cmp	r3, #0
 800a388:	f000 809f 	beq.w	800a4ca <_svfiprintf_r+0x1c6>
 800a38c:	2300      	movs	r3, #0
 800a38e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a396:	f10a 0a01 	add.w	sl, sl, #1
 800a39a:	9304      	str	r3, [sp, #16]
 800a39c:	9307      	str	r3, [sp, #28]
 800a39e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3a4:	4654      	mov	r4, sl
 800a3a6:	2205      	movs	r2, #5
 800a3a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ac:	484e      	ldr	r0, [pc, #312]	@ (800a4e8 <_svfiprintf_r+0x1e4>)
 800a3ae:	f7f5 ff0f 	bl	80001d0 <memchr>
 800a3b2:	9a04      	ldr	r2, [sp, #16]
 800a3b4:	b9d8      	cbnz	r0, 800a3ee <_svfiprintf_r+0xea>
 800a3b6:	06d0      	lsls	r0, r2, #27
 800a3b8:	bf44      	itt	mi
 800a3ba:	2320      	movmi	r3, #32
 800a3bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3c0:	0711      	lsls	r1, r2, #28
 800a3c2:	bf44      	itt	mi
 800a3c4:	232b      	movmi	r3, #43	@ 0x2b
 800a3c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3d0:	d015      	beq.n	800a3fe <_svfiprintf_r+0xfa>
 800a3d2:	9a07      	ldr	r2, [sp, #28]
 800a3d4:	4654      	mov	r4, sl
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	f04f 0c0a 	mov.w	ip, #10
 800a3dc:	4621      	mov	r1, r4
 800a3de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3e2:	3b30      	subs	r3, #48	@ 0x30
 800a3e4:	2b09      	cmp	r3, #9
 800a3e6:	d94b      	bls.n	800a480 <_svfiprintf_r+0x17c>
 800a3e8:	b1b0      	cbz	r0, 800a418 <_svfiprintf_r+0x114>
 800a3ea:	9207      	str	r2, [sp, #28]
 800a3ec:	e014      	b.n	800a418 <_svfiprintf_r+0x114>
 800a3ee:	eba0 0308 	sub.w	r3, r0, r8
 800a3f2:	fa09 f303 	lsl.w	r3, r9, r3
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	9304      	str	r3, [sp, #16]
 800a3fa:	46a2      	mov	sl, r4
 800a3fc:	e7d2      	b.n	800a3a4 <_svfiprintf_r+0xa0>
 800a3fe:	9b03      	ldr	r3, [sp, #12]
 800a400:	1d19      	adds	r1, r3, #4
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	9103      	str	r1, [sp, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	bfbb      	ittet	lt
 800a40a:	425b      	neglt	r3, r3
 800a40c:	f042 0202 	orrlt.w	r2, r2, #2
 800a410:	9307      	strge	r3, [sp, #28]
 800a412:	9307      	strlt	r3, [sp, #28]
 800a414:	bfb8      	it	lt
 800a416:	9204      	strlt	r2, [sp, #16]
 800a418:	7823      	ldrb	r3, [r4, #0]
 800a41a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a41c:	d10a      	bne.n	800a434 <_svfiprintf_r+0x130>
 800a41e:	7863      	ldrb	r3, [r4, #1]
 800a420:	2b2a      	cmp	r3, #42	@ 0x2a
 800a422:	d132      	bne.n	800a48a <_svfiprintf_r+0x186>
 800a424:	9b03      	ldr	r3, [sp, #12]
 800a426:	1d1a      	adds	r2, r3, #4
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	9203      	str	r2, [sp, #12]
 800a42c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a430:	3402      	adds	r4, #2
 800a432:	9305      	str	r3, [sp, #20]
 800a434:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a4f8 <_svfiprintf_r+0x1f4>
 800a438:	7821      	ldrb	r1, [r4, #0]
 800a43a:	2203      	movs	r2, #3
 800a43c:	4650      	mov	r0, sl
 800a43e:	f7f5 fec7 	bl	80001d0 <memchr>
 800a442:	b138      	cbz	r0, 800a454 <_svfiprintf_r+0x150>
 800a444:	9b04      	ldr	r3, [sp, #16]
 800a446:	eba0 000a 	sub.w	r0, r0, sl
 800a44a:	2240      	movs	r2, #64	@ 0x40
 800a44c:	4082      	lsls	r2, r0
 800a44e:	4313      	orrs	r3, r2
 800a450:	3401      	adds	r4, #1
 800a452:	9304      	str	r3, [sp, #16]
 800a454:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a458:	4824      	ldr	r0, [pc, #144]	@ (800a4ec <_svfiprintf_r+0x1e8>)
 800a45a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a45e:	2206      	movs	r2, #6
 800a460:	f7f5 feb6 	bl	80001d0 <memchr>
 800a464:	2800      	cmp	r0, #0
 800a466:	d036      	beq.n	800a4d6 <_svfiprintf_r+0x1d2>
 800a468:	4b21      	ldr	r3, [pc, #132]	@ (800a4f0 <_svfiprintf_r+0x1ec>)
 800a46a:	bb1b      	cbnz	r3, 800a4b4 <_svfiprintf_r+0x1b0>
 800a46c:	9b03      	ldr	r3, [sp, #12]
 800a46e:	3307      	adds	r3, #7
 800a470:	f023 0307 	bic.w	r3, r3, #7
 800a474:	3308      	adds	r3, #8
 800a476:	9303      	str	r3, [sp, #12]
 800a478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a47a:	4433      	add	r3, r6
 800a47c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a47e:	e76a      	b.n	800a356 <_svfiprintf_r+0x52>
 800a480:	fb0c 3202 	mla	r2, ip, r2, r3
 800a484:	460c      	mov	r4, r1
 800a486:	2001      	movs	r0, #1
 800a488:	e7a8      	b.n	800a3dc <_svfiprintf_r+0xd8>
 800a48a:	2300      	movs	r3, #0
 800a48c:	3401      	adds	r4, #1
 800a48e:	9305      	str	r3, [sp, #20]
 800a490:	4619      	mov	r1, r3
 800a492:	f04f 0c0a 	mov.w	ip, #10
 800a496:	4620      	mov	r0, r4
 800a498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a49c:	3a30      	subs	r2, #48	@ 0x30
 800a49e:	2a09      	cmp	r2, #9
 800a4a0:	d903      	bls.n	800a4aa <_svfiprintf_r+0x1a6>
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d0c6      	beq.n	800a434 <_svfiprintf_r+0x130>
 800a4a6:	9105      	str	r1, [sp, #20]
 800a4a8:	e7c4      	b.n	800a434 <_svfiprintf_r+0x130>
 800a4aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e7f0      	b.n	800a496 <_svfiprintf_r+0x192>
 800a4b4:	ab03      	add	r3, sp, #12
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	462a      	mov	r2, r5
 800a4ba:	4b0e      	ldr	r3, [pc, #56]	@ (800a4f4 <_svfiprintf_r+0x1f0>)
 800a4bc:	a904      	add	r1, sp, #16
 800a4be:	4638      	mov	r0, r7
 800a4c0:	f3af 8000 	nop.w
 800a4c4:	1c42      	adds	r2, r0, #1
 800a4c6:	4606      	mov	r6, r0
 800a4c8:	d1d6      	bne.n	800a478 <_svfiprintf_r+0x174>
 800a4ca:	89ab      	ldrh	r3, [r5, #12]
 800a4cc:	065b      	lsls	r3, r3, #25
 800a4ce:	f53f af2d 	bmi.w	800a32c <_svfiprintf_r+0x28>
 800a4d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4d4:	e72c      	b.n	800a330 <_svfiprintf_r+0x2c>
 800a4d6:	ab03      	add	r3, sp, #12
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	462a      	mov	r2, r5
 800a4dc:	4b05      	ldr	r3, [pc, #20]	@ (800a4f4 <_svfiprintf_r+0x1f0>)
 800a4de:	a904      	add	r1, sp, #16
 800a4e0:	4638      	mov	r0, r7
 800a4e2:	f000 f91b 	bl	800a71c <_printf_i>
 800a4e6:	e7ed      	b.n	800a4c4 <_svfiprintf_r+0x1c0>
 800a4e8:	0800ad88 	.word	0x0800ad88
 800a4ec:	0800ad92 	.word	0x0800ad92
 800a4f0:	00000000 	.word	0x00000000
 800a4f4:	0800a24d 	.word	0x0800a24d
 800a4f8:	0800ad8e 	.word	0x0800ad8e

0800a4fc <sbrk_aligned>:
 800a4fc:	b570      	push	{r4, r5, r6, lr}
 800a4fe:	4e0f      	ldr	r6, [pc, #60]	@ (800a53c <sbrk_aligned+0x40>)
 800a500:	460c      	mov	r4, r1
 800a502:	6831      	ldr	r1, [r6, #0]
 800a504:	4605      	mov	r5, r0
 800a506:	b911      	cbnz	r1, 800a50e <sbrk_aligned+0x12>
 800a508:	f000 fa7c 	bl	800aa04 <_sbrk_r>
 800a50c:	6030      	str	r0, [r6, #0]
 800a50e:	4621      	mov	r1, r4
 800a510:	4628      	mov	r0, r5
 800a512:	f000 fa77 	bl	800aa04 <_sbrk_r>
 800a516:	1c43      	adds	r3, r0, #1
 800a518:	d103      	bne.n	800a522 <sbrk_aligned+0x26>
 800a51a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a51e:	4620      	mov	r0, r4
 800a520:	bd70      	pop	{r4, r5, r6, pc}
 800a522:	1cc4      	adds	r4, r0, #3
 800a524:	f024 0403 	bic.w	r4, r4, #3
 800a528:	42a0      	cmp	r0, r4
 800a52a:	d0f8      	beq.n	800a51e <sbrk_aligned+0x22>
 800a52c:	1a21      	subs	r1, r4, r0
 800a52e:	4628      	mov	r0, r5
 800a530:	f000 fa68 	bl	800aa04 <_sbrk_r>
 800a534:	3001      	adds	r0, #1
 800a536:	d1f2      	bne.n	800a51e <sbrk_aligned+0x22>
 800a538:	e7ef      	b.n	800a51a <sbrk_aligned+0x1e>
 800a53a:	bf00      	nop
 800a53c:	20005294 	.word	0x20005294

0800a540 <_malloc_r>:
 800a540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a544:	1ccd      	adds	r5, r1, #3
 800a546:	f025 0503 	bic.w	r5, r5, #3
 800a54a:	3508      	adds	r5, #8
 800a54c:	2d0c      	cmp	r5, #12
 800a54e:	bf38      	it	cc
 800a550:	250c      	movcc	r5, #12
 800a552:	2d00      	cmp	r5, #0
 800a554:	4606      	mov	r6, r0
 800a556:	db01      	blt.n	800a55c <_malloc_r+0x1c>
 800a558:	42a9      	cmp	r1, r5
 800a55a:	d904      	bls.n	800a566 <_malloc_r+0x26>
 800a55c:	230c      	movs	r3, #12
 800a55e:	6033      	str	r3, [r6, #0]
 800a560:	2000      	movs	r0, #0
 800a562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a566:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a63c <_malloc_r+0xfc>
 800a56a:	f000 f9f7 	bl	800a95c <__malloc_lock>
 800a56e:	f8d8 3000 	ldr.w	r3, [r8]
 800a572:	461c      	mov	r4, r3
 800a574:	bb44      	cbnz	r4, 800a5c8 <_malloc_r+0x88>
 800a576:	4629      	mov	r1, r5
 800a578:	4630      	mov	r0, r6
 800a57a:	f7ff ffbf 	bl	800a4fc <sbrk_aligned>
 800a57e:	1c43      	adds	r3, r0, #1
 800a580:	4604      	mov	r4, r0
 800a582:	d158      	bne.n	800a636 <_malloc_r+0xf6>
 800a584:	f8d8 4000 	ldr.w	r4, [r8]
 800a588:	4627      	mov	r7, r4
 800a58a:	2f00      	cmp	r7, #0
 800a58c:	d143      	bne.n	800a616 <_malloc_r+0xd6>
 800a58e:	2c00      	cmp	r4, #0
 800a590:	d04b      	beq.n	800a62a <_malloc_r+0xea>
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	4639      	mov	r1, r7
 800a596:	4630      	mov	r0, r6
 800a598:	eb04 0903 	add.w	r9, r4, r3
 800a59c:	f000 fa32 	bl	800aa04 <_sbrk_r>
 800a5a0:	4581      	cmp	r9, r0
 800a5a2:	d142      	bne.n	800a62a <_malloc_r+0xea>
 800a5a4:	6821      	ldr	r1, [r4, #0]
 800a5a6:	1a6d      	subs	r5, r5, r1
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	f7ff ffa6 	bl	800a4fc <sbrk_aligned>
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	d03a      	beq.n	800a62a <_malloc_r+0xea>
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	442b      	add	r3, r5
 800a5b8:	6023      	str	r3, [r4, #0]
 800a5ba:	f8d8 3000 	ldr.w	r3, [r8]
 800a5be:	685a      	ldr	r2, [r3, #4]
 800a5c0:	bb62      	cbnz	r2, 800a61c <_malloc_r+0xdc>
 800a5c2:	f8c8 7000 	str.w	r7, [r8]
 800a5c6:	e00f      	b.n	800a5e8 <_malloc_r+0xa8>
 800a5c8:	6822      	ldr	r2, [r4, #0]
 800a5ca:	1b52      	subs	r2, r2, r5
 800a5cc:	d420      	bmi.n	800a610 <_malloc_r+0xd0>
 800a5ce:	2a0b      	cmp	r2, #11
 800a5d0:	d917      	bls.n	800a602 <_malloc_r+0xc2>
 800a5d2:	1961      	adds	r1, r4, r5
 800a5d4:	42a3      	cmp	r3, r4
 800a5d6:	6025      	str	r5, [r4, #0]
 800a5d8:	bf18      	it	ne
 800a5da:	6059      	strne	r1, [r3, #4]
 800a5dc:	6863      	ldr	r3, [r4, #4]
 800a5de:	bf08      	it	eq
 800a5e0:	f8c8 1000 	streq.w	r1, [r8]
 800a5e4:	5162      	str	r2, [r4, r5]
 800a5e6:	604b      	str	r3, [r1, #4]
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f000 f9bd 	bl	800a968 <__malloc_unlock>
 800a5ee:	f104 000b 	add.w	r0, r4, #11
 800a5f2:	1d23      	adds	r3, r4, #4
 800a5f4:	f020 0007 	bic.w	r0, r0, #7
 800a5f8:	1ac2      	subs	r2, r0, r3
 800a5fa:	bf1c      	itt	ne
 800a5fc:	1a1b      	subne	r3, r3, r0
 800a5fe:	50a3      	strne	r3, [r4, r2]
 800a600:	e7af      	b.n	800a562 <_malloc_r+0x22>
 800a602:	6862      	ldr	r2, [r4, #4]
 800a604:	42a3      	cmp	r3, r4
 800a606:	bf0c      	ite	eq
 800a608:	f8c8 2000 	streq.w	r2, [r8]
 800a60c:	605a      	strne	r2, [r3, #4]
 800a60e:	e7eb      	b.n	800a5e8 <_malloc_r+0xa8>
 800a610:	4623      	mov	r3, r4
 800a612:	6864      	ldr	r4, [r4, #4]
 800a614:	e7ae      	b.n	800a574 <_malloc_r+0x34>
 800a616:	463c      	mov	r4, r7
 800a618:	687f      	ldr	r7, [r7, #4]
 800a61a:	e7b6      	b.n	800a58a <_malloc_r+0x4a>
 800a61c:	461a      	mov	r2, r3
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	42a3      	cmp	r3, r4
 800a622:	d1fb      	bne.n	800a61c <_malloc_r+0xdc>
 800a624:	2300      	movs	r3, #0
 800a626:	6053      	str	r3, [r2, #4]
 800a628:	e7de      	b.n	800a5e8 <_malloc_r+0xa8>
 800a62a:	230c      	movs	r3, #12
 800a62c:	6033      	str	r3, [r6, #0]
 800a62e:	4630      	mov	r0, r6
 800a630:	f000 f99a 	bl	800a968 <__malloc_unlock>
 800a634:	e794      	b.n	800a560 <_malloc_r+0x20>
 800a636:	6005      	str	r5, [r0, #0]
 800a638:	e7d6      	b.n	800a5e8 <_malloc_r+0xa8>
 800a63a:	bf00      	nop
 800a63c:	20005298 	.word	0x20005298

0800a640 <_printf_common>:
 800a640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a644:	4616      	mov	r6, r2
 800a646:	4698      	mov	r8, r3
 800a648:	688a      	ldr	r2, [r1, #8]
 800a64a:	690b      	ldr	r3, [r1, #16]
 800a64c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a650:	4293      	cmp	r3, r2
 800a652:	bfb8      	it	lt
 800a654:	4613      	movlt	r3, r2
 800a656:	6033      	str	r3, [r6, #0]
 800a658:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a65c:	4607      	mov	r7, r0
 800a65e:	460c      	mov	r4, r1
 800a660:	b10a      	cbz	r2, 800a666 <_printf_common+0x26>
 800a662:	3301      	adds	r3, #1
 800a664:	6033      	str	r3, [r6, #0]
 800a666:	6823      	ldr	r3, [r4, #0]
 800a668:	0699      	lsls	r1, r3, #26
 800a66a:	bf42      	ittt	mi
 800a66c:	6833      	ldrmi	r3, [r6, #0]
 800a66e:	3302      	addmi	r3, #2
 800a670:	6033      	strmi	r3, [r6, #0]
 800a672:	6825      	ldr	r5, [r4, #0]
 800a674:	f015 0506 	ands.w	r5, r5, #6
 800a678:	d106      	bne.n	800a688 <_printf_common+0x48>
 800a67a:	f104 0a19 	add.w	sl, r4, #25
 800a67e:	68e3      	ldr	r3, [r4, #12]
 800a680:	6832      	ldr	r2, [r6, #0]
 800a682:	1a9b      	subs	r3, r3, r2
 800a684:	42ab      	cmp	r3, r5
 800a686:	dc26      	bgt.n	800a6d6 <_printf_common+0x96>
 800a688:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a68c:	6822      	ldr	r2, [r4, #0]
 800a68e:	3b00      	subs	r3, #0
 800a690:	bf18      	it	ne
 800a692:	2301      	movne	r3, #1
 800a694:	0692      	lsls	r2, r2, #26
 800a696:	d42b      	bmi.n	800a6f0 <_printf_common+0xb0>
 800a698:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a69c:	4641      	mov	r1, r8
 800a69e:	4638      	mov	r0, r7
 800a6a0:	47c8      	blx	r9
 800a6a2:	3001      	adds	r0, #1
 800a6a4:	d01e      	beq.n	800a6e4 <_printf_common+0xa4>
 800a6a6:	6823      	ldr	r3, [r4, #0]
 800a6a8:	6922      	ldr	r2, [r4, #16]
 800a6aa:	f003 0306 	and.w	r3, r3, #6
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	bf02      	ittt	eq
 800a6b2:	68e5      	ldreq	r5, [r4, #12]
 800a6b4:	6833      	ldreq	r3, [r6, #0]
 800a6b6:	1aed      	subeq	r5, r5, r3
 800a6b8:	68a3      	ldr	r3, [r4, #8]
 800a6ba:	bf0c      	ite	eq
 800a6bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6c0:	2500      	movne	r5, #0
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	bfc4      	itt	gt
 800a6c6:	1a9b      	subgt	r3, r3, r2
 800a6c8:	18ed      	addgt	r5, r5, r3
 800a6ca:	2600      	movs	r6, #0
 800a6cc:	341a      	adds	r4, #26
 800a6ce:	42b5      	cmp	r5, r6
 800a6d0:	d11a      	bne.n	800a708 <_printf_common+0xc8>
 800a6d2:	2000      	movs	r0, #0
 800a6d4:	e008      	b.n	800a6e8 <_printf_common+0xa8>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	4652      	mov	r2, sl
 800a6da:	4641      	mov	r1, r8
 800a6dc:	4638      	mov	r0, r7
 800a6de:	47c8      	blx	r9
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	d103      	bne.n	800a6ec <_printf_common+0xac>
 800a6e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ec:	3501      	adds	r5, #1
 800a6ee:	e7c6      	b.n	800a67e <_printf_common+0x3e>
 800a6f0:	18e1      	adds	r1, r4, r3
 800a6f2:	1c5a      	adds	r2, r3, #1
 800a6f4:	2030      	movs	r0, #48	@ 0x30
 800a6f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a6fa:	4422      	add	r2, r4
 800a6fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a700:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a704:	3302      	adds	r3, #2
 800a706:	e7c7      	b.n	800a698 <_printf_common+0x58>
 800a708:	2301      	movs	r3, #1
 800a70a:	4622      	mov	r2, r4
 800a70c:	4641      	mov	r1, r8
 800a70e:	4638      	mov	r0, r7
 800a710:	47c8      	blx	r9
 800a712:	3001      	adds	r0, #1
 800a714:	d0e6      	beq.n	800a6e4 <_printf_common+0xa4>
 800a716:	3601      	adds	r6, #1
 800a718:	e7d9      	b.n	800a6ce <_printf_common+0x8e>
	...

0800a71c <_printf_i>:
 800a71c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a720:	7e0f      	ldrb	r7, [r1, #24]
 800a722:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a724:	2f78      	cmp	r7, #120	@ 0x78
 800a726:	4691      	mov	r9, r2
 800a728:	4680      	mov	r8, r0
 800a72a:	460c      	mov	r4, r1
 800a72c:	469a      	mov	sl, r3
 800a72e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a732:	d807      	bhi.n	800a744 <_printf_i+0x28>
 800a734:	2f62      	cmp	r7, #98	@ 0x62
 800a736:	d80a      	bhi.n	800a74e <_printf_i+0x32>
 800a738:	2f00      	cmp	r7, #0
 800a73a:	f000 80d2 	beq.w	800a8e2 <_printf_i+0x1c6>
 800a73e:	2f58      	cmp	r7, #88	@ 0x58
 800a740:	f000 80b9 	beq.w	800a8b6 <_printf_i+0x19a>
 800a744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a748:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a74c:	e03a      	b.n	800a7c4 <_printf_i+0xa8>
 800a74e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a752:	2b15      	cmp	r3, #21
 800a754:	d8f6      	bhi.n	800a744 <_printf_i+0x28>
 800a756:	a101      	add	r1, pc, #4	@ (adr r1, 800a75c <_printf_i+0x40>)
 800a758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a75c:	0800a7b5 	.word	0x0800a7b5
 800a760:	0800a7c9 	.word	0x0800a7c9
 800a764:	0800a745 	.word	0x0800a745
 800a768:	0800a745 	.word	0x0800a745
 800a76c:	0800a745 	.word	0x0800a745
 800a770:	0800a745 	.word	0x0800a745
 800a774:	0800a7c9 	.word	0x0800a7c9
 800a778:	0800a745 	.word	0x0800a745
 800a77c:	0800a745 	.word	0x0800a745
 800a780:	0800a745 	.word	0x0800a745
 800a784:	0800a745 	.word	0x0800a745
 800a788:	0800a8c9 	.word	0x0800a8c9
 800a78c:	0800a7f3 	.word	0x0800a7f3
 800a790:	0800a883 	.word	0x0800a883
 800a794:	0800a745 	.word	0x0800a745
 800a798:	0800a745 	.word	0x0800a745
 800a79c:	0800a8eb 	.word	0x0800a8eb
 800a7a0:	0800a745 	.word	0x0800a745
 800a7a4:	0800a7f3 	.word	0x0800a7f3
 800a7a8:	0800a745 	.word	0x0800a745
 800a7ac:	0800a745 	.word	0x0800a745
 800a7b0:	0800a88b 	.word	0x0800a88b
 800a7b4:	6833      	ldr	r3, [r6, #0]
 800a7b6:	1d1a      	adds	r2, r3, #4
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	6032      	str	r2, [r6, #0]
 800a7bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a7c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e09d      	b.n	800a904 <_printf_i+0x1e8>
 800a7c8:	6833      	ldr	r3, [r6, #0]
 800a7ca:	6820      	ldr	r0, [r4, #0]
 800a7cc:	1d19      	adds	r1, r3, #4
 800a7ce:	6031      	str	r1, [r6, #0]
 800a7d0:	0606      	lsls	r6, r0, #24
 800a7d2:	d501      	bpl.n	800a7d8 <_printf_i+0xbc>
 800a7d4:	681d      	ldr	r5, [r3, #0]
 800a7d6:	e003      	b.n	800a7e0 <_printf_i+0xc4>
 800a7d8:	0645      	lsls	r5, r0, #25
 800a7da:	d5fb      	bpl.n	800a7d4 <_printf_i+0xb8>
 800a7dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a7e0:	2d00      	cmp	r5, #0
 800a7e2:	da03      	bge.n	800a7ec <_printf_i+0xd0>
 800a7e4:	232d      	movs	r3, #45	@ 0x2d
 800a7e6:	426d      	negs	r5, r5
 800a7e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7ec:	4859      	ldr	r0, [pc, #356]	@ (800a954 <_printf_i+0x238>)
 800a7ee:	230a      	movs	r3, #10
 800a7f0:	e011      	b.n	800a816 <_printf_i+0xfa>
 800a7f2:	6821      	ldr	r1, [r4, #0]
 800a7f4:	6833      	ldr	r3, [r6, #0]
 800a7f6:	0608      	lsls	r0, r1, #24
 800a7f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a7fc:	d402      	bmi.n	800a804 <_printf_i+0xe8>
 800a7fe:	0649      	lsls	r1, r1, #25
 800a800:	bf48      	it	mi
 800a802:	b2ad      	uxthmi	r5, r5
 800a804:	2f6f      	cmp	r7, #111	@ 0x6f
 800a806:	4853      	ldr	r0, [pc, #332]	@ (800a954 <_printf_i+0x238>)
 800a808:	6033      	str	r3, [r6, #0]
 800a80a:	bf14      	ite	ne
 800a80c:	230a      	movne	r3, #10
 800a80e:	2308      	moveq	r3, #8
 800a810:	2100      	movs	r1, #0
 800a812:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a816:	6866      	ldr	r6, [r4, #4]
 800a818:	60a6      	str	r6, [r4, #8]
 800a81a:	2e00      	cmp	r6, #0
 800a81c:	bfa2      	ittt	ge
 800a81e:	6821      	ldrge	r1, [r4, #0]
 800a820:	f021 0104 	bicge.w	r1, r1, #4
 800a824:	6021      	strge	r1, [r4, #0]
 800a826:	b90d      	cbnz	r5, 800a82c <_printf_i+0x110>
 800a828:	2e00      	cmp	r6, #0
 800a82a:	d04b      	beq.n	800a8c4 <_printf_i+0x1a8>
 800a82c:	4616      	mov	r6, r2
 800a82e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a832:	fb03 5711 	mls	r7, r3, r1, r5
 800a836:	5dc7      	ldrb	r7, [r0, r7]
 800a838:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a83c:	462f      	mov	r7, r5
 800a83e:	42bb      	cmp	r3, r7
 800a840:	460d      	mov	r5, r1
 800a842:	d9f4      	bls.n	800a82e <_printf_i+0x112>
 800a844:	2b08      	cmp	r3, #8
 800a846:	d10b      	bne.n	800a860 <_printf_i+0x144>
 800a848:	6823      	ldr	r3, [r4, #0]
 800a84a:	07df      	lsls	r7, r3, #31
 800a84c:	d508      	bpl.n	800a860 <_printf_i+0x144>
 800a84e:	6923      	ldr	r3, [r4, #16]
 800a850:	6861      	ldr	r1, [r4, #4]
 800a852:	4299      	cmp	r1, r3
 800a854:	bfde      	ittt	le
 800a856:	2330      	movle	r3, #48	@ 0x30
 800a858:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a85c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a860:	1b92      	subs	r2, r2, r6
 800a862:	6122      	str	r2, [r4, #16]
 800a864:	f8cd a000 	str.w	sl, [sp]
 800a868:	464b      	mov	r3, r9
 800a86a:	aa03      	add	r2, sp, #12
 800a86c:	4621      	mov	r1, r4
 800a86e:	4640      	mov	r0, r8
 800a870:	f7ff fee6 	bl	800a640 <_printf_common>
 800a874:	3001      	adds	r0, #1
 800a876:	d14a      	bne.n	800a90e <_printf_i+0x1f2>
 800a878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a87c:	b004      	add	sp, #16
 800a87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a882:	6823      	ldr	r3, [r4, #0]
 800a884:	f043 0320 	orr.w	r3, r3, #32
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	4833      	ldr	r0, [pc, #204]	@ (800a958 <_printf_i+0x23c>)
 800a88c:	2778      	movs	r7, #120	@ 0x78
 800a88e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a892:	6823      	ldr	r3, [r4, #0]
 800a894:	6831      	ldr	r1, [r6, #0]
 800a896:	061f      	lsls	r7, r3, #24
 800a898:	f851 5b04 	ldr.w	r5, [r1], #4
 800a89c:	d402      	bmi.n	800a8a4 <_printf_i+0x188>
 800a89e:	065f      	lsls	r7, r3, #25
 800a8a0:	bf48      	it	mi
 800a8a2:	b2ad      	uxthmi	r5, r5
 800a8a4:	6031      	str	r1, [r6, #0]
 800a8a6:	07d9      	lsls	r1, r3, #31
 800a8a8:	bf44      	itt	mi
 800a8aa:	f043 0320 	orrmi.w	r3, r3, #32
 800a8ae:	6023      	strmi	r3, [r4, #0]
 800a8b0:	b11d      	cbz	r5, 800a8ba <_printf_i+0x19e>
 800a8b2:	2310      	movs	r3, #16
 800a8b4:	e7ac      	b.n	800a810 <_printf_i+0xf4>
 800a8b6:	4827      	ldr	r0, [pc, #156]	@ (800a954 <_printf_i+0x238>)
 800a8b8:	e7e9      	b.n	800a88e <_printf_i+0x172>
 800a8ba:	6823      	ldr	r3, [r4, #0]
 800a8bc:	f023 0320 	bic.w	r3, r3, #32
 800a8c0:	6023      	str	r3, [r4, #0]
 800a8c2:	e7f6      	b.n	800a8b2 <_printf_i+0x196>
 800a8c4:	4616      	mov	r6, r2
 800a8c6:	e7bd      	b.n	800a844 <_printf_i+0x128>
 800a8c8:	6833      	ldr	r3, [r6, #0]
 800a8ca:	6825      	ldr	r5, [r4, #0]
 800a8cc:	6961      	ldr	r1, [r4, #20]
 800a8ce:	1d18      	adds	r0, r3, #4
 800a8d0:	6030      	str	r0, [r6, #0]
 800a8d2:	062e      	lsls	r6, r5, #24
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	d501      	bpl.n	800a8dc <_printf_i+0x1c0>
 800a8d8:	6019      	str	r1, [r3, #0]
 800a8da:	e002      	b.n	800a8e2 <_printf_i+0x1c6>
 800a8dc:	0668      	lsls	r0, r5, #25
 800a8de:	d5fb      	bpl.n	800a8d8 <_printf_i+0x1bc>
 800a8e0:	8019      	strh	r1, [r3, #0]
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	6123      	str	r3, [r4, #16]
 800a8e6:	4616      	mov	r6, r2
 800a8e8:	e7bc      	b.n	800a864 <_printf_i+0x148>
 800a8ea:	6833      	ldr	r3, [r6, #0]
 800a8ec:	1d1a      	adds	r2, r3, #4
 800a8ee:	6032      	str	r2, [r6, #0]
 800a8f0:	681e      	ldr	r6, [r3, #0]
 800a8f2:	6862      	ldr	r2, [r4, #4]
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	f7f5 fc6a 	bl	80001d0 <memchr>
 800a8fc:	b108      	cbz	r0, 800a902 <_printf_i+0x1e6>
 800a8fe:	1b80      	subs	r0, r0, r6
 800a900:	6060      	str	r0, [r4, #4]
 800a902:	6863      	ldr	r3, [r4, #4]
 800a904:	6123      	str	r3, [r4, #16]
 800a906:	2300      	movs	r3, #0
 800a908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a90c:	e7aa      	b.n	800a864 <_printf_i+0x148>
 800a90e:	6923      	ldr	r3, [r4, #16]
 800a910:	4632      	mov	r2, r6
 800a912:	4649      	mov	r1, r9
 800a914:	4640      	mov	r0, r8
 800a916:	47d0      	blx	sl
 800a918:	3001      	adds	r0, #1
 800a91a:	d0ad      	beq.n	800a878 <_printf_i+0x15c>
 800a91c:	6823      	ldr	r3, [r4, #0]
 800a91e:	079b      	lsls	r3, r3, #30
 800a920:	d413      	bmi.n	800a94a <_printf_i+0x22e>
 800a922:	68e0      	ldr	r0, [r4, #12]
 800a924:	9b03      	ldr	r3, [sp, #12]
 800a926:	4298      	cmp	r0, r3
 800a928:	bfb8      	it	lt
 800a92a:	4618      	movlt	r0, r3
 800a92c:	e7a6      	b.n	800a87c <_printf_i+0x160>
 800a92e:	2301      	movs	r3, #1
 800a930:	4632      	mov	r2, r6
 800a932:	4649      	mov	r1, r9
 800a934:	4640      	mov	r0, r8
 800a936:	47d0      	blx	sl
 800a938:	3001      	adds	r0, #1
 800a93a:	d09d      	beq.n	800a878 <_printf_i+0x15c>
 800a93c:	3501      	adds	r5, #1
 800a93e:	68e3      	ldr	r3, [r4, #12]
 800a940:	9903      	ldr	r1, [sp, #12]
 800a942:	1a5b      	subs	r3, r3, r1
 800a944:	42ab      	cmp	r3, r5
 800a946:	dcf2      	bgt.n	800a92e <_printf_i+0x212>
 800a948:	e7eb      	b.n	800a922 <_printf_i+0x206>
 800a94a:	2500      	movs	r5, #0
 800a94c:	f104 0619 	add.w	r6, r4, #25
 800a950:	e7f5      	b.n	800a93e <_printf_i+0x222>
 800a952:	bf00      	nop
 800a954:	0800ad99 	.word	0x0800ad99
 800a958:	0800adaa 	.word	0x0800adaa

0800a95c <__malloc_lock>:
 800a95c:	4801      	ldr	r0, [pc, #4]	@ (800a964 <__malloc_lock+0x8>)
 800a95e:	f7ff bc65 	b.w	800a22c <__retarget_lock_acquire_recursive>
 800a962:	bf00      	nop
 800a964:	20005290 	.word	0x20005290

0800a968 <__malloc_unlock>:
 800a968:	4801      	ldr	r0, [pc, #4]	@ (800a970 <__malloc_unlock+0x8>)
 800a96a:	f7ff bc60 	b.w	800a22e <__retarget_lock_release_recursive>
 800a96e:	bf00      	nop
 800a970:	20005290 	.word	0x20005290

0800a974 <_realloc_r>:
 800a974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a978:	4680      	mov	r8, r0
 800a97a:	4615      	mov	r5, r2
 800a97c:	460c      	mov	r4, r1
 800a97e:	b921      	cbnz	r1, 800a98a <_realloc_r+0x16>
 800a980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a984:	4611      	mov	r1, r2
 800a986:	f7ff bddb 	b.w	800a540 <_malloc_r>
 800a98a:	b92a      	cbnz	r2, 800a998 <_realloc_r+0x24>
 800a98c:	f000 f84a 	bl	800aa24 <_free_r>
 800a990:	2400      	movs	r4, #0
 800a992:	4620      	mov	r0, r4
 800a994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a998:	f000 f88e 	bl	800aab8 <_malloc_usable_size_r>
 800a99c:	4285      	cmp	r5, r0
 800a99e:	4606      	mov	r6, r0
 800a9a0:	d802      	bhi.n	800a9a8 <_realloc_r+0x34>
 800a9a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a9a6:	d8f4      	bhi.n	800a992 <_realloc_r+0x1e>
 800a9a8:	4629      	mov	r1, r5
 800a9aa:	4640      	mov	r0, r8
 800a9ac:	f7ff fdc8 	bl	800a540 <_malloc_r>
 800a9b0:	4607      	mov	r7, r0
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	d0ec      	beq.n	800a990 <_realloc_r+0x1c>
 800a9b6:	42b5      	cmp	r5, r6
 800a9b8:	462a      	mov	r2, r5
 800a9ba:	4621      	mov	r1, r4
 800a9bc:	bf28      	it	cs
 800a9be:	4632      	movcs	r2, r6
 800a9c0:	f7ff fc36 	bl	800a230 <memcpy>
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	4640      	mov	r0, r8
 800a9c8:	f000 f82c 	bl	800aa24 <_free_r>
 800a9cc:	463c      	mov	r4, r7
 800a9ce:	e7e0      	b.n	800a992 <_realloc_r+0x1e>

0800a9d0 <memmove>:
 800a9d0:	4288      	cmp	r0, r1
 800a9d2:	b510      	push	{r4, lr}
 800a9d4:	eb01 0402 	add.w	r4, r1, r2
 800a9d8:	d902      	bls.n	800a9e0 <memmove+0x10>
 800a9da:	4284      	cmp	r4, r0
 800a9dc:	4623      	mov	r3, r4
 800a9de:	d807      	bhi.n	800a9f0 <memmove+0x20>
 800a9e0:	1e43      	subs	r3, r0, #1
 800a9e2:	42a1      	cmp	r1, r4
 800a9e4:	d008      	beq.n	800a9f8 <memmove+0x28>
 800a9e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9ee:	e7f8      	b.n	800a9e2 <memmove+0x12>
 800a9f0:	4402      	add	r2, r0
 800a9f2:	4601      	mov	r1, r0
 800a9f4:	428a      	cmp	r2, r1
 800a9f6:	d100      	bne.n	800a9fa <memmove+0x2a>
 800a9f8:	bd10      	pop	{r4, pc}
 800a9fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa02:	e7f7      	b.n	800a9f4 <memmove+0x24>

0800aa04 <_sbrk_r>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	4d06      	ldr	r5, [pc, #24]	@ (800aa20 <_sbrk_r+0x1c>)
 800aa08:	2300      	movs	r3, #0
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	4608      	mov	r0, r1
 800aa0e:	602b      	str	r3, [r5, #0]
 800aa10:	f7f8 f9bc 	bl	8002d8c <_sbrk>
 800aa14:	1c43      	adds	r3, r0, #1
 800aa16:	d102      	bne.n	800aa1e <_sbrk_r+0x1a>
 800aa18:	682b      	ldr	r3, [r5, #0]
 800aa1a:	b103      	cbz	r3, 800aa1e <_sbrk_r+0x1a>
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	bd38      	pop	{r3, r4, r5, pc}
 800aa20:	2000529c 	.word	0x2000529c

0800aa24 <_free_r>:
 800aa24:	b538      	push	{r3, r4, r5, lr}
 800aa26:	4605      	mov	r5, r0
 800aa28:	2900      	cmp	r1, #0
 800aa2a:	d041      	beq.n	800aab0 <_free_r+0x8c>
 800aa2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa30:	1f0c      	subs	r4, r1, #4
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	bfb8      	it	lt
 800aa36:	18e4      	addlt	r4, r4, r3
 800aa38:	f7ff ff90 	bl	800a95c <__malloc_lock>
 800aa3c:	4a1d      	ldr	r2, [pc, #116]	@ (800aab4 <_free_r+0x90>)
 800aa3e:	6813      	ldr	r3, [r2, #0]
 800aa40:	b933      	cbnz	r3, 800aa50 <_free_r+0x2c>
 800aa42:	6063      	str	r3, [r4, #4]
 800aa44:	6014      	str	r4, [r2, #0]
 800aa46:	4628      	mov	r0, r5
 800aa48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa4c:	f7ff bf8c 	b.w	800a968 <__malloc_unlock>
 800aa50:	42a3      	cmp	r3, r4
 800aa52:	d908      	bls.n	800aa66 <_free_r+0x42>
 800aa54:	6820      	ldr	r0, [r4, #0]
 800aa56:	1821      	adds	r1, r4, r0
 800aa58:	428b      	cmp	r3, r1
 800aa5a:	bf01      	itttt	eq
 800aa5c:	6819      	ldreq	r1, [r3, #0]
 800aa5e:	685b      	ldreq	r3, [r3, #4]
 800aa60:	1809      	addeq	r1, r1, r0
 800aa62:	6021      	streq	r1, [r4, #0]
 800aa64:	e7ed      	b.n	800aa42 <_free_r+0x1e>
 800aa66:	461a      	mov	r2, r3
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	b10b      	cbz	r3, 800aa70 <_free_r+0x4c>
 800aa6c:	42a3      	cmp	r3, r4
 800aa6e:	d9fa      	bls.n	800aa66 <_free_r+0x42>
 800aa70:	6811      	ldr	r1, [r2, #0]
 800aa72:	1850      	adds	r0, r2, r1
 800aa74:	42a0      	cmp	r0, r4
 800aa76:	d10b      	bne.n	800aa90 <_free_r+0x6c>
 800aa78:	6820      	ldr	r0, [r4, #0]
 800aa7a:	4401      	add	r1, r0
 800aa7c:	1850      	adds	r0, r2, r1
 800aa7e:	4283      	cmp	r3, r0
 800aa80:	6011      	str	r1, [r2, #0]
 800aa82:	d1e0      	bne.n	800aa46 <_free_r+0x22>
 800aa84:	6818      	ldr	r0, [r3, #0]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	6053      	str	r3, [r2, #4]
 800aa8a:	4408      	add	r0, r1
 800aa8c:	6010      	str	r0, [r2, #0]
 800aa8e:	e7da      	b.n	800aa46 <_free_r+0x22>
 800aa90:	d902      	bls.n	800aa98 <_free_r+0x74>
 800aa92:	230c      	movs	r3, #12
 800aa94:	602b      	str	r3, [r5, #0]
 800aa96:	e7d6      	b.n	800aa46 <_free_r+0x22>
 800aa98:	6820      	ldr	r0, [r4, #0]
 800aa9a:	1821      	adds	r1, r4, r0
 800aa9c:	428b      	cmp	r3, r1
 800aa9e:	bf04      	itt	eq
 800aaa0:	6819      	ldreq	r1, [r3, #0]
 800aaa2:	685b      	ldreq	r3, [r3, #4]
 800aaa4:	6063      	str	r3, [r4, #4]
 800aaa6:	bf04      	itt	eq
 800aaa8:	1809      	addeq	r1, r1, r0
 800aaaa:	6021      	streq	r1, [r4, #0]
 800aaac:	6054      	str	r4, [r2, #4]
 800aaae:	e7ca      	b.n	800aa46 <_free_r+0x22>
 800aab0:	bd38      	pop	{r3, r4, r5, pc}
 800aab2:	bf00      	nop
 800aab4:	20005298 	.word	0x20005298

0800aab8 <_malloc_usable_size_r>:
 800aab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aabc:	1f18      	subs	r0, r3, #4
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	bfbc      	itt	lt
 800aac2:	580b      	ldrlt	r3, [r1, r0]
 800aac4:	18c0      	addlt	r0, r0, r3
 800aac6:	4770      	bx	lr

0800aac8 <_init>:
 800aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaca:	bf00      	nop
 800aacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aace:	bc08      	pop	{r3}
 800aad0:	469e      	mov	lr, r3
 800aad2:	4770      	bx	lr

0800aad4 <_fini>:
 800aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad6:	bf00      	nop
 800aad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aada:	bc08      	pop	{r3}
 800aadc:	469e      	mov	lr, r3
 800aade:	4770      	bx	lr
